{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ZoraNFTCreatorV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {ERC721DropProxy} from \\\"./ERC721DropProxy.sol\\\";\\nimport {Version} from \\\"./utils/Version.sol\\\";\\nimport {EditionMetadataRenderer} from \\\"./metadata/EditionMetadataRenderer.sol\\\";\\nimport {IERC721Drop} from \\\"./interfaces/IERC721Drop.sol\\\";\\nimport {DropMetadataRenderer} from \\\"./metadata/DropMetadataRenderer.sol\\\";\\nimport {IMetadataRenderer} from \\\"./interfaces/IMetadataRenderer.sol\\\";\\nimport {ERC721Drop} from \\\"./ERC721Drop.sol\\\";\\n\\n/// @notice Zora NFT Creator V1\\ncontract ZoraNFTCreatorV1 is\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    Version(2)\\n{\\n    string private constant CANNOT_BE_ZERO = \\\"Cannot be 0 address\\\";\\n\\n    /// @notice Emitted when a edition is created reserving the corresponding token IDs.\\n    event CreatedDrop(\\n        address indexed creator,\\n        address indexed editionContractAddress,\\n        uint256 editionSize\\n    );\\n\\n    /// @notice Address for implementation of ZoraNFTBase to clone\\n    address public immutable implementation;\\n\\n    /// @notice Edition metdata renderer\\n    EditionMetadataRenderer public immutable editionMetadataRenderer;\\n\\n    /// @notice Drop metdata renderer\\n    DropMetadataRenderer public immutable dropMetadataRenderer;\\n\\n    /// @notice Initializes factory with address of implementation logic\\n    /// @param _implementation SingleEditionMintable logic implementation contract to clone\\n    /// @param _editionMetadataRenderer Metadata renderer for editions\\n    /// @param _dropMetadataRenderer Metadata renderer for drops\\n    constructor(\\n        address _implementation,\\n        EditionMetadataRenderer _editionMetadataRenderer,\\n        DropMetadataRenderer _dropMetadataRenderer\\n    ) {\\n        require(_implementation != address(0), CANNOT_BE_ZERO);\\n        require(\\n            address(_editionMetadataRenderer) != address(0),\\n            CANNOT_BE_ZERO\\n        );\\n        require(address(_dropMetadataRenderer) != address(0), CANNOT_BE_ZERO);\\n\\n        implementation = _implementation;\\n        editionMetadataRenderer = _editionMetadataRenderer;\\n        dropMetadataRenderer = _dropMetadataRenderer;\\n    }\\n\\n    /// @dev Initializes the proxy contract\\n    function initialize() external initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /// @dev Function to determine who is allowed to upgrade this contract.\\n    /// @param _newImplementation: unused in access check\\n    function _authorizeUpgrade(address _newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    /// @dev Internal function to setup the media contract across all metadata types\\n    /// @param name Name for new contract (cannot be changed)\\n    /// @param symbol Symbol for new contract (cannot be changed)\\n    /// @param defaultAdmin Default admin address\\n    /// @param editionSize The max size of the media contract allowed\\n    /// @param royaltyBPS BPS for on-chain royalties (cannot be changed)\\n    /// @param fundsRecipient recipient for sale funds and, unless overridden, royalties\\n    function _setupMediaContract(\\n        string memory name,\\n        string memory symbol,\\n        address defaultAdmin,\\n        uint64 editionSize,\\n        uint16 royaltyBPS,\\n        address payable fundsRecipient,\\n        IERC721Drop.SalesConfiguration memory saleConfig,\\n        IMetadataRenderer metadataRenderer,\\n        bytes memory metadataInitializer\\n    ) internal returns (address) {\\n        ERC721DropProxy newDrop = new ERC721DropProxy(\\n            implementation, \\\"\\\"\\n        );\\n\\n        address payable newDropAddress = payable(address(newDrop));\\n\\n        ERC721Drop(newDropAddress).initialize(\\n            name,\\n            symbol,\\n            defaultAdmin,\\n            fundsRecipient,\\n            editionSize,\\n            royaltyBPS,\\n            saleConfig,\\n            metadataRenderer,\\n            metadataInitializer\\n        );\\n\\n        emit CreatedDrop({creator: msg.sender, editionSize: editionSize, editionContractAddress: newDropAddress});\\n\\n        return newDropAddress;\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |                    ,----------------.              ,----------.\\n    //        / \\\\                   |ZoraNFTCreatorV1|              |ERC721Drop|\\n    //      Caller                  `-------+--------'              `----+-----'\\n    //        |                       createDrop()                       |\\n    //        | --------------------------------------------------------->\\n    //        |                             |                            |\\n    //        |                             |----.\\n    //        |                             |    | initialize NFT metadata\\n    //        |                             |<---'\\n    //        |                             |                            |\\n    //        |                             |           deploy           |\\n    //        |                             | --------------------------->\\n    //        |                             |                            |\\n    //        |                             |       initialize drop      |\\n    //        |                             | --------------------------->\\n    //        |                             |                            |\\n    //        |                             |----.                       |\\n    //        |                             |    | emit CreatedDrop      |\\n    //        |                             |<---'                       |\\n    //        |                             |                            |\\n    //        | return drop contract address|                            |\\n    //        | <----------------------------                            |\\n    //      Caller                  ,-------+--------.              ,----+-----.\\n    //        ,-.                   |ZoraNFTCreatorV1|              |ERC721Drop|\\n    //        `-'                   `----------------'              `----------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @dev Setup the media contract for a drop\\n    /// @param name Name for new contract (cannot be changed)\\n    /// @param symbol Symbol for new contract (cannot be changed)\\n    /// @param defaultAdmin Default admin address\\n    /// @param editionSize The max size of the media contract allowed\\n    /// @param royaltyBPS BPS for on-chain royalties (cannot be changed)\\n    /// @param fundsRecipient recipient for sale funds and, unless overridden, royalties\\n    /// @param metadataURIBase URI Base for metadata\\n    /// @param metadataContractURI URI for contract metadata\\n    function createDrop(\\n        string memory name,\\n        string memory symbol,\\n        address defaultAdmin,\\n        uint64 editionSize,\\n        uint16 royaltyBPS,\\n        address payable fundsRecipient,\\n        IERC721Drop.SalesConfiguration memory saleConfig,\\n        string memory metadataURIBase,\\n        string memory metadataContractURI\\n    ) external returns (address) {\\n        bytes memory metadataInitializer = abi.encode(\\n            metadataURIBase,\\n            metadataContractURI\\n        );\\n        return\\n            _setupMediaContract({\\n                defaultAdmin: defaultAdmin,\\n                name: name,\\n                symbol: symbol,\\n                royaltyBPS: royaltyBPS,\\n                editionSize: editionSize,\\n                fundsRecipient: fundsRecipient,\\n                saleConfig: saleConfig,\\n                metadataRenderer: dropMetadataRenderer,\\n                metadataInitializer: metadataInitializer\\n            });\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |                    ,----------------.              ,----------.\\n    //        / \\\\                   |ZoraNFTCreatorV1|              |ERC721Drop|\\n    //      Caller                  `-------+--------'              `----+-----'\\n    //        |                      createEdition()                     |\\n    //        | --------------------------------------------------------->\\n    //        |                             |                            |\\n    //        |                             |----.\\n    //        |                             |    | initialize NFT metadata\\n    //        |                             |<---'\\n    //        |                             |                            |\\n    //        |                             |           deploy           |\\n    //        |                             | --------------------------->\\n    //        |                             |                            |\\n    //        |                             |     initialize edition     |\\n    //        |                             | --------------------------->\\n    //        |                             |                            |\\n    //        |                             |----.                       |\\n    //        |                             |    | emit CreatedDrop      |\\n    //        |                             |<---'                       |\\n    //        |                             |                            |\\n    //        | return drop contract address|                            |\\n    //        | <----------------------------                            |\\n    //      Caller                  ,-------+--------.              ,----+-----.\\n    //        ,-.                   |ZoraNFTCreatorV1|              |ERC721Drop|\\n    //        `-'                   `----------------'              `----------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\                                                               \\n    /// @notice Creates a new edition contract as a factory with a deterministic address\\n    /// @notice Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param name Name of the edition contract\\n    /// @param symbol Symbol of the edition contract\\n    /// @param defaultAdmin Default admin address\\n    /// @param editionSize Total size of the edition (number of possible editions)\\n    /// @param royaltyBPS BPS amount of royalty\\n    /// @param fundsRecipient Funds recipient for the NFT sale\\n    /// @param description Metadata: Description of the edition entry\\n    /// @param animationURI Metadata: Animation url (optional) of the edition entry\\n    /// @param imageURI Metadata: Image url (semi-required) of the edition entry\\n    function createEdition(\\n        string memory name,\\n        string memory symbol,\\n        uint64 editionSize,\\n        uint16 royaltyBPS,\\n        address payable fundsRecipient,\\n        address defaultAdmin,\\n        IERC721Drop.SalesConfiguration memory saleConfig,\\n        string memory description,\\n        string memory animationURI,\\n        string memory imageURI\\n    ) external returns (address) {\\n        bytes memory metadataInitializer = abi.encode(\\n            description,\\n            imageURI,\\n            animationURI\\n        );\\n\\n        return\\n            _setupMediaContract({\\n                name: name,\\n                symbol: symbol,\\n                defaultAdmin: defaultAdmin,\\n                editionSize: editionSize,\\n                royaltyBPS: royaltyBPS,\\n                saleConfig: saleConfig,\\n                fundsRecipient: fundsRecipient,\\n                metadataRenderer: editionMetadataRenderer,\\n                metadataInitializer: metadataInitializer\\n            });\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/ERC721DropProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n\\n/// @dev Zora NFT Creator Proxy Access Contract\\ncontract ERC721DropProxy is ERC1967Proxy {\\n    constructor(address _logic, bytes memory _data)\\n        payable\\n        ERC1967Proxy(_logic, _data)\\n    {}\\n}\"\r\n    },\r\n    \"src/utils/Version.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ncontract Version {\\n  uint32 private immutable __version;\\n\\n  /// @notice The version of the contract\\n  /// @return The version ID of this contract implementation\\n  function contractVersion() external view returns (uint32) {\\n      return __version;\\n  }\\n\\n  constructor(uint32 version) {\\n    __version = version;\\n  }\\n}\"\r\n    },\r\n    \"src/metadata/EditionMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\nimport {IERC721Drop} from \\\"../interfaces/IERC721Drop.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\nimport {SharedNFTLogic} from \\\"../utils/SharedNFTLogic.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\n/// @notice EditionMetadataRenderer for editions support\\ncontract EditionMetadataRenderer is IMetadataRenderer, MetadataRenderAdminCheck {\\n    /// @notice Storage for token edition information\\n    struct TokenEditionInfo {\\n        string description;\\n        string imageURI;\\n        string animationURI;\\n    }\\n\\n    /// @notice Event for updated Media URIs\\n    event MediaURIsUpdated(\\n        address indexed target,\\n        address sender,\\n        string imageURI,\\n        string animationURI\\n    );\\n\\n    /// @notice Event for a new edition initialized\\n    /// @dev admin function indexer feedback\\n    event EditionInitialized(\\n        address indexed target,\\n        string description,\\n        string imageURI,\\n        string animationURI\\n    );\\n\\n    /// @notice Description updated for this edition\\n    /// @dev admin function indexer feedback\\n    event DescriptionUpdated(\\n        address indexed target,\\n        address sender,\\n        string newDescription\\n    );\\n\\n    /// @notice Token information mapping storage\\n    mapping(address => TokenEditionInfo) public tokenInfos;\\n\\n    /// @notice Reference to Shared NFT logic library\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    /// @notice Constructor for library\\n    /// @param _sharedNFTLogic reference to shared NFT logic library\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /// @notice Update media URIs\\n    /// @param target target for contract to update metadata for\\n    /// @param imageURI new image uri address\\n    /// @param animationURI new animation uri address\\n    function updateMediaURIs(\\n        address target,\\n        string memory imageURI,\\n        string memory animationURI\\n    ) external requireSenderAdmin(target) {\\n        tokenInfos[target].imageURI = imageURI;\\n        tokenInfos[target].animationURI = animationURI;\\n        emit MediaURIsUpdated({\\n            target: target,\\n            sender: msg.sender,\\n            imageURI: imageURI,\\n            animationURI: animationURI\\n        });\\n    }\\n\\n    /// @notice Admin function to update description\\n    /// @param target target description\\n    /// @param newDescription new description\\n    function updateDescription(address target, string memory newDescription)\\n        external\\n        requireSenderAdmin(target)\\n    {\\n        tokenInfos[target].description = newDescription;\\n\\n        emit DescriptionUpdated({\\n            target: target,\\n            sender: msg.sender,\\n            newDescription: newDescription\\n        });\\n    }\\n\\n    /// @notice Default initializer for edition data from a specific contract\\n    /// @param data data to init with\\n    function initializeWithData(bytes memory data) external {\\n        // data format: description, imageURI, animationURI\\n        (\\n            string memory description,\\n            string memory imageURI,\\n            string memory animationURI\\n        ) = abi.decode(data, (string, string, string));\\n\\n        tokenInfos[msg.sender] = TokenEditionInfo({\\n            description: description,\\n            imageURI: imageURI,\\n            animationURI: animationURI\\n        });\\n        emit EditionInitialized({\\n            target: msg.sender,\\n            description: description,\\n            imageURI: imageURI,\\n            animationURI: animationURI\\n        });\\n    }\\n\\n    /// @notice Contract URI information getter\\n    /// @return contract uri (if set)\\n    function contractURI() external view override returns (string memory) {\\n        address target = msg.sender;\\n        bytes memory imageSpace = bytes(\\\"\\\");\\n        if (bytes(tokenInfos[target].imageURI).length > 0) {\\n            imageSpace = abi.encodePacked(\\n                '\\\", \\\"image\\\": \\\"',\\n                tokenInfos[target].imageURI\\n            );\\n        }\\n        return\\n            string(\\n                sharedNFTLogic.encodeMetadataJSON(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',\\n                        IERC721MetadataUpgradeable(target).name(),\\n                        '\\\", \\\"description\\\": \\\"',\\n                        tokenInfos[target].description,\\n                        imageSpace,\\n                        '\\\"}'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice Token URI information getter\\n    /// @param tokenId to get uri for\\n    /// @return contract uri (if set)\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        address target = msg.sender;\\n\\n        TokenEditionInfo memory info = tokenInfos[target];\\n        IERC721Drop media = IERC721Drop(target);\\n\\n        uint256 maxSupply = media.saleDetails().maxSupply;\\n\\n        // For open editions, set max supply to 0 for renderer to remove the edition max number\\n        // This will be added back on once the open edition is \\\"finalized\\\"\\n        if (maxSupply == type(uint64).max) {\\n            maxSupply = 0;\\n        }\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition({\\n                name: IERC721MetadataUpgradeable(target).name(),\\n                description: info.description,\\n                imageUrl: info.imageURI,\\n                animationUrl: info.animationURI,\\n                tokenOfEdition: tokenId,\\n                editionSize: media.saleDetails().maxSupply\\n            });\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC721Drop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\n\\n/**\\n\\n ________   _____   ____    ______      ____\\n/\\\\_____  \\\\ /\\\\  __`\\\\/\\\\  _`\\\\ /\\\\  _  \\\\    /\\\\  _`\\\\\\n\\\\/____//'/'\\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\L\\\\ \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\  _ __   ___   _____     ____\\n     //'/'  \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ ,  /\\\\ \\\\  __ \\\\   \\\\ \\\\ \\\\ \\\\ \\\\/\\\\`'__\\\\/ __`\\\\/\\\\ '__`\\\\  /',__\\\\\\n    //'/'___ \\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\//\\\\ \\\\L\\\\ \\\\ \\\\ \\\\L\\\\ \\\\/\\\\__, `\\\\\\n    /\\\\_______\\\\\\\\ \\\\_____\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\____/\\\\ \\\\_\\\\\\\\ \\\\____/\\\\ \\\\ ,__/\\\\/\\\\____/\\n    \\\\/_______/ \\\\/_____/\\\\/_/\\\\/ /\\\\/_/\\\\/_/    \\\\/___/  \\\\/_/ \\\\/___/  \\\\ \\\\ \\\\/  \\\\/___/\\n                                                                 \\\\ \\\\_\\\\\\n                                                                  \\\\/_/\\n\\n*/\\n\\n/// @notice Interface for ZORA Drops contract\\ninterface IERC721Drop {\\n    // Access errors\\n\\n    /// @notice Only admin can access this function\\n    error Access_OnlyAdmin();\\n    /// @notice Missing the given role or admin access\\n    error Access_MissingRoleOrAdmin(bytes32 role);\\n    /// @notice Withdraw is not allowed by this user\\n    error Access_WithdrawNotAllowed();\\n    /// @notice Cannot withdraw funds due to ETH send failure.\\n    error Withdraw_FundsSendFailure();\\n\\n    // Sale/Purchase errors\\n    /// @notice Sale is inactive\\n    error Sale_Inactive();\\n    /// @notice Presale is inactive\\n    error Presale_Inactive();\\n    /// @notice Presale merkle root is invalid\\n    error Presale_MerkleNotApproved();\\n    /// @notice Wrong price for purchase\\n    error Purchase_WrongPrice(uint256 correctPrice);\\n    /// @notice NFT sold out\\n    error Mint_SoldOut();\\n    /// @notice Too many purchase for address\\n    error Purchase_TooManyForAddress();\\n    /// @notice Too many presale for address\\n    error Presale_TooManyForAddress();\\n\\n    // Admin errors\\n    /// @notice Royalty percentage too high\\n    error Setup_RoyaltyPercentageTooHigh(uint16 maxRoyaltyBPS);\\n    /// @notice Invalid admin upgrade address\\n    error Admin_InvalidUpgradeAddress(address proposedAddress);\\n    /// @notice Unable to finalize an edition not marked as open (size set to uint64_max_value)\\n    error Admin_UnableToFinalizeNotOpenEdition();\\n\\n    /// @notice Event emitted for each sale\\n    /// @param to address sale was made to\\n    /// @param quantity quantity of the minted nfts\\n    /// @param pricePerToken price for each token\\n    /// @param firstPurchasedTokenId first purchased token ID (to get range add to quantity for max)\\n    event Sale(\\n        address indexed to,\\n        uint256 indexed quantity,\\n        uint256 indexed pricePerToken,\\n        uint256 firstPurchasedTokenId\\n    );\\n\\n    /// @notice General configuration for NFT Minting and bookkeeping\\n    struct Configuration {\\n        /// @dev Metadata renderer (uint160)\\n        IMetadataRenderer metadataRenderer;\\n        /// @dev Total size of edition that can be minted (uint160+64 = 224)\\n        uint64 editionSize;\\n        /// @dev Royalty amount in bps (uint224+16 = 240)\\n        uint16 royaltyBPS;\\n        /// @dev Funds recipient for sale (new slot, uint160)\\n        address payable fundsRecipient;\\n    }\\n\\n    /// @notice Sales states and configuration\\n    /// @dev Uses 3 storage slots\\n    struct SalesConfiguration {\\n        /// @dev Public sale price (max ether value > 1000 ether with this value)\\n        uint104 publicSalePrice;\\n        /// @notice Purchase mint limit per address (if set to 0 === unlimited mints)\\n        /// @dev Max purchase number per txn (90+32 = 122)\\n        uint32 maxSalePurchasePerAddress;\\n        /// @dev uint64 type allows for dates into 292 billion years\\n        /// @notice Public sale start timestamp (136+64 = 186)\\n        uint64 publicSaleStart;\\n        /// @notice Public sale end timestamp (186+64 = 250)\\n        uint64 publicSaleEnd;\\n        /// @notice Presale start timestamp\\n        /// @dev new storage slot\\n        uint64 presaleStart;\\n        /// @notice Presale end timestamp\\n        uint64 presaleEnd;\\n        /// @notice Presale merkle root\\n        bytes32 presaleMerkleRoot;\\n    }\\n\\n    /// @notice Return value for sales details to use with front-ends\\n    struct SaleDetails {\\n        // Synthesized status variables for sale and presale\\n        bool publicSaleActive;\\n        bool presaleActive;\\n        // Price for public sale\\n        uint256 publicSalePrice;\\n        // Timed sale actions for public sale\\n        uint64 publicSaleStart;\\n        uint64 publicSaleEnd;\\n        // Timed sale actions for presale\\n        uint64 presaleStart;\\n        uint64 presaleEnd;\\n        // Merkle root (includes address, quantity, and price data for each entry)\\n        bytes32 presaleMerkleRoot;\\n        // Limit public sale to a specific number of mints per wallet\\n        uint256 maxSalePurchasePerAddress;\\n        // Information about the rest of the supply\\n        // Total that have been minted\\n        uint256 totalMinted;\\n        // The total supply available\\n        uint256 maxSupply;\\n    }\\n\\n    /// @notice Return type of specific mint counts and details per address\\n    struct AddressMintDetails {\\n        /// Number of total mints from the given address\\n        uint256 totalMints;\\n        /// Number of presale mints from the given address\\n        uint256 presaleMints;\\n        /// Number of public mints from the given address\\n        uint256 publicMints;\\n    }\\n\\n    /// @notice External purchase function (payable in eth)\\n    /// @param quantity to purchase\\n    /// @return first minted token ID\\n    function purchase(uint256 quantity) external payable returns (uint256);\\n\\n    /// @notice External purchase presale function (takes a merkle proof and matches to root) (payable in eth)\\n    /// @param quantity to purchase\\n    /// @param maxQuantity can purchase (verified by merkle root)\\n    /// @param pricePerToken price per token allowed (verified by merkle root)\\n    /// @param merkleProof input for merkle proof leaf verified by merkle root\\n    /// @return first minted token ID\\n    function purchasePresale(\\n        uint256 quantity,\\n        uint256 maxQuantity,\\n        uint256 pricePerToken,\\n        bytes32[] memory merkleProof\\n    ) external payable returns (uint256);\\n\\n    /// @notice Function to return the global sales details for the given drop\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n    /// @notice Function to return the specific sales details for a given address\\n    /// @param minter address for minter to return mint information for\\n    function mintedPerAddress(address minter)\\n        external\\n        view\\n        returns (AddressMintDetails memory);\\n\\n    /// @notice This is the opensea/public owner setting that can be set by the contract admin\\n    function owner() external view returns (address);\\n\\n    /// @notice This is an admin mint function to mint a quantity to a specific address\\n    /// @param to address to mint to\\n    /// @param quantity quantity to mint\\n    /// @return the id of the first minted NFT\\n    function adminMint(address to, uint256 quantity) external returns (uint256);\\n\\n    /// @notice This is an admin mint function to mint a single nft each to a list of addresses\\n    /// @param to list of addresses to mint an NFT each to\\n    /// @return the id of the first minted NFT\\n    function adminMintAirdrop(address[] memory to) external returns (uint256);\\n\\n    /// @dev Getter for admin role associated with the contract to handle metadata\\n    /// @return boolean if address is admin\\n    function isAdmin(address user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/metadata/DropMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {IMetadataRenderer} from \\\"../interfaces/IMetadataRenderer.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\n/// @notice Drops metadata system\\ncontract DropMetadataRenderer is IMetadataRenderer, MetadataRenderAdminCheck {\\n    error MetadataFrozen();\\n\\n    /// Event to mark updated metadata information\\n    event MetadataUpdated(\\n        address indexed target,\\n        string metadataBase,\\n        string metadataExtension,\\n        string contractURI,\\n        uint256 freezeAt\\n    );\\n\\n    /// @notice Hash to mark updated provenance hash\\n    event ProvenanceHashUpdated(address indexed target, bytes32 provenanceHash);\\n\\n    /// @notice Struct to store metadata info and update data\\n    struct MetadataURIInfo {\\n        string base;\\n        string extension;\\n        string contractURI;\\n        uint256 freezeAt;\\n    }\\n\\n    /// @notice NFT metadata by contract\\n    mapping(address => MetadataURIInfo) public metadataBaseByContract;\\n\\n    /// @notice Optional provenance hashes for NFT metadata by contract\\n    mapping(address => bytes32) public provenanceHashes;\\n\\n    /// @notice Standard init for drop metadata from root drop contract\\n    /// @param data passed in for initialization\\n    function initializeWithData(bytes memory data) external {\\n        // data format: string baseURI, string newContractURI\\n        (string memory initialBaseURI, string memory initialContractURI) = abi\\n            .decode(data, (string, string));\\n        _updateMetadataDetails(\\n            msg.sender,\\n            initialBaseURI,\\n            \\\"\\\",\\n            initialContractURI,\\n            0\\n        );\\n    }\\n\\n    /// @notice Update the provenance hash (optional) for a given nft\\n    /// @param target target address to update\\n    /// @param provenanceHash provenance hash to set\\n    function updateProvenanceHash(address target, bytes32 provenanceHash)\\n        external\\n        requireSenderAdmin(target)\\n    {\\n        provenanceHashes[target] = provenanceHash;\\n        emit ProvenanceHashUpdated(target, provenanceHash);\\n    }\\n\\n    /// @notice Update metadata base URI and contract URI\\n    /// @param baseUri new base URI\\n    /// @param newContractUri new contract URI (can be an empty string)\\n    function updateMetadataBase(\\n        address target,\\n        string memory baseUri,\\n        string memory newContractUri\\n    ) external requireSenderAdmin(target) {\\n        _updateMetadataDetails(target, baseUri, \\\"\\\", newContractUri, 0);\\n    }\\n\\n    /// @notice Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details\\n    /// @param target target contract to update metadata for\\n    /// @param metadataBase new base URI to update metadata with\\n    /// @param metadataExtension new extension to append to base metadata URI\\n    /// @param freezeAt time to freeze the contract metadata at (set to 0 to disable)\\n    function updateMetadataBaseWithDetails(\\n        address target,\\n        string memory metadataBase,\\n        string memory metadataExtension,\\n        string memory newContractURI,\\n        uint256 freezeAt\\n    ) external requireSenderAdmin(target) {\\n        _updateMetadataDetails(\\n            target,\\n            metadataBase,\\n            metadataExtension,\\n            newContractURI,\\n            freezeAt\\n        );\\n    }\\n\\n    /// @notice Internal metadata update function\\n    /// @param metadataBase Base URI to update metadata for\\n    /// @param metadataExtension Extension URI to update metadata for\\n    /// @param freezeAt timestamp to freeze metadata (set to 0 to disable freezing)\\n    function _updateMetadataDetails(\\n        address target,\\n        string memory metadataBase,\\n        string memory metadataExtension,\\n        string memory newContractURI,\\n        uint256 freezeAt\\n    ) internal {\\n        if (freezeAt != 0 && freezeAt > block.timestamp) {\\n            revert MetadataFrozen();\\n        }\\n\\n        metadataBaseByContract[target] = MetadataURIInfo({\\n            base: metadataBase,\\n            extension: metadataExtension,\\n            contractURI: newContractURI,\\n            freezeAt: freezeAt\\n        });\\n        emit MetadataUpdated({\\n            target: target,\\n            metadataBase: metadataBase,\\n            metadataExtension: metadataExtension,\\n            contractURI: newContractURI,\\n            freezeAt: freezeAt\\n        });\\n    }\\n\\n    /// @notice A contract URI for the given drop contract\\n    /// @dev reverts if a contract uri is not provided\\n    /// @return contract uri for the contract metadata\\n    function contractURI() external view override returns (string memory) {\\n        string memory uri = metadataBaseByContract[msg.sender].contractURI;\\n        if (bytes(uri).length == 0) revert();\\n        return uri;\\n    }\\n\\n    /// @notice A token URI for the given drops contract\\n    /// @dev reverts if a contract uri is not set\\n    /// @return token URI for the given token ID and contract (set by msg.sender)\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        MetadataURIInfo memory info = metadataBaseByContract[msg.sender];\\n\\n        if (bytes(info.base).length == 0) revert();\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    info.base,\\n                    StringsUpgradeable.toString(tokenId),\\n                    info.extension\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IMetadataRenderer {\\n    function tokenURI(uint256) external view returns (string memory);\\n    function contractURI() external view returns (string memory);\\n    function initializeWithData(bytes memory initData) external;\\n}\\n\"\r\n    },\r\n    \"src/ERC721Drop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n\\n ________   _____   ____    ______      ____\\n/\\\\_____  \\\\ /\\\\  __`\\\\/\\\\  _`\\\\ /\\\\  _  \\\\    /\\\\  _`\\\\\\n\\\\/____//'/'\\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\L\\\\ \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\  _ __   ___   _____     ____\\n     //'/'  \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ ,  /\\\\ \\\\  __ \\\\   \\\\ \\\\ \\\\ \\\\ \\\\/\\\\`'__\\\\/ __`\\\\/\\\\ '__`\\\\  /',__\\\\\\n    //'/'___ \\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\ \\\\_\\\\ \\\\ \\\\ \\\\//\\\\ \\\\L\\\\ \\\\ \\\\ \\\\L\\\\ \\\\/\\\\__, `\\\\\\n    /\\\\_______\\\\\\\\ \\\\_____\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\____/\\\\ \\\\_\\\\\\\\ \\\\____/\\\\ \\\\ ,__/\\\\/\\\\____/\\n    \\\\/_______/ \\\\/_____/\\\\/_/\\\\/ /\\\\/_/\\\\/_/    \\\\/___/  \\\\/_/ \\\\/___/  \\\\ \\\\ \\\\/  \\\\/___/\\n                                                                 \\\\ \\\\_\\\\\\n                                                                  \\\\/_/\\n\\n */\\n\\nimport {ERC721AUpgradeable} from \\\"erc721a-upgradeable/ERC721AUpgradeable.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/IERC721AUpgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport {IZoraFeeManager} from \\\"./interfaces/IZoraFeeManager.sol\\\";\\nimport {IMetadataRenderer} from \\\"./interfaces/IMetadataRenderer.sol\\\";\\nimport {IERC721Drop} from \\\"./interfaces/IERC721Drop.sol\\\";\\nimport {IOwnable} from \\\"./interfaces/IOwnable.sol\\\";\\n\\nimport {OwnableSkeleton} from \\\"./utils/OwnableSkeleton.sol\\\";\\nimport {FundsReceiver} from \\\"./utils/FundsReceiver.sol\\\";\\nimport {Version} from \\\"./utils/Version.sol\\\";\\nimport {FactoryUpgradeGate} from \\\"./FactoryUpgradeGate.sol\\\";\\nimport {ERC721DropStorageV1} from \\\"./storage/ERC721DropStorageV1.sol\\\";\\n\\n/**\\n * @notice ZORA NFT Base contract for Drops and Editions\\n *\\n * @dev For drops: assumes 1. linear mint order, 2. max number of mints needs to be less than max_uint64\\n *       (if you have more than 18 quintillion linear mints you should probably not be using this contract)\\n * @author iain@zora.co\\n *\\n */\\ncontract ERC721Drop is\\n    ERC721AUpgradeable,\\n    UUPSUpgradeable,\\n    IERC2981Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlUpgradeable,\\n    IERC721Drop,\\n    OwnableSkeleton,\\n    FundsReceiver,\\n    Version(7),\\n    ERC721DropStorageV1\\n{\\n    /// @dev This is the max mint batch size for the optimized ERC721A mint contract\\n    uint256 internal constant MAX_MINT_BATCH_SIZE = 8;\\n\\n    /// @dev Gas limit to send funds\\n    uint256 internal constant FUNDS_SEND_GAS_LIMIT = 210_000;\\n\\n    /// @notice Access control roles\\n    bytes32 public immutable MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n    bytes32 public immutable SALES_MANAGER_ROLE = keccak256(\\\"SALES_MANAGER\\\");\\n\\n    /// @dev ZORA V3 transfer helper address for auto-approval\\n    address internal immutable zoraERC721TransferHelper;\\n\\n    /// @dev Factory upgrade gate\\n    FactoryUpgradeGate internal immutable factoryUpgradeGate;\\n\\n    /// @dev Zora Fee Manager address\\n    IZoraFeeManager public immutable zoraFeeManager;\\n\\n    /// @notice Max royalty BPS\\n    uint16 constant MAX_ROYALTY_BPS = 50_00;\\n\\n    event SalesConfigChanged(address indexed changedBy);\\n\\n    event FundsRecipientChanged(\\n        address indexed newAddress,\\n        address indexed changedBy\\n    );\\n\\n    event OpenMintFinalized(address indexed sender, uint256 numberOfMints);\\n\\n    /// @notice Only allow for users with admin access\\n    modifier onlyAdmin() {\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\\n            revert Access_OnlyAdmin();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Only a given role has access or admin\\n    /// @param role role to check for alongside the admin role\\n    modifier onlyRoleOrAdmin(bytes32 role) {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) &&\\n            !hasRole(role, msg.sender)\\n        ) {\\n            revert Access_MissingRoleOrAdmin(role);\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Allows user to mint tokens at a quantity\\n    modifier canMintTokens(uint256 quantity) {\\n        if (quantity + _totalMinted() > config.editionSize) {\\n            revert Mint_SoldOut();\\n        }\\n\\n        _;\\n    }\\n\\n    function _presaleActive() internal view returns (bool) {\\n        return\\n            salesConfig.presaleStart <= block.timestamp &&\\n            salesConfig.presaleEnd > block.timestamp;\\n    }\\n\\n    function _publicSaleActive() internal view returns (bool) {\\n        return\\n            salesConfig.publicSaleStart <= block.timestamp &&\\n            salesConfig.publicSaleEnd > block.timestamp;\\n    }\\n\\n    /// @notice Presale active\\n    modifier onlyPresaleActive() {\\n        if (!_presaleActive()) {\\n            revert Presale_Inactive();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Public sale active\\n    modifier onlyPublicSaleActive() {\\n        if (!_publicSaleActive()) {\\n            revert Sale_Inactive();\\n        }\\n\\n        _;\\n    }\\n\\n    /// @notice Getter for last minted token ID (gets next token id and subtracts 1)\\n    function _lastMintedTokenId() internal view returns (uint256) {\\n        return _currentIndex - 1;\\n    }\\n\\n    /// @notice Start token ID for minting (1-100 vs 0-99)\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /// @notice Global constructor \u2013\u00a0these variables will not change with further proxy deploys\\n    /// @dev Marked as an initializer to prevent storage being used of base implementation. Can only be init'd by a proxy.\\n    /// @param _zoraFeeManager Zora Fee Manager\\n    /// @param _zoraERC721TransferHelper Transfer helper\\n    constructor(\\n        IZoraFeeManager _zoraFeeManager,\\n        address _zoraERC721TransferHelper,\\n        FactoryUpgradeGate _factoryUpgradeGate\\n    ) initializer {\\n        zoraFeeManager = _zoraFeeManager;\\n        zoraERC721TransferHelper = _zoraERC721TransferHelper;\\n        factoryUpgradeGate = _factoryUpgradeGate;\\n    }\\n\\n    ///  @dev Create a new drop contract\\n    ///  @param _contractName Contract name\\n    ///  @param _contractSymbol Contract symbol\\n    ///  @param _initialOwner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n    ///  @param _fundsRecipient Wallet/user that receives funds from sale\\n    ///  @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n    ///  @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n    ///  @param _salesConfig New sales config to set upon init\\n    ///  @param _metadataRenderer Renderer contract to use\\n    ///  @param _metadataRendererInit Renderer data initial contract\\n    function initialize(\\n        string memory _contractName,\\n        string memory _contractSymbol,\\n        address _initialOwner,\\n        address payable _fundsRecipient,\\n        uint64 _editionSize,\\n        uint16 _royaltyBPS,\\n        SalesConfiguration memory _salesConfig,\\n        IMetadataRenderer _metadataRenderer,\\n        bytes memory _metadataRendererInit\\n    ) public initializer {\\n        // Setup ERC721A\\n        __ERC721A_init(_contractName, _contractSymbol);\\n        // Setup access control\\n        __AccessControl_init();\\n        // Setup re-entracy guard\\n        __ReentrancyGuard_init();\\n        // Setup the owner role\\n        _setupRole(DEFAULT_ADMIN_ROLE, _initialOwner);\\n        // Set ownership to original sender of contract call\\n        _setOwner(_initialOwner);\\n\\n        if (config.royaltyBPS > MAX_ROYALTY_BPS) {\\n            revert Setup_RoyaltyPercentageTooHigh(MAX_ROYALTY_BPS);\\n        }\\n\\n        // Update salesConfig\\n        salesConfig = _salesConfig;\\n\\n        // Setup config variables\\n        config.editionSize = _editionSize;\\n        config.metadataRenderer = _metadataRenderer;\\n        config.royaltyBPS = _royaltyBPS;\\n        config.fundsRecipient = _fundsRecipient;\\n        _metadataRenderer.initializeWithData(_metadataRendererInit);\\n    }\\n\\n    /// @dev Getter for admin role associated with the contract to handle metadata\\n    /// @return boolean if address is admin\\n    function isAdmin(address user) external view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, user);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyAdmin\\n    {\\n        if (\\n            !factoryUpgradeGate.isValidUpgradePath(\\n                newImplementation,\\n                address(this)\\n            )\\n        ) {\\n            revert Admin_InvalidUpgradeAddress(newImplementation);\\n        }\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |             ,----------.\\n    //        / \\\\            |ERC721Drop|\\n    //      Caller           `----+-----'\\n    //        |       burn()      |\\n    //        | ------------------>\\n    //        |                   |\\n    //        |                   |----.\\n    //        |                   |    | burn token\\n    //        |                   |<---'\\n    //      Caller           ,----+-----.\\n    //        ,-.            |ERC721Drop|\\n    //        `-'            `----------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @param tokenId Token ID to burn\\n    /// @notice User burn function for token id\\n    function burn(uint256 tokenId) public {\\n        _burn(tokenId, true);\\n    }\\n\\n    /// @dev Get royalty information for token\\n    /// @param _salePrice Sale price for the token\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (config.fundsRecipient == address(0)) {\\n            return (config.fundsRecipient, 0);\\n        }\\n        return (\\n            config.fundsRecipient,\\n            (_salePrice * config.royaltyBPS) / 10_000\\n        );\\n    }\\n\\n    /// @notice Sale details\\n    /// @return IERC721Drop.SaleDetails sale information details\\n    function saleDetails()\\n        external\\n        view\\n        returns (IERC721Drop.SaleDetails memory)\\n    {\\n        return\\n            IERC721Drop.SaleDetails({\\n                publicSaleActive: _publicSaleActive(),\\n                presaleActive: _presaleActive(),\\n                publicSalePrice: salesConfig.publicSalePrice,\\n                publicSaleStart: salesConfig.publicSaleStart,\\n                publicSaleEnd: salesConfig.publicSaleEnd,\\n                presaleStart: salesConfig.presaleStart,\\n                presaleEnd: salesConfig.presaleEnd,\\n                presaleMerkleRoot: salesConfig.presaleMerkleRoot,\\n                totalMinted: _totalMinted(),\\n                maxSupply: config.editionSize,\\n                maxSalePurchasePerAddress: salesConfig.maxSalePurchasePerAddress\\n            });\\n    }\\n\\n    /// @dev Number of NFTs the user has minted per address\\n    /// @param minter to get counts for\\n    function mintedPerAddress(address minter)\\n        external\\n        view\\n        override\\n        returns (IERC721Drop.AddressMintDetails memory)\\n    {\\n        return\\n            IERC721Drop.AddressMintDetails({\\n                presaleMints: presaleMintsByAddress[minter],\\n                publicMints: _numberMinted(minter) -\\n                    presaleMintsByAddress[minter],\\n                totalMints: _numberMinted(minter)\\n            });\\n    }\\n\\n    /// @dev Setup auto-approval for Zora v3 access to sell NFT\\n    ///      Still requires approval for module\\n    /// @param nftOwner owner of the nft\\n    /// @param operator operator wishing to transfer/burn/etc the NFTs\\n    function isApprovedForAll(address nftOwner, address operator)\\n        public\\n        view\\n        override(ERC721AUpgradeable)\\n        returns (bool)\\n    {\\n        if (operator == zoraERC721TransferHelper) {\\n            return true;\\n        }\\n        return super.isApprovedForAll(nftOwner, operator);\\n    }\\n\\n    /// @dev Gets the zora fee for amount of withdraw\\n    /// @param amount amount of funds to get fee for\\n    function zoraFeeForAmount(uint256 amount)\\n        public\\n        returns (address payable, uint256)\\n    {\\n        (address payable recipient, uint256 bps) = zoraFeeManager\\n            .getZORAWithdrawFeesBPS(address(this));\\n        return (recipient, (amount * bps) / 10_000);\\n    }\\n\\n    /**\\n     *** ---------------------------------- ***\\n     ***                                    ***\\n     ***     PUBLIC MINTING FUNCTIONS       ***\\n     ***                                    ***\\n     *** ---------------------------------- ***\\n     ***/\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                       ,----------.\\n    //                       / \\\\                      |ERC721Drop|\\n    //                     Caller                     `----+-----'\\n    //                       |          purchase()         |\\n    //                       | ---------------------------->\\n    //                       |                             |\\n    //                       |                             |\\n    //          ___________________________________________________________\\n    //          ! ALT  /  drop has no tokens left for caller to mint?      !\\n    //          !_____/      |                             |               !\\n    //          !            |    revert Mint_SoldOut()    |               !\\n    //          !            | <----------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                             |\\n    //                       |                             |\\n    //          ___________________________________________________________\\n    //          ! ALT  /  public sale isn't active?        |               !\\n    //          !_____/      |                             |               !\\n    //          !            |    revert Sale_Inactive()   |               !\\n    //          !            | <----------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                             |\\n    //                       |                             |\\n    //          ___________________________________________________________\\n    //          ! ALT  /  inadequate funds sent?           |               !\\n    //          !_____/      |                             |               !\\n    //          !            | revert Purchase_WrongPrice()|               !\\n    //          !            | <----------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                             |\\n    //                       |                             |----.\\n    //                       |                             |    | mint tokens\\n    //                       |                             |<---'\\n    //                       |                             |\\n    //                       |                             |----.\\n    //                       |                             |    | emit IERC721Drop.Sale()\\n    //                       |                             |<---'\\n    //                       |                             |\\n    //                       | return first minted token ID|\\n    //                       | <----------------------------\\n    //                     Caller                     ,----+-----.\\n    //                       ,-.                      |ERC721Drop|\\n    //                       `-'                      `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /**\\n      @dev This allows the user to purchase a edition edition\\n           at the given price in the contract.\\n     */\\n    function purchase(uint256 quantity)\\n        external\\n        payable\\n        nonReentrant\\n        canMintTokens(quantity)\\n        onlyPublicSaleActive\\n        returns (uint256)\\n    {\\n        uint256 salePrice = salesConfig.publicSalePrice;\\n\\n        if (msg.value != salePrice * quantity) {\\n            revert Purchase_WrongPrice(salePrice * quantity);\\n        }\\n\\n        // If max purchase per address == 0 there is no limit.\\n        // Any other number, the per address mint limit is that.\\n        if (\\n            salesConfig.maxSalePurchasePerAddress != 0 &&\\n            _numberMinted(_msgSender()) +\\n                quantity -\\n                presaleMintsByAddress[_msgSender()] >\\n            salesConfig.maxSalePurchasePerAddress\\n        ) {\\n            revert Purchase_TooManyForAddress();\\n        }\\n\\n        _mintNFTs(_msgSender(), quantity);\\n        uint256 firstMintedTokenId = _lastMintedTokenId() - quantity;\\n\\n        emit IERC721Drop.Sale({\\n            to: _msgSender(),\\n            quantity: quantity,\\n            pricePerToken: salePrice,\\n            firstPurchasedTokenId: firstMintedTokenId\\n        });\\n        return firstMintedTokenId;\\n    }\\n\\n    /// @notice Function to mint NFTs\\n    /// @dev (important: Does not enforce max supply limit, enforce that limit earlier)\\n    /// @dev This batches in size of 8 as per recommended by ERC721A creators\\n    /// @param to address to mint NFTs to\\n    /// @param quantity number of NFTs to mint\\n    function _mintNFTs(address to, uint256 quantity) internal {\\n        do {\\n            uint256 toMint = quantity > MAX_MINT_BATCH_SIZE\\n                ? MAX_MINT_BATCH_SIZE\\n                : quantity;\\n            _mint({to: to, quantity: toMint});\\n            quantity -= toMint;\\n        } while (quantity > 0);\\n    }\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                             ,----------.\\n    //                       / \\\\                            |ERC721Drop|\\n    //                     Caller                           `----+-----'\\n    //                       |         purchasePresale()         |\\n    //                       | ---------------------------------->\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  drop has no tokens left for caller to mint?            !\\n    //          !_____/      |                                   |               !\\n    //          !            |       revert Mint_SoldOut()       |               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  presale sale isn't active?             |               !\\n    //          !_____/      |                                   |               !\\n    //          !            |     revert Presale_Inactive()     |               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  merkle proof unapproved for caller?    |               !\\n    //          !_____/      |                                   |               !\\n    //          !            | revert Presale_MerkleNotApproved()|               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  inadequate funds sent?                 |               !\\n    //          !_____/      |                                   |               !\\n    //          !            |    revert Purchase_WrongPrice()   |               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | mint tokens\\n    //                       |                                   |<---'\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | emit IERC721Drop.Sale()\\n    //                       |                                   |<---'\\n    //                       |                                   |\\n    //                       |    return first minted token ID   |\\n    //                       | <----------------------------------\\n    //                     Caller                           ,----+-----.\\n    //                       ,-.                            |ERC721Drop|\\n    //                       `-'                            `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @notice Merkle-tree based presale purchase function\\n    /// @param quantity quantity to purchase\\n    /// @param maxQuantity max quantity that can be purchased via merkle proof #\\n    /// @param pricePerToken price that each token is purchased at\\n    /// @param merkleProof proof for presale mint\\n    function purchasePresale(\\n        uint256 quantity,\\n        uint256 maxQuantity,\\n        uint256 pricePerToken,\\n        bytes32[] calldata merkleProof\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        canMintTokens(quantity)\\n        onlyPresaleActive\\n        returns (uint256)\\n    {\\n        if (\\n            !MerkleProofUpgradeable.verify(\\n                merkleProof,\\n                salesConfig.presaleMerkleRoot,\\n                keccak256(\\n                    // address, uint256, uint256\\n                    abi.encode(msg.sender, maxQuantity, pricePerToken)\\n                )\\n            )\\n        ) {\\n            revert Presale_MerkleNotApproved();\\n        }\\n\\n        if (msg.value != pricePerToken * quantity) {\\n            revert Purchase_WrongPrice(pricePerToken * quantity);\\n        }\\n\\n        presaleMintsByAddress[_msgSender()] += quantity;\\n        if (presaleMintsByAddress[_msgSender()] > maxQuantity) {\\n            revert Presale_TooManyForAddress();\\n        }\\n\\n        _mintNFTs(_msgSender(), quantity);\\n        uint256 firstMintedTokenId = _lastMintedTokenId() - quantity;\\n\\n        emit IERC721Drop.Sale({\\n            to: _msgSender(),\\n            quantity: quantity,\\n            pricePerToken: pricePerToken,\\n            firstPurchasedTokenId: firstMintedTokenId\\n        });\\n\\n        return firstMintedTokenId;\\n    }\\n\\n    /**\\n     *** ---------------------------------- ***\\n     ***                                    ***\\n     ***     ADMIN MINTING FUNCTIONS        ***\\n     ***                                    ***\\n     *** ---------------------------------- ***\\n     ***/\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                             ,----------.\\n    //                       / \\\\                            |ERC721Drop|\\n    //                     Caller                           `----+-----'\\n    //                       |            adminMint()            |\\n    //                       | ---------------------------------->\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  caller is not admin or minter role?    |               !\\n    //          !_____/      |                                   |               !\\n    //          !            | revert Access_MissingRoleOrAdmin()|               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  drop has no tokens left for caller to mint?            !\\n    //          !_____/      |                                   |               !\\n    //          !            |       revert Mint_SoldOut()       |               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | mint tokens\\n    //                       |                                   |<---'\\n    //                       |                                   |\\n    //                       |    return last minted token ID    |\\n    //                       | <----------------------------------\\n    //                     Caller                           ,----+-----.\\n    //                       ,-.                            |ERC721Drop|\\n    //                       `-'                            `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @notice Mint admin\\n    /// @param recipient recipient to mint to\\n    /// @param quantity quantity to mint\\n    function adminMint(address recipient, uint256 quantity)\\n        external\\n        onlyRoleOrAdmin(MINTER_ROLE)\\n        canMintTokens(quantity)\\n        returns (uint256)\\n    {\\n        _mintNFTs(recipient, quantity);\\n\\n        return _lastMintedTokenId();\\n    }\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                             ,----------.\\n    //                       / \\\\                            |ERC721Drop|\\n    //                     Caller                           `----+-----'\\n    //                       |         adminMintAirdrop()        |\\n    //                       | ---------------------------------->\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  caller is not admin or minter role?    |               !\\n    //          !_____/      |                                   |               !\\n    //          !            | revert Access_MissingRoleOrAdmin()|               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  drop has no tokens left for recipients to mint?        !\\n    //          !_____/      |                                   |               !\\n    //          !            |       revert Mint_SoldOut()       |               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //                       |                    _____________________________________\\n    //                       |                    ! LOOP  /  for all recipients        !\\n    //                       |                    !______/       |                     !\\n    //                       |                    !              |----.                !\\n    //                       |                    !              |    | mint tokens    !\\n    //                       |                    !              |<---'                !\\n    //                       |                    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |    return last minted token ID    |\\n    //                       | <----------------------------------\\n    //                     Caller                           ,----+-----.\\n    //                       ,-.                            |ERC721Drop|\\n    //                       `-'                            `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @dev This mints multiple editions to the given list of addresses.\\n    /// @param recipients list of addresses to send the newly minted editions to\\n    function adminMintAirdrop(address[] calldata recipients)\\n        external\\n        override\\n        onlyRoleOrAdmin(MINTER_ROLE)\\n        canMintTokens(recipients.length)\\n        returns (uint256)\\n    {\\n        uint256 atId = _currentIndex;\\n        uint256 startAt = atId;\\n\\n        unchecked {\\n            for (\\n                uint256 endAt = atId + recipients.length;\\n                atId < endAt;\\n                atId++\\n            ) {\\n                _mintNFTs(recipients[atId - startAt], 1);\\n            }\\n        }\\n        return _lastMintedTokenId();\\n    }\\n\\n    /**\\n     *** ---------------------------------- ***\\n     ***                                    ***\\n     ***  ADMIN CONFIGURATION FUNCTIONS     ***\\n     ***                                    ***\\n     *** ---------------------------------- ***\\n     ***/\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                    ,----------.\\n    //                       / \\\\                   |ERC721Drop|\\n    //                     Caller                  `----+-----'\\n    //                       |        setOwner()        |\\n    //                       | ------------------------->\\n    //                       |                          |\\n    //                       |                          |\\n    //          ________________________________________________________\\n    //          ! ALT  /  caller is not admin?          |               !\\n    //          !_____/      |                          |               !\\n    //          !            | revert Access_OnlyAdmin()|               !\\n    //          !            | <-------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                          |\\n    //                       |                          |----.\\n    //                       |                          |    | set owner\\n    //                       |                          |<---'\\n    //                     Caller                  ,----+-----.\\n    //                       ,-.                   |ERC721Drop|\\n    //                       `-'                   `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @dev Set new owner for royalties / opensea\\n    /// @param newOwner new owner to set\\n    function setOwner(address newOwner) public onlyAdmin {\\n        _setOwner(newOwner);\\n    }\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                             ,----------.\\n    //                       / \\\\                            |ERC721Drop|\\n    //                     Caller                           `----+-----'\\n    //                       |      setSalesConfiguration()      |\\n    //                       | ---------------------------------->\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  caller is not admin?                   |               !\\n    //          !_____/      |                                   |               !\\n    //          !            | revert Access_MissingRoleOrAdmin()|               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | set funds recipient\\n    //                       |                                   |<---'\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | emit FundsRecipientChanged()\\n    //                       |                                   |<---'\\n    //                     Caller                           ,----+-----.\\n    //                       ,-.                            |ERC721Drop|\\n    //                       `-'                            `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @dev This sets the sales configuration\\n    // / @param publicSalePrice New public sale price\\n    function setSaleConfiguration(\\n        uint104 publicSalePrice,\\n        uint32 maxSalePurchasePerAddress,\\n        uint64 publicSaleStart,\\n        uint64 publicSaleEnd,\\n        uint64 presaleStart,\\n        uint64 presaleEnd,\\n        bytes32 presaleMerkleRoot\\n    ) external onlyAdmin {\\n        // SalesConfiguration storage newConfig = SalesConfiguration({\\n        //     publicSaleStart: publicSaleStart,\\n        //     publicSaleEnd: publicSaleEnd,\\n        //     presaleStart: presaleStart,\\n        //     presaleEnd: presaleEnd,\\n        //     publicSalePrice: publicSalePrice,\\n        //     maxSalePurchasePerAddress: maxSalePurchasePerAddress,\\n        //     presaleMerkleRoot: presaleMerkleRoot\\n        // });\\n        salesConfig.publicSalePrice = publicSalePrice;\\n        salesConfig.maxSalePurchasePerAddress = maxSalePurchasePerAddress;\\n        salesConfig.publicSaleStart = publicSaleStart;\\n        salesConfig.publicSaleEnd = publicSaleEnd;\\n        salesConfig.presaleStart = presaleStart;\\n        salesConfig.presaleEnd = presaleEnd;\\n        salesConfig.presaleMerkleRoot = presaleMerkleRoot;\\n\\n        emit SalesConfigChanged(_msgSender());\\n    }\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                    ,----------.\\n    //                       / \\\\                   |ERC721Drop|\\n    //                     Caller                  `----+-----'\\n    //                       |        setOwner()        |\\n    //                       | ------------------------->\\n    //                       |                          |\\n    //                       |                          |\\n    //          ________________________________________________________\\n    //          ! ALT  /  caller is not admin or SALES_MANAGER_ROLE?    !\\n    //          !_____/      |                          |               !\\n    //          !            | revert Access_OnlyAdmin()|               !\\n    //          !            | <-------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                          |\\n    //                       |                          |----.\\n    //                       |                          |    | set sales configuration\\n    //                       |                          |<---'\\n    //                       |                          |\\n    //                       |                          |----.\\n    //                       |                          |    | emit SalesConfigChanged()\\n    //                       |                          |<---'\\n    //                     Caller                  ,----+-----.\\n    //                       ,-.                   |ERC721Drop|\\n    //                       `-'                   `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @notice Set a different funds recipient\\n    /// @param newRecipientAddress new funds recipient address\\n    function setFundsRecipient(address payable newRecipientAddress)\\n        external\\n        onlyRoleOrAdmin(SALES_MANAGER_ROLE)\\n    {\\n        // TODO(iain): funds recipient cannot be 0?\\n        config.fundsRecipient = newRecipientAddress;\\n        emit FundsRecipientChanged(newRecipientAddress, _msgSender());\\n    }\\n\\n    //                       ,-.                  ,-.                      ,-.\\n    //                       `-'                  `-'                      `-'\\n    //                       /|\\\\                  /|\\\\                      /|\\\\\\n    //                        |                    |                        |                      ,----------.\\n    //                       / \\\\                  / \\\\                      / \\\\                     |ERC721Drop|\\n    //                     Caller            FeeRecipient            FundsRecipient                `----+-----'\\n    //                       |                    |           withdraw()   |                            |\\n    //                       | ------------------------------------------------------------------------->\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        |                            |\\n    //          ________________________________________________________________________________________________________\\n    //          ! ALT  /  caller is not admin or manager?                  |                            |               !\\n    //          !_____/      |                    |                        |                            |               !\\n    //          !            |                    revert Access_WithdrawNotAllowed()                    |               !\\n    //          !            | <-------------------------------------------------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                    |                        |                            |\\n    //                       |                    |                   send fee amount                   |\\n    //                       |                    | <----------------------------------------------------\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        |             ____________________________________________________________\\n    //                       |                    |                        |             ! ALT  /  send unsuccesful?                                 !\\n    //                       |                    |                        |             !_____/        |                                            !\\n    //                       |                    |                        |             !              |----.                                       !\\n    //                       |                    |                        |             !              |    | revert Withdraw_FundsSendFailure()    !\\n    //                       |                    |                        |             !              |<---'                                       !\\n    //                       |                    |                        |             !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                    |                        |             !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        | send remaining funds amount|\\n    //                       |                    |                        | <---------------------------\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        |                            |\\n    //                       |                    |                        |             ____________________________________________________________\\n    //                       |                    |                        |             ! ALT  /  send unsuccesful?                                 !\\n    //                       |                    |                        |             !_____/        |                                            !\\n    //                       |                    |                        |             !              |----.                                       !\\n    //                       |                    |                        |             !              |    | revert Withdraw_FundsSendFailure()    !\\n    //                       |                    |                        |             !              |<---'                                       !\\n    //                       |                    |                        |             !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                    |                        |             !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                     Caller            FeeRecipient            FundsRecipient                ,----+-----.\\n    //                       ,-.                  ,-.                      ,-.                     |ERC721Drop|\\n    //                       `-'                  `-'                      `-'                     `----------'\\n    //                       /|\\\\                  /|\\\\                      /|\\\\\\n    //                        |                    |                        |\\n    //                       / \\\\                  / \\\\                      / \\\\\\n    /// @notice This withdraws ETH from the contract to the contract owner.\\n    function withdraw() external nonReentrant {\\n        address sender = _msgSender();\\n\\n        // Get fee amount\\n        uint256 funds = address(this).balance;\\n        (address payable feeRecipient, uint256 zoraFee) = zoraFeeForAmount(\\n            funds\\n        );\\n\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, sender) &&\\n            !hasRole(SALES_MANAGER_ROLE, sender) &&\\n            sender != feeRecipient &&\\n            sender != config.fundsRecipient\\n        ) {\\n            revert Access_WithdrawNotAllowed();\\n        }\\n\\n        // Payout ZORA fee\\n        if (zoraFee > 0) {\\n            (bool successFee, ) = feeRecipient.call{\\n                value: zoraFee,\\n                gas: FUNDS_SEND_GAS_LIMIT\\n            }(\\\"\\\");\\n            if (!successFee) {\\n                revert Withdraw_FundsSendFailure();\\n            }\\n            funds -= zoraFee;\\n        }\\n\\n        // Payout recipient\\n        (bool successFunds, ) = config.fundsRecipient.call{\\n            value: funds,\\n            gas: FUNDS_SEND_GAS_LIMIT\\n        }(\\\"\\\");\\n        if (!successFunds) {\\n            revert Withdraw_FundsSendFailure();\\n        }\\n    }\\n\\n    //                       ,-.\\n    //                       `-'\\n    //                       /|\\\\\\n    //                        |                             ,----------.\\n    //                       / \\\\                            |ERC721Drop|\\n    //                     Caller                           `----+-----'\\n    //                       |       finalizeOpenEdition()       |\\n    //                       | ---------------------------------->\\n    //                       |                                   |\\n    //                       |                                   |\\n    //          _________________________________________________________________\\n    //          ! ALT  /  caller is not admin or SALES_MANAGER_ROLE?             !\\n    //          !_____/      |                                   |               !\\n    //          !            | revert Access_MissingRoleOrAdmin()|               !\\n    //          !            | <----------------------------------               !\\n    //          !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //          !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |\\n    //                       |                    _______________________________________________________________________\\n    //                       |                    ! ALT  /  drop is not an open edition?                                 !\\n    //                       |                    !_____/        |                                                       !\\n    //                       |                    !              |----.                                                  !\\n    //                       |                    !              |    | revert Admin_UnableToFinalizeNotOpenEdition()    !\\n    //                       |                    !              |<---'                                                  !\\n    //                       |                    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                    !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | set config edition size\\n    //                       |                                   |<---'\\n    //                       |                                   |\\n    //                       |                                   |----.\\n    //                       |                                   |    | emit OpenMintFinalized()\\n    //                       |                                   |<---'\\n    //                     Caller                           ,----+-----.\\n    //                       ,-.                            |ERC721Drop|\\n    //                       `-'                            `----------'\\n    //                       /|\\\\\\n    //                        |\\n    //                       / \\\\\\n    /// @notice Admin function to finalize and open edition sale\\n    function finalizeOpenEdition()\\n        external\\n        onlyRoleOrAdmin(SALES_MANAGER_ROLE)\\n    {\\n        if (config.editionSize != type(uint64).max) {\\n            revert Admin_UnableToFinalizeNotOpenEdition();\\n        }\\n\\n        config.editionSize = uint64(_totalMinted());\\n        emit OpenMintFinalized(_msgSender(), config.editionSize);\\n    }\\n\\n    /**\\n     *** ---------------------------------- ***\\n     ***                                    ***\\n     ***      GENERAL GETTER FUNCTIONS      ***\\n     ***                                    ***\\n     *** ---------------------------------- ***\\n     ***/\\n\\n    /// @notice Simple override for owner interface.\\n    /// @return user owner address\\n    function owner()\\n        public\\n        view\\n        override(OwnableSkeleton, IERC721Drop)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /// @notice Contract URI Getter, proxies to metadataRenderer\\n    /// @return Contract URI\\n    function contractURI() external view returns (string memory) {\\n        return config.metadataRenderer.contractURI();\\n    }\\n\\n    /// @notice Getter for metadataRenderer contract\\n    function metadataRenderer() external view returns (IMetadataRenderer) {\\n        return IMetadataRenderer(config.metadataRenderer);\\n    }\\n\\n    /// @notice Token URI Getter, proxies to metadataRenderer\\n    /// @param tokenId id of token to get URI for\\n    /// @return Token URI\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) {\\n            revert IERC721AUpgradeable.URIQueryForNonexistentToken();\\n        }\\n\\n        return config.metadataRenderer.tokenURI(tokenId);\\n    }\\n\\n    /// @notice ERC165 supports interface\\n    /// @param interfaceId interface id to check if supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(\\n            IERC165Upgradeable,\\n            ERC721AUpgradeable,\\n            AccessControlUpgradeable\\n        )\\n        returns (bool)\\n    {\\n        return\\n            super.supportsInterface(interfaceId) ||\\n            type(IOwnable).interfaceId == interfaceId ||\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            type(IERC721Drop).interfaceId == interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"src/utils/SharedNFTLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"../interfaces/IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/metadata/MetadataRenderAdminCheck.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC721Drop} from \\\"../interfaces/IERC721Drop.sol\\\";\\n\\ncontract MetadataRenderAdminCheck {\\n    error Access_OnlyAdmin();\\n\\n    /// @notice Modifier to require the sender to be an admin\\n    /// @param target address that the user wants to modify\\n    modifier requireSenderAdmin(address target) {\\n        if (target != msg.sender && !IERC721Drop(target).isAdmin(msg.sender)) {\\n            revert Access_OnlyAdmin();\\n        }\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/ERC721A-Upgradeable/contracts/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721AUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721AUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex != end);\\n\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[42] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/ERC721A-Upgradeable/contracts/IERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721AUpgradeable is IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IZoraFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IZoraFeeManager {\\n    function getZORAWithdrawFeesBPS(address sender) external returns (address payable, uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n *\\n */\\ninterface IOwnable {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/utils/OwnableSkeleton.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This ownership interface matches OZ's ownable interface.\\n */\\ncontract OwnableSkeleton is IOwnable {\\n    address private _owner;\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    function _setOwner(address newAddress) internal {\\n        emit OwnershipTransferred(_owner, newAddress);\\n        _owner = newAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/FundsReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @notice This allows this contract to receive native currency funds from other contracts\\n * Uses event logging for UI reasons.\\n */\\ncontract FundsReceiver {\\n    event FundsReceived(address indexed source, uint256 amount);\\n\\n    receive() external payable {\\n        emit FundsReceived(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/FactoryUpgradeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IFactoryUpgradeGate} from \\\"./interfaces/IFactoryUpgradeGate.sol\\\";\\nimport \\\"./utils/OwnableSkeleton.sol\\\";\\n\\ncontract FactoryUpgradeGate is IFactoryUpgradeGate, OwnableSkeleton {\\n    mapping(address => mapping(address => bool)) private _validUpgradePaths;\\n\\n    event UpgradePathRegistered(address newImpl, address oldImpl);\\n    event UpgradePathRemoved(address newImpl, address oldImpl);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner(), \\\"only owner\\\");\\n\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        _setOwner(_owner);\\n    }\\n\\n    /// @notice Ensures the given upgrade path is valid and does not overwrite existing storage slots\\n    /// @param _newImpl The proposed implementation address\\n    /// @param _currentImpl The current implementation address\\n    function isValidUpgradePath(address _newImpl, address _currentImpl) external view returns (bool) {\\n        return _validUpgradePaths[_newImpl][_currentImpl];\\n    }\\n\\n    /// @notice Registers a new safe upgrade path for an implementation\\n    /// @param _newImpl The new implementation\\n    /// @param _supportedPrevImpls Safe implementations that can upgrade to this new implementation\\n    function registerNewUpgradePath(address _newImpl, address[] calldata _supportedPrevImpls) external onlyOwner {\\n        for (uint256 i = 0; i < _supportedPrevImpls.length; i++) {\\n            _validUpgradePaths[_newImpl][_supportedPrevImpls[i]] = true;\\n            emit UpgradePathRegistered(_newImpl, _supportedPrevImpls[i]);\\n        }\\n    }\\n\\n    /// @notice Unregisters an upgrade path, in case of emergency\\n    /// @param _newImpl the newer implementation\\n    /// @param _prevImpl the older implementation\\n    function unregisterUpgradePath(address _newImpl, address _prevImpl) external onlyOwner {\\n        _validUpgradePaths[_newImpl][_prevImpl] = false;\\n        emit UpgradePathRemoved(_newImpl, _prevImpl);\\n    }\\n}\"\r\n    },\r\n    \"src/storage/ERC721DropStorageV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC721Drop} from \\\"../interfaces/IERC721Drop.sol\\\";\\n\\ncontract ERC721DropStorageV1 {\\n    /// @notice Configuration for NFT minting contract storage\\n    IERC721Drop.Configuration public config;\\n\\n    /// @notice Sales configuration\\n    IERC721Drop.SalesConfiguration public salesConfig;\\n\\n    /// @dev Mapping for presale mint counts by address to allow public mint limit\\n    mapping(address => uint256) public presaleMintsByAddress;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPublicSharedMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFactoryUpgradeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IFactoryUpgradeGate {\\n  function isValidUpgradePath(address _newImpl, address _currentImpl) external returns (bool);\\n\\n  function registerNewUpgradePath(address _newImpl, address[] calldata _supportedPrevImpls) external;\\n\\n  function unregisterUpgradePath(address _newImpl, address _prevImpl) external;\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"base64/=lib/base64/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"erc721a-upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"contract EditionMetadataRenderer\",\"name\":\"_editionMetadataRenderer\",\"type\":\"address\"},{\"internalType\":\"contract DropMetadataRenderer\",\"name\":\"_dropMetadataRenderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"CreatedDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"editionSize\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"fundsRecipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint104\",\"name\":\"publicSalePrice\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"maxSalePurchasePerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721Drop.SalesConfiguration\",\"name\":\"saleConfig\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURIBase\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataContractURI\",\"type\":\"string\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"editionSize\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"fundsRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint104\",\"name\":\"publicSalePrice\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"maxSalePurchasePerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicSaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"presaleEnd\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721Drop.SalesConfiguration\",\"name\":\"saleConfig\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropMetadataRenderer\",\"outputs\":[{\"internalType\":\"contract DropMetadataRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionMetadataRenderer\",\"outputs\":[{\"internalType\":\"contract EditionMetadataRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ZoraNFTCreatorV1", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "000000000000000000000000478dc357913ec31b5015cbad60c8ddedff6299c1000000000000000000000000c794ed6fd061fc383d1b9231f61cf3acffe6f1d90000000000000000000000005914d9a241008b9f02f22811bf3a77e02b84d226", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}