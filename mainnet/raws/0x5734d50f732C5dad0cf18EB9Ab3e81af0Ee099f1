{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/zaps/MintAndBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\nimport \\\"../interfaces/IBondDepository.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\nimport \\\"../interfaces/INFTXVault.sol\\\";\\nimport \\\"../interfaces/INFTXVaultFactory.sol\\\";\\nimport \\\"../interfaces/zaps/IMintAndBond.sol\\\";\\n\\nimport \\\"../libraries/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\nimport \\\"../types/FloorAccessControlled.sol\\\";\\n\\ncontract MintAndBondZap is IMintAndBond, ReentrancyGuard, FloorAccessControlled {\\n\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n  using SafeMath for uint64;\\n\\n  struct Note {\\n    uint256 amount;\\n    uint256 matured;\\n    address vault;\\n    uint48 claimed;\\n  }\\n\\n  INFTXVaultFactory public immutable nftxFactory;\\n  IBondDepository public immutable bondDepository;\\n  uint48 public timelock; // seconds\\n  mapping(address => mapping(address => Note[])) public notes; // user deposit data\\n\\n  event CreateNote(address user, address vault, uint256 index, uint256 amount, uint48 expiry);\\n  event ClaimNote(address user, uint256[] indexes, address vault);\\n\\n  constructor (\\n    address _authority,\\n    address _bondDepository,\\n    address _nftxFactory,\\n    uint48 _timelock\\n  ) FloorAccessControlled(IFloorAuthority(_authority))\\n  {\\n    bondDepository = IBondDepository(_bondDepository);\\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\\n    timelock = _timelock;\\n  }\\n\\n  /** \\n   * @notice             mints into nftx and bonds maximum into floordao\\n   * @param _vaultId     the nftx vault id\\n   * @param _ids[]       the nft ids\\n   * @param _bondId      the floor bond id\\n   * @param _to          the recipient of bond payout\\n   * @param _maxPrice    the max bond price to account for slippage\\n   * @return remaining_  remaining vtokens to send back to user\\n   */\\n  function mintAndBond721(\\n    uint256 _vaultId, \\n    uint256[] calldata _ids, \\n    uint256 _bondId,\\n    address _to,\\n    uint256 _maxPrice\\n  ) external override nonReentrant returns (uint256 remaining_) {\\n    require(_to != address(0) && _to != address(this));\\n    require(_ids.length > 0);\\n\\n    (,,,,uint64 maxPayout,,) = bondDepository.markets(_bondId);\\n    uint256 bondPrice = bondDepository.marketPrice(_bondId);\\n    // Max bond reduced by 5% to account for possible tx-failing maxBond reduction in next block\\n    uint256 maxBond = maxPayout.mul(bondPrice).div(100).mul(95); // 18 decimal\\n    uint256 amountToBond = (maxBond > _ids.length.mul(1e18))\\n      ? _ids.length.mul(1e18)\\n      : maxBond;\\n    \\n    // Get our vault by ID\\n    address vault = nftxFactory.vault(_vaultId);\\n    IERC20 vaultToken = IERC20(vault);\\n\\n    // Store initial balance\\n    uint256 existingBalance = vaultToken.balanceOf(address(this));\\n\\n    // Convert ERC721 to ERC20\\n    // The vault is an ERC20 in itself and can be used to transfer and manage\\n    _mint721(vault, _ids, _to);\\n    \\n    // Bond ERC20 in FloorDAO\\n    if (vaultToken.allowance(address(this), address(bondDepository)) < type(uint256).max) {\\n      vaultToken.approve(address(bondDepository), type(uint256).max);\\n    }\\n    bondDepository.deposit(_bondId, amountToBond, _maxPrice, _to, address(0));\\n\\n    // Calculate remaining from initial balance and timelock\\n    remaining_ = vaultToken.balanceOf(address(this)).sub(existingBalance);\\n    if (remaining_ > 0) {\\n      _addToTimelock(vault, remaining_, _to);\\n    }\\n  }\\n\\n  /**\\n   * @notice             claim notes for user\\n   * @param _user        the user to claim for\\n   * @param _indexes     the note indexes to claim\\n   * @return amount_     sum of amount sent in vToken\\n   */\\n  function claim(address _user, uint256[] memory _indexes, address _vault) external override returns (uint256 amount_) {\\n    uint48 time = uint48(block.timestamp);\\n\\n    for (uint256 i = 0; i < _indexes.length; i++) {\\n      (uint256 pay, bool matured) = pendingFor(_user, _indexes[i], _vault);\\n      require(matured, \\\"Depository: note not matured\\\");\\n      if (matured) {\\n        notes[_user][_vault][_indexes[i]].claimed = time; // mark as claimed\\n        amount_ += pay;\\n      }\\n    }\\n\\n    IERC20 vaultToken = IERC20(_vault);\\n    vaultToken.safeTransfer(_user, amount_);\\n\\n    emit ClaimNote(_user, _indexes, _vault);\\n  }\\n\\n  /**\\n   * @notice             calculate amount available to claim for a single note\\n   * @param _user        the user that the note belongs to\\n   * @param _index       the index of the note in the user's array\\n   * @param _vault       the nftx vault\\n   * @return amount_     the amount due, in vToken\\n   * @return matured_    if the amount can be claimed\\n   */\\n  function pendingFor(address _user, uint256 _index, address _vault) public view override returns (uint256 amount_, bool matured_) {\\n    Note memory note = notes[_user][_vault][_index];\\n\\n    amount_ = note.amount;\\n    matured_ = note.claimed == 0 && note.matured <= block.timestamp && note.amount != 0;\\n  }\\n\\n  /**\\n   * @notice prevents remaining vtokens from being immediately claimable\\n   * @param _timelock amount in 18 decimal\\n   */\\n  function setTimelock(uint48 _timelock) external override onlyGovernor {\\n    // protect against accidental/overflowing timelocks\\n    require(_timelock < 31560000, \\\"Timelock is too long\\\");\\n    timelock = _timelock;\\n  }\\n\\n  /**\\n   * @notice rescues any tokens mistakenly sent to this address\\n   * @param _token token to be rescued\\n   */\\n  function rescue(address _token) external override onlyGovernor {\\n      IERC20(_token).safeTransfer(\\n          msg.sender,\\n          IERC20(_token).balanceOf(address(this))\\n      );\\n  }\\n\\n  function _mint721(address vault, uint256[] memory ids, address from) internal {\\n    // Transfer tokens to zap and mint to NFTX\\n    address assetAddress = INFTXVault(vault).assetAddress();\\n    uint256 length = ids.length;\\n\\n    IERC721 erc721 = IERC721(assetAddress);\\n    for (uint256 i; i < length; ++i) {\\n      erc721.transferFrom(from, address(this), ids[i]);\\n    }\\n\\n    // Approve tokens to be used by vault\\n    erc721.setApprovalForAll(vault, true);\\n\\n    // Ignored for ERC721 vaults\\n    uint256[] memory emptyIds;\\n    INFTXVault(vault).mint(ids, emptyIds);\\n  }\\n\\n  function _addToTimelock(address _vault, uint256 _remaining, address _user) internal returns (uint256 index_) {\\n    uint48 expiry = uint48(block.timestamp) + timelock;\\n\\n    // the index of the note is the next in the user's array\\n    index_ = notes[_user][_vault].length;\\n\\n    // the new note is pushed to the user's array\\n    notes[_user][_vault].push(\\n      Note({\\n        amount: _remaining,\\n        matured: expiry,\\n        vault: _vault,\\n        claimed: 0\\n      })\\n    );\\n\\n    emit CreateNote(_user, _vault, index_, _remaining, expiry);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBondDepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n\\n  // Info about each type of market\\n  struct Market {\\n    uint256 capacity; // capacity remaining\\n    IERC20 quoteToken; // token to accept as payment\\n    bool capacityInQuote; // capacity limit is in payment token (true) or in FLOOR (false, default)\\n    uint64 totalDebt; // total debt from market\\n    uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n    uint64 sold; // base tokens out\\n    uint256 purchased; // quote tokens in\\n  }\\n\\n  // Info for creating new markets\\n  struct Terms {\\n    bool fixedTerm; // fixed term or fixed expiration\\n    uint64 controlVariable; // scaling variable for price\\n    uint48 vesting; // length of time from deposit to maturity if fixed-term\\n    uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    uint64 maxDebt; // 9 decimal debt maximum in FLOOR\\n  }\\n\\n  // Additional info about market.\\n  struct Metadata {\\n    uint48 lastTune; // last timestamp when control variable was tuned\\n    uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n    uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n    uint48 depositInterval; // target frequency of deposits\\n    uint48 tuneInterval; // frequency of tuning\\n    uint8 quoteDecimals; // decimals of quote token\\n  }\\n\\n  // Control variable adjustment data\\n  struct Adjustment {\\n    uint64 change;\\n    uint48 lastAdjustment;\\n    uint48 timeToAdjusted;\\n    bool active;\\n  }\\n\\n\\n  /**\\n   * @notice deposit market\\n   * @param _bid uint256\\n   * @param _amount uint256\\n   * @param _maxPrice uint256\\n   * @param _user address\\n   * @param _referral address\\n   * @return payout_ uint256\\n   * @return expiry_ uint256\\n   * @return index_ uint256\\n   */\\n  function deposit(\\n    uint256 _bid,\\n    uint256 _amount,\\n    uint256 _maxPrice,\\n    address _user,\\n    address _referral\\n  ) external returns (\\n    uint256 payout_, \\n    uint256 expiry_,\\n    uint256 index_\\n  );\\n\\n  function create (\\n    IERC20 _quoteToken, // token used to deposit\\n    uint256[3] memory _market, // [capacity, initial price]\\n    bool[2] memory _booleans, // [capacity in quote, fixed term]\\n    uint256[2] memory _terms, // [vesting, conclusion]\\n    uint32[2] memory _intervals // [deposit interval, tune interval]\\n  ) external returns (uint256 id_);\\n  function close(uint256 _id) external;\\n\\n  function isLive(uint256 _bid) external view returns (bool);\\n  function liveMarkets() external view returns (uint256[] memory);\\n  function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n  function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n  function markets(uint256 _bid) external view returns (\\n    uint256 capacity,\\n    IERC20 quoteToken,\\n    bool capacityInQuote,\\n    uint64 totalDebt,\\n    uint64 maxPayout,\\n    uint64 sold,\\n    uint256 purchased\\n  );\\n  function marketPrice(uint256 _bid) external view returns (uint256);\\n  function currentDebt(uint256 _bid) external view returns (uint256);\\n  function debtRatio(uint256 _bid) external view returns (uint256);\\n  function debtDecay(uint256 _bid) external view returns (uint64);\\n} \\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\n/**\\n * @dev ERC-721 non-fungible token standard.\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\\n */\\ninterface IERC721\\n{\\n\\n  /**\\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\\n   * transfer, the approved address for that NFT (if any) is reset to none.\\n   */\\n  event Transfer(\\n    address indexed _from,\\n    address indexed _to,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\\n   * address indicates there is no approved address. When a Transfer event emits, this also\\n   * indicates that the approved address for that NFT (if any) is reset to none.\\n   */\\n  event Approval(\\n    address indexed _owner,\\n    address indexed _approved,\\n    uint256 indexed _tokenId\\n  );\\n\\n  /**\\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\\n   * all NFTs of the owner.\\n   */\\n  event ApprovalForAll(\\n    address indexed _owner,\\n    address indexed _operator,\\n    bool _approved\\n  );\\n\\n  /**\\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\n   * `onERC721Received` on `_to` and throws if the return value is not\\n   * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\n   * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n   * be changed to payable.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   * @param _data Additional data with no specified format, sent in call to `_to`.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  )\\n    external;\\n\\n  /**\\n   * @notice This works identically to the other function with an extra data parameter, except this\\n   * function just sets data to \\\"\\\"\\n   * @dev Transfers the ownership of an NFT from one address to another address. This function can\\n   * be changed to payable.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\n   * they may be permanently lost.\\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\n   * address. Throws if `_tokenId` is not a valid NFT.  This function can be changed to payable.\\n   * @param _from The current owner of the NFT.\\n   * @param _to The new owner.\\n   * @param _tokenId The NFT to transfer.\\n   */\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\n   * the current NFT owner, or an authorized operator of the current owner.\\n   * @param _approved The new approved NFT controller.\\n   * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\n   * @param _tokenId The NFT to approve.\\n   */\\n  function approve(\\n    address _approved,\\n    uint256 _tokenId\\n  )\\n    external;\\n\\n  /**\\n   * @notice The contract MUST allow multiple operators per owner.\\n   * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\n   * @param _operator Address to add to the set of authorized operators.\\n   * @param _approved True if the operators is approved, false to revoke approval.\\n   */\\n  function setApprovalForAll(\\n    address _operator,\\n    bool _approved\\n  )\\n    external;\\n\\n  /**\\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\n   * considered invalid, and this function throws for queries about the zero address.\\n   * @notice Count all NFTs assigned to an owner.\\n   * @param _owner Address for whom to query the balance.\\n   * @return Balance of _owner.\\n   */\\n  function balanceOf(\\n    address _owner\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Find the owner of an NFT.\\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to the zero address are\\n   * considered invalid, and queries about them do throw.\\n   * @param _tokenId The identifier for an NFT.\\n   * @return Address of _tokenId owner.\\n   */\\n  function ownerOf(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @notice Throws if `_tokenId` is not a valid NFT.\\n   * @dev Get the approved address for a single NFT.\\n   * @param _tokenId The NFT to find the approved address for.\\n   * @return Address that _tokenId is approved for.\\n   */\\n  function getApproved(\\n    uint256 _tokenId\\n  )\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @notice Query if an address is an authorized operator for another address.\\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\\n   * @param _owner The address that owns the NFTs.\\n   * @param _operator The address that acts on behalf of the owner.\\n   * @return True if approved for all, false otherwise.\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  )\\n    external\\n    view\\n    returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTXVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\nimport \\\"../interfaces/INFTXVaultFactory.sol\\\";\\n\\n\\ninterface INFTXVault {\\n    function manager() external view returns (address);\\n    function assetAddress() external view returns (address);\\n    function vaultFactory() external view returns (INFTXVaultFactory);\\n\\n    function is1155() external view returns (bool);\\n    function allowAllItems() external view returns (bool);\\n    function enableMint() external view returns (bool);\\n    function enableRandomRedeem() external view returns (bool);\\n    function enableTargetRedeem() external view returns (bool);\\n    function enableRandomSwap() external view returns (bool);\\n    function enableTargetSwap() external view returns (bool);\\n\\n    function vaultId() external view returns (uint256);\\n    function nftIdAt(uint256 holdingsIndex) external view returns (uint256);\\n    function allHoldings() external view returns (uint256[] memory);\\n    function totalHoldings() external view returns (uint256);\\n    function mintFee() external view returns (uint256);\\n    function randomRedeemFee() external view returns (uint256);\\n    function targetRedeemFee() external view returns (uint256);\\n    function randomSwapFee() external view returns (uint256);\\n    function targetSwapFee() external view returns (uint256);\\n    function vaultFees() external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function __NFTXVault_init(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _assetAddress,\\n        bool _is1155,\\n        bool _allowAllItems\\n    ) external;\\n\\n    function finalizeVault() external;\\n\\n    function setVaultMetadata(\\n        string memory name_, \\n        string memory symbol_\\n    ) external;\\n\\n    function setVaultFeatures(\\n        bool _enableMint,\\n        bool _enableRandomRedeem,\\n        bool _enableTargetRedeem,\\n        bool _enableRandomSwap,\\n        bool _enableTargetSwap\\n    ) external;\\n\\n    function setFees(\\n        uint256 _mintFee,\\n        uint256 _randomRedeemFee,\\n        uint256 _targetRedeemFee,\\n        uint256 _randomSwapFee,\\n        uint256 _targetSwapFee\\n    ) external;\\n    function disableVaultFees() external;\\n\\n    // This function allows for an easy setup of any eligibility module contract from the EligibilityManager.\\n    // It takes in ABI encoded parameters for the desired module. This is to make sure they can all follow\\n    // a similar interface.\\n    function deployEligibilityStorage(\\n        uint256 moduleIndex,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    // The manager has control over options like fees and features\\n    function setManager(address _manager) external;\\n\\n    function mint(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\\n    ) external returns (uint256);\\n\\n    function mintTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        address to\\n    ) external returns (uint256);\\n\\n    function redeem(uint256 amount, uint256[] calldata specificIds)\\n        external\\n        returns (uint256[] calldata);\\n\\n    function redeemTo(\\n        uint256 amount,\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function swap(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds\\n    ) external returns (uint256[] calldata);\\n\\n    function swapTo(\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts, /* ignored for ERC721 vaults */\\n        uint256[] calldata specificIds,\\n        address to\\n    ) external returns (uint256[] calldata);\\n\\n    function allValidNFTs(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/INFTXVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\n\\ninterface INFTXVaultFactory {\\n  // Read functions.\\n  function numVaults() external view returns (uint256);\\n  function zapContract() external view returns (address);\\n  function feeDistributor() external view returns (address);\\n  function eligibilityManager() external view returns (address);\\n  function vault(uint256 vaultId) external view returns (address);\\n  function allVaults() external view returns (address[] memory);\\n  function vaultsForAsset(address asset) external view returns (address[] memory);\\n  function isLocked(uint256 id) external view returns (bool);\\n  function excludedFromFees(address addr) external view returns (bool);\\n  function factoryMintFee() external view returns (uint64);\\n  function factoryRandomRedeemFee() external view returns (uint64);\\n  function factoryTargetRedeemFee() external view returns (uint64);\\n  function factoryRandomSwapFee() external view returns (uint64);\\n  function factoryTargetSwapFee() external view returns (uint64);\\n  function vaultFees(uint256 vaultId) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n  event NewFeeDistributor(address oldDistributor, address newDistributor);\\n  event NewZapContract(address oldZap, address newZap);\\n  event FeeExclusion(address feeExcluded, bool excluded);\\n  event NewEligibilityManager(address oldEligManager, address newEligManager);\\n  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\\n  event UpdateVaultFees(uint256 vaultId, uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\n  event DisableVaultFees(uint256 vaultId);\\n  event UpdateFactoryFees(uint256 mintFee, uint256 randomRedeemFee, uint256 targetRedeemFee, uint256 randomSwapFee, uint256 targetSwapFee);\\n\\n  // Write functions.\\n  function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\\n  function createVault(\\n      string calldata name,\\n      string calldata symbol,\\n      address _assetAddress,\\n      bool is1155,\\n      bool allowAllItems\\n  ) external returns (uint256);\\n  function setFeeDistributor(address _feeDistributor) external;\\n  function setEligibilityManager(address _eligibilityManager) external;\\n  function setZapContract(address _zapContract) external;\\n  function setFeeExclusion(address _excludedAddr, bool excluded) external;\\n\\n  function setFactoryFees(\\n    uint256 mintFee, \\n    uint256 randomRedeemFee, \\n    uint256 targetRedeemFee,\\n    uint256 randomSwapFee, \\n    uint256 targetSwapFee\\n  ) external; \\n  function setVaultFees(\\n      uint256 vaultId, \\n      uint256 mintFee, \\n      uint256 randomRedeemFee, \\n      uint256 targetRedeemFee,\\n      uint256 randomSwapFee, \\n      uint256 targetSwapFee\\n  ) external;\\n  function disableVaultFees(uint256 vaultId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/zaps/IMintAndBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\ninterface IMintAndBond {\\n\\n  function mintAndBond721(\\n    uint256 vaultId,\\n    uint256[] calldata ids,\\n    uint256 bondId,\\n    address to,\\n    uint256 maxPrice\\n  ) external returns (uint256);\\n  function claim(address _user, uint256[] memory _indexes, address _vault) external returns (uint256);\\n  function pendingFor(address _user, uint256 _index, address _vault) external view returns (uint256, bool);\\n  function setTimelock(uint48 _timelock) external;\\n  function rescue(address _token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.5;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/types/FloorAccessControlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IFloorAuthority.sol\\\";\\n\\nabstract contract FloorAccessControlled {\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IFloorAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IFloorAuthority public authority;\\n\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IFloorAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n    \\n\\n    /* ========== MODIFIERS ========== */\\n    \\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n    \\n    /* ========== GOV ONLY ========== */\\n    \\n    function setAuthority(IFloorAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFloorAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IFloorAuthority {\\n    /* ========== EVENTS ========== */\\n    \\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n    \\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondDepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftxFactory\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_timelock\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFloorAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"ClaimNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiry\",\"type\":\"uint48\"}],\"name\":\"CreateNote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IFloorAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepository\",\"outputs\":[{\"internalType\":\"contract IBondDepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"}],\"name\":\"mintAndBond721\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftxFactory\",\"outputs\":[{\"internalType\":\"contract INFTXVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"matured\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"claimed\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFloorAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_timelock\",\"type\":\"uint48\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MintAndBondZap", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000618907e21898d0357f0a0bf0b112949b1530cbc1000000000000000000000000e1d71b60642d597e6e3dbf6d0cd106ac3cfa65fa000000000000000000000000be86f647b167567525ccaafcd6f881f1ee5582160000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}