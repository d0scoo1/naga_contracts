{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// For future use to allow buyers to receive a discount depending on staking or other rules.\r\ninterface IDiscountManager {\r\n    function getDiscount(address buyer)\r\n        external\r\n        view\r\n        returns (uint256 discount);\r\n}\r\n\r\ncontract ShiryoMarket is IERC1155Receiver, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n     modifier onlyClevel() {\r\n        require(msg.sender == walletA || msg.sender == walletB || msg.sender == owner);\r\n    _;\r\n    }\r\n\r\n    address walletA;\r\n    address walletB;\r\n    uint256 walletBPercentage = 20;\r\n\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter public _itemIds; // Id for each individual item\r\n    Counters.Counter private _itemsSold; // Number of items sold\r\n    Counters.Counter private _itemsCancelled; // Number of items sold\r\n    Counters.Counter private _offerIds; // Tracking offers\r\n\r\n    address payable public owner; // The owner of the market contract\r\n    address public discountManager = address(0x0); // a contract that can be callled to discover if there is a discount on the transaction fee.\r\n\r\n    uint256 public saleFeePercentage = 5; // Percentage fee paid to team for each sale\r\n    uint256 public accumulatedFee = 0;\r\n\r\n    uint256 public volumeTraded = 0; // Total amount traded\r\n\r\n    enum TokenType {\r\n        ERC721, //0\r\n        ERC1155, //1\r\n        ERC20 //2\r\n    }\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    struct MarketOffer {\r\n        uint256 offerId;\r\n        uint256 itemId;\r\n        address payable bidder;\r\n        uint256 offerAmount;\r\n        uint256 offerTime;\r\n        bool cancelled;\r\n        bool accepted;\r\n    }\r\n\r\n    struct MarketItem {\r\n        uint256 itemId;\r\n        address tokenContract;\r\n        TokenType tokenType;\r\n        uint256 tokenId; // 0 If token is ERC20\r\n        uint256 amount; // 1 unless QTY of ERC20\r\n        address payable seller;\r\n        address payable buyer;\r\n        string category;\r\n        uint256 price;\r\n        bool isSold;\r\n        bool cancelled;\r\n    }\r\n\r\n    mapping(uint256 => MarketItem) public idToMarketItem;\r\n\r\n    mapping(uint256 => uint256[]) public itemIdToMarketOfferIds;\r\n\r\n    mapping(uint256 => MarketOffer) public offerIdToMarketOffer;\r\n\r\n    mapping(address => uint256[]) public bidderToMarketOfferIds;\r\n\r\n    mapping(address => bool) public approvedSourceContracts;\r\n\r\n    event MarketItemCreated(\r\n        uint256 indexed itemId,\r\n        address indexed tokenContract,\r\n        uint256 indexed tokenId,\r\n        uint256 amount,\r\n        address seller,\r\n        address owner,\r\n        string category,\r\n        uint256 price\r\n    );\r\n\r\n    event MarketSaleCreated(\r\n        uint256 indexed itemId,\r\n        address indexed tokenContract,\r\n        uint256 indexed tokenId,\r\n        address seller,\r\n        address buyer,\r\n        string category,\r\n        uint256 price\r\n    );\r\n\r\n    event ItemOfferCreated(\r\n        uint256 indexed itemId,\r\n        address indexed tokenContract,\r\n        address owner,\r\n        address bidder,\r\n        uint256 bidAmount\r\n    );\r\n\r\n    // transfers one of the token types to/from the contracts\r\n    function transferAnyToken(\r\n        TokenType _tokenType,\r\n        address _tokenContract,\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) internal {\r\n        // type = 0\r\n        if (_tokenType == TokenType.ERC721) {\r\n            //IERC721(_tokenContract).approve(address(this), _tokenId);\r\n            IERC721(_tokenContract).transferFrom(_from, _to, _tokenId);\r\n            return;\r\n        }\r\n\r\n        // type = 1\r\n        if (_tokenType == TokenType.ERC1155) {\r\n            IERC1155(_tokenContract).safeTransferFrom(\r\n                _from,\r\n                _to,\r\n                _tokenId,\r\n                1,\r\n                \"\"\r\n            ); // amount - only 1 of an ERC1155 per item\r\n            return;\r\n        }\r\n\r\n        // type = 2\r\n        if (_tokenType == TokenType.ERC20) {\r\n            if (_from==address(this)){\r\n                IERC20(_tokenContract).approve(address(this), _amount);\r\n            }\r\n            IERC20(_tokenContract).transferFrom(_from, _to, _amount); // amount - ERC20 can be multiple tokens per item (bundle)\r\n            return;\r\n        }\r\n    }\r\n\r\n   // market item functions\r\n    \r\n    // creates a market item by transferring it from the originating contract\r\n    // the amount will be 1 for ERC721 or ERC1155\r\n    // amount could be more for ERC20\r\n    function createMarketItem(\r\n        address _tokenContract,\r\n        TokenType _tokenType,\r\n        uint256 _tokenId,\r\n        uint256 _amount,\r\n        uint256 _price,\r\n        string calldata _category\r\n    ) public nonReentrant {\r\n        require(_price > 0, \"No item for free here\");\r\n        require(_amount > 0, \"At least one token\");\r\n        require(approvedSourceContracts[_tokenContract]==true,\"Token contract not approved\");\r\n\r\n        _itemIds.increment();\r\n        uint256 itemId = _itemIds.current();\r\n        idToMarketItem[itemId] = MarketItem(\r\n            itemId,\r\n            _tokenContract,\r\n            _tokenType,\r\n            _tokenId,\r\n            _amount,\r\n            payable(msg.sender),\r\n            payable(address(0)), // No owner for the item\r\n            _category,\r\n            _price,\r\n            false,\r\n            false\r\n        );\r\n\r\n        transferAnyToken(\r\n            _tokenType,\r\n            _tokenContract,\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId,\r\n            _amount\r\n        );\r\n\r\n        emit MarketItemCreated(\r\n            itemId,\r\n            _tokenContract,\r\n            _tokenId,\r\n            _amount,\r\n            msg.sender,\r\n            address(0),\r\n            _category,\r\n            _price\r\n        );\r\n    }\r\n\r\n    // cancels a market item that's for sale\r\n    function cancelMarketItem(uint256 itemId) public {\r\n        require(itemId <= _itemIds.current());\r\n        require(idToMarketItem[itemId].seller == msg.sender);\r\n        require(\r\n            idToMarketItem[itemId].cancelled == false &&\r\n                idToMarketItem[itemId].isSold == false\r\n        );\r\n\r\n        idToMarketItem[itemId].cancelled = true;\r\n        _itemsCancelled.increment();\r\n\r\n        transferAnyToken(\r\n            idToMarketItem[itemId].tokenType,\r\n            idToMarketItem[itemId].tokenContract,\r\n            address(this),\r\n            msg.sender,\r\n            idToMarketItem[itemId].tokenId,\r\n            idToMarketItem[itemId].amount\r\n        );\r\n    }\r\n\r\n    // buys an item at it's current sale value\r\n\r\n    function createMarketSale(uint256 itemId) public payable nonReentrant {\r\n        uint256 price = idToMarketItem[itemId].price;\r\n        uint256 tokenId = idToMarketItem[itemId].tokenId;\r\n        require(\r\n            msg.value == price,\r\n            \"Not the correct message value\"\r\n        );\r\n        require(\r\n            idToMarketItem[itemId].isSold == false,\r\n            \"This item is already sold.\"\r\n        );\r\n        require(\r\n            idToMarketItem[itemId].cancelled == false,\r\n            \"This item is not for sale.\"\r\n        );\r\n        require(\r\n            idToMarketItem[itemId].seller != msg.sender,\r\n            \"Cannot buy your own item.\"\r\n        );\r\n\r\n        // take fees and transfer the balance to the seller (TODO)\r\n        uint256 fees = SafeMath.div(price, 100).mul(saleFeePercentage);\r\n\r\n        if (discountManager != address(0x0)) {\r\n            // how much discount does this user get?\r\n            uint256 feeDiscountPercent = IDiscountManager(discountManager)\r\n                .getDiscount(msg.sender);\r\n            fees = fees.div(100).mul(feeDiscountPercent);\r\n        }\r\n\r\n        uint256 saleAmount = price.sub(fees);\r\n        idToMarketItem[itemId].seller.transfer(saleAmount);\r\n        accumulatedFee+=fees;\r\n\r\n        transferAnyToken(\r\n            idToMarketItem[itemId].tokenType,\r\n            idToMarketItem[itemId].tokenContract,\r\n            address(this),\r\n            msg.sender,\r\n            tokenId,\r\n            idToMarketItem[itemId].amount\r\n        );\r\n\r\n        idToMarketItem[itemId].isSold = true;\r\n        idToMarketItem[itemId].buyer = payable(msg.sender);\r\n\r\n        _itemsSold.increment();\r\n        volumeTraded = volumeTraded.add(price);\r\n\r\n        emit MarketSaleCreated(\r\n            itemId,\r\n            idToMarketItem[itemId].tokenContract,\r\n            tokenId,\r\n            idToMarketItem[itemId].seller,\r\n            msg.sender,\r\n            idToMarketItem[itemId].category,\r\n            price\r\n        );\r\n    }\r\n\r\n    function getMarketItemsByPage(uint256 _from, uint256 _to) external view returns (MarketItem[] memory) {\r\n        require(_from < _itemIds.current() && _to <= _itemIds.current(), \"Page out of range.\");\r\n\r\n        uint256 itemCount;\r\n        for (uint256 i = _from; i <= _to; i++) {\r\n            if (\r\n                idToMarketItem[i].buyer == address(0) &&\r\n                idToMarketItem[i].cancelled == false &&\r\n                idToMarketItem[i].isSold == false\r\n            ){\r\n                itemCount++;\r\n            }\r\n        }\r\n\r\n        uint256 currentIndex = 0;\r\n        MarketItem[] memory marketItems = new MarketItem[](itemCount);\r\n        for (uint256 i = _from; i <= _to; i++) {\r\n\r\n             if (\r\n                idToMarketItem[i].buyer == address(0) &&\r\n                idToMarketItem[i].cancelled == false &&\r\n                idToMarketItem[i].isSold == false\r\n            ){\r\n                uint256 currentId = idToMarketItem[i].itemId;\r\n                MarketItem storage currentItem = idToMarketItem[currentId];\r\n                marketItems[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n\r\n        }\r\n        return marketItems;\r\n    }\r\n\r\n    // returns all of the current items for sale\r\n    function getMarketItems() external view returns (MarketItem[] memory) {\r\n        uint256 itemCount = _itemIds.current();\r\n        uint256 unsoldItemCount = _itemIds.current() -\r\n            (_itemsSold.current() + _itemsCancelled.current());\r\n        uint256 currentIndex = 0;\r\n\r\n        MarketItem[] memory marketItems = new MarketItem[](unsoldItemCount);\r\n        for (uint256 i = 0; i < itemCount; i++) {\r\n            if (\r\n                idToMarketItem[i + 1].buyer == address(0) &&\r\n                idToMarketItem[i + 1].cancelled == false &&\r\n                idToMarketItem[i + 1].isSold == false\r\n            ) {\r\n                uint256 currentId = idToMarketItem[i + 1].itemId;\r\n                MarketItem storage currentItem = idToMarketItem[currentId];\r\n                marketItems[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n        return marketItems;\r\n    }\r\n\r\n    // returns all itemsby seller and\r\n    function getMarketItemsBySeller(address _seller)\r\n        external\r\n        view\r\n        returns (MarketItem[] memory)\r\n    {\r\n        uint256 totalItemCount = _itemIds.current();\r\n        uint256 itemCount = 0;\r\n        uint256 currentIndex = 0;\r\n\r\n        for (uint256 i = 0; i < totalItemCount; i++) {\r\n            if (\r\n                idToMarketItem[i + 1].seller == _seller &&\r\n                idToMarketItem[i + 1].cancelled == false &&\r\n                idToMarketItem[i + 1].isSold == false //&&\r\n                //idToMarketItem[i + 1].tokenContract == _tokenContract\r\n            ) {\r\n                itemCount += 1; // No dynamic length. Predefined length has to be made\r\n            }\r\n        }\r\n\r\n        MarketItem[] memory marketItems = new MarketItem[](itemCount);\r\n        for (uint256 i = 0; i < totalItemCount; i++) {\r\n            if (\r\n                idToMarketItem[i + 1].seller == _seller &&\r\n                idToMarketItem[i + 1].cancelled == false &&\r\n                idToMarketItem[i + 1].isSold == false //&&\r\n                //idToMarketItem[i + 1].tokenContract == _tokenContract\r\n            ) {\r\n                uint256 currentId = idToMarketItem[i + 1].itemId;\r\n                MarketItem storage currentItem = idToMarketItem[currentId];\r\n                marketItems[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n        return marketItems;\r\n    }\r\n\r\n       // returns all itemsby seller and\r\n    function getMarketItemsBySellerByPage(address _seller, uint256 _from , uint256 _to)\r\n        external\r\n        view\r\n        returns (MarketItem[] memory)\r\n    {\r\n        require(_from < _itemIds.current() && _to <= _itemIds.current(), \"Page out of range.\");\r\n\r\n        uint256 itemCount = 0;\r\n        uint256 currentIndex = 0;\r\n\r\n        for (uint256 i = _from; i <= _to; i++) {\r\n            if (\r\n                idToMarketItem[i].seller == _seller &&\r\n                idToMarketItem[i].cancelled == false &&\r\n                idToMarketItem[i].isSold == false //&&\r\n            ) {\r\n                itemCount += 1; // No dynamic length. Predefined length has to be made\r\n            }\r\n        }\r\n\r\n        MarketItem[] memory marketItems = new MarketItem[](itemCount);\r\n        for (uint256 i =  _from; i <= _to; i++) {\r\n            if (\r\n                idToMarketItem[i].seller == _seller &&\r\n                idToMarketItem[i].cancelled == false &&\r\n                idToMarketItem[i].isSold == false //&&\r\n            ) {\r\n                uint256 currentId = idToMarketItem[i].itemId;\r\n                MarketItem storage currentItem = idToMarketItem[currentId];\r\n                marketItems[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n        return marketItems;\r\n    }\r\n\r\n    // Get items by category\r\n    // This could be used with different collections\r\n    function getItemsByCategory(string calldata category)\r\n        external\r\n        view\r\n        returns (MarketItem[] memory)\r\n    {\r\n        uint256 totalItemCount = _itemIds.current();\r\n        uint256 itemCount = 0;\r\n        uint256 currentIndex = 0;\r\n\r\n        for (uint256 i = 0; i < totalItemCount; i++) {\r\n            if (\r\n                keccak256(abi.encodePacked(idToMarketItem[i + 1].category)) ==\r\n                keccak256(abi.encodePacked(category)) &&\r\n                idToMarketItem[i + 1].buyer == address(0) &&\r\n                idToMarketItem[i + 1].cancelled == false &&\r\n                idToMarketItem[i + 1].isSold == false\r\n            ) {\r\n                itemCount += 1;\r\n            }\r\n        }\r\n\r\n        MarketItem[] memory marketItems = new MarketItem[](itemCount);\r\n        for (uint256 i = 0; i < totalItemCount; i++) {\r\n            if (\r\n                keccak256(abi.encodePacked(idToMarketItem[i + 1].category)) ==\r\n                keccak256(abi.encodePacked(category)) &&\r\n                idToMarketItem[i + 1].buyer == address(0) &&\r\n                idToMarketItem[i + 1].cancelled == false &&\r\n                idToMarketItem[i + 1].isSold == false\r\n            ) {\r\n                uint256 currentId = idToMarketItem[i + 1].itemId;\r\n                MarketItem storage currentItem = idToMarketItem[currentId];\r\n                marketItems[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n        return marketItems;\r\n    }\r\n\r\n       // returns the total number of items sold\r\n    function getItemsSold() external view returns (uint256) {\r\n        return _itemsSold.current();\r\n    }\r\n\r\n    // returns the current number of listed items\r\n    function numberOfItemsListed() external view returns (uint256) {\r\n        uint256 unsoldItemCount = _itemIds.current() -\r\n            (_itemsSold.current() + _itemsCancelled.current());\r\n        return unsoldItemCount;\r\n    }\r\n\r\n\r\n\r\n    // Offers functions\r\n    // make offer\r\n    // cancel offer\r\n    // accept offer\r\n    // offersByItem\r\n    // offersByBidder\r\n\r\n\r\n    function makeItemOffer(uint256 _itemId) public payable nonReentrant {\r\n        require(\r\n            idToMarketItem[_itemId].tokenContract != address(0x0) &&\r\n                idToMarketItem[_itemId].isSold == false &&\r\n                idToMarketItem[_itemId].cancelled == false,\r\n            \"Invalid item id.\"\r\n        );\r\n        require(msg.value > 0, \"Can't offer nothing.\");\r\n\r\n        _offerIds.increment();\r\n        uint256 offerId = _offerIds.current();\r\n\r\n        MarketOffer memory offer = MarketOffer(\r\n            offerId,\r\n            _itemId,\r\n            payable(msg.sender),\r\n            msg.value,\r\n            block.timestamp,\r\n            false,\r\n            false\r\n        );\r\n\r\n        offerIdToMarketOffer[offerId] = offer;\r\n        itemIdToMarketOfferIds[_itemId].push(offerId);\r\n        bidderToMarketOfferIds[msg.sender].push(offerId);\r\n\r\n        emit ItemOfferCreated(\r\n            _itemId,\r\n            idToMarketItem[_itemId].tokenContract,\r\n            idToMarketItem[_itemId].seller,\r\n            msg.sender,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function acceptItemOffer(uint256 _offerId) public nonReentrant {\r\n        uint256 itemId = offerIdToMarketOffer[_offerId].itemId;\r\n\r\n        require(idToMarketItem[itemId].seller == msg.sender, \"Not item seller\");\r\n\r\n        require(\r\n            offerIdToMarketOffer[_offerId].accepted == false &&\r\n                offerIdToMarketOffer[_offerId].cancelled == false,\r\n            \"Already accepted or cancelled.\"\r\n        );\r\n\r\n        uint256 price = offerIdToMarketOffer[_offerId].offerAmount;\r\n        address bidder = payable(offerIdToMarketOffer[_offerId].bidder);\r\n\r\n        uint256 fees = SafeMath.div(price, 100).mul(saleFeePercentage);\r\n\r\n        // fees and payment\r\n        if (discountManager != address(0x0)) {\r\n            // how much discount does this user get?\r\n            uint256 feeDiscountPercent = IDiscountManager(discountManager)\r\n                .getDiscount(msg.sender);\r\n            fees = fees.div(100).mul(feeDiscountPercent);\r\n        }\r\n\r\n        uint256 saleAmount = price.sub(fees);\r\n        payable(msg.sender).transfer(saleAmount);\r\n        if (fees > 0) {\r\n            accumulatedFee+=fees;\r\n        }\r\n\r\n        transferAnyToken(\r\n            idToMarketItem[itemId].tokenType,\r\n            idToMarketItem[itemId].tokenContract,\r\n            address(this),\r\n            offerIdToMarketOffer[_offerId].bidder,\r\n            idToMarketItem[itemId].tokenId,\r\n            idToMarketItem[itemId].amount\r\n        );\r\n\r\n        offerIdToMarketOffer[_offerId].accepted = true;\r\n        \r\n        idToMarketItem[itemId].isSold = true;\r\n        idToMarketItem[itemId].buyer = offerIdToMarketOffer[_offerId].bidder;\r\n\r\n        _itemsSold.increment();\r\n\r\n        emit MarketSaleCreated(\r\n            itemId,\r\n            idToMarketItem[itemId].tokenContract,\r\n            idToMarketItem[itemId].tokenId,\r\n            msg.sender,\r\n            bidder,\r\n            idToMarketItem[itemId].category,\r\n            price\r\n        );\r\n\r\n        volumeTraded = volumeTraded.add(price);\r\n    }\r\n\r\n    function canceItemOffer(uint256 _offerId) public nonReentrant {\r\n        require(\r\n            offerIdToMarketOffer[_offerId].bidder == msg.sender &&\r\n                offerIdToMarketOffer[_offerId].cancelled == false,\r\n            \"Wrong bidder or offer is already cancelled\"\r\n        );\r\n        require(\r\n            offerIdToMarketOffer[_offerId].accepted == false,\r\n            \"Already accepted.\"\r\n        );\r\n\r\n        address bidder = offerIdToMarketOffer[_offerId].bidder;\r\n\r\n        offerIdToMarketOffer[_offerId].cancelled = true;\r\n        payable(bidder).transfer(offerIdToMarketOffer[_offerId].offerAmount);\r\n\r\n        //TODO emit\r\n    }\r\n\r\n     function getOffersByBidder(address _bidder)\r\n        external\r\n        view\r\n        returns (MarketOffer[] memory)\r\n    {\r\n        uint256 openOfferCount = 0;\r\n        uint256[] memory itemOfferIds = bidderToMarketOfferIds[_bidder];\r\n\r\n        for (uint256 i = 0; i < itemOfferIds.length; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                openOfferCount++;\r\n            }\r\n        }\r\n\r\n        MarketOffer[] memory openOffers = new MarketOffer[](openOfferCount);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = 0; i < itemOfferIds.length; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                MarketOffer memory currentItem = offerIdToMarketOffer[\r\n                    itemOfferIds[i]\r\n                ];\r\n                openOffers[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n\r\n        return openOffers;\r\n    }\r\n\r\n     function getTotalOffersMadeByBidder(address _bidder) external view returns (uint256){\r\n         return bidderToMarketOfferIds[_bidder].length;\r\n     }\r\n\r\n     function getOpenOffersByBidderByPage(address _bidder, uint256 _from , uint256 _to)\r\n        external\r\n        view\r\n        returns (MarketOffer[] memory)\r\n    {\r\n        uint256 openOfferCount = 0;\r\n        uint256[] memory itemOfferIds = bidderToMarketOfferIds[_bidder];\r\n\r\n        for (uint256 i = _from; i <= _to; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                openOfferCount++;\r\n            }\r\n        }\r\n\r\n        MarketOffer[] memory openOffers = new MarketOffer[](openOfferCount);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = _from; i <= _to; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                MarketOffer memory currentItem = offerIdToMarketOffer[\r\n                    itemOfferIds[i]\r\n                ];\r\n                openOffers[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n\r\n        return openOffers;\r\n    }\r\n\r\n    function getItemOffers(uint256 _itemId)\r\n        external\r\n        view\r\n        returns (MarketOffer[] memory)\r\n    {\r\n        uint256 openOfferCount = 0;\r\n        uint256[] memory itemOfferIds = itemIdToMarketOfferIds[_itemId];\r\n\r\n        for (uint256 i = 0; i < itemOfferIds.length; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                openOfferCount++;\r\n            }\r\n        }\r\n\r\n        MarketOffer[] memory openOffers = new MarketOffer[](openOfferCount);\r\n        uint256 currentIndex = 0;\r\n        for (uint256 i = 0; i < itemOfferIds.length; i++) {\r\n            if (\r\n                offerIdToMarketOffer[itemOfferIds[i]].accepted == false &&\r\n                offerIdToMarketOffer[itemOfferIds[i]].cancelled == false\r\n            ) {\r\n                MarketOffer memory currentItem = offerIdToMarketOffer[\r\n                    itemOfferIds[i]\r\n                ];\r\n                openOffers[currentIndex] = currentItem;\r\n                currentIndex += 1;\r\n            }\r\n        }\r\n\r\n        return openOffers;\r\n    }\r\n\r\n    // administration functions\r\n    function setSalePercentageFee(uint256 _amount) public onlyOwner {\r\n        require(_amount <= 5, \"5% maximum fee allowed.\");\r\n        saleFeePercentage = _amount;\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        require(_owner != address(0x0), \"0x0 address not permitted\");\r\n        owner = payable(_owner);\r\n    }\r\n\r\n    function setDiscountManager(address _discountManager) public onlyOwner {\r\n        require(_discountManager != address(0x0), \"0x0 address not permitted\");\r\n        discountManager = _discountManager;\r\n    }\r\n\r\n    function setSourceContractApproved(address _tokenContract, bool _approved) external onlyOwner {\r\n        approvedSourceContracts[_tokenContract]=_approved;\r\n    }\r\n\r\n\r\n    // IERC1155Receiver implementations\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n\r\n    function supportsInterface(bytes4 interfaceId) override external pure returns (bool){\r\n            return interfaceId == type(IERC1155Receiver).interfaceId\r\n            || true;\r\n    }\r\n\r\n    function withdraw_all() external onlyClevel {\r\n        require (accumulatedFee > 0);\r\n        uint256 amountB = SafeMath.div(accumulatedFee,100).mul(walletBPercentage);\r\n        uint256 amountA = accumulatedFee.sub(amountB);\r\n        accumulatedFee = 0;\r\n        payable(walletA).transfer(amountA);\r\n        payable(walletB).transfer(amountB);\r\n    }\r\n\r\n    function setWalletA(address _walletA) external onlyOwner {\r\n        require (_walletA != address(0x0), \"Invalid wallet\");\r\n        walletA = _walletA;\r\n    }\r\n\r\n    function setWalletB(address _walletB) external onlyOwner {\r\n        require (_walletB != address(0x0), \"Invalid wallet.\");\r\n        walletB = _walletB;\r\n    }\r\n\r\n    function setWalletBPercentage(uint256 _percentage) external onlyOwner {\r\n        require (_percentage>walletBPercentage && _percentage<=100, \"Invalid new slice.\");\r\n        walletBPercentage = _percentage;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"ItemOfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketSaleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_itemIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"acceptItemOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedSourceContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidderToMarketOfferIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"canceItemOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"cancelMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"_tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"createMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"createMarketSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItemOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"getItemsByCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMarketItemsByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getMarketItemsBySeller\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMarketItemsBySellerByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getOffersByBidder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getOpenOffersByBidderByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct ShiryoMarket.MarketOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getTotalOffersMadeByBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToMarketItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"enum ShiryoMarket.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemIdToMarketOfferIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"makeItemOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfItemsListed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerIdToMarketOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discountManager\",\"type\":\"address\"}],\"name\":\"setDiscountManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSalePercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setSourceContractApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletA\",\"type\":\"address\"}],\"name\":\"setWalletA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletB\",\"type\":\"address\"}],\"name\":\"setWalletB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setWalletBPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeTraded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShiryoMarket", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c41f50b588772cd0977122454e7feaa244a2bc55778e8b7188e1e7e73bd6f4f9"}]}