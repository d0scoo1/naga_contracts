{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IComp {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IGovernorAlpha {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, bool support) external;\r\n}\r\n\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice COMP token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorAlpha` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param comp_ `COMP` token contract address\r\n    * @param governor_ Compound protocol `GovernorAlpha` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address comp_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Compound contracts data\r\n        comp = comp_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IComp(comp_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IGovernorAlpha(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n\r\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\r\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\r\n\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        IGovernorAlpha(governor).castVote(govProposalId, true);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}\r\n\r\n\r\ncontract CrowdProposalFactory {\r\n    /// @notice `COMP` token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorAlpha` contract address\r\n    address public immutable governor;\r\n    /// @notice Minimum Comp tokens required to create a crowd proposal\r\n    uint public immutable compStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n     /**\r\n     * @notice Construct a proposal factory for crowd proposals\r\n     * @param comp_ `COMP` token contract address\r\n     * @param governor_ Compound protocol `GovernorAlpha` contract address\r\n     * @param compStakeAmount_ The minimum amount of Comp tokes required for creation of a crowd proposal\r\n     */\r\n    constructor(address comp_,\r\n                address governor_,\r\n                uint compStakeAmount_) public {\r\n        comp = comp_;\r\n        governor = governor_;\r\n        compStakeAmount = compStakeAmount_;\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new crowd proposal\r\n    * @notice Call `Comp.approve(factory_address, compStakeAmount)` before calling this method\r\n    * @param targets The ordered list of target addresses for calls to be made\r\n    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures The ordered list of function signatures to be called\r\n    * @param calldatas The ordered list of calldata to be passed to each call\r\n    * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n    */\r\n    function createCrowdProposal(address[] memory targets,\r\n                                 uint[] memory values,\r\n                                 string[] memory signatures,\r\n                                 bytes[] memory calldatas,\r\n                                 string memory description) external {\r\n        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, comp, governor);\r\n        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n        // Stake COMP and force proposal to delegate votes to itself\r\n        IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4949303609d8028a829949122056b9a200c4932c29d75e33f1267b68d0833693"}]}