{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ENSBulkTool/ENSBulkTool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// https://0xinside.xyz\\n// Twitter: @0xinside\\n\\npragma solidity ^0.8.13;\\n\\nimport { IETHRegistrarController } from \\\"./interfaces/IETHRegistrarController.sol\\\";\\n\\ncontract ENSBulkTool {\\n  IETHRegistrarController public immutable controller = IETHRegistrarController(0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5);\\n\\n  function commitAll(bytes32[] calldata commitments) external {\\n    for (uint256 i = 0; i < commitments.length; i++) {\\n      controller.commit(commitments[i]);\\n    }\\n  }\\n\\n  function registerAll(string[] calldata names, uint256 duration, bytes32 secret) external payable {\\n    for (uint256 i = 0; i < names.length; i++) {\\n      uint256 cost = controller.rentPrice(names[i], duration);\\n      controller.register{ value: cost }(names[i], msg.sender, duration, secret);\\n    }\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  function renewAll(string[] calldata names, uint256 duration) external payable {\\n    for (uint256 i = 0; i < names.length; i++) {\\n      uint256 cost = controller.rentPrice(names[i], duration);\\n      controller.renew{ value: cost }(names[i], duration);\\n    }\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  function priceAll(string[] calldata names, uint256 duration) external view returns (uint256 total) {\\n    for (uint256 i = 0; i < names.length; i++) {\\n      total += controller.rentPrice(names[i], duration);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/ENSBulkTool/interfaces/IETHRegistrarController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\ninterface IETHRegistrarController {\\n    function commit(bytes32 commitment) external;\\n\\n    function register(string calldata name, address owner, uint256 duration, bytes32 secret) external payable;\\n\\n    function renew(string calldata name, uint256 duration) external payable;\\n\\n    function rentPrice(string memory name, uint256 duration) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commitments\",\"type\":\"bytes32[]\"}],\"name\":\"commitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IETHRegistrarController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"priceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"registerAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ENSBulkTool", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03f1b741ffcb06e1eabb7561bf99f7726065a90fc1a93a842e0cabe4ddea9a54"}]}