{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n// \u63a5\u53e3\u5408\u7ea6\r\ninterface IERC721 {\r\n    // \u94f8\u9020\u65b9\u6cd5\r\n    function mint(\r\n        uint256 _category,\r\n        bytes memory _data,\r\n        bytes memory _signature\r\n    ) external;\r\n\r\n    // \u53d1\u9001\u65b9\u6cd5\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function balanceOf(address account, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// \u94f8\u9020\u5408\u7ea6\r\ncontract ERC721Mint {\r\n    // \u6784\u9020\u51fd\u6570(nft\u5408\u7ea6\u5730\u5740, \u5f52\u96c6\u5730\u5740)\r\n    constructor() payable {\r\n        // \u83b7\u53d6\u603b\u91cf\r\n        // IERC721(tokenAddress).mint(countItem, dataItem, signature);\r\n        // // \u5f52\u96c6\r\n        // IERC721(tokenAddress).safeTransferFrom(\r\n        //     address(this),\r\n        //     ownerInfo,\r\n        //     countItem,\r\n        //     1,\r\n        //     \"0x\"\r\n        // );\r\n        // // \u81ea\u6bc1(\u6536\u6b3e\u5730\u5740,\u5f52\u96c6\u5730\u5740)\r\n        // selfdestruct(payable(ownerInfo));\r\n    }\r\n\r\n    function mintInfo(  address tokenAddress,\r\n        uint256 countItem,\r\n        bytes memory dataItem,\r\n        bytes memory signature,\r\n        address ownerInfo)\r\n       public\r\n    {\r\n            // \u83b7\u53d6\u603b\u91cf\r\n        IERC721(tokenAddress).mint(countItem, dataItem, signature);\r\n        // \u5f52\u96c6\r\n        IERC721(tokenAddress).safeTransferFrom(\r\n            address(this),\r\n            ownerInfo,\r\n            countItem,\r\n            1,\r\n            \"0x\"\r\n        );\r\n        selfdestruct(payable(ownerInfo));\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n}\r\n\r\n// \u5de5\u5382\u5408\u7ea6\r\ncontract BatchMint {\r\n    // \u6240\u6709\u8005\u5730\u5740\r\n    address public owner;\r\n    address public cc;\r\n\r\n    constructor() {\r\n        // \u6240\u6709\u8005 = \u5408\u7ea6\u90e8\u7f72\u8005\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // \u90e8\u7f72\u65b9\u6cd5,(NFT\u5408\u7ea6\u5730\u5740,\u62a2\u8d2d\u6570\u91cf)\r\n    function deploy(\r\n        bytes32[] memory saltArr,\r\n        address tokenAddress,\r\n        uint256[] memory countArr,\r\n        bytes[] memory dataArr,\r\n        bytes[] memory signatureArr,\r\n        address sendAddress\r\n    ) public {\r\n        require(msg.sender == owner, \"not owner\");\r\n        // \u7528\u62a2\u8d2d\u6570\u91cf\u8fdb\u884c\u5faa\u73af\r\n        for (uint256 i; i < saltArr.length; i++) {\r\n            // \u90e8\u7f72\u5408\u7ea6(\u62a2\u8d2d\u603b\u4ef7)(NFT\u5408\u7ea6\u5730\u5740,\u6240\u6709\u8005\u5730\u5740)\r\n            ERC721Mint c = new ERC721Mint{salt: saltArr[i]}();\r\n            cc = address(c);\r\n            c.mintInfo(tokenAddress,countArr[i],\r\n                dataArr[i],\r\n                signatureArr[i],\r\n                sendAddress);\r\n        }\r\n    }\r\n\r\n    function getAddress(\r\n        bytes32 salt\r\n    ) public view returns (address) {\r\n        address predictedAddress = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            bytes1(0xff),\r\n                            address(this),\r\n                            salt,\r\n                            keccak256(\r\n                                abi.encodePacked(\r\n                                    type(ERC721Mint).creationCode\r\n                                )\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        return predictedAddress;\r\n    }\r\n\r\n    function balanceOf(address tokenAddress,address searchAddress, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 count = IERC721(tokenAddress).balanceOf(searchAddress, id);\r\n        return count;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"searchAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"saltArr\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"countArr\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataArr\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatureArr\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sendAddress\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BatchMint", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bac8abcb365523b6ce7075164a5dca02f0689ee6b867aabcc586a063d7e8b23b"}]}