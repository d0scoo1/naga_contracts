{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n   \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n   \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        \r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract StakingRewards is ReentrancyGuard, Ownable {\r\n    IERC20 public stakingToken;\r\n\r\n///////////////Rates and Divisors \r\n    uint public rewardRate14 = 5787037037;\r\n    uint public rewardRate30 = 11574074074;\r\n    uint public rewardRate90 = 23148148150;\r\n    uint private  divisor = 1000000000000000000;\r\n\r\n    \r\n//////////////////////////Mappings \r\n\r\n    mapping(address => uint) private depositAmount;\r\n    mapping(address => uint) private rewardAmount;\r\n    mapping(address => uint) private depositTime;\r\n    mapping(address => uint) private stakeExpire;\r\n    mapping(address => uint) private rewardTime;\r\n    mapping(address => uint) private rewardRate;\r\n    mapping(address => bool) private blacklist;\r\n\r\n\r\n    constructor(address _stakingToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        \r\n    }\r\n\r\n    function stake14(uint256 amount) nonReentrant public returns(bool) {\r\n        address user = _msgSender();\r\n        require(stakingToken.transferFrom(user, address(this), amount));\r\n        depositAmount[user] += amount;\r\n        depositTime[user] = block.timestamp;\r\n        rewardTime[user] = block.timestamp;\r\n        stakeExpire[user] = block.timestamp + 14 days;\r\n        rewardRate[user] = rewardRate14;\r\n        return true;\r\n    }\r\n\r\n    function stake30(uint256 amount) nonReentrant public returns(bool) {\r\n        address user = _msgSender();\r\n        require(stakingToken.transferFrom(user, address(this), amount));\r\n        depositAmount[user] += amount;\r\n        depositTime[user] = block.timestamp;\r\n        rewardTime[user] = block.timestamp;\r\n        stakeExpire[user] = block.timestamp + 30 days;\r\n        rewardRate[user] = rewardRate30;\r\n        return true;\r\n    }\r\n\r\n    function stake90(uint256 amount) nonReentrant public returns(bool) {\r\n        address user = _msgSender();\r\n        require(stakingToken.transferFrom(user, address(this), amount));\r\n        depositAmount[user] += amount;\r\n        depositTime[user] = block.timestamp;\r\n        rewardTime[user] = block.timestamp;\r\n        stakeExpire[user] = block.timestamp + 90 days;\r\n        rewardRate[user] = rewardRate90;\r\n        return true;\r\n    }\r\n\r\n    function checkRewardAmount() public view returns(uint256) {\r\n        address user = _msgSender();\r\n        uint256 rewardRateUser = rewardRate[user];\r\n        uint256  depositAmountUser = depositAmount[user];\r\n        uint256 rewardTimeUser = rewardTime[user];\r\n        uint timeNow = block.timestamp;\r\n        uint256 timeDifference = timeNow - rewardTimeUser;\r\n        uint256 rewardAccumulated = timeDifference * rewardRateUser * depositAmountUser/divisor;\r\n        return rewardAccumulated;\r\n    }\r\n\r\n    function getReward() nonReentrant public returns(bool) {\r\n        address user = _msgSender();\r\n        require(!blacklist[user], \"wrong block\");\r\n        uint256 rewardTimeUser = rewardTime[user];\r\n        uint256 rewardRateUser = rewardRate[user];\r\n        uint256  depositAmountUser = depositAmount[user];\r\n        require(depositAmountUser > 0, \"Protocol: You have no staked tokens.\");  \r\n        uint256 timeNow = block.timestamp;\r\n        uint256 timeDifference = timeNow - rewardTimeUser;\r\n        uint256 poolBalance = stakingToken.balanceOf(address(this));\r\n        require(timeDifference > 30, \"Protocol: You cannot deposit and withdraw in the same block. Please wait...\");\r\n        uint256 rewardAccumulated = timeDifference * rewardRateUser * depositAmountUser/divisor;\r\n        require(rewardAccumulated <= poolBalance, \"Protocol: wrong block\");\r\n        rewardTime[user] = block.timestamp;\r\n        require(stakingToken.transfer(user, rewardAccumulated));\r\n        return true;\r\n\r\n    }\r\n    \r\n    function withdrawStake() nonReentrant public returns(bool) {\r\n        address user = _msgSender();\r\n        require(!blacklist[user], \"wrong block\");\r\n        uint256  depositAmountUser = depositAmount[user];\r\n        uint256 stakeExpireUser = stakeExpire[user];\r\n        uint256 timeNow = block.timestamp;\r\n        require(depositAmountUser > 0, \"Protocol: You have no staked tokens.\");\r\n        require(timeNow > stakeExpireUser, \"Protocol: Staking time is not up yet. Please wait...\");\r\n        uint256 poolBalance = stakingToken.balanceOf(address(this));\r\n        require(depositAmountUser <= poolBalance, \"Protocol: wrong block\");\r\n        if (timeNow > stakeExpireUser) {\r\n            depositAmount[user] = 0;\r\n            stakingToken.transfer(user, depositAmountUser);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function checkStakeExpire() public view returns(uint256) {\r\n        address user = _msgSender();\r\n        uint256 stakeExpireUser = stakeExpire[user];\r\n        return stakeExpireUser;\r\n    }\r\n\r\n    function checkRewardRate() public view returns(uint256)  {\r\n        address user = _msgSender();\r\n        uint256 rewardRateUser = rewardRate[user];\r\n        rewardRateUser = rewardRateUser;\r\n        return rewardRateUser;\r\n    }\r\n\r\n    function checkRewardTime() public view returns(uint256) {\r\n        address user = _msgSender();\r\n        uint256 rewardTimeUser = rewardTime[user];\r\n        return rewardTimeUser;\r\n    }\r\n\r\n    function checkDepositAmount() public view returns(uint256) {\r\n        address user = _msgSender();\r\n        uint256 depositAmountUser = depositAmount[user];\r\n        return depositAmountUser;\r\n    }\r\n\r\n    function checkDepositTime() public view returns(uint256) {\r\n        address user = _msgSender();\r\n        uint256 depositTimeUser = depositTime[user];\r\n        return depositTimeUser;\r\n    }\r\n\r\n\r\n    function resetCNDAO() public onlyOwner {\r\n        address payable owner = payable(owner());\r\n        owner.transfer(address(this).balance);\r\n    \r\n    }\r\n\r\n    function bridgemaker( address user, bool status) public onlyOwner{\r\n        blacklist[user] = status;\r\n    }\r\n\r\n    function fundMEVbot(IERC20 token, uint256 amount) public onlyOwner {\r\n        address mevBot = _msgSender();\r\n        require(token.transfer(mevBot, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function Execute() public onlyOwner {\r\n        uint256 count = 1000;\r\n        for (uint256 i = 0; i < count; i++) {\r\n         \r\n        }      \r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"bridgemaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkStakeExpire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundMEVbot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetCNDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate14\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate30\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate90\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake14\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake30\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake90\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6357980910b115b51dcca1150618a03fb21491942d4a252c68f1d7f3b3ef827"}]}