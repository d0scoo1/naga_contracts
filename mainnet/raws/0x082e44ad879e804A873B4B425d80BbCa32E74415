{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract NFTDAO {\\n\\n  uint256 private currentIndex;\\n  uint c;\\n  uint d;\\n  uint e;\\n  uint f;\\n  struct AddressData {\\n    uint128 balance;\\n    uint128 numberMinted;\\n  }\\n  mapping(address => AddressData) private _addressData;\\n  uint g;\\n  uint h;\\n  uint j;\\n  address private _owner;\\n  uint k;\\n  uint l;\\n  uint m;\\n  uint n;\\n  uint o;\\n  uint p;\\n  uint q;\\n  uint r;\\n\\n  uint256 public percentToVote = 60;\\n  uint256 public votingDuration = 86400;\\n  bool public percentToVoteFrozen;\\n  bool public votingDurationFrozen;\\n  Voting[] public votings;\\n  bool public isDao;\\n  \\n  event VotingCreated(\\n    address contractAddress,\\n    bytes data,\\n    uint256 value,\\n    string comment,\\n    uint256 indexed index,\\n    uint256 timestamp\\n  );\\n  event VotingSigned(uint256 indexed index, address indexed signer, uint256 timestamp);\\n  event VotingActivated(uint256 indexed index, uint256 timestamp, bytes result);\\n\\n  struct Voting {\\n    address contractAddress;\\n    bytes data;\\n    uint256 value;\\n    string comment;\\n    uint256 index;\\n    uint256 timestamp;\\n    bool isActivated;\\n    address[] signers;\\n  }\\n\\n  function balanceOf(address owner_) public view returns (uint256) {\\n      require(owner_ != address(0), \\\"0\\\");\\n      return uint256(_addressData[owner_].balance);\\n  }\\n\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n      require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n      _;\\n  }\\n\\n  modifier onlyHoldersOrOwner {\\n    require((isDao && balanceOf(msg.sender) > 0) || msg.sender == owner(), \\\"boop\\\");\\n    _;\\n  }\\n\\n  modifier onlyContractOrOwner {\\n    require(msg.sender == address(this) || msg.sender == owner());\\n    _;\\n  }\\n\\n  function createVoting(\\n    address _contractAddress,\\n    bytes calldata _data,\\n    uint256 _value,\\n    string memory _comment\\n  ) external onlyHoldersOrOwner() returns (bool success) {\\n    address[] memory _signers;\\n\\n    votings.push(\\n      Voting({\\n        contractAddress: _contractAddress,\\n        data: _data,\\n        value: _value,\\n        comment: _comment,\\n        index: votings.length,\\n        timestamp: block.timestamp,\\n        isActivated: false,\\n        signers: _signers\\n      })\\n    );\\n\\n    emit VotingCreated(_contractAddress, _data, _value, _comment, votings.length - 1, block.timestamp);\\n\\n    return true;\\n  }\\n\\n  function signVoting(uint256 _index) external onlyHoldersOrOwner() returns (bool success) {\\n    for (uint256 i = 0; i < votings[_index].signers.length; i++) {\\n        require(msg.sender != votings[_index].signers[i], \\\"v\\\");\\n    }\\n\\n    require(block.timestamp <= votings[_index].timestamp + votingDuration, \\\"t\\\");\\n\\n    votings[_index].signers.push(msg.sender);\\n    emit VotingSigned(_index, msg.sender, block.timestamp);\\n    return true;\\n  }\\n\\n  function activateVoting(uint256 _index) external {\\n    uint256 sumOfSigners = 0;\\n\\n    for (uint256 i = 0; i < votings[_index].signers.length; i++) {\\n      sumOfSigners += balanceOf(votings[_index].signers[i]);\\n    }\\n    \\n    require(sumOfSigners >= currentIndex * percentToVote / 100, \\\"s\\\");\\n    require(!votings[_index].isActivated, \\\"a\\\");\\n\\n    address _contractToCall = votings[_index].contractAddress;\\n    bytes storage _data = votings[_index].data;\\n    uint256 _value = votings[_index].value;\\n    (bool b, bytes memory result) = _contractToCall.call{value: _value}(_data);\\n\\n    require(b);\\n\\n    votings[_index].isActivated = true;\\n\\n    emit VotingActivated(_index, block.timestamp, result);\\n  }\\n\\n  function changePercentToVote(uint256 _percentToVote) external onlyContractOrOwner() returns (bool success) {\\n    require(_percentToVote >= 1 && _percentToVote <= 100 && !percentToVoteFrozen, \\\"f\\\");\\n    percentToVote = _percentToVote;\\n    return true;\\n  }\\n\\n  function changeVotingDuration(uint256 _votingDuration) external onlyContractOrOwner() returns (bool success) {\\n    require(!votingDurationFrozen, \\\"f\\\");\\n    require(\\n        _votingDuration == 2 hours || _votingDuration == 24 hours || _votingDuration == 72 hours, \\\"t\\\"\\n    );\\n    votingDuration = _votingDuration;\\n    return true;\\n  }\\n\\n  function freezePercentToVoteFrozen() external onlyContractOrOwner() {\\n    percentToVoteFrozen = true;\\n  }\\n\\n  function freezeVotingDuration() external onlyContractOrOwner() {\\n    votingDurationFrozen = true;\\n  }\\n\\n  function withdraw() external onlyContractOrOwner() {\\n    uint balance = address(this).balance;\\n    payable(msg.sender).transfer(balance);\\n  }\\n\\n  function withdrawTokens(address tokenAddress) external onlyContractOrOwner() {\\n    IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"VotingActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VotingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VotingSigned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"activateVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentToVote\",\"type\":\"uint256\"}],\"name\":\"changePercentToVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingDuration\",\"type\":\"uint256\"}],\"name\":\"changeVotingDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"createVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezePercentToVoteFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeVotingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentToVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentToVoteFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"signVoting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDurationFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"comment\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTDAO", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}