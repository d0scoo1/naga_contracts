{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/distribution/ClaimXFAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract ClaimXFAToken {\\n\\n    address immutable private token;\\n    address immutable private owner;\\n    address immutable private signer;\\n    uint256 immutable private tokenListingDate;\\n    mapping(address => uint256) private userClaimedTokens;     \\n\\n    uint256 internal constant _MIN_COINS_FOR_VESTING = 23530 * 10 ** 18;    \\n\\n    event onClaimBoughtTokens(address _user, uint256 _maxTokensAllowed);\\n\\n    constructor(address _token, address _signer, uint256 _listingDate) {\\n        token = _token;\\n        signer = _signer;\\n        tokenListingDate = _listingDate;\\n        owner = msg.sender;\\n    }\\n\\n    function claimTokens(bytes calldata _params, bytes calldata _messageLength, bytes calldata _signature) external {\\n        require(block.timestamp >= tokenListingDate, \\\"TokenNoListedYet\\\");\\n\\n        address _signer = _decodeSignature(_params, _messageLength, _signature);\\n        require(_signer == signer, \\\"BadSigner\\\");\\n\\n        (address _user, uint256 _boughtBalance) = abi.decode(_params, (address, uint256));\\n        require(_boughtBalance > 0, \\\"NoBalance\\\");\\n        uint256 maxTokensAllowed = 0;\\n\\n        if ((block.timestamp >= tokenListingDate) && (block.timestamp < tokenListingDate + 90 days)) {\\n            if (_boughtBalance <= _MIN_COINS_FOR_VESTING) {\\n                maxTokensAllowed = _boughtBalance - userClaimedTokens[_user];\\n            } else {\\n                uint maxTokens = _boughtBalance * 25 / 100;\\n                if (userClaimedTokens[_user] < maxTokens) {\\n                    maxTokensAllowed = maxTokens - userClaimedTokens[_user];\\n                }\\n            }\\n        } else if ((block.timestamp >= tokenListingDate + 90 days) && (block.timestamp < tokenListingDate + 180 days)) {\\n            uint256 maxTokens = _boughtBalance * 50 / 100;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                maxTokensAllowed = maxTokens - userClaimedTokens[_user];\\n            }\\n        } else if ((block.timestamp >= tokenListingDate + 180 days) && (block.timestamp < tokenListingDate + 270 days)) {\\n            uint256 maxTokens = _boughtBalance * 75 / 100;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                maxTokensAllowed = maxTokens - userClaimedTokens[_user];\\n            }\\n        } else {\\n            uint256 maxTokens = _boughtBalance;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                maxTokensAllowed = maxTokens - userClaimedTokens[_user];\\n            }\\n        }\\n\\n        require(maxTokensAllowed > 0, \\\"NoTokensToWithdraw\\\");\\n\\n        userClaimedTokens[_user] += maxTokensAllowed;\\n        require(IERC20(token).transfer(_user, maxTokensAllowed));\\n\\n        emit onClaimBoughtTokens(_user, maxTokensAllowed);\\n    }\\n\\n    function emegercyWithdraw(address _token) external {\\n        require(msg.sender == owner, \\\"OnlyOwner\\\");\\n\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).transfer(owner, tokenBalance);\\n    }\\n\\n    function getClaimData(bytes calldata _params) external view returns(address _user, uint256 _boughtBalance, uint256 _claimed, uint256 _canWithdrawNow, uint256 _nextPeriod) {\\n        (_user, _boughtBalance) = abi.decode(_params, (address, uint256));\\n        _claimed = userClaimedTokens[_user];\\n        _nextPeriod = tokenListingDate;\\n\\n        if ((block.timestamp >= tokenListingDate) && (block.timestamp < tokenListingDate + 90 days)) {\\n            if (_boughtBalance <= _MIN_COINS_FOR_VESTING) {\\n                _canWithdrawNow = _boughtBalance - userClaimedTokens[_user];\\n            } else {\\n                uint maxTokens = _boughtBalance * 25 / 100;\\n                if (userClaimedTokens[_user] < maxTokens) {\\n                    _canWithdrawNow = maxTokens - userClaimedTokens[_user];\\n                }\\n            }\\n            _nextPeriod = tokenListingDate + 90 days;\\n        } else if ((block.timestamp >= tokenListingDate + 90 days) && (block.timestamp < tokenListingDate + 180 days)) {\\n            uint256 maxTokens = _boughtBalance * 50 / 100;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                _canWithdrawNow = maxTokens - userClaimedTokens[_user];\\n            }\\n            _nextPeriod = tokenListingDate + 180 days;\\n        } else if ((block.timestamp >= tokenListingDate + 180 days) && (block.timestamp < tokenListingDate + 270 days)) {\\n            uint256 maxTokens = _boughtBalance * 75 / 100;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                _canWithdrawNow = maxTokens - userClaimedTokens[_user];\\n            }\\n            _nextPeriod = tokenListingDate + 270 days;\\n        } else {\\n            uint256 maxTokens = _boughtBalance;\\n            if (userClaimedTokens[_user] < maxTokens) {\\n                _canWithdrawNow = maxTokens - userClaimedTokens[_user];\\n            }\\n            _nextPeriod = 0;\\n        }\\n    }\\n\\n    function getUserClaimedTokens(address _user) external view returns(uint256) {\\n        return userClaimedTokens[_user];\\n    }\\n\\n    function _decodeSignature(bytes memory _message, bytes memory _messageLength, bytes memory _signature) internal pure returns (address) {\\n        if (_signature.length != 65) return (address(0));\\n\\n        bytes32 messageHash = keccak256(abi.encodePacked(hex\\\"19457468657265756d205369676e6564204d6573736167653a0a\\\", _messageLength, _message));\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(_signature, 0x20))\\n            s := mload(add(_signature, 0x40))\\n            v := byte(0, mload(add(_signature, 0x60)))\\n        }\\n\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) return address(0);\\n\\n        if (v != 27 && v != 28) return address(0);\\n        \\n        return ecrecover(messageHash, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_listingDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTokensAllowed\",\"type\":\"uint256\"}],\"name\":\"onClaimBoughtTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_messageLength\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emegercyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"getClaimData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boughtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canWithdrawNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimXFAToken", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e29aeb6c45840354fae1c143ff9b92543c37e8c0000000000000000000000008b05c63b0ff955c92b6fdb95bd5739efce66d7a4000000000000000000000000000000000000000000000000000000006216bc70", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}