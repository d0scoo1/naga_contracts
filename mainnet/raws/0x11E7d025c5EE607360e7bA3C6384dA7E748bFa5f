{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PoisonedBananasClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\ncontract IPoisonedBananas {\\r\\n     function mintSingle(uint256 bananaType, address to) external {}\\r\\n     function mintMultiple(uint256[] memory bananaTypes, uint256[] memory amounts, address to) external {}\\r\\n}\\r\\n\\r\\ncontract IPoisonedBananaClaimRNG {\\r\\n    function getRandomNumber(address _addr, uint256 apeId) external view returns (uint256) {}\\r\\n}\\r\\n\\r\\ncontract PoisonedBananasClaim is Ownable {\\r\\n\\r\\n    /**\\r\\n     * @dev EXTERNAL ADDRESSES\\r\\n     */\\r\\n    IERC721 public primeApeNFT;\\r\\n    IPoisonedBananas public bananas;\\r\\n    IPoisonedBananaClaimRNG private claimRng;\\r\\n    \\r\\n    /** \\r\\n     * @dev GENERAL DATA \\r\\n     */\\r\\n    uint256 public maxSupply = 7979;\\r\\n    uint256 public lvl1Supply = 5000;\\r\\n    uint256 public lvl2Supply = 2965;\\r\\n    uint256 public lvl3Supply = 14;\\r\\n\\r\\n    uint256 public lvl2Odds = 3;\\r\\n    uint256 public lvl3Odds = 569;\\r\\n\\r\\n    /**\\r\\n     * @dev CLAIM DATA\\r\\n     */\\r\\n    mapping(uint256 => bool) public apeToClaimed;\\r\\n    mapping(uint256 => uint256) public levelToClaimed;\\r\\n\\r\\n    /**\\r\\n     * @dev MINT DATA\\r\\n     */\\r\\n    uint256 public holderPrice = 0.07979 ether;\\r\\n    uint256 public price = 0.15 ether;\\r\\n    uint256 public minted;\\r\\n    uint256 public mintMaxAmount = 1;\\r\\n    bool public isHolderSale;\\r\\n    bool public isSale;\\r\\n    mapping(address => uint256) public addressToHolderMint;\\r\\n    mapping(address => uint256) public addressToMints;\\r\\n    \\r\\n    /**\\r\\n     * @dev Setter events.\\r\\n     */\\r\\n    event setPriceEvent(uint256 indexed price);\\r\\n    event setMaxSupplyEvent(uint256 indexed maxSupply);\\r\\n\\r\\n    /**\\r\\n     * @dev Sale events.\\r\\n     */\\r\\n    event Purchase(address indexed buyer, uint256 indexed amount);\\r\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\r\\n    event WithdrawAllEvent(address indexed to, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _ape,\\r\\n        address _banana,\\r\\n        address _rng\\r\\n    ) Ownable() {\\r\\n        require(lvl1Supply + lvl2Supply + lvl3Supply == maxSupply, \\\"Supply not correct\\\");\\r\\n\\r\\n        primeApeNFT = IERC721(_ape);\\r\\n        bananas = IPoisonedBananas(_banana);\\r\\n        claimRng = IPoisonedBananaClaimRNG(_rng);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev HELPERS\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev returns the bananas supply that is left.\\r\\n     */\\r\\n    function supplyLeft() public view returns (uint256) {\\r\\n        return maxSupply - minted;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev given an array of apeIds see which ones can still\\r\\n     * claim their banana.\\r\\n     *\\r\\n     * @param apeIds. The ape ids.\\r\\n     */\\r\\n    function getNotClaimedApes(uint256[] calldata apeIds) external view returns(uint256[] memory) {\\r\\n        require(apeIds.length > 0, \\\"No IDS supplied\\\");\\r\\n\\r\\n        uint256 length = apeIds.length;\\r\\n        uint256[] memory notClaimedApes = new uint256[](length);\\r\\n        uint256 counter;\\r\\n\\r\\n        /// @dev Check if sender is owner of all apes and that they haven't claimed yet\\r\\n        /// @dev Update claim status of each ape\\r\\n        for (uint256 i = 0; i < apeIds.length; i++) {\\r\\n            uint256 apeId = apeIds[i];         \\r\\n            if (!apeToClaimed[apeId]) {\\r\\n                notClaimedApes[counter] = apeId;\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return notClaimedApes;\\r\\n    }\\r\\n\\r\\n    function getBananaLevelForClaim(address claimer, uint256 claimingApeId) internal view returns (uint256) {\\r\\n        uint256 rng = claimRng.getRandomNumber(claimer, claimingApeId);\\r\\n\\r\\n        bool isLvl3 = rng % lvl3Odds == 0;\\r\\n        bool isLvl2 = rng % lvl2Odds == 0;\\r\\n        bool isLvl1 = !isLvl3 && !isLvl2;\\r\\n\\r\\n        bool isLvl3Full = levelToClaimed[2] >= lvl3Supply;\\r\\n        bool isLvl2Full = levelToClaimed[1] >= lvl2Supply;\\r\\n        bool isLvl1Full = levelToClaimed[0] >= lvl1Supply;\\r\\n\\r\\n        if (isLvl3) {\\r\\n            if (!isLvl3Full)\\r\\n                return 2;\\r\\n            else if (!isLvl2Full)\\r\\n                return 1;\\r\\n            else if (!isLvl1Full)\\r\\n                return 0;\\r\\n        }\\r\\n\\r\\n        if (isLvl2) {\\r\\n            if (!isLvl2Full)\\r\\n                return 1;\\r\\n            else if (!isLvl1Full)\\r\\n                return 0;\\r\\n            else if (!isLvl2Full)\\r\\n                return 2;\\r\\n        }\\r\\n\\r\\n        if (isLvl1) {\\r\\n            if (!isLvl1Full)\\r\\n                return 0;\\r\\n            else if (!isLvl2Full)\\r\\n                return 1;\\r\\n            else if (!isLvl3Full)\\r\\n                return 2;\\r\\n        }\\r\\n\\r\\n        //should not get to this\\r\\n        revert(\\\"Logic error\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev CLAIMING\\r\\n     */\\r\\n    \\r\\n    /**\\r\\n     * @dev Claims bananas to sender for each valid ape Id.\\r\\n     *\\r\\n     * @param apeIds. The ape Ids.\\r\\n     */\\r\\n    function claimBananas(uint256[] calldata apeIds) external {\\r\\n        require(address(bananas) != address(0), \\\"Banana contract not set\\\");\\r\\n        require(address(primeApeNFT) != address(0), \\\"Ape contract not set\\\");\\r\\n        require(apeIds.length > 0, \\\"No Ids supplied\\\");\\r\\n        require(!isSale && !isHolderSale, \\\"Claiming stopped\\\");\\r\\n\\r\\n        uint256[] memory bananaTypes = new uint256[](apeIds.length);\\r\\n        uint256[] memory amounts = new uint256[](apeIds.length);\\r\\n\\r\\n        /// @dev Check if sender is owner of all apes and that they haven't claimed yet\\r\\n        /// @dev Update claim status of each ape\\r\\n        for (uint256 i = 0; i < apeIds.length; i++) {\\r\\n            uint256 apeId = apeIds[i];\\r\\n            require(primeApeNFT.ownerOf(apeId) == msg.sender, \\\"Sender does not own ape\\\");\\r\\n            require(!apeToClaimed[apeId], \\\"Ape already claimed banana\\\");\\r\\n            apeToClaimed[apeId] = true;\\r\\n\\r\\n            uint256 bananaType = getBananaLevelForClaim(msg.sender, apeId);\\r\\n            levelToClaimed[bananaType]++;\\r\\n\\r\\n            bananaTypes[i] = bananaType;\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        minted += apeIds.length;\\r\\n        bananas.mintMultiple(bananaTypes, amounts, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Claims banana to sender for ape Id.\\r\\n     *\\r\\n     * @param apeId. The ape Id.\\r\\n     */\\r\\n    function claimBanana(uint256 apeId) external {\\r\\n        require(address(bananas) != address(0), \\\"Banana contract not set\\\");\\r\\n        require(address(primeApeNFT) != address(0), \\\"Ape contract not set\\\");\\r\\n        require(!isSale && !isHolderSale, \\\"Claiming stopped\\\");\\r\\n\\r\\n        require(primeApeNFT.ownerOf(apeId) == msg.sender, \\\"Sender does not own ape\\\");\\r\\n        require(!apeToClaimed[apeId], \\\"Ape already claimed banana\\\");\\r\\n        apeToClaimed[apeId] = true;\\r\\n\\r\\n        uint256 bananaType = getBananaLevelForClaim(msg.sender, apeId);\\r\\n        levelToClaimed[bananaType]++;\\r\\n\\r\\n        minted++;\\r\\n        bananas.mintSingle(bananaType, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev SALE\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @dev Allows unclaimed bananas to be sold to holders\\r\\n     */\\r\\n    function buyBananasHolders() \\r\\n        external \\r\\n        payable {\\r\\n        uint256 amount = 1;\\r\\n\\r\\n        require(primeApeNFT.balanceOf(msg.sender) > 0, \\\"Have to be a prime ape holder\\\");\\r\\n        require(addressToHolderMint[msg.sender] == 0, \\\"Can only buy one additional banana\\\");\\r\\n        require(minted + amount <= maxSupply, \\\"Mint amount goes over max supply\\\");\\r\\n        require(msg.value >= holderPrice, \\\"Ether sent not correct\\\");\\r\\n        require(isHolderSale, \\\"Sale not started\\\"); \\r\\n\\r\\n        addressToHolderMint[msg.sender] = 1;\\r\\n\\r\\n        uint256 bananaType = getBananaLevelForClaim(msg.sender, minted);\\r\\n        levelToClaimed[bananaType]++;\\r\\n\\r\\n        minted++;\\r\\n        bananas.mintSingle(bananaType, msg.sender);       \\r\\n\\r\\n        emit Purchase(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows unclaimed bananas to be sold to the public\\r\\n     *\\r\\n     * @param amount. The amount of bananas to be sold\\r\\n     */\\r\\n    function buyBananas(uint256 amount) \\r\\n        external \\r\\n        payable {\\r\\n        \\r\\n        require(amount > 0, \\\"Have to buy more than 0\\\");\\r\\n\\r\\n        require(addressToMints[msg.sender] + amount <= mintMaxAmount, \\\"Mint amount exceeds max for user\\\");\\r\\n        require(minted + amount <= maxSupply, \\\"Mint amount goes over max supply\\\");\\r\\n        require(msg.value >= price * amount, \\\"Ether sent not correct\\\");\\r\\n        require(isSale, \\\"Sale not started\\\"); \\r\\n        /// @dev Updates contract variables and mints `amount` NFTs to users wallet\\r\\n\\r\\n        addressToMints[msg.sender] += amount;\\r\\n\\r\\n        uint256[] memory bananaTypes = new uint256[](amount);\\r\\n        uint256[] memory amounts = new uint256[](amount);\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            uint256 bananaType = getBananaLevelForClaim(msg.sender, minted + i);\\r\\n            levelToClaimed[bananaType]++;\\r\\n\\r\\n            bananaTypes[i] = bananaType;\\r\\n            amounts[i] = 1;\\r\\n        }\\r\\n\\r\\n        minted += amount;\\r\\n        bananas.mintMultiple(bananaTypes, amounts, msg.sender);    \\r\\n\\r\\n        emit Purchase(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev OWNER ONLY \\r\\n     */\\r\\n\\r\\n    function setIsSale(bool _isSale) external onlyOwner {\\r\\n        isSale = _isSale;\\r\\n    }\\r\\n\\r\\n    function setIsHolderSale(bool _isSale) external onlyOwner {\\r\\n        isHolderSale = _isSale;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 newPrice) external onlyOwner {\\r\\n        price = newPrice;\\r\\n        emit setPriceEvent(newPrice);\\r\\n    }\\r\\n\\r\\n    function setHolderPrice(uint256 newPrice) external onlyOwner {\\r\\n        holderPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function setMaxSupply(uint256 newMaxSupply) external onlyOwner {\\r\\n        maxSupply = newMaxSupply;\\r\\n        emit setMaxSupplyEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    function setMaxMintAmount(uint256 newMaxMintAmount) external onlyOwner {\\r\\n        mintMaxAmount = newMaxMintAmount;\\r\\n    }\\r\\n\\r\\n    function setLvl1Supply(uint256 newSupply) external onlyOwner {\\r\\n        lvl1Supply = newSupply;\\r\\n    }\\r\\n\\r\\n    function setLvl2Supply(uint256 newSupply) external onlyOwner {\\r\\n        lvl2Supply = newSupply;\\r\\n    }\\r\\n\\r\\n    function setLvl3Supply(uint256 newSupply) external onlyOwner {\\r\\n        lvl3Supply = newSupply;\\r\\n    }\\r\\n\\r\\n    function setLvl2Odds(uint256 newOdds) external onlyOwner {\\r\\n        lvl2Odds = newOdds;\\r\\n    }\\r\\n\\r\\n    function setLvl3Odds(uint256 newOdds) external onlyOwner {\\r\\n        lvl3Odds = newOdds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev FINANCE\\r\\n     */\\r\\n\\r\\n    function withdrawAll(address _to) external onlyOwner {\\r\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\r\\n        payable(_to).transfer(contractBalance);\\r\\n        emit WithdrawAllEvent(_to, contractBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for receiving Ether\\r\\n     */\\r\\n    receive() external payable {\\r\\n        emit ReceivedEther(msg.sender, msg.value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ape\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_banana\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rng\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToHolderMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"apeToClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bananas\",\"outputs\":[{\"internalType\":\"contract IPoisonedBananas\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyBananas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBananasHolders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apeId\",\"type\":\"uint256\"}],\"name\":\"claimBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"apeIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBananas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"apeIds\",\"type\":\"uint256[]\"}],\"name\":\"getNotClaimedApes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHolderSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelToClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lvl1Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lvl2Odds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lvl2Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lvl3Odds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lvl3Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primeApeNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setHolderPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSale\",\"type\":\"bool\"}],\"name\":\"setIsHolderSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSale\",\"type\":\"bool\"}],\"name\":\"setIsSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setLvl1Supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOdds\",\"type\":\"uint256\"}],\"name\":\"setLvl2Odds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setLvl2Supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOdds\",\"type\":\"uint256\"}],\"name\":\"setLvl3Odds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setLvl3Supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PoisonedBananasClaim", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000006632a9d63e142f17a668064d41a21193b49b41a0000000000000000000000000b0c81c53b267a4cd6cbaf48d746d00e369d060a5000000000000000000000000fcec14b2e6a0e1faef6e4779daf2943f0cac471d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}