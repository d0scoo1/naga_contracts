{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking-rewards/StakingRewardsClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.13;\\n\\nimport { MerkleProof } from \\\"@openzeppelin/contracts-4.6.0/utils/cryptography/MerkleProof.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-4.6.0/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenGovernance {\\n    function token() external view returns (IERC20);\\n\\n    function mint(address to, uint256 amount) external;\\n}\\n\\ninterface IBancorNetworkV3 {\\n    function depositFor(\\n        address provider,\\n        address pool,\\n        uint256 tokenAmount\\n    ) external payable returns (uint256);\\n}\\n\\n/**\\n * @dev this contract allows claiming/staking V2.1 pending rewards\\n */\\ncontract StakingRewardsClaim {\\n    error AccessDenied();\\n    error AlreadyClaimed();\\n    error InvalidAddress();\\n    error InvalidClaim();\\n    error ZeroValue();\\n\\n    // the V3 network contract\\n    IBancorNetworkV3 private immutable _networkV3;\\n\\n    // the address of the BNT token governance\\n    ITokenGovernance private immutable _bntGovernance;\\n\\n    // the address of the BNT token\\n    IERC20 private immutable _bnt;\\n\\n    // the merkle root of the pending rewards merkle tree\\n    bytes32 private immutable _merkleRoot;\\n\\n    // the total claimed amount\\n    uint256 private _totalClaimed;\\n\\n    // a mapping of providers which have already claimed their rewards\\n    mapping(address => bool) private _claimed;\\n\\n    /**\\n     * @dev triggered when rewards are claimed\\n     */\\n    event RewardsClaimed(address indexed provider, uint256 amount);\\n\\n    /**\\n     * @dev triggered when rewards are staked\\n     */\\n    event RewardsStaked(address indexed provider, uint256 amount);\\n\\n    modifier validAddress(address addr) {\\n        _validAddress(addr);\\n\\n        _;\\n    }\\n\\n    modifier greaterThanZero(uint256 value) {\\n        _greaterThanZero(value);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev initializes the merkle-tree rewards airdrop contract\\n     */\\n    constructor(\\n        IBancorNetworkV3 initNetworkV3,\\n        ITokenGovernance initBNTGovernance,\\n        bytes32 initMerkleRoot\\n    ) validAddress(address(initNetworkV3)) validAddress(address(initBNTGovernance)) {\\n        _networkV3 = initNetworkV3;\\n        _bntGovernance = initBNTGovernance;\\n        _bnt = initBNTGovernance.token();\\n\\n        _merkleRoot = initMerkleRoot;\\n    }\\n\\n    /**\\n     * @dev returns the merkle root of the pending rewards merkle tree\\n     */\\n    function merkleRoot() external view returns (bytes32) {\\n        return _merkleRoot;\\n    }\\n\\n    /**\\n     * @dev returns the total claimed amount\\n     */\\n    function totalClaimed() external view returns (uint256) {\\n        return _totalClaimed;\\n    }\\n\\n    /**\\n     * @dev returns whether providers have already claimed their rewards\\n     */\\n    function hasClaimed(address account) external view returns (bool) {\\n        return _claimed[account];\\n    }\\n\\n    /**\\n     * @dev claims rewards by providing a merkle proof (a { provider, amount } leaf and a merkle path)\\n     *\\n     * requirements:\\n     *\\n     * - the claim can be only made by the beneficiary of the reward\\n     */\\n    function claimRewards(\\n        address provider,\\n        uint256 fullAmount,\\n        bytes32[] calldata proof\\n    ) external greaterThanZero(fullAmount) {\\n        _claimRewards(msg.sender, provider, fullAmount, proof, false);\\n    }\\n\\n    /**\\n     * @dev claims rewards by providing a merkle proof (a { provider, amount } leaf and a merkle path) and stakes them\\n     * in V3\\n     *\\n     * requirements:\\n     *\\n     * - the claim can be only made by the beneficiary of the reward\\n     */\\n    function stakeRewards(\\n        address provider,\\n        uint256 fullAmount,\\n        bytes32[] calldata proof\\n    ) external greaterThanZero(fullAmount) {\\n        _claimRewards(msg.sender, provider, fullAmount, proof, true);\\n    }\\n\\n    /**\\n     * @dev claims or stakes rewards\\n     */\\n    function _claimRewards(\\n        address caller,\\n        address provider,\\n        uint256 fullAmount,\\n        bytes32[] calldata proof,\\n        bool stake\\n    ) private {\\n        // allow users to opt-it for receiving their rewards\\n        if (caller != provider) {\\n            revert AccessDenied();\\n        }\\n\\n        // ensure that the user can't claim or stake rewards twice\\n        if (_claimed[provider]) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        // ensure that the claim is valid\\n        bytes32 leaf = keccak256(abi.encodePacked(provider, fullAmount));\\n        if (!MerkleProof.verify(proof, _merkleRoot, leaf)) {\\n            revert InvalidClaim();\\n        }\\n\\n        _claimed[provider] = true;\\n        _totalClaimed += fullAmount;\\n\\n        if (stake) {\\n            // mint the full rewards to the contract itself and deposit them on behalf of the provider\\n            _bntGovernance.mint(address(this), fullAmount);\\n\\n            _bnt.approve(address(_networkV3), fullAmount);\\n            _networkV3.depositFor(provider, address(_bnt), fullAmount);\\n\\n            emit RewardsStaked(provider, fullAmount);\\n        } else {\\n            // mint the rewards directly to the provider\\n            _bntGovernance.mint(provider, fullAmount);\\n\\n            emit RewardsClaimed(provider, fullAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev verifies that a given address is valid\\n     */\\n    function _validAddress(address addr) internal pure {\\n        if (addr == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    /**\\n     * @dev verifies that a given amount is greater than zero\\n     */\\n    function _greaterThanZero(uint256 value) internal pure {\\n        if (value == 0) {\\n            revert ZeroValue();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-4.6.0/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-4.6.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBancorNetworkV3\",\"name\":\"initNetworkV3\",\"type\":\"address\"},{\"internalType\":\"contract ITokenGovernance\",\"name\":\"initBNTGovernance\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"initMerkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"stakeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingRewardsClaim", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eef417e1d5cc832e619ae18d2f140de2999dd4fb000000000000000000000000a489c2b5b36835a327851ab917a80562b5afc2447a42a00c814c29ca24f246a263c89253216fc441f9bdad5b57442c77ed77be24", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}