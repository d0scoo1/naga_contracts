{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 30000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721MinterSimple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract IERC721 {\\n    function mint(address to) external virtual;\\n\\n    function ownerOf(uint tokenId) external view virtual returns (address);\\n}\\n\\ncontract ERC721MinterSimple is Ownable {\\n    IERC721 public erc721;\\n    IERC721 public krewPass;\\n\\n    //used to verify whitelist user\\n    uint public mintQuantity;\\n    bool public publicMintStart;\\n    uint public price;\\n    address public devPayoutAddress;\\n    mapping(address => uint) public claimed;\\n    mapping(uint => bool) krewPassClaimed;\\n    mapping(address => bool) public whitelisted;\\n\\n    constructor(IERC721 erc721_, IERC721 krewPass_, uint price_, uint mintQuantity_) {\\n        erc721 = erc721_;\\n        krewPass = krewPass_;\\n        mintQuantity = mintQuantity_;\\n        price = price_;\\n        devPayoutAddress = address(0xc891a8B00b0Ea012eD2B56767896CCf83C4A61DD);\\n        publicMintStart = false;\\n    }\\n\\n    function setNFT(IERC721 erc721_) public onlyOwner {\\n        erc721 = erc721_;\\n    }\\n\\n    function setQuantity(uint newQ_) public onlyOwner {\\n        mintQuantity = newQ_;\\n    }\\n\\n    function setPrice(uint newPrice_) public onlyOwner {\\n        price = newPrice_;\\n    }\\n\\n    function setPublicMintStart(bool start_) public onlyOwner {\\n        publicMintStart = start_;\\n    }\\n\\n    function mint(uint quantity_) public payable {\\n        //require payment\\n        require(msg.value >= price * quantity_, \\\"Insufficient funds provided.\\\");\\n\\n        //check mint quantity\\n        require(claimed[msg.sender] + quantity_ <= mintQuantity, \\\"Already claimed.\\\");\\n\\n        //requires that user is in whitelsit\\n        require(whitelisted[msg.sender], \\\"Address not whitelisted.\\\");\\n\\n        //increase quantity that user has claimed\\n        claimed[msg.sender] = claimed[msg.sender] + quantity_;\\n\\n        //mint quantity times\\n        for (uint i = 0; i < quantity_; i++) {\\n            erc721.mint(msg.sender);\\n        }\\n    }\\n\\n    function mintKrewPass(uint tokenId) public payable {\\n        require(msg.value >= price, \\\"Insufficient funds provided.\\\");\\n\\n        //requires that user is in whitelsit\\n        require(krewPass.ownerOf(tokenId) == msg.sender, \\\"Address not whitelisted.\\\");\\n\\n        require(!krewPassClaimed[tokenId], \\\"Already claimed.\\\");\\n        //increase quantity that user has claimed\\n        krewPassClaimed[tokenId] = true;\\n\\n        erc721.mint(msg.sender);\\n    }\\n\\n    function mintPublic(uint quantity_) public payable {\\n        require(publicMintStart, \\\"Public mint has not started.\\\");\\n\\n        require(msg.value >= price * quantity_, \\\"Insufficient funds provided.\\\");\\n        //check mint quantity\\n        require(claimed[msg.sender] + quantity_ <= mintQuantity, \\\"Already claimed.\\\");\\n\\n        //increase quantity that user has claimed\\n        claimed[msg.sender] = claimed[msg.sender] + quantity_;\\n\\n        //mint quantity times\\n        for (uint i = 0; i < quantity_; i++) {\\n            erc721.mint(msg.sender);\\n        }\\n    }\\n\\n    function addToWhitelist(address[] memory _whitelist) public onlyOwner {\\n        for (uint i = 0; i < _whitelist.length; i++) {\\n            whitelisted[_whitelist[i]] = true;\\n        }\\n    }\\n\\n    function withdraw(address to) public onlyOwner {\\n        uint devAmount = (address(this).balance * 25) / 1000;\\n        bool success;\\n        (success, ) = devPayoutAddress.call{value: devAmount}(\\\"\\\");\\n        require(success, \\\"dev withdraw failed\\\");\\n        (success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"withdraw failed\\\");\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721_\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"krewPass_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintQuantity_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"krewPass\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintKrewPass\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity_\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721_\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"start_\",\"type\":\"bool\"}],\"name\":\"setPublicMintStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQ_\",\"type\":\"uint256\"}],\"name\":\"setQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721MinterSimple", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "30000", "ConstructorArguments": "0000000000000000000000003621f6cbe207407799baaeb901b6b924a1aa0455000000000000000000000000444444444f301aceeadabc86a844ef47c9b3caed0000000000000000000000000000000000000000000000000138a388a43c00000000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}