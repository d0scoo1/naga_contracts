{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.1;\r\n\r\ncontract BeefyPriceMulticall {\r\n\r\n    function getUint(address addr, bytes memory data) internal view returns (uint result) {\r\n        result = 0;\r\n\r\n        assembly {\r\n            let status := staticcall(16000, addr, add(data, 32), mload(data), 0, 0)\r\n\r\n            if eq(status, 1) {\r\n                if eq(returndatasize(), 32) {\r\n                    returndatacopy(0, 0, 32)\r\n                    result := mload(0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLpInfo(address[][] calldata pools) external view returns (uint[] memory) {\r\n        uint[] memory results = new uint[](pools.length * 3);\r\n        uint idx = 0;\r\n\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            address lp = pools[i][0];\r\n            address t0 = pools[i][1];\r\n            address t1 = pools[i][2];\r\n\r\n            results[idx++] = getUint(lp, abi.encodeWithSignature(\"totalSupply()\"));\r\n            results[idx++] = getUint(t0, abi.encodeWithSignature(\"balanceOf(address)\", lp));\r\n            results[idx++] = getUint(t1, abi.encodeWithSignature(\"balanceOf(address)\", lp));\r\n        }\r\n\r\n        return results;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"pools\",\"type\":\"address[][]\"}],\"name\":\"getLpInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BeefyPriceMulticall", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0cde713f0dc77d75752737f99ac5ec3c7aee9154dc28e17e4292348601fc0dae"}]}