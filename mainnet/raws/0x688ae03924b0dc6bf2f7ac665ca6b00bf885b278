{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n*Submitted for verification at Etherscan.io on 2021-06-12\r\n*/\r\n\r\n/*\r\n\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2580\u2584\u2580\u2003\u2588\u2003\u2588\u2580\u2580\r\n\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2591\u2588\u2003\u2588\u2003\u2588\u2588\u2584\r\n*/// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes memory) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IERC20 {\r\n\r\nfunction totalSupply() external view returns (uint256);\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\nreturn c;\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary Address {\r\n\r\nfunction isContract(address account) internal view returns (bool) {\r\n\r\nbytes32 codehash;\r\nbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n// solhint-disable-next-line no-inline-assembly\r\nassembly { codehash := extcodehash(account) }\r\nreturn (codehash != accountHash && codehash != 0x0);\r\n}\r\n\r\nfunction sendValue(address payable recipient, uint256 amount) internal {\r\nrequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n(bool success, ) = recipient.call{ value: amount }(\"\");\r\nrequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n}\r\n\r\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\nreturn functionCall(target, data, \"Address: low-level call failed\");\r\n}\r\n\r\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\nreturn _functionCallWithValue(target, data, 0, errorMessage);\r\n}\r\n\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n}\r\n\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\nreturn _functionCallWithValue(target, data, value, errorMessage);\r\n}\r\n\r\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\nrequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n// solhint-disable-next-line avoid-low-level-calls\r\n(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\nif (success) {\r\nreturn returndata;\r\n} else {\r\n// Look for revert reason and bubble it up if present\r\nif (returndata.length > 0) {\r\n// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n// solhint-disable-next-line no-inline-assembly\r\nassembly {\r\nlet returndata_size := mload(returndata)\r\nrevert(add(32, returndata), returndata_size)\r\n}\r\n} else {\r\nrevert(errorMessage);\r\n}\r\n}\r\n}\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract MOXIE is Context, IERC20, Ownable {\r\nusing SafeMath for uint256;\r\nusing Address for address;\r\n\r\nmapping (address => uint256) private _rOwned;\r\nmapping (address => uint256) private _tOwned;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nmapping (address => bool) private _isExcluded;\r\naddress[] private _excluded;\r\n\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private constant _tTotal = 1000000000000000;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\n\r\nstring private _name = 'Moxie Me';\r\nstring private _symbol = 'MOXIE';\r\nuint8 private _decimals = 0;\r\n\r\nconstructor () {\r\n_rOwned[_msgSender()] = _rTotal;\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\nfunction name() public view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() public view returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() public view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() public pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nif (_isExcluded[account]) return _tOwned[account];\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\nreturn true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\nreturn true;\r\n}\r\n\r\nfunction isExcluded(address account) public view returns (bool) {\r\nreturn _isExcluded[account];\r\n}\r\n\r\nfunction totalFees() public view returns (uint256) {\r\nreturn _tFeeTotal;\r\n}\r\n\r\nfunction reflect(uint256 tAmount) public {\r\naddress sender = _msgSender();\r\nrequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n(uint256 rAmount,,,,) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rTotal = _rTotal.sub(rAmount);\r\n_tFeeTotal = _tFeeTotal.add(tAmount);\r\n}\r\n\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\nrequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\nif (!deductTransferFee) {\r\n(uint256 rAmount,,,,) = _getValues(tAmount);\r\nreturn rAmount;\r\n} else {\r\n(,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\nreturn rTransferAmount;\r\n}\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\nrequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\nuint256 currentRate = _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction excludeAccount(address account) external onlyOwner() {\r\nrequire(!_isExcluded[account], \"Account is already excluded\");\r\nif(_rOwned[account] > 0) {\r\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n}\r\n_isExcluded[account] = true;\r\n_excluded.push(account);\r\n}\r\n\r\nfunction includeAccount(address account) external onlyOwner() {\r\nrequire(_isExcluded[account], \"Account is already excluded\");\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_excluded[i] == account) {\r\n_excluded[i] = _excluded[_excluded.length - 1];\r\n_tOwned[account] = 0;\r\n_isExcluded[account] = false;\r\n_excluded.pop();\r\nbreak;\r\n}\r\n}\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) private {\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\nif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferFromExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferToExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferStandard(sender, recipient, amount);\r\n} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferBothExcluded(sender, recipient, amount);\r\n} else {\r\n_transferStandard(sender, recipient, amount);\r\n}\r\n}\r\n\r\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n(uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\nuint256 currentRate = _getRate();\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {\r\nuint256 tFee = tAmount.div(100);\r\nuint256 tTransferAmount = tAmount.sub(tFee);\r\nreturn (tTransferAmount, tFee);\r\n}\r\n\r\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns(uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal; \r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\nrSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\ntSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n}\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MOXIE", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ce825c822c2c9b455edbd811f83ed77600f3573dc2c8ceae3d827a7b5617c0c"}]}