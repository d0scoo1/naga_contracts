{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoCitizenLiveMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n */\\npragma solidity 0.8.13;\\nimport {IERC721} from '@openzeppelin/contracts/interfaces/IERC721.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {Pausable} from '@openzeppelin/contracts/security/Pausable.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {IArtBlocks} from './IArtBlocks.sol';\\nimport {IRandomEdition} from './IRandomEdition.sol';\\n\\ncontract CryptoCitizenLiveMint is Ownable, Pausable, ReentrancyGuard\\n{   \\n    /*-------------------*/\\n    /*  STATE VARIABLES  */\\n    /*-------------------*/\\n\\n    bytes32 private immutable _MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");                                  // Minter Role\\n    bytes32 private immutable _DEACTIVATED_ROLE = keccak256(\\\"DELISTED_ROLE\\\");                           // Deactivated Role\\n    address public _BRTMULTISIG = 0x90DBc54DBfe6363aCdBa4E54eE97A2e0073EA7ad;                           // BRT Multisig Address\\n    address public _ERC20_BRT_Token = 0x85674c97eC09A9018e96EBf67536B62A446fD290;                       // BRT ERC-20 Contract Address   \\n    address public _ArtBlocksMintingContractCitizens = 0xDd06d8483868Cd0C5E69C24eEaA2A5F2bEaFd42b;      // ArtBlocks Minting Contract Address CryptoCitizens\\n    address public _ArtBlocksMintingContractArtists = 0x7b9a45E278b5B374bb2d96C65665d4360C97BF01;       // ArtBlocks Minting Contract Address Bright Moments\\n    address public _ArtBlocksCoreContractCitizens = 0xbDdE08BD57e5C9fD563eE7aC61618CB2ECdc0ce0;         // ArtBlocks Citizen NFT Collection Contract Address\\n    address public _ArtBlocksCoreContractArtists = 0x0A1BBD57033F57E7B6743621b79fCB9Eb2CE3676;          // ArtBlocks Artist NFT Collection Contract Address \\n    address public _GoldenToken = 0xd64a6F3c0bC12A619fF7eEf511b0258DA913C5c3;                           // Golden Token Contract Address\\n    uint public _ArtBlocksProjectID = 3;                                                                // ArtBlocks Project ID\\n    uint public _CurrentCityIndex;                                                                      // Current City Index\\n\\n    /*-------------------*/\\n    /*     MAPPINGS      */\\n    /*-------------------*/\\n\\n    mapping(uint => mapping(uint => mapping(uint => address))) public BrightListArtist;             // Returns Address Of Minting Receiver For Artist Mint \\n    mapping(uint => mapping(uint => mapping(uint => uint))) public SelectedTimeSlotArtistMintPass;  // Returns Selected TimeSlot Corresponding To Artist Mint Pass\\n    mapping(uint => mapping(uint => mapping(uint => bool))) public DelegateStatusArtist;            // Returns Delegate Status Of Artist TicketID\\n    mapping(uint => mapping(uint => mapping(uint => bool))) public MintedArtist;                    // Returns Boolean If Artist MintPass ID Has Minted Or Not\\n    mapping(uint => mapping(uint => address)) public BrightListCitizen;                             // Returns Address Of Minting Receiver For CryptoCitizen Mint\\n    mapping(uint => mapping(uint => address)) public ArtistMintPasses;                              // Returns Contract Address Of Artist Mint Pass NFT \\n    mapping(uint => mapping(uint => address)) public ArtistContracts;                               // Returns Contract Address Of Artist Collection NFT\\n    mapping(uint => mapping(uint => bool)) public MintType;                                         // Artist Mint Type (true for ArtBlocks | false for Random Edition)\\n    mapping(uint => mapping(uint => uint)) public BookingsAvailable;                                // Returns Amount Of Bookings Available For Input TimeSlot\\n    mapping(uint => mapping(uint => uint)) public SelectedTimeSlotGoldenTicket;                     // Returns Selected TimeSlot Corresponding To Golden Ticket\\n    mapping(uint => mapping(uint => bool)) public MintedCitizen;                                    // Returns Boolean If Golden Ticket ID Has Minted Or Not\\n    mapping(uint => mapping(uint => bool)) public DelegateStatusCitizen;                            // Returns Delegate Status Of Citizen TicketID\\n    mapping(address => bytes32) private Role;                                                       // BRT Minter Role Mapping\\n\\n    /*-------------------*/\\n    /*      EVENTS       */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-mints CryptoCitizen Corresponding To Their Redeemed `TicketID`.\\n     **/\\n    event LiveMintComplete(address indexed Redeemer, uint TicketID, uint TokenID, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` IRL-Mints Artist Corresponding To `ArtistID`\\n     */\\n    event LiveMintCompleteArtist(address indexed Redeemer, uint ArtistID, uint TicketID, uint TokenID, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Golden Token Corresponding To `TicketID` \\n     **/\\n    event GoldenTokenRedeemed(address indexed Redeemer, uint TicketID, uint Slot, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `Redeemer` Redeems Artist Mint Pass Corresponding To `TicketID`\\n     */\\n    event ArtistMintPassRedeemed(address indexed Redeemer, uint ArtistID, uint TicketID, uint Slot, bool Delegate);\\n\\n    /**\\n     * @dev Emitted When `NewMinter` Is Added To BRT Minter List\\n     */\\n    event MinterAdded(address NewMinter);\\n\\n    /**\\n     * @dev Emitted When `RemovedMinter` Is Removed From BRT Minter List\\n     */\\n    event MinterRemoved(address RemovedMinter);\\n\\n    /**\\n     * @dev Emitted When `NewProjectID` Replaces `OldProjectID`\\n     */\\n    event ModifiedProjectID(uint OldProjectID, uint NewProjectID);\\n\\n    /**\\n     * @dev Emitted When `NewMintingAddress` Replaces `OldMintingAddress`\\n     */\\n    event ArtBlocksMintingAddressChanged(address OldMintingAddress, address NewMintingAddress);\\n\\n    /**\\n     * @dev Emitted When `NewCoreAddress` Replaces `OldCoreAddress` For ArtBlocks Citizen Mints\\n     */\\n    event ArtBlocksCoreAddressChanged(address OldCoreAddress, address NewCoreAddress);\\n\\n    /**\\n     * @dev Emitted When `NewCoreAddress` Replaces `OldCoreAddress` For ArtBlocks Artist Mints\\n     */\\n    event ArtBlocksCoreAddressChangedArtist(address OldCoreAddress, address NewCoreAddress);\\n\\n    /**\\n     * @dev Emitted When `NewGTAddress` Replaces `OldGTAddress`\\n     */\\n    event GoldenTokenAddressChanged(address OldGTAddress, address NewGTAddress);\\n\\n    /**\\n     * @dev Emitted When `NewERC20Address` Replaces `OldERC20Address`\\n     */\\n    event ERC20AddressChanged(address OldERC20Address, address NewERC20Address);\\n\\n    /**\\n     * @dev Emitted When `NewIndex` Replaces `OldIndex`\\n     */\\n    event CurrentCityIndexChanged(uint OldIndex, uint NewIndex);\\n\\n    /**\\n     * @dev Emitted When Singular Timeslot Changes From `OldAmount` to `NewAmount`\\n     */\\n    event TimeSlotChanged(uint OldAmount, uint NewAmount);\\n\\n    /**\\n     * @dev Emitted When Multiple Timeslot Changes Occur\\n     */\\n    event TimeSlotsChanged(uint[] Slots, uint[] Amounts);\\n\\n    /**\\n     * @dev Emitted When Artist Contract Address Changes\\n     */\\n    event ArtistContractAddressChanged(address OldContractAddress, address NewContractAddress);\\n\\n    /**\\n     * @dev Emitted When Artist Mint Type Changes\\n     */\\n    event ArtistMintTypeChanged(bool OldMintType, bool NewMintType);\\n\\n    /**\\n     * @dev Emitted When Multisig Address Changes\\n     */\\n    event MultisigAddressChanged(address OldAddress, address NewAddress);\\n\\n    /**\\n     * @dev Emitted When New City State Variables Are Modified \\n     */\\n    event NewCityStarted(\\n        address ERC20_BRT_TokenAddress,\\n        address ArtBlocksMintingContractAddress,\\n        address ArtBlocksCoreContractAddressCitizen,\\n        address ArtBlocksCoreContractAddressArtist,\\n        address GoldenTokenAddress,\\n        uint ArtBlocksProjectID,\\n        uint CurrentCityIndex\\n    );\\n\\n    /**\\n     * @dev Emitted When New Artists Are Seeded Into The Contract\\n     */\\n    event NewArtists(uint[] ArtistIDs, address[] MintPasses, address[] MintingAddresses, bool[] MintTypes);\\n\\n    /*-------------------*/\\n    /*    CONSTRUCTOR    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Pre-Approves 1000 BRT For Purchasing, Grants BRT Minter Roles, & Transfers Ownership To BRT Multisig\\n     **/\\n    constructor() \\n    { \\n        Role[0x1A0a3E3AE390a0710f8A6d00587082273eA8F6C9] = _MINTER_ROLE; // BRT Minter #1\\n        Role[0x4d8013b0c264034CBf22De9DF33e22f58D52F207] = _MINTER_ROLE; // BRT Minter #2\\n        Role[0x4D9A8CF2fE52b8D49C7F7EAA87b2886c2bCB4160] = _MINTER_ROLE; // BRT Minter #3\\n        Role[0x124fd966A0D83aA020D3C54AE2c9f4800b46F460] = _MINTER_ROLE; // BRT Minter #4\\n        Role[0x100469feA90Ac1Fe1073E1B2b5c020A8413635c4] = _MINTER_ROLE; // BRT Minter #5\\n        Role[0x756De4236373fd17652b377315954ca327412bBA] = _MINTER_ROLE; // BRT Minter #6\\n        Role[0xc5Dfba6ef7803665C1BDE478B51Bd7eB257A2Cb9] = _MINTER_ROLE; // BRT Minter #7\\n        Role[0xFBF32b29Bcf8fEe32d43a4Bfd3e7249daec457C0] = _MINTER_ROLE; // BRT Minter #8\\n        Role[0xF2A15A83DEE7f03C70936449037d65a1C100FF27] = _MINTER_ROLE; // BRT Minter #9\\n        Role[0x1D2BAB965a4bB72f177Cd641C7BacF3d8257230D] = _MINTER_ROLE; // BRT Minter #10\\n        Role[0x2e51E8b950D72BDf003b58E357C2BA28FB77c7fB] = _MINTER_ROLE; // BRT Minter #11\\n        Role[0x8a7186dECb91Da854090be8226222eA42c5eeCb6] = _MINTER_ROLE; // BRT Minter #12\\n        BookingsAvailable[_CurrentCityIndex][20220604] = 200; // April 6th\\n        BookingsAvailable[_CurrentCityIndex][20220804] = 200; // April 8th\\n        BookingsAvailable[_CurrentCityIndex][20220904] = 200; // April 9th\\n        BookingsAvailable[_CurrentCityIndex][20221304] = 200; // April 13th\\n        BookingsAvailable[_CurrentCityIndex][20221504] = 200; // April 15th\\n        BookingsAvailable[_CurrentCityIndex][20221604] = 200; // April 16th\\n        BookingsAvailable[_CurrentCityIndex][20221704] = 200; // April 17th\\n        BookingsAvailable[_CurrentCityIndex][20222004] = 200; // April 20th\\n        BookingsAvailable[_CurrentCityIndex][20222204] = 200; // April 22nd\\n        BookingsAvailable[_CurrentCityIndex][20222304] = 200; // April 23rd\\n        IERC20(_ERC20_BRT_Token).approve( // Approves BRT For CryptoCitizen Mints\\n            _ArtBlocksMintingContractCitizens, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0xC7C984A44716B00FACCb55Fb1210417Ac95ED6b4).approve( // Approves BRT For PBAB Artist #1\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0x45cea915AD27c46E65709C63B1aE35091b9dF020).approve( // Approves BRT For PBAB Artist #2\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0x19007Ad537838B7aBc913BdCAB4E0139fC570fbB).approve( // Approves BRT For PBAB Artist #3\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0xeeB508b7bFF99d6fD03C8D28A305908d74220fd7).approve( // Approves BRT For PBAB Artist #4\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0x7670baB5fb8171AE138DB5C4E0F7309bF09a0B57).approve( // Approves BRT For PBAB Artist #5\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        IERC20(0x557586605a6Db4379b5384a0D61b2D749e0799be).approve( // Approves BRT For PBAB Artist #6\\n            _ArtBlocksMintingContractArtists, \\n            0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff //Approves Maximum BRT For ArtBlocks Purchasing\\n        );\\n        transferOwnership(_BRTMULTISIG); // Transfers Ownership To Multisig\\n    }\\n\\n    /*-------------------*/\\n    /*  PUBLIC FUNCTIONS */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Redeems Golden Token & BrightLists Address To Receive CryptoCitizen\\n     **/\\n    function RedeemGT(uint TicketID, uint TimeSlot, bool Delegate) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        require(IERC721(_GoldenToken).ownerOf(TicketID) == msg.sender, \\\"ERC721: Sender Does Not Own Token With The Input Token ID\\\");\\n        IERC721(_GoldenToken).transferFrom(msg.sender, _BRTMULTISIG, TicketID);\\n        require(IERC721(_GoldenToken).ownerOf(TicketID) == _BRTMULTISIG, \\\"ERC721: Golden Token Redemption Failed\\\");\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotGoldenTicket[_CurrentCityIndex][TicketID] = TimeSlot;\\n        BrightListCitizen[_CurrentCityIndex][TicketID] = msg.sender;\\n        DelegateStatusCitizen[_CurrentCityIndex][TicketID] = Delegate;\\n        emit GoldenTokenRedeemed(msg.sender, TicketID, TimeSlot, Delegate);\\n    }\\n\\n    /**\\n     * @dev Redeems Artist Mint Pass & BrightLists Address To Receive Artist Mint\\n     **/\\n    function RedeemArtistPass(uint ArtistID, uint TicketID, uint TimeSlot, bool Delegate) public nonReentrant whenNotPaused\\n    {\\n        require(BookingsAvailable[_CurrentCityIndex][TimeSlot] > 0, \\\"LiveMint: TimeSlot Fully Booked\\\");\\n        address ArtistMintPass = resolveArtistMintPass(ArtistID);\\n        require(IERC721(ArtistMintPass).ownerOf(TicketID) == msg.sender, \\\"ERC721: Sender Does Not Own Token With The Input Token ID\\\");\\n        IERC721(ArtistMintPass).transferFrom(msg.sender, _BRTMULTISIG, TicketID);\\n        require(IERC721(ArtistMintPass).ownerOf(TicketID) == _BRTMULTISIG, \\\"ERC721: Golden Token Redemption Failed\\\");\\n        BrightListArtist[_CurrentCityIndex][ArtistID][TicketID] = msg.sender;\\n        BookingsAvailable[_CurrentCityIndex][TimeSlot]--;\\n        SelectedTimeSlotArtistMintPass[_CurrentCityIndex][ArtistID][TicketID] = TimeSlot;\\n        DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID] = Delegate;\\n        emit ArtistMintPassRedeemed(msg.sender, ArtistID, TicketID, TimeSlot, Delegate);\\n    }\\n\\n    /*-------------------*/\\n    /*     BRT STAFF     */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev IRL Minting Function Available Only At Bright Moments NFT Art Gallery \\n     **/\\n    function _LiveMint(uint TicketID) public onlyMinter whenNotPaused \\n    {\\n        address Recipient = readBrightListCitizen(TicketID);\\n        require(Recipient != address(0), \\\"LiveMint: Golden Token Entered Is Not Brightlisted\\\");\\n        require(!MintedCitizen[_CurrentCityIndex][TicketID], \\\"LiveMint: Golden Token Already Minted\\\");\\n        BrightListCitizen[_CurrentCityIndex][TicketID] = address(0);\\n        MintedCitizen[_CurrentCityIndex][TicketID] = true;\\n        uint TokenID = IArtBlocks(_ArtBlocksMintingContractCitizens).purchase(_ArtBlocksProjectID);\\n        IERC721(_ArtBlocksCoreContractCitizens).transferFrom(address(this), Recipient, TokenID);\\n        emit LiveMintComplete(Recipient, TicketID, TokenID, DelegateStatusCitizen[_CurrentCityIndex][TicketID]);\\n    }\\n\\n    /**\\n     * @dev IRL Minting Function Available Only At Bright Moments NFT Art Gallery \\n     **/\\n    function _LiveMintArtist(uint ArtistID, uint TicketID) public onlyMinter whenNotPaused \\n    {\\n        address Recipient = readBrightListArtist(ArtistID, TicketID);\\n        require(Recipient != address(0), \\\"LiveMint: Mint Pass Entered Is Not Brightlisted\\\");\\n        require(!MintedArtist[_CurrentCityIndex][ArtistID][TicketID], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n        BrightListArtist[_CurrentCityIndex][ArtistID][TicketID] = address(0);\\n        MintedArtist[_CurrentCityIndex][ArtistID][TicketID] = true;\\n        address ArtistMintingContractAddress = resolveArtistContract(ArtistID);\\n        bool ArtBlocksMint = resolveArtistMint(ArtistID);\\n        if(ArtBlocksMint)\\n        {\\n            uint TokenID = IArtBlocks(ArtistMintingContractAddress).purchase(ArtistID);\\n            IERC721(_ArtBlocksCoreContractArtists).transferFrom(address(this), Recipient, TokenID);\\n            emit LiveMintCompleteArtist(Recipient, ArtistID, TicketID, TokenID, DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID]);\\n        }\\n        else \\n        { \\n            uint TokenID = IRandomEdition(ArtistMintingContractAddress)._Mint(Recipient, 1); \\n            emit LiveMintCompleteArtist(Recipient, ArtistID, TicketID, TokenID, DelegateStatusArtist[_CurrentCityIndex][ArtistID][TicketID]);\\n        }\\n    }\\n\\n    /*-------------------*/\\n    /*  ADMIN FUNCTIONS  */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Delegate Mints Citizens\\n     */\\n    function __DelegateMintCitizens(uint[] calldata TicketIDs) external onlyOwner\\n    {\\n        for(uint i; i < TicketIDs.length; i++)\\n        {\\n            address Recipient = readBrightListCitizen(TicketIDs[i]);\\n            require(Recipient != address(0), \\\"LiveMint: Golden Token Entered Is Not Brightlisted\\\");\\n            require(!MintedCitizen[_CurrentCityIndex][TicketIDs[i]], \\\"LiveMint: Golden Token Already Minted\\\");\\n            BrightListCitizen[_CurrentCityIndex][TicketIDs[i]] = address(0);\\n            MintedCitizen[_CurrentCityIndex][TicketIDs[i]] = true;\\n            uint TokenID = IArtBlocks(_ArtBlocksMintingContractCitizens).purchase(_ArtBlocksProjectID);\\n            IERC721(_ArtBlocksCoreContractCitizens).transferFrom(address(this), Recipient, TokenID);\\n            emit LiveMintComplete(Recipient, TicketIDs[i], TokenID, true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate Mints Artists\\n     */\\n    function __DelegateMintArtists(uint[] calldata ArtistIDs, uint[] calldata TicketIDs) external onlyOwner\\n    {\\n        require(ArtistIDs.length == TicketIDs.length, \\\"LiveMint: Arrays Must Be Of Equal Length\\\");\\n        for(uint i; i < TicketIDs.length; i++)\\n        {\\n            address Recipient = readBrightListArtist(ArtistIDs[i], TicketIDs[i]);\\n            require(Recipient != address(0), \\\"LiveMint: Mint Pass Entered Is Not Brightlisted\\\");\\n            require(!MintedArtist[_CurrentCityIndex][ArtistIDs[i]][TicketIDs[i]], \\\"LiveMint: Artist Mint Pass Already Minted\\\");\\n            BrightListArtist[_CurrentCityIndex][ArtistIDs[i]][TicketIDs[i]] = address(0);\\n            MintedArtist[_CurrentCityIndex][ArtistIDs[i]][TicketIDs[i]] = true;\\n            address ArtistContractAddress = resolveArtistContract(ArtistIDs[i]);\\n            bool ArtBlocksMint = resolveArtistMint(ArtistIDs[i]);\\n            if(ArtBlocksMint)\\n            {\\n                uint TokenID = IArtBlocks(ArtistContractAddress).purchase(ArtistIDs[i]);\\n                IERC721(_ArtBlocksCoreContractArtists).transferFrom(address(this), Recipient, TokenID);\\n                emit LiveMintCompleteArtist(Recipient, ArtistIDs[i], TicketIDs[i], TokenID, true);\\n            }\\n            else \\n            { \\n                uint TokenID = IRandomEdition(ArtistContractAddress)._Mint(Recipient, 1); \\n                emit LiveMintCompleteArtist(Recipient, ArtistIDs[i], TicketIDs[i], TokenID, true);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Approves BRT For Purchasing On ArtBlocks Contract\\n     **/\\n    function __ApproveERC20(address BRT, address Operator, uint Amount) external onlyOwner { IERC20(BRT).approve(Operator, Amount); }\\n\\n    /**\\n     * @dev Batch Approves BRT For Purchasing\\n     */\\n    function __BatchApproveERC20(address[] calldata ERC20s, address[] calldata Operators, uint[] calldata Amounts) external onlyOwner\\n    {\\n        require(ERC20s.length == Operators.length && Operators.length == Amounts.length, \\\"LiveMint: Arrays Must Be Equal Length\\\");\\n        for(uint i; i < ERC20s.length; i++)\\n        {\\n            IERC20(ERC20s[i]).approve(Operators[i], Amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Grants Address BRT Minter Role\\n     **/\\n    function __MinterAdd(address Minter) external onlyOwner \\n    { \\n        Role[Minter] = _MINTER_ROLE; \\n        emit MinterAdded(Minter);\\n    }\\n\\n    /**\\n     * @dev Deactivates Address From BRT Minter Role\\n     **/\\n    function __MinterRemove(address Minter) external onlyOwner \\n    { \\n        Role[Minter] = _DEACTIVATED_ROLE; \\n        emit MinterRemoved(Minter);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Minting Address Citizens\\n     */\\n    function __ChangeArtBlocksMintingAddress(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksMintingContractCitizens;\\n        _ArtBlocksMintingContractCitizens = NewMintingAddress;\\n        emit ArtBlocksMintingAddressChanged(OldMintingAddress, _ArtBlocksMintingContractCitizens);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Minting Address Artists\\n     */\\n    function __ChangeArtBlocksMintingAddressArtists(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksMintingContractArtists;\\n        _ArtBlocksMintingContractArtists = NewMintingAddress;\\n        emit ArtBlocksMintingAddressChanged(OldMintingAddress, _ArtBlocksMintingContractArtists);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Core Address Citizens\\n     */\\n    function __ChangeArtBlocksCoreAddress(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksCoreContractCitizens;\\n        _ArtBlocksCoreContractCitizens = NewMintingAddress;\\n        emit ArtBlocksCoreAddressChanged(OldMintingAddress, _ArtBlocksCoreContractCitizens);\\n    }\\n\\n    /**\\n     * @dev Modifies ArtBlocks Core Address Artists\\n     */\\n    function __ChangeArtBlocksCoreAddressArtist(address NewMintingAddress) external onlyOwner\\n    {\\n        address OldMintingAddress = _ArtBlocksCoreContractArtists;\\n        _ArtBlocksCoreContractArtists = NewMintingAddress;\\n        emit ArtBlocksCoreAddressChangedArtist(OldMintingAddress, _ArtBlocksCoreContractArtists);\\n    }\\n\\n    /**\\n     * @dev Modifies Artist Contract Address\\n     */\\n    function __ChangeArtistContractAddress(uint ArtistID, address NewContractAddress) external onlyOwner\\n    {\\n        address OldArtistContractAddress = resolveArtistContract(ArtistID);\\n        ArtistContracts[_CurrentCityIndex][ArtistID] = NewContractAddress;\\n        emit ArtistContractAddressChanged(OldArtistContractAddress, NewContractAddress);\\n    }\\n\\n    /**\\n     * @dev Modifies Artist Mint Type\\n     * note: True For ArtBlocks | False For Random Edition\\n     */\\n    function __ChangeArtistMintType(uint ArtistID, bool NewMintType) external onlyOwner\\n    {\\n        bool OldMintType = resolveArtistMint(ArtistID);\\n        MintType[_CurrentCityIndex][ArtistID] = NewMintType;\\n        emit ArtistMintTypeChanged(OldMintType, NewMintType);\\n    }\\n\\n    /**\\n     * @dev Modifies The Current ArtBlocks ProjectID\\n     **/\\n    function __ChangeArtBlocksProjectID(uint ArtBlocksProjectID) external onlyOwner \\n    { \\n        uint OldProjectID = _ArtBlocksProjectID;\\n        _ArtBlocksProjectID = ArtBlocksProjectID; \\n        emit ModifiedProjectID(OldProjectID, _ArtBlocksProjectID);\\n    }\\n\\n    /**\\n     * @dev Modifies Golden Token Address\\n     */\\n    function __ChangeGoldenTokenAddress(address NewGTAddress) external onlyOwner\\n    {\\n        address OldAddress = _GoldenToken;\\n        _GoldenToken = NewGTAddress;\\n        emit GoldenTokenAddressChanged(OldAddress, _GoldenToken);\\n    }\\n\\n    /**\\n     * @dev Modifies ERC20 BRT Minting Token Address\\n     */\\n    function __ChangeERC20Address(address NewERC20Address) external onlyOwner\\n    {\\n        address OldAddress = _ERC20_BRT_Token;\\n        _ERC20_BRT_Token = NewERC20Address;\\n        emit ERC20AddressChanged(OldAddress, _ERC20_BRT_Token);\\n    }\\n\\n    /**\\n     * @dev Modifies Current City Index\\n     */\\n    function __ChangeCityIndex(uint Index) external onlyOwner\\n    {\\n        uint OldIndex = _CurrentCityIndex;\\n        _CurrentCityIndex = Index;\\n        emit CurrentCityIndexChanged(OldIndex, _CurrentCityIndex);\\n    }\\n\\n    /**\\n     * @dev Changes TimeSlot At Index `Slot` \\n     * note: Slot is denoted in YYYY-DD-MM with no -'s (20220101) for Jan 1st\\n     */\\n    function __ChangeTimeSlot(uint Slot, uint Amount) external onlyOwner \\n    { \\n        uint OldAmount = BookingsAvailable[_CurrentCityIndex][Slot];\\n        BookingsAvailable[_CurrentCityIndex][Slot] = Amount; \\n        emit TimeSlotChanged(OldAmount, Amount);\\n    }\\n\\n    /**\\n     * @dev Changes Multisig Address\\n     */\\n    function __ChangeMultisigAddress(address NewAddress) external onlyOwner\\n    {\\n        address OldAddress = _BRTMULTISIG;\\n        _BRTMULTISIG = NewAddress;\\n        emit MultisigAddressChanged(OldAddress, NewAddress);\\n    }\\n\\n    /**\\n     * @dev Changes Multiple TimeSlots \\n     * note: Slot is denoted in YYYY-DD-MM with no -'s (20220101) for Jan 1st\\n     */\\n    function __ChangeTimeSlots(uint[] calldata Slots, uint[] calldata Amounts) external onlyOwner\\n    {\\n        require(Slots.length == Amounts.length, \\\"Arrays Must Match Length\\\");\\n        for(uint i; i < Slots.length; i++)\\n        {\\n            BookingsAvailable[_CurrentCityIndex][Slots[i]] = Amounts[i];\\n        }\\n        emit TimeSlotsChanged(Slots, Amounts);\\n    }\\n\\n    /**\\n     * @dev Batch Changes State Variables For LiveMint\\n     * note: __ApproveBRT(_ERC20_BRT_Token) Will Need To Be Called On This Contract After This Function\\n     * note: This Is So That Variables Can Be Double Checked & Mint Will Not Be Active Until That Is Complete\\n     */\\n    function __NewCity(\\n        address ERC20TokenAddress,\\n        address ArtBlocksMintingContractAddress,\\n        address ArtBlocksCoreContractAddress,\\n        address ArtBlocksCoreContractAddressArtist,\\n        address GoldenTokenAddress,\\n        uint ArtBlocksProjectID,\\n        uint CurrentCityIndex\\n    ) \\n    external onlyOwner \\n    {\\n        _ERC20_BRT_Token = ERC20TokenAddress;\\n        _ArtBlocksMintingContractCitizens = ArtBlocksMintingContractAddress;\\n        _ArtBlocksCoreContractCitizens = ArtBlocksCoreContractAddress;\\n        _ArtBlocksCoreContractArtists = ArtBlocksCoreContractAddressArtist;\\n        _GoldenToken = GoldenTokenAddress;\\n        _ArtBlocksProjectID = ArtBlocksProjectID;\\n        _CurrentCityIndex = CurrentCityIndex;\\n        emit NewCityStarted(\\n            _ERC20_BRT_Token,\\n            _ArtBlocksMintingContractCitizens,\\n            _ArtBlocksCoreContractCitizens, \\n            _ArtBlocksCoreContractArtists,\\n            _GoldenToken, \\n            _ArtBlocksProjectID, \\n            _CurrentCityIndex\\n        );\\n    }\\n\\n    /**\\n     * @dev Instantiates New Artists At `CurrentCityIndex` => `ArtistID[i]`\\n     * @dev note: ArtistIDs = uint[]\\n     * @dev note: MintPasses = address[] (this is the MintPass contract addresses)\\n     * @dev note: MintingAddresses = address[] (this is the NFTs to be Minted)\\n     * @dev note: MintTypes = bool[] (true for ArtBlocks) | (false for Random Edition)\\n     */\\n    function __NewArtists(\\n        uint[] calldata ArtistIDs, \\n        address[] calldata MintPasses, \\n        address[] calldata MintingAddresses,\\n        bool[] calldata MintTypes\\n    ) external onlyOwner {\\n        require(\\n            ArtistIDs.length == MintPasses.length \\n            && MintPasses.length == MintingAddresses.length \\n            && MintingAddresses.length == MintTypes.length, \\n            \\\"LiveMint: Array Lengths Must Be Of Equal Value\\\"\\n        );\\n        for(uint i; i < ArtistIDs.length; i++)\\n        {\\n            ArtistMintPasses[_CurrentCityIndex][ArtistIDs[i]] = MintPasses[i];\\n            ArtistContracts[_CurrentCityIndex][ArtistIDs[i]] = MintingAddresses[i];\\n            MintType[_CurrentCityIndex][ArtistIDs[i]] = MintTypes[i];\\n        }\\n        emit NewArtists(ArtistIDs, MintPasses, MintingAddresses, MintTypes);\\n    }\\n\\n    /**\\n     * @dev Withdraws Any Ether Mistakenly Sent to Contract to Multisig\\n     **/\\n    function __WithdrawEther() external onlyOwner { payable(msg.sender).transfer(address(this).balance); }\\n\\n    /**\\n     * @dev Withdraws ERC20 Tokens to Multisig\\n     **/\\n    function __WithdrawERC20(address tokenAddress) external onlyOwner \\n    { \\n        IERC20 erc20Token = IERC20(tokenAddress);\\n        uint balance = erc20Token.balanceOf(address(this));\\n        require(balance > 0, \\\"0 ERC20 Balance At `tokenAddress`\\\");\\n        erc20Token.transfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Withdraws Any NFT Mistakenly Sent To This Contract.\\n     */\\n    function __WithdrawERC721(address ContractAddress, address Recipient, uint TokenID) external onlyOwner\\n    {\\n        IERC721(ContractAddress).transferFrom(address(this), Recipient, TokenID);\\n    }\\n\\n    /*-------------------*/\\n    /*    PUBLIC VIEW    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Returns BrightListed Address Corresponding to Golden Ticket `TicketID`\\n     **/\\n    function readBrightListCitizen(uint TicketID) public view returns(address)\\n    { \\n        return BrightListCitizen[_CurrentCityIndex][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns BrightListed Address Corresponding to Mint Pass `ArtistID` & `TicketID`\\n     */\\n    function readBrightListArtist(uint ArtistID, uint TicketID) public view returns(address) \\n    { \\n        return BrightListArtist[_CurrentCityIndex][ArtistID][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns Artist NFT Contract Address Correpsonding To ArtistID (1 through 10)\\n     */\\n    function resolveArtistContract(uint ArtistID) public view returns(address) \\n    { \\n        return ArtistContracts[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Returns Artist Mint Pass Contract Address Correpsonding To ArtistID\\n     */\\n    function resolveArtistMintPass(uint ArtistID) public view returns(address) \\n    { \\n        return ArtistMintPasses[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Batch Returns Owned Artist Mint Passes\\n     */\\n    function resolveArtistMintPasses(uint[] calldata ArtistIDs) public view returns(address[] memory)\\n    {\\n        address[] memory MintPasses = new address[](ArtistIDs.length);\\n        for(uint i; i < ArtistIDs.length; i++)\\n        {\\n            address x = resolveArtistMintPass(ArtistIDs[i]);\\n            MintPasses[i] = x;\\n        }\\n        return MintPasses;\\n    }\\n\\n    /**\\n     * @dev Returns Artist ArtBlocks Mint Type (true for ArtBlocks Mint) | (false for Random Edition Mint)\\n     */\\n    function resolveArtistMint(uint ArtistID) public view returns(bool) \\n    { \\n        return MintType[_CurrentCityIndex][ArtistID]; \\n    }\\n\\n    /**\\n     * @dev Returns Booked TimeSlot For Golden Ticket Corresponding `TicketID`\\n     */\\n    function readTimeSlotGoldenTicket(uint TicketID) public view returns(uint) \\n    { \\n        return SelectedTimeSlotGoldenTicket[_CurrentCityIndex][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns Booked TimeSlot For Artist Mint Pass Corresponding To `TicketID`\\n     */\\n    function readTimeSlotArtistMintPass(uint ArtistID, uint TicketID) public view returns(uint) \\n    { \\n        return SelectedTimeSlotArtistMintPass[_CurrentCityIndex][ArtistID][TicketID]; \\n    }\\n\\n    /**\\n     * @dev Returns If Golden Token Corresponding To `TicketID` Has Been Minted\\n     */\\n    function readMintedCitizen(uint TicketID) public view returns(bool)\\n    {\\n        return MintedCitizen[_CurrentCityIndex][TicketID];\\n    }\\n\\n    /**\\n     * @dev Returns If Artist Mint Pass Corresponding To `TicketID` Has Been Minted\\n     */\\n    function readMintedArtist(uint ArtistID, uint TicketID) public view returns(bool)\\n    {\\n        return MintedArtist[_CurrentCityIndex][ArtistID][TicketID];\\n    }\\n\\n    /**\\n     * @dev Returns Owner Of Mint Pass Corresponding To `TicketID`\\n     */\\n    function readOwnerOfMintPass(uint ArtistID, uint TicketID) public view returns(address)\\n    {\\n        return IERC721(resolveArtistMintPass(ArtistID)).ownerOf(TicketID);\\n    }\\n\\n    /**\\n     * @dev Returns Owner Of Golden Token Corresponding To `TicketID`\\n     */\\n    function readOwnerOfGoldenToken(uint TicketID) public view returns(address)\\n    {\\n        return IERC721(_GoldenToken).ownerOf(TicketID);\\n    }\\n\\n    /**\\n     * @dev Returns Artist Metadata\\n     */\\n    function readMetadataArtist(uint ArtistID, uint TokenID) public view returns(string memory)\\n    {\\n        if(!resolveArtistMint(ArtistID))\\n        {\\n            return IRandomEdition(resolveArtistContract(ArtistID)).tokenURI(TokenID);\\n        }\\n        else if(resolveArtistMint(ArtistID))\\n        {\\n            return IArtBlocks(resolveArtistContract(ArtistID)).tokenURI(TokenID);\\n        }\\n        else { return \\\"Artist NFT Corresponding To `TicketID` Not Minted\\\"; }\\n    }\\n\\n    /**\\n     * @dev Returns Citizen Metadata\\n     */\\n    function readMetadataCitizen(uint TokenID) public view returns (string memory)\\n    {\\n        return IArtBlocks(_ArtBlocksCoreContractCitizens).tokenURI(TokenID);\\n    }\\n\\n    /**\\n     * @dev Batch Returns If `Wallet` Owns Multiple TokenIDs Of Singular NFT Address\\n     */\\n    function readNFTOwnedTokenIDs(\\n        address Wallet, \\n        address NFTAddress, \\n        uint Range\\n    ) public view returns (uint[] memory) {\\n        IERC721 NFT = IERC721(NFTAddress);\\n        uint[] memory temp = new uint[](Range);\\n        uint counter;\\n        for (uint x; x <= Range; x++) \\n        {\\n            try NFT.ownerOf(x) \\n            {\\n                if(NFT.ownerOf(x) == Wallet)\\n                {\\n                    temp[counter] = x;\\n                    counter++;\\n                }\\n            } catch { }\\n        }\\n        uint[] memory OwnedIDs = new uint[](counter);\\n        uint index;\\n        for(uint z; z < Range; z++)\\n        {\\n            if(temp[z] != 0 || (z == 0 && temp[z] == 0))\\n            {\\n                OwnedIDs[index] = temp[z];\\n                index++;\\n            }\\n        }\\n        return OwnedIDs;\\n    }\\n\\n    /**\\n     * @dev Batch Returns If Wallet Owns Multiple TokenIDs Of Multiple NFTs\\n     */\\n    function readNFTsOwnedTokenIDs(\\n        address Wallet, \\n        address[] calldata NFTAddresses, \\n        uint Range\\n    ) public view returns (uint[][] memory) {\\n        uint[][] memory OwnedIDs = new uint[][](NFTAddresses.length);\\n        for(uint x; x < NFTAddresses.length; x++)\\n        {\\n            try IERC721(NFTAddresses[x]).ownerOf(x) //checks if valid ERC721\\n            {\\n                IERC721 NFT = IERC721(NFTAddresses[x]);\\n                uint[] memory temp = new uint[](Range);\\n                uint counter;\\n                for(uint y; y < Range; y++)\\n                {\\n                    try NFT.ownerOf(y) \\n                    {\\n                        if(NFT.ownerOf(y) == Wallet)\\n                        {\\n                            temp[counter] = y;\\n                            counter++;   \\n                        }\\n                    } catch { }\\n                }\\n                uint[] memory FormattedOwnedIDs = new uint[](counter);\\n                uint index;\\n                for(uint z; z < counter; z++)\\n                {\\n                    if(temp[z] != 0 || (z == 0 && temp[z] == 0))\\n                    {\\n                        FormattedOwnedIDs[index] = temp[z];\\n                        index++;\\n                    }\\n                }\\n                OwnedIDs[x] = FormattedOwnedIDs;\\n            } catch { }\\n        }\\n        return OwnedIDs;\\n    }\\n\\n    /*-------------------*/\\n    /*      MODIFIERS    */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Function Modifier That Allows Only BrightListed BRT Minters To Access\\n     **/\\n    modifier onlyMinter() \\n    {\\n        require(Role[msg.sender] == _MINTER_ROLE, \\\"OnlyMinter: Caller Is Not Approved BRT Minter\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IArtBlocks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\ninterface IArtBlocks \\n{ \\n    function purchase(uint256 _projectId) payable external returns (uint tokenID); \\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/IRandomEdition.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\ninterface IRandomEdition \\n{ \\n    function _Mint(address Recipient, uint Amount) external returns(uint tokenID); //Mints Random Edition\\n    function tokenURI(uint256 tokenId) external view returns (string memory); //Returns IPFS Metadata\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldCoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewCoreAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksCoreAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldCoreAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewCoreAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksCoreAddressChangedArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldMintingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"ArtBlocksMintingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewContractAddress\",\"type\":\"address\"}],\"name\":\"ArtistContractAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"ArtistMintPassRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"OldMintType\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"NewMintType\",\"type\":\"bool\"}],\"name\":\"ArtistMintTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewIndex\",\"type\":\"uint256\"}],\"name\":\"CurrentCityIndexChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldERC20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewERC20Address\",\"type\":\"address\"}],\"name\":\"ERC20AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldGTAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewGTAddress\",\"type\":\"address\"}],\"name\":\"GoldenTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"GoldenTokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"LiveMintComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"LiveMintCompleteArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"RemovedMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewProjectID\",\"type\":\"uint256\"}],\"name\":\"ModifiedProjectID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"MultisigAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"MintPasses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"MintingAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"MintTypes\",\"type\":\"bool[]\"}],\"name\":\"NewArtists\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20_BRT_TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksMintingContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressCitizen\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressArtist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"GoldenTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CurrentCityIndex\",\"type\":\"uint256\"}],\"name\":\"NewCityStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewAmount\",\"type\":\"uint256\"}],\"name\":\"TimeSlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Slots\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"TimeSlotsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArtistContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ArtistMintPasses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BookingsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BrightListArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BrightListCitizen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DelegateStatusArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DelegateStatusCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MintedCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"RedeemArtistPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TimeSlot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Delegate\",\"type\":\"bool\"}],\"name\":\"RedeemGT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SelectedTimeSlotArtistMintPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SelectedTimeSlotGoldenTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksCoreContractArtists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksCoreContractCitizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksMintingContractArtists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksMintingContractCitizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ArtBlocksProjectID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BRTMULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CurrentCityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ERC20_BRT_Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GoldenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"_LiveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"_LiveMintArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BRT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__ApproveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ERC20s\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"Operators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__BatchApproveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksCoreAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksCoreAddressArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksMintingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewMintingAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtBlocksMintingAddressArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"}],\"name\":\"__ChangeArtBlocksProjectID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewContractAddress\",\"type\":\"address\"}],\"name\":\"__ChangeArtistContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"NewMintType\",\"type\":\"bool\"}],\"name\":\"__ChangeArtistMintType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Index\",\"type\":\"uint256\"}],\"name\":\"__ChangeCityIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewERC20Address\",\"type\":\"address\"}],\"name\":\"__ChangeERC20Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewGTAddress\",\"type\":\"address\"}],\"name\":\"__ChangeGoldenTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewAddress\",\"type\":\"address\"}],\"name\":\"__ChangeMultisigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"__ChangeTimeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"Slots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Amounts\",\"type\":\"uint256[]\"}],\"name\":\"__ChangeTimeSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"__DelegateMintArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"TicketIDs\",\"type\":\"uint256[]\"}],\"name\":\"__DelegateMintCitizens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__MinterAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Minter\",\"type\":\"address\"}],\"name\":\"__MinterRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"MintPasses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"MintingAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"MintTypes\",\"type\":\"bool[]\"}],\"name\":\"__NewArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksMintingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ArtBlocksCoreContractAddressArtist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"GoldenTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ArtBlocksProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CurrentCityIndex\",\"type\":\"uint256\"}],\"name\":\"__NewCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"__WithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"__WithdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__WithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readBrightListArtist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readBrightListCitizen\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"readMetadataArtist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"readMetadataCitizen\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readMintedArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readMintedCitizen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readNFTOwnedTokenIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"NFTAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"Range\",\"type\":\"uint256\"}],\"name\":\"readNFTsOwnedTokenIDs\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readOwnerOfGoldenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readOwnerOfMintPass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readTimeSlotArtistMintPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"readTimeSlotGoldenTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ArtistID\",\"type\":\"uint256\"}],\"name\":\"resolveArtistMintPass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ArtistIDs\",\"type\":\"uint256[]\"}],\"name\":\"resolveArtistMintPasses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoCitizenLiveMint", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}