{"status": "1", "message": "OK", "result": [{"SourceCode": "//\r\n//       /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$ \r\n//      /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$\r\n//     | $$  \\__/| $$  \\ $$| $$  \\__/| $$  \\__/\r\n//     |  $$$$$$ | $$$$$$$$| $$ /$$$$| $$      \r\n//     \\____  $$| $$__  $$| $$|_  $$| $$      \r\n//     /$$  \\ $$| $$  | $$| $$  \\ $$| $$    $$\r\n//     |  $$$$$$/| $$  | $$|  $$$$$$/|  $$$$$$/\r\n//     \\______/ |__/  |__/ \\______/  \\______/ \r\n//                                        \r\n//     \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[sender] = senderBalance - amount;\r\n    }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISagc {\r\n    function balanceOf(address _user) external view returns(uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns(address);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract Fore is ERC20(\"Fore\", \"FORE\"), Ownable {\r\n    address public LoyalApeContractAddress;\r\n    address public UpComingContractAddress;\r\n    address public SagcContractAddress;\r\n    address public admin = 0x3AA4519AF9C26E0e259348CD78B3f09d56fD1B70;\r\n    struct ContractSettings {\r\n        uint256 baseRate;\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n\r\n    ContractSettings public loyalApeContractSettings;\r\n    ContractSettings public upComingContractSettings;\r\n    ContractSettings public sagcContractSettings;\r\n    ISagc public iLoyalApe;\r\n    ISagc public iUpComing;\r\n    ISagc public iSagc;\r\n\r\n    // Prevents new contracts from being added or changes to disbursement if permanently locked\r\n    bool public isLocked = false;\r\n    mapping(bytes32 => uint256) public loyalApeLastClaim;\r\n    mapping(bytes32 => uint256) public upComingLastClaim;\r\n    mapping(bytes32 => uint256) public sagcLastClaim;\r\n\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n\r\n    constructor(address _loyalApeAddress,address _upComingAddress,address _sagcAddress, uint256 _loyalApeBaseRate, uint256 _upComingBaseRate, uint256 _sagcBaseRate) {\r\n        LoyalApeContractAddress = _loyalApeAddress;\r\n        UpComingContractAddress = _upComingAddress;\r\n        SagcContractAddress = _sagcAddress;\r\n        iLoyalApe = ISagc(LoyalApeContractAddress);\r\n        iUpComing = ISagc(UpComingContractAddress);\r\n        iSagc = ISagc(SagcContractAddress);\r\n        // initialize contractSettings\r\n        loyalApeContractSettings = ContractSettings({\r\n        baseRate: _loyalApeBaseRate * 10 ** 18,\r\n        start: 1645369200,\r\n        end: 1708441200\r\n        });\r\n        upComingContractSettings = ContractSettings({\r\n        baseRate: _upComingBaseRate  * 10 ** 18,\r\n        start: 1645369200,\r\n        end: 1708441200\r\n        });\r\n        sagcContractSettings = ContractSettings({\r\n        baseRate: _sagcBaseRate  * 10 ** 18,\r\n        start: 1645369200,\r\n        end: 1708441200\r\n        });\r\n    }\r\n\r\n    function setLoyalApeContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        loyalApeContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        loyalApeContractSettings.start = _start;\r\n        loyalApeContractSettings.end = _end;\r\n    }\r\n\r\n    function setUpComingContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        upComingContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        upComingContractSettings.start = _start;\r\n        upComingContractSettings.end = _end;\r\n    }\r\n\r\n    function setSagcContractSettings(uint256 _baseRate, uint256 _start, uint256 _end) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        require(!isLocked, \"Cannot modify end dates after lock\");\r\n        sagcContractSettings.baseRate = _baseRate  * 10 ** 18;\r\n        sagcContractSettings.start = _start;\r\n        sagcContractSettings.end = _end;\r\n    }\r\n\r\n    function claimRewardForLoyalApe(uint256 _loyalApeTokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward1 = 0;\r\n        require(loyalApeContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iLoyalApe.ownerOf(_loyalApeTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward1 = computeUnclaimedRewardForLoyalApe(_loyalApeTokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_loyalApeTokenId));\r\n        loyalApeLastClaim[lastClaimKey] = block.timestamp;\r\n\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardForUpComing( uint256 _upComingTokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward2 = 0;\r\n         require(upComingContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iUpComing.ownerOf(_upComingTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward2 = computeUnclaimedRewardForUpComing(_upComingTokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimUpComingKey = keccak256(abi.encode(_upComingTokenId));\r\n        upComingLastClaim[lastClaimUpComingKey] = block.timestamp;\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward2);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward2);\r\n\r\n        return totalUnclaimedReward2;\r\n    }\r\n\r\n    function claimRewardForSagc(uint256 _sagcTokenId) public returns (uint256) {\r\n        uint256 totalUnclaimedReward1 = 0;\r\n        require(sagcContractSettings.end > block.timestamp, \"Time for claiming has expired.\");\r\n        require(iSagc.ownerOf(_sagcTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n        totalUnclaimedReward1 = computeUnclaimedRewardForSagc(_sagcTokenId);\r\n\r\n        // update the lastClaim date for tokenId and contractAddress\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_sagcTokenId));\r\n        sagcLastClaim[lastClaimKey] = block.timestamp;\r\n\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardsForLoyalApe(uint256[] calldata _loyalApeTokenIds) public returns (uint256) {\r\n        require(loyalApeContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward1 = 0;\r\n\r\n        for(uint256 i = 0; i < _loyalApeTokenIds.length; i++) {\r\n            uint256 _loyalApeTokenId = _loyalApeTokenIds[i];\r\n\r\n            require(iLoyalApe.ownerOf(_loyalApeTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForLoyalApe(_loyalApeTokenId);\r\n            totalUnclaimedReward1 = totalUnclaimedReward1 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_loyalApeTokenId));\r\n            loyalApeLastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function claimRewardsForUpComing(uint256[] calldata _upComingTokenIds) public returns (uint256) {\r\n        require(upComingContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward2 = 0;\r\n\r\n        for(uint256 i = 0; i < _upComingTokenIds.length; i++) {\r\n            uint256 _upComingTokenId = _upComingTokenIds[i];\r\n\r\n            require(iUpComing.ownerOf(_upComingTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForUpComing(_upComingTokenId);\r\n            totalUnclaimedReward2 = totalUnclaimedReward2 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_upComingTokenId));\r\n            upComingLastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward2);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward2);\r\n\r\n        return totalUnclaimedReward2;\r\n    }\r\n\r\n    function claimRewardsForSagc(uint256[] calldata _sagcTokenIds) public returns (uint256) {\r\n        require(sagcContractSettings.end > block.timestamp, \"Time for claiming has expired\");\r\n\r\n        uint256 totalUnclaimedReward1 = 0;\r\n\r\n        for(uint256 i = 0; i < _sagcTokenIds.length; i++) {\r\n            uint256 _sagcTokenId = _sagcTokenIds[i];\r\n\r\n            require(iSagc.ownerOf(_sagcTokenId) == msg.sender, \"Caller does not own the token being claimed for.\");\r\n\r\n            uint256 unclaimedReward = computeUnclaimedRewardForSagc(_sagcTokenId);\r\n            totalUnclaimedReward1 = totalUnclaimedReward1 + unclaimedReward;\r\n\r\n            // update the lastClaim date for tokenId and contractAddress\r\n            bytes32 lastClaimKey = keccak256(abi.encode(_sagcTokenId));\r\n            sagcLastClaim[lastClaimKey] = block.timestamp;\r\n        }\r\n        // mint the tokens and distribute to msg.sender\r\n        _mint(msg.sender, totalUnclaimedReward1);\r\n        emit RewardPaid(msg.sender, totalUnclaimedReward1);\r\n\r\n        return totalUnclaimedReward1;\r\n    }\r\n\r\n    function permanentlyLock() public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n        isLocked = !isLocked;\r\n    }\r\n\r\n    function getUnclaimedRewardAmountForLoyalApe(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForLoyalApe(_tokenId);\r\n    }\r\n\r\n        function getUnclaimedRewardAmountForUpComing(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForUpComing(_tokenId);\r\n    }\r\n\r\n    function getUnclaimedRewardAmountForSagc(uint256 _tokenId) public view returns (uint256) {\r\n        return computeUnclaimedRewardForSagc(_tokenId);\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForLoyalApe(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForLoyalApe(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForUpComing(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForUpComing(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getUnclaimedRewardsAmountForSagc(uint256[] calldata _tokenIds) public view returns (uint256) {\r\n\r\n        uint256 totalUnclaimedRewards = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForSagc(_tokenIds[i]);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForLoyalApeContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iLoyalApe.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForLoyalApe(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForUpComingContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iUpComing.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForUpComing(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getTotalUnclaimedRewardsForSagcContract() public view returns (uint256) {\r\n        uint256 totalUnclaimedRewards = 0;\r\n        uint256 totalSupply = iSagc.totalSupply();\r\n\r\n        for(uint256 i = 0; i < totalSupply; i++) {\r\n            totalUnclaimedRewards += computeUnclaimedRewardForSagc(i);\r\n        }\r\n\r\n        return totalUnclaimedRewards;\r\n    }\r\n\r\n    function getLoyalApeLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return loyalApeLastClaim[lastClaimKey];\r\n    }\r\n\r\n    function getUpComingLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return upComingLastClaim[lastClaimKey];\r\n    }\r\n\r\n    function getSagcLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\r\n\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n\r\n        return sagcLastClaim[lastClaimKey];\r\n    }\r\n\r\n    function computeAccumulatedReward(uint256 _lastClaimDate, uint256 _baseRate, uint256 currentTime) internal pure returns (uint256) {\r\n        require(currentTime > _lastClaimDate, \"Last claim date must be smaller than block timestamp\");\r\n\r\n        uint256 secondsElapsed = currentTime - _lastClaimDate;\r\n        uint256 accumulatedReward = secondsElapsed * _baseRate / 1 days;\r\n\r\n        return accumulatedReward;\r\n    }\r\n    function computeUnclaimedRewardForLoyalApe(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iLoyalApe.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = loyalApeLastClaim[lastClaimKey];\r\n        uint256 baseRate = loyalApeContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(loyalApeContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n\r\n    function computeUnclaimedRewardForUpComing(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iUpComing.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = upComingLastClaim[lastClaimKey];\r\n        uint256 baseRate = upComingContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(upComingContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n\r\n    function computeUnclaimedRewardForSagc(uint256 _tokenId) internal view returns (uint256) {\r\n\r\n        // Will revert if tokenId does not exist\r\n        iSagc.ownerOf(_tokenId);\r\n\r\n        // build the hash for lastClaim based on contractAddress and tokenId\r\n        bytes32 lastClaimKey = keccak256(abi.encode(_tokenId));\r\n        uint256 lastClaimDate = sagcLastClaim[lastClaimKey];\r\n        uint256 baseRate = sagcContractSettings.baseRate;\r\n\r\n        // if there has been a lastClaim, compute the value since lastClaim\r\n        if (lastClaimDate != uint256(0)) {\r\n            return computeAccumulatedReward(lastClaimDate, baseRate, block.timestamp);\r\n        }\r\n        \r\n        else {\r\n            // if there has not been a lastClaim, add the initIssuance + computed value since contract startDate\r\n            uint256 totalReward = computeAccumulatedReward(sagcContractSettings.start, baseRate, block.timestamp);\r\n\r\n            return totalReward;\r\n        }\r\n    }\r\n    \r\n   \r\n    function setUpComingAddress(address _upComingAddress) public{\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    UpComingContractAddress = _upComingAddress;\r\n        iUpComing = ISagc(_upComingAddress);\r\n\t}\r\n    function setLoyalApeAddress(address _loyalApeAddress) public {\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    LoyalApeContractAddress = _loyalApeAddress;\r\n        iLoyalApe =  ISagc(_loyalApeAddress);\r\n\t}\r\n    function setSagcAddress(address _sagcAddress) public{\r\n        require(msg.sender == admin || msg.sender == owner(), \"Invalid sender\");\r\n\t    SagcContractAddress = _sagcAddress;\r\n        iSagc =  ISagc(_sagcAddress);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyalApeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upComingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sagcAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loyalApeBaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upComingBaseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sagcBaseRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LoyalApeContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SagcContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UpComingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loyalApeTokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForLoyalApe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sagcTokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForSagc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upComingTokenId\",\"type\":\"uint256\"}],\"name\":\"claimRewardForUpComing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_loyalApeTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForLoyalApe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_sagcTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForSagc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_upComingTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsForUpComing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoyalApeLastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSagcLastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForLoyalApeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForSagcContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimedRewardsForUpComingContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForLoyalApe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForSagc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUnclaimedRewardAmountForUpComing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForLoyalApe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForSagc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getUnclaimedRewardsAmountForUpComing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUpComingLastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iLoyalApe\",\"outputs\":[{\"internalType\":\"contract ISagc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iSagc\",\"outputs\":[{\"internalType\":\"contract ISagc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iUpComing\",\"outputs\":[{\"internalType\":\"contract ISagc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyalApeContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loyalApeLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sagcContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sagcLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loyalApeAddress\",\"type\":\"address\"}],\"name\":\"setLoyalApeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setLoyalApeContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sagcAddress\",\"type\":\"address\"}],\"name\":\"setSagcAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setSagcContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upComingAddress\",\"type\":\"address\"}],\"name\":\"setUpComingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setUpComingContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upComingContractSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"upComingLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Fore", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000050cea23c192d26deb1f02083a02c0ed82375e676000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1618ae27a6f56ada0743236587a1c0c082847764dc532149a620e0fb1ec87abb"}]}