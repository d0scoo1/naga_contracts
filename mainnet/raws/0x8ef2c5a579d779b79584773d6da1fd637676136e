{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n/* \r\n*  __      __  ______  ____        _____   ____        ____    ______  __  __\r\n* /\\ \\  __/\\ \\/\\  _  \\/\\  _`\\     /\\  __`\\/\\  _`\\     /\\  _`\\ /\\__  _\\/\\ \\/\\ \\\r\n* \\ \\ \\/\\ \\ \\ \\ \\ \\L\\ \\ \\ \\L\\ \\   \\ \\ \\/\\ \\ \\ \\L\\_\\   \\ \\ \\L\\_\\/_/\\ \\/\\ \\ \\_\\ \\\r\n*  \\ \\ \\ \\ \\ \\ \\ \\  __ \\ \\ ,  /    \\ \\ \\ \\ \\ \\  _\\/    \\ \\  _\\L  \\ \\ \\ \\ \\  _  \\\r\n*   \\ \\ \\_/ \\_\\ \\ \\ \\/\\ \\ \\ \\\\ \\    \\ \\ \\_\\ \\ \\ \\/      \\ \\ \\L\\ \\ \\ \\ \\ \\ \\ \\ \\ \\\r\n*    \\ `\\___x___/\\ \\_\\ \\_\\ \\_\\ \\_\\   \\ \\_____\\ \\_\\       \\ \\____/  \\ \\_\\ \\ \\_\\ \\_\\\r\n*     '\\/__//__/  \\/_/\\/_/\\/_/\\/ /    \\/_____/\\/_/        \\/___/    \\/_/  \\/_/\\/_/\r\n* \r\n*             _____  _____   __  __   ____    ____\r\n*            /\\___ \\/\\  __`\\/\\ \\/\\ \\ /\\  _`\\ /\\  _`\\\r\n*    __      \\/__/\\ \\ \\ \\/\\ \\ \\ \\/'/'\\ \\ \\L\\_\\ \\ \\L\\ \\         __      __      ___ ___      __\r\n*  /'__`\\       _\\ \\ \\ \\ \\ \\ \\ \\ , <  \\ \\  _\\L\\ \\ ,  /       /'_ `\\  /'__`\\  /' __` __`\\  /'__`\\\r\n* /\\ \\L\\.\\_    /\\ \\_\\ \\ \\ \\_\\ \\ \\ \\\\`\\ \\ \\ \\L\\ \\ \\ \\\\ \\     /\\ \\L\\ \\/\\ \\L\\.\\_/\\ \\/\\ \\/\\ \\/\\  __/\r\n* \\ \\__/.\\_\\   \\ \\____/\\ \\_____\\ \\_\\ \\_\\\\ \\____/\\ \\_\\ \\_\\   \\ \\____ \\ \\__/.\\_\\ \\_\\ \\_\\ \\_\\ \\____\\\r\n*  \\/__/\\/_/    \\/___/  \\/_____/\\/_/\\/_/ \\/___/  \\/_/\\/ /    \\/___L\\ \\/__/\\/_/\\/_/\\/_/\\/_/\\/____/\r\n*                                                              /\\____/\r\n*                                                              \\_/__/\r\n*/\r\n\r\ncontract WarOfEth {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using WoeKeysCalc for uint256;\r\n\r\n    //==============\r\n    // EVENTS\r\n    //==============\r\n\r\n    // \u7528\u6237\u6ce8\u518c\u65b0\u540d\u5b57\u4e8b\u4ef6\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // \u961f\u4f0d\u65b0\u540d\u5b57\u4e8b\u4ef6\r\n    event onNewTeamName\r\n    (\r\n        uint256 indexed teamID,\r\n        bytes32 indexed teamName,\r\n        uint256 indexed playerID,\r\n        bytes32 playerName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n    // \u8d2d\u4e70\u4e8b\u4ef6\r\n    event onTx\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 teamID,\r\n        bytes32 teamName,\r\n        uint256 ethIn,\r\n        uint256 keysBought\r\n    );\r\n\r\n    // \u652f\u4ed8\u9080\u8bf7\u5956\u52b1\u65f6\u89e6\u53d1\r\n    event onAffPayout\r\n    (\r\n        uint256 indexed affID,\r\n        address affAddress,\r\n        bytes32 affName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // \u6dd8\u6c70\u4e8b\u4ef6\uff08\u6bcf\u56de\u5408\u6dd8\u6c70\u4e00\u6b21\uff09\r\n    event onKill\r\n    (\r\n        uint256 deadCount,\r\n        uint256 liveCount,\r\n        uint256 deadKeys\r\n    );\r\n\r\n    // \u6e38\u620f\u7ed3\u675f\u4e8b\u4ef6\r\n    event onEndRound\r\n    (\r\n        uint256 winnerTID,  // winner\r\n        bytes32 winnerTName,\r\n        uint256 playersCount,\r\n        uint256 eth    // eth in pot\r\n    );\r\n\r\n    // \u63d0\u73b0\u4e8b\u4ef6\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    //==============\r\n    // DATA\r\n    //==============\r\n\r\n    // \u73a9\u5bb6\u57fa\u672c\u4fe1\u606f\r\n    struct Player {\r\n        address addr;   // \u5730\u5740 player address\r\n        bytes32 name;   \r\n        uint256 gen;    // \u94b1\u5305\u4f59\u989d\uff1a\u901a\u7528\r\n        uint256 aff;    // \u94b1\u5305\u4f59\u989d\uff1a\u9080\u8bf7\u5956\u52b1\r\n        uint256 laff;   // \u6700\u8fd1\u9080\u8bf7\u4eba\uff08\u73a9\u5bb6ID\uff09\r\n    }\r\n    \r\n    // \u73a9\u5bb6\u5728\u6bcf\u5c40\u6bd4\u8d5b\u4e2d\u7684\u4fe1\u606f\r\n    struct PlayerRounds {\r\n        uint256 eth;    // \u672c\u5c40\u6295\u5165\u7684eth\u6210\u672c\r\n        mapping (uint256 => uint256) plyrTmKeys;    // teamid => keys\r\n        bool withdrawn;     // \u8fd9\u8f6e\u6536\u76ca\u662f\u5426\u5df2\u63d0\u73b0\r\n    }\r\n\r\n    // \u961f\u4f0d\u4fe1\u606f\r\n    struct Team {\r\n        uint256 id;     // team id\r\n        bytes32 name;    // team name\r\n        uint256 keys;   // key s in the team\r\n        uint256 eth;   // eth from the team\r\n        uint256 price;    // price of the last key (only for view)\r\n        uint256 playersCount;   // how many team members\r\n        uint256 leaderID;   // leader pID (leader is always the top 1 player in the team)\r\n        address leaderAddr;  // leader address\r\n        bool dead;  // \u961f\u4f0d\u662f\u5426\u5df2\u88ab\u6dd8\u6c70\r\n    }\r\n\r\n    // \u6bd4\u8d5b\u4fe1\u606f\r\n    struct Round {\r\n        uint256 start;  // \u5f00\u59cb\u65f6\u95f4\r\n        uint256 state;  // \u5c40\u72b6\u6001\u30020: \u5c40\u672a\u6fc0\u6d3b\uff0c1\uff1a\u5c40\u51c6\u5907\uff0c2\uff1a\u6740\u622e\uff0c3\uff1a\u7ed3\u675f\uff08\u7ed3\u675f\u540e\u74dc\u5206\u5956\u6c60\uff0c\u76f8\u5f53\u4e8eended=true\uff09\r\n        uint256 eth;    // \u6536\u5230eth\u603b\u91cf\r\n        uint256 pot;    // \u5956\u6c60\r\n        uint256 keys;   // \u672c\u8f6e\u5168\u90e8keys\r\n        uint256 team;   // \u9886\u5148\u961f\u4f0d\u7684ID\r\n        uint256 ethPerKey;  // how many eth per key in Winner Team. \u53ea\u6709\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u624d\u6709\u503c\u3002\r\n        uint256 lastKillingTime;   // \u4e0a\u4e00\u6b21\u6dd8\u6c70\u89e6\u53d1\u65f6\u95f4\r\n        uint256 deadRate;   // \u5f53\u524d\u6dd8\u6c70\u7ebf\u6bd4\u7387\uff08\u7b2c\u4e00\u540dkeys * \u6dd8\u6c70\u7ebf\u6bd4\u7387 = \u6dd8\u6c70\u7ebf\uff09\r\n        uint256 deadKeys;   // \u4e0b\u4e00\u6b21\u6dd8\u6c70\u7ebf\uff08keys\u4f4e\u4e8e\u6dd8\u6c70\u7ebf\u7684\u961f\u4f0d\u5c06\u88ab\u6dd8\u6c70\uff09\r\n        uint256 liveTeams;  // \u6d3b\u7740\u961f\u4f0d\u7684\u6570\u91cf\r\n        uint256 tID_;    // how many teams in this Round\r\n    }\r\n\r\n    // Game\r\n    string constant public name = \"War of Eth Official\";\r\n    string constant public symbol = \"WOE\";\r\n    address public owner;\r\n    uint256 public minTms_ = 3;    //\u5f00\u5c40\u6700\u5c11\u961f\u4f0d\u6570\r\n    uint256 public maxTms_ = 16;    //\u6700\u5927\u961f\u4f0d\u6570\r\n    uint256 public roundGap_ = 86400;    // \u6bcf\u4e24\u5c40\u6bd4\u8d5b\u7684\u95f4\u9694\uff08state\u4e3a0\u7684\u9636\u6bb5\uff09\uff1a24\u5c0f\u65f6\r\n    uint256 public killingGap_ = 86400;   // \u6dd8\u6c70\u95f4\u9694\uff08\u4e0a\u4e00\u6b21\u6dd8\u6c70\u65f6\u95f4 + \u6dd8\u6c70\u95f4\u9694 = \u4e0b\u4e00\u6b21\u6dd8\u6c70\u65f6\u95f4\uff09\uff1a24\u5c0f\u65f6\r\n    uint256 constant private registrationFee_ = 10 finney;    // \u540d\u5b57\u6ce8\u518c\u8d39\r\n\r\n    // Player\r\n    uint256 public pID_;    // \u73a9\u5bb6\u603b\u6570\r\n    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;  // (name => pID) returns player id by name\r\n    mapping (uint256 => Player) public plyr_;   // (pID => data) player data\r\n    \r\n    // Round\r\n    uint256 public rID_;    // \u5f53\u524d\u5c40ID\r\n    mapping (uint256 => Round) public round_;   // \u5c40ID => \u5c40\u6570\u636e\r\n\r\n    // Player Rounds\r\n    mapping (uint256 => mapping (uint256 => PlayerRounds)) public plyrRnds_;  // \u73a9\u5bb6ID => \u5c40ID => \u73a9\u5bb6\u5728\u8fd9\u5c40\u4e2d\u7684\u6570\u636e\r\n\r\n    // Team\r\n    mapping (uint256 => mapping (uint256 => Team)) public rndTms_;  // \u5c40ID => \u961fID => \u961f\u4f0d\u5728\u8fd9\u5c40\u4e2d\u7684\u6570\r\n    mapping (uint256 => mapping (bytes32 => uint256)) public rndTIDxName_;  // (rID => team name => tID) returns team id by name\r\n\r\n    // =============\r\n    // CONSTRUCTOR\r\n    // =============\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // =============\r\n    // MODIFIERS\r\n    // =============\r\n\r\n    // \u5408\u7ea6\u4f5c\u8005\u624d\u80fd\u64cd\u4f5c\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // \u5408\u7ea6\u662f\u5426\u5df2\u6fc0\u6d3b\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.\"); \r\n        _;\r\n    }\r\n    \r\n    // \u53ea\u63a5\u53d7\u7528\u6237\u8c03\u7528\uff0c\u4e0d\u63a5\u53d7\u5408\u7ea6\u8c03\u7528\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    // \u4ea4\u6613\u9650\u989d\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"no less than 1 Gwei\");\r\n        require(_eth <= 100000000000000000000000, \"no more than 100000 ether\");\r\n        _;\r\n    }\r\n\r\n    // =====================\r\n    // PUBLIC INTERACTION\r\n    // =====================\r\n\r\n    // \u76f4\u63a5\u6253\u5230\u5408\u7ea6\u4e2d\u7684\u94b1\u4f1a\u7531\u8fd9\u4e2a\u65b9\u6cd5\u5904\u7406\u3010\u4e0d\u63a8\u8350\uff0c\u8bf7\u52ff\u4f7f\u7528\u3011\r\n    // \u9ed8\u8ba4\u4f7f\u7528\u4e0a\u4e00\u4e2a\u9080\u8bf7\u4eba\uff0c\u4e14\u8d44\u91d1\u8fdb\u5165\u5f53\u524d\u9886\u5148\u961f\u4f0d\r\n    function()\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        buy(round_[rID_].team, \"\");\r\n    }\r\n\r\n    // \u8d2d\u4e70\r\n    // \u9080\u8bf7\u7801\u53ea\u80fd\u662f\u7528\u6237\u540d\uff0c\u4e0d\u652f\u6301\u7528\u6237ID\u6216Address\r\n    function buy(uint256 _team, bytes32 _affCode)\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        // \u786e\u4fdd\u6bd4\u8d5b\u5c1a\u672a\u7ed3\u675f\r\n        require(round_[rID_].state < 3, \"This round has ended.\");\r\n\r\n        // \u786e\u4fdd\u6bd4\u8d5b\u5df2\u7ecf\u5f00\u59cb\r\n        if (round_[rID_].state == 0){\r\n            require(now >= round_[rID_].start, \"This round hasn't started yet.\");\r\n            round_[rID_].state = 1;\r\n        }\r\n\r\n        // \u83b7\u53d6\u73a9\u5bb6ID\r\n        // \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4f1a\u521b\u5efa\u65b0\u73a9\u5bb6\u6863\u6848\r\n        determinePID(msg.sender);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        uint256 _tID;\r\n\r\n        // \u9080\u8bf7\u7801\u5904\u7406\r\n        // \u53ea\u80fd\u662f\u7528\u6237\u540d\uff0c\u4e0d\u652f\u6301\u7528\u6237ID\u6216Address\r\n        uint256 _affID;\r\n        if (_affCode == \"\" || _affCode == plyr_[_pID].name){\r\n            // \u5982\u679c\u6ca1\u6709\u9080\u8bf7\u7801\uff0c\u5219\u4f7f\u7528\u4e0a\u4e00\u4e2a\u9080\u8bf7\u7801\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // \u5982\u679c\u5b58\u5728\u9080\u8bf7\u7801\uff0c\u5219\u83b7\u53d6\u5bf9\u5e94\u7684\u73a9\u5bb6ID\r\n            _affID = pIDxName_[_affCode];\r\n            \r\n            // \u66f4\u65b0\u73a9\u5bb6\u7684\u6700\u8fd1\u9080\u8bf7\u4eba\r\n            if (_affID != plyr_[_pID].laff){\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // \u8d2d\u4e70\u5904\u7406\r\n        if (round_[rID_].state == 1){\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // \u6ee1\u8db3\u961f\u4f0d\u6570\u6761\u4ef6\u5c31\u8fdb\u5165\u6dd8\u6c70\u9636\u6bb5\uff08state: 2\uff09\r\n            if (round_[rID_].tID_ >= minTms_){\r\n                // \u8fdb\u5165\u6dd8\u6c70\u9636\u6bb5\r\n                round_[rID_].state = 2;\r\n\r\n                // \u521d\u59cb\u5316\u8bbe\u7f6e\r\n                startKilling();\r\n            }\r\n\r\n        } else if (round_[rID_].state == 2){\r\n            // \u662f\u5426\u89e6\u53d1\u7ed3\u675f\r\n            if (round_[rID_].liveTeams == 1){\r\n                // \u7ed3\u675f\r\n                endRound();\r\n                \r\n                // \u9000\u8fd8\u8d44\u91d1\u5230\u94b1\u5305\u8d26\u6237\r\n                refund(_pID, msg.value);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // Kill if needed\r\n            if (now > round_[rID_].lastKillingTime.add(killingGap_)) {\r\n                kill();\r\n            }\r\n        }\r\n    }\r\n\r\n    // \u94b1\u5305\u63d0\u5e01\r\n    function withdraw()\r\n        public\r\n        isActivated()\r\n        isHuman()\r\n    {\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // \u786e\u4fdd\u73a9\u5bb6\u5b58\u5728\r\n        require(_pID != 0, \"Please join the game first!\");\r\n\r\n        // \u63d0\u73b0\u91d1\u989d\r\n        uint256 _eth;\r\n\r\n        // \u5982\u679c\u5b58\u5728\u5df2\u7ecf\u7ed3\u675f\u7684\u8f6e\u6b21\uff0c\u8ba1\u7b97\u6211\u5c1a\u672a\u63d0\u73b0\u7684\u6536\u76ca\r\n        if (rID_ > 1){\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                // \u5982\u679c\u5c1a\u672a\u63d0\u73b0\uff0c\u5219\u63d0\u51fa\u91d1\u989d\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                    plyrRnds_[_pID][i].withdrawn = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _eth = _eth.add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n\r\n        // \u8f6c\u8d26\r\n        if (_eth > 0) {\r\n            plyr_[_pID].addr.transfer(_eth);\r\n        }\r\n\r\n        // \u6e05\u7a7a\u94b1\u5305\u4f59\u989d\r\n        plyr_[_pID].gen = 0;\r\n        plyr_[_pID].aff = 0;\r\n\r\n        // Event \u63d0\u73b0\r\n        emit onWithdraw(_pID, plyr_[_pID].addr, plyr_[_pID].name, _eth, now);\r\n    }\r\n\r\n    // \u6ce8\u518c\u73a9\u5bb6\u540d\u5b57\r\n    function registerNameXID(string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        \r\n        // set up address \r\n        address _addr = msg.sender;\r\n        \r\n        // set up our tx event data and determine if player is new or not\r\n        // bool _isNewPlayer = determinePID(_addr);\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        \r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // \u786e\u4fdd\u8fd9\u4e2a\u540d\u5b57\u8fd8\u6ca1\u6709\u4eba\u7528\r\n        require(pIDxName_[_name] == 0, \"sorry that names already taken\");\r\n        \r\n        // add name to player profile, registry, and name book\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n        \r\n        // Event\r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, msg.value, now);\r\n    }\r\n\r\n    // \u6ce8\u518c\u961f\u4f0d\u540d\u5b57\r\n    // \u53ea\u80fd\u7531\u961f\u957f\u8bbe\u7f6e\r\n    function setTeamName(uint256 _tID, string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // \u8981\u6c42team id\u5b58\u5728\r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"There's no this team.\");\r\n        \r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        // \u8981\u6c42\u5fc5\u987b\u662f\u961f\u957f\r\n        require(_pID == rndTms_[rID_][_tID].leaderID, \"Only team leader can change team name. You can invest more money to be the team leader.\");\r\n        \r\n        // \u9700\u8981\u6ce8\u518c\u8d39\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        require(rndTIDxName_[rID_][_name] == 0, \"sorry that names already taken\");\r\n        \r\n        // add name to team\r\n        rndTms_[rID_][_tID].name = _name;\r\n        rndTIDxName_[rID_][_name] = _tID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n\r\n        // event\r\n        emit onNewTeamName(_tID, _name, _pID, plyr_[_pID].name, msg.value, now);\r\n    }\r\n\r\n    // \u5411\u6e38\u620f\u94b1\u5305\u5b58\u6b3e\r\n    function deposit()\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        determinePID(msg.sender);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        plyr_[_pID].gen = (msg.value).add(plyr_[_pID].gen);\r\n    }\r\n\r\n    //==============\r\n    // GETTERS\r\n    //==============\r\n\r\n    // \u68c0\u67e5\u540d\u5b57\u53ef\u6ce8\u518c\r\n    function checkIfNameValid(string _nameStr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0)\r\n            return (true);\r\n        else \r\n            return (false);\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u8ddd\u79bb\u4e0b\u4e00\u6b21\u6dd8\u6c70\u7684\u65f6\u95f4\r\n    function getNextKillingAfter()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(round_[rID_].state == 2, \"Not in killing period.\");\r\n\r\n        uint256 _tNext = round_[rID_].lastKillingTime.add(killingGap_);\r\n        uint256 _t = _tNext > now ? _tNext.sub(now) : 0;\r\n\r\n        return _t;\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u5355\u4e2a\u73a9\u5bb6\u672c\u8f6e\u4fe1\u606f (\u524d\u7aef\u67e5\u8be2\u7528\u6237\u94b1\u5305\u4e5f\u662f\u8fd9\u4e2a\u65b9\u6cd5)\r\n    // \u8fd4\u56de\uff1a\u73a9\u5bb6ID\uff0c\u5730\u5740\uff0c\u540d\u5b57\uff0cgen\uff0caff\uff0c\u672c\u8f6e\u6295\u8d44\u989d\uff0c\u672c\u8f6e\u9884\u8ba1\u6536\u76ca\uff0c\u672a\u63d0\u73b0\u6536\u76ca\r\n    function getPlayerInfoByAddress(address _addr)\r\n        public \r\n        view \r\n        returns(uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return (\r\n            _pID,\r\n            _addr,\r\n            plyr_[_pID].name,\r\n            plyr_[_pID].gen,\r\n            plyr_[_pID].aff,\r\n            plyrRnds_[_pID][rID_].eth,\r\n            getProfit(_pID),\r\n            getPreviousProfit(_pID)\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2: \u73a9\u5bb6\u5728\u67d0\u8f6e\u5bf9\u67d0\u961f\u7684\u6295\u8d44\uff08_roundID = 0 \u8868\u793a\u5f53\u524d\u8f6e\uff09\r\n    // \u8fd4\u56de keys\r\n    function getPlayerRoundTeamBought(uint256 _pID, uint256 _roundID, uint256 _tID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n        return plyrRnds_[_pID][_rID].plyrTmKeys[_tID];\r\n    }\r\n\r\n    // \u67e5\u8be2: \u73a9\u5bb6\u5728\u67d0\u8f6e\u7684\u5168\u90e8\u6295\u8d44\uff08_roundID = 0 \u8868\u793a\u5f53\u524d\u8f6e\uff09\r\n    // \u8fd4\u56de keysList\u6570\u7ec4 (keysList[i]\u8868\u793a\u7528\u6237\u5728i+1\u961f\u7684\u4efd\u989d)\r\n    function getPlayerRoundBought(uint256 _pID, uint256 _roundID)\r\n        public\r\n        view\r\n        returns (uint256[])\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n\r\n        // \u8be5\u8f6e\u961f\u4f0d\u603b\u6570\r\n        uint256 _tCount = round_[_rID].tID_;\r\n\r\n        // \u73a9\u5bb6\u5728\u5404\u961f\u7684keys\r\n        uint256[] memory keysList = new uint256[](_tCount);\r\n\r\n        // \u751f\u6210\u6570\u7ec4\r\n        for (uint i = 0; i < _tCount; i++) {\r\n            keysList[i] = plyrRnds_[_pID][_rID].plyrTmKeys[i+1];\r\n        }\r\n\r\n        return keysList;\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u73a9\u5bb6\u5728\u5404\u8f6e\u7684\u6210\u7ee9\uff08\u5305\u542b\u672c\u8d5b\u5b63\uff0c\u4f46\u662f\u6536\u76ca\u4e3a0\uff09\r\n    // \u8fd4\u56de {ethList, winList}  (ethList[i]\u8868\u793a\u7b2ci+1\u4e2a\u8d5b\u5b63\u7684\u6295\u8d44)\r\n    function getPlayerRounds(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256[], uint256[])\r\n    {\r\n        uint256[] memory _ethList = new uint256[](rID_);\r\n        uint256[] memory _winList = new uint256[](rID_);\r\n        for (uint i=0; i < rID_; i++){\r\n            _ethList[i] = plyrRnds_[_pID][i+1].eth;\r\n            _winList[i] = plyrRnds_[_pID][i+1].plyrTmKeys[round_[i+1].team].mul(round_[i+1].ethPerKey) / 1000000000000000000;\r\n        }\r\n\r\n        return (\r\n            _ethList,\r\n            _winList\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u4e0a\u4e00\u5c40\u4fe1\u606f\r\n    // \u8fd4\u56de\uff1a\u5c40ID\uff0c\u72b6\u6001\uff0c\u5956\u6c60\u91d1\u989d\uff0c\u83b7\u80dc\u961f\u4f0dID\uff0c\u961f\u4f0d\u540d\u5b57\uff0c\u961f\u4f0d\u4eba\u6570\uff0c\u603b\u961f\u4f0d\u6570\r\n    // \u5982\u679c\u4e0d\u5b58\u5728\u4e0a\u4e00\u5c40\uff0c\u4f1a\u8fd4\u56de\u4e00\u58060\r\n    function getLastRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, bytes32, uint256, uint256)\r\n    {\r\n        // last round id\r\n        uint256 _rID = rID_.sub(1);\r\n\r\n        // last winner\r\n        uint256 _tID = round_[_rID].team;\r\n\r\n        return (\r\n            _rID,\r\n            round_[_rID].state,\r\n            round_[_rID].pot,\r\n            _tID,\r\n            rndTms_[_rID][_tID].name,\r\n            rndTms_[_rID][_tID].playersCount,\r\n            round_[_rID].tID_\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u672c\u5c40\u6bd4\u8d5b\u4fe1\u606f\r\n    function getCurrentRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            rID_,\r\n            round_[rID_].state,\r\n            round_[rID_].eth,\r\n            round_[rID_].pot,\r\n            round_[rID_].keys,\r\n            round_[rID_].team,\r\n            round_[rID_].ethPerKey,\r\n            round_[rID_].lastKillingTime,\r\n            killingGap_,\r\n            round_[rID_].deadRate,\r\n            round_[rID_].deadKeys,\r\n            round_[rID_].liveTeams,\r\n            round_[rID_].tID_,\r\n            round_[rID_].start\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u67d0\u652f\u961f\u4f0d\u4fe1\u606f\r\n    // \u8fd4\u56de\uff1a\u57fa\u672c\u4fe1\u606f\uff0c\u961f\u4f0d\u6210\u5458\uff0c\u53ca\u5176\u6295\u8d44\u91d1\u989d\r\n    function getTeamInfoByID(uint256 _tID) \r\n        public\r\n        view\r\n        returns (uint256, bytes32, uint256, uint256, uint256, uint256, bool)\r\n    {\r\n        require(_tID <= round_[rID_].tID_, \"There's no this team.\");\r\n        \r\n        return (\r\n            rndTms_[rID_][_tID].id,\r\n            rndTms_[rID_][_tID].name,\r\n            rndTms_[rID_][_tID].keys,\r\n            rndTms_[rID_][_tID].eth,\r\n            rndTms_[rID_][_tID].price,\r\n            rndTms_[rID_][_tID].leaderID,\r\n            rndTms_[rID_][_tID].dead\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u6240\u6709\u961f\u4f0d\u7684\u4fe1\u606f\r\n    // \u8fd4\u56de\uff1aid[], name[], keys[], eth[], price[], playersCount[], dead[]\r\n    function getTeamsInfo()\r\n        public\r\n        view\r\n        returns (uint256[], bytes32[], uint256[], uint256[], uint256[], uint256[], bool[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Lists of Team Info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        bytes32[] memory _nameList = new bytes32[](_tID);\r\n        uint256[] memory _keysList = new uint256[](_tID);\r\n        uint256[] memory _ethList = new uint256[](_tID);\r\n        uint256[] memory _priceList = new uint256[](_tID);\r\n        uint256[] memory _membersList = new uint256[](_tID);\r\n        bool[] memory _deadList = new bool[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _nameList[i] = rndTms_[rID_][i+1].name;\r\n            _keysList[i] = rndTms_[rID_][i+1].keys;\r\n            _ethList[i] = rndTms_[rID_][i+1].eth;\r\n            _priceList[i] = rndTms_[rID_][i+1].price;\r\n            _membersList[i] = rndTms_[rID_][i+1].playersCount;\r\n            _deadList[i] = rndTms_[rID_][i+1].dead;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _nameList,\r\n            _keysList,\r\n            _ethList,\r\n            _priceList,\r\n            _membersList,\r\n            _deadList\r\n        );\r\n    }\r\n\r\n    // \u83b7\u53d6\u6bcf\u4e2a\u961f\u4f0d\u4e2d\u7684\u961f\u957f\u4fe1\u606f\r\n    // \u8fd4\u56de\uff1aleaderID[], leaderName[], leaderAddr[]\r\n    function getTeamLeaders()\r\n        public\r\n        view\r\n        returns (uint256[], uint256[], bytes32[], address[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Teams' leaders info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        uint256[] memory _leaderIDList = new uint256[](_tID);\r\n        bytes32[] memory _leaderNameList = new bytes32[](_tID);\r\n        address[] memory _leaderAddrList = new address[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _leaderIDList[i] = rndTms_[rID_][i+1].leaderID;\r\n            _leaderNameList[i] = plyr_[_leaderIDList[i]].name;\r\n            _leaderAddrList[i] = rndTms_[rID_][i+1].leaderAddr;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _leaderIDList,\r\n            _leaderNameList,\r\n            _leaderAddrList\r\n        );\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u9884\u6d4b\u672c\u5c40\u7684\u6536\u76ca\uff08\u5047\u5b9a\u76ee\u524d\u9886\u5148\u7684\u961f\u4f0d\u8d62\uff09\r\n    // \u8fd4\u56de\uff1aeth\r\n    function getProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // \u9886\u5148\u961f\u4f0dID\r\n        uint256 _tID = round_[rID_].team;\r\n\r\n        // \u5982\u679c\u7528\u6237\u4e0d\u6301\u6709\u9886\u5148\u961f\u4f0d\u80a1\u4efd\uff0c\u5219\u8fd4\u56de0\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            return 0;\r\n        }\r\n\r\n        // \u6211\u6295\u8d44\u83b7\u80dc\u7684\u961f\u4f0dKeys\r\n        uint256 _keys = plyrRnds_[_pID][rID_].plyrTmKeys[_tID];\r\n        \r\n        // \u8ba1\u7b97\u6bcf\u628aKey\u7684\u4ef7\u503c\r\n        uint256 _ethPerKey = round_[rID_].pot.mul(1000000000000000000) / rndTms_[rID_][_tID].keys;\r\n        \r\n        // \u6211\u7684Keys\u5bf9\u5e94\u7684\u603b\u4ef7\u503c\r\n        uint256 _value = _keys.mul(_ethPerKey) / 1000000000000000000;\r\n\r\n        return _value;\r\n    }\r\n\r\n    // \u67e5\u8be2\uff1a\u6b64\u524d\u8f6e\u5c1a\u672a\u63d0\u73b0\u7684\u6536\u76ca\r\n    function getPreviousProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _eth;\r\n\r\n        if (rID_ > 1){\r\n            // \u8ba1\u7b97\u6211\u5df2\u7ed3\u675f\u7684\u6bcf\u8f6e\u4e2d\uff0c\u5c1a\u672a\u63d0\u73b0\u7684\u6536\u76ca\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // \u5982\u679c\u8fd8\u6ca1\u6709\u5df2\u7ed3\u675f\u7684\u8f6e\u6b21\uff0c\u5219\u8fd4\u56de0\r\n            _eth = 0;\r\n        }\r\n\r\n        // \u8fd4\u56de\r\n        return _eth;\r\n    }\r\n\r\n    // \u4e0b\u4e00\u4e2a\u5b8c\u6574Key\u7684\u4ef7\u683c\r\n    function getNextKeyPrice(uint256 _tID)\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {  \r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"No this team.\");\r\n\r\n        return ( (rndTms_[rID_][_tID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n    }\r\n\r\n    // \u8d2d\u4e70\u67d0\u961fX\u6570\u91cfKeys\uff0c\u9700\u8981\u591a\u5c11Eth\uff1f\r\n    function getEthFromKeys(uint256 _tID, uint256 _keys)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // \u5982\u679c_tID\u5b58\u5728\uff0c\u5219\u6b63\u5e38\u8ba1\u7b97\r\n            return ((rndTms_[rID_][_tID].keys.add(_keys)).ethRec(_keys));\r\n        } else {\r\n            // \u5982\u679c_tID\u4e0d\u5b58\u5728\uff0c\u5219\u8ba4\u4e3a\u662f\u65b0\u961f\u4f0d\r\n            return ((uint256(0).add(_keys)).ethRec(_keys));\r\n        }\r\n    }\r\n\r\n    // X\u6570\u91cfEth\uff0c\u53ef\u4ee5\u4e70\u5230\u67d0\u961f\u591a\u5c11keys\uff1f\r\n    function getKeysFromEth(uint256 _tID, uint256 _eth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // \u5982\u679c_tID\u5b58\u5728\uff0c\u5219\u6b63\u5e38\u8ba1\u7b97\r\n            return (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n        } else {\r\n            // \u5982\u679c_tID\u4e0d\u5b58\u5728\uff0c\u5219\u8ba4\u4e3a\u662f\u65b0\u961f\u4f0d\r\n            return (uint256(0).keysRec(_eth));\r\n        }\r\n    }\r\n\r\n    // ==========================\r\n    //   PRIVATE: CORE GAME LOGIC\r\n    // ==========================\r\n\r\n    // \u6838\u5fc3\u8d2d\u4e70\u65b9\u6cd5\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _tID, uint256 _eth)\r\n        private\r\n    {\r\n        uint256 _keys = (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n\r\n        // \u66f4\u65b0Player\u3001Team\u3001Round\u6570\u636e\r\n        // player\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            rndTms_[rID_][_tID].playersCount++;\r\n        }\r\n        plyrRnds_[_pID][rID_].plyrTmKeys[_tID] = _keys.add(plyrRnds_[_pID][rID_].plyrTmKeys[_tID]);\r\n        plyrRnds_[_pID][rID_].eth = _eth.add(plyrRnds_[_pID][rID_].eth);\r\n\r\n        // Team\r\n        rndTms_[rID_][_tID].keys = _keys.add(rndTms_[rID_][_tID].keys);\r\n        rndTms_[rID_][_tID].eth = _eth.add(rndTms_[rID_][_tID].eth);\r\n        rndTms_[rID_][_tID].price = _eth.mul(1000000000000000000) / _keys;\r\n        uint256 _teamLeaderID = rndTms_[rID_][_tID].leaderID;\r\n        // refresh team leader\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] > plyrRnds_[_teamLeaderID][rID_].plyrTmKeys[_tID]){\r\n            rndTms_[rID_][_tID].leaderID = _pID;\r\n            rndTms_[rID_][_tID].leaderAddr = msg.sender;\r\n        }\r\n\r\n        // Round\r\n        round_[rID_].keys = _keys.add(round_[rID_].keys);\r\n        round_[rID_].eth = _eth.add(round_[rID_].eth);\r\n        // refresh round leader\r\n        if (rndTms_[rID_][_tID].keys > rndTms_[rID_][round_[rID_].team].keys){\r\n            round_[rID_].team = _tID;\r\n        }\r\n\r\n        // \u8d44\u91d1\u5206\u914d\r\n        distribute(rID_, _pID, _eth, _affID);\r\n\r\n        // Event\r\n        emit onTx(_pID, msg.sender, plyr_[_pID].name, _tID, rndTms_[rID_][_tID].name, _eth, _keys);\r\n    }\r\n\r\n    // \u8d44\u91d1\u5206\u914d\r\n    function distribute(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\r\n        private\r\n    {\r\n        // [1] com - 3%\r\n        uint256 _com = (_eth.mul(3)) / 100;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // [2] aff - 10%\r\n        uint256 _aff = _eth / 10;\r\n\r\n        if (_affID != _pID && plyr_[_affID].name != \"\") {\r\n            // pay aff\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n            \r\n            // Event \u9080\u8bf7\u5956\u52b1\r\n            emit onAffPayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            // \u5982\u679c\u6ca1\u6709\u9080\u8bf7\u4eba\uff0c\u5219\u8fd9\u90e8\u5206\u8d44\u91d1\u5e76\u5165\u6700\u7ec8\u5956\u6c60\r\n            // \u5b83\u5e76\u4e0d\u4f1a\u5f71\u54cd\u73a9\u5bb6\u4e70\u5230\u7684Keys\u6570\u91cf\uff0c\u53ea\u4f1a\u589e\u52a0\u6700\u7ec8\u5956\u6c60\u7684\u91d1\u989d\r\n            _aff = 0;\r\n        }\r\n\r\n        // [3] pot - 87%\r\n        uint256 _pot = _eth.sub(_aff).sub(_com);\r\n\r\n        // \u66f4\u65b0\u672c\u5c40\u5956\u6c60\r\n        round_[_rID].pot = _pot.add(round_[_rID].pot);\r\n    }\r\n\r\n    // \u7ed3\u675f\u6d41\u7a0b\uff08\u53ea\u80fd\u6267\u884c\u4e00\u6b21\uff09\r\n    function endRound()\r\n        private\r\n    {\r\n        require(round_[rID_].state < 3, \"Round only end once.\");\r\n        \r\n        // \u672c\u8f6e\u72b6\u6001\u66f4\u65b0\r\n        round_[rID_].state = 3;\r\n\r\n        // \u5956\u6c60\u91d1\u989d\r\n        uint256 _pot = round_[rID_].pot;\r\n\r\n        // Devide Round Pot\r\n        // [1] winner 77%\r\n        uint256 _win = (_pot.mul(77))/100;\r\n\r\n        // [2] com 3%\r\n        uint256 _com = (_pot.mul(3))/100;\r\n\r\n        // [3] next round 20%\r\n        uint256 _res = (_pot.sub(_win)).sub(_com);\r\n\r\n        // \u83b7\u80dc\u961f\u4f0d\r\n        uint256 _tID = round_[rID_].team;\r\n        // \u8ba1\u7b97ethPerKey (\u6bcf\u4e2a\u5b8c\u6574\u7684key\u5bf9\u5e94\u591a\u5c11\u4e2awei, A Full Key = 10**18 keys)\r\n        uint256 _epk = (_win.mul(1000000000000000000)) / (rndTms_[rID_][_tID].keys);\r\n\r\n        // \u8003\u8651dust\r\n        uint256 _dust = _win.sub((_epk.mul(rndTms_[rID_][_tID].keys)) / 1000000000000000000);\r\n        if (_dust > 0) {\r\n            _win = _win.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        // pay winner team\r\n        round_[rID_].ethPerKey = _epk;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // Event\r\n        emit onEndRound(_tID, rndTms_[rID_][_tID].name, rndTms_[rID_][_tID].playersCount, _pot);\r\n\r\n        // \u8fdb\u5165\u4e0b\u4e00\u5c40\r\n        rID_++;\r\n        round_[rID_].pot = _res;\r\n        round_[rID_].start = now + roundGap_;\r\n    }\r\n    \r\n    // \u9000\u6b3e\u5230\u94b1\u5305\u8d26\u6237\r\n    function refund(uint256 _pID, uint256 _value)\r\n        private\r\n    {\r\n        plyr_[_pID].gen = _value.add(plyr_[_pID].gen);\r\n    }\r\n\r\n    // \u521b\u5efa\u961f\u4f0d\r\n    // \u8fd4\u56de \u961f\u4f0dID\r\n    function createTeam(uint256 _pID, uint256 _eth)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // \u5355\u5c40\u961f\u4f0d\u603b\u6570\u4e0d\u80fd\u591a\u4e8emaxTms_\r\n        require(round_[rID_].tID_ < maxTms_, \"The number of teams has reached the maximum limit.\");\r\n\r\n        // \u521b\u5efa\u961f\u4f0d\u81f3\u5c11\u9700\u8981\u6295\u8d441eth\r\n        require(_eth >= 1000000000000000000, \"You need at least 1 eth to create a team, though creating a new team is free.\");\r\n\r\n        // \u672c\u5c40\u961f\u4f0d\u6570\u548c\u5b58\u6d3b\u961f\u4f0d\u6570\u589e\u52a0\r\n        round_[rID_].tID_++;\r\n        round_[rID_].liveTeams++;\r\n        \r\n        // \u65b0\u961f\u4f0dID\r\n        uint256 _tID = round_[rID_].tID_;\r\n        \r\n        // \u65b0\u961f\u4f0d\u6570\u636e\r\n        rndTms_[rID_][_tID].id = _tID;\r\n        rndTms_[rID_][_tID].leaderID = _pID;\r\n        rndTms_[rID_][_tID].leaderAddr = plyr_[_pID].addr;\r\n        rndTms_[rID_][_tID].dead = false;\r\n\r\n        return _tID;\r\n    }\r\n\r\n    // \u521d\u59cb\u5316\u5404\u9879\u6740\u622e\u53c2\u6570\r\n    function startKilling()\r\n        private\r\n    {   \r\n        // \u521d\u59cb\u56de\u5408\u7684\u57fa\u672c\u53c2\u6570\r\n        round_[rID_].lastKillingTime = now;\r\n        round_[rID_].deadRate = 10;     // \u767e\u5206\u6bd4\uff0c\u6309\u7167 deadRate / 100 \u6765\u4f7f\u7528\r\n        round_[rID_].deadKeys = (rndTms_[rID_][round_[rID_].team].keys.mul(round_[rID_].deadRate)) / 100;\r\n    }\r\n\r\n    // \u6740\u622e\u6dd8\u6c70\r\n    function kill()\r\n        private\r\n    {\r\n        // \u672c\u56de\u5408\u6b7b\u4ea1\u961f\u4f0d\u6570\r\n        uint256 _dead = 0;\r\n\r\n        // \u5c11\u4e8e\u6dd8\u6c70\u7ebf\u7684\u961f\u4f0d\u6dd8\u6c70\r\n        for (uint256 i = 1; i <= round_[rID_].tID_; i++) {\r\n            if (rndTms_[rID_][i].keys < round_[rID_].deadKeys && rndTms_[rID_][i].dead == false){\r\n                rndTms_[rID_][i].dead = true;\r\n                round_[rID_].liveTeams--;\r\n                _dead++;\r\n            }\r\n        }\r\n\r\n        round_[rID_].lastKillingTime = now;\r\n\r\n        // \u5982\u679c\u53ea\u5269\u4e00\u652f\u961f\u4f0d\uff0c\u5219\u542f\u52a8\u7ed3\u675f\u7a0b\u5e8f\r\n        if (round_[rID_].liveTeams == 1 && round_[rID_].state == 2) {\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        // \u66f4\u65b0\u6dd8\u6c70\u6bd4\u7387\uff08\u5982\u679c\u53c2\u6570\u4fee\u6539\u4e86\uff0c\u8981\u6ce8\u610f\u6b64\u5904\u5224\u65ad\u6761\u4ef6\uff09\r\n        if (round_[rID_].deadRate < 90) {\r\n            round_[rID_].deadRate = round_[rID_].deadRate + 10;\r\n        }\r\n\r\n        // \u66f4\u65b0\u4e0b\u4e00\u56de\u5408\u6dd8\u6c70\u7ebf\r\n        round_[rID_].deadKeys = ((rndTms_[rID_][round_[rID_].team].keys).mul(round_[rID_].deadRate)) / 100;\r\n\r\n        // event\r\n        emit onKill(_dead, round_[rID_].liveTeams, round_[rID_].deadKeys);\r\n    }\r\n\r\n    // \u901a\u8fc7\u5730\u5740\u67e5\u8be2\u73a9\u5bb6ID\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u521b\u5efa\u65b0\u73a9\u5bb6\r\n    // \u8fd4\u56de\uff1a\u662f\u5426\u4e3a\u65b0\u73a9\u5bb6\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n            \r\n            return (true);  // \u65b0\u73a9\u5bb6\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    // \u961f\u4f0d\u7f16\u53f7\u68c0\u67e5\uff0c\u8fd4\u56de\u7f16\u53f7\uff08\u4ec5\u5728\u5f53\u524d\u5c40\u4f7f\u7528\uff09\r\n    function determinTID(uint256 _team, uint256 _pID)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // \u786e\u4fdd\u961f\u4f0d\u5c1a\u672a\u6dd8\u6c70\r\n        require(rndTms_[rID_][_team].dead == false, \"You can not buy a dead team!\");\r\n        \r\n        if (_team <= round_[rID_].tID_ && _team > 0) {\r\n            // \u5982\u679c\u961f\u4f0d\u5df2\u5b58\u5728\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\r\n            return _team;\r\n        } else {\r\n            // \u5982\u679c\u961f\u4f0d\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u961f\u4f0d\r\n            return createTeam(_pID, msg.value);\r\n        }\r\n    }\r\n\r\n    //==============\r\n    // SECURITY\r\n    //============== \r\n\r\n    // \u90e8\u7f72\u5b8c\u5408\u7ea6\u7b2c\u4e00\u8f6e\u6e38\u620f\u9700\u8981\u6211\u6765\u6fc0\u6d3b\u6574\u4e2a\u6e38\u620f\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n        onlyOwner()\r\n    {   \r\n        // can only be ran once\r\n        require(activated_ == false, \"it is already activated\");\r\n        \r\n        // activate the contract \r\n        activated_ = true;\r\n\r\n        // the first player\r\n        plyr_[1].addr = owner;\r\n        plyr_[1].name = \"joker\";\r\n        pIDxAddr_[owner] = 1;\r\n        pIDxName_[\"joker\"] = 1;\r\n        pID_ = 1;\r\n        \r\n        // \u6fc0\u6d3b\u7b2c\u4e00\u5c40.\r\n        rID_ = 1;\r\n        round_[1].start = now;\r\n        round_[1].state = 1;\r\n    }\r\n\r\n    //============================\r\n    // SETTINGS (Only owner)\r\n    //============================\r\n\r\n    // \u8bbe\u7f6e\u6700\u5c0f\u961f\u4f0d\u6570\r\n    function setMinTms(uint256 _tms)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        minTms_ = _tms;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u6700\u5927\u961f\u4f0d\u6570\r\n    function setMaxTms(uint256 _tms)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        maxTms_ = _tms;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u4e24\u4e2a\u8d5b\u5b63\u7684\u95f4\u9694\r\n    function setRoundGap(uint256 _gap)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        roundGap_ = _gap;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u4e24\u8f6e\u6dd8\u6c70\u7684\u95f4\u9694\r\n    function setKillingGap(uint256 _gap)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        killingGap_ = _gap;\r\n    }\r\n\r\n}   // main contract ends here\r\n\r\n\r\n// Keys\u4ef7\u683c\u76f8\u5173\u8ba1\u7b97\r\nlibrary WoeKeysCalc {\r\n    using SafeMath for *;\r\n\r\n    // \u6839\u636e\u73b0\u6709ETH\uff0c\u8ba1\u7b97\u65b0\u5165X\u4e2aETH\u80fd\u8d2d\u4e70\u7684Keys\u6570\u91cf\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n    \r\n    // \u6839\u636e\u5f53\u524dKeys\u6570\u91cf\uff0c\u8ba1\u7b97\u5356\u51faX\u6570\u91cf\u7684keys\u503c\u591a\u5c11ETH\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    // \u6839\u636e\u6c60\u4e2dETH\u6570\u91cf\u8ba1\u7b97\u5bf9\u5e94\u7684Keys\u6570\u91cf\r\n    function keys(uint256 _eth) \r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000000);\r\n    }\r\n    \r\n    // \u6839\u636eKeys\u6570\u91cf\uff0c\u8ba1\u7b97\u6c60\u4e2dETH\u7684\u6570\u91cf\r\n    function eth(uint256 _keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return ((78125000000000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundGap_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gap\",\"type\":\"uint256\"}],\"name\":\"setRoundGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gap\",\"type\":\"uint256\"}],\"name\":\"setKillingGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"ethPerKey\",\"type\":\"uint256\"},{\"name\":\"lastKillingTime\",\"type\":\"uint256\"},{\"name\":\"deadRate\",\"type\":\"uint256\"},{\"name\":\"deadKeys\",\"type\":\"uint256\"},{\"name\":\"liveTeams\",\"type\":\"uint256\"},{\"name\":\"tID_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tms\",\"type\":\"uint256\"}],\"name\":\"setMaxTms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"getEthFromKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextKillingAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getNextKeyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTms_\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"},{\"name\":\"leaderID\",\"type\":\"uint256\"},{\"name\":\"leaderAddr\",\"type\":\"address\"},{\"name\":\"dead\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killingGap_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rndTIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"getKeysFromEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundTeamBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tms\",\"type\":\"uint256\"}],\"name\":\"setMinTms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTms_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPreviousProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"setTeamName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTms_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getTeamInfoByID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewTeamName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"}],\"name\":\"onTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deadCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"liveCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadKeys\",\"type\":\"uint256\"}],\"name\":\"onKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerTID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerTName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"onEndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]", "ContractName": "WarOfEth", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4e2ba4e3ef3231ee910940fd8e65b6a86525fab50a00710ed7543ea8ef6abe83"}]}