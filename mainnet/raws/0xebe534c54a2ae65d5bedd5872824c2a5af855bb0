{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor() internal {}\\r\\n\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Dparam.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c=0.7.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IDparam.sol\\\";\\r\\nimport \\\"./WhiteList.sol\\\";\\r\\n\\r\\ncontract Dparam is Owned, WhiteList, IDparam {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Subscription ratio token -\\u003e coin\\r\\n    uint256 public stakeRate = 166;\\r\\n    /// @notice The collateral rate of liquidation\\r\\n    uint256 public liquidationLine = 110;\\r\\n    /// @notice Redemption rate 0.3%\\r\\n    uint256 public feeRate = 3;\\r\\n\\r\\n    /// @notice Minimum number of COINS for the first time\\r\\n    uint256 public minMint = 0 * ONE;\\r\\n    uint256 constant ONE = 1e18;\\r\\n\\r\\n    /// @notice Reset fee event\\r\\n    event FeeRateEvent(uint256 feeRate);\\r\\n    /// @notice Reset liquidationLine event\\r\\n    event LiquidationLineEvent(uint256 liquidationRate);\\r\\n    /// @notice Reset minMint event\\r\\n    event MinMintEvent(uint256 minMint);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new Dparam, owner by msg.sender\\r\\n     */\\r\\n    constructor() public Owned(msg.sender) {}\\r\\n\\r\\n    /**\\r\\n     * @notice Reset feeRate\\r\\n     * @param _feeRate New number of feeRate\\r\\n     */\\r\\n    function setFeeRate(uint256 _feeRate) external onlyWhiter {\\r\\n        feeRate = _feeRate;\\r\\n        emit FeeRateEvent(feeRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset liquidationLine\\r\\n     * @param _liquidationLine New number of liquidationLine\\r\\n     */\\r\\n    function setLiquidationLine(uint256 _liquidationLine) external onlyWhiter {\\r\\n        liquidationLine = _liquidationLine;\\r\\n        emit LiquidationLineEvent(liquidationLine);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset minMint\\r\\n     * @param _minMint New number of minMint\\r\\n     */\\r\\n    function setMinMint(uint256 _minMint) external onlyWhiter {\\r\\n        minMint = _minMint;\\r\\n        emit MinMintEvent(minMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check Is it below the clearing line\\r\\n     * @param price The token/usdt price\\r\\n     * @return Whether the clearing line has been no exceeded\\r\\n     */\\r\\n    function isLiquidation(uint256 price) external view returns (bool) {\\r\\n        return price.mul(stakeRate).mul(100) \\u003c= liquidationLine.mul(1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine if the exchange value at the current rate is less than $7\\r\\n     * @param price The token/usdt price\\r\\n     * @return The value of Checking\\r\\n     */\\r\\n    function isNormal(uint256 price) external view returns (bool) {\\r\\n        return price.mul(stakeRate) \\u003e= 1.32e18;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20Mintable}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(\\r\\n            account,\\r\\n            _msgSender(),\\r\\n            _allowances[account][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: burn amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the ERC20 standard.\\r\\n */\\r\\ncontract ERC20Detailed is IERC20 {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n     * these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals\\r\\n    ) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\"},\"Esm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c=0.7.0;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./WhiteList.sol\\\";\\r\\n\\r\\ninterface ITokenStake {\\r\\n    function updateIndex() external;\\r\\n}\\r\\n\\r\\ncontract Esm is Owned, WhiteList {\\r\\n    /// @notice Access stake pause\\r\\n    uint256 public stakeLive = 1;\\r\\n    /// @notice Access redeem pause\\r\\n    uint256 public redeemLive = 1;\\r\\n    /// @notice System closed time\\r\\n    uint256 public time;\\r\\n    /// @notice TokenStake for updating on closed\\r\\n    ITokenStake public tokenStake;\\r\\n\\r\\n    /// @notice System closed yet event\\r\\n    event ShutDown(uint256 blocknumber, uint256 time);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new Esm\\r\\n     */\\r\\n    constructor() public Owned(msg.sender) {}\\r\\n\\r\\n    /**\\r\\n     * @notice Set with tokenStake\\r\\n     * @param _tokenStake Address of tokenStake\\r\\n     */\\r\\n    function setupTokenStake(address _tokenStake) public onlyWhiter {\\r\\n        tokenStake = ITokenStake(_tokenStake);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Open stake, if stake pasued\\r\\n     */\\r\\n    function openStake() external onlyWhiter {\\r\\n        stakeLive = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Paused stake, if stake opened\\r\\n     */\\r\\n    function pauseStake() external onlyWhiter {\\r\\n        stakeLive = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Open redeem, if redeem paused\\r\\n     */\\r\\n    function openRedeem() external onlyWhiter {\\r\\n        redeemLive = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pause redeem, if redeem opened\\r\\n     */\\r\\n    function pauseRedeem() external onlyWhiter {\\r\\n        redeemLive = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Status of staking\\r\\n     */\\r\\n    function isStakePaused() external view returns (bool) {\\r\\n        return stakeLive == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Status of redeem\\r\\n     */\\r\\n    function isRedeemPaused() external view returns (bool) {\\r\\n        return redeemLive == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Status of closing-sys\\r\\n     */\\r\\n    function isClosed() external view returns (bool) {\\r\\n        return time \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice If anything error, project manager can shutdown it\\r\\n     *         anybody cant stake, but can redeem\\r\\n     */\\r\\n    function shutdown() external onlyWhiter {\\r\\n        require(time == 0, \\\"System closed yet.\\\");\\r\\n        tokenStake.updateIndex();\\r\\n        time = block.timestamp;\\r\\n        emit ShutDown(block.number, time);\\r\\n    }\\r\\n}\\r\\n\"},\"IDparam.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\ninterface IDparam {\\r\\n    event FeeRateEvent(uint256 feeRate);\\r\\n    event LiquidationLineEvent(uint256 liquidationRate);\\r\\n    event MinMintEvent(uint256 minMint);\\r\\n\\r\\n    function stakeRate() external view returns (uint256);\\r\\n\\r\\n    function liquidationLine() external view returns (uint256);\\r\\n\\r\\n    function feeRate() external view returns (uint256);\\r\\n\\r\\n    function minMint() external view returns (uint256);\\r\\n\\r\\n    function setFeeRate(uint256 _feeRate) external;\\r\\n\\r\\n    function setLiquidationLine(uint256 _liquidationLine) external;\\r\\n\\r\\n    function setMinMint(uint256 _minMint) external;\\r\\n\\r\\n    function isLiquidation(uint256 price) external view returns (bool);\\r\\n\\r\\n    function isNormal(uint256 price) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"Math.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\r\\n    }\\r\\n}\\r\\n\"},\"Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./WhiteList.sol\\\";\\r\\n\\r\\ninterface IParams {\\r\\n    function isLiquidation(uint256 price) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IEsm {\\r\\n    function shutdown() external;\\r\\n\\r\\n    function isClosed() external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract Oracle is Owned, WhiteList {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Token-usdt price\\r\\n    uint256 public val;\\r\\n    /// @notice Price update date(s)\\r\\n    uint256 public time;\\r\\n\\r\\n    /// @notice Oracle Name\\r\\n    bytes32 name;\\r\\n\\r\\n    /// @notice Oracle update success event\\r\\n    event OracleUpdate(uint256 val, uint256 time);\\r\\n\\r\\n    /// @notice Dparam address\\r\\n    IParams params;\\r\\n\\r\\n    /// @notice Esm address\\r\\n    IEsm esm;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new Oracle\\r\\n     * @param _params Dynamic parameter contract address\\r\\n     * @param _esm Esm parameter contract address\\r\\n     */\\r\\n    constructor(address _params, address _esm) public Owned(msg.sender) {\\r\\n        params = IParams(_params);\\r\\n        esm = IEsm(_esm);\\r\\n        name = \\\"STPT-USTP\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Chain-off push price to chain-on\\r\\n     * @param price Token-usdt price decimals is same as token\\r\\n     */\\r\\n    function poke(uint256 price) public onlyWhiter {\\r\\n        require(!esm.isClosed(), \\\"System closed yet.\\\");\\r\\n\\r\\n        val = price;\\r\\n        time = block.timestamp;\\r\\n\\r\\n        if (params.isLiquidation(price)) {\\r\\n            esm.shutdown();\\r\\n        } else {\\r\\n            emit OracleUpdate(val, time);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Anybody can read the oracle price\\r\\n     */\\r\\n    function peek() public view returns (uint256) {\\r\\n        return val;\\r\\n    }\\r\\n}\\r\\n\"},\"Owned.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/Owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor(address _owner) public {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(\\r\\n            msg.sender == nominatedOwner,\\r\\n            \\\"You must be nominated before you can accept ownership\\\"\\r\\n        );\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(\\r\\n            msg.sender == owner,\\r\\n            \\\"Only the contract owner may perform this action\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\n// https://docs.synthetix.io/contracts/Pausable\\r\\ncontract Pausable is Owned {\\r\\n    uint256 public lastPauseTime;\\r\\n    bool public paused;\\r\\n\\r\\n    constructor() internal {\\r\\n        // This contract is abstract, and thus cannot be instantiated directly\\r\\n        require(owner != address(0), \\\"Owner must be set\\\");\\r\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the paused state of the contract\\r\\n     * @dev Only the contract owner may call this.\\r\\n     */\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        // Ensure we\\u0027re actually changing the state before we do anything\\r\\n        if (_paused == paused) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Set our paused state.\\r\\n        paused = _paused;\\r\\n\\r\\n        // If applicable, set the last pause time.\\r\\n        if (paused) {\\r\\n            lastPauseTime = now;\\r\\n        }\\r\\n\\r\\n        // Let everyone know that our pause state has changed.\\r\\n        emit PauseChanged(paused);\\r\\n    }\\r\\n\\r\\n    event PauseChanged(bool isPaused);\\r\\n\\r\\n    modifier notPaused {\\r\\n        require(\\r\\n            !paused,\\r\\n            \\\"This action cannot be performed while the contract is paused\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"State.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\n// https://docs.synthetix.io/contracts/State\\r\\ncontract State is Owned {\\r\\n    // the address of the contract that can modify variables\\r\\n    // this can only be changed by the owner of this contract\\r\\n    address public associatedContract;\\r\\n\\r\\n    constructor(address _associatedContract) internal {\\r\\n        // This contract is abstract, and thus cannot be instantiated directly\\r\\n        require(owner != address(0), \\\"Owner must be set\\\");\\r\\n\\r\\n        associatedContract = _associatedContract;\\r\\n        emit AssociatedContractUpdated(_associatedContract);\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    // Change the associated contract to a new address\\r\\n    function setAssociatedContract(address _associatedContract)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        associatedContract = _associatedContract;\\r\\n        emit AssociatedContractUpdated(_associatedContract);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyAssociatedContract {\\r\\n        require(\\r\\n            msg.sender == associatedContract,\\r\\n            \\\"Only the associated contract can perform this action\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AssociatedContractUpdated(address associatedContract);\\r\\n}\\r\\n\"},\"STPT.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2020-09-18\\r\\n*/\\r\\n\\r\\n/**\\r\\n *Submitted for verification at Etherscan.io on 2020-08-24\\r\\n*/\\r\\n\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\ninterface tokenRecipient { \\r\\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; \\r\\n}\\r\\n\\r\\ncontract OinToken {\\r\\n    // Public variables of the token\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals = 18;\\r\\n    // 18 decimals is the strongly suggested default, avoid changing it\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    // This creates an array with all balances\\r\\n    mapping (address =\\u003e uint256) public balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance;\\r\\n\\r\\n    // This generates a public event on the blockchain that will notify clients\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    \\r\\n    // This generates a public event on the blockchain that will notify clients\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n    // This notifies clients about the amount burnt\\r\\n    event Burn(address indexed from, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * Constructor function\\r\\n     *\\r\\n     * Initializes contract with initial supply tokens to the creator of the contract\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 initialSupply,\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol\\r\\n    ) public {\\r\\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\\r\\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\\r\\n        name = tokenName;                                   // Set the name for display purposes\\r\\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal transfer, only can be called by this contract\\r\\n     */\\r\\n    function _transfer(address _from, address _to, uint _value) internal {\\r\\n        // Prevent transfer to 0x0 address. Use burn() instead\\r\\n        // require(_to != address(0x0));\\r\\n        // Check if the sender has enough\\r\\n        require(balanceOf[_from] \\u003e= _value);\\r\\n        // Check for overflows\\r\\n        require(balanceOf[_to] + _value \\u003e= balanceOf[_to]);\\r\\n        // Save this for an assertion in the future\\r\\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\\r\\n        // Subtract from the sender\\r\\n        balanceOf[_from] -= _value;\\r\\n        // Add the same to the recipient\\r\\n        balanceOf[_to] += _value;\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\\r\\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfer tokens\\r\\n     *\\r\\n     * Send `_value` tokens to `_to` from your account\\r\\n     *\\r\\n     * @param _to The address of the recipient\\r\\n     * @param _value the amount to send\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfer tokens from other address\\r\\n     *\\r\\n     * Send `_value` tokens to `_to` on behalf of `_from`\\r\\n     *\\r\\n     * @param _from The address of the sender\\r\\n     * @param _to The address of the recipient\\r\\n     * @param _value the amount to send\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n        require(_value \\u003c= allowance[_from][msg.sender]);     // Check allowance\\r\\n        allowance[_from][msg.sender] -= _value;\\r\\n        _transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set allowance for other address\\r\\n     *\\r\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\\r\\n     *\\r\\n     * @param _spender The address authorized to spend\\r\\n     * @param _value the max amount they can spend\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public\\r\\n        returns (bool success) {\\r\\n        allowance[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set allowance for other address and notify\\r\\n     *\\r\\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\\r\\n     *\\r\\n     * @param _spender The address authorized to spend\\r\\n     * @param _value the max amount they can spend\\r\\n     * @param _extraData some extra information to send to the approved contract\\r\\n     */\\r\\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\\r\\n        public\\r\\n        returns (bool success) {\\r\\n        tokenRecipient spender = tokenRecipient(_spender);\\r\\n        if (approve(_spender, _value)) {\\r\\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroy tokens\\r\\n     *\\r\\n     * Remove `_value` tokens from the system irreversibly\\r\\n     *\\r\\n     * @param _value the amount of money to burn\\r\\n     */\\r\\n    function burn(uint256 _value) public returns (bool success) {\\r\\n        require(balanceOf[msg.sender] \\u003e= _value);   // Check if the sender has enough\\r\\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\\r\\n        totalSupply -= _value;                      // Updates totalSupply\\r\\n        emit Burn(msg.sender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroy tokens from other account\\r\\n     *\\r\\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\r\\n     *\\r\\n     * @param _from the address of the sender\\r\\n     * @param _value the amount of money to burn\\r\\n     */\\r\\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\\r\\n        require(balanceOf[_from] \\u003e= _value);                // Check if the targeted balance is enough\\r\\n        require(_value \\u003c= allowance[_from][msg.sender]);    // Check allowance\\r\\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\\r\\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender\\u0027s allowance\\r\\n        totalSupply -= _value;                              // Update totalSupply\\r\\n        emit Burn(_from, _value);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"STPTStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IDparam.sol\\\";\\r\\nimport \\\"./WhiteList.sol\\\";\\r\\n\\r\\ninterface IOracle {\\r\\n    function val() external returns (uint256);\\r\\n\\r\\n    function poke(uint256 price) external;\\r\\n\\r\\n    function peek() external;\\r\\n}\\r\\n\\r\\ninterface IESM {\\r\\n    function isStakePaused() external view returns (bool);\\r\\n\\r\\n    function isRedeemPaused() external view returns (bool);\\r\\n\\r\\n    function isClosed() external view returns (bool);\\r\\n\\r\\n    function time() external view returns (uint256);\\r\\n\\r\\n    function shutdown() external;\\r\\n}\\r\\n\\r\\ninterface ICoin {\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract STPTStake is Owned, WhiteList {\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @notice Struct reward pools state\\r\\n     * @param index Accumulated earnings index\\r\\n     * @param block Update index, updating blockNumber together\\r\\n     */\\r\\n    struct RewardState {\\r\\n        uint256 index;\\r\\n        uint256 block;\\r\\n    }\\r\\n    /**\\r\\n     * @notice reward pools state\\r\\n     * @param index Accumulated earnings index by staker\\r\\n     * @param reward Accumulative reward\\r\\n     */\\r\\n    struct StakerState {\\r\\n        uint256 index;\\r\\n        uint256 reward;\\r\\n    }\\r\\n\\r\\n    /// @notice TThe reward pool put into by the project side\\r\\n    uint256 public reward;\\r\\n    /// @notice The number of token per-block\\r\\n    uint256 public rewardSpeed = 0.5787e18;\\r\\n    /// @notice Inital index\\r\\n    uint256 public initialIndex = 1e36;\\r\\n    /// @notice Amplification factor\\r\\n    uint256 public doubleScale = 1e36;\\r\\n    /// @notice The instance reward pools state\\r\\n    RewardState public rewardState;\\r\\n\\r\\n    /// @notice All staker-instances state\\r\\n    mapping(address =\\u003e StakerState) public stakerStates;\\r\\n\\r\\n    /// @notice The amount by staker with token\\r\\n    mapping(address =\\u003e uint256) public tokens;\\r\\n    /// @notice The amount by staker with coin\\r\\n    mapping(address =\\u003e uint256) public coins;\\r\\n    /// @notice The total amount of out-coin in sys\\r\\n    uint256 public totalCoin;\\r\\n    /// @notice The total amount of stake-token in sys\\r\\n    uint256 public totalToken;\\r\\n    /// @notice Cumulative  service fee, it will be burn, not join reward.\\r\\n    uint256 public sFee;\\r\\n    uint256 public pmFee;\\r\\n    address public pmFeeHolder = 0x1CFC820F300103fC58a8804c221846fD25eC32D5;\\r\\n    uint256 constant ONE = 10**8;\\r\\n    address constant blackhole = 0x188407eeD7B1bb203dEd6801875C0B5Cb1027053;\\r\\n    uint256 public startRewardBlock;\\r\\n    /// @notice Dparam address\\r\\n    IDparam params;\\r\\n    /// @notice Oracle address\\r\\n    IOracle orcl;\\r\\n    /// @notice Esm address\\r\\n    IESM esm;\\r\\n    /// @notice Coin address\\r\\n    ICoin coin;\\r\\n    /// @notice Token address\\r\\n    IERC20 token;\\r\\n\\r\\n    /// @notice Setup Oracle address success\\r\\n    event SetupOracle(address orcl);\\r\\n    /// @notice Setup Dparam address success\\r\\n    event SetupParam(address param);\\r\\n    /// @notice Setup Esm address success\\r\\n    event SetupEsm(address esm);\\r\\n    /// @notice Setup Token\\u0026Coin address success\\r\\n    event SetupCoin(address token, address coin);\\r\\n    /// @notice Stake success\\r\\n    event StakeEvent(uint256 token, uint256 coin);\\r\\n    /// @notice redeem success\\r\\n    event RedeemEvent(uint256 token, uint256 move, uint256 fee, uint256 coin);\\r\\n    /// @notice Update index success\\r\\n    event IndexUpdate(uint256 delt, uint256 block, uint256 index);\\r\\n    /// @notice ClaimToken success\\r\\n    event ClaimToken(address holder, uint256 amount);\\r\\n    /// @notice InjectReward success\\r\\n    event InjectReward(uint256 amount);\\r\\n    /// @notice ExtractReward success\\r\\n    event ExtractReward(address reciver, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new OinStake, owner by msg.sender\\r\\n     * @param _param Dparam address\\r\\n     * @param _orcl Oracle address\\r\\n     * @param _esm Esm address\\r\\n     */\\r\\n    constructor(\\r\\n        address _param,\\r\\n        address _orcl,\\r\\n        address _esm\\r\\n    ) public Owned(msg.sender) {\\r\\n        params = IDparam(_param);\\r\\n        orcl = IOracle(_orcl);\\r\\n        esm = IESM(_esm);\\r\\n        rewardState = RewardState(initialIndex, getBlockNumber());\\r\\n    }\\r\\n\\r\\n    modifier notClosed() {\\r\\n        require(!esm.isClosed(), \\\"System closed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice reset Dparams address.\\r\\n     * @param _params Configuration dynamic params contract address\\r\\n     */\\r\\n    function setupParams(address _params) public onlyWhiter {\\r\\n        params = IDparam(_params);\\r\\n        emit SetupParam(_params);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice reset Oracle address.\\r\\n     * @param _orcl Configuration Oracle contract address\\r\\n     */\\r\\n    function setupOracle(address _orcl) public onlyWhiter {\\r\\n        orcl = IOracle(_orcl);\\r\\n        emit SetupOracle(_orcl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice reset Esm address.\\r\\n     * @param _esm Configuration Esm contract address\\r\\n     */\\r\\n    function setupEsm(address _esm) public onlyWhiter {\\r\\n        esm = IESM(_esm);\\r\\n        emit SetupEsm(_esm);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get Dparam address.\\r\\n     * @return Dparam contract address\\r\\n     */\\r\\n    function getParamsAddr() public view returns (address) {\\r\\n        return address(params);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get Oracle address.\\r\\n     * @return Oracle contract address\\r\\n     */\\r\\n    function getOracleAddr() public view returns (address) {\\r\\n        return address(orcl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get Esm address.\\r\\n     * @return Esm contract address\\r\\n     */\\r\\n    function getEsmAddr() public view returns (address) {\\r\\n        return address(esm);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get token of staking address.\\r\\n     * @return ERC20 address\\r\\n     */\\r\\n    function getCoinAddress() public view returns (address) {\\r\\n        return address(coin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get StableToken address.\\r\\n     * @return ERC20 address\\r\\n     */\\r\\n    function getTokenAddress() public view returns (address) {\\r\\n        return address(token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice inject token address \\u0026 coin address only once.\\r\\n     * @param _token token address\\r\\n     * @param _coin coin address\\r\\n     */\\r\\n    function setup(address _token, address _coin) public onlyWhiter {\\r\\n        require(\\r\\n            address(token) == address(0) \\u0026\\u0026 address(coin) == address(0),\\r\\n            \\\"setuped yet.\\\"\\r\\n        );\\r\\n        token = IERC20(_token);\\r\\n        coin = ICoin(_coin);\\r\\n\\r\\n        emit SetupCoin(_token, _coin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of debt by the `account`\\r\\n     * @param account token address\\r\\n     * @return (tokenAmount,coinAmount)\\r\\n     */\\r\\n    function debtOf(address account) public view returns (uint256, uint256) {\\r\\n        return (tokens[account], coins[account]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of debt by the `account`\\r\\n     * @param coinAmount The amount that staker want to get stableToken\\r\\n     * @return The amount that staker want to transfer token.\\r\\n     */\\r\\n    function getInputToken(uint256 coinAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 tokenAmount)\\r\\n    {\\r\\n        tokenAmount = coinAmount.mul(params.stakeRate()).mul(10**10);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Normally redeem anyAmount internal\\r\\n     * @param coinAmount The number of coin will be staking\\r\\n     */\\r\\n    function stake(uint256 coinAmount) external notClosed {\\r\\n        require(!esm.isStakePaused(), \\\"Stake paused\\\");\\r\\n        require(coinAmount \\u003e 0, \\\"The quantity is less than the minimum\\\");\\r\\n        require(orcl.val() \\u003e 0, \\\"Oracle price not initialized.\\\");\\r\\n        require(params.isNormal(orcl.val()), \\\"STPT\\u0027s price is too low.\\\");\\r\\n\\r\\n        address from = msg.sender;\\r\\n\\r\\n        if (coins[from] == 0) {\\r\\n            require(\\r\\n                coinAmount \\u003e= params.minMint(),\\r\\n                \\\"First make coin must grater than minMint amount.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        accuredToken(from);\\r\\n\\r\\n        uint256 tokenAmount = getInputToken(coinAmount);\\r\\n\\r\\n        token.transferFrom(from, address(this), tokenAmount);\\r\\n        coin.mint(from, coinAmount);\\r\\n\\r\\n        totalCoin = totalCoin.add(coinAmount);\\r\\n        totalToken = totalToken.add(tokenAmount);\\r\\n        coins[from] = coins[from].add(coinAmount);\\r\\n        tokens[from] = tokens[from].add(tokenAmount);\\r\\n\\r\\n        if (startRewardBlock == 0) {\\r\\n            startRewardBlock = getBlockNumber();\\r\\n        }\\r\\n\\r\\n        emit StakeEvent(tokenAmount, coinAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Normally redeem anyAmount internal\\r\\n     * @param coinAmount The number of coin will be redeemed\\r\\n     * @param receiver Address of receiving\\r\\n     */\\r\\n    function _normalRedeem(uint256 coinAmount, address receiver)\\r\\n        internal\\r\\n        notClosed\\r\\n    {\\r\\n        require(!esm.isRedeemPaused(), \\\"Redeem paused\\\");\\r\\n        address staker = msg.sender;\\r\\n        require(coins[staker] \\u003e 0, \\\"No collateral\\\");\\r\\n        require(coinAmount \\u003e 0, \\\"The quantity is less than zero\\\");\\r\\n        require(coinAmount \\u003c= coins[staker], \\\"input amount overflow\\\");\\r\\n\\r\\n        accuredToken(staker);\\r\\n\\r\\n        uint256 tokenAmount = getInputToken(coinAmount);\\r\\n\\r\\n        uint256 feeRate = params.feeRate();\\r\\n        uint256 fee = tokenAmount.mul(feeRate).div(1000);\\r\\n        uint256 _pmFee = fee.div(3);\\r\\n        uint256 move = tokenAmount.sub(fee);\\r\\n        sFee = sFee.add(fee);\\r\\n        pmFee = pmFee.add(_pmFee);\\r\\n\\r\\n        token.transfer(pmFeeHolder, _pmFee);\\r\\n        token.transfer(blackhole, fee - _pmFee);\\r\\n        coin.burn(staker, coinAmount);\\r\\n        token.transfer(receiver, move);\\r\\n\\r\\n        coins[staker] = coins[staker].sub(coinAmount);\\r\\n        tokens[staker] = tokens[staker].sub(tokenAmount);\\r\\n        totalCoin = totalCoin.sub(coinAmount);\\r\\n        totalToken = totalToken.sub(tokenAmount);\\r\\n\\r\\n        emit RedeemEvent(tokenAmount, move, fee, coinAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Abnormally redeem anyAmount internal\\r\\n     * @param coinAmount The number of coin will be redeemed\\r\\n     * @param receiver Address of receiving\\r\\n     */\\r\\n    function _abnormalRedeem(uint256 coinAmount, address receiver) internal {\\r\\n        require(esm.isClosed(), \\\"System not Closed yet.\\\");\\r\\n        address from = msg.sender;\\r\\n        require(coinAmount \\u003e 0, \\\"The quantity is less than zero\\\");\\r\\n        require(coin.balanceOf(from) \\u003e 0, \\\"The coin no balance.\\\");\\r\\n        require(coinAmount \\u003c= coin.balanceOf(from), \\\"Coin balance exceed\\\");\\r\\n\\r\\n        uint256 tokenAmount = getInputToken(coinAmount);\\r\\n\\r\\n        coin.burn(from, coinAmount);\\r\\n        token.transfer(receiver, tokenAmount);\\r\\n\\r\\n        totalCoin = totalCoin.sub(coinAmount);\\r\\n        totalToken = totalToken.sub(tokenAmount);\\r\\n\\r\\n        emit RedeemEvent(tokenAmount, tokenAmount, 0, coinAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Normally redeem anyAmount\\r\\n     * @param coinAmount The number of coin will be redeemed\\r\\n     * @param receiver Address of receiving\\r\\n     */\\r\\n    function redeem(uint256 coinAmount, address receiver) public {\\r\\n        _normalRedeem(coinAmount, receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Normally redeem anyAmount to msg.sender\\r\\n     * @param coinAmount The number of coin will be redeemed\\r\\n     */\\r\\n    function redeem(uint256 coinAmount) public {\\r\\n        redeem(coinAmount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice normally redeem them all at once\\r\\n     * @param holder reciver\\r\\n     */\\r\\n    function redeemMax(address holder) public {\\r\\n        redeem(coins[msg.sender], holder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice normally redeem them all at once to msg.sender\\r\\n     */\\r\\n    function redeemMax() public {\\r\\n        redeemMax(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice System shutdown under the redemption rule\\r\\n     * @param coinAmount The number coin\\r\\n     * @param receiver Address of receiving\\r\\n     */\\r\\n    function oRedeem(uint256 coinAmount, address receiver) public {\\r\\n        _abnormalRedeem(coinAmount, receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice System shutdown under the redemption rule\\r\\n     * @param coinAmount The number coin\\r\\n     */\\r\\n    function oRedeem(uint256 coinAmount) public {\\r\\n        oRedeem(coinAmount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Refresh reward speed.\\r\\n     */\\r\\n    function setRewardSpeed(uint256 speed) public onlyWhiter {\\r\\n        updateIndex();\\r\\n        rewardSpeed = speed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to correct the effect of one\\u0027s actions on one\\u0027s own earnings\\r\\n     *         System shutdown will no longer count\\r\\n     */\\r\\n    function updateIndex() public {\\r\\n        if (esm.isClosed()) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 blockNumber = getBlockNumber();\\r\\n        uint256 deltBlock = blockNumber.sub(rewardState.block);\\r\\n\\r\\n        if (deltBlock \\u003e 0) {\\r\\n            uint256 accruedReward = rewardSpeed.mul(deltBlock);\\r\\n            uint256 ratio = totalToken == 0\\r\\n                ? 0\\r\\n                : accruedReward.mul(doubleScale).div(totalToken);\\r\\n            rewardState.index = rewardState.index.add(ratio);\\r\\n            rewardState.block = blockNumber;\\r\\n            emit IndexUpdate(deltBlock, blockNumber, rewardState.index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to correct the effect of one\\u0027s actions on one\\u0027s own earnings\\r\\n     *         System shutdown will no longer count\\r\\n     * @param account staker address\\r\\n     */\\r\\n    function accuredToken(address account) internal {\\r\\n        updateIndex();\\r\\n        StakerState storage stakerState = stakerStates[account];\\r\\n        stakerState.reward = _getReward(account);\\r\\n        stakerState.index = rewardState.index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the current holder\\u0027s mining income\\r\\n     * @param staker Address of holder\\r\\n     */\\r\\n    function _getReward(address staker) internal view returns (uint256 value) {\\r\\n        StakerState storage stakerState = stakerStates[staker];\\r\\n        value = stakerState.reward.add(\\r\\n            rewardState.index.sub(stakerState.index).mul(tokens[staker]).div(\\r\\n                doubleScale\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Estimate the mortgagor\\u0027s reward\\r\\n     * @param account Address of staker\\r\\n     */\\r\\n    function getHolderReward(address account)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 value)\\r\\n    {\\r\\n        uint256 blockReward2 = (totalToken == 0 || esm.isClosed())\\r\\n            ? 0\\r\\n            : getBlockNumber()\\r\\n                .sub(rewardState.block)\\r\\n                .mul(rewardSpeed)\\r\\n                .mul(tokens[account])\\r\\n                .div(totalToken);\\r\\n        value = _getReward(account) + blockReward2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Extract the current reward in one go\\r\\n     * @param holder Address of receiver\\r\\n     */\\r\\n    function claimToken(address holder) public {\\r\\n        accuredToken(holder);\\r\\n        StakerState storage stakerState = stakerStates[holder];\\r\\n        uint256 value = stakerState.reward.min(reward);\\r\\n        require(value \\u003e 0, \\\"The reward of address is zero.\\\");\\r\\n\\r\\n        token.transfer(holder, value);\\r\\n        reward = reward.sub(value);\\r\\n\\r\\n        stakerState.index = rewardState.index;\\r\\n        stakerState.reward = stakerState.reward.sub(value);\\r\\n        emit ClaimToken(holder, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get block number now\\r\\n     */\\r\\n    function getBlockNumber() public view returns (uint256) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Inject token to reward\\r\\n     * @param amount The number of injecting\\r\\n     */\\r\\n    function injectReward(uint256 amount) external onlyOwner {\\r\\n        token.transferFrom(msg.sender, address(this), amount);\\r\\n        reward = reward.add(amount);\\r\\n        emit InjectReward(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Extract token from reward\\r\\n     * @param account Address of receiver\\r\\n     * @param amount The number of extracting\\r\\n     */\\r\\n    function extractReward(address account, uint256 amount) external onlyOwner {\\r\\n        require(amount \\u003c= reward, \\\"withdraw overflow.\\\");\\r\\n        token.transfer(account, amount);\\r\\n        reward = reward.sub(amount);\\r\\n        emit ExtractReward(account, amount);\\r\\n    }\\r\\n\\r\\n    function setupParam(\\r\\n        uint256 liquidationLine,\\r\\n        uint256 minMint,\\r\\n        uint256 _feeRate,\\r\\n        uint256 _rewardSpeed\\r\\n    ) public onlyWhiter {\\r\\n        if (minMint != 0) {\\r\\n            params.setMinMint(minMint);\\r\\n        }\\r\\n        if (_feeRate != 0 \\u0026\\u0026 _feeRate \\u003e= 3) {\\r\\n            params.setFeeRate(_feeRate);\\r\\n        }\\r\\n        if (_rewardSpeed != 0) {\\r\\n            setRewardSpeed(_rewardSpeed);\\r\\n        }\\r\\n        if (liquidationLine != 0) {\\r\\n            params.setLiquidationLine(liquidationLine);\\r\\n            if (params.isLiquidation(orcl.val())) {\\r\\n                esm.shutdown();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"USTPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ERC20Detailed.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./State.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n\\r\\ncontract USTPToken is Owned, State, Pausable, ERC20, ERC20Detailed {\\r\\n    /**\\r\\n     * @notice Construct a new STableToken\\r\\n     */\\r\\n    constructor(address _associatedContract)\\r\\n        public\\r\\n        Owned(msg.sender)\\r\\n        State(_associatedContract)\\r\\n        ERC20Detailed(\\\"USTP\\\", \\\"USTP\\\", 8)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice Only associatedContract can do it\\r\\n     * @param receiver The address be sended\\r\\n     * @param amount The number of token be sended\\r\\n     */\\r\\n    function mint(address receiver, uint256 amount)\\r\\n        external\\r\\n        notPaused\\r\\n        onlyAssociatedContract\\r\\n    {\\r\\n        _mint(receiver, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only associatedContract can do it\\r\\n     * @param account The address of holder\\r\\n     * @param amount The number of token be burned\\r\\n     */\\r\\n    function burn(address account, uint256 amount)\\r\\n        external\\r\\n        notPaused\\r\\n        onlyAssociatedContract\\r\\n    {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\"},\"WhiteList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.5.0 \\u003c0.8.0;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\ncontract WhiteList is Owned {\\r\\n    /// @notice Users with permissions\\r\\n    mapping(address =\\u003e uint256) public whiter;\\r\\n\\r\\n    /// @notice Append address into whiteList successevent\\r\\n    event AppendWhiter(address adder);\\r\\n\\r\\n    /// @notice Remove address into whiteList successevent\\r\\n    event RemoveWhiter(address remover);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new WhiteList, default owner in whiteList\\r\\n     */\\r\\n    constructor() internal {\\r\\n        appendWhiter(owner);\\r\\n    }\\r\\n\\r\\n    modifier onlyWhiter() {\\r\\n        require(isWhiter(), \\\"WhiteList: msg.sender not in whilteList.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only onwer can append address into whitelist\\r\\n     * @param account The address not added, can added to the whitelist\\r\\n     */\\r\\n    function appendWhiter(address account) public onlyOwner {\\r\\n        require(account != address(0), \\\"WhiteList: address not zero\\\");\\r\\n        require(\\r\\n            !isWhiter(account),\\r\\n            \\\"WhiteListe: the account exsit whilteList yet\\\"\\r\\n        );\\r\\n        whiter[account] = 1;\\r\\n        emit AppendWhiter(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only onwer can remove address into whitelist\\r\\n     * @param account The address in whitelist yet\\r\\n     */\\r\\n    function removeWhiter(address account) public onlyOwner {\\r\\n        require(\\r\\n            isWhiter(account),\\r\\n            \\\"WhiteListe: the account not exist whilteList\\\"\\r\\n        );\\r\\n        delete whiter[account];\\r\\n        emit RemoveWhiter(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check whether acccount in whitelist\\r\\n     * @param account Any address\\r\\n     */\\r\\n    function isWhiter(address account) public view returns (bool) {\\r\\n        return whiter[account] == 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check whether msg.sender in whitelist overrides.\\r\\n     */\\r\\n    function isWhiter() public view returns (bool) {\\r\\n        return isWhiter(msg.sender);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"associatedContract\",\"type\":\"address\"}],\"name\":\"AssociatedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"associatedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"setAssociatedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "USTPToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000062bf7b431dc9a3ab4062455e8d589df91748353", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://531108122aa3c77e24888b2f5fb447efa6652a0b96e42a8c0375f966542593f5"}]}