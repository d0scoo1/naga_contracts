{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"BFYCLaunchpad.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract BFYCPresale is Ownable {\\r\\n    using Address for address payable;\\r\\n    \\r\\n    IERC20 public token;\\r\\n    address public payee;\\r\\n    address public creator;\\r\\n    address public operator;\\r\\n    \\r\\n    bool public swapStatus;\\r\\n    bool public canClaim;\\r\\n    bool public isWhiteListEnabled;\\r\\n    bool public cancelled;\\r\\n\\r\\n    uint256 public swapRate; //Tokens to be swapped per BNB\\r\\n    uint256 public launchRate; // Tokens per BNB for LP\\r\\n    uint256 public totalSold; // Total tokens sold\\r\\n    uint256 public decimalsModifier;\\r\\n    uint256 public minBuy; // Minimum BNBs to be purchased\\r\\n    uint256 public maxBuy; // Maximum BNBs to be purchased\\r\\n    uint256 public softCap; // Minimum BNBs to be raised for finalizing presale\\r\\n    uint256 public hardCap; // Maximum BNBs to be raised\\r\\n    uint256 public startTime; // Presale Start time\\r\\n    uint256 public endTime; // Presale End Time\\r\\n    uint256 public percentFundsToAddToLP;\\r\\n\\r\\n    uint256 public totalRaised;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) public spent;\\r\\n    mapping (address =\\u003e uint256) public owed;\\r\\n    mapping (address =\\u003e uint256) public claimed;\\r\\n    mapping(address =\\u003e bool) public isWhiteListed;\\r\\n\\r\\n    string public tokenLogo;\\r\\n    string public telegram;\\r\\n    string public website;\\r\\n    string public twitter;\\r\\n    string public reddit;\\r\\n    string public github;\\r\\n    string public instagram;\\r\\n\\r\\n    struct presaleInfo {\\r\\n        string tokenLogo;\\r\\n        string telegram;\\r\\n        string website;\\r\\n        string twitter;\\r\\n        string reddit;\\r\\n        string github;\\r\\n        string instagram;\\r\\n        bool isWhiteListEnabled;\\r\\n        bool cancelled;\\r\\n    }\\r\\n\\r\\n    event AddedToWhiteList(address indexed whitelistAddress);\\r\\n    event RemovedFromWhiteList(address indexed removedAddress);\\r\\n    event Swap (address indexed user, uint256 inAmount, uint256 owedAmount);\\r\\n    event Claim (address indexed user, uint256 amount);\\r\\n    event PayeeTransferred (address indexed previousPayee, address indexed newPayee);\\r\\n    event refundClaimed (address indexed user, uint256 refundAmount);\\r\\n\\r\\n    constructor (address _operator) {\\r\\n        operator = _operator;\\r\\n        payee = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrOperator {\\r\\n        require(msg.sender == operator || msg.sender == owner(), \\\"TokenPresale: only accessible by operator or owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function createPresale(\\r\\n        address _creator, \\r\\n        IERC20 _token, \\r\\n        uint256 _swapRate,\\r\\n        uint256 _launchRate, \\r\\n        uint256 _minBuy, \\r\\n        uint256 _maxBuy, \\r\\n        uint256 _softCap, \\r\\n        uint256 _hardCap, \\r\\n        uint256 _startTime, \\r\\n        uint256 _endTime,\\r\\n        uint256 _percentFundsToAddToLP, \\r\\n        bool doSafetyCheck) external onlyOwnerOrOperator {\\r\\n        require (address(_token) != address(0), \\\"Error: Can\\u0027t set token to zero address\\\");\\r\\n        require (_creator != address(0), \\\"Error: Can\\u0027t set payee to zero address\\\");\\r\\n        require (_startTime \\u003e= block.timestamp, \\\"TokenPresale: opening time can\\u0027t be in the past\\\"); // solhint-disable-line not-rely-on-time\\r\\n        require (_endTime \\u003e _startTime, \\\"TokenPresale: closing time can\\u0027t be before opening time\\\");\\r\\n        require (_percentFundsToAddToLP \\u003e= 70, \\\"Alert! You need to add at least 70% of raised funds to LP!\\\");\\r\\n        require(!cancelled, \\\"Error: Can\\u0027t recreate a cancelled presale!\\\");\\r\\n\\r\\n        if (doSafetyCheck) {\\r\\n            require (IERC20(_token).balanceOf(address(this)) \\u003e= (_launchRate * ((_percentFundsToAddToLP * _hardCap)/100)) +  (_hardCap * _swapRate), \\r\\n                \\\"Error: Not enough tokens owned to create presale. Deposit tokens to presale contract before calling this function\\\");\\r\\n        }\\r\\n\\r\\n        token = _token;\\r\\n        creator = _creator;\\r\\n        swapRate = _swapRate;\\r\\n        launchRate = _launchRate;\\r\\n        minBuy = _minBuy;\\r\\n        maxBuy = _maxBuy;\\r\\n        softCap = _softCap;\\r\\n        hardCap = _hardCap;\\r\\n        startTime = _startTime;\\r\\n        endTime = _endTime;\\r\\n        percentFundsToAddToLP = _percentFundsToAddToLP;\\r\\n        swapStatus = true;\\r\\n        decimalsModifier = 10**18 * 10**_token.decimals();\\r\\n    }\\r\\n\\r\\n    function configurePresale(\\r\\n        bool _isWhiteListEnabled,\\r\\n        string memory logo,\\r\\n        string memory _telegram,\\r\\n        string memory _website,\\r\\n        string memory _twitter,\\r\\n        string memory _reddit,\\r\\n        string memory _github,\\r\\n        string memory _instagram) external onlyOwnerOrOperator {            \\r\\n        require(!cancelled, \\\"Error: Can\\u0027t configure a cancelled presale!\\\");\\r\\n        isWhiteListEnabled = _isWhiteListEnabled;\\r\\n        tokenLogo = logo;\\r\\n        telegram = _telegram;\\r\\n        website = _website;\\r\\n        twitter = _twitter;\\r\\n        reddit = _reddit;\\r\\n        github = _github;\\r\\n        instagram = _instagram;\\r\\n    }\\r\\n\\r\\n    function cancelPresale() external onlyOwnerOrOperator {\\r\\n        require (totalRaised \\u003c softCap, \\\"TokenPresale: SoftCap has been reached, can\\u0027t be cancelled now!\\\");\\r\\n        require(!cancelled, \\\"Error: Presale already cancelled!\\\");\\r\\n        \\r\\n            cancelled = true; // if we\\u0027ve already received payment then we need to officially cancel so refunds can be claimed. Cancelled presale contracts can\\u0027t be re-used.\\r\\n        \\r\\n            swapRate = 0; \\r\\n            creator = address(0); \\r\\n            hardCap = 0; \\r\\n            softCap = 0;\\r\\n            minBuy = 0;\\r\\n            maxBuy = 0; \\r\\n            startTime = 0;\\r\\n            endTime = 0;\\r\\n    }\\r\\n\\r\\n    function swap() external payable {\\r\\n        require(startTime \\u003c= block.timestamp, \\\"Error: Presale has not begun yet!\\\");\\r\\n        require(swapStatus == true, \\\"Error: Swap disabled!\\\");\\r\\n        require(spent[msg.sender] + msg.value \\u003c= maxBuy, \\\"Error: Reached Max Buy, can\\u0027t buy more from this wallet!\\\");\\r\\n        require(!isWhiteListEnabled || isWhiteListed[_msgSender()],\\\"Error: you are not whitelisted\\\");\\r\\n        require(totalRaised \\u003c hardCap, \\\"Alert: HardCap reached!\\\");\\r\\n        require(!cancelled, \\\"Error: Can\\u0027t participate in a cancelled presale!\\\");\\r\\n\\r\\n        uint256 quota = token.balanceOf (address(this));\\r\\n        uint256 outAmount = (msg.value * swapRate * decimalsModifier) / 10**36;\\r\\n\\r\\n        require (totalSold + outAmount \\u003c= quota, \\\"Error: Not enough tokens remaining\\\");\\r\\n        \\r\\n        totalSold += outAmount;\\r\\n        totalRaised += msg.value;\\r\\n        // payable(payee).sendValue (msg.value);\\r\\n        spent[msg.sender] += msg.value;\\r\\n        owed[msg.sender] += outAmount;\\r\\n        emit Swap (msg.sender, msg.value, outAmount);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        require (canClaim == true, \\\"Error: Presale hasn\\u0027t been finalized yet\\\");\\r\\n        require(!cancelled, \\\"Error: Can\\u0027t claim tokens from a cancelled presale!\\\");\\r\\n        uint256 quota = token.balanceOf (address(this));\\r\\n        uint256 owedNow = owed[msg.sender];\\r\\n\\r\\n        if (owedNow \\u003e owed[msg.sender])\\r\\n            owedNow = owed[msg.sender];\\r\\n\\r\\n        require (owedNow - claimed[msg.sender] \\u003c= quota, \\\"Error: Not enough tokens remaining\\\");\\r\\n        require (owedNow - claimed[msg.sender] \\u003e 0, \\\"Error: No tokens left to claim\\\");\\r\\n\\r\\n        uint256 amount = owedNow - claimed[msg.sender];\\r\\n        claimed[msg.sender] = owedNow;\\r\\n        token.transfer (msg.sender, amount);\\r\\n\\r\\n        emit Claim (msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Used to claim a refund if the presale is unsuccessful\\r\\n    // Users should be aware that if the payment token has transfer taxes they will receive less than they sent by 2 x the transfer tax\\r\\n    function claimRefund() public {\\r\\n        require (cancelled, \\\"TokenPresale: not cancelled, try calling cancel before claiming refund\\\");\\r\\n        uint256 refundAmount = spent[msg.sender];\\r\\n        if(refundAmount \\u003e 0)\\r\\n        _msgSender().transfer(refundAmount);\\r\\n\\r\\n        emit refundClaimed(msg.sender, refundAmount);\\r\\n    }\\r\\n\\r\\n    function switchToPublicPresale(bool) external onlyOwnerOrOperator{\\r\\n        require(hardCap \\u003e totalRaised, \\\"Error: Can\\u0027t change whitelisted presale to public after successful presale!\\\");\\r\\n        require(isWhiteListEnabled == true, \\\"Error: Can\\u0027t change public presale to whitelisted presale!\\\");\\r\\n        isWhiteListEnabled= false;\\r\\n    }\\r\\n\\r\\n    function isHardCapReached() public view returns (bool) {\\r\\n        return hardCap \\u003c= totalRaised;\\r\\n    }\\r\\n\\r\\n    function isSoftCapReached() public view returns (bool) {\\r\\n        return softCap \\u003c= totalRaised;\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address[] memory _address) external onlyOwnerOrOperator{\\r\\n        for (uint256 i = 0; i \\u003c _address.length; i++) {\\r\\n            if (!isWhiteListed[_address[i]]) {\\r\\n                isWhiteListed[_address[i]] = true;\\r\\n                emit AddedToWhiteList(_address[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _address) external onlyOwnerOrOperator{\\r\\n        require(isWhiteListed[_address],\\\"Error : address is not whitelisted\\\");\\r\\n        isWhiteListed[_address] = false;\\r\\n        emit RemovedFromWhiteList(_address);\\r\\n    }\\r\\n\\r\\n    function isSwapStarted () public view returns (bool) {\\r\\n        return startTime \\u003c= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function editPresaleTiming(uint256 newStartTime, uint256 newEndTime) external onlyOwnerOrOperator {\\r\\n        require(startTime \\u003e block.timestamp, \\\"Error: Can\\u0027t modify an already live presale!\\\");\\r\\n        startTime = newStartTime;\\r\\n        endTime = newEndTime;\\r\\n    }\\r\\n\\r\\n    function extendPresale(uint256 newEndTime) external onlyOwnerOrOperator {\\r\\n        require(newEndTime \\u003e= startTime, \\\"Error: End time has to bre greater than the start time!\\\");\\r\\n        endTime = newEndTime;\\r\\n    }\\r\\n\\r\\n    function finalize (bool _canClaim) external onlyOwnerOrOperator {\\r\\n        require(softCap \\u003c= totalRaised, \\\"Error: Can\\u0027t finalize before Soft Cap is met!\\\");\\r\\n        canClaim = _canClaim;\\r\\n        swapStatus = false;\\r\\n    }\\r\\n\\r\\n    function changeSwapRate (uint256 newRate) external onlyOwner {\\r\\n        require(startTime \\u003e block.timestamp, \\\"Error: Can\\u0027t modify swap rate after presale has begun!\\\");\\r\\n        swapRate = newRate;\\r\\n    }\\r\\n\\r\\n    function setMinBuy (uint newMin) external onlyOwnerOrOperator {\\r\\n        require(startTime \\u003e block.timestamp, \\\"Error: Can\\u0027t modify swap rate after presale has begun!\\\");\\r\\n        minBuy = newMin;\\r\\n    }\\r\\n    \\r\\n    function setMaxBuy (uint256 newMax) external onlyOwnerOrOperator {\\r\\n        require(startTime \\u003e block.timestamp, \\\"Error: Can\\u0027t modify swap rate after presale has begun!\\\");\\r\\n        maxBuy = newMax;\\r\\n    }\\r\\n    \\r\\n    function transferPayee (address newPayee) external onlyOwner {\\r\\n        require (newPayee != address(0), \\\"Error: Can\\u0027t set payee to zero address\\\");\\r\\n        emit PayeeTransferred (payee, newPayee);\\r\\n        payee = newPayee;\\r\\n    }\\r\\n\\r\\n   function transferBNB() external onlyOwner {\\r\\n        payable(payee).sendValue (address(this).balance);\\r\\n    }\\r\\n\\r\\n    function withdrawOtherTokens(address _token, uint256 amount) external onlyOwnerOrOperator {\\r\\n        IERC20(_token).transfer (msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function numTokensToAddToLP() public view returns(uint256) {\\r\\n        return launchRate * (hardCap * percentFundsToAddToLP /100);\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals of tokens\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPayee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPayee\",\"type\":\"address\"}],\"name\":\"PayeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"owedAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"refundClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isWhiteListEnabled\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_reddit\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_github\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_instagram\",\"type\":\"string\"}],\"name\":\"configurePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launchRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFundsToAddToLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doSafetyCheck\",\"type\":\"bool\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"editPresaleTiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"extendPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canClaim\",\"type\":\"bool\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"github\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instagram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHardCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSoftCapReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhiteListEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToAddToLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentFundsToAddToLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reddit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"switchToPublicPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLogo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPayee\",\"type\":\"address\"}],\"name\":\"transferPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BFYCPresale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000958c4edb417399bb9440dc2435de7fbd03b67176", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3329f056470de1c4fe1ac95ae539d5e9e5f9e60670dbb6dadec2162272863f78"}]}