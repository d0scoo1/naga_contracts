{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    uint256 internal _totalSupply = 1e23;\r\n    string _name;\r\n    string _symbol;\r\n    uint8 constant _decimals = 18;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount);\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount);\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount);\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Router02 {\r\n    //function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract TradableErc20 is ERC20 {\r\n    IUniswapV2Router02 internal constant _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    address public uniswapV2Pair;\r\n    address private ecosystemWallet = payable(0xe3C69E06e4c785Ed8b99D6569Eb59120087549F6);\r\n    address public _deployerWallet;\r\n    bool _inSwap;\r\n    bool public _swapandliquifyEnabled = false;\r\n    \r\n  //  bool public tradingEnable;\r\n    uint256 public _totalBotSupply;\r\n    address[] public blacklistedBotWallets;\r\n    \r\n    bool _autoBanBots = true;\r\n\r\n    mapping(address => bool) public isBot;\r\n    mapping(address => bool) _isExcludedFromFee;\r\n    mapping(address => uint256) private _lastBuy;\r\n    mapping(address => uint256) private _lastReflectionBasis;\r\n    mapping(address => uint256) private _totalWalletRewards;\r\n    mapping(address => bool) private _reflectionExcluded;\r\n\r\n\r\n    uint256 constant maxBuyIncrementPercent = 1; \r\n    uint256 public maxBuyIncrementValue; \r\n    uint256 public incrementTime; \r\n    uint256 public maxBuy;\r\n\r\n    uint256 public _initialSupply = 1e23;\r\n    \r\n    uint256 public earlySellTime = 24 hours;\r\n    uint256 public swapThreshold = 1e21;\r\n    bool internal useEarlySellTime = true;\r\n\r\n    uint256 internal _ethReflectionBasis;\r\n    uint256 public _totalDistributed;\r\n    uint256 public _totalBurned;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_)\r\n        ERC20(name_, symbol_)\r\n    {\r\n         _balances[msg.sender] = _totalSupply;\r\n        _isExcludedFromFee[address(0)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _deployerWallet = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addLp() public onlyOwner {\r\n        require(uniswapV2Pair == address(0));\r\n            \r\n            address pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n\r\n             _allowances[address(this)][address(_uniswapV2Router)] = _totalSupply;\r\n             _isExcludedFromFee[pair] = true;\r\n\r\n            _uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            _balances[address(this)],\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp\r\n        ); \r\n        \r\n        uniswapV2Pair = pair;\r\n        _swapandliquifyEnabled = true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(!isBot[from] && !isBot[to]);\r\n        \r\n        if (from == _deployerWallet || to == _deployerWallet) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (_lastReflectionBasis[to] <= 0) {\r\n            _lastReflectionBasis[to] = _ethReflectionBasis;\r\n        }\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= swapThreshold;\r\n\r\n        if (overMinTokenBalance && _swapandliquifyEnabled && !_inSwap && from != uniswapV2Pair) {_swap(swapThreshold);}\r\n\r\n        _claimReflection(payable(from));\r\n        _claimReflection(payable(to));\r\n\r\n        // buy\r\n        if (from == uniswapV2Pair && !_isExcludedFromFee[to]) {\r\n            //maxBuy \r\n            uint256 incrementCount = (block.timestamp - incrementTime);\r\n            if (incrementCount > 0) {\r\n                if (maxBuy < _totalSupply)\r\n                    maxBuy += maxBuyIncrementValue * incrementCount;\r\n                incrementTime = block.timestamp;\r\n            }\r\n\r\n            if (!_autoBanBots) require(_balances[to] + amount <= maxBuy);\r\n            // antibot\r\n            if (_autoBanBots) { \r\n                isBot[to] = true;\r\n                _reflectionExcluded[to] = true;\r\n                _totalBotSupply += amount;\r\n                blacklistedBotWallets.push(to);\r\n            }\r\n            \r\n            amount = _getFeeBuy(amount);\r\n\r\n            _lastBuy[to] = block.timestamp;\r\n        }\r\n\r\n        // sell\r\n        if (!_inSwap && uniswapV2Pair != address(0) && to == uniswapV2Pair) {\r\n            amount = _getFeeSell(amount, from);\r\n        }\r\n        \r\n        //transfer mapping to avoid escaping early sell fees \r\n        if(from != uniswapV2Pair && to != uniswapV2Pair) {\r\n            _lastBuy[to] = block.timestamp;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _getFeeBuy(uint256 amount) private returns (uint256) {\r\n        uint256 fee = amount * 13 / 100; \r\n        amount -= fee;\r\n        _balances[address(this)] += fee;\r\n        emit Transfer(uniswapV2Pair, address(this), fee);\r\n        return amount;\r\n    }\r\n\r\n    function getSellBurnCount(uint256 amount) internal view returns (uint256) {\r\n        // calculate fee percent\r\n        uint256 value = _balances[uniswapV2Pair];\r\n        uint256 vMin = value / 100; // min additive tax amount\r\n        if (amount <= vMin) return amount / 40; // 2.5% constant tax\r\n        uint256 vMax = value / 10;\r\n        if (amount > vMax) return amount / 10; // 10% tax\r\n\r\n        // additive tax for vMin < amount < vMax\r\n        uint256 additiveTax = (((amount - vMin) * 15 * amount) / (vMax - vMin)) / 200;\r\n        return additiveTax + (amount / 40);\r\n    }\r\n\r\n    function _getFeeSell(uint256 amount, address account)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 sellFee = amount * 12 / 100;\r\n\r\n        if (useEarlySellTime && _lastBuy[account] + (earlySellTime) >= block.timestamp) {sellFee = (sellFee * 3) / 2;}\r\n            \r\n        uint256 burnCount = getSellBurnCount(amount); // burn count\r\n\r\n        amount -= sellFee + burnCount;\r\n        _balances[account] -= sellFee + burnCount;        \r\n        _balances[address(this)] += sellFee;\r\n        _totalBurned += burnCount;\r\n        _totalSupply -= burnCount;\r\n        emit Transfer(account, address(this), sellFee);\r\n        emit Transfer(account, address(0), burnCount);\r\n        return amount;\r\n    }\r\n\r\n    function setUseEarlySellFees(bool useSellTime) public onlyOwner {\r\n        useEarlySellTime = useSellTime;\r\n    }\r\n\r\n    function setecosystemWallet(address walletAddress) public onlyOwner {\r\n        ecosystemWallet = walletAddress;\r\n    }\r\n\r\n   function _setMaxBuy(uint256 percent) internal {\r\n        require (percent > 1);\r\n        maxBuy = (percent * _totalSupply) / 100;\r\n    } \r\n\r\n    function getMaxBuy() external view returns (uint256) {\r\n        uint256 incrementCount = (block.timestamp - incrementTime);\r\n        if (incrementCount == 0) return maxBuy;\r\n        if (_totalSupply < (maxBuy + maxBuyIncrementValue * incrementCount)) {return _totalSupply;}\r\n        return maxBuy + maxBuyIncrementValue * incrementCount;\r\n    }\r\n\r\n    function _swap(uint256 amount) internal lockTheSwap {\r\n        //swapTokens\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), amount);\r\n\r\n        uint256 contractEthBalance = address(this).balance;\r\n\r\n        _uniswapV2Router.swapExactTokensForETH(\r\n            amount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 tradeValue = address(this).balance - contractEthBalance;\r\n\r\n        //takeecosystemfees\r\n        uint256 ecosystemshare = (tradeValue * 3) / 4;\r\n        payable(ecosystemWallet).transfer(ecosystemshare);\r\n        uint256 afterBalance = tradeValue - ecosystemshare;\r\n\r\n        //rewards\r\n        _ethReflectionBasis += afterBalance;\r\n\r\n     }\r\n    \r\n    function _claimReflection(address payable addr) internal {\r\n\r\n        if (_reflectionExcluded[addr] || addr == uniswapV2Pair || addr == address(_uniswapV2Router)) return;\r\n\r\n        uint256 basisDifference = _ethReflectionBasis - _lastReflectionBasis[addr];\r\n        uint256 owed = (basisDifference * balanceOf(addr)) / _totalSupply;\r\n        _lastReflectionBasis[addr] = _ethReflectionBasis;\r\n        if (owed == 0) {\r\n                return;\r\n        }\r\n        addr.transfer(owed);\r\n\t_totalWalletRewards[addr] += owed;\r\n        _totalDistributed += owed;\r\n    }\r\n\r\n    function claimETHRewards() public {\r\n        _claimReflection(payable(msg.sender));\r\n    }\r\n    \r\n    function totalBurned() public view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n \r\n    function pendingRewards(address addr) public view returns (uint256) {\r\n        if (_reflectionExcluded[addr]) {\r\n           return 0;\r\n        }\r\n        uint256 basisDifference = _ethReflectionBasis - _lastReflectionBasis[addr];\r\n        uint256 owed = (basisDifference * balanceOf(addr)) / _totalSupply;\r\n        return owed;\r\n    }\r\n\r\n    function totalWalletRewards(address addr) public view returns (uint256) {\r\n        return _totalWalletRewards[addr];\r\n    }\r\n\r\n \r\n    function totalRewardsDistributed() public view returns (uint256) {\r\n        return _totalDistributed;\r\n    }\r\n\r\n    function addReflection() public payable {\r\n        _ethReflectionBasis += msg.value;\r\n    }\r\n\r\n    function setExcludeFromFee(address[] memory accounts, bool value) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            _isExcludedFromFee[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function amnestyBot (address bot) external onlyOwner {\r\n        isBot[bot] = false;\r\n        _reflectionExcluded[bot] = false;\r\n        _totalBotSupply -= _balances[bot]; \r\n        \r\n        for (uint256 i = 0; i < blacklistedBotWallets.length; ++i) {\r\n            if (blacklistedBotWallets[i] == bot) {\r\n                blacklistedBotWallets[i] = blacklistedBotWallets[blacklistedBotWallets.length - 1];\r\n                blacklistedBotWallets.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateSwapThreshold (uint256 amount) public onlyOwner {\r\n        swapThreshold = amount * 1e18;\r\n    }\r\n\r\n    function setSwapandLiquify (bool value) external onlyOwner {\r\n        _swapandliquifyEnabled = value;\r\n    }\r\n\r\n    function _setEnabletrading() external onlyOwner {\r\n        incrementTime = block.timestamp;\r\n        maxBuyIncrementValue = (_totalSupply * maxBuyIncrementPercent) / 6000;\r\n        _autoBanBots = false;\r\n    }\r\n\r\n    // This function below is meant to clear the balance stuck in the contract resulting from unclaimed rewards.\r\n    // As long as the liquidity exists this function cannot execute, it will revert.\r\n\r\n    function rescueStuckBalance() external {\r\n    // The next line is to check if liquidity exists\r\n        require (_balances[uniswapV2Pair] < (_initialSupply / 100)); // Slippage while removing liquidity cannot be avoided, hence the 1% supply check\r\n        uint256 balance = address(this).balance;\r\n        payable(ecosystemWallet).transfer(balance);\r\n        \r\n    }\r\n\r\n    function isOwner(address account) internal virtual returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract SecretSauce is TradableErc20 {\r\n    address _owner;\r\n\r\n    constructor() TradableErc20(\"SecretSauce\", \"SAUCE\") {\r\n        _owner = msg.sender;\r\n        _setMaxBuy(10);\r\n    }\r\n\r\n    function isOwner(address account) internal view override returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deployerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_setEnabletrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapandliquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBotSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addReflection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"amnestyBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blacklistedBotWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlySellTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyIncrementValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwapandLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useSellTime\",\"type\":\"bool\"}],\"name\":\"setUseEarlySellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setecosystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalWalletRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SecretSauce", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac66622e713c24f4323b84c41bc5d2e6a21e9f527e307881caec556b1cef9a5c"}]}