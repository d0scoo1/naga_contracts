{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: default_workspace/contracts/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nerror NotOwner();\r\n\r\n// https://github.com/m1guelpf/erc721-drop/blob/main/src/LilOwnable.sol\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external {\r\n        if (msg.sender != _owner) revert NotOwner();\r\n\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public {\r\n        if (msg.sender != _owner) revert NotOwner();\r\n\r\n        _owner = address(0);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        pure\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return interfaceId == 0x7f5828d0; // ERC165 Interface ID for ERC173\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/lib/Merkle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Merkle {\r\n    function checkMembership(\r\n        bytes32 leaf,\r\n        uint256 index,\r\n        bytes32 rootHash,\r\n        bytes memory proof\r\n    ) internal pure returns (bool) {\r\n        require(proof.length % 32 == 0, \"Invalid proof length\");\r\n        uint256 proofHeight = proof.length / 32;\r\n        // Proof of size n means, height of the tree is n+1.\r\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\r\n        require(index < 2**proofHeight, \"Leaf index is too big\");\r\n\r\n        bytes32 proofElement;\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            assembly {\r\n                proofElement := mload(add(proof, i))\r\n            }\r\n\r\n            if (index % 2 == 0) {\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n\r\n            index = index / 2;\r\n        }\r\n        return computedHash == rootHash;\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/lib/RLPReader.sol\r\n\r\n/*\r\n * @author Hamdi Allam hamdi.allam97@gmail.com\r\n * Please reach out with any questions or concerns\r\n */\r\npragma solidity ^0.8.0;\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START = 0xb8;\r\n    uint8 constant LIST_SHORT_START = 0xc0;\r\n    uint8 constant LIST_LONG_START = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint256 len;\r\n        uint256 memPtr;\r\n    }\r\n\r\n    struct Iterator {\r\n        RLPItem item; // Item that's being iterated over.\r\n        uint256 nextPtr; // Position of the next item in the list.\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\r\n     * @param self The iterator.\r\n     * @return The next element in the iteration.\r\n     */\r\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\r\n        require(hasNext(self));\r\n\r\n        uint256 ptr = self.nextPtr;\r\n        uint256 itemLength = _itemLength(ptr);\r\n        self.nextPtr = ptr + itemLength;\r\n\r\n        return RLPItem(itemLength, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the iteration has more elements.\r\n     * @param self The iterator.\r\n     * @return true if the iteration has more elements.\r\n     */\r\n    function hasNext(Iterator memory self) internal pure returns (bool) {\r\n        RLPItem memory item = self.item;\r\n        return self.nextPtr < item.memPtr + item.len;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        uint256 memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n     * @dev Create an iterator. Reverts if item is not a list.\r\n     * @param self The RLP item.\r\n     * @return An 'Iterator' over the item.\r\n     */\r\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\r\n        require(isList(self));\r\n\r\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\r\n        return Iterator(self, ptr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\r\n        return item.len;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\r\n        return item.len - _payloadOffset(item.memPtr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded list in bytes\r\n     */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\r\n        require(isList(item));\r\n\r\n        uint256 items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n\r\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 dataLen;\r\n        for (uint256 i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr);\r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        if (item.len == 0) return false;\r\n\r\n        uint8 byte0;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START) return false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of RLP encoded bytes.\r\n     */\r\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        uint256 ptr = item.memPtr;\r\n        uint256 len = item.len;\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(ptr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 memPtr = item.memPtr + offset;\r\n        uint256 len = item.len - offset; // data length\r\n        return (memPtr, len);\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of the item payload.\r\n     */\r\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(memPtr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        bytes memory result = new bytes(item.len);\r\n        if (result.length == 0) return result;\r\n\r\n        uint256 ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    // any non-zero byte is considered true\r\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\r\n        require(item.len == 1);\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            result := byte(0, mload(memPtr))\r\n        }\r\n\r\n        return result == 0 ? false : true;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21);\r\n\r\n        return address(uint160(toUint(item)));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\r\n        require(item.len > 0 && item.len <= 33);\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset;\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + offset;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\r\n        // one byte prefix\r\n        require(item.len == 33);\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        require(item.len > 0);\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint256 destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n     * Private Helpers\r\n     */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint256) {\r\n        if (item.len == 0) return 0;\r\n\r\n        uint256 count = 0;\r\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 itemLen;\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\r\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        } else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\r\n        else if (byte0 < LIST_SHORT_START)\r\n            // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n     * @param src Pointer to source\r\n     * @param dest Pointer to destination\r\n     * @param len Amount of memory to copy from the source\r\n     */\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        if (len == 0) return;\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/lib/ExitPayloadReader.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary ExitPayloadReader {\r\n    using RLPReader for bytes;\r\n    using RLPReader for RLPReader.RLPItem;\r\n\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct ExitPayload {\r\n        RLPReader.RLPItem[] data;\r\n    }\r\n\r\n    struct Receipt {\r\n        RLPReader.RLPItem[] data;\r\n        bytes raw;\r\n        uint256 logIndex;\r\n    }\r\n\r\n    struct Log {\r\n        RLPReader.RLPItem data;\r\n        RLPReader.RLPItem[] list;\r\n    }\r\n\r\n    struct LogTopics {\r\n        RLPReader.RLPItem[] data;\r\n    }\r\n\r\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\r\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\r\n\r\n        return ExitPayload(payloadData);\r\n    }\r\n\r\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[0].toUint();\r\n    }\r\n\r\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[1].toBytes();\r\n    }\r\n\r\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[2].toUint();\r\n    }\r\n\r\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[3].toUint();\r\n    }\r\n\r\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\r\n        return bytes32(payload.data[4].toUint());\r\n    }\r\n\r\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\r\n        return bytes32(payload.data[5].toUint());\r\n    }\r\n\r\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\r\n        receipt.raw = payload.data[6].toBytes();\r\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\r\n\r\n        if (receiptItem.isList()) {\r\n            // legacy tx\r\n            receipt.data = receiptItem.toList();\r\n        } else {\r\n            // pop first byte before parsting receipt\r\n            bytes memory typedBytes = receipt.raw;\r\n            bytes memory result = new bytes(typedBytes.length - 1);\r\n            uint256 srcPtr;\r\n            uint256 destPtr;\r\n            assembly {\r\n                srcPtr := add(33, typedBytes)\r\n                destPtr := add(0x20, result)\r\n            }\r\n\r\n            copy(srcPtr, destPtr, result.length);\r\n            receipt.data = result.toRlpItem().toList();\r\n        }\r\n\r\n        receipt.logIndex = getReceiptLogIndex(payload);\r\n        return receipt;\r\n    }\r\n\r\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[7].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[8].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[8].toUint();\r\n    }\r\n\r\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[9].toUint();\r\n    }\r\n\r\n    // Receipt methods\r\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\r\n        return receipt.raw;\r\n    }\r\n\r\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\r\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\r\n        return Log(logData, logData.toList());\r\n    }\r\n\r\n    // Log methods\r\n    function getEmitter(Log memory log) internal pure returns (address) {\r\n        return RLPReader.toAddress(log.list[0]);\r\n    }\r\n\r\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\r\n        return LogTopics(log.list[1].toList());\r\n    }\r\n\r\n    function getData(Log memory log) internal pure returns (bytes memory) {\r\n        return log.list[2].toBytes();\r\n    }\r\n\r\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\r\n        return log.data.toRlpBytes();\r\n    }\r\n\r\n    // LogTopics methods\r\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\r\n        return topics.data[index];\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/lib/MerklePatriciaProof.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary MerklePatriciaProof {\r\n    /*\r\n     * @dev Verifies a merkle patricia proof.\r\n     * @param value The terminating value in the trie.\r\n     * @param encodedPath The path in the trie leading to value.\r\n     * @param rlpParentNodes The rlp encoded stack of nodes.\r\n     * @param root The root hash of the trie.\r\n     * @return The boolean validity of the proof.\r\n     */\r\n    function verify(\r\n        bytes memory value,\r\n        bytes memory encodedPath,\r\n        bytes memory rlpParentNodes,\r\n        bytes32 root\r\n    ) internal pure returns (bool) {\r\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\r\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\r\n\r\n        bytes memory currentNode;\r\n        RLPReader.RLPItem[] memory currentNodeList;\r\n\r\n        bytes32 nodeKey = root;\r\n        uint256 pathPtr = 0;\r\n\r\n        bytes memory path = _getNibbleArray(encodedPath);\r\n        if (path.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < parentNodes.length; i++) {\r\n            if (pathPtr > path.length) {\r\n                return false;\r\n            }\r\n\r\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\r\n            if (nodeKey != keccak256(currentNode)) {\r\n                return false;\r\n            }\r\n            currentNodeList = RLPReader.toList(parentNodes[i]);\r\n\r\n            if (currentNodeList.length == 17) {\r\n                if (pathPtr == path.length) {\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                uint8 nextPathNibble = uint8(path[pathPtr]);\r\n                if (nextPathNibble > 16) {\r\n                    return false;\r\n                }\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\r\n                pathPtr += 1;\r\n            } else if (currentNodeList.length == 2) {\r\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\r\n                if (pathPtr + traversed == path.length) {\r\n                    //leaf node\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //extension node\r\n                if (traversed == 0) {\r\n                    return false;\r\n                }\r\n\r\n                pathPtr += traversed;\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _nibblesToTraverse(\r\n        bytes memory encodedPartialPath,\r\n        bytes memory path,\r\n        uint256 pathPtr\r\n    ) private pure returns (uint256) {\r\n        uint256 len = 0;\r\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\r\n        // and slicedPath have elements that are each one hex character (1 nibble)\r\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\r\n        bytes memory slicedPath = new bytes(partialPath.length);\r\n\r\n        // pathPtr counts nibbles in path\r\n        // partialPath.length is a number of nibbles\r\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\r\n            bytes1 pathNibble = path[i];\r\n            slicedPath[i - pathPtr] = pathNibble;\r\n        }\r\n\r\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\r\n            len = partialPath.length;\r\n        } else {\r\n            len = 0;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    // bytes b must be hp encoded\r\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\r\n        bytes memory nibbles = \"\";\r\n        if (b.length > 0) {\r\n            uint8 offset;\r\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\r\n            if (hpNibble == 1 || hpNibble == 3) {\r\n                nibbles = new bytes(b.length * 2 - 1);\r\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\r\n                nibbles[0] = oddNibble;\r\n                offset = 1;\r\n            } else {\r\n                nibbles = new bytes(b.length * 2 - 2);\r\n                offset = 0;\r\n            }\r\n\r\n            for (uint256 i = offset; i < nibbles.length; i++) {\r\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\r\n            }\r\n        }\r\n        return nibbles;\r\n    }\r\n\r\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\r\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/tunnel/FxBaseRootTunnel.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IFxStateSender {\r\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\r\n}\r\n\r\ncontract ICheckpointManager {\r\n    struct HeaderBlock {\r\n        bytes32 root;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 createdAt;\r\n        address proposer;\r\n    }\r\n\r\n    /**\r\n     * @notice mapping of checkpoint header numbers to block details\r\n     * @dev These checkpoints are submited by plasma contracts\r\n     */\r\n    mapping(uint256 => HeaderBlock) public headerBlocks;\r\n}\r\n\r\nabstract contract FxBaseRootTunnel {\r\n    using RLPReader for RLPReader.RLPItem;\r\n    using Merkle for bytes32;\r\n    using ExitPayloadReader for bytes;\r\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\r\n    using ExitPayloadReader for ExitPayloadReader.Log;\r\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\r\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\r\n\r\n    // keccak256(MessageSent(bytes))\r\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\r\n\r\n    // state sender contract\r\n    IFxStateSender public fxRoot;\r\n    // root chain manager\r\n    ICheckpointManager public checkpointManager;\r\n    // child tunnel contract which receives and sends messages\r\n    address public fxChildTunnel;\r\n\r\n    // storage to avoid duplicate exits\r\n    mapping(bytes32 => bool) public processedExits;\r\n\r\n    constructor(address _checkpointManager, address _fxRoot) {\r\n        checkpointManager = ICheckpointManager(_checkpointManager);\r\n        fxRoot = IFxStateSender(_fxRoot);\r\n    }\r\n\r\n    // set fxChildTunnel if not set already\r\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\r\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\r\n        fxChildTunnel = _fxChildTunnel;\r\n    }\r\n\r\n    /**\r\n     * @notice Send bytes message to Child Tunnel\r\n     * @param message bytes message that will be sent to Child Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToChild(bytes memory message) internal {\r\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\r\n    }\r\n\r\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\r\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\r\n\r\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\r\n        uint256 blockNumber = payload.getBlockNumber();\r\n        // checking if exit has already been processed\r\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\r\n        bytes32 exitHash = keccak256(\r\n            abi.encodePacked(\r\n                blockNumber,\r\n                // first 2 nibbles are dropped while generating nibble array\r\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\r\n                // so converting to nibble array and then hashing it\r\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\r\n                payload.getReceiptLogIndex()\r\n            )\r\n        );\r\n        require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\r\n        processedExits[exitHash] = true;\r\n\r\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\r\n        ExitPayloadReader.Log memory log = receipt.getLog();\r\n\r\n        // check child tunnel\r\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\r\n\r\n        bytes32 receiptRoot = payload.getReceiptRoot();\r\n        // verify receipt inclusion\r\n        require(\r\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\r\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\r\n        );\r\n\r\n        // verify checkpoint inclusion\r\n        _checkBlockMembershipInCheckpoint(\r\n            blockNumber,\r\n            payload.getBlockTime(),\r\n            payload.getTxRoot(),\r\n            receiptRoot,\r\n            payload.getHeaderNumber(),\r\n            payload.getBlockProof()\r\n        );\r\n\r\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\r\n\r\n        require(\r\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\r\n            \"FxRootTunnel: INVALID_SIGNATURE\"\r\n        );\r\n\r\n        // received message data\r\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\r\n        return message;\r\n    }\r\n\r\n    function _checkBlockMembershipInCheckpoint(\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        bytes32 txRoot,\r\n        bytes32 receiptRoot,\r\n        uint256 headerNumber,\r\n        bytes memory blockProof\r\n    ) private view returns (uint256) {\r\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\r\n\r\n        require(\r\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\r\n                blockNumber - startBlock,\r\n                headerRoot,\r\n                blockProof\r\n            ),\r\n            \"FxRootTunnel: INVALID_HEADER\"\r\n        );\r\n        return createdAt;\r\n    }\r\n\r\n    /**\r\n     * @notice receive message from  L2 to L1, validated by proof\r\n     * @dev This function verifies if the transaction actually happened on child chain\r\n     *\r\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\r\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\r\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\r\n     *  2 - blockNumber - Block number containing the reference tx on child chain\r\n     *  3 - blockTime - Reference tx block time\r\n     *  4 - txRoot - Transactions root of block\r\n     *  5 - receiptRoot - Receipts root of block\r\n     *  6 - receipt - Receipt of the reference transaction\r\n     *  7 - receiptProof - Merkle proof of the reference receipt\r\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\r\n     *  9 - receiptLogIndex - Log Index to read from the receipt\r\n     */\r\n    function receiveMessage(bytes memory inputData) public virtual {\r\n        bytes memory message = _validateAndExtractMessage(inputData);\r\n        _processMessageFromChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Child Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param message bytes message that was sent from Child Tunnel\r\n     */\r\n    function _processMessageFromChild(bytes memory message) internal virtual;\r\n}\r\n\r\n// File: default_workspace/contracts/IDungeonRewards.sol\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\ninterface IDungeonRewards {\r\n\r\n    // so we can confirm whether a wallet holds any staked dungeons, useful for Generative Avatars gas-only mint\r\n    function balanceOfDungeons(address owner) external view returns (uint256);\r\n    // so we can confirm when a wallet staked their dungeons, useful for Generative Avatars gas-only mint\r\n    function dungeonFirstStaked(address owner) external view returns (uint256);\r\n\r\n    function balanceOfAvatars(address owner) external view returns (uint256);\r\n    function avatarFirstStaked(address owner) external  view returns (uint256);\r\n\r\n    function balanceOfQuests(address owner) external view returns (uint256);\r\n    function questFirstStaked(address owner) external view returns (uint256);\r\n\r\n    function getStakedTokens(address user) external view returns (uint256[] memory dungeons, uint256[] memory avatars, \r\n                                                                  uint256[] memory quests);\r\n  \r\n}\r\n// File: default_workspace/contracts/ERC721.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\r\nabstract contract ERC721 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC721 STORAGE                        \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        require(from == ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            balanceOf[from]--;\r\n\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(ownerOf[id] != address(0), \"NOT_MINTED\");\r\n\r\n        // Ownership check above ensures no underflow.\r\n        unchecked {\r\n            balanceOf[owner]--;\r\n        }\r\n\r\n        delete ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: default_workspace/contracts/IDNGToken.sol\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\ninterface IDNGToken {\r\n    enum NftType {\r\n        Dungeon,\r\n        Avatar,\r\n        Quest\r\n    }\r\n}\r\n\r\n// File: default_workspace/contracts/DungeonRewards.sol\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n ________  ___  ___  ________   ________  _______   ________  ________          \r\n|\\   ___ \\|\\  \\|\\  \\|\\   ___  \\|\\   ____\\|\\  ___ \\ |\\   __  \\|\\   ___  \\        \r\n\\ \\  \\_|\\ \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\  \\___|\\ \\   __/|\\ \\  \\|\\  \\ \\  \\\\ \\  \\       \r\n \\ \\  \\ \\\\ \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\  \\  __\\ \\  \\_|/_\\ \\  \\\\\\  \\ \\  \\\\ \\  \\      \r\n  \\ \\  \\_\\\\ \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \\  \\|\\  \\ \\  \\_|\\ \\ \\  \\\\\\  \\ \\  \\\\ \\  \\     \r\n   \\ \\_______\\ \\_______\\ \\__\\\\ \\__\\ \\_______\\ \\_______\\ \\_______\\ \\__\\\\ \\__\\    \r\n    \\|_______|\\|_______|\\|__| \\|__|\\|_______|\\|_______|\\|_______|\\|__| \\|__|    \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n ________  _______   ___       __   ________  ________  ________  ________      \r\n|\\   __  \\|\\  ___ \\ |\\  \\     |\\  \\|\\   __  \\|\\   __  \\|\\   ___ \\|\\   ____\\     \r\n\\ \\  \\|\\  \\ \\   __/|\\ \\  \\    \\ \\  \\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\_|\\ \\ \\  \\___|_    \r\n \\ \\   _  _\\ \\  \\_|/_\\ \\  \\  __\\ \\  \\ \\   __  \\ \\   _  _\\ \\  \\ \\\\ \\ \\_____  \\   \r\n  \\ \\  \\\\  \\\\ \\  \\_|\\ \\ \\  \\|\\__\\_\\  \\ \\  \\ \\  \\ \\  \\\\  \\\\ \\  \\_\\\\ \\|____|\\  \\  \r\n   \\ \\__\\\\ _\\\\ \\_______\\ \\____________\\ \\__\\ \\__\\ \\__\\\\ _\\\\ \\_______\\____\\_\\  \\ \r\n    \\|__|\\|__|\\|_______|\\|____________|\\|__|\\|__|\\|__|\\|__|\\|_______|\\_________\\\r\n                                                                    \\|_________|\r\n                                                                                \r\n**/\r\n\r\ncontract DungeonRewards is IDungeonRewards, IDNGToken, FxBaseRootTunnel, Ownable {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    ERC721 public dungeonContract;\r\n    ERC721 public avatarContract;\r\n    ERC721 public questContract;\r\n\r\n    struct Staker {\r\n        uint256[] stakedDungeons;\r\n        uint256 dungeonStakedOn;     // timestamp of when holder first staked their dungeon(s) (used to calculated eligibility for avatars).\r\n        uint256[] stakedAvatars;\r\n        uint256 avatarStakedOn;     // timestamp of when holder first staked their avatar(s)\r\n        uint256[] stakedQuests;\r\n        uint256 questStakedOn;     // timestamp of when holder first staked their quest(s)\r\n    }\r\n\r\n    mapping(address => Staker) public userInfo;\r\n\r\n    bool public stakingPaused;\r\n\r\n    constructor(\r\n        address checkpointManager,\r\n        address fxRoot,\r\n        address _dungeonContract\r\n    ) FxBaseRootTunnel(checkpointManager, fxRoot) {\r\n        dungeonContract = ERC721(_dungeonContract);\r\n    }\r\n\r\n    // @notice Set the contract addresses for all future instances.\r\n    function setContractAddresses(\r\n        address _avatarContract,\r\n        address _questContract\r\n    ) public onlyOwner {\r\n        avatarContract = ERC721(_avatarContract);\r\n        questContract = ERC721(_questContract);\r\n    }\r\n\r\n    // Pause staking and unstaking\r\n    function setStakingPaused(bool paused) public onlyOwner {\r\n        stakingPaused = paused;\r\n    }\r\n\r\n\r\n    // For collab.land to give a role based on staking status\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        if(balanceOfDungeons(owner)>0 && balanceOfAvatars(owner)>0 && balanceOfQuests(owner)>0) return 3;\r\n        if(balanceOfDungeons(owner)>0 && balanceOfAvatars(owner)>0 && balanceOfQuests(owner)==0) return 2;\r\n        if(balanceOfDungeons(owner)>0 && balanceOfAvatars(owner)==0 && balanceOfQuests(owner)==0) return 1;\r\n        return 0;\r\n    }\r\n\r\n    // so we can confirm whether a wallet holds any staked dungeons, useful for Generative Avatars gas-only mint\r\n    function balanceOfDungeons(address owner) public view returns (uint256) {\r\n        return userInfo[owner].stakedDungeons.length;\r\n    }\r\n    // so we can confirm when a wallet staked their dungeons, useful for Generative Avatars gas-only mint\r\n    function dungeonFirstStaked(address owner) public view returns (uint256) {\r\n        return userInfo[owner].dungeonStakedOn;\r\n    }\r\n\r\n    function balanceOfAvatars(address owner) public view returns (uint256) {\r\n        return userInfo[owner].stakedAvatars.length;\r\n    }\r\n    function avatarFirstStaked(address owner) public view returns (uint256) {\r\n        return userInfo[owner].avatarStakedOn;\r\n    }\r\n\r\n    function balanceOfQuests(address owner) public view returns (uint256) {\r\n        return userInfo[owner].stakedQuests.length;\r\n    }\r\n    function questFirstStaked(address owner) public view returns (uint256) {\r\n        return userInfo[owner].questStakedOn;\r\n    }\r\n\r\n\r\n    // get staked tokens for address\r\n    function getStakedTokens(address user) public view returns (\r\n            uint256[] memory dungeons,\r\n            uint256[] memory avatars,\r\n            uint256[] memory quests\r\n        )\r\n    {\r\n        Staker memory staker = userInfo[user];\r\n        return (\r\n            staker.stakedDungeons,\r\n            staker.stakedAvatars,\r\n            staker.stakedQuests\r\n        );\r\n    }\r\n\r\n    function bulkStake(\r\n        uint256[] memory dungeons,\r\n        uint256[] memory avatars,\r\n        uint256[] memory quests\r\n    ) public {\r\n        if (dungeons.length > 0) stakeMultipleDungeons(dungeons);\r\n        if (avatars.length > 0) stakeMultipleAvatars(avatars);\r\n        if (quests.length > 0) stakeMultipleQuests(quests);        \r\n    }\r\n\r\n    function bulkUnstake(\r\n        uint256[] memory dungeons,\r\n        uint256[] memory avatars,\r\n        uint256[] memory quests\r\n    ) public {\r\n        if (dungeons.length > 0) unstakeMultipleDungeons(dungeons);\r\n        if (avatars.length > 0) unstakeMultipleAvatars(avatars);\r\n        if (quests.length > 0) unstakeMultipleQuests(quests);        \r\n    }\r\n\r\n    function stakeMultipleDungeons(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking currently paused.\");\r\n        require(tokenIds.length>0, \"No tokenIds provided.\");\r\n\r\n        Staker storage staker = userInfo[msg.sender];\r\n\r\n        if (staker.dungeonStakedOn == 0) { // set our dungeon staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.dungeonStakedOn = block.timestamp; \r\n        }\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            staker.stakedDungeons.push(tokenIds[i]);\r\n            dungeonContract.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds[i]\r\n            );\r\n        }\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Dungeon),\r\n                tokenIds.length,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    function unstakeMultipleDungeons(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(containsElement(staker.stakedDungeons, tokenId), \"Not dungeon owner.\");\r\n            dungeonContract.transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n            removeDungeonFromStaker(staker, tokenId);\r\n        }\r\n\r\n        if (staker.stakedDungeons.length == 0) { // no more staked dungeons? \r\n            staker.dungeonStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n        // stop accumulating $DNG rewards on polygon for these dungeons\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Dungeon),\r\n                tokenIds.length,\r\n                false\r\n            )\r\n        );\r\n    }\r\n\r\n    // Stake a single Dungeon (separate function to optimize for gas)\r\n    // @param tokenId The tokenId of the dungeon to stake\r\n    function stakeDungeon(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        staker.stakedDungeons.push(tokenId);\r\n        dungeonContract.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokenId\r\n        );\r\n        if (staker.dungeonStakedOn == 0) { // set our dungeon staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.dungeonStakedOn = block.timestamp; \r\n        }\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Dungeon),\r\n                1,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    // Unstake a Dungeon\r\n    // @param tokenId The tokenId of the dungeon to unstake\r\n    function unstakeDungeon(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        require(containsElement(staker.stakedDungeons, tokenId), \"Not dungeon owner.\");\r\n\r\n        dungeonContract.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            tokenId\r\n        );\r\n\r\n        removeDungeonFromStaker(staker, tokenId);\r\n\r\n        if (staker.stakedDungeons.length == 0) { // no more staked dungeons? \r\n            staker.dungeonStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n\r\n        // stop accumulating $DNG rewards on polygon for these dungeons\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Dungeon),\r\n                1,\r\n                false\r\n            )\r\n        );\r\n\r\n    }\r\n\r\n    function stakeMultipleAvatars(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking currently paused.\");\r\n        require(tokenIds.length>0, \"No tokenIds provided.\");\r\n\r\n        Staker storage staker = userInfo[msg.sender];\r\n\r\n        if (staker.avatarStakedOn == 0) { // set our avatar staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.avatarStakedOn = block.timestamp; \r\n        }\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            staker.stakedAvatars.push(tokenIds[i]);\r\n            avatarContract.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds[i]\r\n            );\r\n        }\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Avatar),\r\n                tokenIds.length,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    function unstakeMultipleAvatars(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(containsElement(staker.stakedAvatars, tokenId), \"Not avatar owner.\");\r\n            avatarContract.transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n            removeAvatarFromStaker(staker, tokenId);\r\n        }\r\n\r\n        if (staker.stakedAvatars.length == 0) { // no more staked avatars? \r\n            staker.avatarStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n        // stop accumulating $DNG rewards on polygon for these avatars\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Avatar),\r\n                tokenIds.length,\r\n                false\r\n            )\r\n        );\r\n    }\r\n\r\n    // Stake a single Avatar (separate function to optimize for gas)\r\n    // @param tokenId The tokenId of the avatar to stake\r\n    function stakeAvatar(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        staker.stakedAvatars.push(tokenId);\r\n        avatarContract.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokenId\r\n        );\r\n        if (staker.avatarStakedOn == 0) { // set our avatar staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.avatarStakedOn = block.timestamp; \r\n        }\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Avatar),\r\n                1,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    // Unstake a Avatar\r\n    // @param tokenId The tokenId of the avatar to unstake\r\n    function unstakeAvatar(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        require(containsElement(staker.stakedAvatars, tokenId), \"Not avatar owner.\");\r\n\r\n        avatarContract.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            tokenId\r\n        );\r\n\r\n        removeAvatarFromStaker(staker, tokenId);\r\n\r\n        if (staker.stakedAvatars.length == 0) { // no more staked avatars? \r\n            staker.avatarStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n\r\n        // stop accumulating $DNG rewards on polygon for these avatars\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Avatar),\r\n                1,\r\n                false\r\n            )\r\n        );\r\n\r\n    }\r\n\r\n\r\n    function stakeMultipleQuests(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking currently paused.\");\r\n        require(tokenIds.length>0, \"No tokenIds provided.\");\r\n\r\n        Staker storage staker = userInfo[msg.sender];\r\n\r\n        if (staker.questStakedOn == 0) { // set our quest staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.questStakedOn = block.timestamp; \r\n        }\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            staker.stakedQuests.push(tokenIds[i]);\r\n            questContract.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokenIds[i]\r\n            );\r\n        }\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Quest),\r\n                tokenIds.length,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    function unstakeMultipleQuests(uint256[] memory tokenIds) public {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(containsElement(staker.stakedQuests, tokenId), \"Not quest owner.\");\r\n            questContract.transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n            removeQuestFromStaker(staker, tokenId);\r\n        }\r\n\r\n        if (staker.stakedQuests.length == 0) { // no more staked quests? \r\n            staker.questStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n        // stop accumulating $DNG rewards on polygon for these quests\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Quest),\r\n                tokenIds.length,\r\n                false\r\n            )\r\n        );\r\n    }\r\n\r\n    // Stake a single Quest (separate function to optimize for gas)\r\n    // @param tokenId The tokenId of the quest to stake\r\n    function stakeQuest(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        staker.stakedQuests.push(tokenId);\r\n        questContract.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokenId\r\n        );\r\n        if (staker.questStakedOn == 0) { // set our quest staked on once (if they unstake, it resets to zero and will be reset when they stake again)\r\n            staker.questStakedOn = block.timestamp; \r\n        }\r\n\r\n        // start accumulating $DNG rewards on polygon\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Quest),\r\n                1,\r\n                true\r\n            )\r\n        );\r\n    }\r\n\r\n    // Unstake a Quest\r\n    // @param tokenId The tokenId of the quest to unstake\r\n    function unstakeQuest(uint256 tokenId) external {\r\n        require(!stakingPaused, \"Staking is currently paused.\");\r\n        Staker storage staker = userInfo[msg.sender];\r\n        require(containsElement(staker.stakedQuests, tokenId), \"Not quest owner.\");\r\n\r\n        questContract.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            tokenId\r\n        );\r\n\r\n        removeQuestFromStaker(staker, tokenId);\r\n\r\n        if (staker.stakedQuests.length == 0) { // no more staked quests? \r\n            staker.questStakedOn = 0; // then we reset the staked on date to 0 (so can be set to block.timestamp when it's staked again)\r\n        }\r\n\r\n        // stop accumulating $DNG rewards on polygon for these quests\r\n        _sendMessageToChild(\r\n            abi.encode(\r\n                msg.sender,\r\n                uint256(NftType.Quest),\r\n                1,\r\n                false\r\n            )\r\n        );\r\n\r\n    }\r\n\r\n    function removeDungeonFromStaker(Staker storage staker, uint256 tokenId) private {\r\n        uint256[] memory stakedDungeons = staker.stakedDungeons;\r\n        uint256 index;\r\n        for (uint256 j; j < stakedDungeons.length; j++) {\r\n            if (stakedDungeons[j] == tokenId) index = j;\r\n        }\r\n        if (stakedDungeons[index] == tokenId) {\r\n            staker.stakedDungeons[index] = stakedDungeons[\r\n                staker.stakedDungeons.length - 1\r\n            ];\r\n            staker.stakedDungeons.pop();\r\n        }\r\n    }\r\n\r\n    function removeAvatarFromStaker(Staker storage staker, uint256 tokenId) private {\r\n        uint256[] memory stakedAvatars = staker.stakedAvatars;\r\n        uint256 index;\r\n        for (uint256 j; j < stakedAvatars.length; j++) {\r\n            if (stakedAvatars[j] == tokenId) index = j;\r\n        }\r\n        if (stakedAvatars[index] == tokenId) {\r\n            staker.stakedAvatars[index] = stakedAvatars[\r\n                staker.stakedAvatars.length - 1\r\n            ];\r\n            staker.stakedAvatars.pop();\r\n        }\r\n    }\r\n\r\n    function removeQuestFromStaker(Staker storage staker, uint256 tokenId) private {\r\n        uint256[] memory stakedQuests = staker.stakedQuests;\r\n        uint256 index;\r\n        for (uint256 j; j < stakedQuests.length; j++) {\r\n            if (stakedQuests[j] == tokenId) index = j;\r\n        }\r\n        if (stakedQuests[index] == tokenId) {\r\n            staker.stakedQuests[index] = stakedQuests[\r\n                staker.stakedQuests.length - 1\r\n            ];\r\n            staker.stakedQuests.pop();\r\n        }\r\n    }\r\n\r\n    function _processMessageFromChild(bytes memory message) internal override {\r\n        // we don't process any messages from the child chain (Polygon)\r\n    }\r\n\r\n    function containsElement(uint[] memory elements, uint tokenId) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < elements.length; i++) {\r\n           if(elements[i] == tokenId) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external pure returns (bytes4) {\r\n        return ERC721TokenReceiver.onERC721Received.selector;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dungeonContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatarContract\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"avatarFirstStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfAvatars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfDungeons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfQuests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dungeons\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"avatars\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quests\",\"type\":\"uint256[]\"}],\"name\":\"bulkStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dungeons\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"avatars\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quests\",\"type\":\"uint256[]\"}],\"name\":\"bulkUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dungeonContract\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"dungeonFirstStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"dungeons\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"avatars\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quests\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questContract\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"questFirstStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_avatarContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questContract\",\"type\":\"address\"}],\"name\":\"setContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setStakingPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeDungeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMultipleAvatars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMultipleDungeons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMultipleQuests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeDungeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMultipleAvatars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMultipleDungeons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMultipleQuests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstakeQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dungeonStakedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avatarStakedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questStakedOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DungeonRewards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000086e4dc95c7fbdbf52e33d563bbdb00823894c287000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a200000000000000000000000018487d2cac946c7fe800855c4039aac210f68baa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e0052f2db19d7a445185f864f84206c0a7108e7286ea9dacdc8eeafcaef33fd"}]}