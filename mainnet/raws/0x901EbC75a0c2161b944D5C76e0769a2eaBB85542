{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/periphery/mainnet/deleverageAndWithdraw/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./events.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract AdminModule is Events {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Reentrancy gaurd.\\n     */\\n    modifier nonReentrant() {\\n        require(status != 2, \\\"ReentrancyGuard: reentrant call\\\");\\n        status = 2;\\n        _;\\n        status = 1;\\n    }\\n\\n    /**\\n     * @dev Only auth gaurd.\\n     */\\n    modifier onlyAuth() {\\n        require(auth == msg.sender, \\\"only auth\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update auth.\\n     * @param auth_ address of new auth.\\n     */\\n    function updateAuth(address auth_) external onlyAuth {\\n        auth = auth_;\\n        emit updateAuthLog(auth_);\\n    }\\n\\n    /**\\n     * @dev Update if vault or not.\\n     * @param vaultAddr_ address of vault.\\n     * @param isVault_ true for adding the vault, false for removing.\\n     */\\n    function updateVault(address vaultAddr_, bool isVault_) external onlyAuth {\\n        isVault[vaultAddr_] = isVault_;\\n        emit updateVaultLog(vaultAddr_, isVault_);\\n    }\\n\\n    /**\\n     * @dev Update premium.\\n     * @param premium_ new premium.\\n     */\\n    function updatePremium(uint256 premium_) external onlyAuth {\\n        premium = premium_;\\n        emit updatePremiumLog(premium_);\\n    }\\n\\n    /**\\n     * @dev Update premium.\\n     * @param premiumEth_ new premium.\\n     */\\n    function updatePremiumEth(uint256 premiumEth_) external onlyAuth {\\n        premiumEth = premiumEth_;\\n        emit updatePremiumEthLog(premiumEth_);\\n    }\\n\\n    /**\\n     * @dev Function to withdraw premium collected.\\n     * @param tokens_ list of token addresses.\\n     * @param amounts_ list of corresponding amounts.\\n     * @param to_ address to transfer the funds to.\\n     */\\n    function withdrawPremium(\\n        address[] memory tokens_,\\n        uint256[] memory amounts_,\\n        address to_\\n    ) external onlyAuth {\\n        uint256 length_ = tokens_.length;\\n        require(amounts_.length == length_, \\\"lengths not same\\\");\\n        for (uint256 i = 0; i < length_; i++) {\\n            if (amounts_[i] == type(uint256).max)\\n                amounts_[i] = IERC20(tokens_[i]).balanceOf(address(this));\\n            IERC20(tokens_[i]).safeTransfer(to_, amounts_[i]);\\n        }\\n        emit withdrawPremiumLog(tokens_, amounts_, to_);\\n    }\\n}\\n\\ncontract InstaVaultWrapperImplementation is AdminModule {\\n    using SafeERC20 for IERC20;\\n\\n    function deleverageAndWithdraw(\\n        address vaultAddr_,\\n        uint256 deleverageAmt_,\\n        uint256 withdrawAmount_,\\n        address to_,\\n        uint256 unitAmt_,\\n        bytes memory swapData_,\\n        uint256 route_,\\n        bytes memory instaData_\\n    ) external nonReentrant {\\n        require(unitAmt_ != 0, \\\"unitAmt_ cannot be zero\\\");\\n        require(isVault[vaultAddr_], \\\"invalid vault\\\");\\n        (uint256 exchangePrice_, ) = IVault(vaultAddr_)\\n            .getCurrentExchangePrice();\\n        uint256 itokenAmt_;\\n        if (withdrawAmount_ == type(uint256).max) {\\n            itokenAmt_ = IERC20(vaultAddr_).balanceOf(msg.sender);\\n            withdrawAmount_ = (itokenAmt_ * exchangePrice_) / 1e18;\\n        } else {\\n            itokenAmt_ = (withdrawAmount_ * 1e18) / exchangePrice_;\\n        }\\n        IERC20(vaultAddr_).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            itokenAmt_\\n        );\\n        address[] memory wethList_ = new address[](1);\\n        wethList_[0] = address(wethContract);\\n        uint256[] memory wethAmtList_ = new uint256[](1);\\n        wethAmtList_[0] = deleverageAmt_;\\n        bytes memory data_ = abi.encode(\\n            vaultAddr_,\\n            withdrawAmount_,\\n            to_,\\n            unitAmt_,\\n            swapData_\\n        );\\n        fla.flashLoan(wethList_, wethAmtList_, route_, data_, instaData_);\\n    }\\n\\n    struct InstaVars {\\n        address vaultAddr;\\n        uint256 withdrawAmt;\\n        uint256 withdrawAmtAfterFee;\\n        address to;\\n        uint256 unitAmt;\\n        bytes swapData;\\n        uint256 withdrawalFee;\\n        uint256 iniWethBal;\\n        uint256 iniStethBal;\\n        uint256 finWethBal;\\n        uint256 finStethBal;\\n        uint256 iniEthBal;\\n        uint256 finEthBal;\\n        uint256 ethReceived;\\n        uint256 stethReceived;\\n        uint256 iniTokenBal;\\n        uint256 finTokenBal;\\n        bool success;\\n        uint256 wethCut;\\n        uint256 wethAmtReceivedAfterSwap;\\n        address tokenAddr;\\n        uint256 tokenPriceInBaseCurrency;\\n        uint256 ethPriceInBaseCurrency;\\n        uint256 tokenPriceInEth;\\n        uint256 tokenCut;\\n    }\\n\\n    function executeOperation(\\n        address[] memory tokens_,\\n        uint256[] memory amounts_,\\n        uint256[] memory premiums_,\\n        address initiator_,\\n        bytes memory params_\\n    ) external returns (bool) {\\n        require(msg.sender == address(fla), \\\"illegal-caller\\\");\\n        require(initiator_ == address(this), \\\"illegal-initiator\\\");\\n        require(\\n            tokens_.length == 1 && tokens_[0] == address(wethContract),\\n            \\\"invalid-params\\\"\\n        );\\n\\n        InstaVars memory v_;\\n        (v_.vaultAddr, v_.withdrawAmt, v_.to, v_.unitAmt, v_.swapData) = abi\\n            .decode(params_, (address, uint256, address, uint256, bytes));\\n        IVault vault_ = IVault(v_.vaultAddr);\\n        v_.withdrawalFee = vault_.withdrawalFee();\\n        v_.withdrawAmtAfterFee =\\n            v_.withdrawAmt -\\n            ((v_.withdrawAmt * v_.withdrawalFee) / 1e4);\\n        wethContract.safeApprove(v_.vaultAddr, amounts_[0]);\\n        if (v_.vaultAddr == ethVaultAddr) {\\n            v_.iniEthBal = address(this).balance;\\n            v_.iniStethBal = stethContract.balanceOf(address(this));\\n            vault_.deleverageAndWithdraw(\\n                amounts_[0],\\n                v_.withdrawAmt,\\n                address(this)\\n            );\\n            v_.finEthBal = address(this).balance;\\n            v_.finStethBal = stethContract.balanceOf(address(this));\\n            v_.ethReceived = v_.finEthBal - v_.iniEthBal;\\n            v_.stethReceived = v_.finStethBal - amounts_[0] - v_.iniStethBal;\\n            require(\\n                v_.ethReceived + v_.stethReceived + 1e9 >= v_.withdrawAmtAfterFee,  // Adding small margin for any potential decimal error\\n                \\\"something-went-wrong\\\"\\n            );\\n\\n            v_.iniWethBal = wethContract.balanceOf(address(this));\\n            stethContract.safeApprove(oneInchAddr, amounts_[0]);\\n            Address.functionCall(oneInchAddr, v_.swapData, \\\"1Inch-swap-failed\\\");\\n            v_.finWethBal = wethContract.balanceOf(address(this));\\n            v_.wethAmtReceivedAfterSwap = v_.finWethBal - v_.iniWethBal;\\n            require(\\n                v_.wethAmtReceivedAfterSwap != 0,\\n                \\\"wethAmtReceivedAfterSwap cannot be zero\\\"\\n            );\\n            require(\\n                v_.wethAmtReceivedAfterSwap >=\\n                    (amounts_[0] * v_.unitAmt) / 1e18,\\n                \\\"Too-much-slippage\\\"\\n            );\\n\\n            v_.wethCut =\\n                amounts_[0] +\\n                premiums_[0] -\\n                v_.wethAmtReceivedAfterSwap;\\n            v_.wethCut = v_.wethCut + ((v_.wethCut * premiumEth) / 10000);\\n            if (v_.wethCut < v_.ethReceived) {\\n                Address.sendValue(payable(v_.to), v_.ethReceived - v_.wethCut);\\n                stethContract.safeTransfer(v_.to, v_.stethReceived);\\n            } else {\\n                v_.wethCut -= v_.ethReceived;\\n                stethContract.safeTransfer(\\n                    v_.to,\\n                    v_.stethReceived - v_.wethCut\\n                );\\n            }\\n        } else {\\n            v_.tokenAddr = vault_.token();\\n            v_.tokenPriceInBaseCurrency = aaveOracle.getAssetPrice(\\n                v_.tokenAddr\\n            );\\n            v_.ethPriceInBaseCurrency = aaveOracle.getAssetPrice(\\n                address(wethContract)\\n            );\\n            v_.tokenPriceInEth =\\n                (v_.tokenPriceInBaseCurrency * 1e18) /\\n                v_.ethPriceInBaseCurrency;\\n\\n            v_.iniTokenBal = IERC20(v_.tokenAddr).balanceOf(address(this));\\n            v_.iniStethBal = stethContract.balanceOf(address(this));\\n            vault_.deleverageAndWithdraw(\\n                amounts_[0],\\n                v_.withdrawAmt,\\n                address(this)\\n            );\\n            v_.finTokenBal = IERC20(v_.tokenAddr).balanceOf(address(this));\\n            v_.finStethBal = stethContract.balanceOf(address(this));\\n            require(\\n                v_.finTokenBal - v_.iniTokenBal >= (v_.withdrawAmtAfterFee * 99999999 / 100000000), // Adding small margin for any potential decimal error\\n                \\\"something-went-wrong\\\"\\n            );\\n            require(\\n                v_.finStethBal - v_.iniStethBal + 1e9 >= amounts_[0], // Adding small margin for any potential decimal error\\n                \\\"something-went-wrong\\\"\\n            );\\n\\n            v_.iniWethBal = wethContract.balanceOf(address(this));\\n            stethContract.safeApprove(oneInchAddr, amounts_[0]);\\n            Address.functionCall(oneInchAddr, v_.swapData, \\\"1Inch-swap-failed\\\");\\n            v_.finWethBal = wethContract.balanceOf(address(this));\\n            v_.wethAmtReceivedAfterSwap = v_.finWethBal - v_.iniWethBal;\\n            require(\\n                v_.wethAmtReceivedAfterSwap != 0,\\n                \\\"wethAmtReceivedAfterSwap cannot be zero\\\"\\n            );\\n            require(\\n                v_.wethAmtReceivedAfterSwap >=\\n                    (amounts_[0] * v_.unitAmt) / 1e18,\\n                \\\"Too-much-slippage\\\"\\n            );\\n            v_.wethCut =\\n                amounts_[0] +\\n                premiums_[0] -\\n                v_.wethAmtReceivedAfterSwap;\\n            v_.wethCut = v_.wethCut + ((v_.wethCut * premium) / 10000);\\n            v_.tokenCut = (v_.tokenPriceInEth * v_.wethCut) / 1e18;\\n            IERC20(v_.tokenAddr).safeTransfer(\\n                v_.to,\\n                v_.withdrawAmtAfterFee - v_.tokenCut\\n            );\\n        }\\n        wethContract.safeTransfer(address(fla), amounts_[0] + premiums_[0]);\\n        return true;\\n    }\\n\\n    // function initialize(address auth_, uint256 premium_) external {\\n    //     require(status == 0, \\\"only once\\\");\\n    //     auth = auth_;\\n    //     premium = premium_;\\n    //     status = 1;\\n    // }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/mainnet/deleverageAndWithdraw/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"./variables.sol\\\";\\n\\ncontract Events is Variables {\\n    event updateAuthLog(address auth_);\\n\\n    event updateVaultLog(address vaultAddr_, bool isVault_);\\n\\n    event updatePremiumLog(uint256 premium_);\\n\\n    event updatePremiumEthLog(uint256 premiumEth_);\\n\\n    event withdrawPremiumLog(\\n        address[] tokens_,\\n        uint256[] amounts_,\\n        address to_\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/mainnet/deleverageAndWithdraw/variables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ConstantVariables {\\n    IFla internal constant fla =\\n        IFla(0x619Ad2D02dBeE6ebA3CDbDA3F98430410e892882);\\n    address internal constant oneInchAddr =\\n        0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n    IERC20 internal constant wethContract =\\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20 internal constant stethContract =\\n        IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    address internal constant ethVaultAddr =\\n        0xc383a3833A87009fD9597F8184979AF5eDFad019;\\n    IAavePriceOracle internal constant aaveOracle =\\n        IAavePriceOracle(0xA50ba011c48153De246E5192C8f9258A2ba79Ca9);\\n}\\n\\ncontract Variables is ConstantVariables {\\n    uint256 internal status;\\n\\n    address public auth;\\n\\n    mapping(address => bool) public isVault;\\n\\n    uint256 public premium; // premium for token vaults (in BPS)\\n\\n    uint256 public premiumEth; // premium for eth vault (in BPS)\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/mainnet/deleverageAndWithdraw/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFla {\\n    function flashLoan(\\n        address[] memory tokens_,\\n        uint256[] memory amts_,\\n        uint256 route,\\n        bytes calldata data_,\\n        bytes calldata instaData_\\n    ) external;\\n}\\n\\ninterface IVault {\\n    function getCurrentExchangePrice()\\n        external\\n        view\\n        returns (uint256 exchangePrice_, uint256 newRevenue_);\\n\\n    function deleverageAndWithdraw(\\n        uint256 deleverageAmt_,\\n        uint256 withdrawAmount_,\\n        address to_\\n    ) external;\\n\\n    function token() external view returns (address);\\n\\n    function withdrawalFee() external view returns (uint256);\\n}\\n\\ninterface IAavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"}],\"name\":\"updateAuthLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumEth_\",\"type\":\"uint256\"}],\"name\":\"updatePremiumEthLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium_\",\"type\":\"uint256\"}],\"name\":\"updatePremiumLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddr_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isVault_\",\"type\":\"bool\"}],\"name\":\"updateVaultLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawPremiumLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deleverageAmt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"instaData_\",\"type\":\"bytes\"}],\"name\":\"deleverageAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params_\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth_\",\"type\":\"address\"}],\"name\":\"updateAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"premium_\",\"type\":\"uint256\"}],\"name\":\"updatePremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"premiumEth_\",\"type\":\"uint256\"}],\"name\":\"updatePremiumEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddr_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isVault_\",\"type\":\"bool\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdrawPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InstaVaultWrapperImplementation", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}