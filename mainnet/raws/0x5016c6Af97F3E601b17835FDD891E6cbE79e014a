{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetaTriadsTicketContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Developed by KG Technologies (https://kgtechnologies.io)\\r\\n\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Represents MetaTriad Smart Contract\\r\\n */\\r\\ncontract IMetaTriads {\\r\\n    /** \\r\\n     * @dev ERC-721 INTERFACE \\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\r\\n\\r\\n    /** \\r\\n     * @dev CUSTOM INTERFACE \\r\\n     */\\r\\n    function mintTo(uint256 amount, address _to) external {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title MetaTriadsTicketContract.\\r\\n *\\r\\n * @author KG Technologies (https://kgtechnologies.io).\\r\\n *\\r\\n * @notice This Smart Contract can be used to sell a fixed amount of tickets where some of them are \\r\\n * sold to permissioned wallets and the others are sold to the general public. \\r\\n * The tickets can then be used to mint a corresponding amount of NFTs.\\r\\n *\\r\\n * @dev The primary mode of verifying permissioned actions is through Merkle Proofs\\r\\n * which are generated off-chain.\\r\\n */\\r\\ncontract MetaTriadsTicketContract is Ownable {\\r\\n\\r\\n    /** \\r\\n     * @notice The Smart Contract of MetaTriad \\r\\n     * @dev ERC-721 Smart Contract \\r\\n     */\\r\\n    IMetaTriads public immutable nft;\\r\\n    \\r\\n    /** \\r\\n     * @dev MINT DATA \\r\\n     */    \\r\\n    uint256 public phaseOneMaxSupply = 300;\\r\\n    uint256 public phaseTwoMaxSupply = 2000;    \\r\\n    uint256 public pricePermissioned = 0.09 ether;\\r\\n    mapping(uint256 => uint256) public boughtPermissioned;\\r\\n\\r\\n    uint256 public marginOfSafety = 2 minutes;\\r\\n    uint256 public phaseOneStartTime = 1; //1647246600 - marginOfSafety\\r\\n    uint256 public phaseOneDuration = 100 * 365 days; // 30 minutes\\r\\n    uint256 public phaseTwoStartTime = 1; //1647248400 - marginOfSafety\\r\\n    uint256 public phaseTwoDuration = 100 * 365 days; // 30 minutes\\r\\n\\r\\n    uint256 public maxSupplyOpen = 7200;\\r\\n    uint256 public boughtOpen = 0;\\r\\n    uint256 public limitOpen = 10;\\r\\n    uint256 public priceOpen = 0.18 ether;\\r\\n    uint256 public startTimeOpen = 1; // 1647250200 - marginOfSafety\\r\\n\\r\\n    uint256 public redeemStart = startTimeOpen + 1 hours - marginOfSafety;\\r\\n    uint256 public redeemDuration = 1 days * 30;\\r\\n    \\r\\n    mapping(address => uint256) public addressToTicketsOpen;\\r\\n    mapping(address => mapping(uint256 => uint256)) public addressToTicketsPermissioned;\\r\\n    mapping(address => uint256) public addressToMints;    \\r\\n\\r\\n    /// @dev Initial value is randomly generated from https://www.random.org/\\r\\n    bytes32 public merkleRoot = 0xd1146eea03185df9ba3ea50f2b88a665bbc97f3f96c4846b6481c18f8e299cfb;\\r\\n\\r\\n    /**\\r\\n     * @dev GIVEAWAY \\r\\n     */\\r\\n    uint256 public maxSupplyGiveaway = 500;\\r\\n    uint256 public giveAwayRedeemed = 0;\\r\\n    mapping(address => uint256) public addressToGiveawayRedeemed;\\r\\n    bytes32 public giveAwayMerkleRoot = \\\"\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Events\\r\\n     */\\r\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\r\\n    event WithdrawAllEvent(address indexed to, uint256 amount);\\r\\n    event Purchase(address indexed buyer, uint256 indexed amount, bool indexed permissioned);\\r\\n    event RedeemTickets(address indexed redeemer, uint256 amount);\\r\\n    event RedeemGiveAway(address indexed redeemer, uint256 amount);\\r\\n \\r\\n    /// @dev Setters\\r\\n    event setMaxSupplyPhaseOneEvent(uint256 indexed maxSupply);\\r\\n    event setMaxSupplyPhaseTwoEvent(uint256 indexed maxSupply);\\r\\n    event setMaxSupplyOpenEvent(uint256 indexed maxSupply);\\r\\n    event setLimitOpenEvent(uint256 indexed limit);\\r\\n    event setPriceOpenEvent(uint256 indexed price);\\r\\n    event setRedeemStartEvent(uint256 indexed start);\\r\\n    event setRedeemDurationEvent(uint256 indexed duration);\\r\\n    event setMerkleRootEvent(bytes32 indexed merkleRoot);\\r\\n    event setGiveAwayMerkleRootEvent(bytes32 indexed merkleRoot);\\r\\n    event setGiveAwayMaxSupplyEvent(uint256 indexed newSupply);\\r\\n    event setPricePermissionedEvent(uint256 indexed price);\\r\\n    event setPhaseOneStartTimeEvent(uint256 indexed time);\\r\\n    event setPhaseOneDurationEvent(uint256 indexed time);\\r\\n    event setPhaseTwoStartTimeEvent(uint256 indexed time);\\r\\n    event setPhaseTwoDurationEvent(uint256 indexed time);\\r\\n    event setStartTimeOpenEvent(uint256 indexed time);    \\r\\n\\r\\n    constructor(\\r\\n        address _metaTriadsAddress\\r\\n    ) Ownable() {\\r\\n        nft = IMetaTriads(_metaTriadsAddress);\\r\\n    }\\r\\n \\r\\n    /**\\r\\n     * @dev SALE\\r\\n     */\\r\\n\\r\\n    function phaseOneLeft() public view returns(uint256) {\\r\\n        if (phaseOneMaxSupply >= boughtPermissioned[1]) {\\r\\n            return phaseOneMaxSupply - boughtPermissioned[1];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function phaseTwoLeft() public view returns(uint256) {\\r\\n        if (phaseTwoMaxSupply >= boughtPermissioned[2]) {\\r\\n            return phaseTwoMaxSupply - boughtPermissioned[2];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }    \\r\\n    }\\r\\n\\r\\n    function realSupplyOpen() public view returns(uint256) {\\r\\n        return maxSupplyOpen + phaseOneLeft() + phaseTwoLeft();\\r\\n    }\\r\\n\\r\\n    function openLeft() public view returns(uint256) {\\r\\n        if (realSupplyOpen() >= boughtOpen) {\\r\\n            return realSupplyOpen() - boughtOpen;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the sale data for each phase per user\\r\\n     *\\r\\n     * @dev For each phase validates that the time is correct,\\r\\n     * that the ether supplied is correct and that the purchase \\r\\n     * amount doesn't exceed the max amount\\r\\n     *\\r\\n     * @param amount. The amount the user want's to purchase\\r\\n     * @param phase. The sale phase of the user\\r\\n     */\\r\\n    function validatePhaseSpecificPurchase(uint256 amount, uint256 phase) internal {\\r\\n        if (phase == 1) {            \\r\\n            require(block.timestamp < phaseOneStartTime + phaseOneDuration, \\\"PHASE ONE SALE IS CLOSED\\\");    \\r\\n            require(msg.value >= priceOpen * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n            require(boughtPermissioned[phase] + amount <= phaseOneMaxSupply, \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n            require(block.timestamp >= phaseOneStartTime, \\\"PHASE ONE SALE HASN'T STARTED YET\\\");\\r\\n\\r\\n        } else if (phase == 2) {            \\r\\n            require(block.timestamp < phaseTwoStartTime + phaseTwoDuration, \\\"PHASE TWO SALE IS CLOSED\\\");    \\r\\n            require(msg.value >= pricePermissioned * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n            require(boughtPermissioned[phase] + amount <= phaseTwoMaxSupply, \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n            require(block.timestamp >= phaseTwoStartTime, \\\"PHASE TWO SALE HASN'T STARTED YET\\\");\\r\\n\\r\\n        } else {\\r\\n            revert(\\\"INCORRECT PHASE\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to buy one or more tickets.\\r\\n     * @dev First the Merkle Proof is verified.\\r\\n     * Then the buy is verified with the data embedded in the Merkle Proof.\\r\\n     * Finally the tickets are bought to the user's wallet.\\r\\n     *\\r\\n     * @param amount. The amount of tickets to buy.     \\r\\n     * @param buyMaxAmount. The max amount the user can buy.\\r\\n     * @param phase. The permissioned sale phase.\\r\\n     * @param proof. The Merkle Proof of the user.\\r\\n     */\\r\\n    function buyPermissioned(uint256 amount, uint256 buyMaxAmount, uint256 phase, bytes32[] calldata proof) \\r\\n        external \\r\\n        payable {\\r\\n\\r\\n        /// @dev Verifies Merkle Proof submitted by user.\\r\\n        /// @dev All mint data is embedded in the merkle proof.\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, buyMaxAmount, phase));\\r\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"INVALID PROOF\\\");\\r\\n\\r\\n        /// @dev Verify that user can perform permissioned sale based on the provided parameters.\\r\\n\\r\\n        require(address(nft) != address(0), \\\"METATRIAD NFT SMART CONTRACT NOT SET\\\");     \\r\\n        \\r\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\r\\n        require(addressToTicketsPermissioned[msg.sender][phase] + amount <= buyMaxAmount, \\\"BUY AMOUNT EXCEEDS MAX FOR USER\\\");            \\r\\n\\r\\n        /// @dev verify that user can perform permissioned sale based on phase of user\\r\\n        validatePhaseSpecificPurchase(amount, phase);\\r\\n\\r\\n        boughtPermissioned[phase] += amount;           \\r\\n        addressToTicketsPermissioned[msg.sender][phase] += amount;\\r\\n        emit Purchase(msg.sender, amount, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to buy one or more tickets.\\r\\n     *\\r\\n     * @param amount. The amount of tickets to buy.\\r\\n     */\\r\\n    function buyOpen(uint256 amount) \\r\\n        external \\r\\n        payable {\\r\\n        \\r\\n        /// @dev Verifies that user can perform open sale based on the provided parameters.\\r\\n\\r\\n        require(address(nft) != address(0), \\\"METATRIADS NFT SMART CONTRACT NOT SET\\\");\\r\\n        require(block.timestamp >= startTimeOpen, \\\"OPEN SALE CLOSED\\\");\\r\\n\\r\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\r\\n\\r\\n        require(addressToTicketsOpen[msg.sender] + amount <= limitOpen, \\\"BUY AMOUNT EXCEEDS MAX FOR USER\\\");\\r\\n        require(boughtOpen + amount <= realSupplyOpen(), \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n        require(msg.value >= priceOpen * amount, \\\"ETHER SENT NOT CORRECT\\\");\\r\\n\\r\\n        /// @dev Updates contract variables and buys `amount` tickets to users wallet\\r\\n\\r\\n        boughtOpen += amount;\\r\\n        addressToTicketsOpen[msg.sender] += amount;\\r\\n\\r\\n        emit Purchase(msg.sender, amount, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev MINTING \\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to redeem their tickets for NFTs.\\r\\n     * \\r\\n     * @dev Users from Phase 1 can bypass the time block.\\r\\n     */\\r\\n    function redeemTickets() external {\\r\\n        require(block.timestamp >= redeemStart || addressToTicketsPermissioned[msg.sender][1] > 0, \\\"REDEEM CLOSED\\\");\\r\\n        require(block.timestamp < redeemStart + redeemDuration, \\\"REDEEM CLOSED\\\");\\r\\n\\r\\n        uint256 ticketsOfSender = \\r\\n            addressToTicketsPermissioned[msg.sender][1] + \\r\\n            addressToTicketsPermissioned[msg.sender][2] + \\r\\n            addressToTicketsOpen[msg.sender];\\r\\n        uint256 mintsOfSender = addressToMints[msg.sender];\\r\\n        uint256 mintable = ticketsOfSender - mintsOfSender;\\r\\n\\r\\n        require(mintable > 0, \\\"NO MINTABLE TICKETS\\\");\\r\\n\\r\\n        uint256 maxMintPerTx = 100;\\r\\n        uint256 toMint = mintable > maxMintPerTx ? maxMintPerTx : mintable;\\r\\n        \\r\\n        addressToMints[msg.sender] = addressToMints[msg.sender] + toMint;\\r\\n\\r\\n        nft.mintTo(toMint, msg.sender);\\r\\n        emit RedeemTickets(msg.sender, toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function to redeem giveaway.\\r\\n     * @dev First the Merkle Proof is verified.\\r\\n     * Then the redeem is verified with the data embedded in the Merkle Proof.\\r\\n     * Finally the metatriads are minted to the user's wallet.\\r\\n     *\\r\\n     * @param redeemAmount. The amount to redeem.\\r\\n     * @param proof. The Merkle Proof of the user.\\r\\n     */\\r\\n    function redeemGiveAway(uint256 redeemAmount, bytes32[] calldata proof) external {\\r\\n        /// @dev Verifies Merkle Proof submitted by user.\\r\\n        /// @dev All giveaway data is embedded in the merkle proof.\\r\\n\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, redeemAmount));\\r\\n        require(MerkleProof.verify(proof, giveAwayMerkleRoot, leaf), \\\"INVALID PROOF\\\");\\r\\n\\r\\n        /// @dev Verifies that user can perform giveaway based on the provided parameters.\\r\\n\\r\\n        require(address(nft) != address(0), \\\"METATRIAD NFT SMART CONTRACT NOT SET\\\");\\r\\n        require(giveAwayMerkleRoot != \\\"\\\", \\\"GIVEAWAY CLOSED\\\");\\r\\n\\r\\n        require(redeemAmount > 0, \\\"HAVE TO REDEEM AT LEAST 1\\\");\\r\\n\\r\\n        require(addressToGiveawayRedeemed[msg.sender] == 0, \\\"GIVEAWAY ALREADY REDEEMED\\\");\\r\\n        require(giveAwayRedeemed + redeemAmount <= maxSupplyGiveaway, \\\"GIVEAWAY AMOUNT GOES OVER MAX SUPPLY\\\");\\r\\n\\r\\n        /// @dev Updates contract variables and mints `redeemAmount` metatriads to users wallet\\r\\n\\r\\n        giveAwayRedeemed += redeemAmount;\\r\\n        addressToGiveawayRedeemed[msg.sender] = 1;\\r\\n\\r\\n        nft.mintTo(redeemAmount, msg.sender);\\r\\n        emit RedeemGiveAway(msg.sender, redeemAmount);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @dev OWNER ONLY \\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Change the maximum supply of tickets that are for sale in phase one permissioned sale.\\r\\n     *\\r\\n     * @param newMaxSupply. The new max supply.\\r\\n     */\\r\\n    function setMaxSupplyPhaseOne(uint256 newMaxSupply) external onlyOwner {\\r\\n        phaseOneMaxSupply = newMaxSupply;\\r\\n        emit setMaxSupplyPhaseOneEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the maximum supply of tickets that are for sale in phase two permissioned sale.\\r\\n     *\\r\\n     * @param newMaxSupply. The new max supply.\\r\\n     */\\r\\n    function setMaxSupplyPhaseTwo(uint256 newMaxSupply) external onlyOwner {\\r\\n        phaseTwoMaxSupply = newMaxSupply;\\r\\n        emit setMaxSupplyPhaseTwoEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the maximum supply of tickets that are for sale in open sale.\\r\\n     *\\r\\n     * @param newMaxSupply. The new max supply.\\r\\n     */\\r\\n    function setMaxSupplyOpen(uint256 newMaxSupply) external onlyOwner {\\r\\n        maxSupplyOpen = newMaxSupply;\\r\\n        emit setMaxSupplyOpenEvent(newMaxSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the limit of tickets per wallet in open sale.\\r\\n     *\\r\\n     * @param newLimitOpen. The new max supply.\\r\\n     */\\r\\n    function setLimitOpen(uint256 newLimitOpen) external onlyOwner {\\r\\n        limitOpen = newLimitOpen;\\r\\n        emit setLimitOpenEvent(newLimitOpen);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the price of tickets that are for sale in open sale.\\r\\n     *\\r\\n     * @param newPriceOpen. The new price.\\r\\n     */\\r\\n    function setPriceOpen(uint256 newPriceOpen) external onlyOwner {\\r\\n        priceOpen = newPriceOpen;\\r\\n        emit setPriceOpenEvent(newPriceOpen);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the price of tickets that are for sale in permissioned sale.\\r\\n     *\\r\\n     * @param newPricePermissioned. The new price.\\r\\n     */\\r\\n    function setPricePermissioned(uint256 newPricePermissioned) external onlyOwner {\\r\\n        pricePermissioned = newPricePermissioned;\\r\\n        emit setPricePermissionedEvent(newPricePermissioned);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to change the start time of the redeem period\\r\\n     *\\r\\n     * @param newStart. The new start time of the redeem period\\r\\n     */\\r\\n    function setRedeemStart(uint256 newStart) external onlyOwner {\\r\\n        redeemStart = newStart;\\r\\n        emit setRedeemStartEvent(newStart);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to change the duration of the redeem period\\r\\n     *\\r\\n     * @param newDuration. The new duration of the redeem period\\r\\n     */\\r\\n    function setRedeemDuration(uint256 newDuration) external onlyOwner {\\r\\n        redeemDuration = newDuration;\\r\\n        emit setRedeemDurationEvent(newDuration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the merkleRoot of the sale.\\r\\n     *\\r\\n     * @param newRoot. The new merkleRoot.\\r\\n     */\\r\\n    function setMerkleRoot(bytes32 newRoot) external onlyOwner {\\r\\n        merkleRoot = newRoot;\\r\\n        emit setMerkleRootEvent(newRoot);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delete the merkleRoot of the sale.\\r\\n     */\\r\\n    function deleteMerkleRoot() external onlyOwner {\\r\\n        merkleRoot = \\\"\\\";\\r\\n        emit setMerkleRootEvent(merkleRoot);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the merkleRoot of the giveaway.\\r\\n     *\\r\\n     * @param newRoot. The new merkleRoot.\\r\\n     */\\r\\n    function setGiveAwayMerkleRoot(bytes32 newRoot) external onlyOwner {\\r\\n        giveAwayMerkleRoot = newRoot;\\r\\n        emit setGiveAwayMerkleRootEvent(newRoot);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the max supply for the giveaway.\\r\\n     *\\r\\n     * @param newSupply. The new giveaway max supply.\\r\\n     */\\r\\n    function setGiveAwayMaxSupply(uint256 newSupply) external onlyOwner {\\r\\n        maxSupplyGiveaway = newSupply;\\r\\n        emit setGiveAwayMaxSupplyEvent(newSupply);\\r\\n    }    \\r\\n\\r\\n    /**\\r\\n     * @notice Change start time of the Phase One permissioned sale.\\r\\n     *\\r\\n     * @param newTime. The new time.\\r\\n     */\\r\\n    function setPhaseOneStartTime(uint256 newTime) external onlyOwner {\\r\\n        phaseOneStartTime = newTime;\\r\\n        emit setPhaseOneStartTimeEvent(newTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change duration of the Phase One permissioned sale.\\r\\n     *\\r\\n     * @param newDuration. The new duration.\\r\\n     */\\r\\n    function setPhaseOneDuration(uint256 newDuration) external onlyOwner {\\r\\n        phaseOneDuration = newDuration;\\r\\n        emit setPhaseOneDurationEvent(newDuration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change start time of the Phase Two permissioned sale.\\r\\n     *\\r\\n     * @param newTime. The new time.\\r\\n     */\\r\\n    function setPhaseTwoStartTime(uint256 newTime) external onlyOwner {\\r\\n        phaseTwoStartTime = newTime;\\r\\n        emit setPhaseTwoStartTimeEvent(newTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change duration of the Phase One permissioned sale.\\r\\n     *\\r\\n     * @param newDuration. The new duration.\\r\\n     */\\r\\n    function setPhaseTwoDuration(uint256 newDuration) external onlyOwner {\\r\\n        phaseTwoDuration = newDuration;\\r\\n        emit setPhaseTwoDurationEvent(newDuration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change start time of the open sale.\\r\\n     *\\r\\n     * @param newTime. The new time.\\r\\n     */\\r\\n    function setStartTimeOpen(uint256 newTime) external onlyOwner {\\r\\n        startTimeOpen = newTime;\\r\\n        emit setStartTimeOpenEvent(newTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev FINANCE\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows owner to withdraw funds generated from sale.\\r\\n     *\\r\\n     * @param _to. The address to send the funds to.\\r\\n     */\\r\\n    function withdrawAll(address _to) external onlyOwner {\\r\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\r\\n\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n\\r\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\r\\n\\r\\n        payable(_to).transfer(contractBalance);\\r\\n\\r\\n        emit WithdrawAllEvent(_to, contractBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function for receiving Ether\\r\\n     */\\r\\n    receive() external payable {\\r\\n        emit ReceivedEther(msg.sender, msg.value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metaTriadsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemGiveAway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setGiveAwayMaxSupplyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setGiveAwayMerkleRootEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPhaseOneEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPhaseTwoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneDurationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneStartTimeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoDurationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoStartTimeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPricePermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setRedeemDurationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"setRedeemStartEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTimeOpenEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToGiveawayRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTicketsOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTicketsPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boughtPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyOpen\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyPermissioned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwayMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwayRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginOfSafety\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyGiveaway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMetaTriads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseOneDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseOneLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseOneMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseOneStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseTwoDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseTwoLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseTwoMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseTwoStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realSupplyOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemGiveAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setGiveAwayMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setGiveAwayMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitOpen\",\"type\":\"uint256\"}],\"name\":\"setLimitOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPhaseOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPhaseTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseOneStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setPhaseTwoStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceOpen\",\"type\":\"uint256\"}],\"name\":\"setPriceOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPricePermissioned\",\"type\":\"uint256\"}],\"name\":\"setPricePermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setRedeemDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setRedeemStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setStartTimeOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaTriadsTicketContract", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000029e700a258358ab9632fb019a6960700f54424ed", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}