{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/core/HPeriod.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract HPeriod is Ownable{\r\n  using SafeMath for uint;\r\n\r\n  uint256 period_start_block;//the start block of the first round\r\n  uint256 period_block_num;//the length in block of a round\r\n\r\n  mapping (uint256 => uint256) public all_rounds_start_block;//the start block of all rounds\r\n  uint256 current_round;//the index of current round\r\n\r\n  constructor(uint256 _start_block, uint256 _period_block_num) public{\r\n    period_start_block = _start_block;\r\n    period_block_num = _period_block_num;\r\n\r\n    current_round = 0;\r\n  }\r\n\r\n  function _end_current_and_start_new_round() internal returns(bool){\r\n    require(block.number >= period_start_block, \"1st period not start yet\");\r\n    if(current_round == 0 || block.number.safeSub(all_rounds_start_block[current_round]) >= period_block_num){\r\n      current_round = current_round + 1;\r\n      all_rounds_start_block[current_round] = block.number;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updatePeriodStatus() public onlyOwner returns(bool){\r\n    return _end_current_and_start_new_round();\r\n  }\r\n\r\n\r\n  //event HPeriodChanged(uint256 old, uint256 new_period);\r\n  //function _change_period(uint256 _period) internal{\r\n    //uint256 old = period_block_num;\r\n    //period_block_num = _period;\r\n    //emit HPeriodChanged(old, period_block_num);\r\n  //}\r\n\r\n  function getCurrentRoundStartBlock() public view returns(uint256){\r\n    return all_rounds_start_block[current_round];\r\n  }\r\n\r\n  function getParamPeriodStartBlock() public view returns(uint256){\r\n    return period_start_block;\r\n  }\r\n\r\n  function getParamPeriodBlockNum() public view returns(uint256){\r\n    return period_block_num;\r\n  }\r\n\r\n  function getCurrentRound() public view returns(uint256){\r\n    return current_round;\r\n  }\r\n\r\n  function getRoundLength(uint256 _round) public view returns(uint256){\r\n    require(isRoundEnd(_round), \"HPeriod: round not end\");\r\n    return all_rounds_start_block[_round + 1].safeSub(all_rounds_start_block[_round]);\r\n  }\r\n\r\n  function isRoundEnd(uint256 _round) public view returns(bool){\r\n    return all_rounds_start_block[_round + 1] > 0;\r\n  }\r\n\r\n  function isRoundStart(uint256 _round) public view returns(bool){\r\n    return all_rounds_start_block[_round] != 0;\r\n  }\r\n}\r\n\r\ncontract HPeriodFactory{\r\n  event NewHPeriod(address addr);\r\n\r\n  function createHPeriod(uint256 _start_block, uint256 _period_block_num) public returns(address){\r\n      HPeriod dis = new HPeriod(_start_block, _period_block_num);\r\n      dis.transferOwnership(msg.sender);\r\n      emit NewHPeriod(address(dis));\r\n      return address(dis);\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getParamPeriodBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePeriodStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_rounds_start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"isRoundStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"isRoundEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParamPeriodStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_start_block\",\"type\":\"uint256\"},{\"name\":\"_period_block_num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "HPeriod", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000dcea46000000000000000000000000000000000000000000000000000000000000a2ee", "EVMVersion": "Default", "Library": "SafeMath:071108ad85d7a766b41e0f5e5195537a8fc8e74d", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1e5fbd4af2beb5f073b16a5b938212c383a7036ad3774370e17e055cb9091dcf"}]}