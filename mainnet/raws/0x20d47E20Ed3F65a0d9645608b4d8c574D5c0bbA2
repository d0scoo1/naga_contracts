{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() private view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.6;\r\n\r\ncontract PullCollectorOperatorETH is\r\n    Ownable // \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043d\u0430 \u043c\u0430\u0439\u043d\u0435\u0442 \u0441\u0435\u0442\u0438\r\n{\r\n    address[] private users; // \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 \u043a\u0442\u043e \u0432\u043b\u043e\u0436\u0438\u043b\r\n    mapping(address => uint256) public balances; // \u043c\u0435\u043f \u044e\u0437\u0435\u0440\u043e\u0432 \u0438 \u0438\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\r\n    address payable public distributor; //\u0430\u0434\u0440\u0435\u0441  \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\r\n    address public admin;\r\n    event NewInvestor(address investor);\r\n\r\n    constructor() public {\r\n        distributor = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function set_admin(address _admin) public onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function set_new_distributor(address payable _distributor)\r\n        public\r\n        onlyOwner\r\n    {\r\n        // \u0441\u0442\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\r\n        distributor = _distributor;\r\n    }\r\n\r\n    function get_users(uint256 _id) public view returns (address) {\r\n        // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u044e\u0437\u0435\u0440\u0430 \u043f\u043e \u0435\u0433\u043e \u0430\u0439\u0434\u0438\r\n        return users[_id];\r\n    }\r\n\r\n    function get_count_users() public view returns (uint256) {\r\n        // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u043e\u0436\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u044e\u0437\u0435\u0440\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\r\n        return users.length;\r\n    }\r\n\r\n    function get_en_balances(address _user) public view returns (uint256) {\r\n        // \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u043e\u0436\u0438\u043b \u044e\u0437\u0435\u0440 \u043f\u043e \u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0443\r\n        return balances[_user];\r\n    }\r\n\r\n    function invest() external payable {\r\n        // \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0432 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u043e\u0442\u0440\u0430\u043a\u0442\r\n        if (balances[msg.sender] == 0) {\r\n            emit NewInvestor(msg.sender);\r\n        }\r\n        balances[msg.sender] += msg.value;\r\n        users.push(msg.sender);\r\n    }\r\n\r\n    function transfer_native(uint256 _amount) public payable {\r\n        //\u043c\u0435\u0442\u043e\u0434 \u043e\u0442\u0441\u044b\u043b\u043a\u0438 \u043d\u0430\u0442\u0438\u0432\u043a\u0438 \u043d\u0430 \u043a\u043e\u0448\u0435\u043b\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\r\n        require(msg.sender == admin, \"Sign adress not Admin\");\r\n        distributor.transfer(_amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_count_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"get_en_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"get_users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"set_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"set_new_distributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer_native\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "PullCollectorOperatorETH", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aad2d84ffd4f25089a2502c617b76935dcb5e804b63462334ab1624514b3d448"}]}