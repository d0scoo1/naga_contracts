{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.8.7;\r\n\r\ninterface WnsRegistryInterface {\r\n    function owner() external view returns (address);\r\n    function getWnsAddress(string memory _label) external view returns (address);\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsErc721Interface {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsStructs {\r\n    struct Register {\r\n        string name;\r\n        string extension;\r\n        address registrant;\r\n        uint256 cost;\r\n        uint256 expiration;\r\n        address[] splitAddresses;\r\n        uint256[] splitAmounts;\r\n    }\r\n\r\n    struct RegisterStruct {\r\n        Register[] register;\r\n        bytes[] signature;\r\n        uint256 registrationCost;\r\n    }\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface WnsRegistrarInterface is WnsStructs {\r\n    function recoverSigner(bytes32 message, bytes memory sig) external view returns (address);\r\n    function wnsRegister(Register[] memory register, bytes[] memory sig) external payable;\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface Erc20Interface {\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract wnsMarketplace is WnsStructs {\r\n \r\n    address private WnsRegistry;\r\n    WnsRegistryInterface wnsRegistry;\r\n\r\n    constructor(address registry_) {\r\n        WnsRegistry = registry_;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    function setRegistry(address _registry) public {\r\n        require(msg.sender == wnsRegistry.owner(), \"Not authorized.\");\r\n        WnsRegistry = _registry;\r\n        wnsRegistry = WnsRegistryInterface(WnsRegistry);\r\n    }\r\n\r\n    struct Order {\r\n        address from;\r\n        address to;\r\n        address orderAddress;\r\n        address contractAddress;\r\n        uint256 tokenId;\r\n        uint256 cost;\r\n        uint256 royalty;\r\n        address paymentToken;\r\n        uint256 orderExpiration;\r\n        uint256 wnsExpiration;\r\n        bytes orderSig;\r\n        bytes wnsSig;\r\n    }\r\n\r\n    bool public isActive = true;\r\n\r\n    function wnsMatch(Order[] memory order, RegisterStruct memory registerStruct) public payable{\r\n        require(isActive, \"Contract must be active.\");\r\n        if(registerStruct.signature.length != 0) {\r\n            require(registerStruct.register.length == registerStruct.signature.length, \"Invalid parameters.\");\r\n            WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n            wnsRegistrar.wnsRegister{value:registerStruct.registrationCost}(registerStruct.register, registerStruct.signature);\r\n        }\r\n        require(msg.value >= calculateCost(order) , \"Value sent is not correct\");\r\n\r\n        for(uint256 i=0; i<order.length; i++) {\r\n            wnsTransfer(order[i]);\r\n            settlePayment(order[i].from, order[i].to, order[i].paymentToken, order[i].cost, order[i].royalty);\r\n        }\r\n    }\r\n\r\n    function wnsTransfer(Order memory order) internal {\r\n        WnsErc721Interface wnsErc721 = WnsErc721Interface(order.contractAddress);\r\n        require(wnsErc721.ownerOf(order.tokenId) == order.from, \"Token not owned by signer\");\r\n        address orderSigAddress = verifyOrderSignature(order);\r\n        if(orderSigAddress == order.to) {\r\n            require(msg.sender == order.from, \"Not authorized by Owner\");\r\n        } else {\r\n            require(orderSigAddress == order.from, \"Not authorized by Owner\");\r\n        }\r\n        require(verifyWnsSignature(order) == wnsRegistry.getWnsAddress(\"_wnsMarketplaceSigner\"), \"Not authorized by Wns\");\r\n        require(order.orderExpiration >= block.timestamp, \"Expired credentials.\");\r\n        require(order.wnsExpiration >= block.timestamp, \"Expired credentials.\");\r\n\r\n        wnsErc721.safeTransferFrom(order.from, order.to, order.tokenId);\r\n    }\r\n\r\n    function calculateCost(Order[] memory order) internal pure returns(uint256) {\r\n        uint256 totalCost;\r\n        for(uint256 i=0; i<order.length; i++) {\r\n            totalCost = totalCost + order[i].cost;\r\n        }\r\n        return totalCost;\r\n    }\r\n\r\n    function settlePayment(address from, address to, address paymentToken, uint256 amount, uint256 royalty) internal {\r\n        if(paymentToken == address(0)) {\r\n            payable(from).transfer(amount - royalty);\r\n        } else {\r\n            Erc20Interface erc20Contract = Erc20Interface(paymentToken);\r\n            erc20Contract.transferFrom(to, from, amount - royalty);\r\n            erc20Contract.transferFrom(to, address(this), royalty);\r\n        }\r\n    }\r\n\r\n    function verifyOrderSignature(Order memory order) internal view returns(address) {\r\n        bytes32 message = keccak256(abi.encode(order.orderAddress, order.contractAddress, order.tokenId, order.cost, order.orderExpiration));\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", message));\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        return wnsRegistrar.recoverSigner(hash, order.orderSig);\r\n   }\r\n\r\n   function verifyWnsSignature(Order memory order) internal view returns(address) {\r\n        bytes32 message = keccak256(abi.encode(order.from, order.to, order.orderAddress, order.contractAddress, order.tokenId, order.cost, order.royalty, order.paymentToken, order.orderExpiration, order.wnsExpiration, order.orderSig));\r\n        WnsRegistrarInterface wnsRegistrar = WnsRegistrarInterface(wnsRegistry.getWnsAddress(\"_wnsRegistrar\"));\r\n        return wnsRegistrar.recoverSigner(message, order.wnsSig);\r\n   }\r\n\r\n   function withdraw(address to, uint256 amount, address paymentToken) public {\r\n        require(msg.sender == wnsRegistry.owner());\r\n        if(paymentToken == address(0)) {\r\n            require(amount <= address(this).balance);\r\n            payable(to).transfer(amount);\r\n        } else {\r\n            Erc20Interface erc20Contract = Erc20Interface(paymentToken);\r\n            erc20Contract.transferFrom(address(this), to, amount);\r\n        }\r\n    }\r\n\r\n   function flipActiveState() public {\r\n        require(msg.sender == wnsRegistry.owner());\r\n        isActive = !isActive;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"flipActiveState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wnsExpiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"orderSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"wnsSig\",\"type\":\"bytes\"}],\"internalType\":\"struct wnsMarketplace.Order[]\",\"name\":\"order\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"extension\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"splitAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"splitAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct WnsStructs.Register[]\",\"name\":\"register\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signature\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"registrationCost\",\"type\":\"uint256\"}],\"internalType\":\"struct WnsStructs.RegisterStruct\",\"name\":\"registerStruct\",\"type\":\"tuple\"}],\"name\":\"wnsMatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "wnsMarketplace", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000082fe896e4969a3270c0bec103cf1ebdbda6e6bfc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc2429acc454418ab26aed9a43794a0e61ac8fa9bf34f0c17745f468c1529ebc"}]}