{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Sources flattened with hardhat v2.6.5 https://hardhat.org\r\n\r\n// File contracts/ethregistrar/SafeMath.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/PriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\ninterface PriceOracle {\r\n    /**\r\n     * @dev Returns the price to register or renew a name.\r\n     * @param name The name being registered or renewed.\r\n     * @param expires When the name presently expires (0 if this is a new registration).\r\n     * @param duration How long the name is being registered or extended for, in seconds.\r\n     * @return The price of this renewal or registration, in wei.\r\n     */\r\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/StringUtils.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\nlibrary StringUtils {\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        uint len;\r\n        uint i = 0;\r\n        uint bytelength = bytes(s).length;\r\n        for(len = 0; i < bytelength; len++) {\r\n            bytes1 b = bytes(s)[i];\r\n            if(b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/StablePriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n\r\n\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\n\r\n// StablePriceOracle sets a price in USD, based on an oracle.\r\ncontract StablePriceOracle is Ownable, PriceOracle {\r\n    using SafeMath for *;\r\n    using StringUtils for *;\r\n\r\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\r\n    uint[] public rentPrices;\r\n\r\n    // Oracle address\r\n    AggregatorInterface public immutable usdOracle;\r\n\r\n    event OracleChanged(address oracle);\r\n\r\n    event RentPriceChanged(uint[] prices);\r\n\r\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\"price(string,uint256,uint256)\") ^ keccak256(\"premium(string,uint256,uint256)\"));\r\n\r\n    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices) public {\r\n        usdOracle = _usdOracle;\r\n        setPrices(_rentPrices);\r\n    }\r\n\r\n    function price(string calldata name, uint expires, uint duration) external view override returns(uint) {\r\n        uint len = name.strlen();\r\n        if(len > rentPrices.length) {\r\n            len = rentPrices.length;\r\n        }\r\n        require(len > 0);\r\n        \r\n        uint basePrice = rentPrices[len - 1].mul(duration);\r\n        basePrice = basePrice.add(_premium(name, expires, duration));\r\n\r\n        return attoUSDToWei(basePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets rent prices.\r\n     * @param _rentPrices The price array. Each element corresponds to a specific\r\n     *                    name length; names longer than the length of the array\r\n     *                    default to the price of the last element. Values are\r\n     *                    in base price units, equal to one attodollar (1e-18\r\n     *                    dollar) each.\r\n     */\r\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\r\n        rentPrices = _rentPrices;\r\n        emit RentPriceChanged(_rentPrices);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pricing premium in wei.\r\n     */\r\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\r\n        return attoUSDToWei(_premium(name, expires, duration));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pricing premium in internal base units.\r\n     */\r\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\r\n        return 0;\r\n    }\r\n\r\n    function attoUSDToWei(uint amount) internal view returns(uint) {\r\n        uint ethPrice = uint(usdOracle.latestAnswer());\r\n        return amount.mul(1e8).div(ethPrice);\r\n    }\r\n\r\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\r\n        uint ethPrice = uint(usdOracle.latestAnswer());\r\n        return amount.mul(ethPrice).div(1e8);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\r\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/LinearPremiumPriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n\r\ncontract LinearPremiumPriceOracle is StablePriceOracle {\r\n    using SafeMath for *;\r\n\r\n    uint immutable GRACE_PERIOD = 90 days;\r\n\r\n    uint public immutable initialPremium;\r\n    uint public immutable premiumDecreaseRate;\r\n\r\n    bytes4 constant private TIME_UNTIL_PREMIUM_ID = bytes4(keccak256(\"timeUntilPremium(uint,uint\"));\r\n\r\n    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices, uint _initialPremium, uint _premiumDecreaseRate) public\r\n        StablePriceOracle(_usdOracle, _rentPrices)\r\n    {\r\n        initialPremium = _initialPremium;\r\n        premiumDecreaseRate = _premiumDecreaseRate;\r\n    }\r\n\r\n    function _premium(string memory name, uint expires, uint /*duration*/) override internal view returns(uint) {\r\n        expires = expires.add(GRACE_PERIOD);\r\n        if(expires > block.timestamp) {\r\n            // No premium for renewals\r\n            return 0;\r\n        }\r\n\r\n        // Calculate the discount off the maximum premium\r\n        uint discount = premiumDecreaseRate.mul(block.timestamp.sub(expires));\r\n\r\n        // If we've run out the premium period, return 0.\r\n        if(discount > initialPremium) {\r\n            return 0;\r\n        }\r\n        \r\n        return initialPremium - discount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the timestamp at which a name with the specified expiry date will have\r\n     *      the specified re-registration price premium.\r\n     * @param expires The timestamp at which the name expires.\r\n     * @param amount The amount, in wei, the caller is willing to pay\r\n     * @return The timestamp at which the premium for this domain will be `amount`.\r\n     */\r\n    function timeUntilPremium(uint expires, uint amount) external view returns(uint) {\r\n        amount = weiToAttoUSD(amount);\r\n        require(amount <= initialPremium);\r\n\r\n        expires = expires.add(GRACE_PERIOD);\r\n\r\n        uint discount = initialPremium.sub(amount);\r\n        uint duration = discount.div(premiumDecreaseRate);\r\n        return expires.add(duration);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\r\n        return (interfaceID == TIME_UNTIL_PREMIUM_ID) || super.supportsInterface(interfaceID);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_initialPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumDecreaseRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"initialPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumDecreaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"timeUntilPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LinearPremiumPriceOracle", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000092dada8ef62a5300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001275209157690000000000000000000000000000000000000000000000000000049d482455da00000000000000000000000000000000000000000000000000000024ea4122af", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46b08e9407f062bc7740e2fcea3add5ab5cd868e73d8a269de4c24facf4cc063"}]}