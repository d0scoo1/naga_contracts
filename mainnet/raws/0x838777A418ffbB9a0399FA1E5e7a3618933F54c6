{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\n// pragma experimental ABIEncoderV2;\n\n////// lib/dss-exec-lib/src/CollateralOpts.sol\n/* pragma solidity ^0.6.12; */\n\nstruct CollateralOpts {\n    bytes32 ilk;\n    address gem;\n    address join;\n    address clip;\n    address calc;\n    address pip;\n    bool    isLiquidatable;\n    bool    isOSM;\n    bool    whitelistOSM;\n    uint256 ilkDebtCeiling;\n    uint256 minVaultAmount;\n    uint256 maxLiquidationAmount;\n    uint256 liquidationPenalty;\n    uint256 ilkStabilityFee;\n    uint256 startingPriceFactor;\n    uint256 breakerTolerance;\n    uint256 auctionDuration;\n    uint256 permittedDrop;\n    uint256 liquidationRatio;\n    uint256 kprFlatReward;\n    uint256 kprPctReward;\n}\n\n////// lib/dss-exec-lib/src/DssExecLib.sol\n//\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n/* pragma solidity ^0.6.12; */\n/* // pragma experimental ABIEncoderV2; */\n\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface Initializable {\n    function init(bytes32) external;\n}\n\ninterface Authorizable {\n    function rely(address) external;\n    function deny(address) external;\n}\n\ninterface Fileable {\n    function file(bytes32, address) external;\n    function file(bytes32, uint256) external;\n    function file(bytes32, bytes32, uint256) external;\n    function file(bytes32, bytes32, address) external;\n}\n\ninterface Drippable {\n    function drip() external returns (uint256);\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface Pricing {\n    function poke(bytes32) external;\n}\n\ninterface ERC20 {\n    function decimals() external returns (uint8);\n}\n\ninterface DssVat {\n    function hope(address) external;\n    function nope(address) external;\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n    function Line() external view returns (uint256);\n    function suck(address, address, uint) external;\n}\n\ninterface ClipLike {\n    function vat() external returns (address);\n    function dog() external returns (address);\n    function spotter() external view returns (address);\n    function calc() external view returns (address);\n    function ilk() external returns (bytes32);\n}\n\ninterface JoinLike {\n    function vat() external returns (address);\n    function ilk() external returns (bytes32);\n    function gem() external returns (address);\n    function dec() external returns (uint256);\n    function join(address, uint) external;\n    function exit(address, uint) external;\n}\n\n// Includes Median and OSM functions\ninterface OracleLike_2 {\n    function src() external view returns (address);\n    function lift(address[] calldata) external;\n    function drop(address[] calldata) external;\n    function setBar(uint256) external;\n    function kiss(address) external;\n    function diss(address) external;\n    function kiss(address[] calldata) external;\n    function diss(address[] calldata) external;\n    function orb0() external view returns (address);\n    function orb1() external view returns (address);\n}\n\ninterface MomLike {\n    function setOsm(bytes32, address) external;\n    function setPriceTolerance(address, uint256) external;\n}\n\ninterface RegistryLike {\n    function add(address) external;\n    function xlip(bytes32) external view returns (address);\n}\n\n// https://github.com/makerdao/dss-chain-log\ninterface ChainlogLike_1 {\n    function setVersion(string calldata) external;\n    function setIPFS(string calldata) external;\n    function setSha256sum(string calldata) external;\n    function getAddress(bytes32) external view returns (address);\n    function setAddress(bytes32, address) external;\n    function removeAddress(bytes32) external;\n}\n\ninterface IAMLike {\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n    function setIlk(bytes32,uint256,uint256,uint256) external;\n    function remIlk(bytes32) external;\n    function exec(bytes32) external returns (uint256);\n}\n\ninterface LerpFactoryLike {\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\n}\n\ninterface LerpLike {\n    function tick() external;\n}\n\n\nlibrary DssExecLib {\n\n    /* WARNING\n\nThe following library code acts as an interface to the actual DssExecLib\nlibrary, which can be found in its own deployed contract. Only trust the actual\nlibrary's implementation.\n\n    */\n\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n    uint256 constant internal WAD      = 10 ** 18;\n    uint256 constant internal RAY      = 10 ** 27;\n    uint256 constant internal RAD      = 10 ** 45;\n    uint256 constant internal THOUSAND = 10 ** 3;\n    uint256 constant internal MILLION  = 10 ** 6;\n    uint256 constant internal BPS_ONE_PCT             = 100;\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {}\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\n    function setChangelogAddress(bytes32 _key, address _val) public {}\n    function setChangelogVersion(string memory _version) public {}\n    function authorize(address _base, address _ward) public {}\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {}\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {}\n    function increaseGlobalDebtCeiling(uint256 _amount) public {}\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {}\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {}\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\n}\n\n////// lib/dss-exec-lib/src/DssAction.sol\n//\n// DssAction.sol -- DSS Executive Spell Actions\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\n\ninterface OracleLike_1 {\n    function src() external view returns (address);\n}\n\nabstract contract DssAction {\n\n    using DssExecLib for *;\n\n    // Modifier used to limit execution time when office hours is enabled\n    modifier limited {\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\n        _;\n    }\n\n    // Office Hours defaults to true by default.\n    //   To disable office hours, override this function and\n    //    return false in the inherited action.\n    function officeHours() public virtual returns (bool) {\n        return true;\n    }\n\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\n    function execute() external limited {\n        actions();\n    }\n\n    // DssAction developer must override `actions()` and place all actions to be called inside.\n    //   The DssExec function will call this subject to the officeHours limiter\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n    function actions() public virtual;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external virtual view returns (string memory);\n\n    // Returns the next available cast time\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n        require(eta <= uint40(-1));\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n    }\n}\n\n////// lib/dss-exec-lib/src/DssExec.sol\n//\n// DssExec.sol -- MakerDAO Executive Spell Template\n//\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.6.12; */\n\ninterface PauseAbstract {\n    function delay() external view returns (uint256);\n    function plot(address, bytes32, bytes calldata, uint256) external;\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n}\n\ninterface Changelog {\n    function getAddress(bytes32) external view returns (address);\n}\n\ninterface SpellAction {\n    function officeHours() external view returns (bool);\n    function description() external view returns (string memory);\n    function nextCastTime(uint256) external view returns (uint256);\n}\n\ncontract DssExec {\n\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n    uint256                 public eta;\n    bytes                   public sig;\n    bool                    public done;\n    bytes32       immutable public tag;\n    address       immutable public action;\n    uint256       immutable public expiration;\n    PauseAbstract immutable public pause;\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\n    function description() external view returns (string memory) {\n        return SpellAction(action).description();\n    }\n\n    function officeHours() external view returns (bool) {\n        return SpellAction(action).officeHours();\n    }\n\n    function nextCastTime() external view returns (uint256 castTime) {\n        return SpellAction(action).nextCastTime(eta);\n    }\n\n    // @param _description  A string description of the spell\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n    // @param _spellAction  The address of the spell action\n    constructor(uint256 _expiration, address _spellAction) public {\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\n        expiration  = _expiration;\n        action      = _spellAction;\n\n        sig = abi.encodeWithSignature(\"execute()\");\n        bytes32 _tag;                    // Required for assembly access\n        address _action = _spellAction;  // Required for assembly access\n        assembly { _tag := extcodehash(_action) }\n        tag = _tag;\n    }\n\n    function schedule() public {\n        require(now <= expiration, \"This contract has expired\");\n        require(eta == 0, \"This spell has already been scheduled\");\n        eta = now + PauseAbstract(pause).delay();\n        pause.plot(action, tag, sig, eta);\n    }\n\n    function cast() public {\n        require(!done, \"spell-already-cast\");\n        done = true;\n        pause.exec(action, tag, sig, eta);\n    }\n}\n\n////// src/DssSpell.sol\n\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.12; */\n\n/* import \"dss-exec-lib/DssExec.sol\"; */\n/* import \"dss-exec-lib/DssAction.sol\"; */\n\ninterface ChainlogLike_2 {\n    function removeAddress(bytes32) external;\n}\n\ninterface DssVestLike_1 {\n    function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);\n    function file(bytes32, uint256) external;\n    function restrict(uint256) external;\n}\n\ncontract DssSpellAction is DssAction {\n\n    // Provides a descriptive tag for bot consumption\n    // This should be modified weekly to provide a summary of the actions\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/6410a8f1f720099f7ba6553c84b9f9d966a3d319/governance/votes/Executive%20vote%20-%20September%203%2C%202021.md -q -O - 2>/dev/null)\"\n    string public constant override description =\n        \"2021-09-03 MakerDAO Executive Spell | Hash: 0xaa8b302da5c9a3f4bfd45685fd04398d3d35af1b4c1cbdfe83f166a6455de0ea\";\n\n    address constant MCD_VEST_DAI = 0x2Cc583c0AaCDaC9e23CB601fDA8F1A0c56Cdcb71;\n    address constant MCD_VEST_MKR = 0x0fC8D4f2151453ca0cA56f07359049c8f07997Bd;\n\n    // Com Core Unit\n    address constant COM_WALLET     = 0x1eE3ECa7aEF17D1e74eD7C447CcBA61aC76aDbA9;\n    // Dai Foundation Core Unit\n    address constant DAIF_WALLET    = 0x34D8d61050Ef9D2B48Ab00e6dc8A8CA6581c5d63;\n    // Dai Foundation Core Unit (Emergency Fund)\n    address constant DAIF_EF_WALLET = 0x5F5c328732c9E52DfCb81067b8bA56459b33921f;\n    // GovAlpha Core Unit\n    address constant GOV_WALLET     = 0x01D26f8c5cC009868A4BF66E268c17B057fF7A73;\n    // Growth Core Unit\n    address constant GRO_WALLET     = 0x7800C137A645c07132886539217ce192b9F0528e;\n    // Marketing Content Production Core Unit\n    address constant MKT_WALLET     = 0xDCAF2C84e1154c8DdD3203880e5db965bfF09B60;\n    // Oracles Core Unit\n    address constant ORA_WALLET     = 0x2d09B7b95f3F312ba6dDfB77bA6971786c5b50Cf;\n    // Protocol Engineering\n    address constant PE_WALLET      = 0xe2c16c308b843eD02B09156388Cb240cEd58C01c;\n    // Risk Core Unit\n    address constant RISK_WALLET    = 0xd98ef20520048a35EdA9A202137847A62120d2d9;\n    // Real-World Finance Core Unit\n    address constant RWF_WALLET     = 0x9e1585d9CA64243CE43D42f7dD7333190F66Ca09;\n    // Ses Core Unit\n    address constant SES_WALLET     = 0x87AcDD9208f73bFc9207e1f6F0fDE906bcA95cc6;\n\n    uint256 constant MAY_01_2021 = 1619827200;\n    uint256 constant JUN_21_2021 = 1624233600;\n    uint256 constant JUL_01_2021 = 1625097600;\n    uint256 constant SEP_01_2021 = 1630454400;\n    uint256 constant SEP_13_2021 = 1631491200;\n    uint256 constant SEP_20_2021 = 1632096000;\n    uint256 constant OCT_01_2021 = 1633046400;\n    uint256 constant NOV_01_2021 = 1635724800;\n    uint256 constant JAN_01_2022 = 1640995200;\n    uint256 constant MAY_01_2022 = 1651363200;\n    uint256 constant JUL_01_2022 = 1656633600;\n    uint256 constant SEP_01_2022 = 1661990400;\n\n    uint256 constant MILLION = 10 ** 6;\n    uint256 constant WAD     = 10 ** 18;\n\n    // Turn off office hours\n    function officeHours() public override returns (bool) {\n        return false;\n    }\n\n    function actions() public override {\n        // Fix PAX keys\n        DssExecLib.setChangelogAddress(\"PAX\", DssExecLib.getChangelogAddress(\"PAXUSD\"));\n        DssExecLib.setChangelogAddress(\"PIP_PAX\", DssExecLib.getChangelogAddress(\"PIP_PAXUSD\"));\n        ChainlogLike_2(DssExecLib.LOG).removeAddress(\"PIP_PSM_PAX\");\n\n        // Set unique payments\n        DssExecLib.sendPaymentFromSurplusBuffer(DAIF_EF_WALLET, 2_000_000);\n        DssExecLib.sendPaymentFromSurplusBuffer(DAIF_WALLET,      138_591);\n        DssExecLib.sendPaymentFromSurplusBuffer(SES_WALLET,       155_237);\n\n        // Setup both DssVest modules\n        DssExecLib.authorize(DssExecLib.vat(), MCD_VEST_DAI);\n        DssExecLib.authorize(DssExecLib.getChangelogAddress(\"GOV_GUARD\"), MCD_VEST_MKR);\n        DssVestLike_1(MCD_VEST_DAI).file(\"cap\", 1 * MILLION * WAD / 30 days);\n        DssVestLike_1(MCD_VEST_MKR).file(\"cap\", 1_100 * WAD / 365 days);\n        DssExecLib.setChangelogAddress(\"MCD_VEST_DAI\", MCD_VEST_DAI);\n        DssExecLib.setChangelogAddress(\"MCD_VEST_MKR\", MCD_VEST_MKR);\n\n        // DssVestLike(VEST).restrict( Only recipient can request funds\n        //     DssVestLike(VEST).create(\n        //         Recipient of vest,\n        //         Total token amount of vest over period,\n        //         Start timestamp of vest,\n        //         Duration of the vesting period (in seconds),\n        //         Length of cliff period (in seconds),\n        //         Manager address\n        //     )\n        // );\n\n        // Set DAI stream payments\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                COM_WALLET,   122_700.00 * 10**18, SEP_01_2021, JAN_01_2022 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                               DAIF_WALLET,   492_971.00 * 10**18, OCT_01_2021, SEP_01_2022 - OCT_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                GOV_WALLET,   123_333.00 * 10**18, SEP_01_2021, OCT_01_2021 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                GRO_WALLET,   300_050.00 * 10**18, SEP_01_2021, NOV_01_2021 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                MKT_WALLET,   103_134.00 * 10**18, SEP_01_2021, NOV_01_2021 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                ORA_WALLET, 4_196_771.00 * 10**18, SEP_01_2021, JUL_01_2022 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                 PE_WALLET, 4_080_000.00 * 10**18, SEP_01_2021, MAY_01_2022 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                               RISK_WALLET, 2_184_000.00 * 10**18, SEP_01_2021, SEP_01_2022 - SEP_01_2021,            0, address(0))\n        );\n        DssVestLike_1(MCD_VEST_DAI).restrict(\n            DssVestLike_1(MCD_VEST_DAI).create(                                RWF_WALLET,   620_000.00 * 10**18, SEP_01_2021, JAN_01_2022 - SEP_01_2021,            0, address(0))\n        );\n\n        // Growth MKR whole team vesting\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(GRO_WALLET,                                       803.18 * 10**18, JUL_01_2021,                      365 days, 365 days, address(0))\n        );\n\n        // Oracles MKR whole team vesting\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(ORA_WALLET,                                     1_051.25 * 10**18, JUL_01_2021,                      365 days, 365 days, address(0))\n        );\n\n        // PE MKR vestings (per individual)\n        (\n            DssVestLike_1(MCD_VEST_MKR).create(0xfDB9F5e045D7326C1da87d0e199a05CDE5378EdD,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0xBe4De3E151D52668c2C0610C985b4297833239C8,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x58EA3C96a8b81abC01EB78B98deCe2AD1e5fd7fc,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0xBAB4Cd1cB31Cd28f842335973712a6015eB0EcD5,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        (\n            DssVestLike_1(MCD_VEST_MKR).create(0xB5c86aff90944CFB3184902482799bD5fA3B18dD,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x780f478856ebE01e46d9A432e8776bAAB5A81b5b,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x34364E234b3DD02FF5c8A2ad9ba86bbD3D3D3284,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x46E5DBad3966453Af57e90Ec2f3548a0e98ec979,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x18CaE82909C31b60Fe0A9656D76406345C9cb9FB,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        (\n            DssVestLike_1(MCD_VEST_MKR).create(0x301dD8eB831ddb93F128C33b9d9DC333210d9B25,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        (\n            DssVestLike_1(MCD_VEST_MKR).create(0xBFC47D0D7452a25b7d3AA4d7379c69A891bD5d43,       995.00 * 10**18, MAY_01_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        (\n            DssVestLike_1(MCD_VEST_MKR).create(0xcD16aa978A89Aa26b3121Fc8dd32228d7D0fcF4a,       995.00 * 10**18, SEP_13_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x3189cfe40CF011AAb13aDD8aE7284deD4CD30602,       995.00 * 10**18, JUN_21_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n        DssVestLike_1(MCD_VEST_MKR).restrict(\n            DssVestLike_1(MCD_VEST_MKR).create(0x29b37159C09a65af6a7CFb062998B169879442B6,       995.00 * 10**18, SEP_20_2021,                  4 * 365 days, 365 days,  PE_WALLET)\n        );\n\n        // Increase PAX-PSM-A DC from 50 million DAI to 500 million DAI\n        DssExecLib.increaseIlkDebtCeiling(\"PSM-PAX-A\", 450 * MILLION, true);\n\n        // Decrease Flash Mint Fee (toll) from 0.05% to 0%\n        DssExecLib.setValue(DssExecLib.getChangelogAddress(\"MCD_FLASH\"), \"toll\", 0);\n\n        // Bump changelog version\n        DssExecLib.setChangelogVersion(\"1.9.5\");\n    }\n}\n\ncontract DssSpell is DssExec {\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {}\n}\n\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:3117d2cba81fc118fc471d383ab20f11939a3cff", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}