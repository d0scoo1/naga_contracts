{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/text/TextLogoElement.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../common/ERC721A.sol';\\nimport '../common/LogoHelper.sol';\\nimport './SvgText.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ninterface IDescriptor {\\n  function txtVals(uint256 tokenId) external view returns (string memory);\\n  function txtFonts(uint256 tokenId) external view returns (string memory link, string memory name);\\n  function getSvg(uint256 tokenId) external view returns (string memory);\\n  function getSvg(uint256 tokenId, string memory txt, string memory font, string memory fontLink) external view returns (string memory);\\n  function getSvgFromSeed(uint256 seed, string memory txt, string memory font, string memory fontLink) external view returns (string memory);\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n  function setTxtVal(uint256 tokenId, string memory val) external;\\n  function setFont(uint256 tokenId, string memory link, string memory font) external;\\n}\\n\\ncontract TextLogoElement is ERC721A, ReentrancyGuard, Ownable {\\n  /// @notice Permanently seals the contract from being modified by owner\\n  bool public contractSealed;\\n\\n  address public descriptorAddress;\\n  IDescriptor public descriptor;\\n\\n  bool public mintIsActive = false;\\n\\n  uint256 price = 0 ether;\\n\\n  modifier onlyWhileUnsealed() {\\n    require(!contractSealed, \\\"Contract is sealed\\\");\\n    _;\\n  }\\n\\n  constructor() ERC721A('Text by Logo', 'TEXT', 100) Ownable() {\\n  }\\n\\n  /// @notice Sets price for mint, initially set at 0 ether\\n  /// @param _price, the new price\\n  function setPrice(uint256 _price) external onlyOwner onlyWhileUnsealed {\\n    price = _price;\\n  }\\n\\n  function setDescriptorAddress(address _address) external onlyOwner onlyWhileUnsealed {\\n    descriptorAddress = _address;\\n    descriptor = IDescriptor(_address);\\n  }\\n\\n  function mint(uint256 quantity) external payable nonReentrant {\\n    require(mintIsActive, 'Mint is not active');\\n    require(totalSupply() + quantity <= 20000, 'Exceeded supply');\\n    require(quantity <= 2, 'Only 2 tokens can be minted at once');\\n    require(msg.value == price * quantity, 'Incorrect eth amount sent');\\n    require(msg.sender == tx.origin, 'Contract cannot mint');\\n\\n    _safeMint(msg.sender, quantity);\\n  }\\n\\n  /// @notice Owner mint, allows owner to mint tokens up to 100 at a time\\n  /// @param to, the address to mint to\\n  /// @param quantity, number of tokens to mint\\n  function mintAdmin(address to, uint256 quantity) external onlyOwner nonReentrant {\\n    require(totalSupply() + quantity <= 20000, \\\"Exceeded Supply\\\");\\n    _safeMint(to, quantity);\\n  }\\n\\n  /// @notice Toggles the mint state\\n  function toggleMint() external onlyOwner onlyWhileUnsealed {\\n    mintIsActive = !mintIsActive;\\n  }\\n\\n  /// @notice Specifies whether or not non-owners can use a token for their logo layer\\n  /// @dev Required for any element used for a logo layer\\n  function mustBeOwnerForLogo() external view returns (bool) {\\n    return true;\\n  }\\n\\n  /// @notice Gets the SVG for the logo layer\\n  /// @dev Required for any element used for a logo layer\\n  /// @param tokenId, the tokenId that SVG will be fetched for\\n  function getSvg(uint256 tokenId) public view returns (string memory) {\\n    return descriptor.getSvg(tokenId);\\n  }\\n\\n  function getSvg(uint256 tokenId, string memory txt, string memory font, string memory fontLink) public view returns (string memory) {\\n    return descriptor.getSvg(tokenId, txt, font, fontLink);\\n  }\\n\\n  function getSvgFromSeed(uint256 seed, string memory txt, string memory font, string memory fontLink) public view returns (string memory) {\\n    return descriptor.getSvgFromSeed(seed, txt, font, fontLink);\\n  }\\n\\n  function tokenURI(uint256 tokenId) override public view returns (string memory) {\\n    return descriptor.tokenURI(tokenId);\\n  }\\n\\n  function getTxtVal(uint256 tokenId) public view returns (string memory) {\\n    return descriptor.txtVals(tokenId);\\n  }\\n\\n  function getTxtFont(uint256 tokenId) public view returns (string memory link, string memory name) {\\n    (link, name) = descriptor.txtFonts(tokenId);\\n    return (link, name);\\n  }\\n\\n  function setTxtVal(uint256 tokenId, string memory val) public {\\n    descriptor.setTxtVal(tokenId, val);\\n  }\\n\\n  function setFont(uint256 tokenId, string memory link, string memory font) public {\\n    descriptor.setFont(tokenId, link, font);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) external onlyOwner {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /// @notice Permananetly seals the contract from being modified\\n  function sealContract() external onlyOwner {\\n    contractSealed = true;\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creators: locationtba.eth, 2pmflow.eth\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n  Context,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  struct TokenOwnership {\\n    address addr;\\n    uint64 startTimestamp;\\n  }\\n\\n  struct AddressData {\\n    uint128 balance;\\n    uint128 numberMinted;\\n  }\\n\\n  uint256 private currentIndex = 0;\\n\\n  uint256 internal immutable maxBatchSize;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 maxBatchSize_\\n  ) {\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n    _name = name_;\\n    _symbol = symbol_;\\n    maxBatchSize = maxBatchSize_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return currentIndex;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n    return index;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n    uint256 numMintedSoFar = totalSupply();\\n    uint256 tokenIdsIdx = 0;\\n    address currOwnershipAddr = address(0);\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\n      TokenOwnership memory ownership = _ownerships[i];\\n      if (ownership.addr != address(0)) {\\n        currOwnershipAddr = ownership.addr;\\n      }\\n      if (currOwnershipAddr == owner) {\\n        if (tokenIdsIdx == index) {\\n          return i;\\n        }\\n        tokenIdsIdx++;\\n      }\\n    }\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    require(\\n      owner != address(0),\\n      \\\"ERC721A: number minted query for the zero address\\\"\\n    );\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  function ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (TokenOwnership memory)\\n  {\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n    uint256 lowestTokenToCheck;\\n    if (tokenId >= maxBatchSize) {\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n    }\\n\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n      TokenOwnership memory ownership = _ownerships[curr];\\n      if (ownership.addr != address(0)) {\\n        return ownership;\\n      }\\n    }\\n\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n    );\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721A.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, _data),\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return tokenId < currentIndex;\\n  }\\n\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` cannot be larger than the max batch size.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    uint256 startTokenId = currentIndex;\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    AddressData memory addressData = _addressData[to];\\n    _addressData[to] = AddressData(\\n      addressData.balance + uint128(quantity),\\n      addressData.numberMinted + uint128(quantity)\\n    );\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    uint256 updatedIndex = startTokenId;\\n\\n    for (uint256 i = 0; i < quantity; i++) {\\n      emit Transfer(address(0), to, updatedIndex);\\n      require(\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n      );\\n      updatedIndex++;\\n    }\\n\\n    currentIndex = updatedIndex;\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n      getApproved(tokenId) == _msgSender() ||\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n    require(\\n      isApprovedOrOwner,\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    require(\\n      prevOwnership.addr == from,\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\n    );\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    _addressData[from].balance -= 1;\\n    _addressData[to].balance += 1;\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n    uint256 nextTokenId = tokenId + 1;\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\n      if (_exists(nextTokenId)) {\\n        _ownerships[nextTokenId] = TokenOwnership(\\n          prevOwnership.addr,\\n          prevOwnership.startTimestamp\\n        );\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  uint256 public nextOwnerToExplicitlySet = 0;\\n\\n  /**\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n   */\\n  function _setOwnersExplicit(uint256 quantity) internal {\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n    if (endIndex > currentIndex - 1) {\\n      endIndex = currentIndex - 1;\\n    }\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n      if (_ownerships[i].addr == address(0)) {\\n        TokenOwnership memory ownership = ownershipOf(i);\\n        _ownerships[i] = TokenOwnership(\\n          ownership.addr,\\n          ownership.startTimestamp\\n        );\\n      }\\n    }\\n    nextOwnerToExplicitlySet = endIndex + 1;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\"\r\n    },\r\n    \"contracts/common/LogoHelper.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary LogoHelper {\\n  function getRotate(string memory text) public pure returns (string memory) {\\n    bytes memory byteString = bytes(text);\\n    string memory rotate = string(abi.encodePacked('-', toString(random(text) % 10 + 1)));\\n    for (uint i=1; i < byteString.length; i++) {\\n      uint nextRotate = random(rotate) % 10 + 1;\\n      if (i % 2 == 0) {\\n        rotate = string(abi.encodePacked(rotate, ',-', toString(nextRotate)));\\n      } else {\\n        rotate = string(abi.encodePacked(rotate, ',', toString(nextRotate)));\\n      }\\n    }\\n    return rotate;\\n  }\\n\\n  function getTurbulance(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory turbulance = decimalInRange(seed, max, magnitudeOffset);\\n    uint rand = randomInRange(turbulance, max, 0);\\n    return string(abi.encodePacked(turbulance, ', ', getDecimal(rand, magnitudeOffset)));\\n  }\\n\\n  function decimalInRange(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    uint rand = randomInRange(seed, max, 0);\\n    return getDecimal(rand, magnitudeOffset);\\n  }\\n\\n  // CORE HELPERS //\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomFromInt(uint256 seed) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed)));\\n  }\\n\\n  function randomInRange(string memory input, uint max, uint offset) public pure returns (uint256) {\\n    max = max - offset;\\n    return (random(input) % max) + offset;\\n  }\\n\\n  function equal(string memory a, string memory b) public pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);            \\n    }\\n    return string(s);\\n  }\\n\\nfunction char(bytes1 b) internal pure returns (bytes1 c) {\\n  if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n  else return bytes1(uint8(b) + 0x57);\\n}\\n  \\n  function getDecimal(uint val, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory decimal;\\n    if (val != 0) {\\n      for (uint i = 10; i < magnitudeOffset / val; i=10*i) {\\n        decimal = string(abi.encodePacked(decimal, '0'));\\n      }\\n    }\\n    decimal = string(abi.encodePacked('0.', decimal, toString(val)));\\n    return decimal;\\n  }\\n\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/text/SvgText.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @title  Text Logo Elements\\n/// @notice On-chain SVG\\npragma solidity ^0.8.0;\\n\\nimport '../common/SvgFill.sol';\\nimport '../common/SvgElement.sol';\\nimport '../common/LogoHelper.sol';\\n\\nlibrary SvgText {\\n\\n  struct Font {\\n    string link;\\n    string name;\\n  }\\n  \\n  struct Text {\\n    string id;\\n    string class;\\n    string val;\\n    string textType;\\n    Font font;\\n    uint256 size;\\n    string paletteName;\\n    SvgFill.Fill[] fills;\\n    bool animate;\\n  }\\n\\n  function getSvgDefs(string memory seed, Text memory text) public pure returns (string memory) {\\n    string memory defs = '';\\n\\n    for (uint i = 0; i < text.fills.length; i++) {\\n      defs = string(abi.encodePacked(defs, SvgFill.getFillDefs(seed, text.fills[i])));\\n    }\\n\\n    if (LogoHelper.equal(text.textType, 'Rug Pull')) {\\n      uint256[] memory ys = getRugPullY(text);\\n      for (uint8 i = 0; i < 4; i++) {\\n        string memory path = SvgElement.getRect(SvgElement.Rect('', '', LogoHelper.toString(ys[i] + 3), '100%', '100%', '', '', ''));\\n        string memory id = string(abi.encodePacked('clip-', LogoHelper.toString(i)));\\n        defs = string(abi.encodePacked(defs, SvgElement.getClipPath(SvgElement.ClipPath(id, path))));\\n      }\\n    }\\n    return defs;\\n  }\\n  \\n  // TEXT //\\n  function getSvgStyles(Text memory text) public pure returns (string memory) {\\n    string memory styles = !LogoHelper.equal(text.font.link, '') ? string(abi.encodePacked('@import url(', text.font.link, '); ')) : '';\\n    styles = string(abi.encodePacked(styles, '.', text.class, ' { font-family:', text.font.name, '; font-size: ', LogoHelper.toString(text.size), 'px; font-weight: 800; } '));\\n\\n    for (uint i=0; i < text.fills.length; i++) {\\n      styles = string(abi.encodePacked(styles, SvgFill.getFillStyles(text.fills[i])));\\n    }\\n    return styles;\\n  }\\n\\n  function getSvgContent(Text memory text) public pure returns (string memory) {\\n    string memory content = '';\\n    if (LogoHelper.equal(text.textType, 'Plain')) {\\n      content = SvgElement.getText(SvgElement.Text(text.class, '50%', '50%', '', '', '', 'central', 'middle', '', '', '', text.val));\\n    } else if (LogoHelper.equal(text.textType, 'Rug Pull')) {\\n      content = getRugPullContent(text);\\n    } else if (LogoHelper.equal(text.textType, 'Mailbox') || LogoHelper.equal(text.textType, 'Warped Mailbox')) {\\n      uint8 iterations = LogoHelper.equal(text.textType, 'Mailbox') ? 2 : 30;\\n      for (uint8 i = 0; i < iterations; i++) {\\n        content = string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(string(abi.encodePacked(text.class, ' ', text.fills[i % text.fills.length].class)), '50%', '50%', LogoHelper.toString(iterations - i), LogoHelper.toString(iterations - i), '', 'central', 'middle', '', '', '', text.val))));\\n      }\\n      content = string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(string(abi.encodePacked(text.class, ' ', text.fills[text.fills.length - 1].class)), '50%', '50%', '', '', '', 'central', 'middle', '', '', '', text.val))));\\n    } else if (LogoHelper.equal(text.textType, 'NGMI')) {\\n      string memory rotate = LogoHelper.getRotate(text.val);\\n      content = SvgElement.getText(SvgElement.Text(text.class, '50%', '50%', '', '', '', 'central', 'middle', rotate, '', '', text.val));\\n    }\\n    return content;\\n  }\\n\\n  function getRugPullContent(Text memory text) public pure returns (string memory) {\\n    // get first animation y via y_prev = (y of txt 1) - font size / 2)\\n    // next animation goes to y_prev + (font size / 3)\\n    // clip path is txt elemnt y + 3\\n\\n    string memory content = '';\\n    uint256[] memory ys = getRugPullY(text);\\n\\n    string memory element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[4]), '', '2600', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-3', element));      \\n\\n    content = element;\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[3]), '', '2400', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-2', element));    \\n    content = string(abi.encodePacked(content, element));\\n\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[2]), '', '2200', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-1', element));      \\n    content = string(abi.encodePacked(content, element));\\n\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[1]), '', '2000', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-0', element));\\n    content = string(abi.encodePacked(content, element));\\n\\n    return string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', '', text.val))));\\n  }\\n\\n  function getRugPullY(Text memory text) public pure returns (uint256[] memory) {\\n    uint256[] memory ys = new uint256[](5);\\n    uint256 y =  (text.size - (text.size / 4)) + (text.size / 2) + (text.size / 3) + (text.size / 4) + (text.size / 5);\\n    y = ((300 - y) / 2) + (text.size - (text.size / 4));\\n    ys[0] = y;\\n    y = y + text.size / 2;\\n    ys[1] = y;\\n    y = y + text.size / 3;\\n    ys[2] = y;\\n    y = y + text.size / 4;\\n    ys[3] = y;\\n    y = y + text.size / 5;\\n    ys[4] = y;\\n    return ys;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgFill.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './SvgElement.sol';\\nimport './LogoHelper.sol';\\n\\nlibrary SvgFill {\\n  struct Fill {\\n    string id;\\n    string class;\\n    string fillType;\\n    string[] colors;\\n    bool animate;\\n  }\\n\\n  // FILL //\\n  function getFillDefs(string memory seed, Fill memory fill) public pure returns (string memory) {\\n    string memory defs = '';\\n    if (LogoHelper.equal(fill.fillType, 'Linear Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), ''));\\n      } else {\\n       string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100 , 0));\\n       string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 50000 , 5000));\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), SvgElement.getAnimate(SvgElement.Animate(getLinearAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n      }\\n    } else if (LogoHelper.equal(fill.fillType, 'Radial Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), ''));\\n      } else {\\n        string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100, 0));\\n        string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 10000 , 5000));\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), SvgElement.getAnimate(SvgElement.Animate(getRadialAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n        \\n      }\\n    }\\n    return defs;\\n  }\\n\\n  function getFillStyles(Fill memory fill) public pure returns (string memory) {\\n    if (LogoHelper.equal(fill.fillType, 'Solid')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: ', fill.colors[0], ' } '));\\n    } else if (LogoHelper.equal(fill.fillType, 'Linear Gradient')\\n                || LogoHelper.equal(fill.fillType, 'Radial Gradient')\\n                  || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')\\n                    || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: url(#', fill.id, ') } '));\\n    }\\n    string memory styles = '';\\n    return styles;\\n  }\\n\\n  function getLinearAnimationType(string memory seed) private pure returns (string memory) {\\n    string[4] memory types = ['x1', 'x2', 'y1', 'y2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getRadialAnimationType(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['fx', 'fy', 'r'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getAnimationRepeat(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['indefinite', '1', '2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgElement.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice Helper to build svg elements\\npragma solidity ^0.8.0;\\n\\nlibrary SvgElement {\\n  struct Rect {\\n    string class;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string opacity;\\n    string fill;\\n    string filter;\\n  }\\n\\n  function getRect(Rect memory rect) public pure returns (string memory) {\\n    string memory element = '<rect ';\\n    element = !equal(rect.class, '') ? string(abi.encodePacked(element, 'class=\\\"', rect.class, '\\\" ')) : element;\\n    element = !equal(rect.x, '') ? string(abi.encodePacked(element, 'x=\\\"', rect.x, '\\\" ')) : element;\\n    element = !equal(rect.y, '') ? string(abi.encodePacked(element, 'y=\\\"', rect.y, '\\\" ')) : element;\\n    element = !equal(rect.width, '') ? string(abi.encodePacked(element, 'width=\\\"', rect.width, '\\\" ')) : element;\\n    element = !equal(rect.height, '') ? string(abi.encodePacked(element, 'height=\\\"', rect.height, '\\\" ')) : element;\\n    element = !equal(rect.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', rect.opacity, '\\\" ')) : element;\\n    element = !equal(rect.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"url(#', rect.fill, ')\\\" ')) : element;\\n    element = !equal(rect.filter, '') ? string(abi.encodePacked(element, 'filter=\\\"url(#', rect.filter, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Circle {\\n    string class;\\n    string cx;\\n    string cy;\\n    string r;\\n    string opacity;\\n  }\\n\\n  function getCircle(Circle memory circle) public pure returns (string memory) {\\n    string memory element = '<circle ';\\n    element = !equal(circle.class, '') ? string(abi.encodePacked(element, 'class=\\\"', circle.class, '\\\" ')) : element;\\n    element = !equal(circle.cx, '') ? string(abi.encodePacked(element, 'cx=\\\"', circle.cx, '\\\" ')) : element;\\n    element = !equal(circle.cy, '') ? string(abi.encodePacked(element, 'cy=\\\"', circle.cy, '\\\" ')) : element;\\n    element = !equal(circle.r, '') ? string(abi.encodePacked(element, 'r=\\\"', circle.r, '\\\" ')) : element;\\n    element = !equal(circle.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', circle.opacity, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Text {\\n    string class;\\n    string x;\\n    string y;\\n    string dx;\\n    string dy;\\n    string display;\\n    string baseline;\\n    string anchor;\\n    string rotate;\\n    string transform;\\n    string clipPath;\\n    string val;\\n  }\\n\\n  function getText(Text memory txt) public pure returns (string memory) {\\n    string memory element = '<text ';\\n    element = !equal(txt.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txt.class, '\\\" ')) : element;\\n    element = !equal(txt.x, '') ? string(abi.encodePacked(element, 'x=\\\"', txt.x, '\\\" ')) : element;\\n    element = !equal(txt.y, '') ? string(abi.encodePacked(element, 'y=\\\"', txt.y, '\\\" ')) : element;\\n    element = !equal(txt.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', txt.dx, '\\\" ')) : element;\\n    element = !equal(txt.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', txt.dy, '\\\" ')) : element;\\n    element = !equal(txt.display, '') ? string(abi.encodePacked(element, 'display=\\\"', txt.display, '\\\" ')) : element;\\n    element = !equal(txt.baseline, '') ? string(abi.encodePacked(element, 'dominant-baseline=\\\"', txt.baseline, '\\\" ')) : element;\\n    element = !equal(txt.anchor, '') ? string(abi.encodePacked(element, 'text-anchor=\\\"', txt.anchor, '\\\" ')) : element;\\n    element = !equal(txt.rotate, '') ? string(abi.encodePacked(element, 'rotate=\\\"', txt.rotate, '\\\" ')) : element;\\n    element = !equal(txt.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', txt.transform, '\\\" ')) : element;\\n    element = !equal(txt.clipPath, '') ? string(abi.encodePacked(element, 'clip-path=\\\"url(#', txt.clipPath, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txt.val, '</text>'));\\n    return element;\\n  }\\n\\n  struct TextPath {\\n    string class;\\n    string href;\\n    string val;\\n  }\\n\\n  function getTextPath(TextPath memory txtPath) public pure returns (string memory) {\\n    string memory element = '<textPath ';\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txtPath.class, '\\\" ')) : element;\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'href=\\\"#', txtPath.href, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txtPath.val, '</textPath>'));\\n    return element;\\n  }\\n\\n  struct Tspan {\\n    string class;\\n    string display;\\n    string dx;\\n    string dy;\\n    string val;\\n  }\\n\\n  function getTspan(Tspan memory tspan) public pure returns (string memory) {\\n    string memory element = '<tspan ';\\n    element = !equal(tspan.class, '') ? string(abi.encodePacked(element, 'class=\\\"', tspan.class, '\\\" ')) : element;\\n    element = !equal(tspan.display, '') ? string(abi.encodePacked(element, 'display=\\\"', tspan.display, '\\\" ')) : element;\\n    element = !equal(tspan.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', tspan.dx, '\\\" ')) : element;\\n    element = !equal(tspan.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', tspan.dy, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', tspan.val, '</tspan>'));\\n    return element;\\n  }\\n\\n  struct Animate {\\n    string attributeName;\\n    string to;\\n    string values;\\n    string duration;\\n    string begin;\\n    string repeatCount;\\n    string fill;\\n  }\\n\\n  function getAnimate(Animate memory animate) public pure returns (string memory) {\\n    string memory element = '<animate ';\\n    element = !equal(animate.attributeName, '') ? string(abi.encodePacked(element, 'attributeName=\\\"', animate.attributeName, '\\\" ')) : element;\\n    element = !equal(animate.to, '') ? string(abi.encodePacked(element, 'to=\\\"', animate.to, '\\\" ')) : element;\\n    element = !equal(animate.values, '') ? string(abi.encodePacked(element, 'values=\\\"', animate.values, '\\\" ')) : element;\\n    element = !equal(animate.duration, '') ? string(abi.encodePacked(element, 'dur=\\\"', animate.duration, 'ms\\\" ')) : element;\\n    element = !equal(animate.begin, '') ? string(abi.encodePacked(element, 'begin=\\\"', animate.begin, 'ms\\\" ')) : element;\\n    element = !equal(animate.repeatCount, '') ? string(abi.encodePacked(element, 'repeatCount=\\\"', animate.repeatCount, '\\\" ')) : element;\\n    element = !equal(animate.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"', animate.fill, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Path {\\n    string id;\\n    string pathAttr;\\n    string val;\\n  }\\n\\n  function getPath(Path memory path) public pure returns (string memory) {\\n    string memory element = '<path ';\\n    element = !equal(path.id, '') ? string(abi.encodePacked(element, 'id=\\\"', path.id, '\\\" ')) : element;\\n    element = !equal(path.pathAttr, '') ? string(abi.encodePacked(element, 'd=\\\"', path.pathAttr, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', path.val, '</path>'));\\n    return element;\\n  }\\n\\n  struct Group {\\n    string transform;\\n    string val;\\n  }\\n\\n  function getGroup(Group memory group) public pure returns (string memory) {\\n    string memory element = '<g ';\\n    element = !equal(group.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', group.transform, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', group.val, '</g>'));\\n    return element;\\n  }\\n\\n  struct Pattern {\\n    string id;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string patternUnits;\\n    string val;\\n  }\\n\\n  function getPattern(Pattern memory pattern) public pure returns (string memory) {\\n    string memory element = '<pattern ';\\n    element = !equal(pattern.id, '') ? string(abi.encodePacked(element, 'id=\\\"', pattern.id, '\\\" ')) : element;\\n    element = !equal(pattern.x, '') ? string(abi.encodePacked(element, 'x=\\\"', pattern.x, '\\\" ')) : element;\\n    element = !equal(pattern.y, '') ? string(abi.encodePacked(element, 'y=\\\"', pattern.y, '\\\" ')) : element;\\n    element = !equal(pattern.width, '') ? string(abi.encodePacked(element, 'width=\\\"', pattern.width, '\\\" ')) : element;\\n    element = !equal(pattern.height, '') ? string(abi.encodePacked(element, 'height=\\\"', pattern.height, '\\\" ')) : element;\\n    element = !equal(pattern.patternUnits, '') ? string(abi.encodePacked(element, 'patternUnits=\\\"', pattern.patternUnits, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', pattern.val, '</pattern>'));\\n    return element;\\n  }\\n\\n  struct Filter {\\n    string id;\\n    string val;\\n  }\\n\\n  function getFilter(Filter memory filter) public pure returns (string memory) {\\n    string memory element = '<filter ';\\n    element = !equal(filter.id, '') ? string(abi.encodePacked(element, 'id=\\\"', filter.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', filter.val, '</filter>'));\\n    return element;\\n  }\\n\\n  struct Turbulance {\\n    string fType;\\n    string baseFrequency;\\n    string octaves;\\n    string result;\\n    string val;\\n  }\\n\\n  function getTurbulance(Turbulance memory turbulance) public pure returns (string memory) {\\n    string memory element = '<feTurbulence ';\\n    element = !equal(turbulance.fType, '') ? string(abi.encodePacked(element, 'type=\\\"', turbulance.fType, '\\\" ')) : element;\\n    element = !equal(turbulance.baseFrequency, '') ? string(abi.encodePacked(element, 'baseFrequency=\\\"', turbulance.baseFrequency, '\\\" ')) : element;\\n    element = !equal(turbulance.octaves, '') ? string(abi.encodePacked(element, 'numOctaves=\\\"', turbulance.octaves, '\\\" ')) : element;\\n    element = !equal(turbulance.result, '') ? string(abi.encodePacked(element, 'result=\\\"', turbulance.result, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', turbulance.val, '</feTurbulence>'));\\n    return element;\\n  }\\n\\n  struct DisplacementMap {\\n    string mIn;\\n    string in2;\\n    string result;\\n    string scale;\\n    string xChannelSelector;\\n    string yChannelSelector;\\n    string val;\\n  }\\n\\n  function getDisplacementMap(DisplacementMap memory displacementMap) public pure returns (string memory) {\\n    string memory element = '<feDisplacementMap ';\\n    element = !equal(displacementMap.mIn, '') ? string(abi.encodePacked(element, 'in=\\\"', displacementMap.mIn, '\\\" ')) : element;\\n    element = !equal(displacementMap.in2, '') ? string(abi.encodePacked(element, 'in2=\\\"', displacementMap.in2, '\\\" ')) : element;\\n    element = !equal(displacementMap.result, '') ? string(abi.encodePacked(element, 'result=\\\"', displacementMap.result, '\\\" ')) : element;\\n    element = !equal(displacementMap.scale, '') ? string(abi.encodePacked(element, 'scale=\\\"', displacementMap.scale, '\\\" ')) : element;\\n    element = !equal(displacementMap.xChannelSelector, '') ? string(abi.encodePacked(element, 'xChannelSelector=\\\"', displacementMap.xChannelSelector, '\\\" ')) : element;\\n    element = !equal(displacementMap.yChannelSelector, '') ? string(abi.encodePacked(element, 'yChannelSelector=\\\"', displacementMap.yChannelSelector, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', displacementMap.val, '</feDisplacementMap>'));\\n    return element;\\n  }\\n\\n  struct ClipPath {\\n    string id;\\n    string val;\\n  }\\n\\n  function getClipPath(ClipPath memory clipPath) public pure returns (string memory) {\\n    string memory element = '<clipPath ';\\n    element = !equal(clipPath.id, '') ? string(abi.encodePacked(element, 'id=\\\"', clipPath.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, ' >', clipPath.val, '</clipPath>'));\\n    return element;\\n  }\\n\\n  struct LinearGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getLinearGradient(LinearGradient memory linearGradient) public pure returns (string memory) {\\n    string memory element = '<linearGradient ';\\n    element = !equal(linearGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', linearGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (linearGradient.colors.length - 1);\\n    for (uint i=0; i<linearGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != linearGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (linearGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!linearGradient.blockScheme || (linearGradient.blockScheme && i != linearGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(linearGradient.animate, '') ? string(abi.encodePacked(element, linearGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</linearGradient>'));\\n    return element;\\n  }\\n\\n  struct RadialGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getRadialGradient(RadialGradient memory radialGradient) public pure returns (string memory) {\\n    string memory element = '<radialGradient ';\\n    element = !equal(radialGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', radialGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (radialGradient.colors.length - 1);\\n    for (uint i=0; i<radialGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != radialGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (radialGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!radialGradient.blockScheme || (radialGradient.blockScheme && i != radialGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(radialGradient.animate, '') ? string(abi.encodePacked(element, radialGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</radialGradient>'));\\n    return element;\\n  }\\n\\n  function equal(string memory a, string memory b) private pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) private pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract IDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"font\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontLink\",\"type\":\"string\"}],\"name\":\"getSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"font\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fontLink\",\"type\":\"string\"}],\"name\":\"getSvgFromSeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTxtFont\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTxtVal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mustBeOwnerForLogo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sealContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDescriptorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"font\",\"type\":\"string\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"setTxtVal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TextLogoElement", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}