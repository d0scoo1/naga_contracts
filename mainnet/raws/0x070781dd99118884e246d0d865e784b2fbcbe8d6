{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/KWWVault.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract KWWVaultEth is Ownable {\r\n    //ETH Vault\r\n    //boatId => amount\r\n    mapping(uint16 => uint256) public boatsWithdrawAmount;\r\n    //landId => ownerType (0-prince,1-princess, 2-landlord)\r\n    mapping(uint16 => mapping(uint8 => uint256)) public landsWithdrawAmount;\r\n\r\n    mapping(uint16 => uint256) public boatsMaxWithdraw;\r\n    mapping(uint16 => uint256) public landsMaxWithdraw;\r\n\r\n    uint256 teamWithdraw;\r\n    uint256 teamMaxWithdraw;\r\n\r\n    uint8 teamPercent = 10;\r\n\r\n    address gameManager;\r\n\r\n    //ETH Vault\r\n    function depositBoatFees(uint16 totalSupply) public payable onlyGameManager{\r\n        teamMaxWithdraw += msg.value / teamPercent;\r\n        boatsMaxWithdraw[totalSupply] += (msg.value - msg.value / teamPercent ) / totalSupply;\r\n    }\r\n\r\n    function depositLandFees(uint16 landId) public payable onlyGameManager{\r\n        teamMaxWithdraw += msg.value / teamPercent;\r\n        landsMaxWithdraw[landId] += (msg.value - msg.value / teamPercent ) / 3;\r\n    }\r\n\r\n    function withdrawBoatFees(uint16 totalSupply, uint16 boatId, address addr) public onlyGameManager{\r\n        uint256 availableToWithdraw = boatAvailableToWithdraw(totalSupply, boatId);\r\n        (bool os, ) = payable(addr).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        boatsWithdrawAmount[boatId] += availableToWithdraw;\r\n    }\r\n\r\n    function withdrawLandFees(uint16 landId, uint8 ownerTypeId, address addr) public onlyGameManager{\r\n        uint256 availableToWithdraw = landAvailableToWithdraw(landId, ownerTypeId);\r\n        (bool os, ) = payable(addr).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        landsWithdrawAmount[landId][ownerTypeId] += availableToWithdraw;\r\n    }\r\n\r\n    /*\r\n        GETTERS\r\n    */\r\n\r\n    function boatAvailableToWithdraw(uint16 totalSupply, uint16 boatId) public view returns(uint256) {\r\n        uint16 maxState = (boatId / 100) * 100 + 100;\r\n        uint256 withdrawMaxAmount= 0;\r\n        for(uint16 i = boatId; i < totalSupply && i < maxState ; i++){\r\n            withdrawMaxAmount += boatsMaxWithdraw[i];\r\n        }\r\n        return withdrawMaxAmount - boatsWithdrawAmount[boatId];\r\n    }\r\n\r\n    function landAvailableToWithdraw(uint16 landId, uint8 ownerTypeId) public view returns(uint256) {\r\n        require(ownerTypeId < 3, \"Owner type not valid\");\r\n        return landsMaxWithdraw[landId] - landsWithdrawAmount[landId][ownerTypeId];\r\n    }\r\n\r\n    function teamAvailableToWithdraw() public view returns(uint256) {\r\n        return teamMaxWithdraw - teamWithdraw;\r\n    }\r\n\r\n    /*\r\n        MODIFIERS\r\n    */\r\n\r\n    modifier onlyGameManager {\r\n        require(gameManager != address(0), \"Game manager not set\");\r\n        require(msg.sender == owner() || msg.sender == gameManager, \"caller is not the Boats Contract\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n        ONLY OWNER\r\n     */\r\n\r\n\r\n    function withdrawFeesTeam(address teamWallet) public onlyOwner {\r\n        uint256 availableToWithdraw = teamAvailableToWithdraw();\r\n        (bool os, ) = payable(teamWallet).call{value: availableToWithdraw}(\"\");\r\n        require(os);\r\n        teamWithdraw += availableToWithdraw;\r\n    } \r\n\r\n    function withdrawAll(address teamWallet) public onlyOwner {\r\n        (bool os, ) = payable(teamWallet).call{value: address(this).balance}(\"\");\r\n        require(os);\r\n    }\r\n\r\n    function setBoatsMaxWithdraw(uint16 totalSupplyIdx, uint256 maxWithdrawAmount) public onlyOwner{\r\n        boatsMaxWithdraw[totalSupplyIdx] = maxWithdrawAmount;\r\n    }\r\n\r\n    function setLandsMaxWithdraw(uint16 landIdIdx, uint256 maxWithdrawAmount) public onlyOwner{\r\n        landsMaxWithdraw[landIdIdx] = maxWithdrawAmount;\r\n    }\r\n\r\n    function setTeamMaxWithdraw(uint256 maxWithdrawAmount) public onlyOwner{\r\n        teamMaxWithdraw = maxWithdrawAmount;\r\n    }\r\n\r\n    function setGameManager(address _addr) public onlyOwner{\r\n        gameManager = _addr;\r\n    }\r\n\r\n    function setTeamPercent(uint8 _teamPercent) public onlyOwner{\r\n        teamPercent = _teamPercent;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"}],\"name\":\"boatAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"boatsMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"boatsWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"}],\"name\":\"depositBoatFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"}],\"name\":\"depositLandFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"}],\"name\":\"landAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"landsMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"landsWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupplyIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setBoatsMaxWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landIdIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setLandsMaxWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setTeamMaxWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_teamPercent\",\"type\":\"uint8\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAvailableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"boatId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawBoatFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"withdrawFeesTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"landId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"ownerTypeId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawLandFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWVaultEth", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c153c9065faf3b7b72e2cd444d097ee2cf244d438c22db5784eaad3f0dc90a25"}]}