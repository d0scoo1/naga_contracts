{"status": "1", "message": "OK", "result": [{"SourceCode": "// File contracts/interfaces/IERC20.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\npragma solidity >=0.7.5;\r\n\r\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\r\n/// Taken from Solmate\r\nlibrary SafeERC20 {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        (bool success, ) = to.call{value: amount}(new bytes(0));\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token,\r\n        uint256 _profit\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(uint256 _amount, address _token) external;\r\n\r\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\r\n\r\n    function mint(address _recipient, uint256 _amount) external;\r\n\r\n    function manage(address _token, uint256 _amount) external;\r\n\r\n    function incurDebt(uint256 amount_, address token_) external;\r\n\r\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\r\n\r\n    function excessReserves() external view returns (uint256);\r\n\r\n    function baseSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasuryV1.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface ITreasuryV1 {\r\n    function withdraw(uint256 amount, address token) external;\r\n\r\n    function manage(address token, uint256 amount) external;\r\n\r\n    function valueOf(address token, uint256 amount) external view returns (uint256);\r\n\r\n    function excessReserves() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOlympusAuthority.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface IOlympusAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/types/OlympusAccessControlled.sol\r\npragma solidity >=0.7.5;\r\n\r\nabstract contract OlympusAccessControlled {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\r\n\r\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IOlympusAuthority public authority;\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IOlympusAuthority _authority) {\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardian() {\r\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/migration/LUSDSwap.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.10;\r\npragma abicoder v2;\r\n\r\n\r\n\r\n\r\ninterface ICurveFactory {\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external returns (uint256);\r\n}\r\n\r\n/// @title   LUSD Swap Contract\r\n/// @notice  Swaps LUSD from treasury v1 to DAI then sends to treasury v2\r\n/// @author  JeffX\r\ncontract LUSDSwapContract is OlympusAccessControlled {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// ERRORS ///\r\n\r\n    /// @notice Error for if more DAI than 1:1 backing is attempted to be sent\r\n    error OverOHMV1Backing();\r\n\r\n    /// STATE VARIABLES ///\r\n\r\n    /// @notice Curve Factory\r\n    ICurveFactory internal immutable curveFactory = ICurveFactory(0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA);\r\n    /// @notice Olympus Treasury V1\r\n    ITreasuryV1 internal immutable treasuryV1 = ITreasuryV1(0x31F8Cc382c9898b273eff4e0b7626a6987C846E8);\r\n    /// @notice Olympus Treasury V2\r\n    ITreasury internal immutable treasuryV2 = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\r\n    /// @notice Olympus Token V1\r\n    IERC20 internal immutable OHMV1 = IERC20(0x383518188C0C6d7730D91b2c03a03C837814a899);\r\n    /// @notice LUSD\r\n    address internal immutable LUSD = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\r\n    /// @notice DAI\r\n    address internal immutable DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    /// @notice Remaining amount of DAI to have each OHM V1 backed by 1 DAI;\r\n    uint256 public OHMV1BackingInDAIRemaining;\r\n\r\n    /// CONSTRUCTOR ///\r\n\r\n    /// @param _authority  Address of the Olympus Authority contract\r\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {\r\n        OHMV1BackingInDAIRemaining = OHMV1.totalSupply() * 1e9;\r\n    }\r\n\r\n    /// POLICY FUNCTIONS ///\r\n\r\n    /// @notice                        Manages LUSD from treasury V1 and swaps for LUSD\r\n    /// @param _amountLUSD             Amount of LUSD that will be managed from treasury V1 and swapped\r\n    /// @param _minAmountDAI           Minimum amount of DAI to receive\r\n    /// @param _amountDAIToV1Treasury  Amount of DAI that was received from swap to be sent to V1 treasury\r\n    function swapLUSDForDAI(\r\n        uint256 _amountLUSD,\r\n        uint256 _minAmountDAI,\r\n        uint256 _amountDAIToV1Treasury\r\n    ) external onlyGuardian {\r\n        // Manage LUSD from v1 treasury\r\n        treasuryV1.manage(LUSD, _amountLUSD);\r\n\r\n        // Approve LUSD to be spent by the  Curve pool\r\n        IERC20(LUSD).approve(address(curveFactory), _amountLUSD);\r\n\r\n        // Swap specified LUSD for DAI\r\n        uint256 daiReceived = curveFactory.exchange_underlying(0, 1, _amountLUSD, _minAmountDAI);\r\n\r\n        if (_amountDAIToV1Treasury > 0) {\r\n            if (OHMV1BackingInDAIRemaining < _amountDAIToV1Treasury) revert OverOHMV1Backing();\r\n            IERC20(DAI).safeTransfer(address(treasuryV1), _amountDAIToV1Treasury);\r\n            OHMV1BackingInDAIRemaining -= _amountDAIToV1Treasury;\r\n            daiReceived -= _amountDAIToV1Treasury;\r\n        }\r\n\r\n        IERC20(DAI).approve(address(treasuryV2), daiReceived);\r\n\r\n        // Deposit DAI into v2 treasury, all as profit\r\n        treasuryV2.deposit(daiReceived, DAI, treasuryV2.tokenValue(DAI, daiReceived));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OverOHMV1Backing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OHMV1BackingInDAIRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountDAIToV1Treasury\",\"type\":\"uint256\"}],\"name\":\"swapLUSDForDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LUSDSwapContract", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c21f8ea7e39e2ba00bc12d2968d63f4acb38b7a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://503f85856d5bac905b7670998a3ece24bdc1db6af5a8fbd808e857a069b09dfd"}]}