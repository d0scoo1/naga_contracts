{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NftPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/INftPriceOracle.sol\\\";\\n\\ncontract NftPriceOracle is Ownable, INftPriceOracle {\\n    address public BENDDAO_ORACLE;\\n\\n    constructor(address _BenddaoOracle) {\\n        BENDDAO_ORACLE = _BenddaoOracle;\\n    }\\n\\n    function getNftPriceByTimestamp(address _nftContract, uint256 _timestamp)\\n        external\\n        view\\n        override\\n        returns (uint256 price)\\n    {\\n        bool completed = false;\\n        uint256 _numOfRoundBack = 0;\\n\\n        while (!completed) {\\n            if (_timestamp >= INFTOracle(BENDDAO_ORACLE).getPreviousTimestamp(_nftContract, _numOfRoundBack)) {\\n                price = INFTOracle(BENDDAO_ORACLE).getPreviousPrice(_nftContract, _numOfRoundBack);\\n                completed = true;\\n            } else {\\n                _numOfRoundBack += 1;\\n            }\\n        }\\n    }\\n\\n    function getOracleIdByTimestamp(address _nftContract, uint256 _timestamp)\\n        external\\n        view\\n        override\\n        returns (uint256 oracleId)\\n    {\\n        bool completed = false;\\n        uint256 _numOfRoundBack = 0;\\n        uint256 len = INFTOracle(BENDDAO_ORACLE).getPriceFeedLength(_nftContract);\\n\\n        while (!completed) {\\n            if (_timestamp >= INFTOracle(BENDDAO_ORACLE).getPreviousTimestamp(_nftContract, _numOfRoundBack)) {\\n                completed = true;\\n            } else {\\n                _numOfRoundBack = _numOfRoundBack + 1;\\n            }\\n        }\\n        oracleId = len - _numOfRoundBack - 1;\\n    }\\n\\n    function getNftPriceByOracleId(\\n        address _nftContract,\\n        uint256 _oracleId,\\n        uint256 _roundTimestamp\\n    ) external view override returns (bool verified, uint256 price) {\\n        uint256 len = INFTOracle(BENDDAO_ORACLE).getPriceFeedLength(_nftContract);\\n        uint256 _numOfRoundBack = len - _oracleId - 1;\\n        uint256 oracleTimestamp;\\n        uint256 oracleTimestampNext;\\n\\n        oracleTimestamp = INFTOracle(BENDDAO_ORACLE).getPreviousTimestamp(_nftContract, _numOfRoundBack);\\n\\n        if (_numOfRoundBack == 0) {\\n            verified = _roundTimestamp >= oracleTimestamp;\\n        } else {\\n            oracleTimestampNext = INFTOracle(BENDDAO_ORACLE).getPreviousTimestamp(_nftContract, _numOfRoundBack - 1);\\n            verified = _roundTimestamp >= oracleTimestamp && _roundTimestamp < oracleTimestampNext;\\n        }\\n\\n        if (verified) {\\n            price = INFTOracle(BENDDAO_ORACLE).getPreviousPrice(_nftContract, _numOfRoundBack);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INftPriceOracle {\\n    function getNftPriceByTimestamp(address _nftContract, uint256 _timestamp) external view returns (uint256 price);\\n\\n    function getNftPriceByOracleId(\\n        address _nftContract,\\n        uint256 _oracleId,\\n        uint256 _roundTimestamp\\n    ) external view returns (bool verified, uint256 price);\\n\\n    function getOracleIdByTimestamp(address _nftContract, uint256 _timestamp) external view returns (uint256 oracleId);\\n}\\n\\n/************\\n@title INFTOracle interface\\n@notice Interface for NFT price oracle.*/\\ninterface INFTOracle {\\n    /* CAUTION: Price uint is ETH based (WEI, 18 decimals) */\\n    // get asset price\\n    function getAssetPrice(address _nftContract) external view returns (uint256);\\n\\n    // get latest timestamp\\n    function getLatestTimestamp(address _nftContract) external view returns (uint256);\\n\\n    // get previous price with _back rounds\\n    function getPreviousPrice(address _nftContract, uint256 _numOfRoundBack) external view returns (uint256);\\n\\n    // get previous timestamp with _back rounds\\n    function getPreviousTimestamp(address _nftContract, uint256 _numOfRoundBack) external view returns (uint256);\\n\\n    function setAssetData(address _nftContract, uint256 _price) external;\\n\\n    function setPause(address _nftContract, bool val) external;\\n\\n    function setTwapInterval(uint256 _twapInterval) external;\\n\\n    function getPriceFeedLength(address _nftContract) external view returns (uint256 length);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BenddaoOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BENDDAO_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundTimestamp\",\"type\":\"uint256\"}],\"name\":\"getNftPriceByOracleId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getNftPriceByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getOracleIdByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oracleId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftPriceOracle", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c2a19e54e48718f6c60908a9cff3396e4ea1eba", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}