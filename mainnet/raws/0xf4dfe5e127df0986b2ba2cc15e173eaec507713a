{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n/**\r\n* Issued by\r\n*       _                              __ _     _\r\n*      | |                            / _| |   (_)\r\n*    __| | __ _ _ __  _ __  ___  ___ | |_| |_   _  ___\r\n*   / _` |/ _` | '_ \\| '_ \\/ __|/ _ \\|  _| __| | |/ _ \\\r\n*  | (_| | (_| | |_) | |_) \\__ \\ (_) | | | |_ _| | (_) |\r\n*   \\__,_|\\__,_| .__/| .__/|___/\\___/|_|  \\__(_)_|\\___/\r\n*              | |   | |\r\n*              |_|   |_|\r\n*\r\n* \u4ee5\u592a\u6b66\u4fa0(ethwuxia)\r\n* wangangang1991 @ gmail.com\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max(uint a, uint b) internal pure returns (uint) {\r\n    if (a > b) return a;\r\n    else return b;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint) {\r\n    if (a < b) return a;\r\n    else return b;\r\n  }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract EthWuxia is ERC721{\r\n  using SafeMath for uint256;\r\n\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  uint public produceUnitSeconds = 86400;  // \u6bcf1\u5929\u8fdb\u884c\u4e00\u6b21\u9ad8\u7ea7\u5361\u6295\u653e\r\n  uint public freeLotterySeconds = 3600 * 6;  // \u6bcf1\u5929\u6709\u4e00\u6b21\u514d\u8d39\u62bd\u5361\u7684\u673a\u4f1a\r\n  uint public unitRareGrowth = 3;  // \u6bcf\u5355\u4f4d\u65f6\u95f4 \u7a00\u6709\u5361\u6295\u653e\u6570\u91cf\r\n  uint public unitEpicGrowth = 0;  // \u53f2\u8bd7\u5361\u6295\u653e\u6570\u91cf\r\n  uint public unitMythGrowth = 0;  // \u4f20\u8bf4\u5361\u6295\u653e\u6570\u91cf\r\n  uint public initialMartialTimes=1;  // \u65b0\u7684\u95e8\u6d3e\u4f1a\u6709\u4e00\u5b9a\u7684\u6982\u7387\u52a0\u6210 => 2\u88ab\r\n  uint public stepPrice = 1 finney;\r\n  uint public lotteryPrice = 10 finney;  // lotteryPrice\r\n  uint public dragonGirlLotteryPrice = 10 finney;\r\n  uint public dragonGirlLotteryNumber = 0;\r\n  address[] public listedDragonGirlLotteryUser = [address(0), address(0), address(0), address(0), address(0)];\r\n  address public wuxiaMaster = address(0);\r\n  uint public wuxiaMasterPrice = 100 finney;  // \u6bcf\u6b21\u52a0\u4ef7100finny;\r\n  mapping (uint256 => address) public approvedOfItem;\r\n  uint public littleMonster = 1 ether; // \u6e38\u620f\u6536\u5165\u6bcf\u52301ether\u5c31\u751f\u6210\u4e00\u4e2a\u4ee5\u592a\u602a\r\n\r\n\r\n  uint public totalEarning = 0;  // \u603b\u6536\u5165 => \u603b\u6536\u5165\u768410%\u7528\u4e8e\u751f\u6210EthMonster\r\n  uint public totalTrading = 0;  // \u603b\u6d41\u6c34  \r\n  uint public lotteryTotalEarning = 0;  // \u62bd\u5361\u6536\u5165 => \u638c\u95e8\u4eba5%\r\n  uint public marketTotalEarning = 0;  // \u5e02\u573a\u4ea4\u6613\u6536\u5165 => \u6b66\u6797\u76df\u4e3b5%\r\n  uint public smartSpeedEarning = 0;\r\n  uint public luckyStoneEarning = 0;\r\n  uint public hunterLicenceEarning = 0;\r\n  uint public travelTotalEarning = 0;\r\n  uint public masterTotalEarning = 0;\r\n  // \u5f00\u670d\u6d3b\u52a8 \u62bd\u595610\u6b21\u9001\u72e9\u730e\u8bc1\u4e66\r\n  bool public lotteryGiveHunt = false;\r\n  uint public lotteryGiveHuntMinimalNumber = 10;\r\n  uint public randNonce = 0;\r\n\r\n\r\n  mapping (address => uint) public mapUserLastFreeLotteryTimestamp;  // \u7528\u6237\u4e0a\u6b21\u62bd\u5956\u7684\u65f6\u95f4\r\n  mapping (address => uint) public mapUserPower;  // \u5b9e\u65f6\u7ef4\u62a4\u7528\u6237\u7684\u6218\u6597\u529b\r\n\r\n  // ability does not support trade\r\n  mapping (address => bool) public mapUserHasSmartSpeed;  // \u7528\u6237\u662f\u5426\u4f1a\u51cc\u6ce2\u5fae\u6b65\r\n  uint public currentSmartSpeedNumber = 0;\r\n  // smartSpeedPrice = Min(0.1ether, 0.01ether*currentSmartSpeedNumber)\r\n\r\n  mapping (address => bool) public mapUserHasLuckyStone;  // \u7528\u6237\u662f\u5426\u6709\u5e78\u8fd0\u5b9d\u77f3\r\n  uint public currentLuckyStoneNumber = 0;\r\n  // luckyStonePrice = Min(0.1ether, 0.01*ether*currentLuckyStoneNumber)\r\n\r\n  mapping (address => bool) public mapUserHasHunterLicence;\r\n  uint public currentHunterNumber = 0;\r\n  // hunterPrice = Min(0.1ether, 0.01ether*currentHunterNumber)\r\n\r\n  uint public totalUserNumber = 0;\r\n  uint public totalLotteryNumber = 0;\r\n  uint public totalBuyCardNumber = 0;\r\n  uint public totalSellCardNumber = 0;\r\n  uint public totalDragonLotteryNumber = 0;\r\n  mapping (uint => uint) public mapMartialUserCount;  // martial total user count\r\n  mapping (uint => uint) public mapMartialLotteryCount;  // martial total lottery count\r\n  mapping (address => uint) public mapUserLotteryNumber;\r\n\r\n  // \u5408\u7ea6\u652f\u6301\u52a8\u6001\u589e\u52a0\u65b0\u636e\u70b9\r\n  struct Martial {\r\n      uint x;  // \u95e8\u6d3e\u5750\u6807\r\n      uint y;  // \u95e8\u6d3e\u5750\u6807\r\n      address owner;  // \u95e8\u6d3e\u76df\u4e3b\r\n      uint lastProduceTime;  // \u4e0a\u4e00\u6b21\u7684\u6781\u54c1\u5361\u51fa\u4ea7\u65f6\u95f4\r\n      uint martialId;\r\n      uint rareNumber;  // \u7a00\u6709\u7684\r\n      uint epicNumber;  // \u53f2\u8bd7\u7684\r\n      uint mythNumber;  // \u4f20\u8bf4\u7684\r\n      uint enterPrice;  // \u5165\u573a\u8d39 => \u5251\u51a2\u5165\u573a\u8d39\u4e3a1ether\r\n      uint[] cardTypeList;  // \u8be5\u95e8\u6d3e\u51fa\u4ea7\u7684\u5361\u7247\r\n  }\r\n\r\n  // \u5145\u503c\u989d\u5ea6\u768420%\u4f1a\u88ab\u7528\u4f5c\u5956\u54c1\r\n  // \u6bcf1\u4e2aether \u6709\u4e00\u4e2a0.1ether\u7684\u4ee5\u592a\u602a \u4ee5\u592a\u602a\u7684\u8840\u91cf\u4e3a2*\u6700\u9ad8\u653b\u51fb\u529b\u73a9\u5bb6\u7684\u6218\u6597\u529b\r\n  // \u6bcf10\u4e2aether \u6709\u4e00\u4e2a1ether\u7684\u4ee5\u592a\u602a \u4ee5\u592a\u602a\u8840\u91cf\u4e3a5*\u6700\u9ad8\u653b\u51fb\u529b\u73a9\u5bb6\u7684\u6218\u6597\u529b\r\n  // \u4ee5\u592a\u602a\u5956\u52b1\u768410%\u5c06\u53d1\u7ed9\u95e8\u6d3e\u521b\u59cb\u4eba\r\n  struct EtherMonster {\r\n      uint monsterId;\r\n      uint martialId;  // \u8be5\u602a\u517d\u51fa\u73b0\u5728\u54ea\u4e2a\u636e\u70b9\r\n      uint balance;  // \u5956\u91d1 => \u5956\u52b1\u70b9\u76845%\r\n      uint blood;  // \u8840\u91cf \u5bf9\u4e8e0.2ether\u7684\u4ee5\u592a\u602a\u662f3*\u6700\u9ad8\u653b\u51fb\u529b\u73a9\u5bb6\u7684\u6218\u6597\u529b \u5bf9\u4e8e1ether\u7684\u4ee5\u592a\u602a\u662f10*\u6700\u9ad8\u653b\u51fb\u529b\u73a9\u5bb6\u7684\u6218\u6597\u529b\r\n      uint produceTime;  // \u602a\u517d\u51fa\u73b0\u7684\u65f6\u95f4 \u602a\u7269\u9700\u8981\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u5185\u88ab\u51fb\u6740 \u638c\u95e8\u4eba\u5c06\u83b7\u5f9720%\u7684\u6536\u76ca\r\n      uint currentBlood;  // \u5f53\u524d\u8840\u91cf\r\n      bool defeated;  // \u662f\u5426\u5df2\u7ecf\u88ab\u6d88\u706d\r\n      address winner;  // \u83b7\u5956\u8005\r\n  }\r\n\r\n  mapping (address => uint) public mapUserLastAttackMonsterTimestamp;\r\n  uint public userAttackMonsterCDSeconds = 600;  // \u7528\u6237\u6bcf10\u5206\u949f\u53ef\u4ee5\u653b\u51fb\u4e00\u6b21EtherMonster\u602a\r\n  uint public maxUserPower = 0;  // \u7528\u4e8eetherMonster\u8840\u91cf\u4f30\u8ba1\r\n  address public maxPowerUserAddress = address(0);\r\n  uint etherMonsterHuntSeconds = 3600;  // etherMonster\u7684\u72e9\u730e\u65f6\u95f4\r\n  uint littleEtherMonsterUnit = 0.5 ether;  // 3\u500d\u6700\u9ad8\u6218\u529b\r\n  uint bigEtherMonsterUnit = 5 ether;  // 10\u500d\u6700\u9ad8\u6218\u529b\r\n\r\n  struct CardType {\r\n      uint typeId;\r\n      uint martialId;  // \u5361\u7247\u4ece\u5c5e\u4e8e\u90a3\u4e2a\u95e8\u6d3e\r\n      uint initPower;  // \u521d\u59cb\u6218\u6597\u529b\r\n      uint growthFactor;  // \u6210\u957f\u7cfb\u6570\r\n      uint category;  // \u5361\u7247\u5206\u7c7b => 1\u8868\u793a\u6b66\u4fa0 2\u8868\u793a\u6b66\u5668 3\u8868\u793a\u6b66\u529f 4\u8868\u793a\u9635\u6cd5\r\n  }\r\n\r\n  // \u5408\u6210\u65b0\u5361\u7684\u65b9\u5f0f\u662f: \u4e24\u5f20\u65e7\u5361\u7247\u9500\u6bc1 \u751f\u6210\u4e00\u5f20\u65b0\u5361\u7247\r\n  struct Card {\r\n      uint cardId;\r\n      uint typeId;\r\n      uint level;  // \u5361\u7247\u7b49\u7ea7 => 0\u8868\u793a\u666e\u901a 1\u8868\u793a\u7a00\u6709 2\u8868\u793a\u53f2\u8bd7 3\u8868\u793a\u4f20\u8bf4\r\n      bool onSell;\r\n      uint sellPrice;\r\n      address owner;\r\n  }\r\n\r\n\r\n  address private owner;\r\n  mapping (address => bool) private admins;\r\n\r\n  IItemRegistry private itemRegistry;\r\n  uint public travelUnitFee = 1 finney; // 0.001ether for each step\r\n\r\n  uint256[] private listedItems;\r\n  Martial[] public listedMartials;  // \u95e8\u6d3e\u5217\u8868\r\n  CardType[] public listedCardType;  // \u5361\u724c\u5217\u8868\r\n  Card[] public listedCard;\r\n  EtherMonster[] public listedEtherMonster;\r\n\r\n  uint smallMonsterPowerFactor = 3;\r\n  uint bigMonsterPowerFactor = 5;\r\n\r\n  mapping (uint256 => address) public mapOwnerOfCard;\r\n  mapping (address => uint) private mapUserCurrentMartialId;  // \u7528\u6237\u5f53\u524d\u7684\u95e8\u6d3e\r\n  mapping (address => bool) public mapUesrAlreadyMartialOwner;\r\n  mapping (address => bytes32) public mapUserNickname;\r\n\r\n  bool public hasInitMartial = false;\r\n  bool public hasInitCard1 = false;\r\n  bool public hasInitCard2 = false;\r\n\r\n  function EthWuxia () public {\r\n      owner = msg.sender;\r\n      admins[owner] = true;\r\n      lotteryGiveHunt = true;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function getOwner() public view returns(address){\r\n      return owner;\r\n  }\r\n  function setItemRegistry (address _itemRegistry) onlyOwner() public {\r\n    itemRegistry = IItemRegistry(_itemRegistry);\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n  \r\n  function disableLotteryGiveHunt() onlyOwner() public {\r\n      lotteryGiveHunt = false;\r\n  }\r\n  \r\n  function enableLotteryGiveHunt() onlyOwner() public {\r\n      lotteryGiveHunt = true;\r\n  }\r\n\r\n  // \u529f\u80fd\u5217\u8868\r\n  // 1. \u6e38\u620f\u66f4\u65b0 => \u521b\u5efa\u95e8\u6d3e\r\n  // 1.1 createNewMartial\r\n  // 1.2 createNewCardType\r\n  function createNewMartial (uint x, uint y, uint enterPrice) onlyOwner() public {\r\n    require(x>=1);\r\n    require(y>=1);\r\n    Martial memory martial = Martial(x, y, address(0), now, listedMartials.length, unitRareGrowth * initialMartialTimes, unitEpicGrowth * initialMartialTimes, unitMythGrowth * initialMartialTimes, enterPrice, new uint[](0));\r\n    listedMartials.push(martial);\r\n  }\r\n\r\n  // 1.2 \u521b\u5efa\u5361\u7247\u7c7b\u578b\r\n  function createNewCardType (uint martialId, uint initPower, uint growthFactor, uint category) onlyOwner() public {\r\n    require(initPower>=1);\r\n    require(growthFactor>=2);\r\n    require(category>=1);\r\n    require(category<=4);  // \u6b66\u4fa0, \u88c5\u5907, \u6b66\u529f, \u9635\u6cd5\r\n    require(martialId < listedMartials.length);\r\n    listedMartials[martialId].cardTypeList.push(listedCardType.length);\r\n    CardType memory cardType = CardType(listedCardType.length, martialId, initPower, growthFactor, category);\r\n    listedCardType.push(cardType);\r\n  }\r\n\r\n  // 2. \u7528\u6237\u64cd\u4f5c\r\n  // 2.1 \u51cc\u6ce2\u5fae\u6b65\r\n  // 2.2 \u5e78\u8fd0\u5b9d\u77f3\r\n  // 2.3 \u730e\u624b\r\n  // 2.4 \u65c5\u884clocation\r\n  // 2.5 \u62bd\u5956\r\n  // 2.6 \u5361\u7247\u5408\u6210\r\n  // 2.7 \u6218\u6597\u529b\u7ef4\u62a4\r\n  // 2.8 \u638c\u95e8\u4eba\r\n  // 2.9 \u4ea4\u6613\u5e02\u573a\r\n  // 2.10 \u6b66\u6797\u76df\u4e3b => 10percent of market exchage\r\n  // 2.11 \u9f99\u5973\u5f69\u7968\r\n  // 2.12 etherMonster\r\n\r\n  // 2.1 \u51cc\u6ce2\u5fae\u6b65\r\n  function userHasSmartSpeed(address userAddress) public view returns(bool) {\r\n    return mapUserHasSmartSpeed[userAddress];\r\n  }\r\n\r\n  function getCurrentSmartSpeedPrice() public view returns(uint) {\r\n    // Min(0.1ether, 0.01ether+0.01ether*current)\r\n    return SafeMath.mul(SafeMath.min(10, currentSmartSpeedNumber), 10 finney);\r\n  }\r\n\r\n  function buySmartSpeed () public payable {\r\n    uint currentSmartSpeedPrice = SafeMath.mul(SafeMath.min(10, currentSmartSpeedNumber), 10 finney);\r\n    require(msg.value >= currentSmartSpeedPrice);\r\n    require(!mapUserHasSmartSpeed[msg.sender]);\r\n    uint excess = msg.value.sub(currentSmartSpeedPrice);\r\n    currentSmartSpeedNumber += 1;\r\n\r\n    if (excess > 0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    mapUserHasSmartSpeed[msg.sender] = true;\r\n\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(currentSmartSpeedPrice));\r\n    totalEarning = totalEarning.add(currentSmartSpeedPrice);\r\n    totalTrading = totalTrading.add(currentSmartSpeedPrice);\r\n    smartSpeedEarning = smartSpeedEarning.add(currentSmartSpeedPrice);\r\n  }\r\n\r\n  // 2.2 \u5e78\u8fd0\u5b9d\u77f3\r\n  function userHasLuckyStone(address userAddress) public view returns(bool) {\r\n    return mapUserHasLuckyStone[userAddress];\r\n  }\r\n\r\n  function getCurrentLuckyStonePrice() public view returns(uint) {\r\n    // Min(0.1ether, 0.01ether+0.01ether*current)\r\n    return SafeMath.mul(SafeMath.min(10, currentLuckyStoneNumber), 10 finney);\r\n  }\r\n\r\n  function buyLuckyStone() public payable {\r\n    uint currentLuckyStonePrice = SafeMath.mul(SafeMath.min(10, currentLuckyStoneNumber), 10 finney);\r\n    require(msg.value >= currentLuckyStonePrice);\r\n    require(!mapUserHasLuckyStone[msg.sender]);\r\n    uint excess = msg.value.sub(currentLuckyStonePrice);\r\n    currentLuckyStoneNumber += 1;\r\n    if (excess > 0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    mapUserHasLuckyStone[msg.sender] = true;\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(currentLuckyStonePrice));\r\n    totalEarning = totalEarning.add(currentLuckyStonePrice);\r\n    totalTrading = totalTrading.add(currentLuckyStonePrice);\r\n    luckyStoneEarning = luckyStoneEarning.add(currentLuckyStonePrice);\r\n  }\r\n\r\n  function createEtherMonster(uint martialId, uint balance, uint blood) public onlyOwner {\r\n      require(martialId<listedMartials.length);\r\n      require(balance>0);\r\n      require(blood>0);\r\n      require(balance<address(this).balance);\r\n      EtherMonster memory monster = EtherMonster(listedEtherMonster.length, martialId, balance, blood, now, blood, false, address(0));\r\n      listedEtherMonster.push(monster);\r\n  }\r\n\r\n\r\n  // 2.3 \u72e9\u730e\u8bc1\u4e66\r\n  function userHasHunterLicence(address userAddress) public view returns(bool) {\r\n      return mapUserHasHunterLicence[userAddress];\r\n  }\r\n\r\n  function getCurrentHunterLicencePrice() public view returns(uint) {\r\n    return SafeMath.mul(SafeMath.min(10, currentHunterNumber), 10 finney);\r\n  }\r\n\r\n  function buyHunterLicence() public payable {\r\n    uint currentHunterLicencePrice = SafeMath.mul(SafeMath.min(10, currentHunterNumber), 10 finney);\r\n    require(msg.value >= currentHunterNumber);\r\n    require(!mapUserHasHunterLicence[msg.sender]);\r\n    uint excess = msg.value.sub(currentHunterLicencePrice);\r\n    currentHunterNumber += 1;\r\n    if (excess > 0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    mapUserHasHunterLicence[msg.sender] = true;\r\n\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(currentHunterLicencePrice));\r\n    totalEarning = totalEarning.add(currentHunterLicencePrice);\r\n    totalTrading = totalTrading.add(currentHunterLicencePrice);\r\n    hunterLicenceEarning = hunterLicenceEarning.add(currentHunterLicencePrice);\r\n  }\r\n\r\n  // 2.4 travel\r\n  // \u7528\u6237\u5f53\u524d\u7684Martial\r\n  function getUserCurrentMartialId() public view returns(uint) {\r\n      return mapUserCurrentMartialId[msg.sender];\r\n  }\r\n\r\n  // workaround for struct\r\n  // https://github.com/ethereum/remix-ide/issues/920#issuecomment-348069589\r\n  function getMartialInfo(uint martialId) public view returns(uint, uint, address, uint, uint, uint, uint, uint, uint, uint[]) {\r\n    require(martialId < listedMartials.length);\r\n    Martial memory martial = listedMartials[martialId];\r\n    return (martial.x, martial.y, martial.owner, martial.lastProduceTime, martial.martialId, martial.rareNumber, martial.epicNumber, martial.mythNumber, martial.enterPrice, martial.cardTypeList);\r\n  }\r\n  \r\n  function getMartialListInfo() public view returns(uint[]) {\r\n      // rareNumber, epicNumber, mythNumber, ownerPower\r\n      uint[] memory result = new uint[](listedMartials.length.mul(5)+1);\r\n      uint index = 1;\r\n      result[0] = listedMartials.length;\r\n      for (uint i=0; i<listedMartials.length;i++) {\r\n          Martial memory martial = listedMartials[i];\r\n          result[index] = martial.rareNumber;\r\n          result[index+1] = martial.epicNumber;\r\n          result[index+2] = martial.mythNumber;\r\n          result[index+3] = mapUserPower[martial.owner];\r\n          result[index+4] = mapMartialUserCount[i];\r\n          index += 5;\r\n      }\r\n      return result;\r\n  }\r\n  \r\n  function getMartialOwner() public view returns(address[]) {\r\n    address[] memory result = new address[](listedMartials.length);\r\n    for (uint i=0;i<listedMartials.length;i++) {\r\n        result[i] = listedMartials[i].owner;\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  function getMartialNumber() public view returns(uint) {\r\n    return listedMartials.length;\r\n  }\r\n\r\n  function absSub(uint a, uint b) private pure returns(uint) {\r\n    if (a>b) return a.sub(b);\r\n    return b.sub(a);\r\n  }\r\n  // \u7528\u6237\u5f53\u524d\u65c5\u884c\u7684\u6210\u672c\r\n  function _getTravelPrice(address userAddress, uint martialId) private view returns(uint) {\r\n    Martial storage currentMartial = listedMartials[mapUserCurrentMartialId[userAddress]];\r\n    Martial storage nextMartial = listedMartials[martialId];\r\n    require(currentMartial.martialId != nextMartial.martialId);  // \u65c5\u7a0b\u8d77\u70b9\u3001\u7ec8\u70b9\u4e0d\u80fd\u76f8\u540c\r\n    uint stepNumber = absSub(currentMartial.x, nextMartial.x).add(absSub(currentMartial.y, nextMartial.y));\r\n    uint travelPrice = stepNumber.mul(stepPrice).add(nextMartial.enterPrice);\r\n    // \u51cc\u6ce2\u5fae\u6b65\u7684\u65c5\u884c\u6210\u672c\u51cf\u534a\r\n    if (mapUserHasSmartSpeed[userAddress]) {\r\n      travelPrice = travelPrice.div(2);\r\n    }\r\n    return travelPrice;\r\n  }\r\n\r\n  function getTravelPrice(uint martialId) public view returns(uint) {\r\n    return _getTravelPrice(msg.sender, martialId);\r\n  }\r\n\r\n  // \u65c5\u884c\r\n  function changeMartial(uint martialId) public payable {\r\n    uint travelPrice = _getTravelPrice(msg.sender, martialId);\r\n    require(msg.value>=travelPrice);\r\n    require(martialId<listedMartials.length);\r\n    if (mapUserLotteryNumber[msg.sender] > 0) {\r\n        if (mapMartialUserCount[mapUserCurrentMartialId[msg.sender]] > 0) {\r\n            mapMartialUserCount[mapUserCurrentMartialId[msg.sender]] = mapMartialUserCount[mapUserCurrentMartialId[msg.sender]].sub(1);\r\n        }\r\n        mapMartialUserCount[martialId] += 1;\r\n    }\r\n    uint excess = msg.value.sub(travelPrice);\r\n    if (excess>0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    mapUserCurrentMartialId[msg.sender] = martialId;\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(travelPrice));\r\n    totalEarning = totalEarning.add(travelPrice);\r\n    travelTotalEarning = travelTotalEarning.add(travelPrice);\r\n  }\r\n\r\n  // 2.5 lottery\r\n  // get random number in [0, maxNumber)\r\n  function getRandomNumber(uint maxNumber) private returns(uint) {\r\n    require(maxNumber>0);\r\n    randNonce += 1;\r\n    return uint(keccak256(now, randNonce, block.blockhash(block.number - 1), block.coinbase)) % maxNumber;\r\n  }\r\n  // 2.5 lottery\r\n  // whether user can lottery for free\r\n  function _canLotteryFree(address userAddress) private view returns(bool) {\r\n    uint lastLotteryTimestamp = mapUserLastFreeLotteryTimestamp[userAddress];\r\n    return now - lastLotteryTimestamp > freeLotterySeconds;\r\n  }\r\n\r\n// Test for Remix support of tuple params\r\n//   uint public debugNumber = 0;\r\n//   function setDebugNumber(uint a) {\r\n//       debugNumber = a;\r\n//   }\r\n\r\n//   function setDebugNumber2(uint a, uint b) {\r\n//       debugNumber = b;\r\n//   }\r\n\r\n//   function getDebugNumber() public view returns(uint) {\r\n//       return debugNumber;\r\n//   }\r\n  function debug() public view returns(uint, uint, uint, uint, bool) {\r\n      uint lastLotteryTimestamp = mapUserLastFreeLotteryTimestamp[msg.sender];\r\n      return (now, lastLotteryTimestamp, now-lastLotteryTimestamp, freeLotterySeconds, now - lastLotteryTimestamp > freeLotterySeconds);\r\n  }\r\n\r\n  function getNowTimestamp() public view returns(uint) {\r\n      return now;\r\n  }\r\n\r\n  function getMyLastFreeLotteryTimestamp() public view returns(uint) {\r\n    return mapUserLastFreeLotteryTimestamp[msg.sender];\r\n  }\r\n\r\n  function canLotteryFree() public view returns(bool) {\r\n    return _canLotteryFree(msg.sender);\r\n  }\r\n\r\n  //\u83b7\u53d6\u67d0\u4e2a\u95e8\u6d3e\u7684\u6240\u6709\u5361\u7247\r\n  function getMartialCardTypeIdList(uint martialId) public view returns(uint[]) {\r\n    require(martialId<listedMartials.length);\r\n    return listedMartials[martialId].cardTypeList;\r\n  }\r\n\r\n  function getCardTypeInfo(uint typeId) public view returns(uint, uint, uint, uint, uint) {\r\n    require(typeId < listedCardType.length);\r\n    CardType memory cardType = listedCardType[typeId];\r\n    return (cardType.typeId, cardType.martialId, cardType.initPower, cardType.growthFactor, cardType.category);\r\n  }\r\n\r\n  function getCardPower(uint cardTypeId, uint cardLevel) public view returns(uint){\r\n    require(cardLevel<=3);\r\n    require(cardTypeId<listedCardType.length);\r\n    CardType memory cardType = listedCardType[cardTypeId];\r\n    if (cardLevel == 0) {\r\n      return cardType.initPower;\r\n    } else if (cardLevel == 1) {\r\n      return cardType.initPower.mul(cardType.growthFactor);\r\n    } else if (cardLevel == 2) {\r\n      return cardType.initPower.mul(cardType.growthFactor).mul(cardType.growthFactor);\r\n    } else if (cardLevel == 3) {\r\n      return cardType.initPower.mul(cardType.growthFactor).mul(cardType.growthFactor).mul(cardType.growthFactor);\r\n    }\r\n  }\r\n\r\n  function getUserPower(address userAddress) public view returns(uint) {\r\n      return mapUserPower[userAddress];\r\n  }\r\n  // \u7528\u6237\u53ea\u80fd\u5728\u81ea\u5df1\u7684\u636e\u70b9\u62bd\u5361\r\n  function lottery() public payable {\r\n    require((msg.value >= lotteryPrice || _canLotteryFree(msg.sender)));\r\n    totalLotteryNumber = totalLotteryNumber.add(1);\r\n    uint currentLotteryPrice = 0;\r\n    if (_canLotteryFree(msg.sender)) {\r\n      mapUserLastFreeLotteryTimestamp[msg.sender] = now;\r\n    } else {\r\n      currentLotteryPrice = lotteryPrice;\r\n    }\r\n    uint excess = msg.value.sub(currentLotteryPrice);\r\n    // \u638c\u95e8\u62bd\u6210\r\n    uint userCurrentMartialId = mapUserCurrentMartialId[msg.sender];\r\n    if (currentLotteryPrice > 0) {\r\n      address martialOwner = listedMartials[userCurrentMartialId].owner;\r\n      if (martialOwner != address(0)) {\r\n        uint martialOwnerCut = currentLotteryPrice.mul(30).div(100);\r\n        martialOwner.transfer(martialOwnerCut);\r\n        // martialOwner.transfer(currentLotteryPrice);\r\n      }\r\n    }\r\n    if (excess>0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n  \r\n    // cardType && cardLevel\r\n    // cardType\r\n    uint martialCardTypeCount = listedMartials[userCurrentMartialId].cardTypeList.length;\r\n    // 3\u4e2a\u968f\u673a 50%\u6982\u7387\u672c\u636e\u70b9\u7684\u5361 epic_number%\u62bd\u5230\u7279\u6b8a\u5361 lotteryId\u62bd\u5230\u7684\u5361\u7247\u6570\u91cf\r\n    uint randomNumber = getRandomNumber(martialCardTypeCount.mul(1000));\r\n\r\n    uint lotteryCardTypeId = listedMartials[userCurrentMartialId].cardTypeList[randomNumber % martialCardTypeCount];\r\n    // \u636e\u70b9\u73a9\u5bb6\u670950%\u7684\u6982\u7387\u62bd\u5230\u672c\u636e\u70b9\u7684\u5361\r\n    if (randomNumber % 10 >= 5) {\r\n        lotteryCardTypeId = randomNumber % listedCardType.length;\r\n    }\r\n    randomNumber = randomNumber.div(10).div(martialCardTypeCount);\r\n    // cardLevel\r\n    if (now - listedMartials[userCurrentMartialId].lastProduceTime >= produceUnitSeconds) {\r\n      listedMartials[userCurrentMartialId].epicNumber += unitEpicGrowth;\r\n      listedMartials[userCurrentMartialId].rareNumber += unitRareGrowth;\r\n      listedMartials[userCurrentMartialId].mythNumber += unitMythGrowth;\r\n      listedMartials[userCurrentMartialId].lastProduceTime = listedMartials[userCurrentMartialId].lastProduceTime.add(produceUnitSeconds);\r\n    }\r\n    uint lotteryCardLevel = 0;\r\n    Martial memory userCurrentMartial = listedMartials[userCurrentMartialId];\r\n    uint luckyStoneFactor = 1;\r\n    if (mapUserHasLuckyStone[msg.sender]) {\r\n      luckyStoneFactor = 2;\r\n    }\r\n\r\n    // \u5982\u679c\u7528\u6237\u62e5\u6709luckyStone \u90a3\u4e48\u62bd\u5230\u597d\u5361\u7684\u6982\u7387\u7ffb\u500d\r\n    // Free lottery can only get normal card\r\n    if (randomNumber % 100 < userCurrentMartial.mythNumber.mul(luckyStoneFactor) && userCurrentMartial.mythNumber > 0 && currentLotteryPrice>0) {\r\n      lotteryCardLevel = 3;\r\n      listedMartials[userCurrentMartialId].mythNumber = listedMartials[userCurrentMartialId].mythNumber.sub(1);\r\n    } else if (randomNumber % 100 < luckyStoneFactor.mul(userCurrentMartial.mythNumber.add(userCurrentMartial.epicNumber)) && userCurrentMartial.epicNumber > 0 && currentLotteryPrice > 0) {\r\n      lotteryCardLevel = 2;\r\n      listedMartials[userCurrentMartialId].epicNumber = listedMartials[userCurrentMartialId].epicNumber.sub(1);\r\n    } else if (randomNumber % 100 < luckyStoneFactor.mul(userCurrentMartial.mythNumber.add(userCurrentMartial.epicNumber.add(userCurrentMartial.rareNumber))) && userCurrentMartial.rareNumber > 0 && currentLotteryPrice > 0) {\r\n      lotteryCardLevel = 1;\r\n      listedMartials[userCurrentMartialId].rareNumber = listedMartials[userCurrentMartialId].rareNumber.sub(1);\r\n    }\r\n\r\n    // issue card\r\n    Card memory card = Card(listedCard.length, lotteryCardTypeId, lotteryCardLevel, false, 0, msg.sender);\r\n    mapOwnerOfCard[listedCard.length] = msg.sender;\r\n    if (mapUserLotteryNumber[msg.sender] == 0) {\r\n        totalUserNumber = totalUserNumber.add(1);\r\n        mapMartialUserCount[mapUserCurrentMartialId[msg.sender]] += 1;\r\n    }\r\n    mapUserLotteryNumber[msg.sender] += 1;\r\n    if (lotteryGiveHunt && mapUserLotteryNumber[msg.sender] >= lotteryGiveHuntMinimalNumber) {\r\n        if (mapUserHasHunterLicence[msg.sender] == false) {\r\n            mapUserHasHunterLicence[msg.sender] = true;\r\n        }\r\n    }\r\n    mapMartialLotteryCount[mapUserCurrentMartialId[msg.sender]] += 1;\r\n    mapUserPower[msg.sender] = mapUserPower[msg.sender].add(getCardPower(lotteryCardTypeId, lotteryCardLevel));\r\n    if (mapUserPower[msg.sender] > maxUserPower) {\r\n      maxUserPower = mapUserPower[msg.sender];\r\n      maxPowerUserAddress = msg.sender;\r\n    }\r\n    listedCard.push(card);\r\n\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(currentLotteryPrice));\r\n    totalEarning = totalEarning.add(currentLotteryPrice);\r\n    totalTrading = totalTrading.add(currentLotteryPrice);\r\n    lotteryTotalEarning = lotteryTotalEarning.add(currentLotteryPrice);\r\n  }\r\n\r\n  function getCardNumber() public view returns(uint) {\r\n      return listedCard.length;\r\n  }\r\n\r\n  function getCardInfo(uint cardId) public view returns(uint, uint, uint, bool, uint, address) {\r\n      require(cardId<listedCard.length);\r\n      Card memory card = listedCard[cardId];\r\n      return (card.cardId, card.typeId, card.level, card.onSell, card.sellPrice, card.owner);\r\n  }\r\n  \r\n  function getGameStats() public view returns(uint, uint, uint, uint, uint, address) {\r\n      return (totalUserNumber, totalBuyCardNumber, totalLotteryNumber, totalEarning, totalTrading, wuxiaMaster);\r\n  }\r\n\r\n  // 2.6 \u5361\u7247\u5408\u6210\r\n  // \u4e24\u5f20\u5361\u5fc5\u987b\u4e0d\u80fd\u5728\u5356\u51fa\u72b6\u6001\r\n  function mergeCard(uint a, uint b) public {\r\n    require(a<listedCard.length);\r\n    require(b<listedCard.length);\r\n    require(listedCard[a].typeId==listedCard[b].typeId);\r\n    require(listedCard[a].level==listedCard[b].level);\r\n    require(listedCard[a].level<=2);  // 0 for normal, 1 for rare, 2 for epic, 3 for myth\r\n    require(!listedCard[a].onSell);\r\n    require(!listedCard[b].onSell);\r\n    require(mapOwnerOfCard[a]==msg.sender);\r\n    require(mapOwnerOfCard[b]==msg.sender);\r\n    Card memory card = Card(listedCard.length, listedCard[a].typeId, listedCard[a].level.add(1), false, 0, msg.sender);\r\n    mapOwnerOfCard[a] = address(0);\r\n    mapOwnerOfCard[b] = address(0);\r\n    listedCard[a].owner = address(0);\r\n    listedCard[b].owner = address(0);\r\n    mapOwnerOfCard[listedCard.length] = msg.sender;\r\n    listedCard.push(card);\r\n    // \u9700\u8981\u7ef4\u62a4\u7528\u6237\u7684\u6218\u6597\u529b\r\n    mapUserPower[msg.sender] = mapUserPower[msg.sender].add(getCardPower(listedCard[a].typeId, listedCard[a].level.add(1)).sub(getCardPower(listedCard[a].typeId, listedCard[a].level).mul(2)));\r\n    if (mapUserPower[msg.sender] > maxUserPower) {\r\n      maxUserPower = mapUserPower[msg.sender];\r\n      maxPowerUserAddress = msg.sender;\r\n    }\r\n  }\r\n\r\n  // 2.7 \u638c\u95e8\u4eba\r\n  // \u4e89\u593a\u638c\u95e8\u4eba\r\n  function beatMartialOwner() public returns (bool){\r\n    uint myMartialId = mapUserCurrentMartialId[msg.sender];\r\n    address martialOwner = listedMartials[myMartialId].owner;\r\n    require(msg.sender!=martialOwner);\r\n    require(!mapUesrAlreadyMartialOwner[msg.sender]);\r\n    // \u7a7a\u7684\u95e8\u6d3e\u53ef\u4ee5\u76f4\u63a5\u88ab\u5360\u9886\r\n    if (martialOwner==address(0)) {\r\n      listedMartials[myMartialId].owner = msg.sender;\r\n      mapUesrAlreadyMartialOwner[msg.sender] = true;\r\n      mapUesrAlreadyMartialOwner[martialOwner] = false;\r\n      return true;\r\n    } else {\r\n      if (mapUserPower[msg.sender] > mapUserPower[martialOwner]) {\r\n        listedMartials[myMartialId].owner = msg.sender;\r\n        mapUesrAlreadyMartialOwner[msg.sender] = true;\r\n        mapUesrAlreadyMartialOwner[martialOwner] = false;\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 2.8 wuxiaMaster\r\n  // \u56de\u672c\u5468\u671f\u957f, \u6295\u8d44\u9700\u8c28\u614e\r\n  // \u6b66\u6797\u76df\u4e3b\u5c06\u83b7\u5f97\u6240\u6709\u5361\u724c\u4ea4\u6613\u8d39\u7528\u76845% \u6bcf\u83b7\u5f971.1\u5355\u4f4d\u6536\u76ca \u6b66\u6797\u76df\u4e3b\u7684\u4ef7\u683c\u4f1a\u4e0b\u964d1 \u4e5f\u5c31\u662f\u8bf4\u4f60\u6700\u591a\u53ef\u4ee5\u83b7\u5f97\u6295\u8d44\u7684110%\u7684\u6536\u76ca\r\n  // \u8bbe\u7acbwuxiaMaster\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5e0c\u671b\u6709\u770b\u5f97\u8d77\u8fd9\u4e2a\u6e38\u620f\u7684\u4eba \u6295\u4e00\u70b9\u94b1 \u8ba9\u6211\u8bf7\u5973\u670b\u53cb\u5403\u987f\u81ea\u52a9\r\n  // \u5e0c\u671b\u4e0d\u4f1a\u8ba9\u4f60\u4e8f\u635f~\r\n  function currentWulinMasterPrice() public view returns(uint){\r\n    return wuxiaMasterPrice;\r\n  }\r\n\r\n  function buyWuxiaMaster() payable public {\r\n    require(msg.value>=wuxiaMasterPrice);\r\n    require(msg.sender!=wuxiaMaster);\r\n    // \u7ed9\u8001\u7684owner\u8f6c\u51fa\u5f53\u65f6\u4e70\u5165\u7684\u4ef7\u94b1\r\n    wuxiaMaster.transfer(wuxiaMasterPrice - 100 finney);\r\n    uint excess = msg.value.sub(wuxiaMasterPrice);\r\n    // \u8f6c\u51fa\u4f59\u989d\r\n    if (excess>0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    // wuxiaMaster\u5176\u5b9e\u662f\u4e8f\u94b1\u4e70\u5356 \u4e0d\u8ba1\u5165totalEarning\r\n    masterTotalEarning = masterTotalEarning.add(wuxiaMasterPrice);\r\n    totalTrading = totalTrading.add(wuxiaMasterPrice);\r\n\r\n    // \u66f4\u65b0\u6b66\u6797\u76df\u4e3b\r\n    wuxiaMaster = msg.sender;\r\n    wuxiaMasterPrice = wuxiaMasterPrice.add(100 finney);\r\n  }\r\n\r\n\r\n  // 2.9 card Trading\r\n  function sellCard(uint cardId, uint price) public {\r\n    require(cardId<listedCard.length);\r\n    totalSellCardNumber = totalSellCardNumber.add(1);\r\n    address cardOwner = mapOwnerOfCard[cardId];\r\n    require(cardOwner!=address(0));  // \u4e0d\u80fd\u5356\u51fa\u88ab\u9500\u6bc1\u7684\u5361\r\n    require(cardOwner==msg.sender);  // \u53ea\u80fd\u5356\u51fa\u81ea\u5df1\u7684\u5361\r\n    require(!listedCard[cardId].onSell); // \u4e0d\u80fd\u5356\u51fa\u5df2\u5728\u5356\u51fa\u72b6\u6001\u7684\u5361\r\n    listedCard[cardId].onSell = true;\r\n    listedCard[cardId].sellPrice = price;\r\n  }\r\n\r\n  function cancelSell(uint cardId) public {\r\n    require(cardId<listedCard.length);\r\n    address cardOwner = mapOwnerOfCard[cardId];\r\n    require(cardOwner!=address(0));\r\n    require(cardOwner==msg.sender);  // \u53ea\u80fd\u53d6\u6d88\u81ea\u5df1\u7684\u5361\r\n    require(listedCard[cardId].onSell); // \u5fc5\u987b\u5728\u5f85\u5356\u51fa\u72b6\u6001\r\n    listedCard[cardId].onSell = false;\r\n  }\r\n\r\n  // \u7528\u6237\u5356\u51fa\u5361\u7247 \u9700\u8981\u652f\u4ed85%\u7684\u4f63\u91d1 \u5176\u4e2d2%\u7ed9\u5f00\u53d1\u8005 3%\u7ed9\u6b66\u6797\u76df\u4e3b\r\n  function buyCard(uint cardId) payable public {\r\n    require(mapOwnerOfCard[cardId]!=address(0));\r\n    require(msg.sender!=mapOwnerOfCard[cardId]);\r\n    require(listedCard[cardId].onSell);\r\n    uint buyPrice = listedCard[cardId].sellPrice;\r\n    totalBuyCardNumber = totalBuyCardNumber.add(1);\r\n    require(msg.value>=buyPrice);\r\n    // \u5904\u7406\u4f59\u989d\r\n    uint excess = msg.value.sub(buyPrice);\r\n    if (excess>0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n    // \u7ed9\u5f00\u53d15%\r\n    uint devCut = buyPrice.div(100).mul(0);\r\n    uint masterCut = buyPrice.div(100).mul(5);\r\n    if (wuxiaMaster==address(0)) {\r\n      devCut = devCut.add(masterCut);\r\n      masterCut = 0;\r\n    } else {\r\n      wuxiaMaster.transfer(masterCut);\r\n    }\r\n    // \u4fee\u6539wuxiaMaster\u7684price\r\n    // \u4fdd\u8bc1MasterPrice>=100 finney\r\n    uint masterPriceMinus = masterCut.mul(100).div(110);\r\n    if (wuxiaMasterPrice >= masterPriceMinus.add(100 finney)) {\r\n        wuxiaMasterPrice = wuxiaMasterPrice.sub(masterPriceMinus);\r\n    } else {\r\n        wuxiaMasterPrice = 100 finney;\r\n    }\r\n    // \u7ed9\u7528\u623795%\r\n    uint moneyToSeller = buyPrice.sub(devCut.add(masterCut));\r\n    mapOwnerOfCard[cardId].transfer(moneyToSeller);\r\n    // \u7ef4\u62a4\u6218\u529b\r\n    uint cardPower = getCardPower(listedCard[cardId].typeId, listedCard[cardId].level);\r\n    // change onSell\r\n    listedCard[cardId].onSell = false;\r\n    mapUserPower[mapOwnerOfCard[cardId]] = mapUserPower[mapOwnerOfCard[cardId]].sub(cardPower);\r\n    mapUserPower[msg.sender] = mapUserPower[msg.sender].add(cardPower);\r\n    // // \u6240\u6709\u6743\u8f6c\u79fb\r\n    mapOwnerOfCard[cardId] = msg.sender;\r\n    listedCard[cardId].owner = msg.sender;\r\n    // etherMonster\r\n    _tryCreateEtherMonster(totalEarning, totalEarning.add(devCut));\r\n    totalEarning = totalEarning.add(devCut);\r\n    totalTrading = totalTrading.add(buyPrice);\r\n    marketTotalEarning = marketTotalEarning.add(devCut);\r\n  }\r\n\r\n  // 2.10 \u9f99\u5973\u5f69\u7968 => \u6bcf5\u5f20\u5f69\u7968\u5f00\u5956\u4e00\u6b21\r\n  // \u83b7\u5f97\u4e00\u5f20\u666e\u901a\u7684\u5c0f\u9f99\u5973 cardType\u4e3a0\u7684\u5361\u7247\u5b9a\u4e49\u4e3a\u5c0f\u9f99\u5973\r\n  function getCurrentDragonGirlLotteryNumber() public view returns(uint) {\r\n    return dragonGirlLotteryNumber;\r\n  }\r\n\r\n  function buyLittleDragonGirlLottery() public payable{\r\n    require(msg.value>=dragonGirlLotteryPrice);\r\n    require(listedCardType.length>0);\r\n    totalDragonLotteryNumber = totalDragonLotteryNumber.add(1);\r\n    listedDragonGirlLotteryUser[dragonGirlLotteryNumber] = msg.sender;\r\n    dragonGirlLotteryNumber = dragonGirlLotteryNumber.add(1);\r\n\r\n    if (dragonGirlLotteryNumber == 5) {\r\n      // \u62bd\u5956\r\n      uint randomNumber = getRandomNumber(5);\r\n      address winner = listedDragonGirlLotteryUser[randomNumber];\r\n      mapOwnerOfCard[listedCard.length] = winner;\r\n      Card memory card = Card(listedCard.length, 0, 0, false, 0, winner);\r\n      listedCard.push(card);\r\n      // \u66f4\u65b0\u83b7\u5956\u8005\u6218\u529b\r\n      mapUserPower[winner] = mapUserPower[winner].add(getCardPower(0, 0));\r\n      dragonGirlLotteryNumber = 0;\r\n    }\r\n  }\r\n\r\n  // \u6536\u5165\u768430%\u53cd\u9988\u7ed9\u638c\u95e8\u4eba\u548c\u730e\u4ee5\u592a\u602a\u4eba\r\n  function _tryCreateEtherMonster(uint price_a, uint price_b) private {\r\n    uint priceTimes = price_b.div(0.5 ether);\r\n    // 40% for little monster\r\n    if (price_a<priceTimes*0.5 ether && price_b>=priceTimes*0.5 ether) {\r\n      // \u751f\u6210\u5c0f\u602a\u517d\r\n      uint martialId = getRandomNumber(listedMartials.length);\r\n      EtherMonster memory monster = EtherMonster(listedEtherMonster.length, martialId, 0.2 ether, maxUserPower.mul(smallMonsterPowerFactor), now, maxUserPower.mul(smallMonsterPowerFactor), false, address(0));\r\n      listedEtherMonster.push(monster);\r\n    }\r\n    priceTimes = price_b.div(5 ether);\r\n    // 20% for large monster\r\n    if (price_a<priceTimes*5 ether && price_b>=priceTimes*5 ether) {\r\n      // \u751f\u6210\u5927\u602a\u517d\r\n      uint bigMartialId = (getRandomNumber(listedEtherMonster.length).add(10007)) % listedMartials.length;\r\n      EtherMonster memory bigMonster = EtherMonster(listedEtherMonster.length, bigMartialId, 1 ether, maxUserPower.mul(bigMonsterPowerFactor), now, maxUserPower.mul(bigMonsterPowerFactor), false, address(0));\r\n      listedEtherMonster.push(bigMonster);\r\n    }\r\n  }\r\n\r\n  function getEtherMonsterNumber() public view returns(uint) {\r\n    return listedEtherMonster.length;\r\n  }\r\n\r\n  function getCanAttackMonsterIds() public view returns(uint[]) {\r\n      uint[] memory result = new uint[](listedEtherMonster.length+1);\r\n      uint index=0;\r\n      for (uint i=0; i<listedEtherMonster.length; i++) {\r\n        EtherMonster memory monster = listedEtherMonster[i];\r\n        if (monster.produceTime.add(etherMonsterHuntSeconds)>now && !monster.defeated) {\r\n            result[index] = i+1;\r\n            index += 1;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n  function getOnSellCardIds() public view returns(uint[]) {\r\n      uint[] memory result = new uint[](listedCard.length+1);\r\n      uint index = 0;\r\n      for (uint i=0; i<listedCard.length; i++) {\r\n          if (listedCard[i].onSell) {\r\n              result[index] = i+1;\r\n              index += 1;\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n\r\n  function getEtherMonsterInfo(uint monsterId) public view returns(uint, uint, uint, uint, uint, uint, bool, address) {\r\n      require(monsterId<listedEtherMonster.length);\r\n      EtherMonster memory monster = listedEtherMonster[monsterId];\r\n      return (monster.monsterId, monster.martialId, monster.balance, monster.blood, monster.produceTime, monster.currentBlood, monster.defeated, monster.winner);\r\n  }\r\n\r\n  // \u638c\u95e8\u4eba\u4f1a\u83b7\u5f97\r\n  function attackMonster(uint monsterId) public {\r\n    // \u6bcf\u4e2a\u4eba\u53ea\u80fd\u653b\u51fb\u4e00\u6b21\r\n    require(!listedEtherMonster[monsterId].defeated);  // \u6ca1\u6709\u88ab\u6253\u8d25\u8fc7\r\n    require(address(this).balance>=listedEtherMonster[monsterId].balance);  // \u8981\u6709\u8db3\u591f\u7684\u5956\u91d1\r\n    require(mapUserLastAttackMonsterTimestamp[msg.sender].add(userAttackMonsterCDSeconds) < now);\r\n    require(listedEtherMonster[monsterId].produceTime.add(etherMonsterHuntSeconds) > now);\r\n    require(mapUserHasHunterLicence[msg.sender]);  // \u7528\u6237\u6709\u72e9\u730e\u51ed\u8bc1\r\n    // \u53ea\u8981\u5728\u8be5\u95e8\u6d3e\u7684\u4eba\u624d\u80fd\u653b\u51fb\r\n    require(mapUserCurrentMartialId[msg.sender]==listedEtherMonster[monsterId].martialId);\r\n    // \u5224\u65admonster\u5f53\u524d\u7684\u8840\u91cf\r\n    uint monsterCurrentBlood = listedEtherMonster[monsterId].currentBlood;\r\n    uint monsterTotalBlood = listedEtherMonster[monsterId].blood;\r\n    mapUserLastAttackMonsterTimestamp[msg.sender] = now;\r\n    if (mapUserPower[msg.sender] >= monsterCurrentBlood) {\r\n      // \u6218\u529b\u53d6\u80dc\r\n      listedEtherMonster[monsterId].defeated = true;\r\n      listedEtherMonster[monsterId].winner = msg.sender;\r\n      _sendMonsterPrize(monsterId, msg.sender);\r\n    } else {\r\n      // \u5224\u65ad\u80fd\u5426\u6982\u7387\u53d6\u80dc\r\n      uint randomNumber = getRandomNumber(monsterTotalBlood);\r\n      if (randomNumber < mapUserPower[msg.sender]) {\r\n        listedEtherMonster[monsterId].defeated = true;\r\n        listedEtherMonster[monsterId].winner = msg.sender;\r\n        _sendMonsterPrize(monsterId, msg.sender);\r\n      } else {\r\n        listedEtherMonster[monsterId].currentBlood = monsterCurrentBlood.sub(mapUserPower[msg.sender]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _sendMonsterPrize(uint monsterId, address winner) private {\r\n    uint totalPrize = listedEtherMonster[monsterId].balance;\r\n    uint martialOwnerCut = 0;\r\n    if (listedMartials[listedEtherMonster[monsterId].martialId].owner != address(0)) {\r\n      martialOwnerCut = totalPrize.mul(10).div(100);\r\n    }\r\n    winner.transfer(totalPrize.sub(martialOwnerCut));\r\n    listedMartials[listedEtherMonster[monsterId].martialId].owner.transfer(martialOwnerCut);\r\n  }\r\n\r\n  // 2.12 \u7528\u6237\u8bbenickname\r\n  function setNickname(bytes32 nickname) public {\r\n    mapUserNickname[msg.sender] = nickname;\r\n  }\r\n\r\n  function getAddressNickname(address userAddress) public view returns(bytes32){\r\n    return mapUserNickname[userAddress];\r\n  }\r\n\r\n  // 2.13 \u7edf\u8ba1\u6307\u6807\r\n  function listedMartialsLength() public view returns(uint length) {\r\n      return listedMartials.length;\r\n  }\r\n\r\n\r\n    function initMartial() onlyOwner() public {\r\n        require(!hasInitMartial);\r\n        createNewMartial(16,14,0);\r\n        createNewMartial(10,11,0);\r\n        createNewMartial(13,10,0);\r\n        createNewMartial(12,12,0);\r\n        createNewMartial(4,3,0);\r\n        createNewMartial(11,10,0);\r\n        createNewMartial(6,14,0);\r\n        createNewMartial(9,9,0);\r\n        createNewMartial(10,10,0);\r\n        createNewMartial(9,7,0);\r\n        createNewMartial(12,10,0);\r\n        hasInitMartial = true;\r\n    }\r\n\r\n  function initCard1() onlyOwner() public {\r\n    require(!hasInitCard1);\r\n    createNewCardType(1,8,10,1);\r\n    createNewCardType(1,10,10,1);\r\n    createNewCardType(1,8,10,1);\r\n    createNewCardType(1,5,12,3);\r\n    createNewCardType(1,4,12,3);\r\n    createNewCardType(1,200,3,2);\r\n    createNewCardType(1,200,3,2);\r\n    createNewCardType(0,1,2,1);\r\n    createNewCardType(0,1,30,3);\r\n    createNewCardType(0,5,2,2);\r\n    createNewCardType(0,3,2,2);\r\n    createNewCardType(0,2,2,3);\r\n    createNewCardType(0,4,2,3);\r\n    createNewCardType(0,8,2,2);\r\n    createNewCardType(2,12,10,1);\r\n    createNewCardType(2,10,10,1);\r\n    createNewCardType(2,5,12,3);\r\n    createNewCardType(2,5,12,3);\r\n    createNewCardType(2,4,12,3);\r\n    createNewCardType(2,5,20,4);\r\n    createNewCardType(2,18,15,4);\r\n    createNewCardType(3,13,10,1);\r\n    createNewCardType(3,5,13,3);\r\n    createNewCardType(3,5,12,3);\r\n    createNewCardType(3,5,10,3);\r\n    createNewCardType(3,10,8,3);\r\n    createNewCardType(3,80,5,2);\r\n    createNewCardType(3,7,20,4);\r\n    createNewCardType(4,11,10,1);\r\n    createNewCardType(4,10,10,1);\r\n    createNewCardType(4,9,10,1);\r\n    createNewCardType(4,5,12,3);\r\n    createNewCardType(4,5,11,3);\r\n    createNewCardType(4,5,10,3);\r\n    createNewCardType(4,200,3,2);\r\n    hasInitCard1 = true;\r\n  }\r\n\r\n    function initCard2() onlyOwner() public {\r\n    require(!hasInitCard2);\r\n    createNewCardType(5,10,10,1);\r\n    createNewCardType(5,8,10,1);\r\n    createNewCardType(5,5,8,1);\r\n    createNewCardType(5,3,10,3);\r\n    createNewCardType(5,5,12,3);\r\n    createNewCardType(5,3,11,3);\r\n    createNewCardType(5,70,4,2);\r\n    createNewCardType(6,10,10,1);\r\n    createNewCardType(6,6,8,1);\r\n    createNewCardType(6,5,8,1);\r\n    createNewCardType(6,4,12,3);\r\n    createNewCardType(6,5,12,3);\r\n    createNewCardType(6,5,12,3);\r\n    createNewCardType(6,80,5,2);\r\n    createNewCardType(7,10,12,1);\r\n    createNewCardType(7,100,4,2);\r\n    createNewCardType(7,100,5,2);\r\n    createNewCardType(7,100,4,2);\r\n    createNewCardType(7,100,4,2);\r\n    createNewCardType(7,100,4,2);\r\n    createNewCardType(8,10,10,1);\r\n    createNewCardType(8,9,10,1);\r\n    createNewCardType(8,5,6,1);\r\n    createNewCardType(8,4,12,3);\r\n    createNewCardType(8,5,12,3);\r\n    createNewCardType(8,4,12,3);\r\n    createNewCardType(8,4,20,4);\r\n    createNewCardType(9,10,10,1);\r\n    createNewCardType(9,7,10,1);\r\n    createNewCardType(9,1,20,1);\r\n    createNewCardType(9,5,13,3);\r\n    createNewCardType(9,5,13,3);\r\n    createNewCardType(9,80,5,2);\r\n    createNewCardType(9,90,5,2);\r\n    createNewCardType(10,9,10,1);\r\n    createNewCardType(10,10,10,1);\r\n    createNewCardType(10,4,12,1);\r\n    createNewCardType(10,80,5,2);\r\n    createNewCardType(10,5,12,3);\r\n    createNewCardType(10,5,12,3);\r\n    hasInitCard2 = true;\r\n  }\r\n\r\n  /* Withdraw */\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyAdmins() public {\r\n   msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyAdmins() public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  /* ERC721 */\r\n\r\n  function name() public pure returns (string) {\r\n    return \"Ethwuxia.pro\";\r\n  }\r\n\r\n  function symbol() public pure returns (string) {\r\n    return \"EWX\";\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return listedCard.length;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint counter = 0;\r\n\r\n    for (uint i = 0; i < listedCard.length; i++) {\r\n      if (ownerOf(listedCard[i].cardId) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return mapOwnerOfCard[_itemId];\r\n  }\r\n\r\n  function tokensOf (address _owner) public view returns (uint[]) {\r\n    uint[] memory result = new uint[](balanceOf(_owner));\r\n\r\n    uint256 itemCounter = 0;\r\n    for (uint256 i = 0; i < listedCard.length; i++) {\r\n      if (ownerOf(i) == _owner) {\r\n        result[itemCounter] = listedCard[i].cardId;\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\r\n    return mapOwnerOfCard[_itemId] != address(0);\r\n  }\r\n\r\n  function approvedFor(uint256 _itemId) public view returns (address _approved) {\r\n    return approvedOfItem[_itemId];\r\n  }\r\n\r\n  function approve(address _to, uint256 _itemId) public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfItem[_itemId] != 0) {\r\n        delete approvedOfItem[_itemId];\r\n        emit Approval(msg.sender, 0, _itemId);\r\n      }\r\n    } else {\r\n      approvedOfItem[_itemId] = _to;\r\n      emit Approval(msg.sender, _to, _itemId);\r\n    }\r\n  }\r\n\r\n  /* Transferring a country to another owner will entitle the new owner the profits from `buy` */\r\n  function transfer(address _to, uint256 _itemId) public {\r\n    require(msg.sender == ownerOf(_itemId));\r\n    _transfer(msg.sender, _to, _itemId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _itemId) public {\r\n    require(approvedFor(_itemId) == msg.sender);\r\n    _transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    return ;  // disable card transfer\r\n\r\n    mapOwnerOfCard[_itemId] = _to;\r\n    approvedOfItem[_itemId] = 0;\r\n\r\n    emit Transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  /* Read */\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n\r\n  /* Util */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n}\r\n\r\ninterface IItemRegistry {\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) external view returns (uint256[] _items);\r\n  function ownerOf (uint256 _itemId) external view returns (address _owner);\r\n  function priceOf (uint256 _itemId) external view returns (uint256 _price);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserLastAttackMonsterTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCardNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartSpeedEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initMartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mergeCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherMonsterNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beatMartialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"}],\"name\":\"changeMartial\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMartialListInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitMythGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryTotalEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"bytes32\"}],\"name\":\"setNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"}],\"name\":\"getTravelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemRegistry\",\"type\":\"address\"}],\"name\":\"setItemRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentHunterLicencePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monsterId\",\"type\":\"uint256\"}],\"name\":\"attackMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMartialUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canLotteryFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapOwnerOfCard\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedMartials\",\"outputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"lastProduceTime\",\"type\":\"uint256\"},{\"name\":\"martialId\",\"type\":\"uint256\"},{\"name\":\"rareNumber\",\"type\":\"uint256\"},{\"name\":\"epicNumber\",\"type\":\"uint256\"},{\"name\":\"mythNumber\",\"type\":\"uint256\"},{\"name\":\"enterPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentSmartSpeedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initCard2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyStoneEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monsterId\",\"type\":\"uint256\"}],\"name\":\"getEtherMonsterInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialMartialTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableLotteryGiveHunt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"},{\"name\":\"initPower\",\"type\":\"uint256\"},{\"name\":\"growthFactor\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"}],\"name\":\"createNewCardType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLuckyStone\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTrading\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserHasHunterLicence\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedCardType\",\"outputs\":[{\"name\":\"typeId\",\"type\":\"uint256\"},{\"name\":\"martialId\",\"type\":\"uint256\"},{\"name\":\"initPower\",\"type\":\"uint256\"},{\"name\":\"growthFactor\",\"type\":\"uint256\"},{\"name\":\"category\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWulinMasterPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyLastFreeLotteryTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyCardNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDragonLotteryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"travelUnitFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debug\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listedMartialsLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dragonGirlLotteryPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyHunterLicence\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserHasSmartSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"travelTotalEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserHasLuckyStone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOnSellCardIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedDragonGirlLotteryUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"blood\",\"type\":\"uint256\"}],\"name\":\"createEtherMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userHasHunterLicence\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUserPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMartialLotteryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userHasSmartSpeed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAddressNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initCard1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLittleDragonGirlLottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketTotalEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyWuxiaMaster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMartialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hunterLicenceEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"enterPrice\",\"type\":\"uint256\"}],\"name\":\"createNewMartial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"}],\"name\":\"getMartialInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitEpicGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getCardInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedEtherMonster\",\"outputs\":[{\"name\":\"monsterId\",\"type\":\"uint256\"},{\"name\":\"martialId\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"blood\",\"type\":\"uint256\"},{\"name\":\"produceTime\",\"type\":\"uint256\"},{\"name\":\"currentBlood\",\"type\":\"uint256\"},{\"name\":\"defeated\",\"type\":\"bool\"},{\"name\":\"winner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSellCardNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"getCardTypeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wuxiaMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDragonGirlLotteryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryGiveHunt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLuckyStonePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"littleMonster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeLotterySeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCurrentMartialId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUesrAlreadyMartialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLotteryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"buyCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitRareGrowth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buySmartSpeed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"name\":\"cardLevel\",\"type\":\"uint256\"}],\"name\":\"getCardPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dragonGirlLotteryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedCard\",\"outputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"typeId\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"onSell\",\"type\":\"bool\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitMartial\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSmartSpeedNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLuckyStoneNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userAttackMonsterCDSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCanAttackMonsterIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedOfItem\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wuxiaMasterPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"martialId\",\"type\":\"uint256\"}],\"name\":\"getMartialCardTypeIdList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryGiveHuntMinimalNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMartialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterTotalEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUserNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userHasLuckyStone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitCard2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableLotteryGiveHunt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPowerUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitCard1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserLastFreeLotteryTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentHunterNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"produceUnitSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapUserLotteryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "EthWuxia", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cd242fc891417052525c2dbf8547b62439d6b3a8059afe8b9c44e491d038d4cb"}]}