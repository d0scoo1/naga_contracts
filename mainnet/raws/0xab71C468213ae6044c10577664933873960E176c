{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TsubasaStaking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract TsubasaStaking is IERC721Receiver {\\n    /**\\n     * admin address\\n     */\\n    address public admin;\\n    /**\\n     * how many tokens can be rewarded per second per NFT\\n     */\\n    uint256 public rewardRate;\\n    /**\\n     * can user stake NFTs\\n     */\\n    bool public stakeEnabled;\\n    /**\\n     * when does the reward start\\n     */\\n    uint256 public rewardStartTimestamp;\\n    /**\\n     * nft address\\n     */\\n    address public nftAddress;\\n    /**\\n     * ERC20 token address\\n     */\\n    address public tokenAddress;\\n    /**\\n     * nft id => owner\\n     */\\n    mapping(uint256 => address) public nftOwners;\\n    /**\\n     * nft id => reward start time\\n     */\\n    mapping(uint256 => uint256) public nftTimestamp;\\n    /**\\n     * address => staked nft ids\\n     */\\n    mapping(address => uint256[]) public userNftIds;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Caller is NOT admin\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 rewardRate_,\\n        address nftAddress_,\\n        address tokenAddress_\\n    ) {\\n        admin = msg.sender;\\n        stakeEnabled = false;\\n        rewardRate = rewardRate_;\\n        rewardStartTimestamp = block.timestamp;\\n        nftAddress = nftAddress_;\\n        tokenAddress = tokenAddress_;\\n    }\\n\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address, /* operator */\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata /* data */\\n    ) external override returns (bytes4) {\\n        require(stakeEnabled, \\\"Stake disabled\\\");\\n        // only specified nft contract can call this api\\n        require(msg.sender == nftAddress, \\\"Wrong NFT\\\");\\n        // mint to this contract directly is not allowed\\n        require(from != address(0), \\\"Wrong sender address\\\");\\n        // confirm nft received\\n        require(\\n            IERC721(nftAddress).ownerOf(tokenId) == address(this),\\n            \\\"NFT NOT received\\\"\\n        );\\n        // check nft stake information is empty\\n        require(nftOwners[tokenId] == address(0), \\\"NFT already staked\\\");\\n        _stakeNft(tokenId, from);\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function _stakeNft(uint256 nftId, address owner) private {\\n        nftOwners[nftId] = owner;\\n        nftTimestamp[nftId] = block.timestamp;\\n        userNftIds[owner].push(nftId);\\n    }\\n\\n    function stakeApproved() public view returns (bool) {\\n        return IERC721(nftAddress).isApprovedForAll(msg.sender, address(this));\\n    }\\n\\n    function stakeNfts(uint256[] calldata nftIds) public {\\n        require(stakeApproved(), \\\"Operation unapproved\\\");\\n        _checkNftOwners(nftIds, msg.sender);\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            IERC721(nftAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                nftId\\n            );\\n        }\\n    }\\n\\n    function getStakedNftIds(address owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userNftIds[owner];\\n    }\\n\\n    function unstakeNfts(uint256[] calldata nftIds) public {\\n        _checkNftOriginalOwners(nftIds, msg.sender);\\n        uint256 token = _calculateRewards(nftIds);\\n        _transferToken(msg.sender, token);\\n        _returnNfts(nftIds, msg.sender);\\n    }\\n\\n    function claimableToken() public view returns (uint256) {\\n        uint256[] memory nftIds = userNftIds[msg.sender];\\n        return _calculateRewards(nftIds);\\n    }\\n\\n    function claimToken() public {\\n        uint256[] memory nftIds = userNftIds[msg.sender];\\n        uint256 token = _calculateRewards(nftIds);\\n        _resetRewardStartTime(nftIds);\\n        _transferToken(msg.sender, token);\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        admin = admin_;\\n    }\\n\\n    function setNftAddress(address nftAddress_) public onlyAdmin {\\n        nftAddress = nftAddress_;\\n    }\\n\\n    function setTokenAddress(address tokenAddress_) public onlyAdmin {\\n        tokenAddress = tokenAddress_;\\n    }\\n\\n    function setStakeEnabled(bool stakeEnabled_) public onlyAdmin {\\n        stakeEnabled = stakeEnabled_;\\n    }\\n\\n    function setRewardRate(uint256 rewardRate_) public onlyAdmin {\\n        rewardRate = rewardRate_;\\n    }\\n\\n    function setRewardStartTimestamp(uint256 rewardStartTimestamp_)\\n        public\\n        onlyAdmin\\n    {\\n        rewardStartTimestamp = rewardStartTimestamp_;\\n    }\\n\\n    function returnNfts(uint256[] calldata nftIds) public onlyAdmin {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            returnNft(nftIds[i]);\\n        }\\n    }\\n\\n    function returnNft(uint256 nftId) public onlyAdmin {\\n        _returnNft(nftId, nftOwners[nftId]);\\n    }\\n\\n    function returnNftToAddress(uint256 nftId, address owner) public onlyAdmin {\\n        _returnNft(nftId, owner);\\n    }\\n\\n    function returnSpecifiedNftToAddress(\\n        address nftContract,\\n        uint256 nftId,\\n        address owner\\n    ) public onlyAdmin {\\n        _transferNft(nftContract, nftId, owner);\\n    }\\n\\n    function withdrawEther() public onlyAdmin {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"Balance is 0\\\");\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function withdrawToken(uint256 amount) public onlyAdmin {\\n        _transferToken(msg.sender, amount);\\n    }\\n\\n    function withdrawAllToken() public onlyAdmin {\\n        withdrawToken(tokenBalance());\\n    }\\n\\n    function tokenBalance() public view returns (uint256) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function _checkNftOwners(uint256[] memory nftIds, address owner)\\n        private\\n        view\\n    {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            require(\\n                IERC721(nftAddress).ownerOf(nftId) == owner,\\n                \\\"Wrong NFT owner\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkNftOriginalOwners(uint256[] memory nftIds, address owner)\\n        private\\n        view\\n    {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            require(nftOwners[nftId] == owner, \\\"Wrong NFT owner\\\");\\n        }\\n    }\\n\\n    function _calculateRewards(uint256[] memory nftIds)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentTime = block.timestamp;\\n        if (currentTime <= rewardStartTimestamp) {\\n            return 0;\\n        }\\n        uint256 rewardTime = 0;\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            uint256 startTime = nftTimestamp[nftId];\\n            if (startTime < rewardStartTimestamp) {\\n                startTime = rewardStartTimestamp;\\n            }\\n            if (startTime >= currentTime) continue;\\n            rewardTime = rewardTime + (currentTime - startTime);\\n        }\\n        return rewardTime * rewardRate;\\n    }\\n\\n    function _resetRewardStartTime(uint256[] memory nftIds) private {\\n        uint256 currentTime = block.timestamp;\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            uint256 time = nftTimestamp[nftId];\\n            if (time >= currentTime) continue;\\n            nftTimestamp[nftId] = currentTime;\\n        }\\n    }\\n\\n    function _transferToken(address to, uint256 amount) private {\\n        require(\\n            amount <= tokenBalance(),\\n            \\\"Insufficient token in the pool, contact admin\\\"\\n        );\\n        if (amount > 0) {\\n            IERC20(tokenAddress).transfer(to, amount);\\n        }\\n    }\\n\\n    function _returnNfts(uint256[] memory nftIds, address owner) private {\\n        for (uint256 i = 0; i < nftIds.length; i++) {\\n            uint256 nftId = nftIds[i];\\n            _returnNft(nftId, owner);\\n        }\\n    }\\n\\n    function _returnNft(uint256 nftId, address to) private {\\n        _removeNftIdOfUser(to, nftId);\\n        delete nftOwners[nftId];\\n        _transferNft(nftAddress, nftId, to);\\n    }\\n\\n    function _transferNft(\\n        address nftContract,\\n        uint256 nftId,\\n        address to\\n    ) private {\\n        IERC721(nftContract).safeTransferFrom(address(this), to, nftId);\\n    }\\n\\n    function _removeNftIdOfUser(address owner, uint256 nftId) private {\\n        for (uint256 i = 0; i < userNftIds[owner].length; i++) {\\n            if (userNftIds[owner][i] == nftId) {\\n                userNftIds[owner][i] = userNftIds[owner][\\n                    userNftIds[owner].length - 1\\n                ];\\n                userNftIds[owner].pop();\\n                return;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getStakedNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"returnNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"returnNftToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"returnNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"returnSpecifiedNftToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress_\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardStartTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setRewardStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stakeEnabled_\",\"type\":\"bool\"}],\"name\":\"setStakeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNftIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TsubasaStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000003b363eba41aaab000000000000000000000000503d73d0008b97ad1516845ef73265e77e6d498f0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}