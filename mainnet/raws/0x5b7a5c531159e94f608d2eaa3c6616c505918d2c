{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ninterface ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Distribution {\r\n  using SafeMath for uint256;\r\n\r\n  enum State {\r\n    AwaitingTokens,\r\n    DistributingNormally,\r\n    DistributingProRata,\r\n    Done\r\n  }\r\n \r\n  address admin;\r\n  ERC20 tokenContract;\r\n  State public state;\r\n  uint256 actualTotalTokens;\r\n  uint256 tokensTransferred;\r\n\r\n  bytes32[] contributionHashes;\r\n  uint256 expectedTotalTokens;\r\n\r\n  function Distribution(address _admin, ERC20 _tokenContract,\r\n                        bytes32[] _contributionHashes, uint256 _expectedTotalTokens) public {\r\n    expectedTotalTokens = _expectedTotalTokens;\r\n    contributionHashes = _contributionHashes;\r\n    tokenContract = _tokenContract;\r\n    admin = _admin;\r\n\r\n    state = State.AwaitingTokens;\r\n  }\r\n\r\n  function _handleTokensReceived(uint256 totalTokens) internal {\r\n    require(state == State.AwaitingTokens);\r\n    require(totalTokens > 0);\r\n\r\n    tokensTransferred = 0;\r\n    if (totalTokens == expectedTotalTokens) {\r\n      state = State.DistributingNormally;\r\n    } else {\r\n      actualTotalTokens = totalTokens;\r\n      state = State.DistributingProRata;\r\n    }\r\n  }\r\n\r\n  function handleTokensReceived() public {\r\n    _handleTokensReceived(tokenContract.balanceOf(this));\r\n  }\r\n\r\n  function tokenFallback(address /*_from*/, uint _value, bytes /*_data*/) public {\r\n    require(msg.sender == address(tokenContract));\r\n    _handleTokensReceived(_value);\r\n  }\r\n\r\n  function _numTokensForContributor(uint256 contributorExpectedTokens,\r\n                                    uint256 _tokensTransferred, State _state)\r\n      internal view returns (uint256) {\r\n    if (_state == State.DistributingNormally) {\r\n      return contributorExpectedTokens;\r\n    } else if (_state == State.DistributingProRata) {\r\n      uint256 tokens = actualTotalTokens.mul(contributorExpectedTokens) / expectedTotalTokens;\r\n\r\n      // Handle roundoff on last contributor.\r\n      uint256 tokensRemaining = actualTotalTokens - _tokensTransferred;\r\n      if (tokens < tokensRemaining) {\r\n        return tokens;\r\n      } else {\r\n        return tokensRemaining;\r\n      }\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  function doDistributionRange(uint256 start, address[] contributors,\r\n                               uint256[] contributorExpectedTokens) public {\r\n    require(contributors.length == contributorExpectedTokens.length);\r\n\r\n    uint256 tokensTransferredSoFar = tokensTransferred;\r\n    uint256 end = start + contributors.length;\r\n    State _state = state;\r\n    for (uint256 i = start; i < end; ++i) {\r\n      address contributor = contributors[i];\r\n      uint256 expectedTokens = contributorExpectedTokens[i];\r\n      require(contributionHashes[i] == keccak256(contributor, expectedTokens));\r\n      contributionHashes[i] = 0x00000000000000000000000000000000;\r\n\r\n      uint256 numTokens = _numTokensForContributor(expectedTokens, tokensTransferredSoFar, _state);\r\n      tokensTransferredSoFar += numTokens;\r\n      require(tokenContract.transfer(contributor, numTokens));\r\n    }\r\n\r\n    tokensTransferred = tokensTransferredSoFar;\r\n    if (tokensTransferred == actualTotalTokens) {\r\n      state = State.Done;\r\n    }\r\n  }\r\n\r\n  function numTokensForContributor(uint256 contributorExpectedTokens)\r\n      public view returns (uint256) {\r\n    return _numTokensForContributor(contributorExpectedTokens, tokensTransferred, state);\r\n  }\r\n\r\n  function temporaryEscapeHatch(address to, uint256 value, bytes data) public {\r\n    require(msg.sender == admin);\r\n    require(to.call.value(value)(data));\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256[]\"}],\"name\":\"doDistributionRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributorExpectedTokens\",\"type\":\"uint256\"}],\"name\":\"numTokensForContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"temporaryEscapeHatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"handleTokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_contributionHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_expectedTotalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "Distribution", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002280bb17b6dee634e180a577cc1d97693ab4d2e6000000000000000000000000d53370acf66044910bb49cbcfe8f3cd020337f6000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000002c47d9d62d8692bc8dbea9000000000000000000000000000000000000000000000000000000000000003746f379eea22e3ea058545fb11fac8a9aa3f3719f74e8e8c7474c3d62f405659eeccb753b5db94c006f1c1c321085ea7f215d730e35afac5c4ef83ac3ed6f57e43953b768ebf93dca145bc8989232fc4afa9f8b8fdd12fc8800ef023599eb3da2448bc63235430ff44704a128413c1b1959fca0e838277c51f1454faa7bda03e7aa42e9b35c95ac66b382acb96632cc8e7023a37f7ed107489ca551fb5422b939bd0554551d0cfe4063172105eb152366a7050c94ada4f2cab0bca003c4f47bde13252fdc0a11f7ae79e03a3f0a4f802e9789a3e716293768c48cd47cc515108e9472feffb2869511b077f679fd087a7aa24bf929025063be08331d0055cd1f29d3d8970387f36bf0ccc0269df8f294de6f95c521e2fa1adfec39d32680548226bc4f7fc86f809ca54c9c883411a0e70ce2baa435fb367f7b6d9cf9ec98815fe52ff58099aeb0e700d0933942ab96e7c5f485381a8420edb6a55d751a392622f29032f337a9946303e4e76ba3b21caa800bb4e839da53f7b1255938d0acc0eff73799cf542ec73e9949ff5221085252c6528825632b21e285d08885f74bbc34224f650d3d5001382fde23c6636d0c290df432f34a6aabe3f4a44ae65a821adce748b2efeaa6a5594fcc6c1e026eb0d424da261eb9b60d59801de22da173290b4941ce51151a49f7e38776c7833cc6d59b37a3b8cc7da387a9f45833aabd494ab7e2d93113fffa0e9fcff049b3fbbed2ceb2c9367d9cd49ce14650eefafb07e2fa1a6d6e63be17af190c421898920c86c6d76aefe28b9d0496f7c7d631f0f6b8148d9cbc3e5e069bcc62978afb3306a4e657f9d58fcdde1b72d1406d5491f0ea187ededc657de6b3f47fd8a01d620478ec6b6c6beea415db2b94e0eef876dbf9543c40efe4ec5441ef9f480c885df87e4493870596a7a1fcab322fd04813a39a8c7f696960e0cc612903498b1be5f2dad438b699ccdda91fcb03b201c25a1c2f7a6a8d6e05f5c85c7e987e895556e3a4ce120c791f5f542911e91ec64fd3548cd68cd8001de7338137a44fb7e221c5009432592067446d6b8e2ec16052a88ad1b495dd3af8133e8d0a703c1e6bbf78540d6ddc2e01655e59c1a1f3dab81097bb8e29b5be6f90986db6d7c6bbfb61075b3e22aee114e72808d07f1dad7a55701aea8f8ea7d36ae9733dbb86cc76dd7e418e5a52ced3a25040472ed6ef70a5555f733343980a66ebe93900ffd3051900c84e48ff4d8e611aa7f3abbe41a0e1f2332fa93d33e2ec8538a9a96da097d753473c835c673587e3fb54c8601b896aa00bfff481ea706e72ac967d550b2f3b54213a2c91eee37e4f532b75e96dce23eeb22ea6a5e2e3b8b25d0024f25b0fb05902201eacf5c29462d4e16d67749eaf80e68817633d2df3e36bb3d280d2477b7e31146a5e93a755f71899f55999017792128e8c05aa968732117b6d81456ccac27449367a5f3e7d4f5af6684c0e3210a8a80b30f4ee5b11a9416f9544e22e6498f50806e855c9879d030053d2860e499d3866c1f84258483c8a02e7d07f1faed017f5c214f009a0e66b5b703c668a399d07fd99404caa69cbb696d38f8bebbab7ad0399a53a20f111e7cd0931a727cf7f640e1aee7289b61229043a4f1edef6f8485dd751c706e481be48167b8e926b46e3e0fc1d4839163c35706b83b700db31ccfba2f26ce915811236fff7a3cee0d87efa09e5836dbe86debec2e8b27532193dd2ad0128122026a96773b040e9b7434fcf131c508d83ffd071d2e3063267db8fb658be4cb0d312f6bf134f03663bed807bdeb9f6752213c39388324e8fc39de1db243f080b5f25828bde0f76cfa63979c18c15ba5ba53bb8d6dd4fc7d0b495cb2d07cbe4c5a259db3fe0f39c718dcc4d66eb85cc64231f74e3fb00a830cb95805bd296966c1b7b9298cbe7160080f4d21bde199af6f0f96780c9c2edd15eac80d0f2ca1060d637fd682ae8f626145be16faa26c42c2282eeab7a87e14efce79b9f6ee23a80eeb3e442a7b23d0ab5980eb920e5ab8121d560fe957e72e0645ec4ba4da172dbcdd0496341d1bf8692233deac9513ba2fae31740eafd2854c40dc3b040ef1053be2b0f2d3646cda650b64f7983aba5610dc4f33b1633a02bf90a6cc18a61ec374e34c182e85a20c9c482da3e6eebd3c0e625b797004544486d5d219067add44b6bbe63fe6677d16db15d22f0d7538d80ae9f2aef8bc4c347f63c1ca6a7048627be02d9c621e5aa40df51dd5f122100cd427934506cec27fcbca6b8022715eb0054ad3e1e2c36cbe0d5fdb6c028f095442f1480546925fb78e5b6804289004baa46b4926699f941a93a1f5ae4e62ae903f4f300c886771f534efb48e5f6e6ba79b764a42f6cea65af342a84ef27a70b93f15769a9c912469f5aac01c18a890311030f2c0068ed100deca6a10c4a582e81509c6d1e9520edcf1e1945edafac174c9bc1485e50a59c9838ad6be7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://49701282cc8f8710b2ed9e720a3bb8ea573456b6a40d4f373ec219041525d532"}]}