{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/CvxCrvStakingHelper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IRewardStakingImitator {\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract CvxCrvStakingHelper is IRewardStakingImitator {\\n    address public immutable allocator;\\n    IRewardStaking public immutable staking;\\n    IERC20 public immutable cc;\\n    IERC20 public immutable crv;\\n    IERC20 public immutable tricrv;\\n    IERC20 public immutable cvx;\\n\\n    constructor() {\\n        allocator = 0x2d643Df5De4e9Ba063760d475BEAa62821c71681;\\n        staking = IRewardStaking(0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e);\\n        cc = IERC20(0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\\n        crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n        tricrv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n        cvx = IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    }\\n\\n    function getReward(address, bool _claimExtras) external {\\n        if (staking.earned(address(this)) > 0)\\n            staking.getReward(address(this), _claimExtras);\\n\\n        if (staking.earned(allocator) > 0)\\n            staking.getReward(allocator, _claimExtras);\\n\\n        _returnAll();\\n    }\\n\\n    function stake(uint256) external {\\n        if (msg.sender == allocator) return;\\n\\n        uint256 bal = cc.balanceOf(address(this));\\n\\n        if (bal > 0) {\\n            cc.approve(address(staking), bal);\\n            staking.stake(bal);\\n        }\\n    }\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external {\\n        withdraw(amount, claim);\\n    }\\n\\n    function withdraw(uint256 amount, bool) public {\\n        require(msg.sender == allocator);\\n\\n        if (amount == 1)\\n            staking.withdraw(staking.balanceOf(address(this)), true);\\n        else staking.withdraw(amount, true);\\n\\n        _returnAll();\\n    }\\n\\n    function earned(address) external view returns (uint256) {\\n        return staking.earned(address(this));\\n    }\\n\\n    function balanceOf(address) external pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _returnAll() internal {\\n        uint256 bal = crv.balanceOf(address(this));\\n        if (bal > 0) crv.transfer(allocator, bal);\\n        bal = cc.balanceOf(address(this));\\n        if (bal > 0) cc.transfer(allocator, bal);\\n        bal = tricrv.balanceOf(address(this));\\n        if (bal > 0) tricrv.transfer(allocator, bal);\\n        bal = cvx.balanceOf(address(this));\\n        if (bal > 0) cvx.transfer(allocator, bal);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"test-utils/=lib/test-utils/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IRewardStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tricrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CvxCrvStakingHelper", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}