{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FingerprintsV1.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IFingerprints.sol\\\";\\nimport \\\"./interfaces/IFingerprints.sol\\\";\\nimport \\\"./libraries/Metadata.sol\\\";\\n\\ncontract FingerprintsV1 is IFingerprints, Ownable, IERC165 {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _idCounter;\\n\\n    /// @dev \\\"MODA-<ChainID>-<FingerprintVersion>-\\\"\\n    string private constant MODA_ID_PREFACE = \\\"MODA-1-1-\\\";\\n\\n    ///@dev ArtistReleases => is a list of NFTs that are registered for Fingerprints\\n    mapping(address => bool) private _authorizedReleases;\\n\\n    ///@dev Fingerprints => a list of addresses for registered fingerprint versions\\n    mapping(address => bool) private _authorizedFingerprints;\\n\\n    /// @dev MODA ID => Metadata\\n    mapping(string => Metadata.Meta) internal _metadata;\\n\\n    /// @dev MODA ID => x values in an array to iterate over\\n    mapping(string => uint32[]) public x_array;\\n\\n    /// @dev MODA ID => x => array of y\\n    mapping(string => mapping(uint32 => uint32[])) public y_map;\\n\\n    event FingerprintCreated(address indexed creator, string indexed modaId, string indexed song);\\n    event ArtistReleasesRegistered(address indexed artist, address indexed artistReleases, bool isRegistered);\\n    event FingerprintsReleasesRegistered(address indexed fingerprints, bool isRegistered);\\n\\n    function createFingerprint(\\n        address creator,\\n        string memory creatorName,\\n        address artist,\\n        string memory artistName,\\n        string memory uri,\\n        string memory title,\\n        uint16 x_shape,\\n        uint16 y_shape\\n    ) public onlyOwner {\\n        _idCounter.increment();\\n        string memory modaId = string(abi.encodePacked(MODA_ID_PREFACE, Strings.toString(_idCounter.current())));\\n        require(_metadata[modaId].creator == address(0), \\\"Fingerprint already exists\\\");\\n        require(address(0) != creator, \\\"creator cannot be 0x0\\\");\\n        require(address(0) != artist, \\\"artist cannot be 0x0\\\");\\n        require(x_shape > 0 && y_shape > 0, \\\"x and y shapes cannot be 0\\\");\\n\\n        _metadata[modaId].created = block.timestamp;\\n        _metadata[modaId].creator = creator;\\n        _metadata[modaId].creatorName = creatorName;\\n        _metadata[modaId].artist = artist;\\n        _metadata[modaId].artistName = artistName;\\n        _metadata[modaId].title = title;\\n        _metadata[modaId].x_shape = x_shape;\\n        _metadata[modaId].y_shape = y_shape;\\n        _metadata[modaId].uri = uri;\\n\\n        emit FingerprintCreated(creator, modaId, title);\\n    }\\n\\n    function setURI(string memory modaId, string memory uri) public onlyOwner {\\n        _metadata[modaId].uri = uri;\\n    }\\n\\n    /// @dev Registration for official ArtistReleases that are recognized by MODA. The event emitted serves as a way for client applications to find all contracts and filter by creator\\n    /// @param artistReleases The address of the NFT contract deployed by MODA\\n    /// @param artist The address of the artist for a given ArtistReleases contract\\n    /// @param isRegistered The state of registration\\n    function registerArtistReleases(\\n        address artistReleases,\\n        address artist,\\n        bool isRegistered\\n    ) public onlyOwner {\\n        _authorizedReleases[artistReleases] = isRegistered;\\n        emit ArtistReleasesRegistered(artistReleases, artist, isRegistered);\\n    }\\n\\n    /// @dev Registration for official Fingerprint contracts. Used to validate fingerprint contracts in ArtistReleases\\n    /// @param fingerprints The address of the NFT contract deployed by MODA\\n    /// @param isRegistered The state of registration\\n    function registerFingerprint(address fingerprints, bool isRegistered) public onlyOwner {\\n        _authorizedFingerprints[fingerprints] = isRegistered;\\n        emit FingerprintsReleasesRegistered(fingerprints, isRegistered);\\n    }\\n\\n    /// @dev Function to check if a ArtistReleases contract is registered\\n    /// @param artistReleases Address of a ArtistReleases contract\\n    /// @return bool\\n    function isAuthorizedArtistRelease(address artistReleases) public view returns (bool) {\\n        return _authorizedReleases[artistReleases];\\n    }\\n\\n    function setData(\\n        string memory modaId,\\n        uint32[] memory x,\\n        uint32[][] memory y\\n    ) public onlyOwner {\\n        _setData(modaId, x, y);\\n    }\\n\\n    function _setData(\\n        string memory modaId,\\n        uint32[] memory x,\\n        uint32[][] memory y\\n    ) internal virtual {\\n        require(x.length == y.length, \\\"x and y must have the same length\\\");\\n\\n        for (uint256 i = 0; i < x.length; i++) {\\n            uint32 _x_value = x[i];\\n            require(y_map[modaId][_x_value].length == 0, \\\"x value already exists\\\");\\n            x_array[modaId].push(_x_value);\\n            y_map[modaId][_x_value] = y[i];\\n\\n            _metadata[modaId].pointCount += y[i].length;\\n        }\\n    }\\n\\n    /// @inheritdoc\\tIFingerprints\\n    function getPoint(string memory modaId, uint32 index) external view override returns (uint32 x, uint32 y) {\\n        uint256 count;\\n        for (uint32 i = 0; i < x_array[modaId].length; i++) {\\n            uint32[] memory _y = y_map[modaId][x_array[modaId][i]];\\n\\n            for (uint32 j = 0; j < _y.length; j++) {\\n                if (count == index) {\\n                    return (x_array[modaId][i], _y[j]);\\n                }\\n                count++;\\n            }\\n        }\\n\\n        return (0, 0);\\n    }\\n\\n    /// @inheritdoc\\tIFingerprints\\n    function metadata(string memory modaId) external view override returns (Metadata.Meta memory) {\\n        return _metadata[modaId];\\n    }\\n\\n    function uniqueX(string memory modaId) public view returns (uint256) {\\n        return x_array[modaId].length;\\n    }\\n\\n    /// @inheritdoc\\tIERC165\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return interfaceId == type(IFingerprints).interfaceId;\\n    }\\n\\n    /// @inheritdoc\\tIFingerprints\\n    function hasValidFingerprintAddress(address fingerprints) external view override returns (bool) {\\n        return address(this) == fingerprints || _authorizedFingerprints[fingerprints];\\n    }\\n\\n    /// @inheritdoc\\tIFingerprints\\n    function hasMatchingArtist(\\n        string memory modaId,\\n        address artist,\\n        address artistReleases\\n    ) external view override returns (bool) {\\n        return _metadata[modaId].artist == artist && isAuthorizedArtistRelease(artistReleases);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFingerprints.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/Metadata.sol\\\";\\n\\ninterface IFingerprints {\\n    /**\\n     * @return Metadata.Meta\\n     * @param modaId MODA ID in the form of MODA-<ChainID>-<FingerprintVersion>-<FingerprintID>\\n     */\\n    function metadata(string memory modaId) external view returns (Metadata.Meta memory);\\n\\n    /**\\n     * @return x and y coordinates for a given point in fingerprint data\\n     * @param modaId MODA ID in the form of MODA-<ChainID>-<FingerprintVersion>-<FingerprintID>\\n     */\\n    function getPoint(string memory modaId, uint32 index) external view returns (uint32 x, uint32 y);\\n\\n    /**\\n     * @return true if the fingeprints address is registered\\n     * @param fingerprints Address of the fingerprints contract\\n     */\\n    function hasValidFingerprintAddress(address fingerprints) external view returns (bool);\\n\\n    /**\\n     * @dev Convenience function used to verify an artist wallet address matches the one in the metadata for a given hash\\n     * @return bool\\n     * @param modaId MODA ID in the form of MODA-<ChainID>-<FingerprintVersion>-<FingerprintID>\\n     * @param artist Artist wallet address or a contract address used on behalf of the artist\\n     */\\n    function hasMatchingArtist(\\n        string memory modaId,\\n        address artist,\\n        address artistReleases\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Metadata.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Metadata {\\n    struct Meta {\\n        uint256 created;\\n        address creator;\\n        string creatorName;\\n        address artist;\\n        string artistName;\\n        string title;\\n        uint16 x_shape;\\n        uint16 y_shape;\\n        uint256 pointCount;\\n        string uri;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"artistReleases\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"ArtistReleasesRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"song\",\"type\":\"string\"}],\"name\":\"FingerprintCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fingerprints\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"FingerprintsReleasesRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"x_shape\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y_shape\",\"type\":\"uint16\"}],\"name\":\"createFingerprint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getPoint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artistReleases\",\"type\":\"address\"}],\"name\":\"hasMatchingArtist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fingerprints\",\"type\":\"address\"}],\"name\":\"hasValidFingerprintAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistReleases\",\"type\":\"address\"}],\"name\":\"isAuthorizedArtistRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"}],\"name\":\"metadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"x_shape\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y_shape\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"pointCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Metadata.Meta\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistReleases\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"registerArtistReleases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fingerprints\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"registerFingerprint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"x\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"y\",\"type\":\"uint32[][]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modaId\",\"type\":\"string\"}],\"name\":\"uniqueX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x_array\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"y_map\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FingerprintsV1", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}