{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ChonkySet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IChonkySet} from \\\"./interface/IChonkySet.sol\\\";\\n\\ncontract ChonkySet is IChonkySet {\\n    function getSetId(uint256 _genome) external pure returns (uint256) {\\n        return _getSetId(_genome);\\n    }\\n\\n    function getSetFromGenome(uint256 _genome)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return _getSetFromId(_getSetId(_genome));\\n    }\\n\\n    function getSetFromId(uint256 _setId)\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return _getSetFromId(_setId);\\n    }\\n\\n    function _getSetId(uint256 _genome) internal pure returns (uint256) {\\n        if (_genome == 0x025e716c06d02c) return 1;\\n        if (_genome == 0x02c8cca802518f) return 2;\\n        if (_genome == 0x38e108027089) return 3;\\n        if (_genome == 0x51ad0c0d7065) return 4;\\n        if (_genome == 0x704e0ea50332) return 5;\\n        if (_genome == 0xec821004d052) return 6;\\n        if (_genome == 0x0398a060045048) return 7;\\n        if (_genome == 0x05836b2008d04c) return 8;\\n        if (_genome == 0x016daf22043029) return 9;\\n        if (_genome == 0x635b242d4063) return 10;\\n        if (_genome == 0x018ac826022089) return 11;\\n        if (_genome == 0x035edd5c064089) return 12;\\n        if (_genome == 0x0190002a000049) return 13;\\n        if (_genome == 0x01bcda2e0e8083) return 14;\\n        if (_genome == 0x028e4d4608d068) return 15;\\n        if (_genome == 0x0402a45842e02c) return 16;\\n        if (_genome == 0x04f16530657022) return 17;\\n        if (_genome == 0x013bd48e40f02e) return 18;\\n        if (_genome == 0xf15712212084) return 19;\\n        if (_genome == 0x01de0966016582) return 20;\\n        if (_genome == 0x03b39e3407208f) return 21;\\n        if (_genome == 0x0228cc3608304a) return 22;\\n        if (_genome == 0x01eb7338017065) return 23;\\n        if (_genome == 0x055e587a084032) return 24;\\n        if (_genome == 0x04a81aa20e3029) return 25;\\n        if (_genome == 0x8dca3a044022) return 26;\\n        if (_genome == 0x01504f2c07006c) return 27;\\n        if (_genome == 0x02d6224c10304a) return 28;\\n        if (_genome == 0x012d101e0b2084) return 29;\\n        if (_genome == 0x01c7954e028086) return 30;\\n        if (_genome == 0x251906042067) return 31;\\n        if (_genome == 0x059e125704d065) return 32;\\n        if (_genome == 0x0510008c000049) return 33;\\n        if (_genome == 0x038974520c408b) return 34;\\n        if (_genome == 0x0326df280cd086) return 35;\\n        if (_genome == 0x03ca296204d050) return 36;\\n        if (_genome == 0x03ff216a058092) return 37;\\n        if (_genome == 0x04545a76104062) return 38;\\n        if (_genome == 0x046a8078041067) return 39;\\n        if (_genome == 0x04b6d18200508f) return 40;\\n        if (_genome == 0x030ca68808d042) return 41;\\n        if (_genome == 0x168502c5802f) return 42;\\n        if (_genome == 0x052e28920ea089) return 43;\\n        if (_genome == 0x05380894022085) return 44;\\n        if (_genome == 0x054cea9808d023) return 45;\\n        if (_genome == 0x02ea56160eb08a) return 46;\\n        if (_genome == 0x0560009e02a082) return 47;\\n        if (_genome == 0x023f63680b0090) return 48;\\n        if (_genome == 0x057d6ca0044983) return 49;\\n        if (_genome == 0x01fc6ba6aa502d) return 50;\\n        if (_genome == 0x031b320a00104b) return 51;\\n        if (_genome == 0x05bd27480ea089) return 52;\\n        if (_genome == 0x40db5e110028) return 53;\\n        if (_genome == 0x02b157aa0eb021) return 54;\\n        if (_genome == 0x05dae8aca25192) return 55;\\n        if (_genome == 0x05e568ae048023) return 56;\\n        if (_genome == 0x011875b6129067) return 57;\\n\\n        return 0;\\n    }\\n\\n    function _getSetFromId(uint256 _id) internal pure returns (string memory) {\\n        if (_id == 1) return \\\"American Football\\\";\\n        if (_id == 2) return \\\"Angel\\\";\\n        if (_id == 3) return \\\"Astronaut\\\";\\n        if (_id == 4) return \\\"Baron Samedi\\\";\\n        if (_id == 5) return \\\"Bee\\\";\\n        if (_id == 6) return \\\"Black Kabuto\\\";\\n        if (_id == 7) return \\\"Blue Ninja\\\";\\n        if (_id == 8) return \\\"Bubble Tea\\\";\\n        if (_id == 9) return \\\"Captain\\\";\\n        if (_id == 10) return \\\"Caveman\\\";\\n        if (_id == 11) return \\\"Chef\\\";\\n        if (_id == 12) return \\\"Chonky Plant\\\";\\n        if (_id == 13) return \\\"Cloth Monster\\\";\\n        if (_id == 14) return \\\"Cowboy\\\";\\n        if (_id == 15) return \\\"Crazy Scientist\\\";\\n        if (_id == 16) return \\\"Cyber Hacker\\\";\\n        if (_id == 17) return \\\"Cyberpunk\\\";\\n        if (_id == 18) return \\\"Cyborg\\\";\\n        if (_id == 19) return \\\"Dark Magician\\\";\\n        if (_id == 20) return \\\"Devil\\\";\\n        if (_id == 21) return \\\"Diver\\\";\\n        if (_id == 22) return \\\"Doraemon\\\";\\n        if (_id == 23) return \\\"Dracula\\\";\\n        if (_id == 24) return \\\"Ese Sombrero\\\";\\n        if (_id == 25) return \\\"Gentleman\\\";\\n        if (_id == 26) return \\\"Golden Tooth\\\";\\n        if (_id == 27) return \\\"Jack-O-Lantern\\\";\\n        if (_id == 28) return \\\"Japanese Drummer\\\";\\n        if (_id == 29) return \\\"Jester\\\";\\n        if (_id == 30) return \\\"King\\\";\\n        if (_id == 31) return \\\"Lake Monster\\\";\\n        if (_id == 32) return \\\"Luffy\\\";\\n        if (_id == 33) return \\\"Mr Roboto\\\";\\n        if (_id == 34) return \\\"Mushroom Guy\\\";\\n        if (_id == 35) return \\\"New Year Outfit\\\";\\n        if (_id == 36) return \\\"Old Lady\\\";\\n        if (_id == 37) return \\\"Pharaoh\\\";\\n        if (_id == 38) return \\\"Pirate\\\";\\n        if (_id == 39) return \\\"Plague Doctor\\\";\\n        if (_id == 40) return \\\"Rainbow Love\\\";\\n        if (_id == 41) return \\\"Red Samurai\\\";\\n        if (_id == 42) return \\\"Retro\\\";\\n        if (_id == 43) return \\\"Roman\\\";\\n        if (_id == 44) return \\\"Safari Hunter\\\";\\n        if (_id == 45) return \\\"Sherlock\\\";\\n        if (_id == 46) return \\\"Snow Dude\\\";\\n        if (_id == 47) return \\\"Sparta\\\";\\n        if (_id == 48) return \\\"Spicy Man\\\";\\n        if (_id == 49) return \\\"Steampunk\\\";\\n        if (_id == 50) return \\\"Swimmer\\\";\\n        if (_id == 51) return \\\"Tanuki\\\";\\n        if (_id == 52) return \\\"Tin Man\\\";\\n        if (_id == 53) return \\\"Tired Dad\\\";\\n        if (_id == 54) return \\\"Tron Boy\\\";\\n        if (_id == 55) return \\\"Valkyrie\\\";\\n        if (_id == 56) return \\\"Viking\\\";\\n        if (_id == 57) return \\\"Zombie\\\";\\n\\n        return \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChonkySet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IChonkySet {\\n    function getSetId(uint256 _genome) external pure returns (uint256);\\n\\n    function getSetFromGenome(uint256 _genome)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    function getSetFromId(uint256 _setId) external pure returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_genome\",\"type\":\"uint256\"}],\"name\":\"getSetFromGenome\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"getSetFromId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_genome\",\"type\":\"uint256\"}],\"name\":\"getSetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ChonkySet", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}