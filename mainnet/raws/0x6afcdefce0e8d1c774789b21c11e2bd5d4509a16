{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"data_3DABFL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n//3DABFL data.\\n\\nimport \\\"./Strings.sol\\\";\\n\\n\\nabstract contract data_3DABFL{\\n    string[] private sports = [\\n        \\\"\\\\\\u00270 -0.5 0 -0.5 0 0.5 0 1 0 -0.5 0 1.57 0 -0.5 0 -0.5\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270 -0.5 0 0.5 0 -0.5 0 1 0 0.5 0 1.57 0 -0.5 0 0.5\\\\\\u0027\\\"\\n    ];\\n    string[] private size = [\\n        \\\"\\\\\\u00270.2 2.0 0.2\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.4 0.3 0.5\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.03 0.6 0.03\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.03 0.6 0.03\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.3 0.03 0.03\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.3 0.03 0.03\\\\\\u0027\\\",\\n        \\\"\\\\\\u00273 1 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00273.2 0.3 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00273.2 0.3 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.6 0.2 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.8 1.0 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.5 0.2 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.2 1.2 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.2 0.6 0.01\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.75 0.75 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.3 0.3 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.3 0.3 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.3 0.3 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.2 0.8 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.5 0.5 0.02\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.5 0.5 0.02\\\\\\u0027\\\"\\n    ];\\n    string[] private XYZ = [\\n        \\\"\\\\\\u00270 0.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270 1.1 -0.1\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.1 1.8 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-0.1 1.8 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-0.25 2.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.25 2.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.7 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00272.2 1.65 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.9 1.35 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271 0.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.1 -0.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.1 -1.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.4 -1.8 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.0 -1.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.8 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.8 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.5 1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00272.3 0.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00272.9 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00270.7 -0.4 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u00271.5 -0.6 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.7 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-2.2 1.65 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.9 1.35 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1 0.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.1 -0.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.1 -1.1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.4 -1.8 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.0 -1.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-0.8 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.8 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.5 1 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-2.3 0.5 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-2.9 0.7 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-0.7 -0.4 0\\\\\\u0027\\\",\\n        \\\"\\\\\\u0027-1.5 -0.6 0\\\\\\u0027\\\"\\n    ];\\n\\n    using Strings for uint256;\\n    string internal _Sugar;\\n\\n    function R(string memory s) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(s)));\\n    }\\n\\n    function getDNA(uint256 tokenId) public view returns (string memory) {\\n        return\\n            string(\\n                \\n                    R(string(abi.encodePacked(_Sugar, tokenId.toString()))).toHexString()\\n\\n            );\\n    }\\n\\n    function getAttr1(uint256 tokenId) public view returns (bool ) {\\n        uint256 seed = R(string(abi.encodePacked(\\\"U\\\", getDNA(tokenId))));\\n        return bool(seed % 100 \\u003c 45);\\n    }\\n\\n    function getAttr2(uint256 tokenId) public view returns (bool ) {\\n        uint256 seed = R(string(abi.encodePacked(\\\"M\\\", getDNA(tokenId))));\\n        return bool(seed % 10 \\u003c 4);\\n    }\\n\\n    function getAttr3(uint256 tokenId) public view returns (bool) {\\n        uint256 seed = R(string(abi.encodePacked(\\\"D\\\", getDNA(tokenId))));\\n        return bool(seed % 10 \\u003c 3);\\n    }\\n    function getColor(uint256 tokenId , uint256 _x) public view returns (string memory) {\\n        uint256 C1 = R(string(abi.encodePacked(\\\"R\\\", _x.toString() , getDNA(tokenId)))) % 100;\\n        uint256 C2 = R(string(abi.encodePacked(\\\"G\\\",_x.toString() , getDNA(tokenId)))) % 100;\\n        uint256 C3 = R(string(abi.encodePacked(\\\"B\\\",_x.toString() , getDNA(tokenId)))) % 100;\\n        return string(abi.encodePacked(\\\"\\\\\\u00270.\\\",C1.toString(),\\\" \\\",\\\"0.\\\",C2.toString(),\\\" \\\",\\\"0.\\\",C3.toString(),\\\"\\\\\\u0027\\\"));\\n    }\\n    function getHTML(uint256 tokenId,string memory _X3D)\\n        internal \\n        view\\n        returns (string memory)\\n    {\\n        require(tokenId \\u003e 0 \\u0026\\u0026 tokenId \\u003c 7001, \\\"Token ID invalid\\\");\\n        string[5] memory Ls1;\\n        string[7] memory Ls2;\\n        string[6] memory Ls3;\\n        uint8 y = 6;\\n        string memory M_1;\\n        string memory M_2;\\n        string memory M_3;\\n        string memory L_1;\\n        string memory L_2;\\n        string memory L_3;\\n        Ls1[0] = \\u0027\\u003chtml\\u003e\\u003chead\\u003e\\u003cmeta http-equiv=\\\\\\u0027X-UA-Compatible\\\\\\u0027 content=\\\\\\u0027IE=edge\\\\\\u0027 /\\u003e\\u003cscript type=\\\\\\u0027text/javascript\\\\\\u0027 src=\\u0027;\\n        Ls1[1] = _X3D;\\n        Ls1[2] = \\u0027\\u003e \\u003c/script\\u003e\\u003c/head\\u003e\\u003cbody\\u003e\\u003cx3d width=\\\\\\u0027100%\\\\\\u0027 height=\\\\\\u0027100%\\\\\\u0027\\u003e\\u003cscene\\u003e\\u003cbackground skyColor=\\u0027;\\n        Ls1[3] = getColor(tokenId , 1024);\\n        Ls1[4] = \\u0027\\u003e\\u003c/background\\u003e \\u0027;\\n        //Ls1[5] = \\\"Copy the following content into the HTML file and open it for viewing\\\";\\n        Ls3[5] = \\u0027\\u003c/scene\\u003e\\u003c/x3d\\u003e\\u003c/body\\u003e\\u003c/html\\u003e \\u0027;\\n\\n        Ls2[0] = \\u0027\\u003ctransform translation=\\u0027;\\n        Ls2[2] = \\u0027 visible=\\\\\\u0027true\\\\\\u0027\\u003e\\u003cshape\\u003e\\u003cappearance\\u003e\\u003cmaterial diffuseColor=\\u0027;\\n        Ls2[4] = \\u0027\\u003e\\u003c/material\\u003e\\u003c/appearance\\u003e\\u003cBox size=\\u0027;\\n        Ls2[6] = \\u0027\\u003e\\u003c/Box\\u003e\\u003c/shape\\u003e\\u003c/transform\\u003e\\u0027;\\n\\n        Ls3[0] = \\u0027\\u003ctransform DEF=\\u0027;\\n        Ls3[1] = \\u0027 \\u003e  \\u0027;\\n        Ls3[2] = \\u0027 \\u003c/transform\\u003e\\u003ctimeSensor DEF=\\\\\\u0027Clock\\\\\\u0027 cycleInterval=\\\\\\u00272.0\\\\\\u0027 loop=\\\\\\u0027true\\\\\\u0027\\u003e\\u003c/timeSensor\\u003e\\u003cOrientationInterpolator DEF=\\\\\\u0027ColumnPath\\\\\\u0027 key=\\\\\\u00270.0 0.20 0.6 1.0\\\\\\u0027 keyValue=\\u0027;\\n        Ls3[3] = \\u0027\\u003e\\u003c/OrientationInterpolator\\u003e\\u003cRoute fromNode=\\\\\\u0027Clock\\\\\\u0027 fromField=\\\\\\u0027fraction_changed\\\\\\u0027 toNode=\\\\\\u0027ColumnPath\\\\\\u0027 toField=\\\\\\u0027set_fraction\\\\\\u0027\\u003e\\u003c/Route\\u003e\\u003cRoute fromNode=\\\\\\u0027ColumnPath\\\\\\u0027 fromField=\\\\\\u0027value_changed\\\\\\u0027 toNode=\\u0027;\\n        Ls3[4] = \\u0027 toField=\\\\\\u0027set_rotation\\\\\\u0027\\u003e\\u003c/Route\\u003e\\u0027;\\n        for (uint8 i = 0; i \\u003c 36; i++) {\\n            Ls2[1]  = XYZ[i];\\n            Ls2[3] = getColor(tokenId , i);\\n            if (i\\u003c6){\\n                Ls2[5] = size[i];\\n                M_1 = string(abi.encodePacked(M_1,Ls2[0],Ls2[1],Ls2[2]));\\n                M_1 = string(abi.encodePacked(M_1,Ls2[3],Ls2[4],Ls2[5],Ls2[6]));\\n            }else if(i\\u003c21){\\n                Ls2[5] = size[i];\\n                if(i==7){\\n                    if(getAttr1(tokenId)){\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_2 = string(abi.encodePacked(M_2,\\u0027 \\u0027));}\\n                }else if(i==12){\\n                    if(getAttr3(tokenId)){\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_2 = string(abi.encodePacked(M_2,\\u0027 \\u0027));}\\n                }else if(i==13){\\n                    if(getAttr2(tokenId)){\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_2 = string(abi.encodePacked(M_2,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_2 = string(abi.encodePacked(M_2,\\u0027 \\u0027));}\\n                }else{M_2 = string(abi.encodePacked(M_2,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                 M_2 = string(abi.encodePacked(M_2,Ls2[4],Ls2[5],Ls2[6]));}\\n            }else if(i\\u003e20){\\n                Ls2[5] = size[y];\\n                if(i==22){\\n                    if(getAttr1(tokenId)){\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_3 = string(abi.encodePacked(M_3,\\u0027 \\u0027));}\\n                }else if(i==27){\\n                    if(getAttr3(tokenId)){\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_3 = string(abi.encodePacked(M_3,\\u0027 \\u0027));}\\n                }else if(i==28){\\n                    if(getAttr2(tokenId)){\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[4],Ls2[5],Ls2[6]));\\n                    }else{M_3 = string(abi.encodePacked(M_3,\\u0027 \\u0027));}\\n                }else{  M_3 = string(abi.encodePacked(M_3,Ls2[0],Ls2[1],Ls2[2],Ls2[3]));\\n                        M_3 = string(abi.encodePacked(M_3,Ls2[4],Ls2[5],Ls2[6]));}\\n                y+=1;  \\n            }\\n            if (i==20){\\n                L_1 = string(abi.encodePacked(Ls3[0],\\\"wj\\\",Ls3[1],M_2,Ls3[2],sports[0],Ls3[3],\\\"wj\\\",Ls3[4]));\\n            }\\n            if(i==35){\\n                L_2 = string(abi.encodePacked(Ls3[0],\\\"cQ\\\",Ls3[1],M_3,Ls3[2],sports[1],Ls3[3],\\\"cQ\\\",Ls3[4]));\\n                L_3 = string(abi.encodePacked(Ls1[0],Ls1[1],Ls1[2],Ls1[3]));\\n                L_3 = string(abi.encodePacked(L_3,Ls1[4],M_1,L_1,L_2,Ls3[5]));\\n            }\\n        }\\n        return string(abi.encodePacked(\\\"Copy the following content into the HTML file and open it for viewing:,\\\",L_3));\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"NFT_3DABFL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/*\\n*3D animated butterfly on the chain -NFT.\\n*All 3D animation data has been uploaded on the chain.\\n*Get tokenURI Copy the following content into the HTML file and open it for viewing.\\n*We uploaded x3dom.js to IPFS, and at the same time ensured that the IPFS connection is valid, \\nthis contract has joined DAO, and the IPFS link of x3dom.js can be revision by voting on the chain.\\n*We look forward to more Ethereum NFTs that magically interact with other IPFS libraries.\\n*TG:t.me/NFT_3dabfl\\n*/\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./data_3DABFL.sol\\\";\\n\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata,data_3DABFL{\\n    using Address for address;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    //X3DOM.JS IPFS URL\\n    string public X3D;\\n\\n    address private Admin;\\n\\n    uint160 public totalSupply; \\n\\n    //Counting\\n    uint256 public X3DDAO;\\n\\n    uint public Dao;\\n\\n    \\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e bool) public mintLock;\\n\\n    mapping(uint256 =\\u003e mapping(address =\\u003e bool)) public DaoS;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory sugar_\\n    ) {\\n        \\n        _name = name_; //3D animated butterfly on the chain -NFT\\n        _symbol = symbol_; //3DABFL\\n        _Sugar = sugar_;\\n        Admin = _msgSender();\\n        X3D = \\\"https://ipfs.io/ipfs/QmZePfriotGLpzkeJgdqij4QwgNHuqxJjRfS16UDHM4Cqc\\\"; //X3Dom\\n        \\n    }\\n\\n    //vote\\n    function NFTDao() public {\\n        require(DaoS[X3DDAO][_msgSender()] == false, \\\"No right\\\");\\n        Dao += _balances[_msgSender()];\\n        DaoS[X3DDAO][_msgSender()] = true;\\n    }\\n\\n    //ReviseX3D ipfs url\\n    function ReviseX3D(string memory _X3D) public {\\n        if (totalSupply \\u003c 4000) {\\n            require(_msgSender() == Admin, \\\"Not an admin\\\");\\n            X3D = _X3D;\\n        } else if (_msgSender() == Admin \\u0026\\u0026 Dao \\u003e totalSupply/4) {\\n            X3D = _X3D;\\n        } else if (Dao \\u003e totalSupply/2 \\u0026\\u0026 _balances[_msgSender()] \\u003e 5) {\\n            X3D = _X3D;\\n            delete Dao;\\n            X3DDAO += 1;\\n        }\\n    }\\n\\n    function TransferADMIN(address Recipient) public  {\\n        require(_msgSender() == Admin, \\\"Not an admin\\\");\\n        Admin = Recipient;\\n    }\\n\\n\\n    //claim NFT\\n    function claim(uint256 tokenId) public {\\n        require(mintLock[_msgSender()] == false, \\\"Lock\\\");\\n        require(tokenId \\u003e 0 \\u0026\\u0026 tokenId \\u003c 6301, \\\"Token ID invalid\\\");\\n        mintLock[_msgSender()] = true;\\n        _safeMint(_msgSender(), tokenId);\\n    }\\n    //admin NFT\\n    function adminClaim(uint256 tokenId) public {\\n        require(tokenId \\u003e 6300 \\u0026\\u0026 tokenId \\u003c 7001, \\\"Token ID invalid\\\");\\n        _safeMint(Admin, tokenId);\\n    }\\n\\n    ////Get tokenURI Copy to HTML to open and enjoy.\\n    function tokenURI(uint256 tokenId) public view virtual override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"ERC721: tokenID is empty\\\");\\n        return getHTML(tokenId,X3D);\\n    }\\n\\n\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address owner = _owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        totalSupply += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sugar_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DaoS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_X3D\",\"type\":\"string\"}],\"name\":\"ReviseX3D\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"}],\"name\":\"TransferADMIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"X3D\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"X3DDAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttr1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttr2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttr3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDNA\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000022334420616e696d6174656420627574746572666c79206f6e2074686520636861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000633444142464c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006307833646f6d0000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://559103402b46cda9a277ce753b8187b65388fd65223ae334057b1086a19376f5"}]}