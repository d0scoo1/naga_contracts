{"status": "1", "message": "OK", "result": [{"SourceCode": "/// @title ClonesWithImmutableArgs\r\n/// @author wighawag, zefram.eth\r\n/// @notice Enables creating clone contracts with immutable args\r\nlibrary ClonesWithImmutableArgs {\r\n    error CreateFail();\r\n\r\n    /// @notice Creates a clone proxy of the implementation contract, with immutable args\r\n    /// @dev data cannot exceed 65535 bytes, since 2 bytes are used to store the data length\r\n    /// @param implementation The implementation contract to clone\r\n    /// @param data Encoded immutable args\r\n    /// @return instance The address of the created clone\r\n    function clone(address implementation, bytes memory data)\r\n        internal\r\n        returns (address payable instance)\r\n    {\r\n        // unrealistic for memory ptr or data length to exceed 256 bits\r\n        unchecked {\r\n            uint256 extraLength = data.length + 2; // +2 bytes for telling how much data there is appended to the call\r\n            uint256 creationSize = 0x41 + extraLength;\r\n            uint256 runSize = creationSize - 10;\r\n            uint256 dataPtr;\r\n            uint256 ptr;\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                ptr := mload(0x40)\r\n\r\n                // -------------------------------------------------------------------------------------------------------------\r\n                // CREATION (10 bytes)\r\n                // -------------------------------------------------------------------------------------------------------------\r\n\r\n                // 61 runtime  | PUSH2 runtime (r)     | r                       | \u2013\r\n                mstore(\r\n                    ptr,\r\n                    0x6100000000000000000000000000000000000000000000000000000000000000\r\n                )\r\n                mstore(add(ptr, 0x01), shl(240, runSize)) // size of the contract running bytecode (16 bits)\r\n\r\n                // creation size = 0a\r\n                // 3d          | RETURNDATASIZE        | 0 r                     | \u2013\r\n                // 81          | DUP2                  | r 0 r                   | \u2013\r\n                // 60 creation | PUSH1 creation (c)    | c r 0 r                 | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 c r 0 r               | \u2013\r\n                // 39          | CODECOPY              | 0 r                     | [0-runSize): runtime code\r\n                // f3          | RETURN                |                         | [0-runSize): runtime code\r\n\r\n                // -------------------------------------------------------------------------------------------------------------\r\n                // RUNTIME (55 bytes + extraLength)\r\n                // -------------------------------------------------------------------------------------------------------------\r\n\r\n                // 3d          | RETURNDATASIZE        | 0                       | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 0                     | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 0 0                   | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 0 0 0                 | \u2013\r\n                // 36          | CALLDATASIZE          | cds 0 0 0 0             | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | \u2013\r\n                // 3d          | RETURNDATASIZE        | 0 0 cds 0 0 0 0         | \u2013\r\n                // 37          | CALLDATACOPY          | 0 0 0 0                 | [0, cds) = calldata\r\n                // 61          | PUSH2 extra           | extra 0 0 0 0           | [0, cds) = calldata\r\n                mstore(\r\n                    add(ptr, 0x03),\r\n                    0x3d81600a3d39f33d3d3d3d363d3d376100000000000000000000000000000000\r\n                )\r\n                mstore(add(ptr, 0x13), shl(240, extraLength))\r\n\r\n                // 60 0x37     | PUSH1 0x37            | 0x37 extra 0 0 0 0      | [0, cds) = calldata // 0x37 (55) is runtime size - data\r\n                // 36          | CALLDATASIZE          | cds 0x37 extra 0 0 0 0  | [0, cds) = calldata\r\n                // 39          | CODECOPY              | 0 0 0 0                 | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 36          | CALLDATASIZE          | cds 0 0 0 0             | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 61 extra    | PUSH2 extra           | extra cds 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                mstore(\r\n                    add(ptr, 0x15),\r\n                    0x6037363936610000000000000000000000000000000000000000000000000000\r\n                )\r\n                mstore(add(ptr, 0x1b), shl(240, extraLength))\r\n\r\n                // 01          | ADD                   | cds+extra 0 0 0 0       | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 3d          | RETURNDATASIZE        | 0 cds 0 0 0 0           | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 73 addr     | PUSH20 0x123\u2026         | addr 0 cds 0 0 0 0      | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                mstore(\r\n                    add(ptr, 0x1d),\r\n                    0x013d730000000000000000000000000000000000000000000000000000000000\r\n                )\r\n                mstore(add(ptr, 0x20), shl(0x60, implementation))\r\n\r\n                // 5a          | GAS                   | gas addr 0 cds 0 0 0 0  | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // f4          | DELEGATECALL          | success 0 0             | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 3d          | RETURNDATASIZE        | rds success 0 0         | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 3d          | RETURNDATASIZE        | rds rds success 0 0     | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 93          | SWAP4                 | 0 rds success 0 rds     | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 80          | DUP1                  | 0 0 rds success 0 rds   | [0, cds) = calldata, [cds, cds+0x37) = extraData\r\n                // 3e          | RETURNDATACOPY        | success 0 rds           | [0, rds) = return data (there might be some irrelevant leftovers in memory [rds, cds+0x37) when rds < cds+0x37)\r\n                // 60 0x35     | PUSH1 0x35            | 0x35 sucess 0 rds       | [0, rds) = return data\r\n                // 57          | JUMPI                 | 0 rds                   | [0, rds) = return data\r\n                // fd          | REVERT                | \u2013                       | [0, rds) = return data\r\n                // 5b          | JUMPDEST              | 0 rds                   | [0, rds) = return data\r\n                // f3          | RETURN                | \u2013                       | [0, rds) = return data\r\n                mstore(\r\n                    add(ptr, 0x34),\r\n                    0x5af43d3d93803e603557fd5bf300000000000000000000000000000000000000\r\n                )\r\n            }\r\n\r\n            // -------------------------------------------------------------------------------------------------------------\r\n            // APPENDED DATA (Accessible from extcodecopy)\r\n            // (but also send as appended data to the delegatecall)\r\n            // -------------------------------------------------------------------------------------------------------------\r\n\r\n            extraLength -= 2;\r\n            uint256 counter = extraLength;\r\n            uint256 copyPtr = ptr + 0x41;\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                dataPtr := add(data, 32)\r\n            }\r\n            for (; counter >= 32; counter -= 32) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    mstore(copyPtr, mload(dataPtr))\r\n                }\r\n\r\n                copyPtr += 32;\r\n                dataPtr += 32;\r\n            }\r\n            uint256 mask = ~(256**(32 - counter) - 1);\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                mstore(copyPtr, and(mload(dataPtr), mask))\r\n            }\r\n            copyPtr += counter;\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                mstore(copyPtr, shl(240, extraLength))\r\n            }\r\n            // solhint-disable-next-line no-inline-assembly\r\n            assembly {\r\n                instance := create(0, ptr, creationSize)\r\n            }\r\n            if (instance == address(0)) {\r\n                revert CreateFail();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DumperFactory {\r\n  using ClonesWithImmutableArgs for address;\r\n  address public implementation;\r\n\r\n  constructor(address implementation_) {\r\n    implementation = implementation_;\r\n  }\r\n\r\n  // abi.encodePacked(param1, param2, ...)\r\n  function createClone(bytes calldata _data) external payable returns (address _clone) {\r\n    _clone = implementation.clone(_data);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreateFail\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_clone\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DumperFactory", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000999e7c687ff2593f481954a0ac7e7ac13bee9359", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0db9d71eb3a9be6c3e1cb580a1ef01696db2d95ec2a245f1923aaf1d5271f9d"}]}