{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/DoseVoucherRedeemer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport \\\"@animoca/ethereum-contracts-assets/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport \\\"@animoca/ethereum-contracts-assets/contracts/token/ERC1155/IERC1155InventoryBurnable.sol\\\";\\nimport \\\"@animoca/ethereum-contracts-core/contracts/utils/Recoverable.sol\\\";\\nimport \\\"@animoca/ethereum-contracts-core/contracts/lifecycle/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract DoseVoucherRedeemer is Recoverable, Pausable, ERC1155TokenReceiver{\\n    \\n    using ERC20Wrapper for IWrappedERC20;\\n    using SafeMath for uint256;\\n\\n    IERC1155InventoryBurnable public immutable vouchersContract;\\n    IWrappedERC20 public immutable tokenContract;\\n    address public tokenHolder;\\n\\n    mapping (uint256 => uint256) private _voucherTokenAmount;\\n\\n    /**\\n     * Constructor.\\n     * @param _vouchersContract the address of the vouchers contract.\\n     * @param _tokenContract the address of the ERC20 token contract.\\n     * @param _tokenHolder the address of the ERC20 token holder.\\n     */\\n    constructor(\\n        IERC1155InventoryBurnable _vouchersContract,\\n        IWrappedERC20 _tokenContract,\\n        address _tokenHolder\\n    ) Ownable(msg.sender) Pausable(true){\\n        vouchersContract = _vouchersContract;\\n        tokenContract = _tokenContract;\\n        tokenHolder = _tokenHolder;\\n    }\\n\\n    /**\\n     * Sets the ERC20 token value for voucher.\\n     * @dev Reverts if the sender is not the contract owner.\\n     * @param tokenIds the id of the voucher.\\n     * @param amounts value of the voucher in ERC20 token.\\n     */\\n    function setVoucherValues(uint256[] memory tokenIds, uint256[] memory amounts) external virtual{\\n        _requireOwnership(_msgSender());\\n        require(tokenIds.length == amounts.length, \\\"DoseVoucherRedeemer: invalid length of array\\\");\\n        for(uint256 i; i < tokenIds.length; ++i){\\n            uint256 amount = amounts[i];\\n            require(amount > 0, \\\"DoseVoucherRedeemer: invalid amount\\\");\\n            _voucherTokenAmount[tokenIds[i]] = amount;\\n        }\\n    }\\n\\n    /**\\n     * Gets the ERC20 token value for voucher.\\n     * @param tokenId the id of the voucher.\\n     */\\n    function getVoucherValue(uint256 tokenId) external view virtual returns (uint256){\\n        return _voucherTokenAmount[tokenId];\\n    }\\n\\n    /**\\n     * Validates the validity of the voucher and returns its value.\\n     * @dev Reverts if the voucher is not a valid voucher.\\n     * @param tokenId the id of the voucher.\\n     * @return the value of the voucher in ERC20 token.\\n     */\\n    function _voucherValue(uint256 tokenId) internal view virtual returns (uint256) {\\n        uint256 tokenValue = _voucherTokenAmount[tokenId];\\n        require(tokenValue > 0, \\\"DoseVoucherRedeemer: invalid voucher\\\");\\n        return tokenValue;\\n    }\\n\\n    /**\\n     * Sets the token holder address.\\n     * @dev Reverts if the sender is not the contract owner.\\n     * @param _tokenHolder the new address for the token holder.\\n     */\\n    function setTokenHolder(address _tokenHolder) external virtual {\\n        _requireOwnership(_msgSender());\\n        tokenHolder = _tokenHolder;\\n    }\\n\\n    /**\\n     * Pause the redeem function.\\n     * @dev Reverts if the sender is not the contract owner.\\n     */\\n    function pause() public{\\n        _requireOwnership(_msgSender());\\n        _pause();\\n    }\\n\\n    /**\\n     * Unpause the redeem function.\\n     * @dev Reverts if the sender is not the contract owner.\\n     */\\n    function unpause() public{\\n        _requireOwnership(_msgSender());\\n        _unpause();\\n    }\\n\\n    /**\\n     * Handle the receipt of a single ERC1155 token type.\\n     * @dev See {IERC1155TokenReceiver-onERC1155Received(address,address,uint256,uint256,bytes)}.\\n     */\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata /*data*/\\n    ) external virtual override returns (bytes4) {\\n        _requireNotPaused();\\n        require(msg.sender == address(vouchersContract), \\\"DoseVoucherRedeemer: wrong sender\\\");\\n        vouchersContract.burnFrom(address(this), id, value);\\n        uint256 tokenAmount = _voucherValue(id).mul(value);\\n        tokenContract.wrappedTransferFrom(tokenHolder, from, tokenAmount);\\n        return _ERC1155_RECEIVED;\\n    }\\n\\n    /**\\n     * Handle the receipt of multiple ERC1155 token types.\\n     * @dev See {IERC1155TokenReceiver-onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)}.\\n     */\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata /*data*/\\n    ) external virtual override returns (bytes4) {\\n        _requireNotPaused();\\n        require(msg.sender == address(vouchersContract), \\\"DoseVoucherRedeemer: wrong sender\\\");\\n        vouchersContract.batchBurnFrom(address(this), ids, values);\\n        uint256 tokenAmount;\\n        for (uint256 i; i != ids.length; ++i) {\\n            uint256 id = ids[i];\\n            tokenAmount = tokenAmount.add(_voucherValue(id).mul(values[i]));\\n        }\\n        tokenContract.wrappedTransferFrom(tokenHolder, from, tokenAmount);\\n        return _ERC1155_BATCH_RECEIVED;\\n    }\\n}\"\r\n    },\r\n    \"@animoca/ethereum-contracts-assets/contracts/token/ERC1155/ERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {IERC1155TokenReceiver} from \\\"./IERC1155TokenReceiver.sol\\\";\\nimport {IERC165} from \\\"@animoca/ethereum-contracts-core-1.1.1/contracts/introspection/IERC165.sol\\\";\\n\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, IERC165 {\\n    bytes4 private constant _ERC165_INTERFACE_ID = type(IERC165).interfaceId;\\n    bytes4 private constant _ERC1155_TOKEN_RECEIVER_INTERFACE_ID = type(IERC1155TokenReceiver).interfaceId;\\n\\n    // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\\n\\n    // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    bytes4 internal constant _ERC1155_REJECTED = 0xffffffff;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == _ERC165_INTERFACE_ID || interfaceId == _ERC1155_TOKEN_RECEIVER_INTERFACE_ID;\\n    }\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-assets/contracts/token/ERC1155/IERC1155InventoryBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @title ERC-1155 Inventory additional burning interface\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\\n */\\ninterface IERC1155InventoryBurnable {\\n    /**\\n     * Burns some token.\\n     * @dev Reverts if the sender is not approved.\\n     * @dev Reverts if `id` does not represent a token.\\n     * @dev Reverts if `id` represents a fungible token and `value` is 0.\\n     * @dev Reverts if `id` represents a fungible token and `value` is higher than `from`'s balance.\\n     * @dev Reverts if `id` represents a non-fungible token and `value` is not 1.\\n     * @dev Reverts if `id` represents a non-fungible token which is not owned by `from`.\\n     * @dev Emits an {IERC1155-TransferSingle} event.\\n     * @param from Address of the current token owner.\\n     * @param id Identifier of the token to burn.\\n     * @param value Amount of token to burn.\\n     */\\n    function burnFrom(\\n        address from,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * Burns multiple tokens.\\n     * @dev Reverts if `ids` and `values` have different lengths.\\n     * @dev Reverts if the sender is not approved.\\n     * @dev Reverts if one of `ids` does not represent a token.\\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is 0.\\n     * @dev Reverts if one of `ids` represents a fungible token and `value` is higher than `from`'s balance.\\n     * @dev Reverts if one of `ids` represents a non-fungible token and `value` is not 1.\\n     * @dev Reverts if one of `ids` represents a non-fungible token which is not owned by `from`.\\n     * @dev Emits an {IERC1155-TransferBatch} event.\\n     * @param from Address of the current tokens owner.\\n     * @param ids Identifiers of the tokens to burn.\\n     * @param values Amounts of tokens to burn.\\n     */\\n    function batchBurnFrom(\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/utils/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {ManagedIdentity} from \\\"../metatx/ManagedIdentity.sol\\\";\\nimport {Ownable} from \\\"../access/Ownable.sol\\\";\\nimport {IWrappedERC20, ERC20Wrapper} from \\\"./ERC20Wrapper.sol\\\";\\n\\nabstract contract Recoverable is ManagedIdentity, Ownable {\\n    using ERC20Wrapper for IWrappedERC20;\\n\\n    /**\\n     * Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n     * so that the extraction is limited to only amounts sent accidentally.\\n     * @dev Reverts if the sender is not the contract owner.\\n     * @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n     * @dev Reverts if one of `tokens` is does not implement the ERC20 transfer function.\\n     * @dev Reverts if one of the ERC20 transfers fail for any reason.\\n     * @param accounts the list of accounts to transfer the tokens to.\\n     * @param tokens the list of ERC20 token addresses.\\n     * @param amounts the list of token amounts to transfer.\\n     */\\n    function recoverERC20s(\\n        address[] calldata accounts,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external virtual {\\n        _requireOwnership(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recov: inconsistent arrays\\\");\\n        for (uint256 i = 0; i != length; ++i) {\\n            IWrappedERC20(tokens[i]).wrappedTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n     * so that the extraction is limited to only tokens sent accidentally.\\n     * @dev Reverts if the sender is not the contract owner.\\n     * @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n     * @dev Reverts if one of `contracts` is does not implement the ERC721 transferFrom function.\\n     * @dev Reverts if one of the ERC721 transfers fail for any reason.\\n     * @param accounts the list of accounts to transfer the tokens to.\\n     * @param contracts the list of ERC721 contract addresses.\\n     * @param tokenIds the list of token ids to transfer.\\n     */\\n    function recoverERC721s(\\n        address[] calldata accounts,\\n        address[] calldata contracts,\\n        uint256[] calldata tokenIds\\n    ) external virtual {\\n        _requireOwnership(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recov: inconsistent arrays\\\");\\n        for (uint256 i = 0; i != length; ++i) {\\n            IRecoverableERC721(contracts[i]).transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\\ninterface IRecoverableERC721 {\\n    /// See {IERC721-transferFrom(address,address,uint256)}\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {ManagedIdentity} from \\\"../metatx/ManagedIdentity.sol\\\";\\n\\n/**\\n * @dev Contract which allows children to implement pausability.\\n */\\nabstract contract Pausable is ManagedIdentity {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool public paused;\\n\\n    constructor(bool paused_) {\\n        paused = paused_;\\n    }\\n\\n    function _requireNotPaused() internal view {\\n        require(!paused, \\\"Pausable: paused\\\");\\n    }\\n\\n    function _requirePaused() internal view {\\n        require(paused, \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual {\\n        _requireNotPaused();\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual {\\n        _requirePaused();\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-assets/contracts/token/ERC1155/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @title ERC-1155 Multi Token Standard, token receiver\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n */\\ninterface IERC1155TokenReceiver {\\n    /**\\n     * @notice Handle the receipt of a single ERC1155 token type.\\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n     * This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     *  (i.e. 0xf23a6e61) to accept the transfer.\\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\\n     * @param from      The address which previously owned the token\\n     * @param id        The ID of the token being transferred\\n     * @param value     The amount of tokens being transferred\\n     * @param data      Additional data with no specified format\\n     * @return bytes4   `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Handle the receipt of multiple ERC1155 token types.\\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n     * This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     *  (i.e. 0xbc197c81) if to accept the transfer(s).\\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from      The address which previously owned the token\\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n     * @param data      Additional data with no specified format\\n     * @return          `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core-1.1.1/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/metatx/ManagedIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/*\\n * Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner.\\n */\\nabstract contract ManagedIdentity {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {ManagedIdentity} from \\\"../metatx/ManagedIdentity.sol\\\";\\nimport {IERC173} from \\\"./IERC173.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is ManagedIdentity, IERC173 {\\n    address internal _owner;\\n\\n    /**\\n     * Initializes the contract, setting the deployer as the initial owner.\\n     * @dev Emits an {IERC173-OwnershipTransferred(address,address)} event.\\n     */\\n    constructor(address owner_) {\\n        _owner = owner_;\\n        emit OwnershipTransferred(address(0), owner_);\\n    }\\n\\n    /**\\n     * Gets the address of the current contract owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * See {IERC173-transferOwnership(address)}\\n     * @dev Reverts if the sender is not the current contract owner.\\n     * @param newOwner the address of the new owner. Use the zero address to renounce the ownership.\\n     */\\n    function transferOwnership(address newOwner) public virtual override {\\n        _requireOwnership(_msgSender());\\n        _owner = newOwner;\\n        emit OwnershipTransferred(_owner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Reverts if `account` is not the contract owner.\\n     * @param account the account to test.\\n     */\\n    function _requireOwnership(address account) internal virtual {\\n        require(account == this.owner(), \\\"Ownable: not the owner\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/utils/ERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\nimport {AddressIsContract} from \\\"./types/AddressIsContract.sol\\\";\\n\\n/**\\n * @title ERC20Wrapper\\n * Wraps ERC20 functions to support non-standard implementations which do not return a bool value.\\n * Calls to the wrapped functions revert only if they throw or if they return false.\\n */\\nlibrary ERC20Wrapper {\\n    using AddressIsContract for address;\\n\\n    function wrappedTransfer(\\n        IWrappedERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function wrappedTransferFrom(\\n        IWrappedERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function wrappedApprove(\\n        IWrappedERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function _callWithOptionalReturnData(IWrappedERC20 token, bytes memory callData) internal {\\n        address target = address(token);\\n        require(target.isContract(), \\\"ERC20Wrapper: non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = target.call(callData);\\n        if (success) {\\n            if (data.length != 0) {\\n                require(abi.decode(data, (bool)), \\\"ERC20Wrapper: operation failed\\\");\\n            }\\n        } else {\\n            // revert using a standard revert message\\n            if (data.length == 0) {\\n                revert(\\\"ERC20Wrapper: operation failed\\\");\\n            }\\n\\n            // revert using the revert message coming from the call\\n            assembly {\\n                let size := mload(data)\\n                revert(add(32, data), size)\\n            }\\n        }\\n    }\\n}\\n\\ninterface IWrappedERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/access/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @title ERC-173 Contract Ownership Standard\\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n */\\ninterface IERC173 {\\n    /**\\n     * Event emited when ownership of a contract changes.\\n     * @param previousOwner the previous owner.\\n     * @param newOwner the new owner.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * Get the address of the owner\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * Set the address of the new owner of the contract\\n     * Set newOwner to address(0) to renounce any ownership.\\n     * @dev Emits an {OwnershipTransferred} event.\\n     * @param newOwner The address of the new owner of the contract. Using the zero address means renouncing ownership.\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@animoca/ethereum-contracts-core/contracts/utils/types/AddressIsContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Partially derived from OpenZeppelin:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/406c83649bd6169fc1b578e08506d78f0873b276/contracts/utils/Address.sol\\n\\npragma solidity >=0.7.6 <0.8.0;\\n\\n/**\\n * @dev Upgrades the address type to check if it is a contract.\\n */\\nlibrary AddressIsContract {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC1155InventoryBurnable\",\"name\":\"_vouchersContract\",\"type\":\"address\"},{\"internalType\":\"contract IWrappedERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getVoucherValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"setTokenHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setVoucherValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IWrappedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vouchersContract\",\"outputs\":[{\"internalType\":\"contract IERC1155InventoryBurnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DoseVoucherRedeemer", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000087a3747c9942d8351cc85aac2f94807b27a37c0d000000000000000000000000b31ef9e52d94d4120eb44fe1ddfde5b4654a6515000000000000000000000000b44ad99755f0d8bfce56db68a05b62158d35305e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}