{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract DreamX {\r\n\r\n    string public name = \"DreamX\";\r\n    \r\n    // create 2 state variables\r\n    address public Dream = 0x8b17feA54d85F61E71BdF161e920762898AC53da;\r\n\r\n    uint reward_rate;\r\n\r\n    struct farm_slot {\r\n        bool active;\r\n        uint balance;\r\n        uint deposit_time;\r\n        uint locked_time;\r\n        uint index;\r\n        address token;\r\n    }\r\n\r\n    struct farm_pool {\r\n        mapping(uint => uint) lock_multiplier;\r\n        mapping(address => uint) is_farming;\r\n        mapping(address => bool) has_farmed;\r\n        uint total_balance;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    address[] public farms;\r\n\r\n    mapping(address => mapping(uint => farm_slot)) public farming_unit;\r\n    mapping(address => uint[]) farmer_pools;\r\n    mapping(address => farm_pool) public token_pool;\r\n    mapping(address => uint) farm_id;\r\n    mapping(address => bool) public is_farmable;\r\n    mapping(address => uint) public last_tx;\r\n    mapping(address => mapping(uint => uint)) public lock_multiplier;\r\n    mapping(uint => bool) time_allowed;\r\n\r\n    mapping(address => bool) public is_auth;\r\n\r\n    uint256 cooldown_time = 10 seconds;\r\n\r\n    bool is_fixed_locking = true;\r\n    \r\n    IERC20 dream_reward;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        is_farmable[Dream] = false;\r\n        dream_reward = IERC20(Dream);\r\n\r\n    }\r\n\r\n    bool locked;\r\n\r\n    modifier safe() {\r\n        require (!locked, \"Guard\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    modifier cooldown() {\r\n        require(block.timestamp > last_tx[msg.sender] + cooldown_time, \"Calm down\");\r\n        _;\r\n        last_tx[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(owner==msg.sender || is_auth[msg.sender], \"403\");\r\n        _;\r\n    }\r\n    \r\n    function is_unlocked (uint id, address addy) public view returns(bool) {\r\n        return( (block.timestamp > farming_unit[addy][id].deposit_time + farming_unit[addy][id].locked_time) );\r\n    }\r\n\r\n\r\n    ///@notice Public farming functions\r\n\r\n    ///@dev Approve\r\n    function approveTokens() public {\r\n        bool approved = IERC20(Dream).approve(address(this), 2**256 - 1);\r\n        require(approved, \"Can't approve\");\r\n    }\r\n\r\n    ///@dev Deposit farmable tokens in the contract\r\n    function farmTokens(uint _amount, uint locking) public {\r\n        require(is_farmable[Dream], \"Farming not supported\");\r\n        if (is_fixed_locking) {\r\n            require(time_allowed[locking], \"Locking time not allowed\");\r\n        } else {\r\n            require(locking >= 1 days, \"Locking time not allowed\");\r\n        }\r\n        require(IERC20(Dream).allowance(msg.sender, address(this)) >= _amount, \"Allowance?\");\r\n\r\n        // Trasnfer farmable tokens to contract for farming\r\n        bool transferred = IERC20(Dream).transferFrom(msg.sender, address(this), _amount);\r\n        require(transferred, \"Not transferred\");\r\n\r\n        // Update the farming balance in mappings\r\n        farm_id[msg.sender]++;\r\n        uint id = farm_id[msg.sender];\r\n        farming_unit[msg.sender][id].locked_time = locking;\r\n        farming_unit[msg.sender][id].balance = farming_unit[msg.sender][id].balance + _amount;\r\n        farming_unit[msg.sender][id].deposit_time = block.timestamp;\r\n        farming_unit[msg.sender][id].token = Dream;\r\n        token_pool[Dream].total_balance += _amount;\r\n\r\n        // Add user to farms array if they haven't farmd already\r\n        if(token_pool[Dream].has_farmed[msg.sender]) {\r\n            token_pool[Dream].has_farmed[msg.sender] = true;\r\n        }\r\n\r\n        // Update farming status to track\r\n        token_pool[Dream].is_farming[msg.sender]++;\r\n        farmer_pools[msg.sender].push(id);\r\n        farming_unit[msg.sender][id].index = (farmer_pools[msg.sender].length)-1;\r\n    }\r\n\r\n\r\n     ///@dev Unfarm tokens (if not locked)\r\n     function unfarmTokens(uint id) public safe cooldown {\r\n        if (!is_auth[msg.sender]) {\r\n            require(is_unlocked(id, msg.sender), \"Locking time not finished\");\r\n        }\r\n\r\n        uint balance = _calculate_rewards(id, msg.sender);\r\n\r\n        // require the amount farms needs to be greater then 0\r\n        require(balance > 0, \"farming balance can not be 0\");\r\n    \r\n        // transfer dream tokens out of this contract to the msg.sender\r\n        dream_reward.transfer(msg.sender, farming_unit[msg.sender][id].balance);\r\n        dream_reward.transfer(msg.sender, balance);\r\n    \r\n        // reset farming balance map to 0\r\n        farming_unit[msg.sender][id].balance = 0;\r\n        farming_unit[msg.sender][id].active = false;\r\n        farming_unit[msg.sender][id].deposit_time = block.timestamp;\r\n        address token = farming_unit[msg.sender][id].token;\r\n\r\n        // update the farming status\r\n        token_pool[token].is_farming[msg.sender]--;\r\n\r\n        // delete farming pool id\r\n        delete farmer_pools[msg.sender][farming_unit[msg.sender][id].index];\r\n}\r\n\r\n    ///@dev Give rewards and clear the reward status    \r\n    function issueInterestToken(uint id) public safe cooldown {\r\n        require(is_unlocked(id, msg.sender), \"Locking time not finished\");\r\n        uint balance = _calculate_rewards(id, msg.sender);            \r\n        dream_reward.transfer(msg.sender, balance);\r\n        // reset the time counter so it is not double paid\r\n        farming_unit[msg.sender][id].deposit_time = block.timestamp;    \r\n        }\r\n\r\n    ///@dev return the general state of a pool\r\n    function get_pool() public view returns (uint) {\r\n        require(is_farmable[Dream], \"Not active\");\r\n        return(token_pool[Dream].total_balance);\r\n    }\r\n        \r\n        \r\n\r\n    ///@notice Private functions\r\n\r\n    ///@dev Helper to calculate rewards in a quick and lightweight way\r\n    function _calculate_rewards(uint id, address addy) public view returns (uint) {\r\n    \t// get the users farming balance in dream\r\n        uint delta_time = block.timestamp - farming_unit[addy][id].deposit_time; // - initial deposit\r\n        /// Rationale: balance*rate/100 gives the APY reward. Is multiplied by year/time passed that is written like that because solidity doesn't like floating numbers\r\n        uint locking_time = farming_unit[addy][id].locked_time;\r\n        uint updated_reward_rate = reward_rate + lock_multiplier[Dream][locking_time];\r\n        uint balance = (((farming_unit[addy][id].balance * updated_reward_rate) / 100) * ((delta_time * 1000000) / 365 days ))/1000000;\r\n        return balance;\r\n     }\r\n\r\n     ///@notice Control functions\r\n\r\n     function get_farmer_pools(address farmer) public view returns(uint[] memory) {\r\n         return(farmer_pools[farmer]);\r\n     }\r\n\r\n     function unstuck_tokens(address tkn) public authorized {\r\n         require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n         uint amount = IERC20(tkn).balanceOf(address(this));\r\n         IERC20(tkn).transfer(msg.sender, amount);\r\n     }\r\n\r\n     function set_time_allowed(uint time, bool booly) public authorized {\r\n         time_allowed[time] = booly;\r\n     }\r\n\r\n     function set_authorized(address addy, bool booly) public authorized {\r\n         is_auth[addy] = booly;\r\n     }\r\n\r\n     function set_farming_state(bool status) public authorized {\r\n         is_farmable[Dream] = status;\r\n     }\r\n\r\n     function get_farming_state() public view returns (bool) {\r\n         return is_farmable[Dream];\r\n     }\r\n\r\n     function get_reward_rate() public view returns (uint) {\r\n        return reward_rate;\r\n     }\r\n\r\n     function get_reward_rate_timed(uint time) public view returns (uint) {\r\n         uint reward_timed = reward_rate+lock_multiplier[Dream][time];\r\n         return reward_timed;\r\n     }\r\n\r\n    function set_reward_rate(uint rate) public authorized {\r\n        reward_rate = rate;\r\n    }\r\n\r\n     function set_dream(address token) public authorized {\r\n         Dream = token;\r\n         dream_reward = IERC20(Dream);\r\n     }  \r\n\r\n     function set_multiplier(uint time, uint multiplier) public authorized {\r\n         lock_multiplier[Dream][time] = multiplier;\r\n     }\r\n\r\n    function set_is_fixed_locking(bool fixed_locking) public authorized {\r\n        is_fixed_locking = fixed_locking;\r\n    }\r\n     \r\n     function get_multiplier(uint time) public view returns(uint) {\r\n         return lock_multiplier[Dream][time];\r\n     }\r\n\r\n\r\n    ///@notice time helpers\r\n\r\n     function get_1_day() public pure returns(uint) {\r\n         return(1 days);\r\n     }\r\n\r\n     function get_1_week() public pure returns(uint) {\r\n         return(7 days);\r\n     }\r\n\r\n     function get_1_month() public pure returns(uint) {\r\n         return(30 days);\r\n     }\r\n     \r\n     function get_3_months() public pure returns(uint) {\r\n         return(90 days);\r\n     }\r\n\r\n     function get_x_days(uint x) public pure returns(uint) {\r\n         return((1 days*x));\r\n     }\r\n    \r\n    function get_single_pool(uint id, address addy) public view returns (farm_slot memory) {\r\n        return(farming_unit[addy][id]);\r\n    }\r\n\r\n    function get_time_remaining(uint id, address addy) public view returns (uint) {\r\n        return(farming_unit[addy][id].deposit_time + farming_unit[addy][id].locked_time);\r\n    }\r\n\r\n    function get_pool_lock_time(uint id, address addy) public view returns (uint) {\r\n        return(farming_unit[addy][id].locked_time);\r\n    }\r\n    \r\n    function get_pool_balance(uint id, address addy) public view returns (uint) {\r\n        return(farming_unit[addy][id].balance);\r\n    }\r\n\r\n    function get_pool_details(uint id, address addy) public view returns (uint, uint) {\r\n      return(get_pool_balance(id, addy), get_time_remaining(id, addy));   \r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Dream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"_calculate_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locking\",\"type\":\"uint256\"}],\"name\":\"farmTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farming_unit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_1_day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_1_month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_1_week\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_3_months\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"get_farmer_pools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_farming_state\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"get_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_pool_details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_pool_lock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_reward_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"get_reward_rate_timed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_single_pool\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct DreamX.farm_slot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_time_remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"get_x_days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_farmable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"is_unlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"issueInterestToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_tx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lock_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_authorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"set_dream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_farming_state\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"fixed_locking\",\"type\":\"bool\"}],\"name\":\"set_is_fixed_locking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"set_multiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"set_reward_rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_time_allowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"token_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unfarmTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"unstuck_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DreamX", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e311ccafe615084a43ff0cc68f388fe14f4dba142cd57fe4f294a0643ca54fd"}]}