{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Top3Donators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Top3Donators is Ownable {\\r\\n    //the mapping itself holds all data which interacted and spend eth -> need to check, erc721 maybe already has this\\r\\n    mapping(address => uint256) s_mappedSpentAmount;\\r\\n\\r\\n    struct donators {\\r\\n        address donatorAddress;\\r\\n        uint256 donatorValue;\\r\\n    }\\r\\n\\r\\n    event topDonatorsUpdate(donators[3] newTop3Donators);\\r\\n    event donated(address, uint256);\\r\\n    event balanceWithdrawn(address, uint256);\\r\\n    event donationStateChanged(bool);\\r\\n\\r\\n    bool private s_donationState;\\r\\n    string private s_contractName;\\r\\n\\r\\n    donators[3] s_topDonators;\\r\\n\\r\\n    constructor(string memory _contractName) {\\r\\n        s_contractName = _contractName;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return s_contractName;\\r\\n    }\\r\\n\\r\\n    function donate() public payable {\\r\\n        require(s_donationState, \\\"donations are disabled\\\");\\r\\n        require(msg.value >= 1e15, \\\"amount to low, spend at least 0.001eth\\\");\\r\\n        uint256 lengthTopDonators = s_topDonators.length; //gas reducing by linking it here and not checking .length multiple times\\r\\n        //check if address already exists\\r\\n        if (s_mappedSpentAmount[msg.sender] != 0) {\\r\\n            //already interacted and send value, so we need to sum up\\r\\n            s_mappedSpentAmount[msg.sender] += msg.value;\\r\\n\\r\\n            //search if already exists in top3\\r\\n            uint256 foundIndexOfDonator = 0;\\r\\n            for (\\r\\n                foundIndexOfDonator;\\r\\n                foundIndexOfDonator < lengthTopDonators;\\r\\n                ++foundIndexOfDonator\\r\\n            ) {\\r\\n                if (\\r\\n                    s_topDonators[foundIndexOfDonator].donatorAddress ==\\r\\n                    msg.sender\\r\\n                ) {\\r\\n                    //found under top3\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (foundIndexOfDonator < lengthTopDonators) {\\r\\n                //update existing\\r\\n                s_topDonators[foundIndexOfDonator]\\r\\n                    .donatorValue = s_mappedSpentAmount[msg.sender];\\r\\n                //update needs to lead to reorganizing\\r\\n                if (msg.sender != s_topDonators[0].donatorAddress) {\\r\\n                    //reorganisation only needed if updated one is not on top place\\r\\n                    reorganizeDonators();\\r\\n                }\\r\\n                return;\\r\\n            }\\r\\n        } else {\\r\\n            s_mappedSpentAmount[msg.sender] = msg.value;\\r\\n        }\\r\\n\\r\\n        //check if new spend amount is in the range of the first 3\\r\\n        if (\\r\\n            s_mappedSpentAmount[msg.sender] > s_topDonators[0].donatorValue ||\\r\\n            s_mappedSpentAmount[msg.sender] > s_topDonators[1].donatorValue ||\\r\\n            s_mappedSpentAmount[msg.sender] > s_topDonators[2].donatorValue\\r\\n        ) {\\r\\n            addNewHighestDonator();\\r\\n        }\\r\\n        emit donated(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function reorganizeDonators() private {\\r\\n        donators memory tmp;\\r\\n\\r\\n        //find highest value\\r\\n        for (uint256 j = 0; j < 2; j++) {\\r\\n            //there can only be one who does not fit in the sequence, so we can archive this by if and else if\\r\\n            if (s_topDonators[2].donatorValue > s_topDonators[0].donatorValue) {\\r\\n                tmp = s_topDonators[0];\\r\\n                s_topDonators[0] = s_topDonators[2];\\r\\n                s_topDonators[2] = tmp;\\r\\n            }\\r\\n            if (s_topDonators[2].donatorValue > s_topDonators[1].donatorValue) {\\r\\n                tmp = s_topDonators[1];\\r\\n                s_topDonators[1] = s_topDonators[2];\\r\\n                s_topDonators[2] = tmp;\\r\\n            }\\r\\n            if (s_topDonators[1].donatorValue > s_topDonators[0].donatorValue) {\\r\\n                tmp = s_topDonators[0];\\r\\n                s_topDonators[0] = s_topDonators[1];\\r\\n                s_topDonators[1] = tmp;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit topDonatorsUpdate(s_topDonators);\\r\\n    }\\r\\n\\r\\n    function addNewHighestDonator() private {\\r\\n        //check what rank needs to be updated, first come first serve, if you spend as much as nr1 you wont become nr1\\r\\n        if (s_mappedSpentAmount[msg.sender] > s_topDonators[0].donatorValue) {\\r\\n            //sender not in list yet, reorder all, [2] gets kicked out\\r\\n            s_topDonators[2].donatorValue = s_topDonators[1].donatorValue;\\r\\n            s_topDonators[2].donatorAddress = s_topDonators[1].donatorAddress;\\r\\n\\r\\n            s_topDonators[1].donatorValue = s_topDonators[0].donatorValue;\\r\\n            s_topDonators[1].donatorAddress = s_topDonators[0].donatorAddress;\\r\\n\\r\\n            s_topDonators[0].donatorValue = s_mappedSpentAmount[msg.sender];\\r\\n            s_topDonators[0].donatorAddress = msg.sender;\\r\\n        } else if (\\r\\n            s_mappedSpentAmount[msg.sender] > s_topDonators[1].donatorValue\\r\\n        ) {\\r\\n            s_topDonators[2].donatorValue = s_topDonators[1].donatorValue;\\r\\n            s_topDonators[2].donatorAddress = s_topDonators[1].donatorAddress;\\r\\n\\r\\n            s_topDonators[1].donatorValue = s_mappedSpentAmount[msg.sender];\\r\\n            s_topDonators[1].donatorAddress = msg.sender;\\r\\n        } else if (\\r\\n            s_mappedSpentAmount[msg.sender] > s_topDonators[2].donatorValue\\r\\n        ) {\\r\\n            s_topDonators[2].donatorValue = s_mappedSpentAmount[msg.sender];\\r\\n            s_topDonators[2].donatorAddress = msg.sender;\\r\\n        }\\r\\n\\r\\n        emit topDonatorsUpdate(s_topDonators);\\r\\n    }\\r\\n\\r\\n    function getHighestDonators() public view returns (donators[3] memory) {\\r\\n        return (s_topDonators);\\r\\n    }\\r\\n\\r\\n    function getMySpendAmount() public view returns (uint256) {\\r\\n        return s_mappedSpentAmount[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getDonationState() public view returns (bool) {\\r\\n        return s_donationState;\\r\\n    }\\r\\n\\r\\n    function getSpendAmountOfGivenAddress(address _walletAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_walletAddress != address(0), \\\"null address given\\\");\\r\\n        return (s_mappedSpentAmount[_walletAddress]);\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        require(address(this).balance > 0, \\\"contract balance=0\\\");\\r\\n        emit balanceWithdrawn(msg.sender, address(this).balance);\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return (address(this).balance);\\r\\n    }\\r\\n\\r\\n    function setDonationState(bool _state) public onlyOwner {\\r\\n        s_donationState = _state;\\r\\n        emit donationStateChanged(_state);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"donationStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"donatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donatorValue\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Top3Donators.donators[3]\",\"name\":\"newTop3Donators\",\"type\":\"tuple[3]\"}],\"name\":\"topDonatorsUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDonationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestDonators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"donatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donatorValue\",\"type\":\"uint256\"}],\"internalType\":\"struct Top3Donators.donators[3]\",\"name\":\"\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMySpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getSpendAmountOfGivenAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setDonationState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Top3Donators", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010446f6e6174696f6e436f6e747261637400000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}