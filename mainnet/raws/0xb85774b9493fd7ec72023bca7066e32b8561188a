{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\ninterface ETHUSDT {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function decimals() external view returns (uint8);\r\n}\r\ncontract Ownable {\r\n    address owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"address is null\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BridgeTransfer is Ownable {\r\n    struct Transaction{\r\n        address token_address;\r\n        address from_address;\r\n        string  to_address;\r\n        uint    to_chain;\r\n        uint    amount;\r\n        uint    decimals;\r\n        uint    time;\r\n    }\r\n    struct User{\r\n        Transaction[] trans;\r\n    }\r\n    mapping(address => User) users;\r\n    Transaction[] all_trans;\r\n\r\n    // \u5b58\u5165\u8981\u8f6c\u8d26\u7684token\r\n    // token_address token\u7684\u5408\u7ea6\u5730\u5740\r\n    // to_address \u6536\u6b3e\u76ee\u6807\u5730\u5740\u7684\u5b57\u7b26\u4e32\r\n    // to_chain \u6536\u6b3e\u76ee\u6807\u94fe\u7684\u7f16\u53f7\r\n    // amount \u8f6c\u8d26\u7684\u91d1\u989d\r\n    function deposit(address token_address, string memory to_address, uint to_chain, uint amount) public returns (bool){\r\n        require(token_address != address(0), \"token_address is null\");\r\n        require(amount > 0, \"amount must great than zero\");\r\n\r\n        uint decimals;\r\n        if (isUsdt(token_address)) {\r\n            ETHUSDT token = ETHUSDT(token_address);\r\n            token.transferFrom(msg.sender, address(this), amount);\r\n            decimals = token.decimals();\r\n        } else {\r\n            ERC20 token = ERC20(token_address);\r\n            bool result = token.transferFrom(msg.sender, address(this), amount);\r\n            require(result == true, \"transferFrom fail\");\r\n            decimals = token.decimals();\r\n        }\r\n        \r\n        Transaction memory tran = Transaction(token_address, msg.sender, to_address, to_chain, amount, decimals, block.timestamp);\r\n\r\n        users[msg.sender].trans.push(tran);\r\n        all_trans.push(tran);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function deposit(string memory to_address, uint to_chain) public payable returns (bool){\r\n        require(msg.value > 0, \"amount must great than zero\");\r\n        Transaction memory tran = Transaction(address(0), msg.sender, to_address, to_chain, msg.value, 18, block.timestamp);\r\n        users[msg.sender].trans.push(tran);\r\n        all_trans.push(tran);\r\n        return true;\r\n    }\r\n\r\n    // \u67e5\u8be2\u8d26\u6237\u4fe1\u606f\r\n    // addr \u8d26\u6237\u7684\u5730\u5740\r\n    function query_account(address addr)public view returns(uint, uint){\r\n        return (addr.balance,              // \u5f53\u524d\u8d26\u6237\u7684BNB\u6216TRX\u4f59\u989d\r\n                users[addr].trans.length); // \u5f53\u524d\u8d26\u6237\u603b\u5171\u6709\u591a\u5c11\u6b21\u8de8\u94fe\u8f6c\u8d26\r\n    }\r\n\r\n    // \u67e5\u8be2token\u7684\u4f59\u989d\u548c\u6388\u6743\u60c5\u51b5\r\n    // addr \u8981\u67e5\u8be2\u7684\u5730\u5740\r\n    // token_address token\u7684\u5408\u7ea6\u5730\u5740\r\n    function query_token(address addr, address token_address)public view returns(uint, uint){\r\n        if (isUsdt(token_address)) {\r\n            ETHUSDT token = ETHUSDT(token_address);\r\n            return (token.balanceOf(addr),                 // token\u7684\u4f59\u989d\r\n                    token.allowance(addr, address(this))); // token\u7684\u6388\u6743\u60c5\u51b5\r\n        } else {\r\n            ERC20 token = ERC20(token_address);\r\n            return (token.balanceOf(addr),                 // token\u7684\u4f59\u989d\r\n                    token.allowance(addr, address(this))); // token\u7684\u6388\u6743\u60c5\u51b5\r\n        }\r\n    }\r\n\r\n    // \u67e5\u8be2\u7528\u6237\u6307\u5b9a\u7f16\u53f7\u7684\u8de8\u94fe\u8f6c\u8d26\u8be6\u60c5\r\n    // addr \u67e5\u8be2\u7684\u7528\u6237\u5730\u5740\r\n    // index \u67e5\u8be2\u8f6c\u8d26\u7684\u7d22\u5f15\u7f16\u53f7\uff0c\u4e0d\u80fd\u5927\u4e8e\u7b49\u4e8equery_account\u8fd4\u56de\u7684\u603b\u5171\u8de8\u94fe\u8f6c\u8d26\u6b21\u6570\r\n    function query_user_tran(address addr, uint index)public view returns(address, string memory, uint, uint, uint, uint){\r\n        require(index < users[addr].trans.length, \"index out of bounds\");\r\n\r\n        return (users[addr].trans[index].token_address, // token\u7684\u5408\u7ea6\u5730\u5740\r\n                users[addr].trans[index].to_address,    // \u8f6c\u8d26\u76ee\u6807\u5730\u5740\r\n                users[addr].trans[index].to_chain,      // \u6536\u6b3e\u76ee\u6807\u94fe\u7684\u7f16\u53f7\r\n                users[addr].trans[index].amount,        // \u8f6c\u8d26\u7684\u91d1\u989d\r\n                users[addr].trans[index].decimals,      // \u8f6c\u8d26\u7684\u91d1\u989d\u5c0f\u6570\u4f4d\r\n                users[addr].trans[index].time);         // \u8f6c\u8d26\u53d1\u8d77\u65f6\u95f4\uff08\u79d2\uff09\uff0cunix timestamp\r\n    }\r\n\r\n    // \u67e5\u8be2\u5408\u7ea6\u603b\u5171\u7684\u8de8\u94fe\u8f6c\u8d26\u6b21\u6570\r\n    function query_all_trans_length()public view returns(uint) {\r\n        return all_trans.length;\r\n    }\r\n\r\n    // \u67e5\u8be2\u6574\u4e2a\u5408\u7ea6\u6307\u5b9a\u7f16\u53f7\u7684\u8de8\u94fe\u8f6c\u8d26\u8be6\u60c5\r\n    // index \u67e5\u8be2\u8f6c\u8d26\u7684\u7d22\u5f15\u7f16\u53f7\uff0c\u4e0d\u80fd\u5927\u4e8e\u7b49\u4e8equery_all_trans_length\u8fd4\u56de\u7684\u603b\u5171\u8de8\u94fe\u8f6c\u8d26\u6b21\u6570\r\n    function query_tran(uint index)public view returns(address, address, string memory, uint, uint, uint, uint) {\r\n        require(index < all_trans.length, \"index out of bounds\");\r\n\r\n        return (all_trans[index].token_address, // token\u7684\u5408\u7ea6\u5730\u5740\r\n                all_trans[index].from_address,  // \u8f6c\u8d26\u53d1\u8d77\u7684\u7528\u6237\u5730\u5740\r\n                all_trans[index].to_address,    // \u8f6c\u8d26\u76ee\u6807\u5730\u5740\r\n                all_trans[index].to_chain,      // \u6536\u6b3e\u76ee\u6807\u94fe\u7684\u7f16\u53f7\r\n                all_trans[index].amount,        // \u8f6c\u8d26\u7684\u91d1\u989d\r\n                all_trans[index].decimals,      // \u8f6c\u8d26\u7684\u91d1\u989d\u5c0f\u6570\u4f4d\r\n                all_trans[index].time);         // \u8f6c\u8d26\u53d1\u8d77\u65f6\u95f4\uff08\u79d2\uff09\uff0cunix timestamp\r\n    }\r\n\r\n    function collect(address token_address, address collect_address, uint amount) public onlyOwner returns (bool){\r\n        require(token_address != address(0), \"token_address is null\");\r\n        require(collect_address != address(0), \"collect_address is null\");\r\n        require(amount > 0, \"amount must great than zero\");\r\n\r\n        if (isUsdt(token_address)) {\r\n            ETHUSDT token = ETHUSDT(token_address);\r\n            token.transfer(collect_address, amount);\r\n        } else {\r\n            ERC20 token = ERC20(token_address);\r\n            token.transfer(collect_address, amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function collect(address payable collect_address, uint amount) public onlyOwner returns (bool){\r\n        require(collect_address != address(0), \"collect_address is null\");\r\n        require(amount > 0, \"amount must great than zero\");\r\n        collect_address.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    function isUsdt(address addr) private pure returns (bool) {\r\n        return addr == address(0xdAC17F958D2ee523a2206206994597C13D831ec7) ? true : false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"collect_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collect_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"to_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"to_chain\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"to_chain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"query_account\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"query_all_trans_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"query_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"query_tran\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"query_user_tran\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BridgeTransfer", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5cda137fbbaed709353692c56037e3861a8c4afb8977809a7796b7f2487b946"}]}