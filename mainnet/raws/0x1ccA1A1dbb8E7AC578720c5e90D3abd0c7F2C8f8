{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GaugeIncentives.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.7;\\n\\n// ==========================================\\n// |            ____  _ __       __         |\\n// |           / __ \\\\(_) /______/ /_        |\\n// |          / /_/ / / __/ ___/ __ \\\\       |\\n// |         / ____/ / /_/ /__/ / / /       |\\n// |        /_/   /_/\\\\__/\\\\___/_/ /_/        |\\n// |                                        |\\n// ==========================================\\n// ================= Pitch ==================\\n// ==========================================\\n\\n// Authored by Pitch Research: research@pitch.foundation\\n// Adapted from 0x7893bbb46613d7a4fbcc31dab4c9b823ffee1026\\n\\nimport \\\"./interfaces/IGaugeController.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ncontract GaugeIncentives is OwnableUpgradeable, UUPSUpgradeable {\\n    // Use SafeERC20 for transfers\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint constant WEEK = 86400 * 7;\\n    uint256 public constant DENOMINATOR = 10000; // denominates weights 10000 = 100%\\n\\n    // Pitch Multisig with fee modeled after Votium.\\n    address public feeAddress;\\n    uint256 public platformFee;\\n    address public gaugeControllerAddress;\\n    \\n    // These mappings were made public, while the bribe.crv.finance implementation keeps them private.\\n    mapping(address => mapping(address => uint)) public currentlyClaimableRewards;\\n    mapping(address => mapping(address => uint)) public currentlyClaimedRewards;\\n\\n    // ** no longer in use without simple rewards **\\n    mapping(address => mapping(address => uint)) public futureClaimableRewards;\\n\\n    mapping(address => mapping(address => uint)) public activePeriod;\\n    mapping(address => mapping(address => mapping(address => uint))) public last_user_claim;\\n\\n    // users can delegate their rewards to another address (key = delegator, value = delegate)\\n    mapping (address => address) public delegation;\\n\\n    // ** no longer in use **\\n    mapping (address => mapping (address => mapping (address => Reward))) public pendingRewards;\\n    \\n    // list of addresses who have pushed pending rewards that should be checked on periodic update.\\n    mapping (address => mapping (address => address[])) public pendingRewardAddresses;\\n    \\n    mapping(address => address[]) _rewardsPerGauge;\\n    mapping(address => address[]) _gaugesPerReward;\\n    mapping(address => mapping(address => bool)) _rewardsInGauge;\\n\\n    // Rewards are intrinsically tied to a certain price per vote.\\n    struct Reward {\\n        uint amount;\\n        uint pricePerPercent;\\n    }\\n\\n    // pending rewards are indexed with [gauge][token][user]. each user can only have one reward per gauge per token.\\n    mapping (address => mapping (address => mapping (address => Reward))) public pendingPricedRewards;\\n\\n    /* ========== INITIALIZER FUNCTION ========== */ \\n    function initialize(address _feeAddress, uint256 _platformFee, address _gaugeControllerAddress) public initializer {\\n       __Context_init_unchained();\\n       __Ownable_init_unchained();\\n       feeAddress = _feeAddress;\\n       platformFee = _platformFee;\\n       gaugeControllerAddress = _gaugeControllerAddress;\\n    }\\n    /* ========== END INITIALIZER FUNCTION ========== */ \\n\\n    /* ========== EXTERNAL VIEW FUNCTIONS ========== */\\n    function rewardsPerGauge(address _gauge) external view returns (address[] memory) {\\n        return _rewardsPerGauge[_gauge];\\n    }\\n    \\n    function gaugesPerReward(address _reward) external view returns (address[] memory) {\\n        return _gaugesPerReward[_reward];\\n    }\\n\\n    function getPendingRewardAddresses(address _gauge, address _token) external view returns (address[] memory) {\\n        return pendingRewardAddresses[_gauge][_token];\\n    }\\n\\n    function getPendingPricedRewards(address _gauge, address _token, address _user) external view returns (Reward memory) {\\n        return pendingPricedRewards[_gauge][_token][_user];\\n    }\\n\\n    /**\\n     * @notice Returns a list of pending priced rewards for a given gauge and reward token.\\n     * @param _gauge The token underlying the supported gauge.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return pendingPRs List of pending rewards.\\n     */\\n    function viewPendingPricedRewards(address _gauge, address _token) external view returns (Reward[] memory pendingPRs) {\\n        uint numPendingRewards = pendingRewardAddresses[_gauge][_token].length;\\n\\n        pendingPRs = new Reward[](numPendingRewards);\\n\\n        for (uint i = 0; i < numPendingRewards; i++) {\\n            address pendingRewardAddress = pendingRewardAddresses[_gauge][_token][i];\\n            pendingPRs[i] = pendingPricedRewards[_gauge][_token][pendingRewardAddress];\\n        }\\n    }\\n\\n    /**\\n     * @notice Goes through every pending reward on a [gauge][token] pair and calculates the pending rewards.\\n     * @param _gauge The token underlying the supported gauge.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _amount the updated reward amount\\n     */\\n    function calculatePendingRewards(address _gauge, address _token) public view returns (uint _amount) {\\n        _amount = 0;\\n\\n        for (uint i = 0; i < pendingRewardAddresses[_gauge][_token].length; i++) {\\n            address pendingRewardAddress = pendingRewardAddresses[_gauge][_token][i];\\n            uint _rewardAmount = viewGaugeReturn(_gauge, _token, pendingRewardAddress);\\n            _amount += _rewardAmount;\\n        }\\n    }\\n    \\n    /**\\n     * @notice Provides a user their quoted share of future rewards. If the contract's not synced with the controller, it'll reference the updated period.\\n     * @param _user Reward owner\\n     * @param _gauge The gauge being referenced by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _amount The amount currently claimable\\n     */\\n    function claimable(address _user, address _gauge, address _token) external view returns (uint _amount) {\\n        _amount = 0;\\n\\n        // current gauge period\\n        uint _currentPeriod = IGaugeController(gaugeControllerAddress).time_total();\\n        \\n        // last checkpointed period\\n        uint _checkpointedPeriod = activePeriod[_gauge][_token];\\n\\n        // if now is past the active period, users are eligible to claim\\n        if (_currentPeriod > _checkpointedPeriod) {\\n            /* \\n             * return indiv/total * (future + current)\\n             * start by collecting total slopes at the end of period\\n             */\\n            uint _totalWeight = IGaugeController(gaugeControllerAddress).points_weight(_gauge, _currentPeriod).bias;\\n            IGaugeController.VotedSlope memory _individualSlope = IGaugeController(gaugeControllerAddress).vote_user_slopes(_user, _gauge);\\n\\n            /*\\n             * avoids a divide by zero problem. \\n             * curve-style gauge controllers don't allow votes to kick in until \\n             * the following period, so we don't need to track that ourselves \\n             */\\n            if (_totalWeight > 0 && _individualSlope.end > 0) {\\n                uint _individualWeight = (_individualSlope.end - _currentPeriod) * _individualSlope.slope;\\n                uint _pendingRewardsAmount = calculatePendingRewards(_gauge, _token);\\n\\n                /*\\n                 * includes:\\n                 * rewards available next period\\n                 * rewards qualified after the next period\\n                 * removes rewards that have been claimed\\n                 */\\n                uint _totalRewards = currentlyClaimableRewards[_gauge][_token] + _pendingRewardsAmount - currentlyClaimedRewards[_gauge][_token];\\n                _amount = (_totalRewards * _individualWeight) / _totalWeight;\\n            } \\n        } else {\\n            // make sure we haven't voted or claimed in the past week\\n            uint _votingWeek = _checkpointedPeriod - WEEK;\\n            if (last_user_claim[_user][_gauge][_token] < _votingWeek) {\\n                uint _totalWeight = IGaugeController(gaugeControllerAddress).points_weight(_gauge, _checkpointedPeriod).bias;\\n                IGaugeController.VotedSlope memory _individualSlope = IGaugeController(gaugeControllerAddress).vote_user_slopes(_user, _gauge);\\n\\n                if (_totalWeight > 0 && _individualSlope.end > 0) {\\n                    uint _individualWeight = (_individualSlope.end - _checkpointedPeriod) * _individualSlope.slope;\\n                    uint _totalRewards = currentlyClaimableRewards[_gauge][_token];\\n                    _amount = (_totalRewards * _individualWeight) / _totalWeight;\\n                }  \\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether or not the voter earned rewards have exceeded the originally deposited amount\\n     * @param _gauge The gauge being referenced by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @param _pendingRewardAddress Address of rewards depositor\\n     * @return _amount The amount currently claimable\\n     */\\n    function earnedAmountExceedsDeposited(address _gauge, address _token, address _pendingRewardAddress) external view returns (bool) {\\n        Reward memory pr = pendingPricedRewards[_gauge][_token][_pendingRewardAddress];\\n        uint currentGaugeWeight = IGaugeController(gaugeControllerAddress).gauge_relative_weight(_gauge);\\n        return _voterEarnedRewards(pr.pricePerPercent, currentGaugeWeight) > pr.amount;\\n    }\\n    /* ========== END EXTERNAL VIEW FUNCTIONS ========== */\\n\\n    /* ========== EXTERNAL FUNCTIONS ========== */\\n    /**\\n     * @notice Referenced from Gnosis' DelegateRegistry (https://github.com/gnosis/delegate-registry/blob/main/contracts/DelegateRegistry.sol)\\n     * @dev Sets a delegate for the msg.sender. Every msg.sender serves as a unique key.\\n     * @param delegate Address of the delegate\\n     */\\n    function setDelegate(address delegate) external {\\n        require (delegate != msg.sender, \\\"Can't delegate to self\\\");\\n        require (delegate != address(0), \\\"Can't delegate to 0x0\\\");\\n        address currentDelegate = delegation[msg.sender];\\n        require (delegate != currentDelegate, \\\"Already delegated to this address\\\");\\n        \\n        // Update delegation mapping\\n        delegation[msg.sender] = delegate;\\n        \\n        if (currentDelegate != address(0)) {\\n            emit ClearDelegate(msg.sender, currentDelegate);\\n        }\\n\\n        emit SetDelegate(msg.sender, delegate);\\n    }\\n    \\n    /**\\n     * @notice Referenced from Gnosis' DelegateRegistry (https://github.com/gnosis/delegate-registry/blob/main/contracts/DelegateRegistry.sol)\\n     * @dev Clears a delegate for the msg.sender. Every msg.sender serves as a unique key.\\n     */\\n    function clearDelegate() external {\\n        address currentDelegate = delegation[msg.sender];\\n        require (currentDelegate != address(0), \\\"No delegate set\\\");\\n        \\n        // update delegation mapping\\n        delegation[msg.sender]= address(0);\\n        \\n        emit ClearDelegate(msg.sender, currentDelegate);\\n    }\\n\\n    // if msg.sender is not user,\\n    function claimDelegatedReward(address _delegatingUser, address _delegatedUser, address _gauge, address _token) external returns (uint _amount) {\\n        require(delegation[_delegatingUser] == _delegatedUser, \\\"Not the delegated address\\\");\\n        _amount = _claimDelegatedReward(_delegatingUser, _delegatedUser, _gauge, _token);\\n        emit DelegateClaimed(_delegatingUser, _delegatedUser, _gauge, _token, _amount);\\n    }\\n    \\n    // if msg.sender is not user,\\n    function claimReward(address _user, address _gauge, address _token) external returns (uint _amount) {\\n        _amount = _claimReward(_user, _gauge, _token);\\n        emit Claimed(_user, _gauge, _token, _amount);\\n    }\\n\\n    // if msg.sender is not user,\\n    function claimReward(address _gauge, address _token) external returns (uint _amount) {\\n        _amount = _claimReward(msg.sender, _gauge, _token);\\n        emit Claimed(msg.sender, _gauge, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposits a reward on the gauge, which is stored in future claimable rewards. These will only be claimable once the contract has cleared the vote limit (measured 0 --> 10000 in bps percentage)\\n     * @param _gauge The gauge being updated by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @param _amount The amount to deposit on this gauge.\\n     * @param _pricePerPercent The price paid per basis point of a vote.\\n     * @return The amount claimed.\\n     */\\n    function addRewardAmount(address _gauge, address _token, uint _amount, uint _pricePerPercent) external returns (bool) {\\n        require(!(\\n            pendingPricedRewards[_gauge][_token][msg.sender].pricePerPercent != 0 && \\n            pendingPricedRewards[_gauge][_token][msg.sender].amount != 0\\n        ), \\\"Pending reward already exists for sender. Please update instead.\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(_pricePerPercent > 0, \\\"Price per vote must be greater than 0\\\");\\n        _updatePeriod(_gauge, _token);\\n\\n        Reward memory newReward = Reward(_amount, _pricePerPercent);\\n\\n        pendingPricedRewards[_gauge][_token][msg.sender] = newReward;\\n        pendingRewardAddresses[_gauge][_token].push(msg.sender);\\n\\n        IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _add(_gauge, _token);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits a reward on the gauge, which is stored in future claimable rewards. These will only be claimable once the contract has cleared the vote limit (measured 0 --> 10000 in bps percentage)\\n     * @param _gauge The gauge being updated by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @param _amount The amount to deposit on this gauge.\\n     * @param _pricePerPercent The price paid per basis point of a vote.\\n     * @return The amount claimed.\\n     */\\n    function updateRewardAmount(address _gauge, address _token, uint _amount, uint _pricePerPercent) external returns (bool) {\\n        Reward memory r = pendingPricedRewards[_gauge][_token][msg.sender];\\n        require(r.pricePerPercent != 0 && r.amount != 0, \\\"Pending reward does not exist. Please pich a new reward.\\\");\\n        require(_amount >= 0, \\\"Amount must be greater than 0\\\");\\n        require(_pricePerPercent >= r.pricePerPercent, \\\"Price per vote must monotonically increase\\\");\\n        require(_amount > 0 || _pricePerPercent > r.pricePerPercent, \\\"Either price per vote or amount must increase\\\");\\n\\n        uint _newAmount = r.amount + _amount;\\n\\n        Reward memory newReward = Reward(_newAmount, _pricePerPercent);\\n\\n        pendingPricedRewards[_gauge][_token][msg.sender] = newReward;\\n\\n        // replaced the amount variable with our incentiveTotal variable\\n        IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        return true;\\n    }\\n\\n    /* ========== END EXTERNAL FUNCTIONS ========== */\\n    \\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Pure function to compute voter earned rewards\\n     * @param _pricePerPercent Set price per percent of votes\\n     * @param _gaugeWeight Ending gauge weight\\n     * @return Amount voters have earned\\n     */\\n    function _voterEarnedRewards(uint _pricePerPercent, uint _gaugeWeight) internal pure returns (uint) {\\n        return (_pricePerPercent * _gaugeWeight) / (1 * (10**16));\\n    }\\n\\n    /**\\n     * @notice Claims a pro-rata share reward of a voting gauge. This can only be done once per period per reward token per gauge, which is enforced at the Gauge Controller level.\\n     * @param _user The reward claimer\\n     * @param _gauge The gauge being updated by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _amount Amount claimed.\\n     */\\n    function _claimReward(address _user, address _gauge, address _token) internal returns (uint _amount) {\\n        _amount = 0;\\n        uint _period = _updatePeriod(_gauge, _token);\\n        uint _votingWeek = _period - WEEK;\\n\\n        if (last_user_claim[_user][_gauge][_token] < _votingWeek) {\\n            uint _totalWeight = IGaugeController(gaugeControllerAddress).points_weight(_gauge, _period).bias; // bookmark the total slopes at the weds of current period\\n                \\n            if (_totalWeight > 0) {\\n                IGaugeController.VotedSlope memory _individualSlope = IGaugeController(gaugeControllerAddress).vote_user_slopes(_user, _gauge);\\n                uint _timeRemaining = _individualSlope.end - _period;\\n                uint _individualWeight = _timeRemaining * _individualSlope.slope;\\n\\n                uint _totalRewards = currentlyClaimableRewards[_gauge][_token];\\n                _amount = _totalRewards * _individualWeight / _totalWeight;\\n\\n                if (_amount > 0) {\\n                    currentlyClaimedRewards[_gauge][_token] += _amount;\\n                    last_user_claim[_user][_gauge][_token] = block.timestamp;\\n                    IERC20Upgradeable(_token).safeTransfer(_user, _amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims a pro-rata share reward of a voting gauge. This can only be \\n     * done once per period per reward token per gauge, which is enforced at the \\n     * Gauge Controller level. This should be refactored for elegance eventually.\\n     * @param _delegatingUser The voter who's delegated their rewards.\\n     * @param _delegatedUser The delegated reward address.\\n     * @param _gauge The gauge being updated by this function.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _amount Amount claimed.\\n     */\\n    function _claimDelegatedReward(address _delegatingUser, address _delegatedUser, address _gauge, address _token) internal returns (uint _amount) {\\n        _amount = 0;\\n        uint _period = _updatePeriod(_gauge, _token);\\n        uint _votingWeek = _period - WEEK;\\n\\n        if (last_user_claim[_delegatingUser][_gauge][_token] < _votingWeek) {\\n            // collect total slopes at end of period\\n            uint _totalWeight = IGaugeController(gaugeControllerAddress).points_weight(_gauge, _period).bias;\\n                \\n            if (_totalWeight > 0) {\\n                IGaugeController.VotedSlope memory _individualSlope = IGaugeController(gaugeControllerAddress).vote_user_slopes(_delegatingUser, _gauge);\\n                uint _timeRemaining = _individualSlope.end - _period;\\n                uint _individualWeight = _timeRemaining * _individualSlope.slope;\\n\\n                uint _totalRewards = currentlyClaimableRewards[_gauge][_token];\\n                _amount = _totalRewards * _individualWeight / _totalWeight;\\n\\n                if (_amount > 0) {\\n                    currentlyClaimedRewards[_gauge][_token] += _amount;\\n                    // sends the reward to the delegated user.\\n                    IERC20Upgradeable(_token).safeTransfer(_delegatedUser, _amount);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Synchronizes this contract's period for a given (gauge, reward) pair with the Gauge Controller, checkpointing votes.\\n     * @param _gauge The token underlying the supported gauge.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _currentPeriod updated period\\n     */\\n    function _updatePeriod(address _gauge, address _token) internal returns (uint _currentPeriod) {\\n        // Period set to previous wednesday @ 5PM pt\\n        _currentPeriod = IGaugeController(gaugeControllerAddress).time_total();\\n        // Period needs to be set to next wednesday @ 5PM pt\\n        uint _checkpointedPeriod = activePeriod[_gauge][_token];\\n\\n        if (_currentPeriod > _checkpointedPeriod) {\\n            IGaugeController(gaugeControllerAddress).checkpoint_gauge(_gauge);\\n\\n            uint newlyQualifiedRewards = _updatePendingRewards(_gauge, _token);\\n\\n            // add rewards that are newly qualified into this one\\n            currentlyClaimableRewards[_gauge][_token] += newlyQualifiedRewards;\\n            // subtract rewards that have already been claimed\\n            currentlyClaimableRewards[_gauge][_token] -= currentlyClaimedRewards[_gauge][_token];\\n            // 0 out the current claimed rewards... could be gas optimized because it's setting it to 0\\n            currentlyClaimedRewards[_gauge][_token] = 0;\\n            // syncs our storage with external period\\n            activePeriod[_gauge][_token] = _currentPeriod; \\n        }\\n    }\\n\\n    /**\\n     * @notice Goes through every pending reward on a [gauge][token] pair, calculates the amount on each vote incentive.\\n     * @param _gauge The token underlying the supported gauge.\\n     * @param _token The incentive deposited on this gauge.\\n     * @return _amount Updated pending rewards\\n     */\\n    function _updatePendingRewards(address _gauge, address _token) internal returns (uint _amount) {\\n        _amount = 0;\\n        uint pendingRewardAddressLength = pendingRewardAddresses[_gauge][_token].length;\\n\\n        for (uint i = 0; i < pendingRewardAddressLength; i++) {\\n            address _pendingRewardAddress = pendingRewardAddresses[_gauge][_token][i];\\n\\n            uint _lrAmount = calculatePendingGaugeAmount(_gauge, _token, _pendingRewardAddress);\\n\\n            _amount += _lrAmount;\\n\\n            pendingRewardAddresses[_gauge][_token][i] = pendingRewardAddresses[_gauge][_token][pendingRewardAddressLength-1];\\n            pendingRewardAddresses[_gauge][_token].pop();\\n            delete pendingPricedRewards[_gauge][_token][_pendingRewardAddress];\\n        }\\n    }\\n\\n    function calculatePendingGaugeAmount(address _gauge, address _token, address _pendingRewardAddress) internal returns (uint _amount) {\\n        _amount = 0;\\n        Reward memory pr = pendingPricedRewards[_gauge][_token][_pendingRewardAddress];\\n        \\n        uint currentGaugeWeight = IGaugeController(gaugeControllerAddress).gauge_relative_weight(_gauge);\\n        uint voterEarnedRewards = _voterEarnedRewards(pr.pricePerPercent, currentGaugeWeight);\\n\\n        IERC20Upgradeable rewardToken = IERC20Upgradeable(_token);\\n\\n        if (voterEarnedRewards >= pr.amount) {\\n            // take the fee on the fully converted amount\\n            uint256 _fee = (pr.amount*platformFee)/DENOMINATOR;\\n            uint256 _incentiveTotal = pr.amount-_fee;\\n\\n            _amount += _incentiveTotal;\\n\\n            // transfer fee to fee address, doesn't take off the top\\n            rewardToken.safeTransfer(feeAddress, _fee);\\n        } else {\\n            uint _amountClaimable = voterEarnedRewards;\\n            uint256 _fee = (_amountClaimable * platformFee)/DENOMINATOR;\\n\\n            // take the whole fee with no dilution\\n            if (pr.amount > (_amountClaimable + _fee)) {\\n                _amount += _amountClaimable;\\n\\n                uint256 _amountToReturn = pr.amount - _amountClaimable - _fee;\\n\\n                // take fee on the amount now claimable\\n                rewardToken.safeTransfer(feeAddress, _fee);\\n\\n                // transfer the remainder to the original address\\n                rewardToken.safeTransfer(_pendingRewardAddress, _amountToReturn);\\n            } else {\\n                uint256 _totalFee = (pr.amount * platformFee)/DENOMINATOR;\\n                \\n                uint256 remainingReward = pr.amount - _totalFee;\\n\\n                _amount += remainingReward;\\n                \\n                // take fee on the amount now claimable\\n                rewardToken.safeTransfer(feeAddress, _totalFee);\\n            }\\n        }\\n    }\\n\\n    function viewGaugeReturn(address _gauge, address _token, address _pendingRewardAddress) internal view returns (uint) {\\n        Reward memory pr = pendingPricedRewards[_gauge][_token][_pendingRewardAddress];\\n        \\n        uint currentGaugeWeight = IGaugeController(gaugeControllerAddress).gauge_relative_weight(_gauge);\\n\\n        uint expectedAmountOut = _voterEarnedRewards(pr.pricePerPercent, currentGaugeWeight);\\n        if (expectedAmountOut > pr.amount) {\\n            return pr.amount;\\n        } else {\\n            return expectedAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the reward to internal bookkeeping for visibility at the contract level\\n     * @param _gauge The token underlying the supported gauge.\\n     * @param _reward The incentive deposited on this gauge.\\n     */\\n    function _add(address _gauge, address _reward) internal {\\n        if (!_rewardsInGauge[_gauge][_reward]) {\\n            _rewardsPerGauge[_gauge].push(_reward);\\n            _gaugesPerReward[_reward].push(_gauge);\\n            _rewardsInGauge[_gauge][_reward] = true;\\n        }\\n    }\\n    /* ========== END INTERNAL FUNCTIONS ========== */\\n\\n    /* ========== OWNER FUNCTIONS ========== */\\n    // used to manage upgrading the contract\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    function updateGaugeControllerAddress(address _gaugeControllerAddress) public onlyOwner {\\n      gaugeControllerAddress = _gaugeControllerAddress;\\n      emit UpdatedGaugeController(_gaugeControllerAddress);\\n    }\\n\\n    // update fee address\\n    function updateFeeAddress(address _feeAddress) public onlyOwner {\\n      feeAddress = _feeAddress;\\n    }\\n\\n    // update fee amount\\n    function updateFeeAmount(uint256 _feeAmount) public onlyOwner {\\n      require(_feeAmount < 400, \\\"max fee\\\"); // Max fee 4%\\n      platformFee = _feeAmount;\\n      emit UpdatedFee(_feeAmount);\\n    }\\n    /* ========== END OWNER FUNCTIONS ========== */\\n\\n    /* ========== EVENTS ========== */\\n    event Claimed(address indexed user, address indexed gauge, address indexed token, uint256 amount);\\n    event DelegateClaimed(address indexed delegatingUser, address indexed delegatedUser, address indexed gauge, address token, uint256 amount);\\n    event UpdatedFee(uint256 _feeAmount);\\n    event UpdatedGaugeController(address gaugeController);\\n    event SetDelegate(address indexed delegator, address indexed delegate);\\n    event ClearDelegate(address indexed delegator, address indexed delegate);   \\n}\"\r\n    },\r\n    \"contracts/interfaces/IGaugeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IGaugeController {\\n    struct VotedSlope {\\n        uint slope;\\n        uint power;\\n        uint end;\\n    }\\n    \\n    struct Point {\\n        uint bias;\\n        uint slope;\\n    }\\n    \\n    function vote_user_slopes(address, address) external view returns (VotedSlope memory);\\n    function gauge_relative_weight(address) external view returns (uint);\\n    function last_user_vote(address, address) external view returns (uint);\\n    function points_weight(address, uint256) external view returns (Point memory);\\n    function checkpoint_gauge(address) external;\\n    function time_total() external view returns (uint);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"ClearDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatingUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatedUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"SetDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gaugeController\",\"type\":\"address\"}],\"name\":\"UpdatedGaugeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerPercent\",\"type\":\"uint256\"}],\"name\":\"addRewardAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatingUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatedUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimDelegatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentlyClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentlyClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendingRewardAddress\",\"type\":\"address\"}],\"name\":\"earnedAmountExceedsDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"futureClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"gaugesPerReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingPricedRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct GaugeIncentives.Reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPendingRewardAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gaugeControllerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_user_claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingPricedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRewardAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"rewardsPerGauge\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"updateFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaugeControllerAddress\",\"type\":\"address\"}],\"name\":\"updateGaugeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerPercent\",\"type\":\"uint256\"}],\"name\":\"updateRewardAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"viewPendingPricedRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct GaugeIncentives.Reward[]\",\"name\":\"pendingPRs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GaugeIncentives", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}