{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LiquidityBootstrapAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract LiquidityBootstrapAuction is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IERC20 public immutable asto;\\n    IERC20 public immutable usdc;\\n    uint256 public immutable totalRewardAmount;\\n    uint256 public auctionStartTime;\\n    uint256 public totalDepositedUSDC;\\n    uint256 public totalDepositedASTO;\\n    address public liquidityPair;\\n    uint256 public lpTokenAmount;\\n    uint16 public constant REWARDS_RELEASE_DURATION_IN_WEEKS = 12;\\n    uint16 public constant HOURS_PER_DAY = 24;\\n    uint256 internal constant SECONDS_PER_WEEK = 604800;\\n    uint256 public constant SECONDS_PER_DAY = 86400;\\n    uint256 public constant SECONDS_PER_HOUR = 3600;\\n\\n    mapping(address => uint256) public depositedUSDC;\\n    mapping(address => uint256) public depositedASTO;\\n    mapping(address => bool) public usdcWithdrawnOnDay6;\\n    mapping(address => bool) public usdcWithdrawnOnDay7;\\n    mapping(address => uint256) public rewardClaimed;\\n    mapping(address => uint256) public lpClaimed;\\n\\n    struct Timeline {\\n        uint256 auctionStartTime;\\n        uint256 astoDepositEndTime;\\n        uint256 usdcDepositEndTime;\\n        uint256 auctionEndTime;\\n    }\\n\\n    struct Stats {\\n        uint256 totalDepositedASTO;\\n        uint256 totalDepositedUSDC;\\n        uint256 depositedASTO;\\n        uint256 depositedUSDC;\\n    }\\n\\n    event ASTODeposited(address indexed recipient, uint256 amount, Stats stats);\\n    event USDCDeposited(address indexed recipient, uint256 amount, Stats stats);\\n    event USDCWithdrawn(address indexed recipient, uint256 amount, Stats stats);\\n    event RewardsClaimed(address indexed recipient, uint256 amount);\\n    event LiquidityAdded(uint256 astoAmount, uint256 usdcAmount, uint256 lpTokenAmount);\\n    event TokenWithdrawn(address indexed recipient, uint256 tokenAmount);\\n\\n    /**\\n     * @notice Initialize the contract\\n     * @param multisig Multisig address as the contract owner\\n     * @param _asto $ASTO contract address\\n     * @param _usdc $USDC contract address\\n     * @param rewardAmount Total $ASTO token amount as rewards\\n     * @param startTime Auction start timestamp\\n     */\\n    constructor(\\n        address multisig,\\n        IERC20 _asto,\\n        IERC20 _usdc,\\n        uint256 rewardAmount,\\n        uint256 startTime\\n    ) {\\n        require(address(_asto) != address(0), \\\"invalid token address\\\");\\n        require(address(_usdc) != address(0), \\\"invalid token address\\\");\\n\\n        asto = _asto;\\n        usdc = _usdc;\\n        totalRewardAmount = rewardAmount;\\n        auctionStartTime = startTime;\\n        _transferOwnership(multisig);\\n    }\\n\\n    /**\\n     * @notice Deposit `astoAmount` $ASTO and `usdcAmount` $USDC to the contract\\n     * @param astoAmount $ASTO token amount to deposit\\n     * @param usdcAmount $USDC token amount to deposit\\n     */\\n    function deposit(uint256 astoAmount, uint256 usdcAmount) external {\\n        if (astoAmount > 0) {\\n            depositASTO(astoAmount);\\n        }\\n\\n        if (usdcAmount > 0) {\\n            depositUSDC(usdcAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit `amount` $ASTO to the contract\\n     * @param amount $ASTO token amount to deposit\\n     */\\n    function depositASTO(uint256 amount) public nonReentrant {\\n        require(astoDepositAllowed(), \\\"deposit not allowed\\\");\\n        require(asto.balanceOf(msg.sender) >= amount, \\\"insufficient balance\\\");\\n\\n        depositedASTO[msg.sender] += amount;\\n        totalDepositedASTO += amount;\\n        emit ASTODeposited(msg.sender, amount, stats(msg.sender));\\n\\n        asto.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Deposit `amount` $USDC to the contract\\n     * @param amount $USDC token amount to deposit\\n     */\\n    function depositUSDC(uint256 amount) public nonReentrant {\\n        require(usdcDepositAllowed(), \\\"deposit not allowed\\\");\\n        require(usdc.balanceOf(msg.sender) >= amount, \\\"insufficient balance\\\");\\n\\n        depositedUSDC[msg.sender] += amount;\\n        totalDepositedUSDC += amount;\\n        emit USDCDeposited(msg.sender, amount, stats(msg.sender));\\n\\n        usdc.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Get withdrawable $USDC amount to `recipient`\\n     * @param recipient Wallet address to calculate for\\n     * @return Withdrawable $USDC token amount\\n     */\\n    function withdrawableUSDCAmount(address recipient) public view returns (uint256) {\\n        if (currentTime() < auctionStartTime || currentTime() >= auctionEndTime()) {\\n            return 0;\\n        }\\n\\n        // USDC can only be withdrawn once on Day 6 and once on Day 7\\n        // Withdrawable USDC amount on Day 6: half of deposited USDC amount\\n        // Withdrawable USDC amount on Day 7: hourly linear decrease from half of deposited USDC amount to 0\\n        if (currentTime() < usdcDepositEndTime()) {\\n            return depositedUSDC[recipient];\\n        } else if (currentTime() >= usdcWithdrawLastDay()) {\\n            // On day 7, $USDC is only allowed to be withdrawn once\\n            if (usdcWithdrawnOnDay7[recipient]) {\\n                return 0;\\n            }\\n            uint256 elapsedTime = currentTime() - usdcWithdrawLastDay();\\n            uint256 maxAmount = depositedUSDC[recipient] / 2;\\n\\n            if (elapsedTime > SECONDS_PER_DAY) {\\n                return 0;\\n            }\\n\\n            // Elapsed time in hours, range from 1 to 24\\n            uint256 elapsedTimeRatio = (SECONDS_PER_DAY - elapsedTime) / SECONDS_PER_HOUR + 1;\\n\\n            return (maxAmount * elapsedTimeRatio) / HOURS_PER_DAY;\\n        }\\n        // On day 6, $USDC is only allowed to be withdrawn once\\n        return usdcWithdrawnOnDay6[recipient] ? 0 : depositedUSDC[msg.sender] / 2;\\n    }\\n\\n    /**\\n     * @notice Withdraw `amount` $USDC\\n     * @param amount The $USDC token amount to withdraw\\n     */\\n    function withdrawUSDC(uint256 amount) external nonReentrant {\\n        require(usdcWithdrawAllowed(), \\\"withdraw not allowed\\\");\\n        require(amount > 0, \\\"amount should greater than zero\\\");\\n        require(amount <= withdrawableUSDCAmount(msg.sender), \\\"amount exceeded allowance\\\");\\n\\n        if (currentTime() >= usdcWithdrawLastDay()) {\\n            usdcWithdrawnOnDay7[msg.sender] = true;\\n        } else if (currentTime() >= usdcDepositEndTime()) {\\n            usdcWithdrawnOnDay6[msg.sender] = true;\\n        }\\n\\n        depositedUSDC[msg.sender] -= amount;\\n        totalDepositedUSDC -= amount;\\n\\n        emit USDCWithdrawn(msg.sender, amount, stats(msg.sender));\\n\\n        usdc.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate optimal swap amount to AMM based exchange\\n     * @param amtA Token amount for token A\\n     * @param amtB Token amount for token B\\n     * @param resA Reserved token amount for token A in LP pool\\n     * @param resB Reserved token amount for token B in LP pool\\n     * @return The optimal swap amount for token A\\n     */\\n    function optimalDeposit(\\n        uint256 amtA,\\n        uint256 amtB,\\n        uint256 resA,\\n        uint256 resB\\n    ) internal pure returns (uint256) {\\n        // This function implements the forumal mentioned in the following article\\n        // https://blog.alphafinance.io/onesideduniswap/\\n        require(amtA.mul(resB) >= amtB.mul(resA), \\\"invalid token amount\\\");\\n\\n        uint256 a = 997;\\n        uint256 b = uint256(1997).mul(resA);\\n        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));\\n        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);\\n\\n        uint256 d = a.mul(c).mul(4);\\n        uint256 e = Math.sqrt(b.mul(b).add(d));\\n\\n        uint256 numerator = e.sub(b);\\n        uint256 denominator = a.mul(2);\\n\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Add all deposited $ASTO and $USDC to AMM based exchange\\n     * @param router Router contract address to the exchange\\n     * @param factory Factory contract address to the exchange\\n     */\\n    function addLiquidityToExchange(address router, address factory) external nonReentrant onlyOwner {\\n        require(currentTime() >= auctionEndTime(), \\\"auction not finished\\\");\\n        require(totalDepositedUSDC > 0, \\\"no USDC deposited\\\");\\n        require(totalDepositedASTO > 0, \\\"no ASTO deposited\\\");\\n\\n        // 1. Approve the router contract to get all tokens from this contract\\n        usdc.approve(router, type(uint256).max);\\n        asto.approve(router, type(uint256).max);\\n\\n        uint256 usdcSent;\\n        uint256 astoSent;\\n\\n        // 2. Add deposited tokens to the exchange as much as posisble\\n        // The tokens will be transferred to the liquidity pool if it exists, otherwise a new trading pair will be created\\n        (usdcSent, astoSent, lpTokenAmount) = IUniswapV2Router02(router).addLiquidity(\\n            address(usdc),\\n            address(asto),\\n            totalDepositedUSDC,\\n            totalDepositedASTO,\\n            0,\\n            0,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n\\n        // Store the LP contract address\\n        liquidityPair = IUniswapV2Factory(factory).getPair(address(asto), address(usdc));\\n\\n        // Both deposited $ASTO and $USDC are transferred to the liquidity pool,\\n        // which means the trading pair was not created before, or the price from exchange matches with auction\\n        if (usdcSent == totalDepositedUSDC && astoSent == totalDepositedASTO) {\\n            emit LiquidityAdded(astoSent, usdcSent, lpTokenAmount);\\n            return;\\n        }\\n\\n        // 3. Swap the tokens left in the contract if not all tokens been aadded to the liquidity pool\\n\\n        // Get reserved token amounts in LP pool\\n        uint256 resASTO;\\n        uint256 resUSDC;\\n        if (IUniswapV2Pair(liquidityPair).token0() == address(asto)) {\\n            (resASTO, resUSDC, ) = IUniswapV2Pair(liquidityPair).getReserves();\\n        } else {\\n            (resUSDC, resASTO, ) = IUniswapV2Pair(liquidityPair).getReserves();\\n        }\\n\\n        // Calculate swap amount\\n        uint256 swapAmt;\\n        address[] memory path = new address[](2);\\n        bool isReserved;\\n        uint256 balance;\\n        if (usdcSent == totalDepositedUSDC) {\\n            balance = totalDepositedASTO - astoSent;\\n            swapAmt = optimalDeposit(balance, 0, resASTO, resUSDC);\\n            (path[0], path[1]) = (address(asto), address(usdc));\\n        } else {\\n            balance = totalDepositedUSDC - usdcSent;\\n            swapAmt = optimalDeposit(balance, 0, resUSDC, resASTO);\\n            (path[0], path[1]) = (address(usdc), address(asto));\\n            isReserved = true;\\n        }\\n\\n        require(swapAmt > 0, \\\"swapAmt must great then 0\\\");\\n\\n        // Swap the token\\n        uint256[] memory amounts = IUniswapV2Router02(router).swapExactTokensForTokens(\\n            swapAmt,\\n            0,\\n            path,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n\\n        // 4. Add liquidity to the exchange again. All tokens should be transferred in this step\\n        (uint256 amountA, , uint256 moreLPAmount) = IUniswapV2Router02(router).addLiquidity(\\n            isReserved ? address(usdc) : address(asto),\\n            isReserved ? address(asto) : address(usdc),\\n            balance - swapAmt,\\n            amounts[1],\\n            0,\\n            0,\\n            address(this),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n\\n        lpTokenAmount += moreLPAmount;\\n        uint256 totalASTOSent = isReserved ? astoSent : astoSent + swapAmt + amountA;\\n        uint256 totalUSDCSent = isReserved ? usdcSent + swapAmt + amountA : usdcSent;\\n        emit LiquidityAdded(totalASTOSent, totalUSDCSent, lpTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Claim LP tokens. The LP tokens are locked for 12 weeks after auction ends\\n     */\\n    function claimLPToken() external nonReentrant {\\n        uint256 claimable = claimableLPAmount(msg.sender);\\n        require(claimable > 0, \\\"no claimable token\\\");\\n\\n        lpClaimed[msg.sender] += claimable;\\n\\n        require(IUniswapV2Pair(liquidityPair).transfer(msg.sender, claimable), \\\"insufficient LP token balance\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate claimable LP amount based on deposited token amount\\n     * @param recipient Wallet address to calculate for\\n     * @return Claimable LP amount\\n     */\\n    function claimableLPAmount(address recipient) public view returns (uint256) {\\n        if (currentTime() < lpTokenReleaseTime()) {\\n            return 0;\\n        }\\n        // LP tokens are splitted into two equal parts. One part for $ASTO and another for $USDC\\n        uint256 claimableLPTokensForASTO = (lpTokenAmount * depositedASTO[recipient]) / (2 * totalDepositedASTO);\\n        uint256 claimableLPTokensForUSDC = (lpTokenAmount * depositedUSDC[recipient]) / (2 * totalDepositedUSDC);\\n        uint256 total = claimableLPTokensForASTO + claimableLPTokensForUSDC;\\n        return total - lpClaimed[recipient];\\n    }\\n\\n    /**\\n     * @notice Claim `amount` $ASTO tokens as rewards\\n     * @param amount The $ASTO token amount to claim\\n     */\\n    function claimRewards(uint256 amount) external nonReentrant {\\n        uint256 amountVested;\\n        (, amountVested) = claimableRewards(msg.sender);\\n\\n        require(amount <= amountVested, \\\"amount not claimable\\\");\\n        rewardClaimed[msg.sender] += amount;\\n\\n        require(asto.balanceOf(address(this)) >= amount, \\\"insufficient ASTO balance\\\");\\n        asto.safeTransfer(msg.sender, amount);\\n\\n        emit RewardsClaimed(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate claimable $ASTO token amount as rewards. The rewards are released weekly for 12 weeks after auction ends.\\n     * @param recipient Wallet address to calculate for\\n     * @return Vested weeks and vested(claimable) $ASTO token amount\\n     */\\n    function claimableRewards(address recipient) public view returns (uint16, uint256) {\\n        if (currentTime() < auctionEndTime()) {\\n            return (0, 0);\\n        }\\n\\n        uint256 elapsedTime = currentTime() - auctionEndTime();\\n        uint16 elapsedWeeks = uint16(elapsedTime / SECONDS_PER_WEEK);\\n\\n        if (elapsedWeeks >= REWARDS_RELEASE_DURATION_IN_WEEKS) {\\n            uint256 remaining = calculateRewards(recipient) - rewardClaimed[recipient];\\n            return (REWARDS_RELEASE_DURATION_IN_WEEKS, remaining);\\n        } else {\\n            uint256 amountVestedPerWeek = calculateRewards(recipient) / REWARDS_RELEASE_DURATION_IN_WEEKS;\\n            uint256 amountVested = amountVestedPerWeek * elapsedWeeks - rewardClaimed[recipient];\\n            return (elapsedWeeks, amountVested);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the total $ASTO token amount as rewards\\n     * @param recipient Wallet address to calculate for\\n     * @return Total rewards amount\\n     */\\n    function calculateRewards(address recipient) public view returns (uint256) {\\n        return calculateASTORewards(recipient) + calculateUSDCRewards(recipient);\\n    }\\n\\n    /**\\n     * @notice Calculate the $ASTO rewards amount for depositing $ASTO\\n     * @param recipient Wallet address to calculate for\\n     * @return Rewards amount for for depositing $ASTO\\n     */\\n    function calculateASTORewards(address recipient) public view returns (uint256) {\\n        if (totalDepositedASTO == 0) {\\n            return 0;\\n        }\\n        return (astoRewardAmount() * depositedASTO[recipient]) / totalDepositedASTO;\\n    }\\n\\n    /**\\n     * @notice Calculate the $ASTO rewards amount for depositing $USDC\\n     * @param recipient Wallet address to calculate for\\n     * @return Rewards amount for for depositing $USDC\\n     */\\n    function calculateUSDCRewards(address recipient) public view returns (uint256) {\\n        if (totalDepositedUSDC == 0) {\\n            return 0;\\n        }\\n        return (usdcRewardAmount() * depositedUSDC[recipient]) / totalDepositedUSDC;\\n    }\\n\\n    /**\\n     * @notice Withdraw any token left in the contract to multisig\\n     * @param token ERC20 token contract address to withdraw\\n     * @param amount Token amount to withdraw\\n     */\\n    function withdrawToken(address token, uint256 amount) external onlyOwner {\\n        require(token != address(0), \\\"invalid token address\\\");\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(amount <= balance, \\\"amount should not exceed balance\\\");\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n        emit TokenWithdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Check if depositing $ASTO is allowed\\n     * @return $ASTO deposit status\\n     */\\n    function astoDepositAllowed() public view returns (bool) {\\n        return currentTime() >= auctionStartTime && currentTime() < astoDepositEndTime();\\n    }\\n\\n    /**\\n     * @notice Check if depositing $USDC is allowed\\n     * @return $USDC deposit status\\n     */\\n    function usdcDepositAllowed() public view returns (bool) {\\n        return currentTime() >= auctionStartTime && currentTime() < usdcDepositEndTime();\\n    }\\n\\n    /**\\n     * @notice Check if withdrawing $USDC is allowed\\n     * @return $USDC withdraw status\\n     */\\n    function usdcWithdrawAllowed() public view returns (bool) {\\n        return currentTime() >= auctionStartTime && currentTime() < auctionEndTime();\\n    }\\n\\n    /**\\n     * @notice Get $ASTO deposit end timestamp\\n     * @return Timestamp when $ASTO deposit ends\\n     */\\n    function astoDepositEndTime() public view returns (uint256) {\\n        return auctionStartTime + 3 days;\\n    }\\n\\n    /**\\n     * @notice Get $USDC deposit end timestamp\\n     * @return Timestamp when $USDC deposit ends\\n     */\\n    function usdcDepositEndTime() public view returns (uint256) {\\n        return auctionStartTime + 5 days;\\n    }\\n\\n    /**\\n     * @notice Get the timestamp for the last day of withdrawing $USDC\\n     * @return Timestamp for the last day of withdrawing $USDC\\n     */\\n    function usdcWithdrawLastDay() public view returns (uint256) {\\n        return auctionStartTime + 6 days;\\n    }\\n\\n    /**\\n     * @notice Get auction end timestamp\\n     * @return Timestamp when the auction ends\\n     */\\n    function auctionEndTime() public view returns (uint256) {\\n        return auctionStartTime + 7 days;\\n    }\\n\\n    /**\\n     * @notice Get LP token release timestamp\\n     * @return Timestamp when the locked LP tokens been released\\n     */\\n    function lpTokenReleaseTime() public view returns (uint256) {\\n        return auctionEndTime() + 12 weeks;\\n    }\\n\\n    /**\\n     * @notice Get the rewards portion for all deposited $ASTO\\n     * @return $ASTO token amount to be distributed as rewards for depositing $ASTO\\n     */\\n    function astoRewardAmount() public view returns (uint256) {\\n        return (totalRewardAmount * 75) / 100;\\n    }\\n\\n    /**\\n     * @notice Get the rewards portion for all deposited $USDC\\n     * @return $ASTO token amount to be distributed as rewards for depositing $USDC\\n     */\\n    function usdcRewardAmount() public view returns (uint256) {\\n        return (totalRewardAmount * 25) / 100;\\n    }\\n\\n    /**\\n     * @notice Set auction start timestamp\\n     * @param newStartTime The auction start timestamp to set\\n     */\\n    function setStartTime(uint256 newStartTime) external onlyOwner {\\n        auctionStartTime = newStartTime;\\n    }\\n\\n    /**\\n     * @notice Get the auction timelines\\n     * @return Timeline struct for the auction\\n     */\\n    function timeline() public view returns (Timeline memory) {\\n        return Timeline(auctionStartTime, astoDepositEndTime(), usdcDepositEndTime(), auctionEndTime());\\n    }\\n\\n    /**\\n     * @notice Get the deposit stats\\n     * @param depositor The wallet address to get the stats for\\n     * @return Stats struct for the auction\\n     */\\n    function stats(address depositor) public view returns (Stats memory) {\\n        return Stats(totalDepositedASTO, totalDepositedUSDC, depositedASTO[depositor], depositedUSDC[depositor]);\\n    }\\n\\n    /**\\n     * @notice Get the latest block timestamp\\n     * @return The latest block timestamp\\n     */\\n    function currentTime() public view virtual returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\nlibrary Math {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_asto\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositedUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedUSDC\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LiquidityBootstrapAuction.Stats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"name\":\"ASTODeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"astoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositedUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedUSDC\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LiquidityBootstrapAuction.Stats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"name\":\"USDCDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositedUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedUSDC\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LiquidityBootstrapAuction.Stats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"name\":\"USDCWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOURS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_RELEASE_DURATION_IN_WEEKS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"addLiquidityToExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asto\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astoDepositAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astoDepositEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astoRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"calculateASTORewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"calculateUSDCRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimableLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"astoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositASTO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedASTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositedUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedASTO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedUSDC\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityBootstrapAuction.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeline\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"astoDepositEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcDepositEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityBootstrapAuction.Timeline\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedASTO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDepositAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDepositEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcWithdrawLastDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdcWithdrawnOnDay6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdcWithdrawnOnDay7\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawableUSDCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityBootstrapAuction", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d2a3d88f31315ea9442d7d25cd30871bed0044ff000000000000000000000000823556202e86763853b40e9cde725f412e294689000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000013b850fd569a9bf4000000000000000000000000000000000000000000000000000000000000006244d2e0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}