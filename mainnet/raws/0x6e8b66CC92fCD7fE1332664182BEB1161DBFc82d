{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/routers/SimpleSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../lib/Utils.sol\\\";\\nimport \\\"./IRouter.sol\\\";\\nimport \\\"../lib/weth/IWETH.sol\\\";\\nimport \\\"../fee/FeeModel.sol\\\";\\nimport \\\"../fee/IFeeClaimer.sol\\\";\\n\\ncontract SimpleSwap is FeeModel, IRouter {\\n    using SafeMath for uint256;\\n    address public immutable augustusRFQ;\\n\\n    /*solhint-disable no-empty-blocks*/\\n    constructor(\\n        uint256 _partnerSharePercent,\\n        uint256 _maxFeePercent,\\n        IFeeClaimer _feeClaimer,\\n        address _augustusRFQ\\n    ) public FeeModel(_partnerSharePercent, _maxFeePercent, _feeClaimer) {\\n        augustusRFQ = _augustusRFQ;\\n    }\\n\\n    /*solhint-enable no-empty-blocks*/\\n\\n    function initialize(bytes calldata) external override {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function getKey() external pure override returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"SIMPLE_SWAP_ROUTER\\\", \\\"1.0.0\\\"));\\n    }\\n\\n    function simpleSwap(Utils.SimpleData memory data) public payable returns (uint256 receivedAmount) {\\n        require(data.deadline >= block.timestamp, \\\"Deadline breached\\\");\\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\\n        receivedAmount = performSimpleSwap(\\n            data.callees,\\n            data.exchangeData,\\n            data.startIndexes,\\n            data.values,\\n            data.fromToken,\\n            data.toToken,\\n            data.fromAmount,\\n            data.toAmount,\\n            data.expectedAmount,\\n            data.partner,\\n            data.feePercent,\\n            data.permit,\\n            beneficiary\\n        );\\n\\n        emit SwappedV3(\\n            data.uuid,\\n            data.partner,\\n            data.feePercent,\\n            msg.sender,\\n            beneficiary,\\n            data.fromToken,\\n            data.toToken,\\n            data.fromAmount,\\n            receivedAmount,\\n            data.expectedAmount\\n        );\\n\\n        return receivedAmount;\\n    }\\n\\n    function simpleBuy(Utils.SimpleData calldata data) external payable {\\n        require(data.deadline >= block.timestamp, \\\"Deadline breached\\\");\\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\\n        (uint256 receivedAmount, uint256 remainingAmount) = performSimpleBuy(\\n            data.callees,\\n            data.exchangeData,\\n            data.startIndexes,\\n            data.values,\\n            data.fromToken,\\n            data.toToken,\\n            data.fromAmount,\\n            data.toAmount,\\n            data.expectedAmount,\\n            data.partner,\\n            data.feePercent,\\n            data.permit,\\n            beneficiary\\n        );\\n\\n        emit BoughtV3(\\n            data.uuid,\\n            data.partner,\\n            data.feePercent,\\n            msg.sender,\\n            beneficiary,\\n            data.fromToken,\\n            data.toToken,\\n            data.fromAmount.sub(remainingAmount),\\n            receivedAmount,\\n            data.expectedAmount\\n        );\\n    }\\n\\n    function performSimpleSwap(\\n        address[] memory callees,\\n        bytes memory exchangeData,\\n        uint256[] memory startIndexes,\\n        uint256[] memory values,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 expectedAmount,\\n        address payable partner,\\n        uint256 feePercent,\\n        bytes memory permit,\\n        address payable beneficiary\\n    ) private returns (uint256 receivedAmount) {\\n        require(msg.value == (fromToken == Utils.ethAddress() ? fromAmount : 0), \\\"Incorrect msg.value\\\");\\n        require(toAmount > 0, \\\"toAmount is too low\\\");\\n        require(callees.length + 1 == startIndexes.length, \\\"Start indexes must be 1 greater then number of callees\\\");\\n        require(callees.length == values.length, \\\"callees and values must have same length\\\");\\n\\n        //If source token is not ETH than transfer required amount of tokens\\n        //from sender to this contract\\n        transferTokensFromProxy(fromToken, fromAmount, permit);\\n\\n        performCalls(callees, exchangeData, startIndexes, values);\\n\\n        receivedAmount = Utils.tokenBalance(toToken, address(this));\\n\\n        require(receivedAmount >= toAmount, \\\"Received amount of tokens are less then expected\\\");\\n\\n        if (!_isTakeFeeFromSrcToken(feePercent)) {\\n            // take fee from dest token\\n            takeToTokenFeeSlippageAndTransfer(\\n                toToken,\\n                expectedAmount,\\n                receivedAmount,\\n                beneficiary,\\n                partner,\\n                feePercent\\n            );\\n        } else {\\n            // Transfer toToken to beneficiary\\n            Utils.transferTokens(toToken, beneficiary, receivedAmount);\\n\\n            // take fee from source token\\n            takeFromTokenFee(fromToken, fromAmount, partner, feePercent);\\n        }\\n\\n        return receivedAmount;\\n    }\\n\\n    function performSimpleBuy(\\n        address[] memory callees,\\n        bytes memory exchangeData,\\n        uint256[] memory startIndexes,\\n        uint256[] memory values,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 expectedAmount,\\n        address payable partner,\\n        uint256 feePercent,\\n        bytes memory permit,\\n        address payable beneficiary\\n    ) private returns (uint256 receivedAmount, uint256 remainingAmount) {\\n        require(msg.value == (fromToken == Utils.ethAddress() ? fromAmount : 0), \\\"Incorrect msg.value\\\");\\n        require(toAmount > 0, \\\"toAmount is too low\\\");\\n        require(callees.length + 1 == startIndexes.length, \\\"Start indexes must be 1 greater then number of callees\\\");\\n        require(callees.length == values.length, \\\"callees and values must have same length\\\");\\n\\n        //If source token is not ETH than transfer required amount of tokens\\n        //from sender to this contract\\n        transferTokensFromProxy(fromToken, fromAmount, permit);\\n\\n        performCalls(callees, exchangeData, startIndexes, values);\\n\\n        receivedAmount = Utils.tokenBalance(toToken, address(this));\\n\\n        require(receivedAmount >= toAmount, \\\"Received amount of tokens are less then expected\\\");\\n\\n        if (!_isTakeFeeFromSrcToken(feePercent)) {\\n            // take fee from dest token\\n            takeToTokenFeeAndTransfer(toToken, receivedAmount, beneficiary, partner, feePercent);\\n\\n            // Transfer remaining token back to msg.sender\\n            remainingAmount = Utils.tokenBalance(fromToken, address(this));\\n            Utils.transferTokens(fromToken, msg.sender, remainingAmount);\\n        } else {\\n            // Transfer toToken to beneficiary\\n            Utils.transferTokens(toToken, beneficiary, receivedAmount);\\n\\n            // take slippage from src token\\n            remainingAmount = Utils.tokenBalance(fromToken, address(this));\\n            takeFromTokenFeeSlippageAndTransfer(\\n                fromToken,\\n                fromAmount,\\n                expectedAmount,\\n                remainingAmount,\\n                partner,\\n                feePercent\\n            );\\n        }\\n\\n        return (receivedAmount, remainingAmount);\\n    }\\n\\n    function transferTokensFromProxy(\\n        address token,\\n        uint256 amount,\\n        bytes memory permit\\n    ) private {\\n        if (token != Utils.ethAddress()) {\\n            Utils.permit(token, permit);\\n            tokenTransferProxy.transferFrom(token, msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function performCalls(\\n        address[] memory callees,\\n        bytes memory exchangeData,\\n        uint256[] memory startIndexes,\\n        uint256[] memory values\\n    ) private {\\n        for (uint256 i = 0; i < callees.length; i++) {\\n            require(callees[i] != address(tokenTransferProxy), \\\"Can not call TokenTransferProxy Contract\\\");\\n\\n            if (callees[i] == augustusRFQ) {\\n                verifyAugustusRFQParams(startIndexes[i], exchangeData);\\n            } else {\\n                uint256 dataOffset = startIndexes[i];\\n                bytes32 selector;\\n                assembly {\\n                    selector := mload(add(exchangeData, add(dataOffset, 32)))\\n                }\\n                require(bytes4(selector) != IERC20.transferFrom.selector, \\\"transferFrom not allowed for externalCall\\\");\\n            }\\n\\n            bool result = externalCall(\\n                callees[i], //destination\\n                values[i], //value to send\\n                startIndexes[i], // start index of call data\\n                startIndexes[i + 1].sub(startIndexes[i]), // length of calldata\\n                exchangeData // total calldata\\n            );\\n            require(result, \\\"External call failed\\\");\\n        }\\n    }\\n\\n    function verifyAugustusRFQParams(uint256 startIndex, bytes memory exchangeData) private view {\\n        // Load the 4 byte function signature in the lower 32 bits\\n        // Also load the memory address of the calldata params which follow\\n        uint256 sig;\\n        uint256 paramsStart;\\n        assembly {\\n            let tmp := add(exchangeData, startIndex)\\n            // Note that all bytes variables start with 32 bytes length field\\n            sig := shr(224, mload(add(tmp, 32)))\\n            paramsStart := add(tmp, 36)\\n        }\\n        if (\\n            sig == 0x98f9b46b || // fillOrder\\n            sig == 0xbbbc2372 || // fillOrderNFT\\n            sig == 0x00154008 || // fillOrderWithTarget\\n            sig == 0x3c3694ab || // fillOrderWithTargetNFT\\n            sig == 0xc88ae6dc || // partialFillOrder\\n            sig == 0xb28ace5f || // partialFillOrderNFT\\n            sig == 0x24abf828 || // partialFillOrderWithTarget\\n            sig == 0x30201ad3 || // partialFillOrderWithTargetNFT\\n            sig == 0xda6b84af || // partialFillOrderWithTargetPermit\\n            sig == 0xf6c1b371 // partialFillOrderWithTargetPermitNFT\\n        ) {\\n            // First parameter is fixed size (encoded in place) order struct\\n            // with nonceAndMeta being the first field, therefore:\\n            // nonceAndMeta is the first 32 bytes of the ABI encoding\\n            uint256 nonceAndMeta;\\n            assembly {\\n                nonceAndMeta := mload(paramsStart)\\n            }\\n            address userAddress = address(uint160(nonceAndMeta));\\n            require(userAddress == address(0) || userAddress == msg.sender, \\\"unauthorized user\\\");\\n        } else if (\\n            sig == 0x077822bd || // batchFillOrderWithTarget\\n            sig == 0xc8b81d63 || // batchFillOrderWithTargetNFT\\n            sig == 0x1c64b820 || // tryBatchFillOrderTakerAmount\\n            sig == 0x01fb36ba // tryBatchFillOrderMakerAmount\\n        ) {\\n            // First parameter is variable length array of variable size order\\n            // infos where first field of order info is the actual order struct\\n            // (fixed size so encoded in place) which starts with nonceAndMeta.\\n            // Therefore, the nonceAndMeta is the first 32 bytes of order info.\\n            // But we need to find where the order infos start!\\n            // Firstly, we load the offset of the array, and its length\\n            uint256 arrayPtr;\\n            uint256 arrayLength;\\n            uint256 arrayStart;\\n            assembly {\\n                arrayPtr := add(paramsStart, mload(paramsStart))\\n                arrayLength := mload(arrayPtr)\\n                arrayStart := add(arrayPtr, 32)\\n            }\\n            // Each of the words after the array length is an offset from the\\n            // start of the array data, loading this gives us nonceAndMeta\\n            for (uint256 i = 0; i < arrayLength; ++i) {\\n                uint256 nonceAndMeta;\\n                assembly {\\n                    arrayPtr := add(arrayPtr, 32)\\n                    nonceAndMeta := mload(add(arrayStart, mload(arrayPtr)))\\n                }\\n                address userAddress = address(uint160(nonceAndMeta));\\n                require(userAddress == address(0) || userAddress == msg.sender, \\\"unauthorized user\\\");\\n            }\\n        } else {\\n            revert(\\\"unrecognized AugustusRFQ method selector\\\");\\n        }\\n    }\\n\\n    /*solhint-disable no-inline-assembly*/\\n    /**\\n     * @dev Source take from GNOSIS MultiSigWallet\\n     * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\\n     */\\n    function externalCall(\\n        address destination,\\n        uint256 value,\\n        uint256 dataOffset,\\n        uint256 dataLength,\\n        bytes memory data\\n    ) private returns (bool) {\\n        bool result = false;\\n\\n        assembly {\\n            let x := mload(0x40) // \\\"Allocate\\\" memory for output\\n            // (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n\\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                gas(),\\n                destination,\\n                value,\\n                add(d, dataOffset),\\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0 // Output is ignored, therefore the output size is zero\\n            )\\n            // let ptr := mload(0x40)\\n            // let size := returndatasize()\\n            // returndatacopy(ptr, 0, size)\\n            // revert(ptr, size)\\n        }\\n        return result;\\n    }\\n\\n    /*solhint-enable no-inline-assembly*/\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Utils.sol\": {\r\n      \"content\": \"/*solhint-disable avoid-low-level-calls */\\n// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../ITokenTransferProxy.sol\\\";\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IERC20PermitLegacy {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct BuyData {\\n        address adapter;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Route[] route;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee; //NOT USED\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index; //Adapter at which index needs to be used\\n        address targetExchange;\\n        uint256 percent;\\n        bytes payload;\\n        uint256 networkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {\\n        return ETH_ADDRESS;\\n    }\\n\\n    function maxUint() internal pure returns (uint256) {\\n        return MAX_UINT;\\n    }\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint256 allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            } else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n    }\\n\\n    function tokenBalance(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(address token, bytes memory permit) internal {\\n        if (permit.length == 32 * 7) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n\\n        if (permit.length == 32 * 8) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20PermitLegacy.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n    function transferETH(address payable destination, uint256 amount) internal {\\n        if (amount > 0) {\\n            (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n            require(result, \\\"Transfer ETH failed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/routers/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IRouter {\\n    /**\\n     * @dev Certain routers/exchanges needs to be initialized.\\n     * This method will be called from Augustus\\n     */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns unique identifier for the router\\n     */\\n    function getKey() external pure returns (bytes32);\\n\\n    event SwappedV3(\\n        bytes16 uuid,\\n        address partner,\\n        uint256 feePercent,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount,\\n        uint256 expectedAmount\\n    );\\n\\n    event BoughtV3(\\n        bytes16 uuid,\\n        address partner,\\n        uint256 feePercent,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount,\\n        uint256 expectedAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/lib/weth/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external payable virtual;\\n\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/fee/FeeModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../AugustusStorage.sol\\\";\\nimport \\\"../lib/Utils.sol\\\";\\nimport \\\"./IFeeClaimer.sol\\\";\\n// helpers\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract FeeModel is AugustusStorage {\\n    using SafeMath for uint256;\\n\\n    uint256 public immutable partnerSharePercent;\\n    uint256 public immutable maxFeePercent;\\n    IFeeClaimer public immutable feeClaimer;\\n\\n    constructor(\\n        uint256 _partnerSharePercent,\\n        uint256 _maxFeePercent,\\n        IFeeClaimer _feeClaimer\\n    ) public {\\n        partnerSharePercent = _partnerSharePercent;\\n        maxFeePercent = _maxFeePercent;\\n        feeClaimer = _feeClaimer;\\n    }\\n\\n    // feePercent is a packed structure.\\n    // Bits 255-248 = 8-bit version field\\n    //\\n    // Version 0\\n    // =========\\n    // Entire structure is interpreted as the fee percent in basis points.\\n    // If set to 0 then partner will not receive any fees.\\n    //\\n    // Version 1\\n    // =========\\n    // Bits 13-0 = Fee percent in basis points\\n    // Bit 14 = positiveSlippageToUser (positive slippage to partner if not set)\\n    // Bit 15 = if set, take fee from fromToken, toToken otherwise\\n    // Bit 16 = if set, do fee distribution as per referral program\\n\\n    // Used only for SELL (where needs to be done before swap or at the end if not transferring)\\n    function takeFromTokenFee(\\n        address fromToken,\\n        uint256 fromAmount,\\n        address payable partner,\\n        uint256 feePercent\\n    ) internal returns (uint256 newFromAmount) {\\n        uint256 fixedFeeBps = _getFixedFeeBps(partner, feePercent);\\n        if (fixedFeeBps == 0) return fromAmount;\\n        (uint256 partnerShare, uint256 paraswapShare) = _calcFixedFees(fromAmount, fixedFeeBps);\\n        return _distributeFees(fromAmount, fromToken, partner, partnerShare, paraswapShare);\\n    }\\n\\n    // Used only for SELL (where can be done after swap and need to transfer)\\n    function takeFromTokenFeeAndTransfer(\\n        address fromToken,\\n        uint256 fromAmount,\\n        uint256 remainingAmount,\\n        address payable partner,\\n        uint256 feePercent\\n    ) internal {\\n        uint256 fixedFeeBps = _getFixedFeeBps(partner, feePercent);\\n        if (fixedFeeBps != 0) {\\n            (uint256 partnerShare, uint256 paraswapShare) = _calcFixedFees(fromAmount, fixedFeeBps);\\n            remainingAmount = _distributeFees(remainingAmount, fromToken, partner, partnerShare, paraswapShare);\\n        }\\n        Utils.transferTokens(fromToken, msg.sender, remainingAmount);\\n    }\\n\\n    // Used only for BUY\\n    function takeFromTokenFeeSlippageAndTransfer(\\n        address fromToken,\\n        uint256 fromAmount,\\n        uint256 expectedAmount,\\n        uint256 remainingAmount,\\n        address payable partner,\\n        uint256 feePercent\\n    ) internal {\\n        uint256 fixedFeeBps = _getFixedFeeBps(partner, feePercent);\\n        uint256 slippage = _calcSlippage(fixedFeeBps, expectedAmount, fromAmount.sub(remainingAmount));\\n        uint256 partnerShare;\\n        uint256 paraswapShare;\\n        if (fixedFeeBps != 0) {\\n            (partnerShare, paraswapShare) = _calcFixedFees(expectedAmount, fixedFeeBps);\\n        }\\n        if (slippage != 0) {\\n            (uint256 partnerShare2, uint256 paraswapShare2) = _calcSlippageFees(slippage, partner, feePercent);\\n            partnerShare = partnerShare.add(partnerShare2);\\n            paraswapShare = paraswapShare.add(paraswapShare2);\\n        }\\n        Utils.transferTokens(\\n            fromToken,\\n            msg.sender,\\n            _distributeFees(remainingAmount, fromToken, partner, partnerShare, paraswapShare)\\n        );\\n    }\\n\\n    // Used only for SELL\\n    function takeToTokenFeeSlippageAndTransfer(\\n        address toToken,\\n        uint256 expectedAmount,\\n        uint256 receivedAmount,\\n        address payable beneficiary,\\n        address payable partner,\\n        uint256 feePercent\\n    ) internal {\\n        uint256 fixedFeeBps = _getFixedFeeBps(partner, feePercent);\\n        uint256 slippage = _calcSlippage(fixedFeeBps, receivedAmount, expectedAmount);\\n        uint256 partnerShare;\\n        uint256 paraswapShare;\\n        if (fixedFeeBps != 0) {\\n            (partnerShare, paraswapShare) = _calcFixedFees(\\n                slippage != 0 ? expectedAmount : receivedAmount,\\n                fixedFeeBps\\n            );\\n        }\\n        if (slippage != 0) {\\n            (uint256 partnerShare2, uint256 paraswapShare2) = _calcSlippageFees(slippage, partner, feePercent);\\n            partnerShare = partnerShare.add(partnerShare2);\\n            paraswapShare = paraswapShare.add(paraswapShare2);\\n        }\\n        Utils.transferTokens(\\n            toToken,\\n            beneficiary,\\n            _distributeFees(receivedAmount, toToken, partner, partnerShare, paraswapShare)\\n        );\\n    }\\n\\n    // Used only for BUY\\n    function takeToTokenFeeAndTransfer(\\n        address toToken,\\n        uint256 receivedAmount,\\n        address payable beneficiary,\\n        address payable partner,\\n        uint256 feePercent\\n    ) internal {\\n        uint256 fixedFeeBps = _getFixedFeeBps(partner, feePercent);\\n        if (fixedFeeBps != 0) {\\n            (uint256 partnerShare, uint256 paraswapShare) = _calcFixedFees(receivedAmount, fixedFeeBps);\\n            receivedAmount = _distributeFees(receivedAmount, toToken, partner, partnerShare, paraswapShare);\\n        }\\n        Utils.transferTokens(toToken, beneficiary, receivedAmount);\\n    }\\n\\n    function _getFixedFeeBps(address partner, uint256 feePercent) private view returns (uint256 fixedFeeBps) {\\n        if (partner == address(0)) return 0;\\n        uint256 version = feePercent >> 248;\\n        if (version == 0) {\\n            fixedFeeBps = feePercent;\\n        } else if ((feePercent & (1 << 16)) != 0) {\\n            // Referrer program only has slippage fees\\n            return 0;\\n        } else {\\n            fixedFeeBps = feePercent & 0x3FFF;\\n        }\\n        return fixedFeeBps > maxFeePercent ? maxFeePercent : fixedFeeBps;\\n    }\\n\\n    function _calcSlippage(\\n        uint256 fixedFeeBps,\\n        uint256 positiveAmount,\\n        uint256 negativeAmount\\n    ) private pure returns (uint256 slippage) {\\n        return (fixedFeeBps <= 50 && positiveAmount > negativeAmount) ? positiveAmount.sub(negativeAmount) : 0;\\n    }\\n\\n    function _calcFixedFees(uint256 amount, uint256 fixedFeeBps)\\n        private\\n        view\\n        returns (uint256 partnerShare, uint256 paraswapShare)\\n    {\\n        uint256 fee = amount.mul(fixedFeeBps).div(10000);\\n        partnerShare = fee.mul(partnerSharePercent).div(10000);\\n        paraswapShare = fee.sub(partnerShare);\\n    }\\n\\n    function _calcSlippageFees(\\n        uint256 slippage,\\n        address partner,\\n        uint256 feePercent\\n    ) private pure returns (uint256 partnerShare, uint256 paraswapShare) {\\n        paraswapShare = slippage.div(2);\\n        if (partner != address(0)) {\\n            uint256 version = feePercent >> 248;\\n            if (version != 0) {\\n                if ((feePercent & (1 << 16)) != 0) {\\n                    uint256 feeBps = feePercent & 0x3FFF;\\n                    partnerShare = paraswapShare.mul(feeBps > 10000 ? 10000 : feeBps).div(10000);\\n                } else if ((feePercent & (1 << 14)) == 0) {\\n                    partnerShare = paraswapShare;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _distributeFees(\\n        uint256 currentBalance,\\n        address token,\\n        address payable partner,\\n        uint256 partnerShare,\\n        uint256 paraswapShare\\n    ) private returns (uint256 newBalance) {\\n        uint256 totalFees = partnerShare.add(paraswapShare);\\n        if (totalFees == 0) return currentBalance;\\n\\n        require(totalFees <= currentBalance, \\\"Insufficient balance to pay for fees\\\");\\n\\n        Utils.transferTokens(token, payable(address(feeClaimer)), totalFees);\\n        if (partnerShare != 0) {\\n            feeClaimer.registerFee(partner, IERC20(token), partnerShare);\\n        }\\n        if (paraswapShare != 0) {\\n            feeClaimer.registerFee(feeWallet, IERC20(token), paraswapShare);\\n        }\\n\\n        return currentBalance.sub(totalFees);\\n    }\\n\\n    function _isTakeFeeFromSrcToken(uint256 feePercent) internal pure returns (bool) {\\n        return feePercent >> 248 != 0 && (feePercent & (1 << 15)) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/fee/IFeeClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeeClaimer {\\n    /**\\n     * @notice register partner's, affiliate's and PP's fee\\n     * @dev only callable by AugustusSwapper contract\\n     * @param _account account address used to withdraw fees\\n     * @param _token token address\\n     * @param _fee fee amount in token\\n     */\\n    function registerFee(\\n        address _account,\\n        IERC20 _token,\\n        uint256 _fee\\n    ) external;\\n\\n    /**\\n     * @notice claim partner share fee in ERC20 token\\n     * @dev transfers ERC20 token balance to the caller's account\\n     *      the call will fail if withdrawer have zero balance in the contract\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address\\n     * @return true if the withdraw was successfull\\n     */\\n    function withdrawAllERC20(IERC20 _token, address _recipient) external returns (bool);\\n\\n    /**\\n     * @notice batch claim whole balance of fee share amount\\n     * @dev transfers ERC20 token balance to the caller's account\\n     *      the call will fail if withdrawer have zero balance in the contract\\n     * @param _tokens list of addresses of the ERC20 token\\n     * @param _recipient address of recipient\\n     * @return true if the withdraw was successfull\\n     */\\n    function batchWithdrawAllERC20(IERC20[] calldata _tokens, address _recipient) external returns (bool);\\n\\n    /**\\n     * @notice claim some partner share fee in ERC20 token\\n     * @dev transfers ERC20 token amount to the caller's account\\n     *      the call will fail if withdrawer have zero balance in the contract\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address\\n     * @return true if the withdraw was successfull\\n     */\\n    function withdrawSomeERC20(\\n        IERC20 _token,\\n        uint256 _tokenAmount,\\n        address _recipient\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice batch claim some amount of fee share in ERC20 token\\n     * @dev transfers ERC20 token balance to the caller's account\\n     *      the call will fail if withdrawer have zero balance in the contract\\n     * @param _tokens address of the ERC20 tokens\\n     * @param _tokenAmounts array of amounts\\n     * @param _recipient destination account addresses\\n     * @return true if the withdraw was successfull\\n     */\\n    function batchWithdrawSomeERC20(\\n        IERC20[] calldata _tokens,\\n        uint256[] calldata _tokenAmounts,\\n        address _recipient\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice compute unallocated fee in token\\n     * @param _token address of the ERC20 token\\n     * @return amount of unallocated token in fees\\n     */\\n    function getUnallocatedFees(IERC20 _token) external view returns (uint256);\\n\\n    /**\\n     * @notice returns unclaimed fee amount given the token\\n     * @dev retrieves the balance of ERC20 token fee amount for a partner\\n     * @param _token address of the ERC20 token\\n     * @param _partner account address of the partner\\n     * @return amount of balance\\n     */\\n    function getBalance(IERC20 _token, address _partner) external view returns (uint256);\\n\\n    /**\\n     * @notice returns unclaimed fee amount given the token in batch\\n     * @dev retrieves the balance of ERC20 token fee amount for a partner in batch\\n     * @param _tokens list of ERC20 token addresses\\n     * @param _partner account address of the partner\\n     * @return _fees array of the token amount\\n     */\\n    function batchGetBalance(IERC20[] calldata _tokens, address _partner)\\n        external\\n        view\\n        returns (uint256[] memory _fees);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface ITokenTransferProxy {\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AugustusStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"./ITokenTransferProxy.sol\\\";\\n\\ncontract AugustusStorage {\\n    struct FeeStructure {\\n        uint256 partnerShare;\\n        bool noPositiveSlippage;\\n        bool positiveSlippageToUser;\\n        uint16 feePercent;\\n        string partnerId;\\n        bytes data;\\n    }\\n\\n    ITokenTransferProxy internal tokenTransferProxy;\\n    address payable internal feeWallet;\\n\\n    mapping(address => FeeStructure) internal registeredPartners;\\n\\n    mapping(bytes4 => address) internal selectorVsRouter;\\n    mapping(bytes32 => bool) internal adapterInitialized;\\n    mapping(bytes32 => bytes) internal adapterVsData;\\n\\n    mapping(bytes32 => bytes) internal routerData;\\n    mapping(bytes32 => bool) internal routerInitialized;\\n\\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\\\"WHITELISTED_ROLE\\\");\\n\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partnerSharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IFeeClaimer\",\"name\":\"_feeClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_augustusRFQ\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"SwappedV3\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"augustusRFQ\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeClaimer\",\"outputs\":[{\"internalType\":\"contract IFeeClaimer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerSharePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"}],\"internalType\":\"struct Utils.SimpleData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"simpleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"}],\"internalType\":\"struct Utils.SimpleData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"simpleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SimpleSwap", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000ef13101c5bbd737cfb2bf00bbd38c626ad6952f7000000000000000000000000e92b586627cca7a83dc919cc7127196d70f55a06", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}