{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Elders/EldersInventoryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n//import \\\"hardhat/console.sol\\\"; ///REMOVE BEFORE DEPLOYMENT\\r\\n//v 1.0.3\\r\\nimport \\\"./EldersDataStructures.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n\\r\\ncontract EldersInventoryManager {\\r\\n\\r\\n    using EldersDataStructures for EldersDataStructures.EldersMeta;\\r\\n    struct EldersInventoryItem {\\r\\n           string folder;\\r\\n           string name;          \\r\\n    }\\r\\n\\r\\n    string public constant header = '<svg id=\\\"elf\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 160 160\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">';\\r\\n    string public constant footer = \\\"<style>#elf{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>\\\";\\r\\n    \\r\\n    string[6] public CLASS;\\r\\n    string[6] public LAYERS;\\r\\n    string[8] public ATTRIBUTES;\\r\\n    string[5] public DISPLAYTYPES;\\r\\n    uint256[6] public RACE_CODE;\\r\\n    uint256[6] public BODY_CODE;\\r\\n    uint256[6] public HEAD_CODE;\\r\\n    uint256[6] public PRIMARY_WEAPON_CODE;\\r\\n    uint256[6] public SECONDARY_WEAPON_CODE;\\r\\n    uint256[6] public ARMOR_CODE;\\r\\n\\r\\n    //layer code, followed by itemId\\r\\n    mapping(uint256 => EldersInventoryItem) public EldersInventory;    \\r\\n    \\r\\n    bool isInitialized;\\r\\n    address admin;\\r\\n    string ipfsBase;\\r\\n    \\r\\nfunction initialize() public {\\r\\n    admin = msg.sender;\\r\\n    isInitialized = true;\\r\\n    CLASS = [\\\"Druid\\\", \\\"Sorceress\\\", \\\"Ranger\\\", \\\"Assassin\\\", \\\"Berserker\\\", \\\"Mauler\\\"];\\r\\n    LAYERS = [\\\"Primary Weapon\\\",\\\"Race\\\", \\\"Body\\\", \\\"Head\\\", \\\"Armor\\\", \\\"Secondary Weapon\\\"];\\r\\n    ATTRIBUTES = [\\\"Strength\\\", \\\"Agility\\\", \\\"Intellegence\\\", \\\"Attack Points\\\",\\\"Health Points\\\",\\\"Mana\\\"];\\r\\n    DISPLAYTYPES = [\\\"boost_number\\\", \\\"boost_percentage\\\", \\\"date\\\", \\\"number\\\", \\\"\\\"];\\r\\n    \\r\\n    RACE_CODE = [700,800,900,1000,1100,1200];\\r\\n    BODY_CODE = [1300,1400,1500,1600,1700,1800];\\r\\n    HEAD_CODE = [1900,2000,2100,2200,2300,2400];\\r\\n    PRIMARY_WEAPON_CODE = [2500,2600,2700,2800,2900,3000];\\r\\n    SECONDARY_WEAPON_CODE =[3100,3200,3300,3400,3500,3600];\\r\\n    ARMOR_CODE = [3700,3800,3900,4000,4100,4200];\\r\\n\\r\\n    ipfsBase = \\\"https://huskies.mypinata.cloud/ipfs/\\\";\\r\\n}\\r\\n\\r\\nfunction setIPFSBase (string calldata _ipfsBase) public {\\r\\n    onlyOwner();\\r\\n    ipfsBase = _ipfsBase;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addItem(uint256 [] calldata itemId, string[] memory name, string calldata folder ) public {    \\r\\n    onlyOwner();    \\r\\n    for(uint i = 0; i < itemId.length; i++) {       \\r\\n  \\r\\n        EldersInventory[itemId[i]].folder = folder;\\r\\n        EldersInventory[itemId[i]].name = name[i];       \\r\\n        \\r\\n    }    \\r\\n\\r\\n}\\r\\n\\r\\n \\r\\nfunction getTokenURI(uint16 id_, uint256 elder, bool isRevealed)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n\\r\\n        //\\r\\n        //\\r\\n        bytes memory imageSvg = abi.encodePacked('\\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(getSVG(elder))),'\\\",');\\r\\n        bytes memory imagePng = abi.encodePacked('\\\"image\\\": \\\"https://imagedelivery.net/UsEuOeZz7eUzV1E1xlJ0hw/d34b45a8-fe1f-488d-e0d6-3cb6941a0600/public\\\",');\\r\\n        bytes memory name = abi.encodePacked( '\\\"name\\\":\\\"Elder #', toString(id_),'\\\",');\\r\\n        bytes memory description = abi.encodePacked('\\\"description\\\":\\\"Etherna Elves Elders is a collection of 2222 Heroes roaming the Elvenverse in search of the Mires. Play Ethernal Elves to upgrade your abilities and grow your army. !onward\\\",');\\r\\n        \\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{',\\r\\n                                name,\\r\\n                                description,\\r\\n                                isRevealed ? imageSvg : imagePng,                                \\r\\n                                isRevealed ? getAttributes(elder) : '\\\"attributes\\\": [{\\\"trait_type\\\":\\\"DNA\\\",\\\"value\\\":\\\"',toString(elder), '\\\"}]',                                                                   \\r\\n                                '}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n     function getSVG(uint256 elder) public view returns (string memory) {\\r\\n      \\r\\n      EldersDataStructures.EldersMeta memory item = EldersDataStructures.getElder(elder);\\r\\n      uint256 elderClass = item.elderClass; \\r\\n\\r\\n      string memory elder =  string(\\r\\n                abi.encodePacked(\\r\\n                    header,\\r\\n                    get(PRIMARY_WEAPON_CODE[elderClass], uint(item.primaryWeapon)),\\r\\n                    get(RACE_CODE[elderClass], uint(item.race) ),\\r\\n                    get(BODY_CODE[elderClass], uint(item.body) ),\\r\\n                    get(HEAD_CODE[elderClass], uint(item.head) ),\\r\\n                    get(ARMOR_CODE[elderClass], uint(item.armor)),\\r\\n                    get(SECONDARY_WEAPON_CODE[elderClass], uint(item.secondaryWeapon)),                                  \\r\\n                    footer\\r\\n                )\\r\\n            );\\r\\n\\r\\n        return elder;          \\r\\n    }\\r\\n\\r\\n     function getAttributes(uint256 elder) internal view returns (string memory) {\\r\\n        \\r\\n        EldersDataStructures.EldersMeta memory item = EldersDataStructures.getElder(elder);\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '\\\"attributes\\\": [',\\r\\n                    string.concat('{\\\"trait_type\\\":\\\"Class\\\",\\\"value\\\":\\\"',CLASS[item.elderClass], '\\\"}'),\\r\\n                    \\\",\\\",\\r\\n                    getLayerAttributes(elder),                    \\r\\n                    \\\",\\\",\\r\\n                    getValueAttributes(elder),                 \\r\\n                    \\\"]\\\"\\r\\n                )\\r\\n            );\\r\\n        \\r\\n    }\\r\\n\\r\\n     function getLayerAttributes(uint256 elder) internal view returns (string memory) {\\r\\n        EldersDataStructures.EldersMeta memory item = EldersDataStructures.getElder(elder);       \\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    getLayerAttribute(0, uint8(item.primaryWeapon), PRIMARY_WEAPON_CODE[item.elderClass]),\\r\\n                    \\\",\\\",\\r\\n                    getLayerAttribute(1, uint8(item.race), RACE_CODE[item.elderClass]),                    \\r\\n                    \\\",\\\",\\r\\n                    getLayerAttribute(2, uint8(item.body), BODY_CODE[item.elderClass]),                    \\r\\n                    \\\",\\\",\\r\\n                    getLayerAttribute(3, uint8(item.head), HEAD_CODE[item.elderClass]),                    \\r\\n                    \\\",\\\",\\r\\n                    getLayerAttribute(4, uint8(item.armor), ARMOR_CODE[item.elderClass]),\\r\\n                    \\\",\\\",\\r\\n                    getLayerAttribute(5, uint8(item.secondaryWeapon), SECONDARY_WEAPON_CODE[item.elderClass])                \\r\\n                )\\r\\n            );            \\r\\n    }\\r\\n\\r\\n    function getValueAttributes(uint256 elder) internal view returns (string memory) {\\r\\n        EldersDataStructures.EldersMeta memory item = EldersDataStructures.getElder(elder);\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    getValueAttribute(0, uint8(item.strength), 3),                   \\r\\n                    \\\",\\\",\\r\\n                    getValueAttribute(1, uint8(item.agility), 3),                   \\r\\n                    \\\",\\\",\\r\\n                    getValueAttribute(2, uint8(item.intellegence), 3),                   \\r\\n                    \\\",\\\",\\r\\n                    getValueAttribute(3, uint8(item.attackPoints), 0),                   \\r\\n                    \\\",\\\",\\r\\n                    getValueAttribute(4, uint8(item.healthPoints), 0),                   \\r\\n                    \\\",\\\",\\r\\n                    getValueAttribute(5, uint8(item.mana), 0)\\r\\n                )\\r\\n            );\\r\\n            \\r\\n    }\\r\\n\\r\\n    function getItem(uint256 itemId) external returns(EldersInventoryItem memory item) {\\r\\n        return EldersInventory[itemId];\\r\\n    }\\r\\n\\r\\n   function getLayerAttribute(uint256 layerId, uint256 code, uint256 itemId)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 identifier = code + itemId;\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"',\\r\\n                    LAYERS[layerId],\\r\\n                    '\\\",\\\"value\\\":\\\"',\\r\\n                    EldersInventory[identifier].name,\\r\\n                    '\\\"}'                    \\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getValueAttribute(uint8 attributeId, uint8 value, uint8 displayType)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"trait_type\\\":\\\"',\\r\\n                    ATTRIBUTES[attributeId],\\r\\n                    '\\\",\\\"value\\\":\\\"',\\r\\n                    toString(value),\\r\\n                    '\\\", \\\"display_type\\\":\\\"',\\r\\n                    DISPLAYTYPES[displayType],\\r\\n                    '\\\"}'                    \\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n/*\\r\\n\\r\\n\u2588\u2580\u2584\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\\r\\n\u2588\u2591\u2580\u2591\u2588\u2003\u2588\u2584\u2588\u2003\u2588\u2584\u2580\u2003\u2588\u2003\u2588\u2580\u2591\u2003\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2584\u2588\\r\\n*/\\r\\n\\r\\n    function onlyOwner() internal view {    \\r\\n        require(admin == msg.sender, \\\"not admin\\\");\\r\\n    }\\r\\n\\r\\n   \\r\\n/*\\r\\n\\r\\n\u2588\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2591\u2591\u2003\u2588\u2580\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2588\u2580\\r\\n\u2588\u2580\u2588\u2003\u2588\u2588\u2584\u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2580\u2003\u2588\u2588\u2584\u2003\u2588\u2580\u2584\u2003\u2584\u2588\\r\\n*/\\r\\n\\r\\nfunction get(uint256 code, uint256 itemId) internal view returns (string memory data_)\\r\\n{       \\r\\n        uint256 identifier = code + itemId;    \\r\\n\\r\\n        string memory folderName = EldersInventory[identifier].folder;\\r\\n        string memory fileName = string.concat(toString(identifier), \\\".png\\\"); \\r\\n        string memory ipfs = string.concat(ipfsBase,folderName,\\\"/\\\",fileName);\\r\\n\\r\\n        data_ = string(\\r\\n                abi.encodePacked(\\r\\n                    '<image x=\\\"1\\\" y=\\\"1\\\" width=\\\"160\\\" height=\\\"160\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" href=\\\"',\\r\\n                    ipfs,\\r\\n                    '\\\"/>'\\r\\n                )\\r\\n            );\\r\\n         \\r\\n        return data_;\\r\\n}\\r\\n\\r\\nfunction toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @notice NOT BUILT BY ETHERNAL ELVES TEAM.\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Elders/EldersDataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nlibrary EldersDataStructures {\\r\\n\\r\\nstruct EldersMeta {\\r\\n            uint256 strength;\\r\\n            uint256 agility;\\r\\n            uint256 intellegence;\\r\\n            uint256 healthPoints;\\r\\n            uint256 attackPoints; \\r\\n            uint256 mana;\\r\\n            uint256 primaryWeapon; \\r\\n            uint256 secondaryWeapon; \\r\\n            uint256 armor; \\r\\n            uint256 level;\\r\\n            uint256 head;                       \\r\\n            uint256 body;  \\r\\n            uint256 race;  \\r\\n            uint256 elderClass;                                     \\r\\n}\\r\\n\\r\\n  \\r\\nfunction getElder(uint256 _elder) internal pure returns(EldersMeta memory elder) {\\r\\n\\r\\n    elder.strength =         uint256(uint16(_elder));\\r\\n    elder.agility =          uint256(uint16(_elder>>16));\\r\\n    elder.intellegence =     uint256(uint16(_elder>>32));\\r\\n    elder.attackPoints =     uint256(uint16(_elder>>48));\\r\\n    elder.healthPoints =     uint256(uint16(_elder>>64));\\r\\n    elder.mana =             uint256(uint16(_elder>>80));\\r\\n    elder.primaryWeapon =    uint256(uint16(_elder>>96));\\r\\n    elder.secondaryWeapon =  uint256(uint16(_elder>>112));\\r\\n    elder.armor =            uint256(uint16(_elder>>128));\\r\\n    elder.level =            uint256(uint16(_elder>>144));\\r\\n    elder.head =             uint256(uint16(_elder>>160));\\r\\n    elder.body =             uint256(uint16(_elder>>176));\\r\\n    elder.race =             uint256(uint16(_elder>>192));\\r\\n    elder.elderClass =       uint256(uint16(_elder>>208));    \\r\\n\\r\\n} \\r\\n\\r\\nfunction setElder(\\r\\n                uint256 strength,\\r\\n                uint256 agility,\\r\\n                uint256 intellegence,                \\r\\n                uint256 attackPoints,\\r\\n                uint256 healthPoints, \\r\\n                uint256 mana,\\r\\n                uint256 primaryWeapon, \\r\\n                uint256 secondaryWeapon,\\r\\n                uint256 armor,\\r\\n                uint256 level,\\r\\n                uint256 head,\\r\\n                uint256 body,\\r\\n                uint256 race,\\r\\n                uint256 elderClass )\\r\\n\\r\\n    internal pure returns (uint256 character) {\\r\\n\\r\\n    character = uint256(strength);\\r\\n    \\r\\n    character |= agility<<16;\\r\\n    character |= intellegence<<32;\\r\\n    character |= attackPoints<<48;\\r\\n    character |= healthPoints<<64;\\r\\n    character |= mana<<80;\\r\\n    character |= primaryWeapon<<96;\\r\\n    character |= secondaryWeapon<<112;\\r\\n    character |= armor<<128;\\r\\n    character |= level<<144;\\r\\n    character |= head<<160;\\r\\n    character |= body<<176;\\r\\n    character |= race<<192;\\r\\n    character |= elderClass<<208;\\r\\n    \\r\\n    return character;\\r\\n}\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/Elders/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IERC20Lite {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function burn(address from, uint256 value) external;\\r\\n    function mint(address to, uint256 value) external; \\r\\n    function approve(address spender, uint256 value) external returns (bool); \\r\\n    function balanceOf(address account) external returns (uint256); \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\\r\\ninterface IElfMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IEldersMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel, bool isRevealed) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ICampaigns {\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory);\\r\\n}\\r\\n\\r\\ninterface IElves {    \\r\\n    function prismBridge(uint256[] calldata id, uint256[] calldata sentinel, address owner) external;    \\r\\n    function exitElf(uint256[] calldata ids, address owner) external;\\r\\n    function setAccountBalance(address _owner, uint256 _amount, bool _subtract, uint256 _index) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Lite {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\ninterface IERC1155Lite {\\r\\n    function burn(address from,uint256 id, uint256 value) external;\\r\\n    function balanceOf(address _owner, uint256 _id) external returns (uint256); \\r\\n}\\r\\n\\r\\n \\r\\n//1155\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n  function setApprovalForAll(address _operator, bool _approved) external;\\r\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n}\\r\\n\\r\\ninterface IERC1155Metadata {\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n  function uri(uint256 _id) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\r\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ARMOR_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ATTRIBUTES\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BODY_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CLASS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DISPLAYTYPES\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EldersInventory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"folder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HEAD_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LAYERS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRIMARY_WEAPON_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RACE_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SECONDARY_WEAPON_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemId\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"folder\",\"type\":\"string\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"footer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"folder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct EldersInventoryManager.EldersInventoryItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"elder\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"elder\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevealed\",\"type\":\"bool\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"header\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsBase\",\"type\":\"string\"}],\"name\":\"setIPFSBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EldersInventoryManager", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}