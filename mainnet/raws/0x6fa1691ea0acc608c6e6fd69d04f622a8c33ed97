{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal initializer {\r\n        __ERC165_init_unchained();\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\r\n    using AddressUpgradeable for address;\r\n    using StringsUpgradeable for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC165_init_unchained();\r\n        __ERC721_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\r\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\r\n     * @param tokenId - the NFT asset queried for royalty information\r\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary CountersUpgradeable {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/gwei-slim-nft-contracts/contracts/base/IBaseERC721Interface.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n/// Additional features and functions assigned to the\r\n/// Base721 contract for hooks and overrides\r\ninterface IBaseERC721Interface {\r\n    /*\r\n     Exposing common NFT internal functionality for base contract overrides\r\n     To save gas and make API cleaner this is only for new functionality not exposed in\r\n     the core ERC721 contract\r\n    */\r\n\r\n    /// Mint an NFT. Allowed to mint by owner, approval or by the parent contract\r\n    /// @param tokenId id to burn\r\n    function __burn(uint256 tokenId) external;\r\n\r\n    /// Mint an NFT. Allowed only by the parent contract\r\n    /// @param to address to mint to\r\n    /// @param tokenId token id to mint\r\n    function __mint(address to, uint256 tokenId) external;\r\n\r\n    /// Set the base URI of the contract. Allowed only by parent contract\r\n    /// @param base base uri\r\n    /// @param extension extension\r\n    function __setBaseURI(string memory base, string memory extension) external;\r\n\r\n    /* Exposes common internal read features for public use */\r\n\r\n    /// Token exists\r\n    /// @param tokenId token id to see if it exists\r\n    function __exists(uint256 tokenId) external view returns (bool);\r\n\r\n    /// Simple approval for operation check on token for address\r\n    /// @param spender address spending/changing token\r\n    /// @param tokenId tokenID to change / operate on\r\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function __isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function __tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function __owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/gwei-slim-nft-contracts/contracts/base/ERC721Base.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\nstruct ConfigSettings {\r\n    uint16 royaltyBps;\r\n    string uriBase;\r\n    string uriExtension;\r\n    bool hasTransferHook;\r\n}\r\n\r\n/**\r\n    This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior\r\n    while also implementing all normal ERC721 functions as expected\r\n*/\r\ncontract ERC721Base is\r\n    ERC721Upgradeable,\r\n    IBaseERC721Interface,\r\n    IERC2981Upgradeable,\r\n    OwnableUpgradeable\r\n{\r\n    using CountersUpgradeable for CountersUpgradeable.Counter;\r\n    // Minted counter for totalSupply()\r\n    CountersUpgradeable.Counter private mintedCounter;\r\n\r\n    modifier onlyInternal() {\r\n        require(msg.sender == address(this), \"Only internal\");\r\n        _;\r\n    }\r\n\r\n    /// on-chain record of when this contract was deployed\r\n    uint256 public immutable deployedBlock;\r\n\r\n    ConfigSettings public advancedConfig;\r\n\r\n    /// Constructor called once when the base contract is deployed\r\n    constructor() {\r\n        // Can be used to verify contract implementation is correct at address\r\n        deployedBlock = block.number;\r\n    }\r\n\r\n    /// Initializer that's called when a new child nft is setup\r\n    /// @param newOwner Owner for the new derived nft\r\n    /// @param _name name of NFT contract\r\n    /// @param _symbol symbol of NFT contract\r\n    /// @param settings configuration settings for uri, royalty, and hooks features\r\n    function initialize(\r\n        address newOwner,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        ConfigSettings memory settings\r\n    ) public initializer {\r\n        __ERC721_init(_name, _symbol);\r\n        __Ownable_init();\r\n\r\n        advancedConfig = settings;\r\n\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    /// Getter to expose appoval status to root contract\r\n    function isApprovedForAll(address _owner, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            ERC721Upgradeable.isApprovedForAll(_owner, operator) ||\r\n            operator == address(this);\r\n    }\r\n\r\n    /// internal getter for approval by all\r\n    /// When isApprovedForAll is overridden, this can be used to call original impl\r\n    function __isApprovedForAll(address _owner, address operator)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return isApprovedForAll(_owner, operator);\r\n    }\r\n\r\n    /// Hook that when enabled manually calls _beforeTokenTransfer on\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override {\r\n        if (advancedConfig.hasTransferHook) {\r\n            (bool success, ) = address(this).delegatecall(\r\n                abi.encodeWithSignature(\r\n                    \"_beforeTokenTransfer(address,address,uint256)\",\r\n                    from,\r\n                    to,\r\n                    tokenId\r\n                )\r\n            );\r\n            // Raise error again from result if error exists\r\n            assembly {\r\n                switch success\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Internal-only function to update the base uri\r\n    function __setBaseURI(string memory uriBase, string memory uriExtension)\r\n        public\r\n        override\r\n        onlyInternal\r\n    {\r\n        advancedConfig.uriBase = uriBase;\r\n        advancedConfig.uriExtension = uriExtension;\r\n    }\r\n\r\n    /// @dev returns the number of minted tokens\r\n    /// uses some extra gas but makes etherscan and users happy so :shrug:\r\n    /// partial erc721enumerable implemntation\r\n    function totalSupply() public view returns (uint256) {\r\n        return mintedCounter.current();\r\n    }\r\n\r\n    /**\r\n      Internal-only\r\n      @param to address to send the newly minted NFT to\r\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\r\n     */\r\n    function __mint(address to, uint256 tokenId)\r\n        external\r\n        override\r\n        onlyInternal\r\n    {\r\n        _mint(to, tokenId);\r\n        mintedCounter.increment();\r\n    }\r\n\r\n    /**\r\n        @param tokenId Token ID to burn\r\n        User burn function for token id \r\n     */\r\n    function burn(uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not allowed\");\r\n        _burn(tokenId);\r\n        mintedCounter.decrement();\r\n    }\r\n\r\n    /// Internal only\r\n    function __burn(uint256 tokenId) public onlyInternal {\r\n        _burn(tokenId);\r\n        mintedCounter.decrement();\r\n    }\r\n\r\n    /**\r\n        Simple override for owner interface.\r\n     */\r\n    function owner()\r\n        public\r\n        view\r\n        override(OwnableUpgradeable)\r\n        returns (address)\r\n    {\r\n        return super.owner();\r\n    }\r\n\r\n    /// internal alias for overrides\r\n    function __owner()\r\n        public\r\n        view\r\n        override(IBaseERC721Interface)\r\n        returns (address)\r\n    {\r\n        return owner();\r\n    }\r\n\r\n    /// Get royalty information for token\r\n    /// ignored token id to get royalty info. able to override and set per-token royalties\r\n    /// @param _salePrice sales price for token to determine royalty split\r\n    function royaltyInfo(uint256, uint256 _salePrice)\r\n        external\r\n        view\r\n        override\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        // If ownership is revoked, don't set royalties.\r\n        if (owner() == address(0x0)) {\r\n            return (owner(), 0);\r\n        }\r\n        return (owner(), (_salePrice * advancedConfig.royaltyBps) / 10_000);\r\n    }\r\n\r\n    /// Default simple token-uri implementation. works for ipfs folders too\r\n    /// @param tokenId token id ot get uri for\r\n    /// @return default uri getter functionality\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"No token\");\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    advancedConfig.uriBase,\r\n                    StringsUpgradeable.toString(tokenId),\r\n                    advancedConfig.uriExtension\r\n                )\r\n            );\r\n    }\r\n\r\n    /// internal base override\r\n    function __tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        onlyInternal\r\n        returns (string memory)\r\n    {\r\n        return tokenURI(tokenId);\r\n    }\r\n\r\n    /// Exposing token exists check for base contract\r\n    function __exists(uint256 tokenId) external view override returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    /// Getter for approved or owner\r\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\r\n        external\r\n        view\r\n        override\r\n        onlyInternal\r\n        returns (bool)\r\n    {\r\n        return _isApprovedOrOwner(spender, tokenId);\r\n    }\r\n\r\n    /// IERC165 getter\r\n    /// @param interfaceId interfaceId bytes4 to check support for\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721Upgradeable, IERC165Upgradeable)\r\n        returns (bool)\r\n    {\r\n        return\r\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\r\n            type(IBaseERC721Interface).interfaceId == interfaceId ||\r\n            ERC721Upgradeable.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/gwei-slim-nft-contracts/contracts/base/ERC721Delegated.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract ERC721Delegated {\r\n    uint256[100000] gap;\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\r\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    // Reference to base NFT implementation\r\n    function implementation() public view returns (address) {\r\n        return\r\n            StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    function _initImplementation(address _nftImplementation) private {\r\n        StorageSlotUpgradeable\r\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\r\n            .value = _nftImplementation;\r\n    }\r\n\r\n    /// Constructor that sets up the\r\n    constructor(\r\n        address _nftImplementation,\r\n        string memory name,\r\n        string memory symbol,\r\n        ConfigSettings memory settings\r\n    ) {\r\n        /// Removed for gas saving reasons, the check below implictly accomplishes this\r\n        // require(\r\n        //     _nftImplementation.supportsInterface(\r\n        //         type(IBaseERC721Interface).interfaceId\r\n        //     )\r\n        // );\r\n        _initImplementation(_nftImplementation);\r\n        (bool success, ) = _nftImplementation.delegatecall(\r\n            abi.encodeWithSignature(\r\n                \"initialize(address,string,string,(uint16,string,string,bool))\",\r\n                msg.sender,\r\n                name,\r\n                symbol,\r\n                settings\r\n            )\r\n        );\r\n        require(success);\r\n    }\r\n\r\n    /// OnlyOwner implemntation that proxies to base ownable contract for info\r\n    modifier onlyOwner() {\r\n        require(msg.sender == base().__owner(), \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    /// Getter to return the base implementation contract to call methods from\r\n    /// Don't expose base contract to parent due to need to call private internal base functions\r\n    function base() private view returns (IBaseERC721Interface) {\r\n        return IBaseERC721Interface(address(this));\r\n    }\r\n\r\n    // helpers to mimic Openzeppelin internal functions\r\n\r\n    /// Getter for the contract owner\r\n    /// @return address owner address\r\n    function _owner() internal view returns (address) {\r\n        return base().__owner();\r\n    }\r\n\r\n    /// Internal burn function, only accessible from within contract\r\n    /// @param id nft id to burn\r\n    function _burn(uint256 id) internal {\r\n        base().__burn(id);\r\n    }\r\n\r\n    /// Internal mint function, only accessible from within contract\r\n    /// @param to address to mint NFT to\r\n    /// @param id nft id to mint\r\n    function _mint(address to, uint256 id) internal {\r\n        base().__mint(to, id);\r\n    }\r\n\r\n    /// Internal exists function to determine if fn exists\r\n    /// @param id nft id to check if exists\r\n    function _exists(uint256 id) internal view returns (bool) {\r\n        return base().__exists(id);\r\n    }\r\n\r\n    /// Internal getter for tokenURI\r\n    /// @param tokenId id of token to get tokenURI for\r\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\r\n        return base().__tokenURI(tokenId);\r\n    }\r\n\r\n    /// is approved for all getter underlying getter\r\n    /// @param owner to check\r\n    /// @param operator to check\r\n    function _isApprovedForAll(address owner, address operator)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return base().__isApprovedForAll(owner, operator);\r\n    }\r\n\r\n    /// Internal getter for approved or owner for a given operator\r\n    /// @param operator address of operator to check\r\n    /// @param id id of nft to check for\r\n    function _isApprovedOrOwner(address operator, uint256 id)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return base().__isApprovedOrOwner(operator, id);\r\n    }\r\n\r\n    /// Sets the base URI of the contract. Allowed only by parent contract\r\n    /// @param newUri new uri base (http://URI) followed by number string of nft followed by extension string\r\n    /// @param newExtension optional uri extension\r\n    function _setBaseURI(string memory newUri, string memory newExtension)\r\n        internal\r\n    {\r\n        base().__setBaseURI(newUri, newExtension);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to nftImplementation.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        address impl = implementation();\r\n\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev No base NFT functions receive any value\r\n     */\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/@openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BluethumbDigitalGenesis.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\ncontract BluethumbDigitalGenesis is ERC721Delegated, ReentrancyGuard {\r\n  using Counters for Counters.Counter;\r\n\r\n  uint256 public whitelistMint = 1645689600; // Thursday, February 24, 2022 8:00:00 AM GMT+00:00\r\n  uint256 public allMint = 1645776000; // Friday, February 25, 2022 8:00:00 AM GMT+00:00\r\n\r\n  constructor(address baseFactory, string memory customBaseURI_)\r\n    ERC721Delegated(\r\n      baseFactory,\r\n      \"Bluethumb Digital Genesis\",\r\n      \"BTDG\",\r\n      ConfigSettings({\r\n        royaltyBps: 1250,\r\n        uriBase: customBaseURI_,\r\n        uriExtension: \"\",\r\n        hasTransferHook: false\r\n      })\r\n    )\r\n  {\r\n    allowedMintCountMap[msg.sender] = 15;\r\n\r\n    allowedMintCountMap[0x055580E7b88225Dae30dC1305Ad03ABA43686449] = 15;\r\n\r\n    allowedMintCountMap[0x0613460B6853d17795C12Cb257fe47F432384096] = 15;\r\n\r\n    allowedMintCountMap[0x0834722F2FA51f7F270D3c47695106B775E5A32f] = 15;\r\n\r\n    allowedMintCountMap[0x090c562b3BcC4960C015D4BE4F5E68F3C4917035] = 15;\r\n\r\n    allowedMintCountMap[0x09681e52Efe61A1D14a726bC440512A3DeB964cf] = 15;\r\n\r\n    allowedMintCountMap[0x0fb19Ea0bA06dc0Afb7B9A2D8749D6a9dE4d14ed] = 15;\r\n\r\n    allowedMintCountMap[0x12734419dcc90cD7BD89C84fE323Bc66ecb52f24] = 15;\r\n\r\n    allowedMintCountMap[0x1279bfC493f9C556aAEca7Ec5E9e09F342bb8Cd0] = 15;\r\n\r\n    allowedMintCountMap[0x139b11F3A9BeD54F3F25af6CF1686e44DB31Bb83] = 15;\r\n\r\n    allowedMintCountMap[0x1a8898f49db7e43DCe100AAB860BBBBE5956f00d] = 15;\r\n\r\n    allowedMintCountMap[0x27b56c91F60316ac56983cE38e86d44a639B8bf4] = 15;\r\n\r\n    allowedMintCountMap[0x2b919e1Fd19e5F5E0d58fa2791e2fAFc7F0DE7cD] = 15;\r\n\r\n    allowedMintCountMap[0x2dD32A8A16E9f0D113a9b835F4BF0c3AB103eF6C] = 15;\r\n\r\n    allowedMintCountMap[0x375CC1b3574F3e5f0418D006bbADbcE5CFe13564] = 15;\r\n\r\n    allowedMintCountMap[0x421245F7D4759af99bFAA8Ec11705D28B0456A89] = 15;\r\n\r\n    allowedMintCountMap[0x46e8986B1684cf9d8b2f4d6A310482E765F593F6] = 15;\r\n\r\n    allowedMintCountMap[0x48405CCd294c75F38A1cf003e25D1189ffAFb329] = 15;\r\n\r\n    allowedMintCountMap[0x4D60C50d3d08e8088F3E9748Fe3E87a86f9571ce] = 15;\r\n\r\n    allowedMintCountMap[0x5226d1f2d4840Acf1C6069a2b98a5b945369B9Ba] = 15;\r\n\r\n    allowedMintCountMap[0x55A6944Db96288d4668d5Ea2eE83ff30138aC5D2] = 15;\r\n\r\n    allowedMintCountMap[0x55AaC00eE798875D563Bbb7e32cE714Ceb91dB0c] = 15;\r\n\r\n    allowedMintCountMap[0x5A287D335F545146D0015CE9700af21878734942] = 15;\r\n\r\n    allowedMintCountMap[0x5Dbb70602BBec7f392467664B0a27298174cC859] = 15;\r\n\r\n    allowedMintCountMap[0x5F5e3148532d1682866131A1971Bb74a92D96376] = 15;\r\n\r\n    allowedMintCountMap[0x620051B8553a724b742ae6ae9cC3585d29F49848] = 15;\r\n\r\n    allowedMintCountMap[0x64eb4E3cAE1c6baf4eb6f07C3506EC9063D9301c] = 15;\r\n\r\n    allowedMintCountMap[0x659410b8c3267a74662b96E684b6b7c7fa799940] = 15;\r\n\r\n    allowedMintCountMap[0x68EA90b95cf332a816119Ed2A73BB809cAeef170] = 15;\r\n\r\n    allowedMintCountMap[0x6e56DC0499D8404c39D01Bc76c5Ca4f4798DBc2D] = 15;\r\n\r\n    allowedMintCountMap[0x776ed51aE75dD4A89B7e1bF554f18F57555c6E49] = 15;\r\n\r\n    allowedMintCountMap[0x77B2134CD2401C1E62811bA841f55EaEe6707837] = 15;\r\n\r\n    allowedMintCountMap[0x780C5432f01A83Fd0368c47d08A806183368Ce6B] = 15;\r\n\r\n    allowedMintCountMap[0x7b6156b6170cD98260D62Bd076BF73CD6042B94F] = 15;\r\n\r\n    allowedMintCountMap[0x7CA325b9C324d3eDfb9b03B20CAc2b76BB2E9EA0] = 15;\r\n\r\n    allowedMintCountMap[0x80fA68aCA31Ef103c1f9A4AC774fA54bbADFc01A] = 15;\r\n\r\n    allowedMintCountMap[0x832EF062edC896f0974b0c70f748b13b4f261d8E] = 15;\r\n\r\n    allowedMintCountMap[0x89e084cC06b180ec5bEb1D8992e62B0a61abb2c4] = 15;\r\n\r\n    allowedMintCountMap[0x8BC66aACb79e73c2aB463d28D8f70d6421049bD4] = 15;\r\n\r\n    allowedMintCountMap[0x8eb93eCD02eF88933D04b28482a8ddd54C1B2d89] = 15;\r\n\r\n    allowedMintCountMap[0x90B682e4C468e1e2e506eE07D1e31ce8A1870856] = 15;\r\n\r\n    allowedMintCountMap[0x933131Fa555C9907ebB94d9A1BcB036D60a36805] = 15;\r\n\r\n    allowedMintCountMap[0x94CDf7083fdBA1Db27C2AEd1FB6b90adF0862569] = 15;\r\n\r\n    allowedMintCountMap[0x94d32792c9ceC2605bff4ee3360bFA882A138B30] = 15;\r\n\r\n    allowedMintCountMap[0x9741718E702091EC2aB88331Ef46CE34789CC6Ca] = 15;\r\n\r\n    allowedMintCountMap[0x9d85A0928aC5C6329eac50E27ecb8086600924B0] = 15;\r\n\r\n    allowedMintCountMap[0xa3c65a4c791846524A56d86E7a842A6804d3D9bB] = 15;\r\n\r\n    allowedMintCountMap[0xa5fc73424d710c0eF80De3b5eD6402fedDd0218E] = 15;\r\n\r\n    allowedMintCountMap[0xaa14eDCaD86BdcCBcbD69C535400e67160FA683D] = 15;\r\n\r\n    allowedMintCountMap[0xB0719B0A76D547E763B17C9663CEF75Ed88f0A5e] = 15;\r\n\r\n    allowedMintCountMap[0xB0919CC42D5Ba1eA8e93D53Cc3ad3ebe083C3823] = 15;\r\n\r\n    allowedMintCountMap[0xB3bdb4345C5daA505Ad4f945D30C80299835eeB7] = 15;\r\n\r\n    allowedMintCountMap[0xB62Af5e86E25385B597A4c74233f87eCAd806AC4] = 15;\r\n\r\n    allowedMintCountMap[0xb6ab7289069ca6333B2f29813b50Ed5bcBe8B102] = 15;\r\n\r\n    allowedMintCountMap[0xbc4eC4aef8254f7434b654DF5D9DF3EAB15B252f] = 15;\r\n\r\n    allowedMintCountMap[0xC247c61C9C094437B5b720BB7E85e2A72D8a1798] = 15;\r\n\r\n    allowedMintCountMap[0xC2931c1C9D6f37BC5E4913C4CE25225901217399] = 15;\r\n\r\n    allowedMintCountMap[0xc3F4914EA59935db7Fcf4f645AC6b18Be7d4BF1f] = 15;\r\n\r\n    allowedMintCountMap[0xCaBB96eAEec3875697fe65a23cA74f11b99eA0b4] = 15;\r\n\r\n    allowedMintCountMap[0xD10AECe721dbe3F8f652B16eCC5520425B9BB0Cd] = 15;\r\n\r\n    allowedMintCountMap[0xd455712e43582134F101a0C686d26548B5438A3b] = 15;\r\n\r\n    allowedMintCountMap[0xD4F839266C2A3CD74Fc925d8bfcf1aF1bB4a18a8] = 15;\r\n\r\n    allowedMintCountMap[0xD52CdE57c6f442423d67AF9F8145AE209AB6c61C] = 15;\r\n\r\n    allowedMintCountMap[0xDc253466a6b7ecb0CaE038f5430A8480AABCDa5c] = 15;\r\n\r\n    allowedMintCountMap[0xDC5cE4aa77E606A7052BFb89A299AF6dB8F29Bf2] = 15;\r\n\r\n    allowedMintCountMap[0xdDd28f0Bb07e8D273be0f2dB4c146D65DB29Cf8a] = 15;\r\n\r\n    allowedMintCountMap[0xe40FF883845081C4c5D8579eD905e574553C51e0] = 15;\r\n\r\n    allowedMintCountMap[0xe6AfA012FceA90c5fEB0660D5e43BaB04D7b87DD] = 15;\r\n\r\n    allowedMintCountMap[0xeC44e64399EB446505F2044bbF819F09E3B7A6d1] = 15;\r\n\r\n    allowedMintCountMap[0xEe88465494b611b6eF41df825fE28C2F64146628] = 15;\r\n\r\n    allowedMintCountMap[0xF62b33dBF34a589AF97aA5292d84C470F29Be818] = 15;\r\n\r\n    allowedMintCountMap[0xFa555014B3E532C26D432c57947965D95E2e9BE4] = 15;\r\n\r\n    allowedMintCountMap[0xFE6b7A4494B308f8c0025DCc635ac22630ec7330] = 15;\r\n\r\n    mintPriceMap[0] = 100000000000000000;\r\n    mintPriceMap[1] = 100000000000000000;\r\n    mintPriceMap[2] = 100000000000000000;\r\n    mintPriceMap[3] = 100000000000000000;\r\n    mintPriceMap[4] = 100000000000000000;\r\n    mintPriceMap[5] = 100000000000000000;\r\n    mintPriceMap[6] = 100000000000000000;\r\n    mintPriceMap[7] = 100000000000000000;\r\n    mintPriceMap[8] = 100000000000000000;\r\n    mintPriceMap[9] = 100000000000000000;\r\n    mintPriceMap[10] = 100000000000000000;\r\n    mintPriceMap[11] = 100000000000000000;\r\n    mintPriceMap[12] = 100000000000000000;\r\n    mintPriceMap[13] = 100000000000000000;\r\n    mintPriceMap[14] = 100000000000000000;\r\n    mintPriceMap[15] = 100000000000000000;\r\n    mintPriceMap[16] = 100000000000000000;\r\n    mintPriceMap[17] = 100000000000000000;\r\n    mintPriceMap[18] = 100000000000000000;\r\n    mintPriceMap[19] = 100000000000000000;\r\n    mintPriceMap[20] = 100000000000000000;\r\n    mintPriceMap[21] = 200000000000000000;\r\n    mintPriceMap[22] = 200000000000000000;\r\n    mintPriceMap[23] = 200000000000000000;\r\n    mintPriceMap[24] = 200000000000000000;\r\n    mintPriceMap[25] = 200000000000000000;\r\n    mintPriceMap[26] = 200000000000000000;\r\n    mintPriceMap[27] = 200000000000000000;\r\n    mintPriceMap[28] = 200000000000000000;\r\n    mintPriceMap[29] = 200000000000000000;\r\n    mintPriceMap[30] = 200000000000000000;\r\n    mintPriceMap[31] = 200000000000000000;\r\n    mintPriceMap[32] = 200000000000000000;\r\n    mintPriceMap[33] = 300000000000000000;\r\n    mintPriceMap[34] = 300000000000000000;\r\n    mintPriceMap[35] = 400000000000000000;\r\n    mintPriceMap[36] = 400000000000000000;\r\n    mintPriceMap[37] = 400000000000000000;\r\n    mintPriceMap[38] = 400000000000000000;\r\n    mintPriceMap[39] = 400000000000000000;\r\n    mintPriceMap[40] = 400000000000000000;\r\n    mintPriceMap[41] = 400000000000000000;\r\n    mintPriceMap[42] = 400000000000000000;\r\n    mintPriceMap[43] = 400000000000000000;\r\n    mintPriceMap[44] = 400000000000000000;\r\n    mintPriceMap[45] = 400000000000000000;\r\n    mintPriceMap[46] = 400000000000000000;\r\n    mintPriceMap[47] = 400000000000000000;\r\n    mintPriceMap[48] = 400000000000000000;\r\n    mintPriceMap[49] = 500000000000000000;\r\n    mintPriceMap[50] = 500000000000000000;\r\n    mintPriceMap[51] = 500000000000000000;\r\n    mintPriceMap[52] = 500000000000000000;\r\n    mintPriceMap[53] = 500000000000000000;\r\n    mintPriceMap[54] = 500000000000000000;\r\n    mintPriceMap[55] = 500000000000000000;\r\n    mintPriceMap[56] = 500000000000000000;\r\n    mintPriceMap[57] = 500000000000000000;\r\n    mintPriceMap[58] = 500000000000000000;\r\n    mintPriceMap[59] = 500000000000000000;\r\n    mintPriceMap[60] = 500000000000000000;\r\n    mintPriceMap[61] = 500000000000000000;\r\n    mintPriceMap[62] = 500000000000000000;\r\n    mintPriceMap[63] = 500000000000000000;\r\n    mintPriceMap[64] = 500000000000000000;\r\n    mintPriceMap[65] = 500000000000000000;\r\n    mintPriceMap[66] = 600000000000000000;\r\n    mintPriceMap[67] = 700000000000000000;\r\n    mintPriceMap[68] = 700000000000000000;\r\n    mintPriceMap[69] = 700000000000000000;\r\n    mintPriceMap[70] = 700000000000000000;\r\n    mintPriceMap[71] = 700000000000000000;\r\n    mintPriceMap[72] = 1000000000000000000;\r\n    mintPriceMap[73] = 1000000000000000000;\r\n    mintPriceMap[74] = 1000000000000000000;\r\n    mintPriceMap[75] = 1000000000000000000;\r\n    mintPriceMap[76] = 1000000000000000000;\r\n    mintPriceMap[77] = 1000000000000000000;\r\n    mintPriceMap[78] = 1000000000000000000;\r\n    mintPriceMap[79] = 1000000000000000000;\r\n    mintPriceMap[80] = 1000000000000000000;\r\n    mintPriceMap[81] = 1000000000000000000;\r\n    mintPriceMap[82] = 1000000000000000000;\r\n    mintPriceMap[83] = 1000000000000000000;\r\n    mintPriceMap[84] = 1000000000000000000;\r\n    mintPriceMap[85] = 1000000000000000000;\r\n    mintPriceMap[86] = 2000000000000000000;\r\n    mintPriceMap[87] = 4000000000000000000;\r\n    mintPriceMap[88] = 4500000000000000000;\r\n    mintPriceMap[89] = 4500000000000000000;\r\n    mintPriceMap[90] = 5000000000000000000;\r\n    mintPriceMap[91] = 5000000000000000000;\r\n  }\r\n\r\n  /** MINTING LIMITS **/\r\n\r\n  mapping(address => uint256) private mintCountMap;\r\n\r\n  mapping(address => uint256) private allowedMintCountMap;\r\n\r\n  function allowedMintCount(address minter) public view returns (uint256) {\r\n    return allowedMintCountMap[minter] - mintCountMap[minter];\r\n  }\r\n\r\n  function updateMintCount(address minter, uint256 count) private {\r\n    mintCountMap[minter] += count;\r\n  }\r\n\r\n  /** MINTING PRICES **/\r\n\r\n  mapping(uint256 => uint256) private mintPriceMap;\r\n\r\n  function tokenPrice(uint256 id) public view returns (uint256) {\r\n    return mintPriceMap[id];\r\n  }\r\n\r\n  /** MINTING **/\r\n\r\n  uint256 public constant MAX_SUPPLY = 92;\r\n\r\n  Counters.Counter private supplyCounter;\r\n\r\n  function mint(uint256 id) public payable nonReentrant {\r\n    require(block.timestamp >= whitelistMint, \"Mint is not active\");\r\n\r\n    if (block.timestamp < allMint) {\r\n      if (allowedMintCount(msg.sender) >= 1) {\r\n        updateMintCount(msg.sender, 1);\r\n      } else {\r\n        revert(\"Address not in the whitelist\");\r\n      }\r\n    }\r\n\r\n    require(totalSupply() < MAX_SUPPLY, \"Exceeds max supply\");\r\n\r\n    require(id < MAX_SUPPLY, \"Invalid token id\");\r\n\r\n    require((_owner() == msg.sender) || (msg.value >= tokenPrice(id)), \"Insufficient payment\");\r\n\r\n    _mint(msg.sender, id);\r\n\r\n    supplyCounter.increment();\r\n  }\r\n\r\n  function multimint(uint256[] calldata ids) public nonReentrant onlyOwner {\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n\r\n      _mint(msg.sender, id);\r\n\r\n      supplyCounter.increment();\r\n    }\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return supplyCounter.current();\r\n  }\r\n\r\n  /** URI HANDLING **/\r\n\r\n  function setBaseURI(string memory customBaseURI_) external onlyOwner {\r\n    _setBaseURI(customBaseURI_, \"\");\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n    return string(abi.encodePacked(_tokenURI(tokenId), \".token.json\"));\r\n  }\r\n\r\n  /** PAYOUT **/\r\n\r\n  address private constant payoutAddress1 =\r\n    0xE69Eb4946188c5085f38e683b61b892a96c27124;\r\n\r\n  address private constant payoutAddress2 =\r\n    0x5F5e3148532d1682866131A1971Bb74a92D96376;\r\n\r\n  function withdraw() public nonReentrant {\r\n    uint256 balance = address(this).balance;\r\n\r\n    Address.sendValue(payable(_owner()), balance * 90 / 100);\r\n\r\n    Address.sendValue(payable(payoutAddress1), balance * 5 / 100);\r\n\r\n    Address.sendValue(payable(payoutAddress2), balance * 5 / 100);\r\n  }\r\n}\r\n\r\n// Contract created with Studio 721 v1.5.0\r\n// https://721.so", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseFactory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"customBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowedMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"multimint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"customBaseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BluethumbDigitalGenesis", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000043955024b1985e2b933a59021500ae5f55b0409100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000043697066733a2f2f62616679626569683461647032686c763569627a72676166797137716e32326c7a636a686933626279726e72637166656269666e647562776c6f752f0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aaf865732f2b7df9af0bb1242178d3c84ead269764e88196d33fb0a5296da0e0"}]}