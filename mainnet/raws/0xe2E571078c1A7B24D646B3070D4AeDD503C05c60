{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Marquee/MarqueeArt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MarqueeArt is Ownable {\\n  string public baseMQEAnimationURI;\\n  string public baseCSSAnimationURI;\\n  string public baseExternalURI;\\n  string private _metaDescription;\\n  string public font;\\n  bool private _useOnChainAnimation;\\n\\n  constructor(\\n    string memory _baseMQEAnimationURI,\\n    string memory _baseCSSAnimationURI,\\n    string memory metaDescription_,\\n    string memory _font\\n  ) {\\n    setBaseAnimationURI(Mode.Marquee, _baseMQEAnimationURI);\\n    setBaseAnimationURI(Mode.CSS, _baseCSSAnimationURI);\\n    setMetaDescription(metaDescription_);\\n    setFont(_font);\\n  }\\n\\n  enum Mode {\\n    Marquee,\\n    CSS\\n  }\\n  // name, base, sky, border, cloud1, cloud2, grass\\n  string[7][8] private palettes = [\\n    [\\\"Morning\\\", \\\"#CF9\\\", \\\"#6CF\\\", \\\"#000\\\", \\\"#FFF\\\", \\\"#CCC\\\", \\\"#0C0\\\"],\\n    [\\\"Noon\\\", \\\"#6F9\\\", \\\"#6FF\\\", \\\"#000\\\", \\\"#FFF\\\", \\\"#CCC\\\", \\\"#063\\\"],\\n    [\\\"Afternoon\\\", \\\"#CC6\\\", \\\"#F96\\\", \\\"#000\\\", \\\"#FFF\\\", \\\"#CCC\\\", \\\"#363\\\"],\\n    [\\\"Evening\\\", \\\"#3C9\\\", \\\"#36C\\\", \\\"#000\\\", \\\"#FFF\\\", \\\"#CCC\\\", \\\"#390\\\"],\\n    [\\\"Night\\\", \\\"#066\\\", \\\"#33C\\\", \\\"#000\\\", \\\"#FF0\\\", \\\"#FFC\\\", \\\"#993\\\"],\\n    [\\\"Midnight\\\", \\\"#393\\\", \\\"#006\\\", \\\"#000\\\", \\\"#FF0\\\", \\\"#FFC\\\", \\\"#363\\\"],\\n    [\\\"Cyber\\\", \\\"#000\\\", \\\"#000\\\", \\\"#096\\\", \\\"#096\\\", \\\"#096\\\", \\\"#096\\\"],\\n    [\\\"Terminal\\\", \\\"#000\\\", \\\"#000\\\", \\\"#FFF\\\", \\\"#FFF\\\", \\\"#FFF\\\", \\\"#FFF\\\"]\\n  ];\\n\\n  uint8[18] private paletteIndices = [\\n    0,\\n    0,\\n    0,\\n    0,\\n    1,\\n    1,\\n    1,\\n    1,\\n    2,\\n    2,\\n    3,\\n    3,\\n    4,\\n    4,\\n    5,\\n    5,\\n    6,\\n    7\\n  ];\\n\\n  string[5] private flowerColors = [\\\"#FC3\\\", \\\"#F36\\\", \\\"#F9C\\\", \\\"#99C\\\", \\\"#36C\\\"];\\n\\n  string[10] private dogColors = [\\n    \\\"#000\\\",\\n    \\\"#666\\\",\\n    \\\"#999\\\",\\n    \\\"#FFF\\\",\\n    \\\"#FCC\\\",\\n    \\\"#C96\\\",\\n    \\\"#633\\\",\\n    \\\"#933\\\",\\n    \\\"#C93\\\",\\n    \\\"#633\\\"\\n  ];\\n\\n  uint8[5] private speeds = [2, 3, 4, 5, 6];\\n\\n  string[10] private heads = [\\n    unicode\\\"\u25b2 \u25b2 \\\",\\n    unicode\\\"\u25bc \u25bc \\\",\\n    \\\"v v \\\",\\n    \\\"^ ^ \\\",\\n    \\\"/|/|\\\",\\n    \\\"|\\\\\\\\|\\\\\\\\\\\",\\n    \\\"|\\\\\\\\/|\\\",\\n    \\\"/)(\\\\\\\\\\\",\\n    \\\"(\\\\\\\\/)\\\",\\n    \\\"U U \\\"\\n  ];\\n\\n  string[5] private noses = [\\\"o\\\", \\\".\\\", \\\"@\\\", \\\"*\\\", unicode\\\"\u03c9\\\"];\\n\\n  string[13] private eyes = [\\n    \\\"-^^\\\",\\n    \\\"-66\\\",\\n    \\\"-99\\\",\\n    \\\"-@@\\\",\\n    \\\"-++\\\",\\n    \\\"-==\\\",\\n    \\\"-''\\\",\\n    unicode\\\"-\u2018\u2018\\\",\\n    unicode\\\"-\u2019\u2019\\\",\\n    unicode\\\"-\u25a0\u25a0\\\",\\n    unicode\\\"-\u25bc\u25bc\\\",\\n    unicode\\\"-\u25cb\u25cb\\\",\\n    unicode\\\"-\u25cf\u25cf\\\"\\n  ];\\n\\n  uint8[24] private eyesIndices = [\\n    0,\\n    0,\\n    0,\\n    1,\\n    1,\\n    2,\\n    2,\\n    3,\\n    3,\\n    4,\\n    4,\\n    5,\\n    5,\\n    6,\\n    6,\\n    6,\\n    7,\\n    7,\\n    8,\\n    8,\\n    9,\\n    10,\\n    11,\\n    12\\n  ];\\n\\n  string[2] private faces = [\\\" )\\\", \\\"))\\\"];\\n  string[6] private tails = [\\\"o\\\", \\\"p\\\", \\\"(\\\", \\\")\\\", \\\"/\\\", unicode\\\"\u300d\\\"];\\n  string[4] private mice = [\\\" --\\\", ' \\\"\\\"', \\\" ^-\\\", \\\" `-\\\"];\\n  string[6] private necks = [\\\"-  \\\", \\\"__/\\\", \\\"\\\\\\\\  \\\", \\\";  \\\", \\\")  \\\", \\\",  \\\"];\\n  string[3] private bodies = [\\\"       )\\\", \\\"))))))))\\\", \\\"# # # #)\\\"];\\n  uint8[8] private bodiesIndices = [0, 0, 0, 0, 0, 0, 1, 2];\\n  string[4] private legs = [\\n    \\\"(_)_)-(_)_)\\\",\\n    \\\"|_|_|-|_|_|\\\",\\n    \\\"/_/_/-\\\\\\\\_\\\\\\\\_\\\\\\\\\\\",\\n    \\\"(_(_/-\\\\\\\\_)_)\\\"\\n  ];\\n\\n  function setFont(string memory base64) public onlyOwner {\\n    font = base64;\\n  }\\n\\n  function setMetaDescription(string memory description) public onlyOwner {\\n    _metaDescription = description;\\n  }\\n\\n  function setBaseExternalURI(string memory URI) public onlyOwner {\\n    baseExternalURI = URI;\\n  }\\n\\n  function setBaseAnimationURI(Mode mode, string memory URI) public onlyOwner {\\n    if (mode == Mode.Marquee) {\\n      baseMQEAnimationURI = URI;\\n    } else {\\n      baseCSSAnimationURI = URI;\\n    }\\n  }\\n\\n  function setUseOnChainAnimation(bool value) public onlyOwner {\\n    _useOnChainAnimation = value;\\n  }\\n\\n  // @dev name, base, sky, border, cloud1, cloud2, grass, flower1, flower2, dog\\n  function getPalette(uint256 _tokenId)\\n    public\\n    view\\n    returns (string[10] memory palette)\\n  {\\n    uint256 rand = random(_tokenId, \\\"PLT\\\");\\n    uint8 index = paletteIndices[rand % paletteIndices.length];\\n\\n    for (uint8 i; i < 7; i++) {\\n      palette[i] = palettes[index][i];\\n    }\\n\\n    // flower1, flower2, dog\\n    if (index == 6 || index == 7) {\\n      palette[7] = palette[3];\\n      palette[8] = palette[3];\\n      palette[9] = palette[3];\\n    } else {\\n      palette[7] = flowerColors[random(_tokenId, \\\"FC\\\") % flowerColors.length];\\n      palette[8] = flowerColors[\\n        random(_tokenId + 1, \\\"FC\\\") % flowerColors.length\\n      ];\\n      palette[9] = dogColors[random(_tokenId, \\\"DGC\\\") % dogColors.length];\\n    }\\n  }\\n\\n  function random(uint256 tokenId, string memory keyPrefix)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      uint256(\\n        keccak256(abi.encodePacked(keyPrefix, Strings.toString(tokenId)))\\n      );\\n  }\\n\\n  function getDogStringRaw(uint256 _tokenId, Mode mode)\\n    public\\n    view\\n    returns (string[5] memory)\\n  {\\n    string[5] memory texts;\\n    texts[0] = mode == Mode.CSS ? unicode\\\"   \u2282\u2283\\\" : \\\"\\\";\\n    texts[1] = string(\\n      abi.encodePacked(\\\"  \\\", heads[random(_tokenId, \\\"HEAD\\\") % heads.length])\\n    );\\n    texts[2] = string(\\n      abi.encodePacked(\\n        noses[random(_tokenId, \\\"NOSE\\\") % noses.length],\\n        eyes[eyesIndices[random(_tokenId, \\\"EYE\\\") % eyesIndices.length]],\\n        faces[random(_tokenId, \\\"FACE\\\") % faces.length],\\n        \\\"_______\\\",\\n        tails[random(_tokenId, \\\"TAIL\\\") % tails.length]\\n      )\\n    );\\n    texts[3] = string(\\n      abi.encodePacked(\\n        mice[random(_tokenId, \\\"MOUCE\\\") % mice.length],\\n        necks[random(_tokenId, \\\"NECK\\\") % necks.length],\\n        bodies[bodiesIndices[random(_tokenId, \\\"BODY\\\") % bodiesIndices.length]]\\n      )\\n    );\\n    texts[4] = string(\\n      abi.encodePacked(\\\"   \\\", legs[random(_tokenId, \\\"LEG\\\") % legs.length])\\n    );\\n    return texts;\\n  }\\n\\n  function getDogString(uint256 _tokenId, Mode mode)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    string[5] memory texts = getDogStringRaw(_tokenId, mode);\\n    return\\n      string(\\n        abi.encodePacked(\\n          texts[0],\\n          \\\"\\\\n\\\",\\n          texts[1],\\n          \\\"\\\\n\\\",\\n          texts[2],\\n          \\\"\\\\n\\\",\\n          texts[3],\\n          \\\"\\\\n\\\",\\n          texts[4]\\n        )\\n      );\\n  }\\n\\n  function getCloud(\\n    uint256 _tokenId,\\n    uint8 index,\\n    Mode mode\\n  ) private view returns (string memory) {\\n    uint256 rand = random(_tokenId * index, \\\"Cloud\\\");\\n    string[10] memory palette = getPalette(_tokenId);\\n    uint8 d = [0, 1, 2][rand % 3]; // left, right, bounce\\n    string memory c = [palette[4], palette[5]][rand % 2];\\n    string memory t = [\\n      \\\"This text will scroll from right to left\\\",\\n      \\\"This text will scroll from left to right\\\",\\n      \\\"This text will bounce\\\"\\n    ][d];\\n    t = rand % 600 == 0 ? \\\"Good boy!\\\" : t;\\n    uint8 s = speeds[rand % speeds.length];\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<div style=\\\"height:23.5px;margin-bottom:1px;color:',\\n          c,\\n          '\\\">',\\n          getMarqueeStart(d, mode, 500, 0, s, 0),\\n          t,\\n          getMarqueeEnd(d, mode),\\n          \\\"</div>\\\"\\n        )\\n      );\\n  }\\n\\n  function getMarqueeStart(\\n    uint8 direction,\\n    Mode mode,\\n    uint32 width,\\n    uint32 height,\\n    uint8 speedX,\\n    uint8 speedY\\n  ) private pure returns (string memory) {\\n    if (mode == Mode.Marquee) {\\n      if (direction == 0 || direction == 1) {\\n        string memory c = [\\\"left\\\", \\\"right\\\"][direction];\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<marquee height=\\\"100%\\\" direction=\\\"',\\n              c,\\n              '\\\" scrollamount=\\\"',\\n              Strings.toString(speedX),\\n              '\\\">'\\n            )\\n          );\\n      } else if (direction == 2) {\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<marquee height=\\\"100%\\\" behavior=\\\"alternate\\\" scrollamount=\\\"',\\n              Strings.toString(speedX),\\n              '\\\">'\\n            )\\n          );\\n      } else {\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<marquee height=\\\"100%\\\" direction=\\\"down\\\" behavior=\\\"alternate\\\" scrollamount=\\\"',\\n              Strings.toString(speedY),\\n              '\\\"><marquee direction=\\\"right\\\" behavior=\\\"alternate\\\" scrollamount=\\\"',\\n              Strings.toString(speedX),\\n              '\\\">'\\n            )\\n          );\\n      }\\n    } else {\\n      if (direction == 0 || direction == 1) {\\n        string memory s = Strings.toString((width * 1000) / (speedX * 8));\\n        string memory c = [\\\"rtl\\\", \\\"ltr\\\"][direction];\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<div class=\\\"',\\n              c,\\n              '\\\" style=\\\"animation-duration:',\\n              s,\\n              'ms;\\\">'\\n            )\\n          );\\n      } else if (direction == 2) {\\n        string memory s = Strings.toString((width * 1000) / (speedX * 24));\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<div class=\\\"bh\\\" style=\\\"animation-duration:',\\n              s,\\n              'ms\\\"><div class=\\\"bhi\\\"  style=\\\"animation-duration:',\\n              s,\\n              'ms\\\">'\\n            )\\n          );\\n      } else {\\n        string memory sx = Strings.toString((width * 1000) / (speedX * 24));\\n        string memory sy = Strings.toString((height * 1000) / (speedY * 24));\\n        return\\n          string(\\n            abi.encodePacked(\\n              '<div class=\\\"bv\\\" style=\\\"animation-duration:',\\n              sy,\\n              'ms;width:100%;height:100%\\\"><div class=\\\"bh\\\" style=\\\"animation-duration:',\\n              sx,\\n              'ms\\\"><div class=\\\"bvi\\\" style=\\\"animation-duration:',\\n              sy,\\n              'ms\\\"><div class=\\\"bhi\\\" style=\\\"animation-duration:',\\n              sx,\\n              'ms\\\">'\\n            )\\n          );\\n      }\\n    }\\n  }\\n\\n  function getMarqueeEnd(uint8 direction, Mode mode)\\n    private\\n    pure\\n    returns (string memory)\\n  {\\n    if (mode == Mode.Marquee) {\\n      return direction == 3 ? \\\"</marquee></marquee>\\\" : \\\"</marquee>\\\";\\n    } else {\\n      return\\n        (direction == 0 || direction == 1) ? \\\"</div>\\\" : (direction == 2)\\n          ? \\\"</div></div>\\\"\\n          : \\\"</div></div></div></div>\\\";\\n    }\\n  }\\n\\n  function getFlower(\\n    uint256 _tokenId,\\n    Mode mode,\\n    uint256 index,\\n    uint8 speed\\n  ) private view returns (string memory) {\\n    string[10] memory palette = getPalette(_tokenId);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<div style=\\\"font-size:16px;padding:2% 0\\\">',\\n          getMarqueeStart(1, mode, 500, 0, speed, 0),\\n          '<pre><span style=\\\"color:',\\n          index == 1 ? palette[7] : palette[8],\\n          '\\\">       *                 *                 *</span>\\\\n',\\n          '<span style=\\\"color:',\\n          palette[6],\\n          '\\\">,;,   \\\\\\\\|/   ,;,   ,;,   \\\\\\\\|/   ,;,   ,;,   \\\\\\\\|/   ,;,</span></pre>',\\n          getMarqueeEnd(1, mode),\\n          \\\"</div>\\\"\\n        )\\n      );\\n  }\\n\\n  function fontFamily() private view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"@font-face {font-family:'MARQ';font-display:fallback;src:url(data:application/font-woff2;charset=utf-8;base64,\\\",\\n          font,\\n          \\\") format('woff2');}\\\"\\n          '*{font-family: \\\"MARQ\\\", Menlo, Monaco, Consolas, \\\"Roboto Mono\\\", \\\"Ubuntu Mono\\\", \\\"Liberation Mono\\\", monospace;}'\\n        )\\n      );\\n  }\\n\\n  function htmlWrapper(string memory body, Mode mode)\\n    private\\n    view\\n    returns (string memory)\\n  {\\n    string memory cssModeStyle = string(\\n      abi.encodePacked(\\n        \\\".rtl{display:inline-block;padding-left:100%;white-space: nowrap;animation:rtl 5s linear infinite;}\\\",\\n        \\\"@keyframes rtl{from{transform:translateX(0%);}to{transform:translateX(-100%);}}\\\",\\n        \\\".ltr{display:inline-block;padding-left:100%;white-space:nowrap;animation:ltr 5s linear infinite;}\\\",\\n        \\\"@keyframes ltr{from{transform:translateX(-100%);}to{transform:translateX(0%);}}\\\",\\n        \\\".bh{display:inline-block;width:100%;white-space:nowrap;animation:bh 2s linear infinite alternate;}\\\",\\n        \\\"@keyframes bh{0%{transform:translateX(100%);}100%{transform:translateX(0%);}}\\\",\\n        \\\".bhi{display:inline-block;animation:bhi 2s linear infinite alternate;}\\\",\\n        \\\"@keyframes bhi{0%{transform:translateX(-100%);}100%{transform: translateX(0%);}}\\\",\\n        \\\".bv{display:inline-block;animation:bv 3s linear infinite alternate;}\\\",\\n        \\\"@keyframes bv{0%{transform:translateY(100%);}100%{transform:translateY(0%);}}\\\",\\n        \\\".bvi{display:inline-block;animation:bvi 3s linear infinite alternate}\\\",\\n        \\\"@keyframes bvi{0%{transform:translateY(-100%);}100% {transform:translateY(0%);}}\\\"\\n      )\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<!DOCTYPE html><html lang=\\\"en\\\"><head><meta charset=\\\"utf-8\\\" /><title>Marquee</title><meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"><style>',\\n          fontFamily(),\\n          \\\"*,*::before,*::after{box-sizing:border-box}*{margin:0;line-height:1}html,body{height:100%;background:#000}\\\",\\n          mode == Mode.CSS ? cssModeStyle : \\\"\\\",\\n          \\\"</style>\\\",\\n          \\\"</head>\\\",\\n          \\\"<body>\\\",\\n          '<div style=\\\"position:relative;display:flex;align-items:center;justify-content:center;width:100%;height:100%;\\\">',\\n          body,\\n          \\\"</div><script>\\\",\\n          'var r = function() {var w = document.body.clientWidth;var h = document.body.clientHeight;var s = w > h ? h : w;document.getElementById(\\\"c\\\").style.transform = \\\"scale(\\\" + s / 500 + \\\")\\\";};setInterval(r,1000);window.onload = r;window.onresize = r;',\\n          \\\"</script></body></html>\\\"\\n        )\\n      );\\n  }\\n\\n  function getDogSpeed(uint256 _tokenId) public view returns (uint8, uint8) {\\n    uint256 rand1 = random(_tokenId, \\\"DS1\\\");\\n    uint256 rand2 = random(_tokenId, \\\"DS2\\\");\\n    return (speeds[rand1 % speeds.length], speeds[rand2 % speeds.length]);\\n  }\\n\\n  function tokenBODY(\\n    uint256 _tokenId,\\n    Mode mode,\\n    Mode dogMode\\n  ) private view returns (string memory) {\\n    string[10] memory palette = getPalette(_tokenId);\\n    (uint8 ds1, uint8 ds2) = getDogSpeed(_tokenId);\\n    string memory clouds;\\n    string memory dog;\\n    string memory top;\\n\\n    {\\n      string[6] memory ca;\\n      for (uint8 i = 0; i < 6; i++) {\\n        ca[i] = getCloud(_tokenId, i + 1, mode);\\n      }\\n      clouds = string(\\n        abi.encodePacked(ca[0], ca[1], ca[2], ca[3], ca[4], ca[5])\\n      );\\n    }\\n    {\\n      string[5] memory dgs = getDogStringRaw(_tokenId, dogMode);\\n      string memory ls;\\n      {\\n        ls = string(\\n          abi.encodePacked(\\n            '<div style=\\\"width:208px\\\">',\\n            getMarqueeStart(2, mode, 13, 0, 1, 1),\\n            '<pre style=\\\"width:202px\\\">',\\n            dgs[4],\\n            \\\"</pre>\\\",\\n            getMarqueeEnd(2, mode),\\n            \\\"</div>\\\"\\n          )\\n        );\\n      }\\n      string memory bs;\\n      {\\n        bs = string(\\n          abi.encodePacked(\\n            \\\"<pre>\\\",\\n            dgs[0],\\n            \\\"\\\\n\\\",\\n            dgs[1],\\n            \\\"\\\\n\\\",\\n            dgs[2],\\n            \\\"\\\\n\\\",\\n            dgs[3],\\n            ls,\\n            \\\"</pre>\\\"\\n          )\\n        );\\n      }\\n      dog = string(\\n        abi.encodePacked(\\n          getMarqueeStart(3, mode, 500, 270, ds1, ds2),\\n          bs,\\n          getMarqueeEnd(3, mode)\\n        )\\n      );\\n    }\\n    {\\n      top = string(\\n        abi.encodePacked(\\n          '<div id=\\\"c\\\" style=\\\"width:500px;height:500px;font-size:24px;background-color:',\\n          palette[1],\\n          ';\\\"><div style=\\\"overflow:hidden;width:500px;height:500px\\\">',\\n          '<div style=\\\"background-color:',\\n          palette[2],\\n          \\\";width:100%;height:30%;font-size:21px;border-bottom:2px \\\",\\n          palette[3],\\n          ' solid;\\\">',\\n          clouds,\\n          \\\"</div>\\\"\\n        )\\n      );\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          top,\\n          '<div style=\\\"height:70%\\\">',\\n          getFlower(_tokenId, mode, 1, 2),\\n          '<div style=\\\"height:69%;color:',\\n          palette[9],\\n          '\\\">',\\n          dog,\\n          \\\"</div>\\\",\\n          getFlower(_tokenId, mode, 2, 3),\\n          \\\"</div></div></div>\\\"\\n        )\\n      );\\n  }\\n\\n  function tokenHTML(uint256 _tokenId, Mode mode)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return htmlWrapper(tokenBODY(_tokenId, mode, mode), mode);\\n  }\\n\\n  function tokenSVG(uint256 _tokenId, Mode mode)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"500\\\" height=\\\"500\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><style>',\\n          fontFamily(),\\n          \\\"*,*::before,*::after{box-sizing:border-box}*{margin:0;line-height:1}html,body{height:100%;background:#000}\\\",\\n          \\\".rtl,.ltr,.bh,.bhi,.bv,.bvi{display:inline-block;white-space: nowrap;display:flex}\\\",\\n          \\\".rtl{justify-content:flex-end}.ltr{justify-content:flex-start}.bh,.bv{justify-content:center;align-items:center}\\\",\\n          \\\"</style>\\\",\\n          '<foreignObject x=\\\"0\\\" y=\\\"0\\\" width=\\\"500\\\" height=\\\"500\\\"><div style=\\\"width:100%;height:100%;\\\" xmlns=\\\"http://www.w3.org/1999/xhtml\\\">',\\n          tokenBODY(_tokenId, Mode.CSS, mode),\\n          \\\"</div></foreignObject></svg>\\\"\\n        )\\n      );\\n  }\\n\\n  function getMetaData(\\n    uint256 _tokenId,\\n    Mode mode,\\n    uint256 resDate\\n  ) private view returns (string memory) {\\n    string[10] memory palette = getPalette(_tokenId);\\n    (uint8 ds1, uint8 ds2) = getDogSpeed(_tokenId);\\n\\n    string memory rescue;\\n    {\\n      rescue = resDate > 0\\n        ? string(\\n          abi.encodePacked(\\n            ',{\\\"display_type\\\": \\\"date\\\",\\\"trait_type\\\":\\\"Rescued day\\\",\\\"value\\\":',\\n            Strings.toString(resDate),\\n            \\\"}\\\"\\n          )\\n        )\\n        : \\\"\\\";\\n    }\\n\\n    string memory animationURI;\\n    {\\n      animationURI = mode == Mode.Marquee\\n        ? baseMQEAnimationURI\\n        : baseCSSAnimationURI;\\n    }\\n\\n    string memory resurrection = mode == Mode.CSS ? \\\"YES\\\" : \\\"NO\\\";\\n\\n    string memory _animationUrl;\\n    {\\n      if (_useOnChainAnimation) {\\n        _animationUrl = string(\\n          abi.encodePacked(\\n            \\\"data:text/html;base64,\\\",\\n            Base64.encode(bytes(tokenHTML(_tokenId, mode)))\\n          )\\n        );\\n      } else {\\n        _animationUrl = string(\\n          abi.encodePacked(animationURI, Strings.toString(_tokenId))\\n        );\\n      }\\n    }\\n\\n    string memory _externalUrl;\\n    {\\n      _externalUrl = string(\\n        abi.encodePacked(baseExternalURI, Strings.toString(_tokenId))\\n      );\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '{\\\"name\\\":\\\"',\\n          string(abi.encodePacked(\\\"<marquee/> #\\\", Strings.toString(_tokenId))),\\n          '\\\",\\\"description\\\":\\\"',\\n          _metaDescription,\\n          '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n          Base64.encode(bytes(tokenSVG(_tokenId, mode))),\\n          '\\\",\\\"animation_url\\\":\\\"',\\n          _animationUrl,\\n          '\\\",\\\"external_url\\\":\\\"',\\n          _externalUrl,\\n          '\\\",\\\"attributes\\\": [{\\\"trait_type\\\":\\\"Palette\\\",\\\"value\\\":\\\"',\\n          palette[0],\\n          '\\\"},{\\\"trait_type\\\":\\\"Dog Color\\\",\\\"value\\\":\\\"',\\n          palette[9],\\n          '\\\"},{\\\"trait_type\\\":\\\"Dog Speed X\\\",\\\"value\\\":',\\n          Strings.toString(ds1),\\n          '},{\\\"trait_type\\\":\\\"Dog Speed Y\\\",\\\"value\\\":',\\n          Strings.toString(ds2),\\n          '},{\\\"trait_type\\\":\\\"Resurrection\\\",\\\"value\\\":\\\"',\\n          resurrection,\\n          '\\\"}',\\n          rescue,\\n          \\\"]}\\\"\\n        )\\n      );\\n  }\\n\\n  function tokenURI(\\n    uint256 _tokenId,\\n    Mode mode,\\n    uint256 resDate\\n  ) external view returns (string memory) {\\n    string memory json = Base64.encode(\\n      bytes(getMetaData(_tokenId, mode, resDate))\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n  }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n  bytes internal constant TABLE =\\n    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\\nlibrary Strings {\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseMQEAnimationURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseCSSAnimationURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaDescription_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_font\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseCSSAnimationURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExternalURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMQEAnimationURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"font\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDogSpeed\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"getDogString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"getDogStringRaw\",\"outputs\":[{\"internalType\":\"string[5]\",\"name\":\"\",\"type\":\"string[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[10]\",\"name\":\"palette\",\"type\":\"string[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseAnimationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseExternalURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"base64\",\"type\":\"string\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"setMetaDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setUseOnChainAnimation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"tokenHTML\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"tokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MarqueeArt.Mode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resDate\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarqueeArt", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}