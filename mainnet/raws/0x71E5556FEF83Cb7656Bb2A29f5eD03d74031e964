{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TORI/corvus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IUniswapERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\ninterface IUniswapFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapRouter01 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapRouter02 is IUniswapRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    \\n    constructor () {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    \\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    \\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    \\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    \\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary Address {\\n    \\n    function isContract(address account) internal view returns (bool) {\\n            uint256 size;\\n           assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    \\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n           (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    \\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    \\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    \\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    \\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    \\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    \\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    \\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n           (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n                   if (returndata.length > 0) {\\n                                 assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary EnumerableSet {\\n\\n    struct Set {\\n           bytes32[] _values;\\n\\n              mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    \\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n                          set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    \\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n           uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { \\n                            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n                     bytes32 lastvalue = set._values[lastIndex];\\n\\n                   set._values[toDeleteIndex] = lastvalue;\\n                   set._indexes[lastvalue] = valueIndex; \\n\\n                   set._values.pop();\\n\\n                   delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    \\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    \\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    \\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    \\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    \\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    \\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    \\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    \\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    \\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    \\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    \\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    \\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    \\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    \\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    \\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\ncontract AHuntersBless is IERC20, Ownable {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (address => uint256) public _balances;\\n    mapping (address => mapping (address => uint256)) public _allowances;\\n    mapping (address => uint256) public _sellLock;\\n\\n\\n    EnumerableSet.AddressSet private _excluded;\\n    EnumerableSet.AddressSet private _excludedFromSellLock;\\n\\n    mapping (address => bool) public _blacklist;\\n    bool isBlacklist = true;\\n    \\n    string public constant _name = \\\"A Hunters Bless\\\";\\n    string public constant _symbol = \\\"FLOCK\\\";\\n    uint8 public constant _decimals = 18;\\n    uint256 public constant InitialSupply= 1e8 * 10**_decimals;\\n\\n    uint256 swapLimit = 1e4 * 10**_decimals; \\n    bool isSwapPegged = true;\\n\\n    uint16 public  BuyLimitDivider = 50; // 2%\\n    uint8 public   BalanceLimitDivider = 50; // 2%\\n    uint16 public  SellLimitDivider = 125; // 0.75%\\n    uint16 public  MaxSellLockTime = 10 seconds;\\n    \\n    mapping (address => bool) isAuth;\\n    address public constant UniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public constant Dead = 0x000000000000000000000000000000000000dEaD;\\n    \\n    uint256 public _circulatingSupply =InitialSupply;\\n    uint256 public  balanceLimit = _circulatingSupply;\\n    uint256 public  sellLimit = _circulatingSupply;\\n    uint256 public  buyLimit = _circulatingSupply;\\n\\n    \\n    uint8 public _buyTax;\\n    uint8 public _sellTax;\\n    uint8 public _transferTax;\\n    uint8 public _liquidityTax;\\n    uint8 public _buyburnTax;\\n\\n    bool isTokenSwapManual = false;\\n    bool public bot_killer = true;\\n    bool public gasSaver = true;\\n\\n    address public claimAddress;\\n    address public target_token = 0xf3b9569F82B18aEf890De263B84189bd33EBe452;\\n    address public community_token;\\n    address payable private unclog;\\n    bool public community_enabled;\\n    address public _UniswapPairAddress;\\n    IUniswapRouter02 public  _UniswapRouter;\\n\\n    modifier onlyAuth() {\\n        require(_isAuth(msg.sender), \\\"Caller not in Auth\\\");\\n        _;\\n    }\\n    function _isAuth(address addr) private view returns (bool){\\n        return addr==owner()||isAuth[addr];\\n    }\\n\\n    constructor (address unclg) {\\n        uint256 deployerBalance=_circulatingSupply*95/100;\\n        _balances[msg.sender] = deployerBalance;\\n        emit Transfer(address(0), msg.sender, deployerBalance);\\n        uint256 injectBalance=_circulatingSupply-deployerBalance;\\n        _balances[address(this)]=injectBalance;\\n        emit Transfer(address(0), address(this),injectBalance);\\n        _UniswapRouter = IUniswapRouter02(UniswapRouter);\\n\\n        _UniswapPairAddress = IUniswapFactory(_UniswapRouter.factory()).createPair(address(this), _UniswapRouter.WETH());\\n\\n        balanceLimit=InitialSupply/BalanceLimitDivider;\\n        sellLimit=InitialSupply/SellLimitDivider;\\n        buyLimit=InitialSupply/BuyLimitDivider;\\n        \\n        sellLockTime=2 seconds;\\n\\n        _buyTax=5;\\n        _sellTax=5;\\n        _transferTax=5;\\n        _liquidityTax=70;\\n        _buyburnTax=30;\\n        unclog = payable(unclg);\\n        _excluded.add(msg.sender);\\n        _excluded.add(unclog);\\n        _excludedFromSellLock.add(UniswapRouter);\\n        _excludedFromSellLock.add(_UniswapPairAddress);\\n        _excludedFromSellLock.add(address(this));\\n        _excludedFromSellLock.add(unclog);\\n    } \\n\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) private{\\n        require(sender != address(0), \\\"Transfer from zero\\\");\\n        require(recipient != address(0), \\\"Transfer to zero\\\");\\n        if(isBlacklist) {\\n            require(!_blacklist[sender] && !_blacklist[recipient], \\\"Blacklisted!\\\");\\n        }\\n\\n        bool isClaim = sender==claimAddress;\\n\\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient) || isAuth[sender] || isAuth[recipient]);\\n\\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\\n\\n        bool isLiquidityTransfer = ((sender == _UniswapPairAddress && recipient == UniswapRouter)\\n        || (recipient == _UniswapPairAddress && sender == UniswapRouter));\\n\\n\\n        if(isContractTransfer || isLiquidityTransfer || isExcluded || isClaim){\\n            _feelessTransfer(sender, recipient, amount);\\n        }\\n        else{\\n            if (!tradingEnabled) {\\n                if (sender != owner() && recipient != owner()) {\\n                    if (bot_killer) {\\n                        emit Transfer(sender,recipient,0);\\n                        return;\\n                    }\\n                    else {\\n                        require(tradingEnabled,\\\"trading not yet enabled\\\");\\n                    }\\n                }\\n            }\\n                \\n            bool isBuy=sender==_UniswapPairAddress|| sender == UniswapRouter;\\n            bool isSell=recipient==_UniswapPairAddress|| recipient == UniswapRouter;\\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell);\\n\\n            if(gasSaver) {\\n                delete isBuy;\\n                delete isSell;\\n                delete isClaim;\\n                delete isContractTransfer;\\n                delete isExcluded;\\n                delete isLiquidityTransfer;\\n            }\\n\\n        }\\n    }\\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\\n        uint256 recipientBalance = _balances[recipient];\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"Transfer exceeds balance\\\");\\n\\n\\n        swapLimit = sellLimit/2;\\n\\n        uint8 tax;\\n        if(isSell){\\n            if(!_excludedFromSellLock.contains(sender)){\\n                           require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\\\"Seller in sellLock\\\");\\n                           _sellLock[sender]=block.timestamp+sellLockTime;\\n            }\\n            \\n            require(amount<=sellLimit,\\\"Dump protection\\\");\\n            tax=_sellTax;\\n\\n        } else if(isBuy){\\n                   require(recipientBalance+amount<=balanceLimit,\\\"whale protection\\\");\\n            require(amount<=buyLimit, \\\"whale protection\\\");\\n            tax=_buyTax;\\n\\n        } else {\\n                   require(recipientBalance+amount<=balanceLimit,\\\"whale protection\\\");\\n                          if(!_excludedFromSellLock.contains(sender))\\n                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\\\"Sender in Lock\\\");\\n            tax=_transferTax;\\n\\n        }\\n                 if((sender!=_UniswapPairAddress)&&(!manualConversion)&&(!_isSwappingContractModifier))\\n            _swapContractToken(amount);\\n           uint256 contractToken=_calculateFee(amount, tax, _liquidityTax+_buyburnTax);\\n           uint256 taxedAmount=amount-(contractToken);\\n\\n           _removeToken(sender,amount);\\n\\n           _balances[address(this)] += contractToken;\\n\\n           _addToken(recipient, taxedAmount);\\n\\n        emit Transfer(sender,recipient,taxedAmount);\\n\\n\\n\\n    }\\n    \\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"Transfer exceeds balance\\\");\\n           _removeToken(sender,amount);\\n           _addToken(recipient, amount);\\n\\n        emit Transfer(sender,recipient,amount);\\n\\n    }\\n    \\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\\n        return (amount*tax*taxPercent) / 10000;\\n    }\\n    function _addToken(address addr, uint256 amount) private {\\n           uint256 newAmount=_balances[addr]+amount;\\n        _balances[addr]=newAmount;\\n\\n    }\\n\\n\\n    \\n    function _removeToken(address addr, uint256 amount) private {\\n           uint256 newAmount=_balances[addr]-amount;\\n        _balances[addr]=newAmount;\\n    }\\n\\n    \\n    bool private _isTokenSwaping;\\n    \\n    uint256 public totalTokenSwapGenerated;\\n    \\n    uint256 public totalPayouts;\\n\\n    \\n    uint8 public buyburnShare=100;\\n    \\n    uint256 public buyburnBalance;\\n\\n    \\n    function _distributeFeesETH(uint256 ETHamount) private {\\n        uint256 buyburnSplit = (ETHamount * buyburnShare)/100;\\n        buyburnBalance+=buyburnSplit;\\n        if(buyburnBalance > 1000000000000000000) {\\n            swapForChoosenToken();\\n        }\\n    }\\n\\n    function swapForChoosenToken() private {\\n        uint toswap;\\n        toswap = buyburnBalance;\\n        uint toswap_token_1;\\n        uint toswap_token_2;\\n        if(community_enabled) {\\n            toswap_token_1 = toswap / 2;\\n            toswap_token_2 = toswap - toswap_token_1;\\n        } else {\\n            toswap_token_1 = toswap;\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _UniswapRouter.WETH();\\n        path[1] = target_token;\\n\\n        _UniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens {value: toswap_token_1}(\\n            0,\\n            path,\\n            Dead,\\n            block.timestamp\\n        );\\n\\n        buyburnBalance -= toswap_token_1;\\n\\n        if(community_enabled) {\\n\\n            address[] memory path_2 = new address[](2);\\n        \\n            path[0] = _UniswapRouter.WETH();\\n            path[1] = community_token;\\n\\n            _UniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens {value: toswap_token_2}(\\n                0,\\n                path_2,\\n                Dead,\\n                block.timestamp\\n            );\\n            buyburnBalance -= toswap_token_2;\\n        }\\n    }\\n    \\n    uint256 public totalLPETH;\\n    \\n    bool private _isSwappingContractModifier;\\n    modifier lockTheSwap {\\n        _isSwappingContractModifier = true;\\n        _;\\n        _isSwappingContractModifier = false;\\n    }\\n\\n    function _swapContractToken(uint256 totalMax) private lockTheSwap{\\n        uint256 contractBalance=_balances[address(this)];\\n        uint16 totalTax=_liquidityTax;\\n        uint256 tokenToSwap=swapLimit;\\n        if(tokenToSwap > totalMax) {\\n            if(isSwapPegged) {\\n                tokenToSwap = totalMax;\\n            }\\n        }\\n           if(contractBalance<tokenToSwap||totalTax==0){\\n            return;\\n        }\\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\\n        uint256 tokenForbuyburn= (tokenToSwap*_buyburnTax)/totalTax;\\n\\n        uint256 liqToken=tokenForLiquidity/2;\\n        uint256 liqETHToken=tokenForLiquidity-liqToken;\\n\\n           uint256 swapToken=liqETHToken+tokenForbuyburn;\\n           uint256 initialETHBalance = address(this).balance;\\n        _swapTokenForETH(swapToken);\\n        uint256 newETH=(address(this).balance - initialETHBalance);\\n        uint256 liqETH = (newETH*liqETHToken)/swapToken;\\n        _addLiquidity(liqToken, liqETH);\\n        uint256 generatedETH=(address(this).balance - initialETHBalance);\\n        _distributeFeesETH(generatedETH);\\n    }\\n    \\n    function _swapTokenForETH(uint256 amount) private {\\n        _approve(address(this), address(_UniswapRouter), amount);\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _UniswapRouter.WETH();\\n\\n        _UniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n    function _addLiquidity(uint256 tokenamount, uint256 ETHamount) private {\\n        totalLPETH+=ETHamount;\\n        _approve(address(this), address(_UniswapRouter), tokenamount);\\n        _UniswapRouter.addLiquidityETH{value: ETHamount}(\\n            address(this),\\n            tokenamount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n    function sendETHToFee(uint256 amount) private {\\n        unclog.transfer(amount);\\n    }\\n\\n    /// @notice Utilities\\n\\n    function UTILITY_destroy(uint256 amount) public onlyAuth {\\n        require(_balances[address(this)] >= amount);\\n        _balances[address(this)] -= amount;\\n        _circulatingSupply -= amount;\\n        emit Transfer(address(this), Dead, amount);\\n    }    \\n\\n    function UTILITY_getLimits() public view returns(uint256 balance, uint256 sell){\\n        return(balanceLimit/10**_decimals, sellLimit/10**_decimals);\\n    }\\n\\n    function UTILITY_getTaxes() public view returns(uint256 buyburnTax,uint256 liquidityTax, uint256 buyTax, uint256 sellTax, uint256 transferTax){\\n        return (_buyburnTax,_liquidityTax,_buyTax,_sellTax,_transferTax);\\n    }\\n    \\n    function UTILITY_getAddressSellLockTimeInSeconds(address AddressToCheck) public view returns (uint256){\\n        uint256 lockTime=_sellLock[AddressToCheck];\\n        if(lockTime<=block.timestamp)\\n        {\\n            return 0;\\n        }\\n        return lockTime-block.timestamp;\\n    }\\n    function UTILITY_getSellLockTimeInSeconds() public view returns(uint256){\\n        return sellLockTime;\\n    }\\n\\n    bool public sellLockDisabled;\\n    uint256 public sellLockTime;\\n    bool public manualConversion;\\n\\n\\n    function UTILITY_SetPeggedSwap(bool isPegged) public onlyAuth {\\n        isSwapPegged = isPegged;\\n    }\\n\\n    function UTILITY_SetMaxSwap(uint256 max) public onlyAuth {\\n        swapLimit = max;\\n    }\\n\\n    function UTILITY_SetMaxLockTime(uint16 max) public onlyAuth {\\n     MaxSellLockTime = max;\\n    }\\n\\n    function UTILITY_set_Target_one(address addy) public onlyAuth {\\n        target_token = addy;\\n    }\\n\\n    function UTILITY_set_Target_two(address addy) public onlyAuth {\\n        community_token = addy;\\n    }\\n\\n    function UTILITY_enable_target_two(bool booly) public onlyAuth {\\n        community_enabled = booly;\\n    }\\n    /// @notice ACL Functions\\n\\n    function ACL_SetClaimer(address addy) public onlyAuth {\\n        claimAddress = addy;\\n    }\\n\\n    function ACL_BlackListAddress(address addy, bool booly) public onlyAuth {\\n        _blacklist[addy] = booly;\\n    }\\n\\n    function ACL_SetAuth(address addy, bool booly) public onlyAuth {\\n        isAuth[addy] = booly;\\n    }\\n\\n    function ACL_ExcludeAccountFromFees(address account) public onlyAuth {\\n        _excluded.add(account);\\n    }\\n    function ACL_IncludeAccountToFees(address account) public onlyAuth {\\n        _excluded.remove(account);\\n    }\\n    \\n    function ACL_ExcludeAccountFromSellLock(address account) public onlyAuth {\\n        _excludedFromSellLock.add(account);\\n    }\\n    function ACL_IncludeAccountToSellLock(address account) public onlyAuth {\\n        _excludedFromSellLock.remove(account);\\n    }\\n\\n    function Auth_WithdrawExcess() public onlyAuth{\\n        uint256 amount=(address(this).balance-buyburnBalance-10000000);\\n        address sender = msg.sender;\\n        (bool sent,) =sender.call{value: (amount)}(\\\"\\\");\\n        require(sent,\\\"withdraw failed\\\");\\n    }\\n\\n    function Auth_WithdrawbuyburnETH() public onlyAuth{\\n        uint256 amount=buyburnBalance;\\n        buyburnBalance=0;\\n        address sender = msg.sender;\\n        (bool sent,) =sender.call{value: (amount)}(\\\"\\\");\\n        require(sent,\\\"withdraw failed\\\");\\n    }\\n\\n    function UTILITY_ActivateGasSaver(bool booly) public onlyAuth {\\n        gasSaver = booly;\\n    }\\n    \\n    function UTILITY_SwitchManualETHConversion(bool manual) public onlyAuth{\\n        manualConversion=manual;\\n    }\\n    \\n    function UTILITY_DisableSellLock(bool disabled) public onlyAuth{\\n        sellLockDisabled=disabled;\\n    }\\n    \\n    function UTILIY_SetSellLockTime(uint256 sellLockSeconds)public onlyAuth{\\n        sellLockTime=sellLockSeconds;\\n    }\\n    \\n    function UTILITY_SetTaxes(uint8 buyburnTaxes, uint8 liquidityTaxes, uint8 buyTax, uint8 sellTax, uint8 transferTax) public onlyAuth{\\n        uint8 totalTax=buyburnTaxes +liquidityTaxes;\\n        require(totalTax==100, \\\"burn+liq needs to equal 100%\\\");\\n        _buyburnTax = buyburnTaxes;\\n        _liquidityTax=liquidityTaxes;\\n\\n        _buyTax=buyTax;\\n        _sellTax=sellTax;\\n        _transferTax=transferTax;\\n    }\\n    \\n    function UTILITY_ChangebuyburnShare(uint8 newShare) public onlyAuth{\\n        buyburnShare=newShare;\\n    }\\n\\n    function UTILITY_ManualGenerateTokenSwapBalance(uint256 _qty) public onlyAuth{\\n        _swapContractToken(_qty * 10**9);\\n    }\\n    \\n    function UTILITY_UpdateLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyAuth{\\n        newBalanceLimit=newBalanceLimit*10**_decimals;\\n        newSellLimit=newSellLimit*10**_decimals;\\n        balanceLimit = newBalanceLimit;\\n        sellLimit = newSellLimit;\\n    }\\n\\n   function UTILITY_manualBuyBack() public onlyAuth {\\n        swapForChoosenToken();\\n    }\\n    \\n    bool public tradingEnabled;\\n    address private _liquidityTokenAddress;\\n\\n    \\n    function SETTINGS_EnableTrading(bool booly) public onlyAuth{\\n        tradingEnabled = booly;\\n    }\\n    \\n    function SETTINGS_LiquidityTokenAddress(address liquidityTokenAddress) public onlyAuth{\\n        _liquidityTokenAddress=liquidityTokenAddress;\\n    }\\n\\n    function UTILITY_RescueTokens(address tknAddress) public onlyAuth {\\n        IERC20 token = IERC20(tknAddress);\\n        uint256 ourBalance = token.balanceOf(address(this));\\n        require(ourBalance>0, \\\"No tokens in our balance\\\");\\n        token.transfer(msg.sender, ourBalance);\\n    }\\n\\n    function UTILITY_setBlacklistEnabled(bool isBlacklistEnabled) public onlyAuth {\\n        isBlacklist = isBlacklistEnabled;\\n    }\\n\\n    function UTILITY_setContractTokenSwapManual(bool manual) public onlyAuth {\\n        isTokenSwapManual = manual;\\n    }\\n\\n    function UTILITY_setBlacklistedAddress(address toBlacklist) public onlyAuth {\\n        _blacklist[toBlacklist] = true;\\n    }\\n\\n    function UTILITY_removeBlacklistedAddress(address toRemove) public onlyAuth {\\n        _blacklist[toRemove] = false;\\n    }\\n\\n\\n    function UTILITY_AvoidLocks() public onlyAuth{\\n        (bool sent,) =msg.sender.call{value: (address(this).balance)}(\\\"\\\");\\n        require(sent);\\n    }\\n\\n    function manualswap() external {\\n        require(msg.sender == unclog);\\n        uint256 contractBalance = balanceOf(address(this));\\n        _swapTokenForETH(contractBalance);\\n    }\\n    \\n    function manualsend() external {\\n        require(msg.sender == unclog);\\n        uint256 contractETHBalance = address(this).balance;\\n        sendETHToFee(contractETHBalance);\\n    }\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n    \\n\\n    function getOwner() external view override returns (address) {\\n        return owner();\\n    }\\n\\n    function name() external pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _circulatingSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender) external view override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n    function _approve(address _owner, address spender, uint256 amount) private {\\n        require(_owner != address(0), \\\"Approve from zero\\\");\\n        require(spender != address(0), \\\"Approve to zero\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"Transfer > allowance\\\");\\n\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, \\\"<0 allowance\\\");\\n\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unclg\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_BlackListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ACL_ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ACL_ExcludeAccountFromSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ACL_IncludeAccountToFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ACL_IncludeAccountToSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"ACL_SetAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"ACL_SetClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Auth_WithdrawExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Auth_WithdrawbuyburnETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"SETTINGS_EnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"}],\"name\":\"SETTINGS_LiquidityTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"UTILITY_ActivateGasSaver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_AvoidLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newShare\",\"type\":\"uint8\"}],\"name\":\"UTILITY_ChangebuyburnShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"UTILITY_DisableSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"UTILITY_ManualGenerateTokenSwapBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"}],\"name\":\"UTILITY_RescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"name\":\"UTILITY_SetMaxLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"UTILITY_SetMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"}],\"name\":\"UTILITY_SetPeggedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyburnTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"UTILITY_SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"UTILITY_SwitchManualETHConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"UTILITY_UpdateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UTILITY_destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"UTILITY_enable_target_two\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"UTILITY_getAddressSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_getSellLockTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyburnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_manualBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"UTILITY_removeBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBlacklistEnabled\",\"type\":\"bool\"}],\"name\":\"UTILITY_setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBlacklist\",\"type\":\"address\"}],\"name\":\"UTILITY_setBlacklistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"UTILITY_setContractTokenSwapManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"UTILITY_set_Target_one\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"UTILITY_set_Target_two\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLockSeconds\",\"type\":\"uint256\"}],\"name\":\"UTILIY_SetSellLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UniswapPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyburnTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_sellLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bot_killer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyburnBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyburnShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasSaver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenSwapGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AHuntersBless", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b7945f27acec70c01fb96999b659ddf85875f1b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}