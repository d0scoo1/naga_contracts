{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: IEIP2612.sol\r\n\r\n\r\n\r\npragma solidity =0.8.12;\r\n\r\ninterface IEIP2612 {\r\n\r\n    function permit(\r\n        address owner_,\r\n        address spender_,\r\n        uint256 value_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external;\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: IXDEFIDistribution.sol\r\n\r\n\r\n\r\npragma solidity =0.8.12;\r\n\r\n\r\ninterface IXDEFIDistribution is IERC721Enumerable {\r\n    /***********/\r\n    /* Structs */\r\n    /***********/\r\n\r\n    struct Position {\r\n        uint96 units; // 240,000,000,000,000,000,000,000,000 XDEFI * 2.55x bonus (which fits in a `uint96`).\r\n        uint88 depositedXDEFI; // XDEFI cap is 240000000000000000000000000 (which fits in a `uint88`).\r\n        uint32 expiry; // block timestamps for the next 50 years (which fits in a `uint32`).\r\n        uint32 created;\r\n        uint256 pointsCorrection;\r\n    }\r\n\r\n    /**********/\r\n    /* Errors */\r\n    /**********/\r\n\r\n    error BeyondConsumeLimit();\r\n    error CannotUnlock();\r\n    error ConsumePermitExpired();\r\n    error EmptyArray();\r\n    error IncorrectBonusMultiplier();\r\n    error InsufficientAmountUnlocked();\r\n    error InsufficientCredits();\r\n    error InvalidConsumePermit();\r\n    error InvalidDuration();\r\n    error InvalidMultiplier();\r\n    error InvalidToken();\r\n    error LockingIsDisabled();\r\n    error LockResultsInTooFewUnits();\r\n    error MustMergeMultiple();\r\n    error NoReentering();\r\n    error NoUnitSupply();\r\n    error NotApprovedOrOwnerOfToken();\r\n    error NotInEmergencyMode();\r\n    error PositionAlreadyUnlocked();\r\n    error PositionStillLocked();\r\n    error TokenDoesNotExist();\r\n    error Unauthorized();\r\n\r\n    /**********/\r\n    /* Events */\r\n    /**********/\r\n\r\n    /// @notice Emitted when the base URI is set (or re-set).\r\n    event BaseURISet(string baseURI);\r\n\r\n    /// @notice Emitted when some credits of a token are consumed.\r\n    event CreditsConsumed(uint256 indexed tokenId, address indexed consumer, uint256 amount);\r\n\r\n    /// @notice Emitted when a new amount of XDEFI is distributed to all locked positions, by some caller.\r\n    event DistributionUpdated(address indexed caller, uint256 amount);\r\n\r\n    /// @notice Emitted when the contract is no longer allowing locking XDEFI, and is allowing all locked positions to be unlocked effective immediately.\r\n    event EmergencyModeActivated();\r\n\r\n    /// @notice Emitted when a new lock period duration, in seconds, has been enabled with some bonus multiplier (scaled by 100, 0 signaling it is disabled).\r\n    event LockPeriodSet(uint256 indexed duration, uint256 indexed bonusMultiplier);\r\n\r\n    /// @notice Emitted when a new locked position is created for some amount of XDEFI, and the NFT is minted to an owner.\r\n    event LockPositionCreated(uint256 indexed tokenId, address indexed owner, uint256 amount, uint256 indexed duration);\r\n\r\n    /// @notice Emitted when a locked position is unlocked, withdrawing some amount of XDEFI.\r\n    event LockPositionWithdrawn(uint256 indexed tokenId, address indexed owner, uint256 amount);\r\n\r\n    /// @notice Emitted when an account has accepted ownership.\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed owner);\r\n\r\n    /// @notice Emitted when owner proposed an account that can accept ownership.\r\n    event OwnershipProposed(address indexed owner, address indexed pendingOwner);\r\n\r\n    /// @notice Emitted when unlocked tokens are merged into one.\r\n    event TokensMerged(uint256[] mergedTokenIds, uint256 tokenId, uint256 credits);\r\n\r\n    /*************/\r\n    /* Constants */\r\n    /*************/\r\n\r\n    /// @notice The IERC721Permit domain separator.\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\r\n\r\n    /// @notice The minimum units that can result from a lock of XDEFI.\r\n    function MINIMUM_UNITS() external view returns (uint256 minimumUnits_);\r\n\r\n    /*********/\r\n    /* State */\r\n    /*********/\r\n\r\n    /// @notice The base URI for NFT metadata.\r\n    function baseURI() external view returns (string memory baseURI_);\r\n\r\n    /// @notice The multiplier applied to the deposited XDEFI amount to determine the units of a position, and thus its share of future distributions.\r\n    function bonusMultiplierOf(uint256 duration_) external view returns (uint256 bonusMultiplier_);\r\n\r\n    /// @notice Returns the consume permit nonce for a token.\r\n    function consumePermitNonce(uint256 tokenId_) external view returns (uint256 nonce_);\r\n\r\n    /// @notice Returns the credits of a token.\r\n    function creditsOf(uint256 tokenId_) external view returns (uint256 credits_);\r\n\r\n    /// @notice The amount of XDEFI that is distributable to all currently locked positions.\r\n    function distributableXDEFI() external view returns (uint256 distributableXDEFI_);\r\n\r\n    /// @notice The contract is no longer allowing locking XDEFI, and is allowing all locked positions to be unlocked effective immediately.\r\n    function inEmergencyMode() external view returns (bool lockingDisabled_);\r\n\r\n    /// @notice The account that can set and unset lock periods and transfer ownership of the contract.\r\n    function owner() external view returns (address owner_);\r\n\r\n    /// @notice The account that can take ownership of the contract.\r\n    function pendingOwner() external view returns (address pendingOwner_);\r\n\r\n    /// @notice Returns the position details (`pointsCorrection_` is a value used in the amortized work pattern for token distribution).\r\n    function positionOf(uint256 tokenId_) external view returns (Position memory position_);\r\n\r\n    /// @notice The amount of XDEFI that was deposited by all currently locked positions.\r\n    function totalDepositedXDEFI() external view returns (uint256 totalDepositedXDEFI_);\r\n\r\n    /// @notice The amount of locked position units (in some way, it is the denominator use to distribute new XDEFI to each unit).\r\n    function totalUnits() external view returns (uint256 totalUnits_);\r\n\r\n    /// @notice The address of the XDEFI token.\r\n    function xdefi() external view returns (address XDEFI_);\r\n\r\n    /*******************/\r\n    /* Admin Functions */\r\n    /*******************/\r\n\r\n    /// @notice Allows the `pendingOwner` to take ownership of the contract.\r\n    function acceptOwnership() external;\r\n\r\n    /// @notice Disallows locking XDEFI, and is allows all locked positions to be unlocked effective immediately.\r\n    function activateEmergencyMode() external;\r\n\r\n    /// @notice Allows the owner to propose a new owner for the contract.\r\n    function proposeOwnership(address newOwner_) external;\r\n\r\n    /// @notice Sets the base URI for NFT metadata.\r\n    function setBaseURI(string calldata baseURI_) external;\r\n\r\n    /// @notice Allows the setting or un-setting (when the multiplier is 0) of multipliers for lock durations. Scaled such that 1x is 100.\r\n    function setLockPeriods(uint256[] calldata durations_, uint256[] calldata multipliers) external;\r\n\r\n    /**********************/\r\n    /* Position Functions */\r\n    /**********************/\r\n\r\n    /// @notice Unlock only the deposited amount from a non-fungible position, sending the XDEFI to some destination, when in emergency mode.\r\n    function emergencyUnlock(uint256 tokenId_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /// @notice Returns the bonus multiplier of a locked position.\r\n    function getBonusMultiplierOf(uint256 tokenId_) external view returns (uint256 bonusMultiplier_);\r\n\r\n    /// @notice Locks some amount of XDEFI into a non-fungible (NFT) position, for a duration of time. The caller must first approve this contract to spend its XDEFI.\r\n    function lock(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external returns (uint256 tokenId_);\r\n\r\n    /// @notice Locks some amount of XDEFI into a non-fungible (NFT) position, for a duration of time, with a signed permit to transfer XDEFI from the caller.\r\n    function lockWithPermit(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external returns (uint256 tokenId_);\r\n\r\n    /// @notice Unlock an un-lockable non-fungible position and re-lock some amount, for a duration of time, sending the balance XDEFI to some destination.\r\n    function relock(\r\n        uint256 tokenId_,\r\n        uint256 lockAmount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external returns (uint256 amountUnlocked_, uint256 newTokenId_);\r\n\r\n    /// @notice Unlock an un-lockable non-fungible position, sending the XDEFI to some destination.\r\n    function unlock(uint256 tokenId_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /// @notice To be called as part of distributions to force the contract to recognize recently transferred XDEFI as distributable.\r\n    function updateDistribution() external;\r\n\r\n    /// @notice Returns the amount of XDEFI that can be withdrawn when the position is unlocked. This will increase as distributions are made.\r\n    function withdrawableOf(uint256 tokenId_) external view returns (uint256 withdrawableXDEFI_);\r\n\r\n    /****************************/\r\n    /* Batch Position Functions */\r\n    /****************************/\r\n\r\n    /// @notice Unlocks several un-lockable non-fungible positions and re-lock some amount, for a duration of time, sending the balance XDEFI to some destination.\r\n    function relockBatch(\r\n        uint256[] calldata tokenIds_,\r\n        uint256 lockAmount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external returns (uint256 amountUnlocked_, uint256 newTokenId_);\r\n\r\n    /// @notice Unlocks several un-lockable non-fungible positions, sending the XDEFI to some destination.\r\n    function unlockBatch(uint256[] calldata tokenIds_, address destination_) external returns (uint256 amountUnlocked_);\r\n\r\n    /*****************/\r\n    /* NFT Functions */\r\n    /*****************/\r\n\r\n    /// @notice Returns the tier and credits of an NFT.\r\n    function attributesOf(uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tier_,\r\n            uint256 credits_,\r\n            uint256 withdrawable_,\r\n            uint256 expiry_\r\n        );\r\n\r\n    /// @notice Consumes some credits from an NFT, returning the number of credits left.\r\n    function consume(uint256 tokenId_, uint256 amount_) external returns (uint256 remainingCredits_);\r\n\r\n    /// @notice Consumes some credits from an NFT, with a signed permit from the owner, returning the number of credits left.\r\n    function consumeWithPermit(\r\n        uint256 tokenId_,\r\n        uint256 amount_,\r\n        uint256 limit_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external returns (uint256 remainingCredits_);\r\n\r\n    /// @notice Returns the URI for the contract metadata.\r\n    function contractURI() external view returns (string memory contractURI_);\r\n\r\n    /// @notice Returns the credits an NFT will have, given some amount locked for some duration.\r\n    function getCredits(uint256 amount_, uint256 duration_) external pure returns (uint256 credits_);\r\n\r\n    /// @notice Returns the tier an NFT will have, given some credits, which itself can be determined from `getCredits`.\r\n    function getTier(uint256 credits_) external pure returns (uint256 tier_);\r\n\r\n    /// @notice Burns several unlocked NFTs to combine their credits into the first.\r\n    function merge(uint256[] calldata tokenIds_) external returns (uint256 tokenId_, uint256 credits_);\r\n\r\n    /// @notice Returns the URI for the NFT metadata for a given token ID.\r\n    function tokenURI(uint256 tokenId_) external view returns (string memory tokenURI_);\r\n}\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: XDEFIDistribution.sol\r\n\r\n\r\n\r\npragma solidity =0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n/// @dev Handles distributing XDEFI to NFTs that have locked up XDEFI for various durations of time.\r\ncontract XDEFIDistribution is IXDEFIDistribution, ERC721Enumerable {\r\n    address internal constant ZERO_ADDRESS = address(0);\r\n\r\n    uint256 internal constant ZERO_UINT256 = uint256(0);\r\n    uint256 internal constant ONE_UINT256 = uint256(1);\r\n    uint256 internal constant ONE_HUNDRED_UINT256 = uint256(100);\r\n\r\n    uint256 internal constant TIER_1 = uint256(1);\r\n    uint256 internal constant TIER_2 = uint256(2);\r\n    uint256 internal constant TIER_3 = uint256(3);\r\n    uint256 internal constant TIER_4 = uint256(4);\r\n    uint256 internal constant TIER_5 = uint256(5);\r\n    uint256 internal constant TIER_6 = uint256(6);\r\n    uint256 internal constant TIER_7 = uint256(7);\r\n    uint256 internal constant TIER_8 = uint256(8);\r\n    uint256 internal constant TIER_9 = uint256(9);\r\n    uint256 internal constant TIER_10 = uint256(10);\r\n    uint256 internal constant TIER_11 = uint256(11);\r\n    uint256 internal constant TIER_12 = uint256(12);\r\n    uint256 internal constant TIER_13 = uint256(13);\r\n\r\n    uint256 internal constant TIER_2_THRESHOLD = uint256(150 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_3_THRESHOLD = uint256(300 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_4_THRESHOLD = uint256(750 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_5_THRESHOLD = uint256(1_500 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_6_THRESHOLD = uint256(3_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_7_THRESHOLD = uint256(7_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_8_THRESHOLD = uint256(15_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_9_THRESHOLD = uint256(30_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_10_THRESHOLD = uint256(60_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_11_THRESHOLD = uint256(120_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_12_THRESHOLD = uint256(250_000 * 1e18 * 30 days);\r\n    uint256 internal constant TIER_13_THRESHOLD = uint256(500_000 * 1e18 * 30 days);\r\n\r\n    // See https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 internal constant POINTS_MULTIPLIER_BITS = uint256(72);\r\n    uint256 internal _pointsPerUnit;\r\n\r\n    address public immutable xdefi;\r\n\r\n    uint256 public distributableXDEFI;\r\n    uint256 public totalDepositedXDEFI;\r\n    uint256 public totalUnits;\r\n\r\n    mapping(uint256 => Position) internal _positionOf;\r\n\r\n    mapping(uint256 => uint256) public creditsOf;\r\n\r\n    mapping(uint256 => uint256) public bonusMultiplierOf; // Scaled by 100, capped at 255 (i.e. 1.1x is 110, 2.55x is 255).\r\n\r\n    uint256 internal _tokensMinted;\r\n\r\n    string public baseURI;\r\n\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    uint256 internal constant IS_NOT_LOCKED = uint256(1);\r\n    uint256 internal constant IS_LOCKED = uint256(2);\r\n\r\n    uint256 internal _lockedStatus = IS_NOT_LOCKED;\r\n\r\n    bool public inEmergencyMode;\r\n\r\n    uint256 internal constant MAX_DURATION = uint256(315360000 seconds); // 10 years.\r\n    uint256 internal constant MAX_BONUS_MULTIPLIER = uint256(255); // 2.55x.\r\n\r\n    uint256 public constant MINIMUM_UNITS = uint256(1e18);\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    mapping(uint256 => uint256) public consumePermitNonce;\r\n\r\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\r\n\r\n    // keccak256('PermitConsume(uint256 tokenId,address consumer,uint256 limit,uint256 nonce,uint256 deadline)');\r\n    bytes32 private constant CONSUME_PERMIT_SIGNATURE_HASH = bytes32(0xa0a7128942405265cd830695cb06df90c6bfdbbe22677cc592c3d36c3180b079);\r\n\r\n    constructor(address xdefi_, string memory baseURI_) ERC721(\"XDEFI Badges\", \"bXDEFI\") {\r\n        // Set `xdefi` immutable and check that it's not empty.\r\n        if ((xdefi = xdefi_) == ZERO_ADDRESS) revert InvalidToken();\r\n\r\n        owner = msg.sender;\r\n        baseURI = baseURI_;\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                // keccak256(bytes('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')),\r\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\r\n                // keccak256(bytes('XDEFI Badges')),\r\n                0x4c62db20b6844e29b4686cc489ff0c3aac678cce88f9352a7a0ef17d53feb307,\r\n                // keccak256(bytes('1')),\r\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6,\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /*************/\r\n    /* Modifiers */\r\n    /*************/\r\n\r\n    modifier onlyOwner() {\r\n        if (owner != msg.sender) revert Unauthorized();\r\n\r\n        _;\r\n    }\r\n\r\n    modifier noReenter() {\r\n        if (_lockedStatus == IS_LOCKED) revert NoReentering();\r\n\r\n        _lockedStatus = IS_LOCKED;\r\n        _;\r\n        _lockedStatus = IS_NOT_LOCKED;\r\n    }\r\n\r\n    modifier updatePointsPerUnitAtStart() {\r\n        updateDistribution();\r\n        _;\r\n    }\r\n\r\n    modifier updateDistributableAtEnd() {\r\n        _;\r\n        // NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_destroyLockedPosition`) and transferring out.\r\n        _updateDistributableXDEFI();\r\n    }\r\n\r\n    /*******************/\r\n    /* Admin Functions */\r\n    /*******************/\r\n\r\n    function acceptOwnership() external {\r\n        if (pendingOwner != msg.sender) revert Unauthorized();\r\n\r\n        emit OwnershipAccepted(owner, msg.sender);\r\n        owner = msg.sender;\r\n        pendingOwner = ZERO_ADDRESS;\r\n    }\r\n\r\n    function activateEmergencyMode() external onlyOwner {\r\n        inEmergencyMode = true;\r\n        emit EmergencyModeActivated();\r\n    }\r\n\r\n    function proposeOwnership(address newOwner_) external onlyOwner {\r\n        emit OwnershipProposed(owner, pendingOwner = newOwner_);\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI_) external onlyOwner {\r\n        emit BaseURISet(baseURI = baseURI_);\r\n    }\r\n\r\n    function setLockPeriods(uint256[] calldata durations_, uint256[] calldata multipliers_) external onlyOwner {\r\n        // Revert if an empty duration array is passed in, which would result in a successful, yet wasted useless transaction.\r\n        if (durations_.length == ZERO_UINT256) revert EmptyArray();\r\n\r\n        for (uint256 i; i < durations_.length; ) {\r\n            uint256 duration = durations_[i];\r\n            uint256 multiplier = multipliers_[i];\r\n\r\n            // Revert if duration is 0 or longer than max defined.\r\n            if (duration == ZERO_UINT256 || duration > MAX_DURATION) revert InvalidDuration();\r\n\r\n            // Revert if bonus multiplier is larger than max defined.\r\n            if (multiplier > MAX_BONUS_MULTIPLIER) revert InvalidMultiplier();\r\n\r\n            emit LockPeriodSet(duration, bonusMultiplierOf[duration] = multiplier);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**********************/\r\n    /* Position Functions */\r\n    /**********************/\r\n\r\n    function emergencyUnlock(uint256 tokenId_, address destination_) external noReenter updateDistributableAtEnd returns (uint256 amountUnlocked_) {\r\n        // Revert if not in emergency mode.\r\n        if (!inEmergencyMode) revert NotInEmergencyMode();\r\n\r\n        // Revert if caller is not the token's owner, not approved for all the owner's token, and not approved for this specific token.\r\n        if (!_isApprovedOrOwner(msg.sender, tokenId_)) revert NotApprovedOrOwnerOfToken();\r\n\r\n        // Fetch position.\r\n        Position storage position = _positionOf[tokenId_];\r\n        uint256 units = uint256(position.units);\r\n        amountUnlocked_ = uint256(position.depositedXDEFI);\r\n\r\n        // Track deposits.\r\n        // NOTE: Can be unchecked since `totalDepositedXDEFI` increase in `_createLockedPosition` is the only place where `totalDepositedXDEFI` is set.\r\n        unchecked {\r\n            totalDepositedXDEFI -= amountUnlocked_;\r\n        }\r\n\r\n        // Delete FDT Position.\r\n        // NOTE: Can be unchecked since `totalUnits` increase in `_createLockedPosition` is the only place where `totalUnits` is set.\r\n        unchecked {\r\n            totalUnits -= units;\r\n        }\r\n\r\n        delete _positionOf[tokenId_];\r\n\r\n        // Send the unlocked XDEFI to the destination. (Don't need SafeERC20 since XDEFI is standard ERC20).\r\n        IERC20(xdefi).transfer(destination_, amountUnlocked_);\r\n    }\r\n\r\n    function getBonusMultiplierOf(uint256 tokenId_) external view returns (uint256 bonusMultiplier_) {\r\n        // Fetch position.\r\n        Position storage position = _positionOf[tokenId_];\r\n        uint256 units = uint256(position.units);\r\n        uint256 depositedXDEFI = uint256(position.depositedXDEFI);\r\n\r\n        bonusMultiplier_ = (units * ONE_HUNDRED_UINT256) / depositedXDEFI;\r\n    }\r\n\r\n    function lock(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external noReenter updatePointsPerUnitAtStart returns (uint256 tokenId_) {\r\n        tokenId_ = _lock(amount_, duration_, bonusMultiplier_, destination_);\r\n    }\r\n\r\n    function lockWithPermit(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external noReenter updatePointsPerUnitAtStart returns (uint256 tokenId_) {\r\n        // Approve this contract for the amount, using the provided signature.\r\n        IEIP2612(xdefi).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);\r\n\r\n        tokenId_ = _lock(amount_, duration_, bonusMultiplier_, destination_);\r\n    }\r\n\r\n    function positionOf(uint256 tokenId_) external view returns (Position memory position_) {\r\n        position_ = _positionOf[tokenId_];\r\n    }\r\n\r\n    function relock(\r\n        uint256 tokenId_,\r\n        uint256 lockAmount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external noReenter updatePointsPerUnitAtStart updateDistributableAtEnd returns (uint256 amountUnlocked_, uint256 newTokenId_) {\r\n        // Handle the unlock and get the amount of XDEFI eligible to withdraw.\r\n        amountUnlocked_ = _destroyLockedPosition(msg.sender, tokenId_);\r\n\r\n        newTokenId_ = _relock(lockAmount_, amountUnlocked_, duration_, bonusMultiplier_, destination_);\r\n    }\r\n\r\n    function unlock(uint256 tokenId_, address destination_) external noReenter updatePointsPerUnitAtStart updateDistributableAtEnd returns (uint256 amountUnlocked_) {\r\n        // Handle the unlock and get the amount of XDEFI eligible to withdraw.\r\n        amountUnlocked_ = _destroyLockedPosition(msg.sender, tokenId_);\r\n\r\n        // Send the unlocked XDEFI to the destination. (Don't need SafeERC20 since XDEFI is standard ERC20).\r\n        IERC20(xdefi).transfer(destination_, amountUnlocked_);\r\n    }\r\n\r\n    function updateDistribution() public {\r\n        // NOTE: Since `_updateDistributableXDEFI` is called anywhere after XDEFI is withdrawn from the contract, here `changeInDistributableXDEFI` should always be greater than 0.\r\n        uint256 increaseInDistributableXDEFI = _updateDistributableXDEFI();\r\n\r\n        // Return if no change in distributable XDEFI.\r\n        if (increaseInDistributableXDEFI == ZERO_UINT256) return;\r\n\r\n        uint256 totalUnitsCached = totalUnits;\r\n\r\n        // Revert if `totalUnitsCached` is zero. (This would have reverted anyway in the line below.)\r\n        if (totalUnitsCached == ZERO_UINT256) revert NoUnitSupply();\r\n\r\n        // NOTE: Max numerator is 240_000_000 * 1e18 * (2 ** 72), which is less than `type(uint256).max`, and min denominator is 1.\r\n        //       So, `_pointsPerUnit` can grow by 2**160 every distribution of XDEFI's max supply.\r\n        unchecked {\r\n            _pointsPerUnit += (increaseInDistributableXDEFI << POINTS_MULTIPLIER_BITS) / totalUnitsCached;\r\n        }\r\n\r\n        emit DistributionUpdated(msg.sender, increaseInDistributableXDEFI);\r\n    }\r\n\r\n    function withdrawableOf(uint256 tokenId_) public view returns (uint256 withdrawableXDEFI_) {\r\n        Position storage position = _positionOf[tokenId_];\r\n        withdrawableXDEFI_ = _withdrawableGiven(position.units, position.depositedXDEFI, position.pointsCorrection);\r\n    }\r\n\r\n    /****************************/\r\n    /* Batch Position Functions */\r\n    /****************************/\r\n\r\n    function relockBatch(\r\n        uint256[] calldata tokenIds_,\r\n        uint256 lockAmount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) external noReenter updatePointsPerUnitAtStart updateDistributableAtEnd returns (uint256 amountUnlocked_, uint256 newTokenId_) {\r\n        // Handle the unlocks and get the amount of XDEFI eligible to withdraw.\r\n        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);\r\n\r\n        newTokenId_ = _relock(lockAmount_, amountUnlocked_, duration_, bonusMultiplier_, destination_);\r\n    }\r\n\r\n    function unlockBatch(uint256[] calldata tokenIds_, address destination_) external noReenter updatePointsPerUnitAtStart updateDistributableAtEnd returns (uint256 amountUnlocked_) {\r\n        // Handle the unlocks and get the amount of XDEFI eligible to withdraw.\r\n        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);\r\n\r\n        // Send the unlocked XDEFI to the destination. (Don't need SafeERC20 since XDEFI is standard ERC20).\r\n        IERC20(xdefi).transfer(destination_, amountUnlocked_);\r\n    }\r\n\r\n    /*****************/\r\n    /* NFT Functions */\r\n    /*****************/\r\n\r\n    function attributesOf(uint256 tokenId_)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tier_,\r\n            uint256 credits_,\r\n            uint256 withdrawable_,\r\n            uint256 expiry_\r\n        )\r\n    {\r\n        // Revert if the token does not exist.\r\n        if (!_exists(tokenId_)) revert TokenDoesNotExist();\r\n\r\n        credits_ = creditsOf[tokenId_];\r\n        tier_ = getTier(credits_);\r\n        withdrawable_ = withdrawableOf(tokenId_);\r\n        expiry_ = _positionOf[tokenId_].expiry;\r\n    }\r\n\r\n    function consume(uint256 tokenId_, uint256 amount_) external returns (uint256 remainingCredits_) {\r\n        // Revert if the caller is not the token's owner, not approved for all the owner's token, and not approved for this specific token.\r\n        if (!_isApprovedOrOwner(msg.sender, tokenId_)) revert InvalidConsumePermit();\r\n\r\n        // Consume some of the token's credits.\r\n        remainingCredits_ = _consume(tokenId_, amount_, msg.sender);\r\n    }\r\n\r\n    function consumeWithPermit(\r\n        uint256 tokenId_,\r\n        uint256 amount_,\r\n        uint256 limit_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external returns (uint256 remainingCredits_) {\r\n        // Revert if the permit's deadline has been elapsed.\r\n        if (block.timestamp >= deadline_) revert ConsumePermitExpired();\r\n\r\n        // Revert if the amount being consumed is greater than the permit's defined limit.\r\n        if (amount_ > limit_) revert BeyondConsumeLimit();\r\n\r\n        // Hash the data as per keccak256(\"PermitConsume(uint256 tokenId,address consumer,uint256 limit,uint256 nonce,uint256 deadline)\");\r\n        bytes32 digest = keccak256(abi.encode(CONSUME_PERMIT_SIGNATURE_HASH, tokenId_, msg.sender, limit_, consumePermitNonce[tokenId_]++, deadline_));\r\n\r\n        // Get the digest that was to be signed signed.\r\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, DOMAIN_SEPARATOR, digest));\r\n\r\n        address recoveredAddress = ecrecover(digest, v_, r_, s_);\r\n\r\n        // Revert if the account that signed the permit is not the token's owner, not approved for all the owner's token, and not approved for this specific token.\r\n        if (!_isApprovedOrOwner(recoveredAddress, tokenId_)) revert InvalidConsumePermit();\r\n\r\n        // Consume some of the token's credits.\r\n        remainingCredits_ = _consume(tokenId_, amount_, msg.sender);\r\n    }\r\n\r\n    function contractURI() external view returns (string memory contractURI_) {\r\n        contractURI_ = string(abi.encodePacked(baseURI, \"info\"));\r\n    }\r\n\r\n    function getCredits(uint256 amount_, uint256 duration_) public pure returns (uint256 credits_) {\r\n        // Credits is implicitly capped at max supply of XDEFI for 10 years locked (less than 2**116).\r\n        unchecked {\r\n            credits_ = amount_ * duration_;\r\n        }\r\n    }\r\n\r\n    function getTier(uint256 credits_) public pure returns (uint256 tier_) {\r\n        if (credits_ < TIER_2_THRESHOLD) return TIER_1;\r\n\r\n        if (credits_ < TIER_3_THRESHOLD) return TIER_2;\r\n\r\n        if (credits_ < TIER_4_THRESHOLD) return TIER_3;\r\n\r\n        if (credits_ < TIER_5_THRESHOLD) return TIER_4;\r\n\r\n        if (credits_ < TIER_6_THRESHOLD) return TIER_5;\r\n\r\n        if (credits_ < TIER_7_THRESHOLD) return TIER_6;\r\n\r\n        if (credits_ < TIER_8_THRESHOLD) return TIER_7;\r\n\r\n        if (credits_ < TIER_9_THRESHOLD) return TIER_8;\r\n\r\n        if (credits_ < TIER_10_THRESHOLD) return TIER_9;\r\n\r\n        if (credits_ < TIER_11_THRESHOLD) return TIER_10;\r\n\r\n        if (credits_ < TIER_12_THRESHOLD) return TIER_11;\r\n\r\n        if (credits_ < TIER_13_THRESHOLD) return TIER_12;\r\n\r\n        return TIER_13;\r\n    }\r\n\r\n    function merge(uint256[] calldata tokenIds_) external returns (uint256 tokenId_, uint256 credits_) {\r\n        // Revert if trying to merge 0 or 1 tokens, which cannot be done.\r\n        if (tokenIds_.length <= ONE_UINT256) revert MustMergeMultiple();\r\n\r\n        uint256 iterator = tokenIds_.length - 1;\r\n\r\n        // For each NFT from last to second, check that it belongs to the caller, burn it, and accumulate the credits.\r\n        while (iterator > ZERO_UINT256) {\r\n            tokenId_ = tokenIds_[iterator];\r\n\r\n            // Revert if the caller is not the token's owner, not approved for all the owner's token, and not approved for this specific token.\r\n            if (!_isApprovedOrOwner(msg.sender, tokenId_)) revert NotApprovedOrOwnerOfToken();\r\n\r\n            // Revert if position has an expiry property, which means it still exists.\r\n            if (_positionOf[tokenId_].expiry != ZERO_UINT256) revert PositionStillLocked();\r\n\r\n            unchecked {\r\n                // Max credits of a previously locked position is `type(uint128).max`, so `credits_` is reasonably not going to overflow.\r\n                credits_ += creditsOf[tokenId_];\r\n\r\n                --iterator;\r\n            }\r\n\r\n            // Clear the credits for this token, and burn the token.\r\n            delete creditsOf[tokenId_];\r\n            _burn(tokenId_);\r\n        }\r\n\r\n        // The resulting token id is the first token.\r\n        tokenId_ = tokenIds_[0];\r\n\r\n        // The total credits merged into the first token is the sum of the first's plus the accumulation of the credits from burned tokens.\r\n        credits_ = (creditsOf[tokenId_] += credits_);\r\n\r\n        emit TokensMerged(tokenIds_, tokenId_, credits_);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view override(IXDEFIDistribution, ERC721) returns (string memory tokenURI_) {\r\n        // Revert if the token does not exist.\r\n        if (!_exists(tokenId_)) revert TokenDoesNotExist();\r\n\r\n        tokenURI_ = string(abi.encodePacked(baseURI, Strings.toString(tokenId_)));\r\n    }\r\n\r\n    /**********************/\r\n    /* Internal Functions */\r\n    /**********************/\r\n\r\n    function _consume(\r\n        uint256 tokenId_,\r\n        uint256 amount_,\r\n        address consumer_\r\n    ) internal returns (uint256 remainingCredits_) {\r\n        remainingCredits_ = creditsOf[tokenId_];\r\n\r\n        // Revert if credits to decrement is greater than credits of nft.\r\n        if (amount_ > remainingCredits_) revert InsufficientCredits();\r\n\r\n        unchecked {\r\n            // Can be unchecked due to check done above.\r\n            creditsOf[tokenId_] = (remainingCredits_ -= amount_);\r\n        }\r\n\r\n        emit CreditsConsumed(tokenId_, consumer_, amount_);\r\n    }\r\n\r\n    function _createLockedPosition(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) internal returns (uint256 tokenId_) {\r\n        // Revert is locking has been disabled.\r\n        if (inEmergencyMode) revert LockingIsDisabled();\r\n\r\n        uint256 bonusMultiplier = bonusMultiplierOf[duration_];\r\n\r\n        // Revert if the bonus multiplier is zero.\r\n        if (bonusMultiplier == ZERO_UINT256) revert InvalidDuration();\r\n\r\n        // Revert if the bonus multiplier is not at least what was expected.\r\n        if (bonusMultiplier < bonusMultiplier_) revert IncorrectBonusMultiplier();\r\n\r\n        unchecked {\r\n            // Generate a token id.\r\n            tokenId_ = ++_tokensMinted;\r\n\r\n            // Store credits.\r\n            creditsOf[tokenId_] = getCredits(amount_, duration_);\r\n\r\n            // Track deposits.\r\n            totalDepositedXDEFI += amount_;\r\n\r\n            // The rest creates the locked position.\r\n            uint256 units = (amount_ * bonusMultiplier) / ONE_HUNDRED_UINT256;\r\n\r\n            // Revert if position will end up with less than define minimum lockable units.\r\n            if (units < MINIMUM_UNITS) revert LockResultsInTooFewUnits();\r\n\r\n            totalUnits += units;\r\n\r\n            _positionOf[tokenId_] = Position({\r\n                units: uint96(units), // 240M * 1e18 * 255 can never be larger than a `uint96`.\r\n                depositedXDEFI: uint88(amount_), // There are only 240M (18 decimals) XDEFI tokens so can never be larger than a `uint88`.\r\n                expiry: uint32(block.timestamp + duration_), // For many years, block.timestamp + duration_ will never be larger than a `uint32`.\r\n                created: uint32(block.timestamp), // For many years, block.timestamp will never be larger than a `uint32`.\r\n                pointsCorrection: _pointsPerUnit * units // _pointsPerUnit * units cannot be greater than a `uint256`.\r\n            });\r\n        }\r\n\r\n        emit LockPositionCreated(tokenId_, destination_, amount_, duration_);\r\n\r\n        // Mint a locked staked position NFT to the destination.\r\n        _safeMint(destination_, tokenId_);\r\n    }\r\n\r\n    function _destroyLockedPosition(address account_, uint256 tokenId_) internal returns (uint256 amountUnlocked_) {\r\n        // Revert if account_ is not the token's owner, not approved for all the owner's token, and not approved for this specific token.\r\n        if (!_isApprovedOrOwner(account_, tokenId_)) revert NotApprovedOrOwnerOfToken();\r\n\r\n        // Fetch position.\r\n        Position storage position = _positionOf[tokenId_];\r\n        uint256 units = uint256(position.units);\r\n        uint256 depositedXDEFI = uint256(position.depositedXDEFI);\r\n        uint256 expiry = uint256(position.expiry);\r\n\r\n        // Revert if the position does not have an expiry, which means the position does not exist.\r\n        if (expiry == ZERO_UINT256) revert PositionAlreadyUnlocked();\r\n\r\n        // Revert if not enough time has elapsed in order to unlock AND locking is not disabled (which would mean we are allowing emergency withdrawals).\r\n        if (block.timestamp < expiry && !inEmergencyMode) revert CannotUnlock();\r\n\r\n        // Get the withdrawable amount of XDEFI for the position.\r\n        amountUnlocked_ = _withdrawableGiven(units, depositedXDEFI, position.pointsCorrection);\r\n\r\n        // Track deposits.\r\n        // NOTE: Can be unchecked since `totalDepositedXDEFI` increase in `_createLockedPosition` is the only place where `totalDepositedXDEFI` is set.\r\n        unchecked {\r\n            totalDepositedXDEFI -= depositedXDEFI;\r\n        }\r\n\r\n        // Delete FDT Position.\r\n        // NOTE: Can be unchecked since `totalUnits` increase in `_createLockedPosition` is the only place where `totalUnits` is set.\r\n        unchecked {\r\n            totalUnits -= units;\r\n        }\r\n\r\n        delete _positionOf[tokenId_];\r\n\r\n        emit LockPositionWithdrawn(tokenId_, account_, amountUnlocked_);\r\n    }\r\n\r\n    function _lock(\r\n        uint256 amount_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) internal returns (uint256 tokenId_) {\r\n        // Lock the XDEFI in the contract. (Don't need SafeERC20 since XDEFI is standard ERC20).\r\n        IERC20(xdefi).transferFrom(msg.sender, address(this), amount_);\r\n\r\n        // Handle the lock position creation and get the tokenId of the locked position.\r\n        tokenId_ = _createLockedPosition(amount_, duration_, bonusMultiplier_, destination_);\r\n    }\r\n\r\n    function _relock(\r\n        uint256 lockAmount_,\r\n        uint256 amountUnlocked_,\r\n        uint256 duration_,\r\n        uint256 bonusMultiplier_,\r\n        address destination_\r\n    ) internal returns (uint256 tokenId_) {\r\n        // Throw convenient error if trying to re-lock more than was unlocked. `amountUnlocked_ - lockAmount_` cannot revert below now.\r\n        if (lockAmount_ > amountUnlocked_) revert InsufficientAmountUnlocked();\r\n\r\n        // Handle the lock position creation and get the tokenId of the locked position.\r\n        tokenId_ = _createLockedPosition(lockAmount_, duration_, bonusMultiplier_, destination_);\r\n\r\n        unchecked {\r\n            if (amountUnlocked_ - lockAmount_ != ZERO_UINT256) {\r\n                // Send the excess XDEFI to the destination, if needed. (Don't need SafeERC20 since XDEFI is standard ERC20).\r\n                IERC20(xdefi).transfer(destination_, amountUnlocked_ - lockAmount_);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _unlockBatch(address account_, uint256[] calldata tokenIds_) internal returns (uint256 amountUnlocked_) {\r\n        // Revert if trying to unlock 0 positions, which would result in a successful, yet wasted useless transaction.\r\n        if (tokenIds_.length == ZERO_UINT256) revert EmptyArray();\r\n\r\n        // Handle the unlock for each position and accumulate the unlocked amount.\r\n        for (uint256 i; i < tokenIds_.length; ) {\r\n            unchecked {\r\n                amountUnlocked_ += _destroyLockedPosition(account_, tokenIds_[i]);\r\n\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updateDistributableXDEFI() internal returns (uint256 increaseInDistributableXDEFI_) {\r\n        uint256 xdefiBalance = IERC20(xdefi).balanceOf(address(this));\r\n        uint256 previousDistributableXDEFI = distributableXDEFI;\r\n\r\n        unchecked {\r\n            uint256 currentDistributableXDEFI = xdefiBalance > totalDepositedXDEFI ? xdefiBalance - totalDepositedXDEFI : ZERO_UINT256;\r\n\r\n            // Return 0 early if distributable XDEFI did not change.\r\n            if (currentDistributableXDEFI == previousDistributableXDEFI) return ZERO_UINT256;\r\n\r\n            // Set distributableXDEFI.\r\n            distributableXDEFI = currentDistributableXDEFI;\r\n\r\n            // Return 0 early if distributable XDEFI decreased.\r\n            if (currentDistributableXDEFI < previousDistributableXDEFI) return ZERO_UINT256;\r\n\r\n            increaseInDistributableXDEFI_ = currentDistributableXDEFI - previousDistributableXDEFI;\r\n        }\r\n    }\r\n\r\n    function _withdrawableGiven(\r\n        uint256 units_,\r\n        uint256 depositedXDEFI_,\r\n        uint256 pointsCorrection_\r\n    ) internal view returns (uint256 withdrawableXDEFI_) {\r\n        // NOTE: In a worst case (120k XDEFI locked at 2.55x bonus, 120k XDEFI reward, cycled 1 million times) `_pointsPerUnit * units_` is smaller than 2**248.\r\n        //       Since `pointsCorrection_` is always less than `_pointsPerUnit * units_`, (because `_pointsPerUnit` only grows) there is no underflow on the subtraction.\r\n        //       Finally, `depositedXDEFI_` is at most 88 bits, so after the division by a very large `POINTS_MULTIPLIER`, this doesn't need to be checked.\r\n        unchecked {\r\n            withdrawableXDEFI_ = (((_pointsPerUnit * units_) - pointsCorrection_) >> POINTS_MULTIPLIER_BITS) + depositedXDEFI_;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xdefi_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BeyondConsumeLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConsumePermitExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectBonusMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmountUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCredits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConsumePermit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockResultsInTooFewUnits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockingIsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustMergeMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReentering\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnitSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwnerOfToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInEmergencyMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionAlreadyUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionStillLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditsConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyModeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"LockPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LockPositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockPositionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"mergedTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"TokensMerged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_UNITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"attributesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusMultiplierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"consume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingCredits_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"consumePermitNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"consumeWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingCredits_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creditsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributableXDEFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"emergencyUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getBonusMultiplierOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"}],\"name\":\"getCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credits_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"credits_\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inEmergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"lockWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"merge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"positionOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"units\",\"type\":\"uint96\"},{\"internalType\":\"uint88\",\"name\":\"depositedXDEFI\",\"type\":\"uint88\"},{\"internalType\":\"uint32\",\"name\":\"expiry\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"pointsCorrection\",\"type\":\"uint256\"}],\"internalType\":\"struct IXDEFIDistribution.Position\",\"name\":\"position_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"relock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"relockBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"durations_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multipliers_\",\"type\":\"uint256[]\"}],\"name\":\"setLockPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedXDEFI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"unlockBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnlocked_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"withdrawableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableXDEFI_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xdefi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XDEFIDistribution", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000072b886d09c117654ab7da13a14d603001de0b7770000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c68747470733a2f2f7374616b696e672d6170692e78646566692e696f00000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://08f44c4f44406741d7a1d635245021e57f69f96beed3fe60c42db712ac1b072f"}]}