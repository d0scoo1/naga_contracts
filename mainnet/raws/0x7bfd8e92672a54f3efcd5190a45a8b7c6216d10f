{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\ninterface Whitelist {\r\n    function add(address _wlAddress) public;\r\n    function addBulk(address[] _wlAddresses) public;\r\n    function remove(address _wlAddresses) public;\r\n    function removeBulk(address[] _wlAddresses) public;\r\n    function getAll() public constant returns(address[]);\r\n    function isInList(address _checkAddress) public constant returns(bool);\r\n}\r\n\r\ncontract Administrated {\r\n    address public administrator;\r\n\r\n    modifier onlyAdministrator() {\r\n        require(administrator == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(administrator != tx.origin);\r\n        _;\r\n    }\r\n\r\n    function setAdministrator(address _administrator)\r\n        internal\r\n    {\r\n        administrator = _administrator;\r\n    }\r\n}\r\n\r\ncontract BasicWhitelist is Whitelist, Administrated {\r\n    address[] public whitelist;\r\n\r\n    //Up to 65536 users in list\r\n    mapping(address => uint16) public wlIndex;\r\n\r\n\r\n    function BasicWhitelist()\r\n        public\r\n    {\r\n        setAdministrator(tx.origin);\r\n    }\r\n\r\n    //Add whitelist\r\n    function add(address _wlAddress)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        if ( !isInList(_wlAddress) ) {\r\n            wlIndex[_wlAddress] = uint16(whitelist.length);\r\n            whitelist.push(_wlAddress);\r\n        }\r\n    }\r\n\r\n    //Bulk add\r\n    function addBulk(address[] _wlAddresses)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(_wlAddresses.length <= 256);\r\n\r\n        for (uint8 i = 0; i < _wlAddresses.length; i++) {\r\n            add(_wlAddresses[i]);\r\n        }\r\n    }\r\n\r\n    //Remove address from whitelist\r\n    function remove(address _wlAddress)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        if ( isInList(_wlAddress) ) {\r\n            uint16 index = wlIndex[_wlAddress];\r\n            wlIndex[_wlAddress] = 0;\r\n\r\n            for ( uint16 i = index; i < ( whitelist.length - 1 ); i++) {\r\n                whitelist[i] = whitelist[i + 1];\r\n            }\r\n\r\n            delete whitelist[whitelist.length - 1];\r\n            whitelist.length--;\r\n        }\r\n    }\r\n\r\n    //Bulk remove\r\n    function removeBulk(address[] _wlAddresses)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(_wlAddresses.length <= 256);\r\n\r\n        for (uint8 i = 0; i < _wlAddresses.length; i++) {\r\n            remove(_wlAddresses[i]);\r\n        }\r\n    }\r\n\r\n    //Get list\r\n    function getAll()\r\n        public\r\n        constant\r\n        returns(address[])\r\n    {\r\n        return whitelist;\r\n    }\r\n\r\n    //\r\n    function isInList(address _checkAddress)\r\n        public\r\n        constant\r\n        returns(bool)\r\n    {\r\n        return whitelist.length > 0\r\n                && (\r\n                    wlIndex[_checkAddress] > 0\r\n                    || whitelist[wlIndex[_checkAddress]] == _checkAddress\r\n                   );\r\n    }\r\n}\r\n\r\n\r\ncontract UNITPaymentGatewayList is BasicWhitelist {\r\n    function UNITPaymentGatewayList()\r\n        public\r\n    {\r\n        setAdministrator(tx.origin);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddress\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddress\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wlIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddresses\",\"type\":\"address[]\"}],\"name\":\"removeBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_checkAddress\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddresses\",\"type\":\"address[]\"}],\"name\":\"addBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "UNITPaymentGatewayList", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://96505e6f1b2ac7d201246d4437f8af06aacc226248d277e34d3f1cf095cd7053"}]}