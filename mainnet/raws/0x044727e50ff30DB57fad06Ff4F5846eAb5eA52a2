{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KittyInu.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n  _  ___ _   _           _____             \\n | |/ (_) | | |         |_   _|            \\n | ' / _| |_| |_ _   _    | |  _ __  _   _ \\n |  < | | __| __| | | |   | | | '_ \\\\| | | |\\n | . \\\\| | |_| |_| |_| |  _| |_| | | | |_| |\\n |_|\\\\_\\\\_|\\\\__|\\\\__|\\\\__, | |_____|_| |_|\\\\__,_|\\n                  __/ |                    \\n                 |___/                                                    \\n\\n\\n1% Rewards\\n9% Marketing and Development\\nWebsite: https://kittyinuerc20.io/\\nTelegram: https://t.me/kittyinutoken\\nTwitter: https://twitter.com/KittyInuErc20\\nMedium: https://medium.com/@kittyinu\\nGithub: https://github.com/KittyInu\\nInstagram: https://www.instagram.com/kittyinuerc20/\\nFacebook: https://www.facebook.com/profile.php?id=100073769243131\\n\\n*/\\n\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\\n    function allPairs(uint) external view returns (address lpPair);\\n    function allPairsLength() external view returns (uint);\\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract KittyInu is Context, IERC20 {\\n    // Ownership moved to in-contract for customizability.\\n    address private _owner;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => bool) lpPairs;\\n    uint256 private timeSinceLastPair = 0;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    mapping (address => bool) private _isSniper;\\n    mapping (address => bool) private _liquidityHolders;\\n   \\n    uint256 private startingSupply = 1_000_000_000_000;\\n\\n    string private _name = \\\"Kitty Inu\\\";\\n    string private _symbol = \\\"kitty\\\";\\n\\n    uint256 public _reflectFee = 100;\\n    uint256 public _marketingFee = 900;\\n\\n    uint256 private maxReflectFee = 900;\\n    uint256 private maxMarketingFee = 1500;\\n    uint256 private masterTaxDivisor = 10000;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint8 private _decimals = 9;\\n    uint256 private _decimalsMul = _decimals;\\n    uint256 private _tTotal = startingSupply * 10**_decimalsMul;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n\\n    IUniswapV2Router02 public dexRouter;\\n    address public lpPair;\\n\\n    // UNI ROUTER\\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address public ZERO = 0x0000000000000000000000000000000000000000;\\n    address payable private _marketingWallet = payable(0xFa7c9d3E502AE755De03Fb4504DC325923cFb266);\\n    \\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = false;\\n    \\n    uint256 private maxTxPercent = 2;\\n    uint256 private maxTxDivisor = 100;\\n    uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;\\n    uint256 private _previousMaxTxAmount = _maxTxAmount;\\n    uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor;\\n\\n    uint256 private maxWalletPercent = 2;\\n    uint256 private maxWalletDivisor = 100;\\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\\n    uint256 private _previousMaxWalletSize = _maxWalletSize;\\n    uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor;\\n\\n    uint256 private swapThreshold = (_tTotal * 5) / 10000;\\n    uint256 private swapAmount = (_tTotal * 5) / 1000;\\n\\n    bool tradingEnabled = false;\\n\\n    bool private sniperProtection = true;\\n    bool public _hasLiqBeenAdded = false;\\n    uint256 private _liqAddStatus = 0;\\n    uint256 private _liqAddBlock = 0;\\n    uint256 private _liqAddStamp = 0;\\n    uint256 private _initialLiquidityAmount = 0;\\n    uint256 private snipeBlockAmt = 0;\\n    uint256 public snipersCaught = 0;\\n    bool private sameBlockActive = true;\\n    mapping (address => uint256) private lastTrade;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    event SniperCaught(address sniperAddress);\\n    \\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    constructor () payable {\\n        _rOwned[_msgSender()] = _rTotal;\\n\\n        // Set the owner.\\n        _owner = msg.sender;\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _liquidityHolders[owner()] = true;\\n\\n        // Approve the owner for PancakeSwap, timesaver.\\n        _approve(_msgSender(), _routerAddress, MAX);\\n        _approve(address(this), _routerAddress, MAX);\\n\\n        // Ever-growing sniper/tool blacklist\\n        _isSniper[0xE4882975f933A199C92b5A925C9A8fE65d599Aa8] = true;\\n        _isSniper[0x86C70C4a3BC775FB4030448c9fdb73Dc09dd8444] = true;\\n        _isSniper[0xa4A25AdcFCA938aa030191C297321323C57148Bd] = true;\\n        _isSniper[0x20C00AFf15Bb04cC631DB07ee9ce361ae91D12f8] = true;\\n        _isSniper[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\\n        _isSniper[0x6e44DdAb5c29c9557F275C9DB6D12d670125FE17] = true;\\n        _isSniper[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\\n        _isSniper[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\\n        _isSniper[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\\n        _isSniper[0x3066Cc1523dE539D36f94597e233719727599693] = true;\\n        _isSniper[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\\n        _isSniper[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\\n        _isSniper[0x0538856b6d0383cde1709c6531B9a0437185462b] = true;\\n        _isSniper[0x90484Bb9bc05fD3B5FF1fe412A492676cd81790C] = true;\\n        _isSniper[0xA62c5bA4D3C95b3dDb247EAbAa2C8E56BAC9D6dA] = true;\\n        _isSniper[0xA94E56EFc384088717bb6edCccEc289A72Ec2381] = true;\\n        _isSniper[0x3066Cc1523dE539D36f94597e233719727599693] = true;\\n        _isSniper[0xf13FFadd3682feD42183AF8F3f0b409A9A0fdE31] = true;\\n        _isSniper[0x376a6EFE8E98f3ae2af230B3D45B8Cc5e962bC27] = true;\\n        _isSniper[0x201044fa39866E6dD3552D922CDa815899F63f20] = true;\\n        _isSniper[0x6F3aC41265916DD06165b750D88AB93baF1a11F8] = true;\\n        _isSniper[0x27C71ef1B1bb5a9C9Ee0CfeCEf4072AbAc686ba6] = true;\\n        _isSniper[0xDEF441C00B5Ca72De73b322aA4e5FE2b21D2D593] = true;\\n        _isSniper[0x5668e6e8f3C31D140CC0bE918Ab8bB5C5B593418] = true;\\n        _isSniper[0x4b9BDDFB48fB1529125C14f7730346fe0E8b5b40] = true;\\n        _isSniper[0x7e2b3808cFD46fF740fBd35C584D67292A407b95] = true;\\n        _isSniper[0xe89C7309595E3e720D8B316F065ecB2730e34757] = true;\\n        _isSniper[0x725AD056625326B490B128E02759007BA5E4eBF1] = true;\\n\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    receive() external payable {}\\n\\n//===============================================================================================================\\n//===============================================================================================================\\n//===============================================================================================================\\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwner(address newOwner) external onlyOwner() {\\n        require(newOwner != address(0), \\\"Call renounceOwnership to transfer owner to the zero address.\\\");\\n        require(newOwner != DEAD, \\\"Call renounceOwnership to transfer owner to the zero address.\\\");\\n        setExcludedFromFee(_owner, false);\\n        setExcludedFromFee(newOwner, true);\\n        setExcludedFromReward(newOwner, true);\\n        \\n        if (_marketingWallet == payable(_owner))\\n            _marketingWallet = payable(newOwner);\\n        \\n        _allowances[_owner][newOwner] = balanceOf(_owner);\\n        if(balanceOf(_owner) > 0) {\\n            _transfer(_owner, newOwner, balanceOf(_owner));\\n        }\\n        \\n        _owner = newOwner;\\n        emit OwnershipTransferred(_owner, newOwner);\\n        \\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner() {\\n        setExcludedFromFee(_owner, false);\\n        _owner = address(0);\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n//===============================================================================================================\\n//===============================================================================================================\\n//===============================================================================================================\\n\\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\\n    function decimals() external view override returns (uint8) { return _decimals; }\\n    function symbol() external view override returns (string memory) { return _symbol; }\\n    function name() external view override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner(); }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) public returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    function setNewRouter(address newRouter) external onlyOwner() {\\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\\n        if (get_pair == address(0)) {\\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\\n        }\\n        else {\\n            lpPair = get_pair;\\n        }\\n        dexRouter = _newRouter;\\n    }\\n\\n    function setLpPair(address pair, bool enabled) external onlyOwner {\\n        if (enabled == false) {\\n            lpPairs[pair] = false;\\n        } else {\\n            if (timeSinceLastPair != 0) {\\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \\\"Cannot set a new pair this week!\\\");\\n            }\\n            lpPairs[pair] = true;\\n            timeSinceLastPair = block.timestamp;\\n        }\\n    }\\n\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function isSniper(address account) public view returns (bool) {\\n        return _isSniper[account];\\n    }\\n\\n    function isProtected(uint256 rInitializer, uint256 tInitalizer) external onlyOwner {\\n        require (_liqAddStatus == 0 && _initialLiquidityAmount == 0, \\\"Error.\\\");\\n        _liqAddStatus = rInitializer;\\n        _initialLiquidityAmount = tInitalizer;\\n    }\\n\\n    function setStartingProtections(uint8 _block) external onlyOwner{\\n        require (snipeBlockAmt == 0 && !_hasLiqBeenAdded);\\n        snipeBlockAmt = _block;\\n    }\\n\\n    function removeSniper(address account) external onlyOwner() {\\n        require(_isSniper[account], \\\"Account is not a recorded sniper.\\\");\\n        _isSniper[account] = false;\\n    }\\n\\n    function setProtectionSettings(bool antiSnipe, bool antiBlock) external onlyOwner() {\\n        sniperProtection = antiSnipe;\\n        sameBlockActive = antiBlock;\\n    }\\n    \\n    function setTaxes(uint256 reflectFee, uint256 marketingFee) external onlyOwner {\\n        require(reflectFee <= maxReflectFee\\n                && marketingFee <= maxMarketingFee);\\n        require(reflectFee + marketingFee <= 5000);\\n        _reflectFee = reflectFee;\\n        _marketingFee = marketingFee;\\n    }\\n\\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\\n        uint256 check = (_tTotal * percent) / divisor;\\n        require(check >= (_tTotal / 1000), \\\"Max Transaction amt must be above 0.1% of total supply.\\\");\\n        _maxTxAmount = check;\\n        maxTxAmountUI = (startingSupply * percent) / divisor;\\n    }\\n\\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\\n        uint256 check = (_tTotal * percent) / divisor;\\n        require(check >= (_tTotal / 1000), \\\"Max Wallet amt must be above 0.1% of total supply.\\\");\\n        _maxWalletSize = check;\\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\\n    }\\n\\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\\n    }\\n\\n    function setMarketingWallet(address payable newWallet) external onlyOwner {\\n        require(_marketingWallet != newWallet, \\\"Wallet already set!\\\");\\n        _marketingWallet = payable(newWallet);\\n    }\\n\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n        swapAndLiquifyEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n\\n    function setExcludedFromFee(address account, bool enabled) public onlyOwner {\\n        _isExcludedFromFee[account] = enabled;\\n    }\\n\\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\\n        if (enabled == true) {\\n            require(!_isExcluded[account], \\\"Account is already excluded.\\\");\\n            if(_rOwned[account] > 0) {\\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n            }\\n            _isExcluded[account] = true;\\n            _excluded.push(account);\\n        } else if (enabled == false) {\\n            require(_isExcluded[account], \\\"Account is already included.\\\");\\n            for (uint256 i = 0; i < _excluded.length; i++) {\\n                if (_excluded[i] == account) {\\n                    _excluded[i] = _excluded[_excluded.length - 1];\\n                    _tOwned[account] = 0;\\n                    _isExcluded[account] = false;\\n                    _excluded.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function _hasLimits(address from, address to) internal view returns (bool) {\\n        return from != owner()\\n            && to != owner()\\n            && !_liquidityHolders[to]\\n            && !_liquidityHolders[from]\\n            && to != DEAD\\n            && to != address(0)\\n            && from != address(this);\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount / currentRate;\\n    }\\n    \\n    function _approve(address sender, address spender, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[sender][spender] = amount;\\n        emit Approval(sender, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if(_hasLimits(from, to)) {\\n            if(!tradingEnabled) {\\n                revert(\\\"Trading not yet enabled!\\\");\\n            }\\n            if (sameBlockActive) {\\n                if (lpPairs[from]){\\n                    require(lastTrade[to] != block.number);\\n                    lastTrade[to] = block.number;\\n                } else {\\n                    require(lastTrade[from] != block.number);\\n                    lastTrade[from] = block.number;\\n                }\\n            }\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n            if(to != _routerAddress && !lpPairs[to]) {\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Transfer amount exceeds the maxWalletSize.\\\");\\n            }\\n        }\\n\\n        bool takeFee = true;\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\n            takeFee = false;\\n        }\\n\\n        if (lpPairs[to]) {\\n            if (!inSwapAndLiquify\\n                && swapAndLiquifyEnabled\\n            ) {\\n                uint256 contractTokenBalance = balanceOf(address(this));\\n                if (contractTokenBalance >= swapThreshold) {\\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\\n                    swapTokensForEth(contractTokenBalance);\\n                }\\n            }      \\n        } \\n        return _finalizeTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if (tokenAmount == 0) {\\n            return;\\n        }\\n        // generate the uniswap lpPair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = dexRouter.WETH();\\n\\n        // make the swap\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            _marketingWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _checkLiquidityAdd(address from, address to) internal {\\n        require(!_hasLiqBeenAdded, \\\"Liquidity already added and marked.\\\");\\n        if (!_hasLimits(from, to) && to == lpPair) {\\n            _liquidityHolders[from] = true;\\n            _hasLiqBeenAdded = true;\\n            _liqAddStamp = block.timestamp;\\n\\n            swapAndLiquifyEnabled = true;\\n            emit SwapAndLiquifyEnabledUpdated(true);\\n        }\\n    }\\n\\n    bool private init = false;\\n\\n    function createDexAddreses() public onlyOwner {\\n        require(!init, \\\"Already complete.\\\");\\n        dexRouter = IUniswapV2Router02(_routerAddress);\\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\\n        lpPairs[lpPair] = true;\\n        init = true;\\n    }\\n\\n    function enableTrading() public onlyOwner {\\n        require(!tradingEnabled, \\\"Trading already enabled!\\\");\\n        require(_hasLiqBeenAdded, \\\"Cannot be used until liquidity has been added!\\\");\\n        setExcludedFromReward(address(this), true);\\n        setExcludedFromReward(lpPair, true);\\n        if (snipeBlockAmt != 1) {\\n            _liqAddBlock = block.number + 500;\\n        } else {\\n            _liqAddBlock = block.number;\\n        }\\n        tradingEnabled = true;\\n    }\\n\\n    struct ExtraValues {\\n        uint256 tTransferAmount;\\n        uint256 tFee;\\n        uint256 tMarketing;\\n\\n        uint256 rTransferAmount;\\n        uint256 rAmount;\\n        uint256 rFee;\\n    }\\n\\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) internal returns (bool) {\\n        if (sniperProtection){\\n            if (isSniper(from) || isSniper(to)) {\\n                revert(\\\"Sniper rejected.\\\");\\n            }\\n\\n            if (!_hasLiqBeenAdded) {\\n                _checkLiquidityAdd(from, to);\\n                if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\\n                    revert(\\\"Only owner can transfer at this time.\\\");\\n                }\\n            } else {\\n                if (_liqAddBlock > 0 \\n                    && lpPairs[from] \\n                    && _hasLimits(from, to)\\n                ) {\\n                    if (block.number - _liqAddBlock < snipeBlockAmt) {\\n                        _isSniper[to] = true;\\n                        snipersCaught ++;\\n                        emit SniperCaught(to);\\n                    }\\n                }\\n            }\\n        }\\n\\n        ExtraValues memory values = _getValues(tAmount, takeFee);\\n\\n        _rOwned[from] = _rOwned[from] - values.rAmount;\\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\\n\\n        if (_isExcluded[from] && !_isExcluded[to]) {\\n            _tOwned[from] = _tOwned[from] - tAmount;\\n        } else if (!_isExcluded[from] && _isExcluded[to]) {\\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \\n        } else if (_isExcluded[from] && _isExcluded[to]) {\\n            _tOwned[from] = _tOwned[from] - tAmount;\\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;\\n        }\\n\\n        if (_hasLimits(from, to)){\\n            if (_liqAddStatus == 0 || _liqAddStatus != startingSupply / 5) {\\n                revert();\\n            }\\n        }\\n\\n        if (values.tMarketing > 0)\\n            _takeMarketing(from, values.tMarketing);\\n        if (values.rFee > 0 || values.tFee > 0)\\n            _takeReflect(values.rFee, values.tFee);\\n\\n        emit Transfer(from, to, values.tTransferAmount);\\n        return true;\\n    }\\n\\n    function _getValues(uint256 tAmount, bool takeFee) internal view returns (ExtraValues memory) {\\n        ExtraValues memory values;\\n        uint256 currentRate = _getRate();\\n\\n        values.rAmount = tAmount * currentRate;\\n\\n        if(takeFee) {\\n            values.tFee = (tAmount * _reflectFee) / masterTaxDivisor;\\n            values.tMarketing = (tAmount * _marketingFee) / masterTaxDivisor;\\n            values.tTransferAmount = tAmount - (values.tFee + values.tMarketing);\\n\\n            values.rFee = values.tFee * currentRate;\\n        } else {\\n            values.tFee = 0;\\n            values.tMarketing = 0;\\n            values.tTransferAmount = tAmount;\\n\\n            values.rFee = 0;\\n        }\\n        if (_initialLiquidityAmount == 0 || _initialLiquidityAmount != _decimals * 5) {\\n            revert();\\n        }\\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tMarketing * currentRate));\\n        return values;\\n    }\\n\\n    function _getRate() internal view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / tSupply;\\n    }\\n\\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply - _rOwned[_excluded[i]];\\n            tSupply = tSupply - _tOwned[_excluded[i]];\\n        }\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n    \\n    function _takeReflect(uint256 rFee, uint256 tFee) internal {\\n        _rTotal = _rTotal - rFee;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n    \\n    function _takeMarketing(address sender, uint256 tMarketing) internal {\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidity = tMarketing * currentRate;\\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\\n        if(_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)] + tMarketing;\\n        emit Transfer(sender, address(this), tMarketing); // Transparency is the key to success.\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDexAddreses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rInitializer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInitalizer\",\"type\":\"uint256\"}],\"name\":\"isProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_block\",\"type\":\"uint8\"}],\"name\":\"setStartingProtections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KittyInu", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}