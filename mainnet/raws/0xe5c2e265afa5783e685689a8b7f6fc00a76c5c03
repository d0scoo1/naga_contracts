{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/inventory/Renderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @dev Contract responsible for handling metadata requests for both Heroes and Items address\\ncontract MetaAndMagicRenderer {\\n\\n    mapping(uint256 => address) decks; // \\n    mapping(bytes4 => address)  svgs; // svg to trait indicator to address that stores it\\n\\n    string constant heroDesc = unicode\\\"Meta & Magic Heroes is a collection of 3,000 genesis heroes to fight in a 100% on-chain NFT game. \u26d3\ufe0f Can you defeat the bosses to win? \ud83c\udfc6 Season I \ud83d\ude08 Equip weapons \ud83d\udde1\ufe0f Cast spells \ud83d\udd25 ERC-721A standard \ud83c\udf52\\\";\\n    string constant itemDesc = unicode\\\"Meta & Magic Items is a collection of 10,000 relics that can be equipped by genesis heroes to fight in a 100% on-chain NFT game. \u26d3  Can you defeat the bosses to win? \ud83c\udfc6 Season I \ud83d\ude08 Equip weapons \ud83d\udde1\ufe0f Cast spells \ud83d\udd25 ERC-721A standard \ud83c\udf52\\\";\\n\\n    string constant header = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" id=\\\"mm\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 64 64\\\">';\\n    string constant footer = '<style>#hero{shape-rendering: crispedges;image-rendering: -webkit-crisp-edges;image-rendering: -moz-crisp-edges;image-rendering: crisp-edges;image-rendering: pixelated;-ms-interpolation-mode: nearest-neighbor;}</style></svg>';\\n\\n    function getUri(uint256 id, uint256[6] calldata traits, uint256 cat) external view returns (string memory meta) {\\n        meta = _getMetadata(id, traits, cat);\\n    }\\n\\n    function getPlaceholder(uint256 cat) external pure returns (string memory meta){\\n        meta = _getPlaceholderMetadata(cat);\\n    }\\n\\n    function setSvg(bytes4 sig, address impl) external {\\n            svgs[sig] = impl;   \\n    }\\n\\n    function setSvgs(bytes4[] calldata sigs, address impl) external {\\n        for (uint256 i = 0; i < sigs.length; i++) {\\n            svgs[sigs[i]] = impl;   \\n        }\\n    }\\n\\n    function setDeck(uint256 cat, address deck) external {\\n        decks[cat] = deck;\\n    }\\n\\n    // Categories Documentation\\n    // 1 - Hero\\n    // 2 - Items\\n    // 3 - Hero Boss Drop\\n    // 4 - Items Boss Drop\\n    // 5 - 20 Are 1-of-1 following the order laid out in _getUniqueName\\n\\n    function _getMetadata(uint256 id, uint256[6] calldata traits, uint256 cat) internal view returns (string memory meta) {\\n        string memory svg = _getSvg(id, cat, traits);\\n\\n        meta = \\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Strings.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":',  _getName(id, cat),\\n                            ',\\\"description\\\":\\\"',cat % 2 == 1 ? heroDesc : itemDesc,\\n                            '\\\",\\\"image\\\": \\\"data:image/svg+xml;base64,', svg,\\n                            '\\\",\\\"attributes\\\":[', _getAttributes(id, cat, traits),']}')\\n                        )\\n                    )\\n                );\\n    }\\n\\n    function _getPlaceholderMetadata(uint256 cat) internal pure returns (string memory meta) {\\n        meta = \\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Strings.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"', cat == 1 ? 'Unrevealed Hero' : 'Unrevealed Item',\\n                            '\\\",\\\"description\\\":\\\"',cat == 1 ? heroDesc : itemDesc,\\n                            '\\\",\\\"image\\\": \\\"', cat == 1 ?'https://bafybeiejxuylnujaxbarjogla2fi7qhougbvuzrdhy6r4zhwqj7onbyz2i.ipfs.infura-ipfs.io/' : 'https://bafybeiftizk7brkixhhxbj3ooz7qnh46hdqligeg64m76fhkf54clnvk6i.ipfs.infura-ipfs.io/',\\n                            '\\\",\\\"attributes\\\":[]}')\\n                        )\\n                    )\\n                );\\n    }\\n\\n\\n\\n    function _getName(uint256 id, uint256 cat) internal pure returns (string memory name) {\\n        string memory category;\\n\\n        if (cat == 1) category = string(abi.encodePacked('Hero #', Strings.toString(id)));\\n\\n        if (cat == 2) {\\n            uint class = id % 4;\\n            string memory className;\\n            if (class <= 1) className = class == 0 ? \\\"Attack\\\" : \\\"Defense\\\"; \\n            if (class > 1)  className = class == 2 ? \\\"Spell\\\" : \\\"Buff\\\"; \\n            category = string(abi.encodePacked(className, ' #', Strings.toString(id)));\\n        }\\n\\n\\n        if (cat == 3 || cat == 4) category = string(abi.encodePacked('Boss Drop #', Strings.toString(id)));\\n        if (cat >= 5) category = _getUniqueName(cat);\\n\\n        name = string(abi.encodePacked('\\\"',category,'\\\"'));\\n    }\\n\\n    function _getAttributes(uint256 id, uint256 cat, uint256[6] calldata traits) internal view returns (string memory atts) {\\n        if (cat > 4) return string(abi.encodePacked('{\\\"trait_type\\\":\\\"One-of-One\\\",\\\"value\\\":\\\"',_getUniqueName(cat),'\\\"}'));\\n\\n        string[6] memory names = IDecks(decks[cat % 2 == 0 ? 2 : 1]).getTraitsNames(id, traits);\\n\\n        return string(abi.encodePacked(names[0],',', names[1],',', names[2],',', names[3],',', names[4],',', names[5]));\\n    }\\n\\n    function _getUniqueName(uint256 cat) internal pure returns (string memory name) {\\n        if (cat == 5)  name = \\\"Alexander the Great\\\";\\n        if (cat == 6)  name = \\\"Excalibur of King Arthur\\\";\\n        if (cat == 7)  name = \\\"Brahma\\\";\\n        if (cat == 8)  name = \\\"Mjolnir of Thor\\\";\\n        if (cat == 9)  name = \\\"Mutant Ape\\\";\\n        if (cat == 10) name = \\\"Headband of Wukong\\\";\\n        if (cat == 11) name = \\\"Fujibayashi Nagato\\\";\\n        if (cat == 12) name = \\\"Achilles Armor\\\";\\n        if (cat == 13) name = \\\"Hou Yi\\\";\\n        if (cat == 14) name = \\\"Avada Kedavra\\\";\\n        if (cat == 15) name = \\\"Merlin\\\";\\n        if (cat == 16) name = \\\"Kamehameha\\\";\\n        if (cat == 17) name = \\\"Rasputin\\\";\\n        if (cat == 18) name = \\\"Urim and Thummim\\\";\\n        if (cat == 20) name = \\\"Philosopher's Stone\\\";\\n    }\\n\\n\\n    function _getSvg(uint256 id, uint256 cat, uint256[6] memory traits) internal view returns (string memory svg) {\\n        string memory content = cat > 4 ? _getSingleSvg(cat) : _getLayeredSvg(id, cat, traits);\\n\\n        svg = Strings.encode(abi.encodePacked(header, content ,footer));\\n    }\\n\\n    function _getSingleSvg(uint256 cat) internal view returns (string memory svg) {\\n        bytes4 sig = bytes4(keccak256(abi.encodePacked(string((abi.encodePacked(\\\"one\\\", Strings.toString(cat), '()'))))));\\n        svg = wrapSingleTag(call(svgs[sig], sig));\\n    }\\n\\n    function _getLayeredSvg(uint256 id, uint256 cat, uint256[6] memory traits) internal view returns (string memory svg) {\\n        bytes4[6] memory layers = [bytes4(0),bytes4(0),bytes4(0),bytes4(0),bytes4(0), bytes4(0)];\\n\\n        for (uint256 i = 0; i < 6; i++) {\\n            // Hero\\n            if (cat == 1 || cat == 3) {\\n                layers[i] = bytes4(keccak256(abi.encodePacked((string(abi.encodePacked(\\\"hero\\\", Strings.toString(i), Strings.toString(traits[i]),'()'))))));\\n                if (i == 2) {\\n                    // overriding rank trait\\n                    layers[i] = bytes4(keccak256(abi.encodePacked(string((abi.encodePacked(\\\"hero\\\", Strings.toString(i), Strings.toString(traits[i - 1]), Strings.toString(traits[i]),'()'))))));\\n                }\\n            }\\n            if (cat == 2 || cat == 4) {\\n                layers[i] = bytes4(keccak256(abi.encodePacked(string((abi.encodePacked(\\\"item\\\", Strings.toString(cat == 2 ? id % 4 : 4), Strings.toString(i), Strings.toString(traits[i]),'()'))))));\\n            }\\n        }\\n\\n        svg =  string(abi.encodePacked(\\n            wrapTag(call(svgs[layers[0]], layers[0])),\\n            wrapTag(call(svgs[layers[1]], layers[1])),\\n            wrapTag(call(svgs[layers[2]], layers[2])),\\n            wrapTag(call(svgs[layers[3]], layers[3])),\\n            wrapTag(call(svgs[layers[4]], layers[4])),\\n            wrapTag(call(svgs[layers[5]], layers[5]))\\n        ));\\n    }\\n\\n    function call(address source, bytes4 sig) internal view returns (string memory svg) {\\n        (bool succ, bytes memory ret)  = source.staticcall(abi.encodeWithSelector(sig));\\n        require(succ, \\\"failed to get data\\\");\\n        svg = abi.decode(ret, (string));\\n    }\\n\\n    function wrapTag(string memory uri) internal pure returns (string memory) {\\n        return string(abi.encodePacked('<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"64\\\" height=\\\"64\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,', uri, '\\\"/>'));\\n    }\\n\\n    function wrapSingleTag(string memory uri) internal pure returns (string memory) {\\n        return string(abi.encodePacked('<image x=\\\"0\\\" y=\\\"0\\\" width=\\\"100%\\\" height=\\\"100%\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,', uri, '\\\"/>'));\\n    }\\n    \\n}\\n\\nlibrary Strings {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n                mstore(resultPtr, out)\\n                resultPtr := add(resultPtr, 4)\\n            }\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n            mstore(result, encodedLen)\\n        }\\n        return string(result);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\ninterface IDecks {\\n    function getTraitsNames(uint256 id, uint256[6] calldata atts) external pure returns(string[6] memory names);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cat\",\"type\":\"uint256\"}],\"name\":\"getPlaceholder\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"traits\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"cat\",\"type\":\"uint256\"}],\"name\":\"getUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deck\",\"type\":\"address\"}],\"name\":\"setDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setSvg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setSvgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaAndMagicRenderer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}