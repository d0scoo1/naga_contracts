{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1600\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Spool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"./spool/SpoolExternal.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the central Spool contract.\\r\\n *\\r\\n * @dev\\r\\n * The Spool implementation is the central part of the system.\\r\\n * All the assets flow through this contract and are deposited\\r\\n * to the integrated protocols.\\r\\n *\\r\\n * Spool implementation consists of following contracts:\\r\\n * 1. BaseStorage: stores common variables with all the strategy adapters (they are execuret as delegatecode)\\r\\n * 2. SpoolBase: holds Spool state variables and provides some of the common vault functions\\r\\n * 3. SpoolStrategy: implements the logic of how to interact with the strategies\\r\\n * 4. SpoolDoHardWork: implements functions to process the do hard work\\r\\n * 5. SpoolReallocation: adjusts vault reallocation that takes place at the next do hard work\\r\\n * 6. SpoolExternal: exposes functons to interact with the Spool from the vault (deposit/withdraw/redeem)\\r\\n * 7. Spool: implements a constructor to deploy a contracts\\r\\n */\\r\\ncontract Spool is SpoolExternal {\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the central Spool contract values\\r\\n     *\\r\\n     * @param _spoolOwner the spool owner contract\\r\\n     * @param _controller responsible for providing the source of truth\\r\\n     * @param _fastWithdraw allows fast withdraw of user shares\\r\\n     */\\r\\n    constructor(\\r\\n        ISpoolOwner _spoolOwner,\\r\\n        IController _controller,\\r\\n        address _fastWithdraw\\r\\n    )\\r\\n        SpoolBase(\\r\\n            _spoolOwner,\\r\\n            _controller,\\r\\n            _fastWithdraw\\r\\n        )\\r\\n    {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ISwapData.sol\\\";\\n\\ninterface IBaseStrategy {\\n    function underlying() external view returns (IERC20);\\n\\n    function getStrategyBalance() external view returns (uint128);\\n\\n    function getStrategyUnderlyingWithRewards() external view returns(uint128);\\n\\n    function process(uint256[] calldata, bool, SwapData[] calldata) external;\\n\\n    function processReallocation(uint256[] calldata, ProcessReallocationData calldata) external returns(uint128);\\n\\n    function processDeposit(uint256[] calldata) external;\\n\\n    function fastWithdraw(uint128, uint256[] calldata, SwapData[] calldata) external returns(uint128);\\n\\n    function claimRewards(SwapData[] calldata) external;\\n\\n    function emergencyWithdraw(address recipient, uint256[] calldata data) external;\\n\\n    function initialize() external;\\n\\n    function disable() external;\\n}\\n\\nstruct ProcessReallocationData {\\n    uint128 sharesToWithdraw;\\n    uint128 optimizedShares;\\n    uint128 optimizedWithdrawnAmount;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IController {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function strategies(uint256 i) external view returns (address);\\n\\n    function validStrategy(address strategy) external view returns (bool);\\n\\n    function validVault(address vault) external view returns (bool);\\n\\n    function getStrategiesCount() external view returns(uint8);\\n\\n    function supportedUnderlying(IERC20 underlying)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getAllStrategies() external view returns (address[] memory);\\n\\n    function verifyStrategies(address[] calldata _strategies) external view;\\n\\n    function transferToSpool(\\n        address transferFrom,\\n        uint256 amount\\n    ) external;\\n\\n    function checkPaused() external view;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event EmergencyWithdrawStrategy(address indexed strategy);\\n    event EmergencyRecipientUpdated(address indexed recipient);\\n    event EmergencyWithdrawerUpdated(address indexed withdrawer, bool set);\\n    event PauserUpdated(address indexed user, bool set);\\n    event UnpauserUpdated(address indexed user, bool set);\\n    event VaultCreated(address indexed vault, address underlying, address[] strategies, uint256[] proportions,\\n        uint16 vaultFee, address riskProvider, int8 riskTolerance);\\n    event StrategyAdded(address strategy);\\n    event StrategyRemoved(address strategy);\\n    event VaultInvalid(address vault);\\n    event DisableStrategy(address strategy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpoolOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface ISpoolOwner {\\r\\n    function isSpoolOwner(address user) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISwapData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @notice Strict holding information how to swap the asset\\r\\n * @member slippage minumum output amount\\r\\n * @member path swap path, first byte represents an action (e.g. Uniswap V2 custom swap), rest is swap specific path\\r\\n */\\r\\nstruct SwapData {\\r\\n    uint256 slippage; // min amount out\\r\\n    bytes path; // 1st byte is action, then path \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./vault/IVaultRestricted.sol\\\";\\nimport \\\"./vault/IVaultIndexActions.sol\\\";\\nimport \\\"./vault/IRewardDrip.sol\\\";\\nimport \\\"./vault/IVaultBase.sol\\\";\\nimport \\\"./vault/IVaultImmutable.sol\\\";\\n\\ninterface IVault is IVaultRestricted, IVaultIndexActions, IRewardDrip, IVaultBase, IVaultImmutable {}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolBase {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getCompletedGlobalIndex() external view returns(uint24);\\n\\n    function getActiveGlobalIndex() external view returns(uint24);\\n\\n    function isMidReallocation() external view returns (bool);\\n\\n    /* ========== EVENTS ========== */\\n\\n    event ReallocationTableUpdated(\\n        uint24 indexed index,\\n        bytes32 reallocationTableHash\\n    );\\n\\n    event ReallocationTableUpdatedWithTable(\\n        uint24 indexed index,\\n        bytes32 reallocationTableHash,\\n        uint256[][] reallocationTable\\n    );\\n    \\n    event DoHardWorkCompleted(uint24 indexed index);\\n\\n    event SetAllocationProvider(address actor, bool isAllocationProvider);\\n    event SetIsDoHardWorker(address actor, bool isDoHardWorker);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolDoHardWork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface ISpoolDoHardWork {\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event DoHardWorkStrategyCompleted(address indexed strat, uint256 indexed index);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolExternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../ISwapData.sol\\\";\\n\\ninterface ISpoolExternal {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function deposit(address strategy, uint128 amount, uint256 index) external;\\n\\n    function withdraw(address strategy, uint256 vaultProportion, uint256 index) external;\\n\\n    function fastWithdrawStrat(address strat, address underlying, uint256 shares, uint256[] calldata slippages, SwapData[] calldata swapData) external returns(uint128);\\n\\n    function redeem(address strat, uint256 index) external returns (uint128, uint128);\\n\\n    function redeemUnderlying(uint128 amount) external;\\n\\n    function redeemReallocation(address[] calldata vaultStrategies, uint256 depositProportions, uint256 index) external;\\n\\n    function removeShares(address[] calldata vaultStrategies, uint256 vaultProportion) external returns(uint128[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolReallocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolReallocation {\\n    event StartReallocation(uint24 indexed index);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/spool/ISpoolStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface ISpoolStrategy {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getUnderlying(address strat) external returns (uint128);\\n    \\n    function getVaultTotalUnderlyingAtIndex(address strat, uint256 index) external view returns(uint128);\\n\\n    function addStrategy(address strat) external;\\n\\n    function disableStrategy(address strategy, bool skipDisable) external;\\n\\n    function runDisableStrategy(address strategy) external;\\n\\n    function emergencyWithdraw(\\n        address strat,\\n        address withdrawRecipient,\\n        uint256[] calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IRewardDrip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDrip {\\n    /* ========== STRUCTS ========== */\\n\\n    // The reward configuration struct, containing all the necessary data of a typical Synthetix StakingReward contract\\n    struct RewardConfiguration {\\n        uint32 rewardsDuration;\\n        uint32 periodFinish;\\n        uint192 rewardRate; // rewards per second multiplied by accuracy\\n        uint32 lastUpdateTime;\\n        uint224 rewardPerTokenStored;\\n        mapping(address => uint256) userRewardPerTokenPaid;\\n        mapping(address => uint256) rewards;\\n    }\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getActiveRewards(address account) external;\\n    function tokenBlacklist(IERC20 token) view external returns(bool);\\n\\n    /* ========== EVENTS ========== */\\n    \\n    event RewardPaid(IERC20 token, address indexed user, uint256 reward);\\n    event RewardAdded(IERC20 indexed token, uint256 amount, uint256 duration);\\n    event RewardExtended(IERC20 indexed token, uint256 amount, uint256 leftover, uint256 duration, uint32 periodFinish);\\n    event RewardRemoved(IERC20 indexed token);\\n    event PeriodFinishUpdated(IERC20 indexed token, uint32 periodFinish);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IVaultDetails.sol\\\";\\n\\ninterface IVaultBase {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function initialize(VaultInitializable calldata vaultInitializable) external;\\n\\n    /* ========== STRUCTS ========== */\\n\\n    struct User {\\n        uint128 instantDeposit; // used for calculating rewards\\n        uint128 activeDeposit; // users deposit after deposit process and claim\\n        uint128 owed; // users owed underlying amount after withdraw has been processed and claimed\\n        uint128 withdrawnDeposits; // users withdrawn deposit, used to calculate performance fees\\n        uint128 shares; // users shares after deposit process and claim\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Claimed(address indexed member, uint256 claimAmount);\\n    event Deposit(address indexed member, uint256 indexed index, uint256 amount);\\n    event Withdraw(address indexed member, uint256 indexed index, uint256 shares);\\n    event WithdrawFast(address indexed member, uint256 shares);\\n    event StrategyRemoved(uint256 i, address strategy);\\n    event TransferVaultOwner(address owner);\\n    event LowerVaultFee(uint16 fee);\\n    event UpdateName(string name);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultDetails.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nstruct VaultDetails {\\n    address underlying;\\n    address[] strategies;\\n    uint256[] proportions;\\n    address creator;\\n    uint16 vaultFee;\\n    address riskProvider;\\n    int8 riskTolerance;\\n    string name;\\n}\\n\\nstruct VaultInitializable {\\n    string name;\\n    address owner;\\n    uint16 fee;\\n    address[] strategies;\\n    uint256[] proportions;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultImmutable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\nstruct VaultImmutables {\\n    IERC20 underlying;\\n    address riskProvider;\\n    int8 riskTolerance;\\n}\\n\\ninterface IVaultImmutable {\\n    /* ========== FUNCTIONS ========== */\\n\\n    function underlying() external view returns (IERC20);\\n\\n    function riskProvider() external view returns (address);\\n\\n    function riskTolerance() external view returns (int8);\\n}\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultIndexActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IVaultIndexActions {\\n\\n    /* ========== STRUCTS ========== */\\n\\n    struct IndexAction {\\n        uint128 depositAmount;\\n        uint128 withdrawShares;\\n    }\\n\\n    struct LastIndexInteracted {\\n        uint128 index1;\\n        uint128 index2;\\n    }\\n\\n    struct Redeem {\\n        uint128 depositShares;\\n        uint128 withdrawnAmount;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event VaultRedeem(uint indexed globalIndex);\\n    event UserRedeem(address indexed member, uint indexed globalIndex);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault/IVaultRestricted.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\ninterface IVaultRestricted {\\n    /* ========== FUNCTIONS ========== */\\n    \\n    function reallocate(\\n        address[] calldata vaultStrategies,\\n        uint256 newVaultProportions,\\n        uint256 finishedIndex,\\n        uint24 activeIndex\\n    ) external returns (uint256[] memory, uint256);\\n\\n    function payFees(uint256 profit) external returns (uint256 feesPaid);\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Reallocate(uint24 indexed index, uint256 newProportions);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Bitwise.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nlibrary Bitwise {\\n    function get8BitUintByIndex(uint256 bitwiseData, uint256 i) internal pure returns(uint256) {\\n        return (bitwiseData >> (8 * i)) & type(uint8).max;\\n    }\\n\\n    // 14 bits is used for strategy proportions in a vault as FULL_PERCENT is 10_000\\n    function get14BitUintByIndex(uint256 bitwiseData, uint256 i) internal pure returns(uint256) {\\n        return (bitwiseData >> (14 * i)) & (16_383); // 16.383 is 2^14 - 1\\n    }\\n\\n    function set14BitUintByIndex(uint256 bitwiseData, uint256 i, uint256 num14bit) internal pure returns(uint256) {\\n        return bitwiseData + (num14bit << (14 * i));\\n    }\\n\\n    function reset14BitUintByIndex(uint256 bitwiseData, uint256 i) internal pure returns(uint256) {\\n        return bitwiseData & (~(16_383 << (14 * i)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Hash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @notice Library to provide utils for hashing and hash compatison of Spool related data\\r\\n */\\r\\nlibrary Hash {\\r\\n    function hashReallocationTable(uint256[][] memory reallocationTable) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encode(reallocationTable));\\r\\n    }\\r\\n\\r\\n    function hashStrategies(address[] memory strategies) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(strategies));\\r\\n    }\\r\\n\\r\\n    function sameStrategies(address[] memory strategies1, address[] memory strategies2) internal pure returns(bool) {\\r\\n        return hashStrategies(strategies1) == hashStrategies(strategies2);\\r\\n    }\\r\\n\\r\\n    function sameStrategies(address[] memory strategies, bytes32 strategiesHash) internal pure returns(bool) {\\r\\n        return hashStrategies(strategies) == strategiesHash;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../external/@openzeppelin/utils/SafeCast.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice A collection of custom math ustils used throughout the system\\r\\n */\\r\\nlibrary Math {\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? b : a;\\r\\n    }\\r\\n\\r\\n    function getProportion128(uint256 mul1, uint256 mul2, uint256 div) internal pure returns (uint128) {\\r\\n        return SafeCast.toUint128(((mul1 * mul2) / div));\\r\\n    }\\r\\n\\r\\n    function getProportion128Unchecked(uint256 mul1, uint256 mul2, uint256 div) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            return uint128((mul1 * mul2) / div);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Max/128Bit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n/** @notice Handle setting zero value in a storage word as uint128 max value.\\n  *\\n  *  @dev\\n  *  The purpose of this is to avoid resetting a storage word to the zero value; \\n  *  the gas cost of re-initializing the value is the same as setting the word originally.\\n  *  so instead, if word is to be set to zero, we set it to uint128 max.\\n  *\\n  *   - anytime a word is loaded from storage: call \\\"get\\\"\\n  *   - anytime a word is written to storage: call \\\"set\\\"\\n  *   - common operations on uints are also bundled here.\\n  *\\n  * NOTE: This library should ONLY be used when reading or writing *directly* from storage.\\n */\\nlibrary Max128Bit {\\n    uint128 internal constant ZERO = type(uint128).max;\\n\\n    function get(uint128 a) internal pure returns(uint128) {\\n        return (a == ZERO) ? 0 : a;\\n    }\\n\\n    function set(uint128 a) internal pure returns(uint128){\\n        return (a == 0) ? ZERO : a;\\n    }\\n\\n    function add(uint128 a, uint128 b) internal pure returns(uint128 c){\\n        a = get(a);\\n        c = set(a + b);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/BaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\nimport \\\"../interfaces/ISwapData.sol\\\";\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/// @notice Strategy struct for all strategies\\r\\nstruct Strategy {\\r\\n    uint128 totalShares;\\r\\n\\r\\n    /// @notice Denotes strategy completed index\\r\\n    uint24 index;\\r\\n\\r\\n    /// @notice Denotes whether strategy is removed\\r\\n    /// @dev after removing this value can never change, hence strategy cannot be added back again\\r\\n    bool isRemoved;\\r\\n\\r\\n    /// @notice Pending geposit amount and pending shares withdrawn by all users for next index \\r\\n    Pending pendingUser;\\r\\n\\r\\n    /// @notice Used if strategies \\\"dohardwork\\\" hasn't been executed yet in the current index\\r\\n    Pending pendingUserNext;\\r\\n\\r\\n    /// @dev Usually a temp variable when compounding\\r\\n    mapping(address => uint256) pendingRewards;\\r\\n\\r\\n    /// @dev Usually a temp variable when compounding\\r\\n    uint128 pendingDepositReward;\\r\\n\\r\\n    /// @notice Amount of lp tokens the strategy holds, NOTE: not all strategies use it\\r\\n    uint256 lpTokens;\\r\\n\\r\\n    // ----- REALLOCATION VARIABLES -----\\r\\n\\r\\n    bool isInDepositPhase;\\r\\n\\r\\n    /// @notice Used to store amount of optimized shares, so they can be substracted at the end\\r\\n    /// @dev Only for temporary use, should be reset to 0 in same transaction\\r\\n    uint128 optimizedSharesWithdrawn;\\r\\n\\r\\n    /// @dev Underlying amount pending to be deposited from other strategies at reallocation \\r\\n    /// @dev resets after the strategy reallocation DHW is finished\\r\\n    uint128 pendingReallocateDeposit;\\r\\n\\r\\n    /// @notice Stores amount of optimized underlying amount when reallocating\\r\\n    /// @dev resets after the strategy reallocation DHW is finished\\r\\n    /// @dev This is \\\"virtual\\\" amount that was matched between this strategy and others when reallocating\\r\\n    uint128 pendingReallocateOptimizedDeposit;\\r\\n\\r\\n    // ------------------------------------\\r\\n\\r\\n    /// @notice Total underlying amoung at index\\r\\n    mapping(uint256 => TotalUnderlying) totalUnderlying;\\r\\n\\r\\n    /// @notice Batches stored after each DHW with index as a key\\r\\n    /// @dev Holds information for vauls to redeem newly gained shares and withdrawn amounts belonging to users\\r\\n    mapping(uint256 => Batch) batches;\\r\\n\\r\\n    /// @notice Batches stored after each DHW reallocating (if strategy was set to reallocate)\\r\\n    /// @dev Holds information for vauls to redeem newly gained shares and withdrawn shares to complete reallocation\\r\\n    mapping(uint256 => BatchReallocation) reallocationBatches;\\r\\n\\r\\n    /// @notice Vaults holding this strategy shares\\r\\n    mapping(address => Vault) vaults;\\r\\n\\r\\n    /// @notice Future proof storage\\r\\n    mapping(bytes32 => AdditionalStorage) additionalStorage;\\r\\n\\r\\n    /// @dev Make sure to reset it to 0 after emergency withdrawal\\r\\n    uint256 emergencyPending;\\r\\n}\\r\\n\\r\\n/// @notice Unprocessed deposit underlying amount and strategy share amount from users\\r\\nstruct Pending {\\r\\n    uint128 deposit;\\r\\n    uint128 sharesToWithdraw;\\r\\n}\\r\\n\\r\\n/// @notice Struct storing total underlying balance of a strategy for an index, along with total shares at same index\\r\\nstruct TotalUnderlying {\\r\\n    uint128 amount;\\r\\n    uint128 totalShares;\\r\\n}\\r\\n\\r\\n/// @notice Stored after executing DHW for each index.\\r\\n/// @dev This is used for vaults to redeem their deposit.\\r\\nstruct Batch {\\r\\n    /// @notice total underlying deposited in index\\r\\n    uint128 deposited;\\r\\n    uint128 depositedReceived;\\r\\n    uint128 depositedSharesReceived;\\r\\n    uint128 withdrawnShares;\\r\\n    uint128 withdrawnReceived;\\r\\n}\\r\\n\\r\\n/// @notice Stored after executing reallocation DHW each index.\\r\\nstruct BatchReallocation {\\r\\n    /// @notice Deposited amount received from reallocation\\r\\n    uint128 depositedReallocation;\\r\\n\\r\\n    /// @notice Received shares from reallocation\\r\\n    uint128 depositedReallocationSharesReceived;\\r\\n\\r\\n    /// @notice Used to know how much tokens was received for reallocating\\r\\n    uint128 withdrawnReallocationReceived;\\r\\n\\r\\n    /// @notice Amount of shares to withdraw for reallocation\\r\\n    uint128 withdrawnReallocationShares;\\r\\n}\\r\\n\\r\\n/// @notice VaultBatches could be refactored so we only have 2 structs current and next (see how Pending is working)\\r\\nstruct Vault {\\r\\n    uint128 shares;\\r\\n\\r\\n    /// @notice Withdrawn amount as part of the reallocation\\r\\n    uint128 withdrawnReallocationShares;\\r\\n\\r\\n    /// @notice Index to action\\r\\n    mapping(uint256 => VaultBatch) vaultBatches;\\r\\n}\\r\\n\\r\\n/// @notice Stores deposited and withdrawn shares by the vault\\r\\nstruct VaultBatch {\\r\\n    /// @notice Vault index to deposited amount mapping\\r\\n    uint128 deposited;\\r\\n\\r\\n    /// @notice Vault index to withdrawn user shares mapping\\r\\n    uint128 withdrawnShares;\\r\\n}\\r\\n\\r\\n/// @notice Used for reallocation calldata\\r\\nstruct VaultData {\\r\\n    address vault;\\r\\n    uint8 strategiesCount;\\r\\n    uint256 strategiesBitwise;\\r\\n    uint256 newProportions;\\r\\n}\\r\\n\\r\\n/// @notice Calldata when executing reallocatin DHW\\r\\n/// @notice Used in the withdraw part of the reallocation DHW\\r\\nstruct ReallocationWithdrawData {\\r\\n    uint256[][] reallocationTable;\\r\\n    StratUnderlyingSlippage[] priceSlippages;\\r\\n    RewardSlippages[] rewardSlippages;\\r\\n    uint256[] stratIndexes;\\r\\n    uint256[][] slippages;\\r\\n}\\r\\n\\r\\n/// @notice Calldata when executing reallocatin DHW\\r\\n/// @notice Used in the deposit part of the reallocation DHW\\r\\nstruct ReallocationData {\\r\\n    uint256[] stratIndexes;\\r\\n    uint256[][] slippages;\\r\\n}\\r\\n\\r\\n/// @notice In case some adapters need extra storage\\r\\nstruct AdditionalStorage {\\r\\n    uint256 value;\\r\\n    address addressValue;\\r\\n    uint96 value96;\\r\\n}\\r\\n\\r\\n/// @notice Strategy total underlying slippage, to verify validity of the strategy state\\r\\nstruct StratUnderlyingSlippage {\\r\\n    uint128 min;\\r\\n    uint128 max;\\r\\n}\\r\\n\\r\\n/// @notice Containig information if and how to swap strategy rewards at the DHW\\r\\n/// @dev Passed in by the do-hard-worker\\r\\nstruct RewardSlippages {\\r\\n    bool doClaim;\\r\\n    SwapData[] swapData;\\r\\n}\\r\\n\\r\\n/// @notice Helper struct to compare strategy share between eachother\\r\\n/// @dev Used for reallocation optimization of shares (strategy matching deposits and withdrawals between eachother when reallocating)\\r\\nstruct PriceData {\\r\\n    uint128 totalValue;\\r\\n    uint128 totalShares;\\r\\n}\\r\\n\\r\\n/// @notice Strategy reallocation values after reallocation optimization of shares was calculated \\r\\nstruct ReallocationShares {\\r\\n    uint128[] optimizedWithdraws;\\r\\n    uint128[] optimizedShares;\\r\\n    uint128[] totalSharesWithdrawn;\\r\\n}\\r\\n\\r\\n/// @notice Shared storage for multiple strategies\\r\\n/// @dev This is used when strategies are part of the same proticil (e.g. Curve 3pool)\\r\\nstruct StrategiesShared {\\r\\n    uint184 value;\\r\\n    uint32 lastClaimBlock;\\r\\n    uint32 lastUpdateBlock;\\r\\n    uint8 stratsCount;\\r\\n    mapping(uint256 => address) stratAddresses;\\r\\n    mapping(bytes32 => uint256) bytesValues;\\r\\n}\\r\\n\\r\\n/// @notice Base storage shared betweek Spool contract and Strategies\\r\\n/// @dev this way we can use same values when performing delegate call\\r\\n/// to strategy implementations from the Spool contract\\r\\nabstract contract BaseStorage {\\r\\n    // ----- DHW VARIABLES -----\\r\\n\\r\\n    /// @notice Force while DHW (all strategies) to be executed in only one transaction\\r\\n    /// @dev This is enforced to increase the gas efficiency of the system\\r\\n    /// Can be removed by the DAO if gas gost of the strategies goes over the block limit\\r\\n    bool internal forceOneTxDoHardWork;\\r\\n\\r\\n    /// @notice Global index of the system\\r\\n    /// @dev Insures the correct strategy DHW execution.\\r\\n    /// Every strategy in the system must be equal or one less than global index value\\r\\n    /// Global index increments by 1 on every do-hard-work\\r\\n    uint24 public globalIndex;\\r\\n\\r\\n    /// @notice number of strategies unprocessed (by the do-hard-work) in the current index to be completed\\r\\n    uint8 internal doHardWorksLeft;\\r\\n\\r\\n    // ----- REALLOCATION VARIABLES -----\\r\\n\\r\\n    /// @notice Used for offchain execution to get the new reallocation table.\\r\\n    bool internal logReallocationTable;\\r\\n\\r\\n    /// @notice number of withdrawal strategies unprocessed (by the do-hard-work) in the current index\\r\\n    /// @dev only used when reallocating\\r\\n    /// after it reaches 0, deposit phase of the reallocation can begin\\r\\n    uint8 public withdrawalDoHardWorksLeft;\\r\\n\\r\\n    /// @notice Index at which next reallocation is set\\r\\n    uint24 public reallocationIndex;\\r\\n\\r\\n    /// @notice 2D table hash containing information of how strategies should be reallocated between eachother\\r\\n    /// @dev Created when allocation provider sets reallocation for the vaults\\r\\n    /// This table is stored as a hash in the system and verified on reallocation DHW\\r\\n    /// Resets to 0 after reallocation DHW is completed\\r\\n    bytes32 internal reallocationTableHash;\\r\\n\\r\\n    /// @notice Hash of all the strategies array in the system at the time when reallocation was set for index\\r\\n    /// @dev this array is used for the whole reallocation period even if a strategy gets exploited when reallocating.\\r\\n    /// This way we can remove the strategy from the system and not breaking the flow of the reallocaton\\r\\n    /// Resets when DHW is completed\\r\\n    bytes32 internal reallocationStrategiesHash;\\r\\n\\r\\n    // -----------------------------------\\r\\n\\r\\n    /// @notice Denoting if an address is the do-hard-worker\\r\\n    mapping(address => bool) public isDoHardWorker;\\r\\n\\r\\n    /// @notice Denoting if an address is the allocation provider\\r\\n    mapping(address => bool) public isAllocationProvider;\\r\\n\\r\\n    /// @notice Strategies shared storage\\r\\n    /// @dev used as a helper storage to save common inoramation\\r\\n    mapping(bytes32 => StrategiesShared) internal strategiesShared;\\r\\n\\r\\n    /// @notice Mapping of strategy implementation address to strategy system values\\r\\n    mapping(address => Strategy) public strategies;\\r\\n\\r\\n    /// @notice Flag showing if disable was skipped when a strategy has been removed\\r\\n    /// @dev If true disable can still be run \\r\\n    mapping(address => bool) internal _skippedDisable;\\r\\n\\r\\n    /// @notice Flag showing if after removing a strategy emergency withdraw can still be executed\\r\\n    /// @dev If true emergency withdraw can still be executed\\r\\n    mapping(address => bool) internal _awaitingEmergencyWithdraw;\\r\\n}\"\r\n    },\r\n    \"contracts/shared/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Common Spool contracts constants\\r\\nabstract contract BaseConstants {\\r\\n    /// @dev 2 digits precision\\r\\n    uint256 internal constant FULL_PERCENT = 100_00;\\r\\n\\r\\n    /// @dev Accuracy when doing shares arithmetics\\r\\n    uint256 internal constant ACCURACY = 10**30;\\r\\n}\\r\\n\\r\\n/// @title Contains USDC token related values\\r\\nabstract contract USDC {\\r\\n    /// @notice USDC token contract address\\r\\n    IERC20 internal constant USDC_ADDRESS = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\r\\n}\"\r\n    },\r\n    \"contracts/shared/SpoolOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"../interfaces/ISpoolOwner.sol\\\";\\r\\n\\r\\n/// @title Logic to help check whether the caller is the Spool owner\\r\\nabstract contract SpoolOwnable {\\r\\n    /// @notice Contract that checks if address is Spool owner\\r\\n    ISpoolOwner internal immutable spoolOwner;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets correct initial values\\r\\n     * @param _spoolOwner Spool owner contract address\\r\\n     */\\r\\n    constructor(ISpoolOwner _spoolOwner) {\\r\\n        require(\\r\\n            address(_spoolOwner) != address(0),\\r\\n            \\\"SpoolOwnable::constructor: Spool owner contract address cannot be 0\\\"\\r\\n        );\\r\\n\\r\\n        spoolOwner = _spoolOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if caller is Spool owner\\r\\n     * @return True if caller is Spool owner, false otherwise\\r\\n     */\\r\\n    function isSpoolOwner() internal view returns(bool) {\\r\\n        return spoolOwner.isSpoolOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Checks and throws if caller is not Spool owner\\r\\n    function _onlyOwner() private view {\\r\\n        require(isSpoolOwner(), \\\"SpoolOwnable::onlyOwner: Caller is not the Spool owner\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Checks and throws if caller is not Spool owner\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/shared/SpoolPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n/// @title Facilitates checking if the system is paused or not\\nabstract contract SpoolPausable {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    /// @notice The controller contract that is consulted for a strategy's and vault's validity\\n    IController public immutable controller;\\n\\n    /**\\n     * @notice Sets initial values\\n     * @param _controller Controller contract address\\n     */\\n    constructor(IController _controller) {\\n        require(\\n            address(_controller) != address(0),\\n            \\\"SpoolPausable::constructor: Controller contract address cannot be 0\\\"\\n        );\\n\\n        controller = _controller;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @notice Throws if system is paused\\n    modifier systemNotPaused() {\\n        controller.checkPaused();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/spool/SpoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// extends\\r\\nimport \\\"../interfaces/spool/ISpoolBase.sol\\\";\\r\\nimport \\\"../shared/BaseStorage.sol\\\";\\r\\nimport \\\"../shared/SpoolOwnable.sol\\\";\\r\\nimport \\\"../shared/Constants.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"../libraries/Hash.sol\\\";\\r\\n\\r\\n// other imports\\r\\nimport \\\"../interfaces/IController.sol\\\";\\r\\nimport \\\"../shared/SpoolPausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {ISpoolBase} interface.\\r\\n *\\r\\n * @dev\\r\\n * This implementation acts as the central code execution point of the Spool\\r\\n * system and is responsible for maintaining the balance sheet of each vault\\r\\n * based on the asynchronous deposit and withdraw system, redeeming vault\\r\\n * shares and withdrawals and performing doHardWork.\\r\\n */\\r\\nabstract contract SpoolBase is\\r\\n    ISpoolBase,\\r\\n    BaseStorage,\\r\\n    SpoolOwnable,\\r\\n    SpoolPausable,\\r\\n    BaseConstants\\r\\n{\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @notice The fast withdraw contract that is used to quickly remove shares\\r\\n    address internal immutable fastWithdraw;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the contract initial values\\r\\n     *\\r\\n     * @dev \\r\\n     * Additionally, initializes the SPL reward data for\\r\\n     * do hard work invocations.\\r\\n     *\\r\\n     * It performs certain pre-conditional validations to ensure the contract\\r\\n     * has been initialized properly, such as valid addresses and reward configuration.\\r\\n     *\\r\\n     * @param _spoolOwner the spool owner contract address \\r\\n     * @param _controller the controller contract address\\r\\n     * @param _fastWithdraw the fast withdraw contract address\\r\\n     */\\r\\n    constructor(\\r\\n        ISpoolOwner _spoolOwner,\\r\\n        IController _controller,\\r\\n        address _fastWithdraw\\r\\n    ) \\r\\n        SpoolOwnable(_spoolOwner)\\r\\n        SpoolPausable(_controller)\\r\\n    {\\r\\n        require(\\r\\n            _fastWithdraw != address(0),\\r\\n            \\\"BaseSpool::constructor: FastWithdraw address cannot be 0\\\"\\r\\n        );\\r\\n\\r\\n        fastWithdraw = _fastWithdraw;\\r\\n        \\r\\n        globalIndex = 1;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether Spool is mid reallocation\\r\\n     * @return _isMidReallocation True if Spool is mid reallocation\\r\\n     */\\r\\n    function isMidReallocation() public view override returns (bool _isMidReallocation) {\\r\\n        if (reallocationIndex == globalIndex && !_isBatchComplete()) {\\r\\n            _isMidReallocation = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns strategy shares belonging to a vauld\\r\\n     * @param strat Strategy address\\r\\n     * @param vault Vault address\\r\\n     * @return Shares for a specific vault - strategy combination\\r\\n     */\\r\\n    function getStratVaultShares(address strat, address vault) external view returns(uint128) {\\r\\n        return strategies[strat].vaults[vault].shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns completed index (all strategies in the do hard work have been processed)\\r\\n     * @return Completed index\\r\\n     */\\r\\n    function getCompletedGlobalIndex() public override view returns(uint24) {\\r\\n        if (_isBatchComplete()) {\\r\\n            return globalIndex;\\r\\n        } \\r\\n        \\r\\n        return globalIndex - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns next possible index to interact with\\r\\n     * @return Next active global index\\r\\n     */\\r\\n    function getActiveGlobalIndex() public override view returns(uint24) {\\r\\n        return globalIndex + 1;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Check if batch complete\\r\\n     * @return isComplete True if all strategies have the same index\\r\\n     */\\r\\n    function _isBatchComplete() internal view returns(bool isComplete) {\\r\\n        if (doHardWorksLeft == 0) {\\r\\n            isComplete = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Decode revert message\\r\\n     * @param _returnData Data returned by delegatecall\\r\\n     * @return Revert string\\r\\n     */\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // if the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"SILENT\\\";\\r\\n        assembly {\\r\\n        // slice the sig hash\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // all that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /* ========== DELEGATECALL HELPERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice this function allows static-calling an arbitrary write function from Spool, off-chain, and returning the result. The general purpose is for the calculation of\\r\\n     * rewards in an implementation contract, where the reward calculation contains state changes that can't be easily gathered without calling from the Spool contract.\\r\\n     * The require statement ensure that this comes from a static call off-chain, which can substitute an arbitrary address. \\r\\n     * The 'one' address is used. The zero address could be used, but due to the prevalence of zero address checks, the internal calls would likely fail.\\r\\n     * It has the same level of security as finding any arbitrary address, including address zero.\\r\\n     *\\r\\n     * @param implementation Address which to relay the call to\\r\\n     * @param payload Payload to relay to the implementation\\r\\n     * @return Response returned by the relayed call\\r\\n     */\\r\\n    function relay(address implementation, bytes memory payload) external returns(bytes memory) {\\r\\n        require(msg.sender == address(1));\\r\\n        return _relay(implementation, payload);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Relays the particular action to the strategy via delegatecall.\\r\\n     * @param strategy Strategy address to delegate the call to\\r\\n     * @param payload Data to pass when delegating call\\r\\n     * @return Response received when delegating call\\r\\n     */\\r\\n    function _relay(address strategy, bytes memory payload)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = strategy.delegatecall(payload);\\r\\n        if (!success) revert(_getRevertMsg(data));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /* ========== CONFIGURATION ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set allocation provider role for given user\\r\\n     * Requirements:\\r\\n     * - the caller must be the Spool owner (Spool DAO)\\r\\n     *\\r\\n     * @param user Address to set the role for\\r\\n     * @param _isAllocationProvider Whether the user is assigned the role or not\\r\\n     */\\r\\n    function setAllocationProvider(address user, bool _isAllocationProvider) external onlyOwner {\\r\\n        isAllocationProvider[user] = _isAllocationProvider;\\r\\n        emit SetAllocationProvider(user, _isAllocationProvider);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set doHardWorker role for given user\\r\\n     * Requirements:\\r\\n     * - the caller must be the Spool owner (Spool DAO)\\r\\n     *\\r\\n     * @param user Address to set the role for\\r\\n     * @param _isDoHardWorker Whether the user is assigned the role or not\\r\\n     */\\r\\n    function setDoHardWorker(address user, bool _isDoHardWorker) external onlyOwner {\\r\\n        isDoHardWorker[user] = _isDoHardWorker;\\r\\n        emit SetIsDoHardWorker(user, _isDoHardWorker);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the flag to force \\\"do hard work\\\" to be executed in one transaction.\\r\\n     * Requirements:\\r\\n     * - the caller must be the Spool owner (Spool DAO)\\r\\n     *\\r\\n     * @param doForce Enable/disable running in one transactions\\r\\n     */\\r\\n    function setForceOneTxDoHardWork(bool doForce) external onlyOwner {\\r\\n        forceOneTxDoHardWork = doForce;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the flag to log reallocation proportions on change.\\r\\n     * Requirements:\\r\\n     * - the caller must be the Spool owner (Spool DAO)\\r\\n     *\\r\\n     * @dev Used for offchain execution to get the new reallocation table.\\r\\n     * @param doLog Whether to log or not\\r\\n     */\\r\\n    function setLogReallocationTable(bool doLog) external onlyOwner {\\r\\n        logReallocationTable = doLog;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set awaiting emergency withdraw flag for the strategy.\\r\\n     *\\r\\n     * @dev\\r\\n     * Only for emergency case where withdrawing the first time doesn't fully work.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the Spool owner (Spool DAO)\\r\\n     *\\r\\n     * @param strat strategy to set\\r\\n     * @param isAwaiting Flag value\\r\\n     */\\r\\n    function setAwaitingEmergencyWithdraw(address strat, bool isAwaiting) external onlyOwner {\\r\\n        _awaitingEmergencyWithdraw[strat] = isAwaiting;\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that given address is a valid vault\\r\\n     */\\r\\n    function _isVault(address vault) internal view {\\r\\n        require(\\r\\n            controller.validVault(vault),\\r\\n            \\\"NTVLT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that strategy wasn't removed\\r\\n     */\\r\\n    function _notRemoved(address strat) internal view {\\r\\n        require(\\r\\n            !strategies[strat].isRemoved,\\r\\n            \\\"OKSTRT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice If batch is complete it resets reallocation variables and emits an event\\r\\n     * @param isReallocation If true, reset the reallocation variables\\r\\n     */\\r\\n    function _finishDhw(bool isReallocation) internal {\\r\\n        if (_isBatchComplete()) {\\r\\n            // reset reallocation variables\\r\\n            if (isReallocation) {\\r\\n                reallocationIndex = 0;\\r\\n                reallocationTableHash = 0;\\r\\n            }\\r\\n\\r\\n            emit DoHardWorkCompleted(globalIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== PRIVATE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that the caller is the controller\\r\\n     */\\r\\n    function _onlyController() private view {\\r\\n        require(\\r\\n            msg.sender == address(controller),\\r\\n            \\\"OCTRL\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that the caller is the fast withdraw\\r\\n     */\\r\\n    function _onlyFastWithdraw() private view {\\r\\n        require(\\r\\n            msg.sender == fastWithdraw,\\r\\n            \\\"OFWD\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that there is no pending reallocation\\r\\n     */\\r\\n    function _noPendingReallocation() private view {\\r\\n        require(\\r\\n            reallocationTableHash == 0,\\r\\n            \\\"NORLC\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that strategy is removed\\r\\n     */\\r\\n    function _onlyRemoved(address strat) private view {\\r\\n        require(\\r\\n            strategies[strat].isRemoved,\\r\\n            \\\"RMSTR\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies given strategies\\r\\n     * @param strategies Array of strategies to verify\\r\\n     */\\r\\n    function _verifyStrategies(address[] memory strategies) internal view {\\r\\n        controller.verifyStrategies(strategies);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that the caller is allowed to execute do hard work\\r\\n     */\\r\\n    function _onlyDoHardWorker() private view {\\r\\n        require(\\r\\n            isDoHardWorker[msg.sender],\\r\\n            \\\"ODHW\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies the reallocation table against the stored hash\\r\\n     * @param reallocationTable The data to verify\\r\\n     */\\r\\n    function _verifyReallocationTable(uint256[][] memory reallocationTable) internal view {\\r\\n        require(reallocationTableHash == Hash.hashReallocationTable(reallocationTable), \\\"BRLC\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Verifies the reallocation strategies against the stored hash\\r\\n     * @param strategies Array of strategies to verify\\r\\n     */\\r\\n    function _verifyReallocationStrategies(address[] memory strategies) internal view {\\r\\n        require(Hash.sameStrategies(strategies, reallocationStrategiesHash), \\\"BRLCSTR\\\");\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if called by anyone else other than the controller\\r\\n     */\\r\\n    modifier onlyDoHardWorker() {\\r\\n        _onlyDoHardWorker();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if called by a non-valid vault\\r\\n     */\\r\\n    modifier onlyVault() {\\r\\n        _isVault(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if called by anyone else other than the controller\\r\\n     */\\r\\n    modifier onlyController() {\\r\\n        _onlyController();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if the caller is not fast withdraw\\r\\n     */\\r\\n    modifier onlyFastWithdraw() {\\r\\n        _onlyFastWithdraw();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if given array of strategies is not valid\\r\\n     */\\r\\n    modifier verifyStrategies(address[] memory strategies) {\\r\\n        _verifyStrategies(strategies);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if given array of reallocation strategies is not valid\\r\\n     */\\r\\n    modifier verifyReallocationStrategies(address[] memory strategies) {\\r\\n        _verifyReallocationStrategies(strategies);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws if caller does not have the allocation provider role\\r\\n     */\\r\\n    modifier onlyAllocationProvider() {\\r\\n        require(\\r\\n            isAllocationProvider[msg.sender],\\r\\n            \\\"OALC\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures that there is no pending reallocation\\r\\n     */\\r\\n    modifier noPendingReallocation() {\\r\\n        _noPendingReallocation();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws strategy is removed\\r\\n     */\\r\\n    modifier notRemoved(address strat) {\\r\\n        _notRemoved(strat);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Throws strategy isn't removed\\r\\n     */\\r\\n    modifier onlyRemoved(address strat) {\\r\\n        _onlyRemoved(strat);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/spool/SpoolDoHardWork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// extends\\r\\nimport \\\"../interfaces/spool/ISpoolDoHardWork.sol\\\";\\r\\nimport \\\"./SpoolStrategy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Spool part of implementation dealing with the do hard work\\r\\n *\\r\\n * @dev\\r\\n * Do hard work is the process of interacting with other protocols.\\r\\n * This process aggregates many actions together to act in as optimized\\r\\n * manner as possible. It optimizes for underlying assets and gas cost.\\r\\n *\\r\\n * Do hard work (DHW) is executed periodically. As users are depositing\\r\\n * and withdrawing, these actions are stored in the buffer system.\\r\\n * When executed the deposits and withdrawals are matched against\\r\\n * eachother to minimize slippage and protocol fees. This means that\\r\\n * for a normal DHW only deposit or withdrawal is executed and never\\r\\n * both in the same index. Both can only be if the DHW is processing\\r\\n * the reallocation as well.\\r\\n *\\r\\n * Each strategy DHW is executed once per index and then incremented.\\r\\n * When all strategies are incremented to the same index, the batch\\r\\n * is considered complete. As soon as a new batch starts (first strategy\\r\\n * in the new batch is processed) global index is incremented.\\r\\n *\\r\\n * Global index is always one more or equal to the strategy index.\\r\\n * This constraints the system so that all strategy DHWs have to be\\r\\n * executed to complete the batch.\\r\\n *\\r\\n * Do hard work can only be executed by the whitelisted addresses.\\r\\n * The whitelisting can be done only by the Spool DAO.\\r\\n *\\r\\n * Do hard work actions:\\r\\n * - deposit\\r\\n * - withdrawal\\r\\n * - compound rewards\\r\\n * - reallocate assets across protocols\\r\\n *\\r\\n */\\r\\nabstract contract SpoolDoHardWork is ISpoolDoHardWork, SpoolStrategy {\\r\\n\\r\\n    /* ========== DO HARD WORK ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Executes do hard work of specified strategies.\\r\\n     * \\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be a valid do hard worker\\r\\n     * - provided strategies must be valid\\r\\n     * - reallocation is not pending for current index\\r\\n     * - if `forceOneTxDoHardWork` flag is true all strategies should be executed in one transaction\\r\\n     * - at least one strategy must be processed\\r\\n     * - the system should not be paused\\r\\n     *\\r\\n     * @param stratIndexes Array of strategy indexes\\r\\n     * @param slippages Array of slippage values to be used when depositing into protocols (e.g. minOut)\\r\\n     * @param rewardSlippages Array of values containing information of if and how to swap reward tokens to strategy underlying\\r\\n     * @param allStrategies Array of all valid strategy addresses in the system\\r\\n     */\\r\\n    function batchDoHardWork(\\r\\n        uint256[] memory stratIndexes,\\r\\n        uint256[][] memory slippages,\\r\\n        RewardSlippages[] memory rewardSlippages,\\r\\n        address[] memory allStrategies\\r\\n    ) \\r\\n        external\\r\\n        systemNotPaused\\r\\n        onlyDoHardWorker\\r\\n        verifyStrategies(allStrategies)\\r\\n    {\\r\\n        // update global index if this are first strategies in index\\r\\n        if (_isBatchComplete()) {\\r\\n            globalIndex++;\\r\\n            doHardWorksLeft = uint8(allStrategies.length);\\r\\n        }\\r\\n\\r\\n        // verify reallocation is not set for the current index\\r\\n        if (reallocationIndex == globalIndex) {\\r\\n            // if reallocation is set, verify it was disabled\\r\\n            require(reallocationTableHash == 0, \\\"RLC\\\");\\r\\n            // if yes, reset reallocation index\\r\\n            reallocationIndex = 0;\\r\\n        }\\r\\n        \\r\\n        require(\\r\\n            stratIndexes.length > 0 &&\\r\\n            stratIndexes.length == slippages.length &&\\r\\n            stratIndexes.length == rewardSlippages.length,\\r\\n            \\\"BIPT\\\"\\r\\n        );\\r\\n\\r\\n        // check if DHW is forcen to be executen on one transaction\\r\\n        if (forceOneTxDoHardWork) {\\r\\n            require(stratIndexes.length == allStrategies.length, \\\"1TX\\\");\\r\\n        }\\r\\n\\r\\n        // go over withdrawals and deposits\\r\\n        for (uint256 i = 0; i < stratIndexes.length; i++) {\\r\\n            address stratAddress = allStrategies[stratIndexes[i]];\\r\\n            _doHardWork(stratAddress, slippages[i], rewardSlippages[i]);\\r\\n            _updatePending(stratAddress);\\r\\n            _finishStrategyDoHardWork(stratAddress);  \\r\\n        }\\r\\n\\r\\n        _updateDoHardWorksLeft(stratIndexes.length);\\r\\n\\r\\n        // if DHW for index finished\\r\\n        _finishDhw(false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process strategy DHW, deposit wnd withdraw\\r\\n     * @dev Only executed when there is no reallocation for the DHW\\r\\n     * @param strat Strategy address\\r\\n     * @param slippages Array of slippage values to be used when depositing into protocols (e.g. minOut)\\r\\n     * @param rewardSlippages Array of values containing information of if and how to swap reward tokens to strategy underlying\\r\\n     */\\r\\n    function _doHardWork(\\r\\n        address strat,\\r\\n        uint256[] memory slippages,\\r\\n        RewardSlippages memory rewardSlippages\\r\\n    ) private {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        // Check if strategy wasn't exected in current index yet\\r\\n        require(strategy.index < globalIndex, \\\"SFIN\\\");\\r\\n\\r\\n        _process(strat, slippages, rewardSlippages.doClaim, rewardSlippages.swapData);\\r\\n    }\\r\\n\\r\\n    /* ========== DO HARD WORK when REALLOCATING ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Executes do hard work of specified strategies if reallocation is in progress.\\r\\n     * \\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be a valid do hard worker\\r\\n     * - provided strategies must be valid\\r\\n     * - reallocation is pending for current index\\r\\n     * - at least one strategy must be processed\\r\\n     * - the system should not be paused\\r\\n     *\\r\\n     * @param withdrawData Reallocation values addressing withdrawal part of the reallocation DHW\\r\\n     * @param depositData Reallocation values addressing deposit part of the reallocation DHW\\r\\n     * @param allStrategies Array of all strategy addresses in the system for current set reallocation\\r\\n     * @param isOneTransaction Flag denoting if the DHW should execute in one transaction\\r\\n     */\\r\\n    function batchDoHardWorkReallocation(\\r\\n        ReallocationWithdrawData memory withdrawData,\\r\\n        ReallocationData memory depositData,\\r\\n        address[] memory allStrategies,\\r\\n        bool isOneTransaction\\r\\n    ) external systemNotPaused onlyDoHardWorker verifyReallocationStrategies(allStrategies) {\\r\\n        if (_isBatchComplete()) {\\r\\n            globalIndex++;\\r\\n            \\r\\n            doHardWorksLeft = uint8(allStrategies.length);\\r\\n            withdrawalDoHardWorksLeft = uint8(allStrategies.length);\\r\\n        }\\r\\n\\r\\n        // verify reallocation is set for the current index, and not disabled\\r\\n        require(\\r\\n            reallocationIndex == globalIndex &&\\r\\n            reallocationTableHash != 0,\\r\\n            \\\"XNRLC\\\"\\r\\n        );\\r\\n\\r\\n        // add all indexes if DHW is in one transaction\\r\\n        if (isOneTransaction) {\\r\\n            require(\\r\\n                    withdrawData.stratIndexes.length == allStrategies.length &&\\r\\n                    depositData.stratIndexes.length == allStrategies.length,\\r\\n                    \\\"1TX\\\"\\r\\n                );\\r\\n        } else {\\r\\n            require(!forceOneTxDoHardWork, \\\"F1TX\\\");\\r\\n            \\r\\n            require(withdrawData.stratIndexes.length > 0 || depositData.stratIndexes.length > 0, \\\"NOSTR\\\");\\r\\n        }\\r\\n\\r\\n        // execute deposits and withdrawals\\r\\n        _batchDoHardWorkReallocation(withdrawData, depositData, allStrategies);\\r\\n\\r\\n        // update if DHW for index finished\\r\\n        _finishDhw(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes do hard work of specified strategies if reallocation is in progress.\\r\\n     * @param withdrawData Reallocation values addressing withdrawal part of the reallocation DHW\\r\\n     * @param depositData Reallocation values addressing deposit part of the reallocation DHW\\r\\n     * @param allStrategies Array of all strategy addresses in the system for current set reallocation\\r\\n     */\\r\\n    function _batchDoHardWorkReallocation(\\r\\n        ReallocationWithdrawData memory withdrawData,\\r\\n        ReallocationData memory depositData,\\r\\n        address[] memory allStrategies\\r\\n    ) private {\\r\\n        // WITHDRAWALS\\r\\n        // reallocation withdraw\\r\\n        // process users deposit and withdrawals\\r\\n        if (withdrawData.stratIndexes.length > 0) {\\r\\n            // check parameters\\r\\n            require(\\r\\n                withdrawData.stratIndexes.length == withdrawData.slippages.length && \\r\\n                withdrawalDoHardWorksLeft >= withdrawData.stratIndexes.length,\\r\\n                \\\"BWI\\\"\\r\\n            );\\r\\n            \\r\\n            // verify if reallocation table matches the reallocationtable hash\\r\\n            _verifyReallocationTable(withdrawData.reallocationTable);\\r\\n\\r\\n            // get current strategy price data\\r\\n            // this is later used to calculate the amount that can me matched\\r\\n            // between 2 strategies when they deposit in eachother\\r\\n            PriceData[] memory spotPrices = _getPriceData(withdrawData, allStrategies);\\r\\n\\r\\n            // process the withdraw part of the reallocation\\r\\n            // process the deposit and the withdrawal part of the users deposits/withdrawals\\r\\n            _processWithdraw(\\r\\n                withdrawData,\\r\\n                allStrategies,\\r\\n                spotPrices\\r\\n            );\\r\\n\\r\\n            // update number of strategies needing to be processed for the current reallocation DHW\\r\\n            // can continue to deposit only when it reaches 0\\r\\n            _updateWithdrawalDohardWorksleft(withdrawData.stratIndexes.length);\\r\\n        }\\r\\n\\r\\n        // check if withdrawal phase was finished before starting deposit\\r\\n        require(\\r\\n            !(depositData.stratIndexes.length > 0 && withdrawalDoHardWorksLeft > 0),\\r\\n            \\\"WNF\\\"\\r\\n        );\\r\\n\\r\\n        // DEPOSITS\\r\\n        // deposit reallocated amounts withdrawn above into strategies\\r\\n        if (depositData.stratIndexes.length > 0) {\\r\\n            // check parameters\\r\\n            require(\\r\\n                doHardWorksLeft >= depositData.stratIndexes.length &&\\r\\n                depositData.stratIndexes.length == depositData.slippages.length,\\r\\n                \\\"BDI\\\"\\r\\n            );\\r\\n\\r\\n            // deposit reallocated amounts into strategies\\r\\n            // this only deals with the reallocated amounts as users were already processed in the withdrawal phase\\r\\n            for (uint128 i = 0; i < depositData.stratIndexes.length; i++) {\\r\\n                uint256 stratIndex = depositData.stratIndexes[i];\\r\\n                address stratAddress = allStrategies[stratIndex];\\r\\n                Strategy storage strategy = strategies[stratAddress];\\r\\n\\r\\n                // verify the strategy was not removed (it could be removed in the middle of the DHW if the DHW was executed in multiple transactions)\\r\\n                _notRemoved(stratAddress);\\r\\n                require(strategy.isInDepositPhase, \\\"SWNP\\\");\\r\\n\\r\\n                // deposit reallocation withdrawn amounts according to the calculations\\r\\n                _doHardWorkDeposit(stratAddress, depositData.slippages[stratIndex]);\\r\\n                // mark strategy as finished for the current index\\r\\n                _finishStrategyDoHardWork(stratAddress);\\r\\n\\r\\n                // remove the flag indicating strategy should deposit reallocated amount\\r\\n                strategy.isInDepositPhase = false;\\r\\n            }\\r\\n            \\r\\n            // update number of strategies left in the current index\\r\\n            // if this reaches 0, DHW is considered complete\\r\\n            _updateDoHardWorksLeft(depositData.stratIndexes.length);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Executes user process and withdraw part of the do-hard-work for the specified strategies when reallocation is in progress.\\r\\n      * @param withdrawData Reallocation values addressing withdrawal part of the reallocation DHW\\r\\n      * @param allStrategies Array of all strategy addresses in the system for current set reallocation\\r\\n      * @param spotPrices current strategy share price data, used to calculate the amount that can me matched between 2 strategies when reallcating\\r\\n      */\\r\\n    function _processWithdraw(\\r\\n        ReallocationWithdrawData memory withdrawData,\\r\\n        address[] memory allStrategies,\\r\\n        PriceData[] memory spotPrices\\r\\n    ) private {\\r\\n        // go over reallocation table and calculate what amount of shares can be optimized when reallocating\\r\\n        // we can optimize if two strategies deposit into eachother. With the `spotPrices` we can compare the strategy values.\\r\\n        ReallocationShares memory reallocation = _optimizeReallocation(withdrawData, spotPrices);\\r\\n\\r\\n        // go over withdrawals\\r\\n        for (uint256 i = 0; i < withdrawData.stratIndexes.length; i++) {\\r\\n            uint256 stratIndex = withdrawData.stratIndexes[i];\\r\\n            address stratAddress = allStrategies[stratIndex];\\r\\n            Strategy storage strategy = strategies[stratAddress];\\r\\n            _notRemoved(stratAddress);\\r\\n            require(!strategy.isInDepositPhase, \\\"SWP\\\");\\r\\n\\r\\n            uint128 withdrawnReallocationReceived;\\r\\n            {\\r\\n                uint128 sharesToWithdraw = reallocation.totalSharesWithdrawn[stratIndex] - reallocation.optimizedShares[stratIndex];\\r\\n\\r\\n                ProcessReallocationData memory processReallocationData = ProcessReallocationData(\\r\\n                    sharesToWithdraw,\\r\\n                    reallocation.optimizedShares[stratIndex],\\r\\n                    reallocation.optimizedWithdraws[stratIndex]\\r\\n                );\\r\\n                \\r\\n                // withdraw reallocation / returns non-optimized withdrawn amount\\r\\n                withdrawnReallocationReceived = _doHardWorkReallocation(stratAddress, withdrawData.slippages[stratIndex], processReallocationData);\\r\\n            }            \\r\\n\\r\\n            // reallocate withdrawn to other strategies\\r\\n            _depositReallocatedAmount(\\r\\n                reallocation.totalSharesWithdrawn[stratIndex],\\r\\n                withdrawnReallocationReceived,\\r\\n                reallocation.optimizedWithdraws[stratIndex],\\r\\n                allStrategies,\\r\\n                withdrawData.reallocationTable[stratIndex]\\r\\n            );\\r\\n\\r\\n            _updatePending(stratAddress);\\r\\n\\r\\n            strategy.isInDepositPhase = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process strategy DHW, including reallocation \\r\\n     * @dev Only executed when reallocation is set for the DHW\\r\\n     * @param strat Strategy address\\r\\n     * @param slippages Array of slippage values\\r\\n     * @param processReallocationData Reallocation data (see ProcessReallocationData)\\r\\n     * @return Received withdrawn reallocation\\r\\n     */\\r\\n    function _doHardWorkReallocation(\\r\\n        address strat,\\r\\n        uint256[] memory slippages,\\r\\n        ProcessReallocationData memory processReallocationData\\r\\n    ) private returns(uint128){\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        // Check if strategy wasn't exected in current index yet\\r\\n        require(strategy.index < globalIndex, \\\"SFIN\\\");\\r\\n\\r\\n        uint128 withdrawnReallocationReceived = _processReallocation(strat, slippages, processReallocationData);\\r\\n\\r\\n        return withdrawnReallocationReceived;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process deposit collected form the reallocation\\r\\n     * @dev Only executed when reallocation is set for the DHW\\r\\n     * @param strat Strategy address\\r\\n     * @param slippages Array of slippage values\\r\\n     */\\r\\n    function _doHardWorkDeposit(\\r\\n        address strat,\\r\\n        uint256[] memory slippages\\r\\n    ) private {\\r\\n        _processDeposit(strat, slippages);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate amount of shares that can be swapped between a pair of strategies (without withdrawing from the protocols)\\r\\n     *\\r\\n     * @dev This is done to ensure only the necessary amoun gets withdrawn from protocols and lower the total slippage and fee.\\r\\n     * NOTE: We know strategies depositing into eachother must have the same underlying asset\\r\\n     * The underlying asset is used to compare the amount ob both strategies withdrawing (depositing) into eachother. \\r\\n     *\\r\\n     * Returns:\\r\\n     * - amount of optimized collateral amount for each strategy\\r\\n     * - amount of optimized shares for each strategy\\r\\n     * - total non-optimized amount of shares for each strategy\\r\\n     *\\r\\n     * @param withdrawData Withdraw data (see WithdrawData)\\r\\n     * @param priceData An array of price data (see PriceData)\\r\\n     * @return reallocationShares Containing arrays showing the optimized share and underlying token amounts\\r\\n     */\\r\\n    function _optimizeReallocation(\\r\\n        ReallocationWithdrawData memory withdrawData,\\r\\n        PriceData[] memory priceData\\r\\n    ) private pure returns (ReallocationShares memory) {\\r\\n        // amount of optimized collateral amount for each strategy\\r\\n        uint128[] memory optimizedWithdraws = new uint128[](withdrawData.reallocationTable.length);\\r\\n        // amount of optimized shares for each strategy\\r\\n        uint128[] memory optimizedShares = new uint128[](withdrawData.reallocationTable.length);\\r\\n        // total non-optimized amount of shares for each strategy\\r\\n        uint128[] memory totalShares = new uint128[](withdrawData.reallocationTable.length);\\r\\n        \\r\\n        // go over all the strategies (over reallcation table)\\r\\n        for (uint128 i = 0; i < withdrawData.reallocationTable.length; i++) {\\r\\n            for (uint128 j = i + 1; j < withdrawData.reallocationTable.length; j++) {\\r\\n                // check if both strategies are depositing to eachother, if yes - optimize\\r\\n                if (withdrawData.reallocationTable[i][j] > 0 && withdrawData.reallocationTable[j][i] > 0) {\\r\\n                    // calculate strategy I underlying collateral amout withdrawing\\r\\n                    uint128 amountI = uint128(withdrawData.reallocationTable[i][j] * priceData[i].totalValue / priceData[i].totalShares);\\r\\n                    // calculate strategy I underlying collateral amout withdrawing\\r\\n                    uint128 amountJ = uint128(withdrawData.reallocationTable[j][i] * priceData[j].totalValue / priceData[j].totalShares);\\r\\n\\r\\n                    uint128 optimizedAmount;\\r\\n                    \\r\\n                    // check which strategy is withdrawing less\\r\\n                    if (amountI > amountJ) {\\r\\n                        optimizedAmount = amountJ;\\r\\n                    } else {\\r\\n                        optimizedAmount = amountI;\\r\\n                    }\\r\\n                    \\r\\n                    // use the lesser value of both to save maximum possible optimized amount withdrawing\\r\\n                    optimizedWithdraws[i] += optimizedAmount;\\r\\n                    optimizedWithdraws[j] += optimizedAmount;\\r\\n                }\\r\\n\\r\\n                // sum total shares withdrawing for each strategy\\r\\n                unchecked {\\r\\n                    totalShares[i] += uint128(withdrawData.reallocationTable[i][j]);\\r\\n                    totalShares[j] += uint128(withdrawData.reallocationTable[j][i]);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If we optimized for a strategy, calculate the total shares optimized back from the collateral amount.\\r\\n            // The optimized shares amount will never be withdrawn from the strategy, as we know other strategies are\\r\\n            // depositing to the strategy in the equal amount and we know how to mach them.\\r\\n            if (optimizedWithdraws[i] > 0) {\\r\\n                optimizedShares[i] = Math.getProportion128(optimizedWithdraws[i], priceData[i].totalShares, priceData[i].totalValue);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ReallocationShares memory reallocationShares = ReallocationShares(\\r\\n            optimizedWithdraws,\\r\\n            optimizedShares,\\r\\n            totalShares\\r\\n        );\\r\\n        \\r\\n        return reallocationShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get urrent strategy price data, containing total balance and total shares\\r\\n     * @dev Also verify if the total strategy value is according to the defined values\\r\\n     *\\r\\n     * @param withdrawData Withdraw data (see WithdrawData)\\r\\n     * @param allStrategies Array of strategy addresses\\r\\n     * @return Price data (see PriceData)\\r\\n     */\\r\\n    function _getPriceData(\\r\\n        ReallocationWithdrawData memory withdrawData,\\r\\n        address[] memory allStrategies\\r\\n    ) private returns(PriceData[] memory) {\\r\\n        PriceData[] memory spotPrices = new PriceData[](allStrategies.length);\\r\\n\\r\\n        for (uint128 i = 0; i < allStrategies.length; i++) {\\r\\n            // claim rewards before getting the price\\r\\n            if (withdrawData.rewardSlippages[i].doClaim) {\\r\\n                _claimRewards(allStrategies[i], withdrawData.rewardSlippages[i].swapData);\\r\\n            }\\r\\n            \\r\\n            for (uint128 j = 0; j < allStrategies.length; j++) {\\r\\n                // if a strategy is withdrawing in reallocation get its spot price\\r\\n                if (withdrawData.reallocationTable[i][j] > 0) {\\r\\n                    // if strategy is removed treat it's value as 0\\r\\n                    if (!strategies[allStrategies[i]].isRemoved) {\\r\\n                        spotPrices[i].totalValue = _getStratValue(allStrategies[i]);\\r\\n                    }\\r\\n\\r\\n                    spotPrices[i].totalShares = strategies[allStrategies[i]].totalShares;\\r\\n\\r\\n                    require(\\r\\n                        spotPrices[i].totalValue >= withdrawData.priceSlippages[i].min &&\\r\\n                        spotPrices[i].totalValue <= withdrawData.priceSlippages[i].max,\\r\\n                        \\\"BPRC\\\"\\r\\n                    );\\r\\n                \\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return spotPrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Processes reallocated amount deposits.\\r\\n      * @param reallocateSharesToWithdraw Reallocate shares to withdraw\\r\\n      * @param withdrawnReallocationReceived Received withdrawn reallocation\\r\\n      * @param optimizedWithdraw Optimized withdraw\\r\\n      * @param _strategies Array of strategy addresses\\r\\n      * @param stratReallocationShares Array of strategy reallocation shares\\r\\n      */\\r\\n    function _depositReallocatedAmount(\\r\\n        uint128 reallocateSharesToWithdraw,\\r\\n        uint128 withdrawnReallocationReceived,\\r\\n        uint128 optimizedWithdraw,\\r\\n        address[] memory _strategies,\\r\\n        uint256[] memory stratReallocationShares\\r\\n    ) private {\\r\\n        for (uint256 i = 0; i < stratReallocationShares.length; i++) {\\r\\n            if (stratReallocationShares[i] > 0) {\\r\\n                Strategy storage depositStrategy = strategies[_strategies[i]];\\r\\n\\r\\n                // add actual withdrawn deposit\\r\\n                depositStrategy.pendingReallocateDeposit +=\\r\\n                    Math.getProportion128(withdrawnReallocationReceived, stratReallocationShares[i], reallocateSharesToWithdraw);\\r\\n\\r\\n                // add optimized deposit\\r\\n                depositStrategy.pendingReallocateOptimizedDeposit +=\\r\\n                    Math.getProportion128(optimizedWithdraw, stratReallocationShares[i], reallocateSharesToWithdraw);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== SHARED FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice After strategy DHW is complete increment strategy index\\r\\n     * @param strat Strategy address\\r\\n     */\\r\\n    function _finishStrategyDoHardWork(address strat) private {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        \\r\\n        strategy.index++;\\r\\n\\r\\n        emit DoHardWorkStrategyCompleted(strat, strategy.index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice After strategy DHW process update strategy pending values\\r\\n     * @dev set pending next as pending and reset pending next\\r\\n     * @param strat Strategy address\\r\\n     */\\r\\n    function _updatePending(address strat) private {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        Pending memory pendingUserNext = strategy.pendingUserNext;\\r\\n        strategy.pendingUser = pendingUserNext;\\r\\n        \\r\\n        if (\\r\\n            pendingUserNext.deposit != Max128Bit.ZERO || \\r\\n            pendingUserNext.sharesToWithdraw != Max128Bit.ZERO\\r\\n        ) {\\r\\n            strategy.pendingUserNext = Pending(Max128Bit.ZERO, Max128Bit.ZERO);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the number of \\\"do hard work\\\" processes left.\\r\\n     * @param processedCount Number of completed actions\\r\\n     */\\r\\n    function _updateDoHardWorksLeft(uint256 processedCount) private {\\r\\n        doHardWorksLeft -= uint8(processedCount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the number of \\\"withdrawal do hard work\\\" processes left.\\r\\n     * @param processedCount Number of completed actions\\r\\n     */\\r\\n    function _updateWithdrawalDohardWorksleft(uint256 processedCount) private {\\r\\n        withdrawalDoHardWorksLeft -= uint8(processedCount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Hash a reallocation table after it was updated\\r\\n     * @param reallocationTable 2D table showing amount of shares withdrawing to each strategy\\r\\n     */\\r\\n    function _hashReallocationTable(uint256[][] memory reallocationTable) internal {\\r\\n        reallocationTableHash = Hash.hashReallocationTable(reallocationTable);\\r\\n        if (logReallocationTable) {\\r\\n            // this is only meant to be emitted when debugging\\r\\n            emit ReallocationTableUpdatedWithTable(reallocationIndex, reallocationTableHash, reallocationTable);\\r\\n        } else {\\r\\n            emit ReallocationTableUpdated(reallocationIndex, reallocationTableHash);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate and store the hash of the given strategy array\\r\\n     * @param strategies Strategy addresses to hash\\r\\n     */\\r\\n    function _hashReallocationStrategies(address[] memory strategies) internal {\\r\\n        reallocationStrategiesHash = Hash.hashStrategies(strategies);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/spool/SpoolExternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// extends\\r\\nimport \\\"../interfaces/spool/ISpoolExternal.sol\\\";\\r\\nimport \\\"./SpoolReallocation.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Exposes spool functions to set and redeem actions.\\r\\n *\\r\\n * @dev\\r\\n * Most of the functions are restricted to vaults. The action is\\r\\n * recorded in the buffer system and is processed at the next\\r\\n * do hard work.\\r\\n * A user cannot interact with any of the Spool functions directly.\\r\\n *\\r\\n * Complete interaction with Spool consists of 4 steps\\r\\n * 1. deposit\\r\\n * 2. redeem shares\\r\\n * 3. withdraw\\r\\n * 4. redeem underlying asset\\r\\n *\\r\\n * Redeems (step 2. and 4.) are done at the same time. Redeem is\\r\\n * processed automatically on first vault interaction after the DHW\\r\\n * is completed.\\r\\n *\\r\\n * As the system works asynchronously, between every step\\r\\n * a do hard work needs to be executed. The shares and actual\\r\\n * withdrawn amount are only calculated at the time of action (DHW). \\r\\n */\\r\\nabstract contract SpoolExternal is ISpoolExternal, SpoolReallocation {\\r\\n    using Bitwise for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Max128Bit for uint128;\\r\\n\\r\\n    /* ========== DEPOSIT ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a vault to queue a deposit to a strategy.\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be a vault\\r\\n     * - strategy shouldn't be removed\\r\\n     *\\r\\n     * @param strat Strategy address to deposit to\\r\\n     * @param amount Amount to deposit\\r\\n     * @param index Global index vault is depositing at (active global index)\\r\\n     */\\r\\n    function deposit(address strat, uint128 amount, uint256 index)\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        notRemoved(strat)\\r\\n    {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        Pending storage strategyPending = _getStrategyPending(strategy, index);\\r\\n\\r\\n        Vault storage vault = strategy.vaults[msg.sender];\\r\\n        VaultBatch storage vaultBatch = vault.vaultBatches[index];\\r\\n\\r\\n        // save to storage\\r\\n        strategyPending.deposit = strategyPending.deposit.add(amount);\\r\\n        vaultBatch.deposited += amount;\\r\\n    }\\r\\n\\r\\n    /* ========== WITHDRAW ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a vault to queue a withdrawal from a strategy.\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be a vault\\r\\n     * - strategy shouldn't be removed\\r\\n     *\\r\\n     * @param strat Strategy address to withdraw from\\r\\n     * @param vaultProportion Proportion of all vault-strategy shares a vault wants to withdraw, denoted in basis points (10_000 is 100%)\\r\\n     * @param index Global index vault is depositing at (active global index)\\r\\n     */\\r\\n    function withdraw(address strat, uint256 vaultProportion, uint256 index)\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n    {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        Pending storage strategyPending = _getStrategyPending(strategy, index);\\r\\n\\r\\n        Vault storage vault = strategy.vaults[msg.sender];\\r\\n        VaultBatch storage vaultBatch = vault.vaultBatches[index];\\r\\n\\r\\n        // calculate new shares to withdraw\\r\\n        uint128 sharesToWithdraw = Math.getProportion128(vault.shares, vaultProportion, ACCURACY);\\r\\n\\r\\n        // save to storage\\r\\n        strategyPending.sharesToWithdraw = strategyPending.sharesToWithdraw.add(sharesToWithdraw);\\r\\n        vaultBatch.withdrawnShares += sharesToWithdraw;\\r\\n    }\\r\\n\\r\\n    /* ========== DEPOSIT/WITHDRAW SHARED ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Get strategy pending struct, depending on if the strategy do hard work has already been executed in the current index\\r\\n     * @param strategy Strategy data (see Strategy struct)\\r\\n     * @param interactingIndex Global index for which to get the struct\\r\\n     * @return pending Storage struct containing all unprocessed deposits and withdrawals for the `interactingIndex`\\r\\n     */\\r\\n    function _getStrategyPending(Strategy storage strategy, uint256 interactingIndex) private view returns (Pending storage pending) {\\r\\n        // if index we are interacting with (active global index) is same as strategy index, then DHW has already been executed in index\\r\\n        if (_isNextStrategyIndex(strategy, interactingIndex)) {\\r\\n            pending = strategy.pendingUser;\\r\\n        } else {\\r\\n            pending = strategy.pendingUserNext;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a vault to redeem deposit and withdrawals for the processed index.\\r\\n     * @dev\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be a valid vault\\r\\n     *\\r\\n     * @param strat Strategy address\\r\\n     * @param index Global index the vault is redeeming for\\r\\n     * @return Received vault received shares from the deposit and received vault underlying withdrawn amounts\\r\\n     */\\r\\n    function redeem(address strat, uint256 index)\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        returns (uint128, uint128)\\r\\n    {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        Batch storage batch = strategy.batches[index];\\r\\n        Vault storage vault = strategy.vaults[msg.sender];\\r\\n        VaultBatch storage vaultBatch = vault.vaultBatches[index];\\r\\n\\r\\n        uint128 vaultBatchDeposited = vaultBatch.deposited;\\r\\n        uint128 vaultBatchWithdrawnShares = vaultBatch.withdrawnShares;\\r\\n\\r\\n        uint128 vaultDepositReceived = 0;\\r\\n        uint128 vaultWithdrawnReceived = 0;\\r\\n        uint128 vaultShares = vault.shares;\\r\\n\\r\\n        // Make calculations if deposit in vault batch was performed\\r\\n        if (vaultBatchDeposited > 0 && batch.deposited > 0) {\\r\\n            vaultDepositReceived = Math.getProportion128(batch.depositedReceived, vaultBatchDeposited, batch.deposited);\\r\\n            // calculate new vault-strategy shares\\r\\n            // new shares are calculated at the DHW time, here vault only\\r\\n            // takes the proportion of the vault deposit compared to the total deposit\\r\\n            vaultShares += Math.getProportion128(batch.depositedSharesReceived, vaultBatchDeposited, batch.deposited);\\r\\n\\r\\n            // reset to 0 to get the gas reimbursement\\r\\n            vaultBatch.deposited = 0;\\r\\n        }\\r\\n\\r\\n        // Make calculations if withdraw in vault batch was performed\\r\\n        if (vaultBatchWithdrawnShares > 0 && batch.withdrawnShares > 0) {\\r\\n            // Withdrawn recieved represents the total underlying a strategy got back after DHW has processed the withdrawn shares.\\r\\n            // This is stored at the DHW time, here vault only takes the proportion\\r\\n            // of the vault shares withdrwan compared to the total shares withdrawn\\r\\n            vaultWithdrawnReceived = Math.getProportion128(batch.withdrawnReceived, vaultBatchWithdrawnShares, batch.withdrawnShares);\\r\\n            // substract all the shares withdrawn in the index after collecting the withdrawn recieved\\r\\n            vaultShares -= vaultBatchWithdrawnShares;\\r\\n\\r\\n            // reset to 0 to get the gas reimbursement\\r\\n            vaultBatch.withdrawnShares = 0;\\r\\n        }\\r\\n\\r\\n        // store the updated shares\\r\\n        vault.shares = vaultShares;\\r\\n\\r\\n        return (vaultDepositReceived, vaultWithdrawnReceived);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeem underlying token\\r\\n     * @dev\\r\\n     * This function is only called by the vault after the vault redeem is processed\\r\\n     * As redeem is called by each strategy separately, we don't want to transfer the\\r\\n     * withdrawn underlyin tokens x amount of times. \\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Can only be invoked by vault\\r\\n     *\\r\\n     * @param amount Amount to redeem\\r\\n     */\\r\\n    function redeemUnderlying(uint128 amount) external override onlyVault {\\r\\n        IVault(msg.sender).underlying().safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== REDEEM REALLOCATION ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Redeem vault shares after reallocation has been processed for the vault\\r\\n     * @dev\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Can only be invoked by vault\\r\\n     *\\r\\n     * @param vaultStrategies Array of vault strategy addresses\\r\\n     * @param depositProportions Values representing how the vault has deposited it's withdrawn shares \\r\\n     * @param index Index at which the reallocation was perofmed\\r\\n     */\\r\\n    function redeemReallocation(\\r\\n        address[] memory vaultStrategies,\\r\\n        uint256 depositProportions,\\r\\n        uint256 index\\r\\n    ) external override onlyVault {\\r\\n        // count number of strategies we deposit into\\r\\n        uint128 depositStratsCount = 0;\\r\\n        for (uint256 i = 0; i < vaultStrategies.length; i++) {\\r\\n            uint256 prop = depositProportions.get14BitUintByIndex(i);\\r\\n            if (prop > 0) {\\r\\n                depositStratsCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // init deposit and withdrawal strategy arrays\\r\\n        address[] memory withdrawStrats = new address[](vaultStrategies.length - depositStratsCount);\\r\\n        address[] memory depositStrats = new address[](depositStratsCount);\\r\\n        uint256[] memory depositProps = new uint256[](depositStratsCount);\\r\\n\\r\\n        // fill deposit and withdrawal strategy arrays \\r\\n        {\\r\\n            uint128 k = 0;\\r\\n            uint128 l = 0;\\r\\n            for (uint256 i = 0; i < vaultStrategies.length; i++) {\\r\\n                uint256 prop = depositProportions.get14BitUintByIndex(i);\\r\\n                if (prop > 0) {\\r\\n                    depositStrats[k] = vaultStrategies[i];\\r\\n                    depositProps[k] = prop;\\r\\n                    k++;\\r\\n                } else {\\r\\n                    withdrawStrats[l] = vaultStrategies[i];\\r\\n                    l++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalVaultWithdrawnReceived = 0;\\r\\n\\r\\n        // calculate total withdrawal amount \\r\\n        for (uint256 i = 0; i < withdrawStrats.length; i++) {\\r\\n            Strategy storage strategy = strategies[withdrawStrats[i]];\\r\\n            BatchReallocation storage reallocationBatch = strategy.reallocationBatches[index];\\r\\n            Vault storage vault = strategy.vaults[msg.sender];\\r\\n            \\r\\n            // if we withdrawed from strategy, claim and spread across deposits\\r\\n            uint256 vaultWithdrawnReallocationShares = vault.withdrawnReallocationShares;\\r\\n            if (vaultWithdrawnReallocationShares > 0) {\\r\\n                // if batch withdrawn shares is 0, reallocation was canceled as a strategy was removed\\r\\n                // if so, skip calculation and reset withdrawn reallcoation shares to 0\\r\\n                if (reallocationBatch.withdrawnReallocationShares > 0) {\\r\\n                    totalVaultWithdrawnReceived += \\r\\n                        (reallocationBatch.withdrawnReallocationReceived * vaultWithdrawnReallocationShares) / reallocationBatch.withdrawnReallocationShares;\\r\\n                    // substract the shares withdrawn from in the reallocation\\r\\n                    vault.shares -= uint128(vaultWithdrawnReallocationShares);\\r\\n                }\\r\\n                \\r\\n                vault.withdrawnReallocationShares = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // calculate how the withdrawn amount was deposited to the depositing strategies\\r\\n        uint256 vaultWithdrawnReceivedLeft = totalVaultWithdrawnReceived;\\r\\n        uint256 lastDepositStratIndex = depositStratsCount - 1;\\r\\n        for (uint256 i = 0; i < depositStratsCount; i++) {\\r\\n            Strategy storage depositStrategy = strategies[depositStrats[i]];\\r\\n            Vault storage depositVault = depositStrategy.vaults[msg.sender];\\r\\n            BatchReallocation storage reallocationBatch = depositStrategy.reallocationBatches[index];\\r\\n            if (reallocationBatch.depositedReallocation > 0) {\\r\\n                // calculate reallocation strat deposit amount\\r\\n                uint256 depositAmount;\\r\\n                // if the strategy is last among the depositing ones, use the amount left to calculate the new shares\\r\\n                // (same pattern was used when distributing the withdrawn shares to the depositing strategies - last strategy got what was left of shares)\\r\\n                if (i < lastDepositStratIndex) {\\r\\n                    depositAmount = (totalVaultWithdrawnReceived * depositProps[i]) / FULL_PERCENT;\\r\\n                    vaultWithdrawnReceivedLeft -= depositAmount;\\r\\n                } else { // if strat is last, use deposit left\\r\\n                    depositAmount = vaultWithdrawnReceivedLeft;\\r\\n                }\\r\\n\\r\\n                // based on calculated deposited amount calculate/redeem the new strategy shares belonging to a vault\\r\\n                depositVault.shares += \\r\\n                    SafeCast.toUint128((reallocationBatch.depositedReallocationSharesReceived * depositAmount) / reallocationBatch.depositedReallocation);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== FAST WITHDRAW ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Instantly withdraw shares from a strategy and return recieved underlying tokens.\\r\\n     * @dev\\r\\n     * User can execute the withdrawal of his shares from the vault at any time (except when\\r\\n     * the reallocation is pending) without waiting for the DHW to process it. This is done\\r\\n     * independently of other events. The gas cost is paid entirely by the user.\\r\\n     * Withdrawn amount is sent back to the caller (FastWithdraw) contract, that later on,\\r\\n     * sends it to a user.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be a fast withdraw contract\\r\\n     * - strategy shouldn't be removed\\r\\n     *\\r\\n     * @param strat Strategy address\\r\\n     * @param underlying Address of underlying asset\\r\\n     * @param shares Amount of shares to withdraw\\r\\n     * @param slippages Strategy slippage values verifying the validity of the strategy state\\r\\n     * @param swapData Array containig data to swap unclaimed strategy reward tokens for underlying asset\\r\\n     * @return Withdrawn Underlying asset withdrarn amount\\r\\n     */\\r\\n    function fastWithdrawStrat(\\r\\n        address strat,\\r\\n        address underlying,\\r\\n        uint256 shares,\\r\\n        uint256[] memory slippages,\\r\\n        SwapData[] memory swapData\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyFastWithdraw\\r\\n        notRemoved(strat)\\r\\n        returns(uint128)\\r\\n    {\\r\\n        // returns withdrawn amount\\r\\n        return  _fastWithdrawStrat(strat, underlying, shares, slippages, swapData);\\r\\n    }\\r\\n\\r\\n    /* ========== REMOVE SHARES (prepare for fast withdraw) ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Remove vault shares.\\r\\n     *\\r\\n     * @dev \\r\\n     * Called by the vault when a user requested a fast withdraw\\r\\n     * These shares are either withdrawn from the strategies immidiately or\\r\\n     * stored as user-strategy shares in the FastWithdraw contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - can only be called by the vault\\r\\n     *\\r\\n     * @param vaultStrategies Array of strategy addresses\\r\\n     * @param vaultProportion Proportion of all vault-strategy shares a vault wants to remove, denoted in basis points (10_000 is 100%)\\r\\n     * @return Array of removed shares per strategy\\r\\n     */\\r\\n    function removeShares(\\r\\n        address[] memory vaultStrategies,\\r\\n        uint256 vaultProportion\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyVault\\r\\n        returns(uint128[] memory)\\r\\n    {\\r\\n        uint128[] memory removedShares = new uint128[](vaultStrategies.length);\\r\\n\\r\\n        for (uint128 i = 0; i < vaultStrategies.length; i++) {\\r\\n            _notRemoved(vaultStrategies[i]);\\r\\n            Strategy storage strategy = strategies[vaultStrategies[i]];\\r\\n\\r\\n            Vault storage vault = strategy.vaults[msg.sender];\\r\\n\\r\\n            uint128 sharesToWithdraw = Math.getProportion128(vault.shares, vaultProportion, ACCURACY);\\r\\n\\r\\n            removedShares[i] = sharesToWithdraw;\\r\\n            vault.shares -= sharesToWithdraw;\\r\\n        }\\r\\n        \\r\\n        return removedShares;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/spool/SpoolReallocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// extends\\r\\nimport \\\"../interfaces/spool/ISpoolReallocation.sol\\\";\\r\\nimport \\\"./SpoolDoHardWork.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"../libraries/Bitwise.sol\\\";\\r\\n\\r\\n// other imports\\r\\nimport \\\"../interfaces/IVault.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Spool part of implementation dealing with the reallocation of assets\\r\\n *\\r\\n * @dev\\r\\n * Allocation provider can update vault allocation across strategies.\\r\\n * This requires vault to withdraw from some and deposit to other strategies.\\r\\n * This happens across multiple vaults. The system handles all vault reallocations\\r\\n * at once and optimizes it between eachother and users.\\r\\n *\\r\\n */\\r\\nabstract contract SpoolReallocation is ISpoolReallocation, SpoolDoHardWork {\\r\\n    using Bitwise for uint256;\\r\\n\\r\\n    /* ========== SET REALLOCATION ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Set vaults to reallocate on next do hard work\\r\\n     * Requirements:\\r\\n     * - Caller must have allocation provider role\\r\\n     * - Vaults array must not be empty\\r\\n     * - Vaults must be valid\\r\\n     * - Strategies must be valid\\r\\n     * - If reallocation was already initialized before:\\r\\n     *    - Reallocation table hash must be set\\r\\n     *    - Reallocation table must be valid\\r\\n     *\\r\\n     * @param vaults Array of vault addresses\\r\\n     * @param strategies Array of strategy addresses\\r\\n     * @param reallocationTable Reallocation details\\r\\n     */\\r\\n    function reallocateVaults(\\r\\n        VaultData[] memory vaults,\\r\\n        address[] memory strategies,\\r\\n        uint256[][] memory reallocationTable\\r\\n    ) external onlyAllocationProvider {\\r\\n        require(vaults.length > 0, \\\"NOVRLC\\\");\\r\\n\\r\\n        uint24 activeGlobalIndex = getActiveGlobalIndex();\\r\\n\\r\\n        // If reallocation was already initialized before,\\r\\n        // verify state and parameters before continuing\\r\\n        if (reallocationIndex > 0) {\\r\\n            // If reallocation was started for index and table hash is 0,\\r\\n            // the reallocation was canceled. Prevent from setting it in same index again.\\r\\n            require(reallocationTableHash != 0, \\\"RLCSTP\\\");\\r\\n            // check if reallocation can still be set for same global index as before\\r\\n            require(reallocationIndex == activeGlobalIndex, \\\"RLCINP\\\");\\r\\n            // verifies strategies agains current reallocation strategies hash\\r\\n            _verifyReallocationStrategies(strategies);\\r\\n            _verifyReallocationTable(reallocationTable);\\r\\n        } else { // if new reallocation, init empty reallocation shares table\\r\\n            // verifies all system strategies using Controller contract\\r\\n            _verifyStrategies(strategies);\\r\\n            // hash and save strategies\\r\\n            // this strategies hash is then used to verify strategies during the reallocation\\r\\n            // if the strat is exploited and removed from the system, this hash is used to be consistent\\r\\n            // with reallocation table ordering as system strategies change.\\r\\n            _hashReallocationStrategies(strategies);\\r\\n            reallocationIndex = activeGlobalIndex;\\r\\n            reallocationTable = new uint256[][](strategies.length);\\r\\n\\r\\n            for (uint256 i = 0; i < strategies.length; i++) {\\r\\n                reallocationTable[i] = new uint256[](strategies.length);\\r\\n            }\\r\\n\\r\\n            emit StartReallocation(reallocationIndex);\\r\\n        }\\r\\n\\r\\n        // loop over vaults\\r\\n        for (uint128 i = 0; i < vaults.length; i++) {\\r\\n            // check if address is a valid vault\\r\\n            _isVault(vaults[i].vault);\\r\\n\\r\\n            // reallocate vault\\r\\n            //address[] memory vaultStrategies = _buildVaultStrategiesArray(vaults[i].strategiesBitwise, vaults[i].strategiesCount, strategies);\\r\\n            (uint256[] memory withdrawProportions, uint256 depositProportions) = \\r\\n                IVault(vaults[i].vault).reallocate(\\r\\n                    _buildVaultStrategiesArray(vaults[i].strategiesBitwise, vaults[i].strategiesCount, strategies),\\r\\n                    vaults[i].newProportions,\\r\\n                    getCompletedGlobalIndex(), // NOTE: move to var if call stack not too deeep\\r\\n                    activeGlobalIndex);\\r\\n\\r\\n            // withdraw and deposit from vault strategies\\r\\n            for (uint128 j = 0; j < vaults[i].strategiesCount; j++) {\\r\\n                if (withdrawProportions[j] > 0) {\\r\\n                    uint256 withdrawStratIndex = vaults[i].strategiesBitwise.get8BitUintByIndex(j);\\r\\n\\r\\n                    (uint128 newSharesWithdrawn) = \\r\\n                        _reallocateVaultStratWithdraw(\\r\\n                            vaults[i].vault,\\r\\n                            strategies[withdrawStratIndex],\\r\\n                            withdrawProportions[j],\\r\\n                            activeGlobalIndex\\r\\n                        );\\r\\n\\r\\n                    _updateDepositReallocationForStrat(\\r\\n                        newSharesWithdrawn,\\r\\n                        vaults[i],\\r\\n                        depositProportions,\\r\\n                        reallocationTable[withdrawStratIndex]\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }        \\r\\n\\r\\n        // Hash reallocation proportions\\r\\n        _hashReallocationTable(reallocationTable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove shares from strategy to set them for a reallocation\\r\\n     * @param vaultAddress Vault address\\r\\n     * @param strat Strategy address to remove shares\\r\\n     * @param vaultProportion Proportion of all vault-strategy shares a vault wants to reallocate\\r\\n     * @param index Global index we're reallocating for\\r\\n     * @return newSharesWithdrawn New shares withdrawn fro reallocation\\r\\n     */\\r\\n    function _reallocateVaultStratWithdraw(\\r\\n        address vaultAddress,\\r\\n        address strat, \\r\\n        uint256 vaultProportion,\\r\\n        uint256 index\\r\\n    )\\r\\n        private returns (uint128 newSharesWithdrawn)\\r\\n    {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        Vault storage vault = strategy.vaults[vaultAddress];\\r\\n        VaultBatch storage vaultBatch = vault.vaultBatches[index];\\r\\n\\r\\n        // calculate new shares to withdraw\\r\\n        uint128 unwithdrawnVaultShares = vault.shares - vaultBatch.withdrawnShares;\\r\\n\\r\\n        // if strategy wasn't executed in current batch yet, also substract unprocessed withdrawal shares in current batch\\r\\n\\r\\n        if(!_isNextStrategyIndex(strategy, index)) {\\r\\n            VaultBatch storage vaultBatchPrevious = vault.vaultBatches[index - 1];\\r\\n            unwithdrawnVaultShares -= vaultBatchPrevious.withdrawnShares;\\r\\n        }\\r\\n\\r\\n        // return data\\r\\n        newSharesWithdrawn = Math.getProportion128(unwithdrawnVaultShares, vaultProportion, ACCURACY);\\r\\n\\r\\n        // save to storage\\r\\n        vault.withdrawnReallocationShares = newSharesWithdrawn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether the given index is next index for the strategy\\r\\n     * @param strategy Strategy data (see Strategy struct)\\r\\n     * @param interactingIndex Index to check\\r\\n     * @return isNextStrategyIndex True if given index is the next strategy index\\r\\n     */\\r\\n    function _isNextStrategyIndex(\\r\\n        Strategy storage strategy,\\r\\n        uint256 interactingIndex\\r\\n    ) internal view returns (bool isNextStrategyIndex) {\\r\\n        if (strategy.index + 1 == interactingIndex) {\\r\\n            isNextStrategyIndex = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update deposit reallocation for strategy\\r\\n     * @param sharesWithdrawn Withdrawn shares\\r\\n     * @param vaultData Vault data (see VaultData struct)\\r\\n     * @param depositProportions Deposit proportions\\r\\n     * @param stratReallocationTable Strategy reallocation table\\r\\n     */\\r\\n    function _updateDepositReallocationForStrat(\\r\\n        uint128 sharesWithdrawn,\\r\\n        VaultData memory vaultData,\\r\\n        uint256 depositProportions,\\r\\n        uint256[] memory stratReallocationTable\\r\\n    ) private pure {\\r\\n        // sharesToDeposit = sharesWithdrawn * deposit_strat%\\r\\n        uint128 sharesWithdrawnleft = sharesWithdrawn;\\r\\n        uint128 lastDepositedIndex = 0;\\r\\n        for (uint128 i = 0; i < vaultData.strategiesCount; i++) {\\r\\n\\r\\n            uint256 stratDepositProportion = depositProportions.get14BitUintByIndex(i);\\r\\n            if (stratDepositProportion > 0) {\\r\\n                uint256 globalStratIndex = vaultData.strategiesBitwise.get8BitUintByIndex(i);\\r\\n                uint128 withdrawnSharesForStrat = Math.getProportion128(sharesWithdrawn, stratDepositProportion, FULL_PERCENT);\\r\\n                stratReallocationTable[globalStratIndex] += withdrawnSharesForStrat;\\r\\n                sharesWithdrawnleft -= withdrawnSharesForStrat;\\r\\n                lastDepositedIndex = i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // add shares left from rounding error to last deposit strat\\r\\n        stratReallocationTable[lastDepositedIndex] += sharesWithdrawnleft;\\r\\n    }\\r\\n\\r\\n    /* ========== SHARED ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Build vault strategies array from a 256bit word.\\r\\n     * @dev Each vault index takes 8bits.\\r\\n     *\\r\\n     * @param bitwiseAddressIndexes Bitwise address indexes\\r\\n     * @param strategiesCount Strategies count\\r\\n     * @param strategies Array of strategy addresses\\r\\n     * @return vaultStrategies Array of vault strategy addresses\\r\\n     */\\r\\n    function _buildVaultStrategiesArray(\\r\\n        uint256 bitwiseAddressIndexes,\\r\\n        uint8 strategiesCount,\\r\\n        address[] memory strategies\\r\\n    ) private pure returns(address[] memory vaultStrategies) {\\r\\n        vaultStrategies = new address[](strategiesCount);\\r\\n\\r\\n        for (uint128 i = 0; i < strategiesCount; i++) {\\r\\n            uint256 stratIndex = bitwiseAddressIndexes.get8BitUintByIndex(i);\\r\\n            vaultStrategies[i] = strategies[stratIndex];\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/spool/SpoolStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n// extends\\r\\nimport \\\"../interfaces/spool/ISpoolStrategy.sol\\\";\\r\\nimport \\\"./SpoolBase.sol\\\";\\r\\n\\r\\n// libraries\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../libraries/Max/128Bit.sol\\\";\\r\\nimport \\\"../libraries/Math.sol\\\";\\r\\n\\r\\n// other imports\\r\\nimport \\\"../interfaces/IBaseStrategy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Spool part of implementation dealing with strategy related processing\\r\\n */\\r\\nabstract contract SpoolStrategy is ISpoolStrategy, SpoolBase {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of funds the vault caller has in total\\r\\n     * deployed to a particular strategy.\\r\\n     *\\r\\n     * @dev\\r\\n     * Although not set as a view function due to the delegatecall\\r\\n     * instructions performed by it, its value can be acquired\\r\\n     * without actually executing the function by both off-chain\\r\\n     * and on-chain code via simulating the transaction's execution.\\r\\n     *\\r\\n     * @param strat strategy address\\r\\n     *\\r\\n     * @return amount\\r\\n     */\\r\\n    function getUnderlying(address strat) external override returns (uint128) {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        uint128 totalStrategyShares = strategy.totalShares;\\r\\n        if (totalStrategyShares == 0) return 0;\\r\\n\\r\\n        return Math.getProportion128(_totalUnderlying(strat), strategy.vaults[msg.sender].shares, totalStrategyShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns total strategy underlying value.\\r\\n     * @param strat Strategy address\\r\\n     * @return Total strategy underlying value\\r\\n     */\\r\\n    function getStratUnderlying(address strat) external returns (uint128) {\\r\\n        return _totalUnderlying(strat); // deletagecall\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get total vault underlying at index.\\r\\n     *\\r\\n     * @dev\\r\\n     * NOTE: Call ONLY if vault shares are correct for the index.\\r\\n     *       Meaning vault has just redeemed for this index or this is current index.\\r\\n     *\\r\\n     * @param strat strategy address\\r\\n     * @param index index in total underlying\\r\\n     * @return Total vault underlying at index\\r\\n     */\\r\\n    function getVaultTotalUnderlyingAtIndex(address strat, uint256 index) external override view returns(uint128) {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n        Vault storage vault = strategy.vaults[msg.sender];\\r\\n        TotalUnderlying memory totalUnderlying = strategy.totalUnderlying[index];\\r\\n\\r\\n        if (totalUnderlying.totalShares > 0) {\\r\\n            return Math.getProportion128(totalUnderlying.amount, vault.shares, totalUnderlying.totalShares);\\r\\n        }\\r\\n        \\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Yields the total underlying funds of a strategy.\\r\\n     *\\r\\n     * @dev\\r\\n     * The function is not set as view given that it performs a delegate call\\r\\n     * instruction to the strategy.\\r\\n     * @param strategy Strategy address\\r\\n     * @return Total underlying funds\\r\\n     */\\r\\n    function _totalUnderlying(address strategy)\\r\\n        internal\\r\\n        returns (uint128)\\r\\n    {\\r\\n        bytes memory data = _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(IBaseStrategy.getStrategyBalance.selector)\\r\\n        );\\r\\n\\r\\n        return abi.decode(data, (uint128));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get strategy total underlying balance including rewards\\r\\n     * @param strategy Strategy address\\r\\n     * @return strategyBa\u010dance Returns strategy balance with the rewards\\r\\n     */\\r\\n    function _getStratValue(\\r\\n        address strategy\\r\\n    ) internal returns(uint128) {\\r\\n        bytes memory data = _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.getStrategyUnderlyingWithRewards.selector\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return abi.decode(data, (uint128));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns pending rewards for a strategy\\r\\n     * @param strat Strategy for which to return rewards\\r\\n     * @param reward Reward address\\r\\n     * @return Pending rewards\\r\\n     */\\r\\n    function getPendingRewards(address strat, address reward) external view returns(uint256) {\\r\\n        return strategies[strat].pendingRewards[reward];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns strat address in shared strategies mapping for index\\r\\n     * @param sharedKey Shared strategies key\\r\\n     * @param index Strategy addresses index\\r\\n     * @return Strategy address\\r\\n     */\\r\\n    function getStratSharedAddress(bytes32 sharedKey, uint256 index) external view returns(address) {\\r\\n        return strategiesShared[sharedKey].stratAddresses[index];\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE EXTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Adds and initializes a new strategy\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the controller\\r\\n     * - reallcation must not be pending\\r\\n     * - strategy shouldn't be previously removed\\r\\n     *\\r\\n     * @param strat Strategy to be added\\r\\n     */\\r\\n    function addStrategy(address strat)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n        noPendingReallocation\\r\\n        notRemoved(strat)\\r\\n    {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        strategy.index = globalIndex;\\r\\n        // init as max zero, so first user interaction will be cheaper (non-zero to non-zero storage change)\\r\\n        strategy.pendingUser = Pending(Max128Bit.ZERO, Max128Bit.ZERO);\\r\\n        strategy.pendingUserNext = Pending(Max128Bit.ZERO, Max128Bit.ZERO);\\r\\n\\r\\n        // initialize strategy specific values\\r\\n        _initializeStrategy(strat);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disables a strategy by liquidating all actively deployed funds\\r\\n     * within it to its underlying collateral.\\r\\n     *\\r\\n     * @dev\\r\\n     * This function is invoked whenever a strategy is disabled at the controller\\r\\n     * level as an emergency.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the controller\\r\\n     * - strategy shouldn't be previously removed\\r\\n     *\\r\\n     * @param strat strategy being disabled\\r\\n     * @param skipDisable flag to skip executing strategy specific disable function\\r\\n     *  NOTE: Should always be false, except if `IBaseStrategy.disable` is failing and there is no other way\\r\\n     */\\r\\n    function disableStrategy(\\r\\n        address strat,\\r\\n        bool skipDisable\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n        notRemoved(strat)\\r\\n    {\\r\\n        if (isMidReallocation()) { // when reallocating\\r\\n            _disableStrategyWhenReallocating(strat);\\r\\n        } else { // no reallocation in progress\\r\\n            _disableStrategyNoReallocation(strat);\\r\\n        }\\r\\n\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        strategy.isRemoved = true;\\r\\n\\r\\n        if (!skipDisable) {\\r\\n            _disableStrategy(strat);\\r\\n        } else {\\r\\n            _skippedDisable[strat] = true;\\r\\n        }\\r\\n\\r\\n        _awaitingEmergencyWithdraw[strat] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disable strategy when reallocating\\r\\n     * @param strat Strategy to disable\\r\\n     */\\r\\n    function _disableStrategyWhenReallocating(address strat) private {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        if(strategy.index < globalIndex) {\\r\\n            // is in withdrawal phase\\r\\n            if (!strategy.isInDepositPhase) {\\r\\n                // decrease do hard work withdrawals left\\r\\n                if (withdrawalDoHardWorksLeft > 0) {\\r\\n                    withdrawalDoHardWorksLeft--;\\r\\n                }\\r\\n            } else {\\r\\n                // if user withdrawal was already performed, collect withdrawn amount to be emergency withdrawn\\r\\n                // NOTE: `strategy.index + 1` has to be used as the strategy index has not increased yet\\r\\n                _removeNondistributedWithdrawnReceived(strategy, strategy.index + 1);\\r\\n            }\\r\\n\\r\\n            _decreaseDoHardWorksLeft(true);\\r\\n\\r\\n            // save waiting reallocation deposit to be emergency withdrawn\\r\\n            strategy.emergencyPending += strategy.pendingReallocateDeposit;\\r\\n            strategy.pendingReallocateDeposit = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disable strategy when there is no reallocation\\r\\n     * @param strat Strategy to disable\\r\\n     */\\r\\n    function _disableStrategyNoReallocation(address strat) private {\\r\\n        Strategy storage strategy = strategies[strat];\\r\\n\\r\\n        // check if the strategy has already been processed in ongoing do hard work\\r\\n        if (strategy.index < globalIndex) {\\r\\n            _decreaseDoHardWorksLeft(false);\\r\\n        } else if (!_isBatchComplete()) {\\r\\n            // if user withdrawal was already performed, collect withdrawn amount to be emergency withdrawn\\r\\n            _removeNondistributedWithdrawnReceived(strategy, strategy.index);\\r\\n        }\\r\\n\\r\\n        // if reallocation is set to be processed, reset reallocation table to cancel it for set index\\r\\n        if (reallocationTableHash != 0) {\\r\\n            reallocationTableHash = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Decrease \\\"do hard work\\\" actions left\\r\\n     * @notice isMidReallocation Whether system is mid-reallocation\\r\\n     */\\r\\n    function _decreaseDoHardWorksLeft(bool isMidReallocation) private {\\r\\n        if (doHardWorksLeft > 0) {\\r\\n            doHardWorksLeft--;\\r\\n            // check if this was last strategy, to complete the do hard work\\r\\n            _finishDhw(isMidReallocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the nondistributed amounts recieved, if any\\r\\n     * @dev used when emergency withdrawing\\r\\n     *\\r\\n     * @param strategy Strategy address\\r\\n     * @param index index remove from\\r\\n     */\\r\\n    function _removeNondistributedWithdrawnReceived(Strategy storage strategy, uint256 index) private {\\r\\n        strategy.emergencyPending += strategy.batches[index].withdrawnReceived;\\r\\n        strategy.batches[index].withdrawnReceived = 0;\\r\\n\\r\\n        strategy.totalUnderlying[index].amount = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Liquidating all actively deployed funds within a strategy after it was disabled.\\r\\n     *\\r\\n     * @dev\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be the controller\\r\\n     * - the strategy must be disabled\\r\\n     * - the strategy must be awaiting emergency withdraw\\r\\n     *\\r\\n     * @param strat strategy being disabled\\r\\n     * @param data data to perform the withdrawal\\r\\n     * @param withdrawRecipient recipient of the withdrawn funds\\r\\n     */\\r\\n    function emergencyWithdraw(\\r\\n        address strat,\\r\\n        address withdrawRecipient,\\r\\n        uint256[] memory data\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n        onlyRemoved(strat)\\r\\n    {\\r\\n\\r\\n        if (_awaitingEmergencyWithdraw[strat]) {\\r\\n            _emergencyWithdraw(strat, withdrawRecipient, data);\\r\\n\\r\\n            _awaitingEmergencyWithdraw[strat] = false;\\r\\n        } else if (strategies[strat].emergencyPending > 0) {\\r\\n            IBaseStrategy(strat).underlying().transfer(withdrawRecipient, strategies[strat].emergencyPending);\\r\\n            strategies[strat].emergencyPending = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Runs strategy specific disable function if it was skipped when disabling the strategy.\\r\\n     * Requirements:\\r\\n     * - the caller must be the controller\\r\\n     * - the strategy must be disabled\\r\\n     *\\r\\n     * @param strat Strategy to remove\\r\\n     */\\r\\n    function runDisableStrategy(address strat)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n        onlyRemoved(strat)\\r\\n    {\\r\\n        require(_skippedDisable[strat], \\\"SDEX\\\");\\r\\n\\r\\n        _disableStrategy(strat);\\r\\n        _skippedDisable[strat] = false;\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Invokes the process function on the strategy to process teh pending actions\\r\\n     * @dev executed deposit or withdrawal and compound of the reward tokens\\r\\n     *\\r\\n     * @param strategy Strategy address\\r\\n     * @param slippages Array of slippage parameters to apply when depositing or withdrawing\\r\\n     * @param harvestRewards Whether to harvest (swap and deposit) strategy rewards or not\\r\\n     * @param swapData Array containig data to swap unclaimed strategy reward tokens for underlying asset\\r\\n     */\\r\\n    function _process(\\r\\n        address strategy,\\r\\n        uint256[] memory slippages,\\r\\n        bool harvestRewards,\\r\\n        SwapData[] memory swapData\\r\\n    ) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.process.selector,\\r\\n                slippages,\\r\\n                harvestRewards,\\r\\n                swapData\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invoke process reallocation for a strategy\\r\\n     * @dev This is the first par of the strategy DHW when reallocating\\r\\n     *\\r\\n     * @param strategy Strategy address\\r\\n     * @param slippages Array of slippage parameters to apply when withdrawing\\r\\n     * @param processReallocationData Reallocation values used when processing\\r\\n     * @return withdrawnUnderlying Actual withdrawn reallocation underlying assets received\\r\\n     */\\r\\n    function _processReallocation(\\r\\n        address strategy,\\r\\n        uint256[] memory slippages,\\r\\n        ProcessReallocationData memory processReallocationData\\r\\n    ) internal returns(uint128) {\\r\\n        bytes memory data = _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.processReallocation.selector,\\r\\n                slippages,\\r\\n                processReallocationData\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // return actual withdrawn reallocation underlying assets received\\r\\n        return abi.decode(data, (uint128));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invoke process deposit for a strategy\\r\\n     * @param strategy Strategy address\\r\\n     * @param slippages Array of slippage parameters to apply when depositing\\r\\n     */\\r\\n    function _processDeposit(\\r\\n        address strategy,\\r\\n        uint256[] memory slippages\\r\\n    ) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.processDeposit.selector,\\r\\n                slippages\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invoke fast withdraw for a strategy\\r\\n     * @param strategy Strategy to withdraw from\\r\\n     * @param underlying Asset to withdraw\\r\\n     * @param shares Amount of shares to withdraw\\r\\n     * @param slippages Array of slippage parameters to apply when withdrawing\\r\\n     * @param swapData Swap slippage and path array\\r\\n     * @return Withdrawn amount\\r\\n     */\\r\\n    function _fastWithdrawStrat(\\r\\n        address strategy,\\r\\n        address underlying,\\r\\n        uint256 shares,\\r\\n        uint256[] memory slippages,\\r\\n        SwapData[] memory swapData\\r\\n    ) internal returns(uint128) {\\r\\n        bytes memory data = _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.fastWithdraw.selector,\\r\\n                shares,\\r\\n                slippages,\\r\\n                swapData\\r\\n            )\\r\\n        );\\r\\n\\r\\n        (uint128 withdrawnAmount) = abi.decode(data, (uint128));\\r\\n\\r\\n        IERC20(underlying).safeTransfer(msg.sender, withdrawnAmount);\\r\\n\\r\\n        return withdrawnAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invoke claim rewards for a strategy\\r\\n     * @param strategy Strategy address\\r\\n     * @param swapData Swap slippage and path\\r\\n     */\\r\\n    function _claimRewards(\\r\\n        address strategy,\\r\\n        SwapData[] memory swapData\\r\\n    ) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.claimRewards.selector,\\r\\n                swapData\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invokes the emergencyWithdraw function on a strategy\\r\\n     * @param strategy Strategy to which to relay the call to\\r\\n     * @param recipient Address to which to withdraw to\\r\\n     * @param data Strategy specific data to perorm energency withdraw  on a strategy\\r\\n     */\\r\\n    function _emergencyWithdraw(address strategy, address recipient, uint256[] memory data) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(\\r\\n                IBaseStrategy.emergencyWithdraw.selector,\\r\\n                recipient,\\r\\n                data\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes strategy specific values\\r\\n     * @param strategy Strategy to initialize\\r\\n     */\\r\\n    function _initializeStrategy(address strategy) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(IBaseStrategy.initialize.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cleans strategy specific values after disabling\\r\\n     * @param strategy Strategy to disable\\r\\n     */\\r\\n    function _disableStrategy(address strategy) internal {\\r\\n        _relay(\\r\\n            strategy,\\r\\n            abi.encodeWithSelector(IBaseStrategy.disable.selector)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISpoolOwner\",\"name\":\"_spoolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fastWithdraw\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"}],\"name\":\"DoHardWorkCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DoHardWorkStrategyCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reallocationTableHash\",\"type\":\"bytes32\"}],\"name\":\"ReallocationTableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reallocationTableHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"reallocationTable\",\"type\":\"uint256[][]\"}],\"name\":\"ReallocationTableUpdatedWithTable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllocationProvider\",\"type\":\"bool\"}],\"name\":\"SetAllocationProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDoHardWorker\",\"type\":\"bool\"}],\"name\":\"SetIsDoHardWorker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"}],\"name\":\"StartReallocation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stratIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"slippages\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"doClaim\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData[]\",\"name\":\"swapData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RewardSlippages[]\",\"name\":\"rewardSlippages\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"allStrategies\",\"type\":\"address[]\"}],\"name\":\"batchDoHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[][]\",\"name\":\"reallocationTable\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"}],\"internalType\":\"struct StratUnderlyingSlippage[]\",\"name\":\"priceSlippages\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"doClaim\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData[]\",\"name\":\"swapData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RewardSlippages[]\",\"name\":\"rewardSlippages\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stratIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"slippages\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct ReallocationWithdrawData\",\"name\":\"withdrawData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"stratIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"slippages\",\"type\":\"uint256[][]\"}],\"internalType\":\"struct ReallocationData\",\"name\":\"depositData\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"allStrategies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isOneTransaction\",\"type\":\"bool\"}],\"name\":\"batchDoHardWorkReallocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skipDisable\",\"type\":\"bool\"}],\"name\":\"disableStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"slippages\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapData[]\",\"name\":\"swapData\",\"type\":\"tuple[]\"}],\"name\":\"fastWithdrawStrat\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveGlobalIndex\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompletedGlobalIndex\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sharedKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStratSharedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"name\":\"getStratUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getStratVaultShares\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalUnderlyingAtIndex\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalIndex\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllocationProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDoHardWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMidReallocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMidReallocation\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"strategiesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strategiesBitwise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProportions\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultData[]\",\"name\":\"vaults\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"reallocationTable\",\"type\":\"uint256[][]\"}],\"name\":\"reallocateVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reallocationIndex\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultStrategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"depositProportions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"redeemReallocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"redeemUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultStrategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"vaultProportion\",\"type\":\"uint256\"}],\"name\":\"removeShares\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"name\":\"runDisableStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllocationProvider\",\"type\":\"bool\"}],\"name\":\"setAllocationProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAwaiting\",\"type\":\"bool\"}],\"name\":\"setAwaitingEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDoHardWorker\",\"type\":\"bool\"}],\"name\":\"setDoHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"doForce\",\"type\":\"bool\"}],\"name\":\"setForceOneTxDoHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"doLog\",\"type\":\"bool\"}],\"name\":\"setLogReallocationTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalShares\",\"type\":\"uint128\"},{\"internalType\":\"uint24\",\"name\":\"index\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isRemoved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sharesToWithdraw\",\"type\":\"uint128\"}],\"internalType\":\"struct Pending\",\"name\":\"pendingUser\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"sharesToWithdraw\",\"type\":\"uint128\"}],\"internalType\":\"struct Pending\",\"name\":\"pendingUserNext\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"pendingDepositReward\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInDepositPhase\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"optimizedSharesWithdrawn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingReallocateDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingReallocateOptimizedDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"emergencyPending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultProportion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDoHardWorksLeft\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Spool", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1600", "ConstructorArguments": "0000000000000000000000004f03f70a99e5c3b49d733ddd7458f80fa9b5a5b5000000000000000000000000e5b126ae9540809488990a9813e1a2732f678047000000000000000000000000a602141d5f84490071dd977e1c12c82628e1af6c", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}