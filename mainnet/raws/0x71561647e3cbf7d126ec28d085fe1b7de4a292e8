{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract NumberBetweenZeroAndTen {\r\n\r\n    uint256 private secretNumber;\r\n    uint256 public lastPlayed;\r\n    address public owner;\r\n    address constant megaman = 0xc316F2bbcCeE013472d2f709414602cF7Fea6007;\r\n    \r\n    struct Player {\r\n        address addr;\r\n        uint256 ethr;\r\n    }\r\n    \r\n    Player[] players;\r\n    \r\n    constructor() public {\r\n        // On construct set the owner and a random secret number\r\n        owner = msg.sender;\r\n        shuffle();\r\n    }\r\n    \r\n    function guess(uint256 number) public payable {\r\n        // Guess must be between zero and ten\r\n        require(number >= 0 && number <= 10);\r\n        \r\n        // Update the last played date\r\n        lastPlayed = now;\r\n        \r\n        // Add player to the players list\r\n        Player player;\r\n        player.addr = msg.sender;\r\n        player.ethr = msg.value;\r\n        players.push(player);\r\n        \r\n        // Payout if guess is correct\r\n        if (number == secretNumber) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n        \r\n        // Refresh the secret number\r\n        shuffle();\r\n    }\r\n    \r\n    function shuffle() internal {\r\n        // Randomly set secretNumber with a value between 1 and 10\r\n        secretNumber = uint8(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 10 + 1;\r\n    }\r\n\r\n    function kill() public {\r\n        // Enable owner to kill the contract after 24 hours of inactivity\r\n        require(msg.sender == owner, \"You are not the owner of contract\");\r\n        uint256 balance = address(this).balance;\r\n        megaman.transfer((balance*20)/100);\r\n        owner.transfer((balance*80)/100);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"guess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "NumberBetweenZeroAndTen", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3881236ace15e384e1f79a2b6ad9947be277be9a3939c74061279ff58d7a166d"}]}