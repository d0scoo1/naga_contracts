{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/l1/ProtonautSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../common/AccessControlUpgradeable.sol';\\nimport './interfaces/ISVG721.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\n/// @title ProtonautSale\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Sale contract for L1.\\ncontract ProtonautSale is\\n\\tAccessControlUpgradeable,\\n\\tReentrancyGuardUpgradeable,\\n\\tPausableUpgradeable\\n{\\n\\tISVG721 public Svg721;\\n\\tuint256 public price;\\n\\tuint256 public maxPurchaseLimit;\\n\\n\\tmapping(address => uint256) public userPurchaseLimits;\\n\\n\\tevent Sold(address indexed _buyer, uint256 _tokenId, uint256 price);\\n\\tevent SetPrice(uint256 _price);\\n\\n\\t/// @param _Svg721 address of Svg721 contract\\n\\t/// @param _price price of protonaut\\n\\tfunction initialize(\\n\\t\\taddress _Svg721,\\n\\t\\tuint256 _price,\\n\\t\\tuint256 _maxPurchaseLimit\\n\\t) public virtual initializer {\\n\\t\\t__Ownable_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\tSvg721 = ISVG721(_Svg721);\\n\\t\\tprice = _price;\\n\\t\\tmaxPurchaseLimit = _maxPurchaseLimit;\\n\\t}\\n\\n\\t/// @param numberOfTokens tokens to purchase\\n\\tfunction purchase(uint256 numberOfTokens)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tnonReentrant\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tnumberOfTokens + userPurchaseLimits[_msgSender()] <=\\n\\t\\t\\t\\tmaxPurchaseLimit,\\n\\t\\t\\t'Purchase limit exceeded'\\n\\t\\t);\\n\\t\\trequire(msg.value >= price * (numberOfTokens), 'Not enough funds');\\n\\t\\tuserPurchaseLimits[_msgSender()] += numberOfTokens;\\n\\n\\t\\tfor (uint256 index = 0; index < numberOfTokens; index++) {\\n\\t\\t\\tuint256 tokenId = Svg721.mint(msg.sender);\\n\\t\\t\\temit Sold(msg.sender, tokenId, price);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Removes all eth from the contract\\n\\tfunction withdrawETH() external onlyOwner {\\n\\t\\taddress payable to = payable(msg.sender);\\n\\t\\tto.transfer(address(this).balance);\\n\\t}\\n\\n\\t/// @notice set the price of the protonaut\\n\\t/// @param _price price of the protonaut\\n\\tfunction setPrice(uint256 _price) external onlyAdmin {\\n\\t\\tprice = _price;\\n\\t\\temit SetPrice(_price);\\n\\t}\\n\\n\\tfunction pause(bool enabled) external onlyAdmin {\\n\\t\\tif (enabled) {\\n\\t\\t\\t_pause();\\n\\t\\t} else {\\n\\t\\t\\t_unpause();\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// give the contract some SVG Code\\n// output an NFT URI with this SVG code\\n// Storing all the NFT metadata on-chain\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\n/// @title AccessControlUpgradeable\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Describes common functions.\\n/// @dev Multiple uses\\ncontract AccessControlUpgradeable is OwnableUpgradeable {\\n\\t/// @notice is admin mapping\\n\\tmapping(address => bool) private _admins;\\n\\n\\tevent AdminAccessSet(address indexed admin, bool enabled);\\n\\n\\t/// @param _admin address\\n\\t/// @param enabled set as Admin\\n\\tfunction _setAdmin(address _admin, bool enabled) internal {\\n\\t\\t_admins[_admin] = enabled;\\n\\t\\temit AdminAccessSet(_admin, enabled);\\n\\t}\\n\\n\\t/// @param __admins addresses\\n\\t/// @param enabled set as Admin\\n\\tfunction setAdmin(address[] memory __admins, bool enabled)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tfor (uint256 index = 0; index < __admins.length; index++) {\\n\\t\\t\\t_setAdmin(__admins[index], enabled);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @param _admin address\\n\\tfunction isAdmin(address _admin) public view returns (bool) {\\n\\t\\treturn _admins[_admin];\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(\\n\\t\\t\\tisAdmin(_msgSender()) || _msgSender() == owner(),\\n\\t\\t\\t'Caller does not have admin access'\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/l1/interfaces/ISVG721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport '../../common/BaseNFT.sol';\\n\\n/// @title ISVG721 - Interface\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Describes common functions.\\n/// @dev Used in Tunnels, SVG721 and L2_SVG721\\ninterface ISVG721 {\\n\\t/// @notice updates feature values in batches\\n\\t/// @param tokenId array of ids of tokens to update\\n\\t/// @param featureName names of features\\n\\t/// @param newValue updated value in uint256\\n\\tfunction updateFeatureValueBatch(\\n\\t\\tuint256[] memory tokenId,\\n\\t\\tstring[] memory featureName,\\n\\t\\tuint256[] memory newValue\\n\\t) external;\\n\\n\\t/// @notice get name, desc, etc\\n\\t/// @param tokenId id of token to query for\\n\\tfunction metadata(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (IBaseNFT.Metadata memory m);\\n\\n\\t/// @notice get attributes for token. Sent in attributes array.\\n\\t/// @param tokenId query for token id\\n\\tfunction getAttributes(uint256 tokenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string[] memory featureNames, uint256[] memory values);\\n\\n\\t/// @notice publicly available notice\\n\\tfunction exists(uint256 tokenId) external view returns (bool);\\n\\n\\t/// @notice set base metadata\\n\\t/// @param m see IBaseNFT.Metadata\\n\\t/// @param tokenId id of token to set for\\n\\t/// @dev should not be available to all. only Admin or Owner.\\n\\tfunction setMetadata(IBaseNFT.Metadata memory m, uint256 tokenId) external;\\n\\n\\t/// @notice mint in incremental order\\n\\t/// @param to address to send to.\\n\\t/// @dev only admin\\n\\tfunction mint(address to) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/BaseNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport './AccessControlWithUpdater.sol';\\nimport './interfaces/IBaseNFT.sol';\\n\\n/// @title BaseNFT\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Describes common functions.\\n/// @dev Base ERC721 contract for l1 and l2 SVG721\\nabstract contract BaseNFT is AccessControlWithUpdater, IBaseNFT {\\n\\tusing CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n\\tCountersUpgradeable.Counter public tokenIds;\\n\\n\\t/// @notice total features(attributes in Opensea) of the NFT.\\n\\tuint256 public numFeatures;\\n\\n\\t/// @dev when querying the token descriptor(for tokenURI) if indices are not set default ones are used. defaults to [0,3]\\n\\tuint256[2] public defaultIndices;\\n\\n\\t/// @notice names of features(attributes in Opensea) for an index\\n\\tmapping(uint256 => string) public featureNames;\\n\\t/// @notice values of features(attributes in Opensea) for an index\\n\\tmapping(uint256 => mapping(string => uint256)) public values;\\n\\n\\t/// @notice default value of all features. defaults to 1. check initialize.\\n\\tuint256 public defaultValue;\\n\\n\\t/// @notice saved metadata for a tokenId. Returns default name and description if not set.\\n\\tmapping(uint256 => Metadata) internal _metadata;\\n\\n\\t/// @notice query indices for image. Used to generate parts of SVG. defaults to defaultIndices\\n\\tmapping(uint256 => uint256[2]) internal _tokenIndices;\\n\\n\\t/// @notice address of tokenDescriptor which generates and stores the SVG and tokenURI for Protonaut.\\n\\taddress public tokenDescriptor;\\n\\n\\t/// @notice default name in metadata\\n\\tstring public defaultName;\\n\\n\\t/// @notice default description in metadata\\n\\tstring public defaultDescription;\\n\\n\\tevent SetNumFeatures(uint256 numFeatures);\\n\\tevent UpdateFeatures(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\tstring featureName,\\n\\t\\tuint256 oldValue,\\n\\t\\tuint256 newValue\\n\\t);\\n\\tevent SetTokenDescriptor(address tokenDescriptor);\\n\\tevent SetFeatureName(uint256 index, bytes32 name);\\n\\tevent SetTokenIndices(uint256 indexed tokenId, uint256 start, uint256 end);\\n\\n\\t/// @param __tokenDescriptor address\\n\\tfunction setTokenDescriptor(address __tokenDescriptor)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyAdmin\\n\\t{\\n\\t\\ttokenDescriptor = __tokenDescriptor;\\n\\t\\temit SetTokenDescriptor(tokenDescriptor);\\n\\t}\\n\\n\\t/// @param _defaultName string\\n\\t/// @param _defaultDescription string\\n\\tfunction setDefaults(\\n\\t\\tstring memory _defaultName,\\n\\t\\tstring memory _defaultDescription\\n\\t) public override onlyAdmin {\\n\\t\\tdefaultName = _defaultName;\\n\\t\\tdefaultDescription = _defaultDescription;\\n\\t}\\n\\n\\t/// @param _numFeatures number\\n\\tfunction setNumFeatures(uint256 _numFeatures) external override onlyAdmin {\\n\\t\\tnumFeatures = _numFeatures;\\n\\t\\temit SetNumFeatures(numFeatures);\\n\\t}\\n\\n\\t/// @param indices number[]\\n\\t/// @param _featureNames string[]\\n\\t/// @notice update name of attribute\\n\\tfunction setFeatureNameBatch(\\n\\t\\tuint256[] memory indices,\\n\\t\\tstring[] memory _featureNames\\n\\t) external override onlyAdmin {\\n\\t\\trequire(indices.length == _featureNames.length, 'Length mismatch');\\n\\t\\tfor (uint256 index = 0; index < _featureNames.length; index++) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tindices[index] < numFeatures,\\n\\t\\t\\t\\t'Index should be less than numFeatures'\\n\\t\\t\\t);\\n\\t\\t\\tfeatureNames[indices[index]] = _featureNames[index];\\n\\t\\t\\temit SetFeatureName(\\n\\t\\t\\t\\tindices[index],\\n\\t\\t\\t\\tkeccak256(bytes(_featureNames[index]))\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @param tokenId id of the token\\n\\t/// @param indices query indices for TokenDescriptor\\n\\tfunction setTokenIndices(uint256 tokenId, uint256[2] memory indices)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyUpdateAdmin\\n\\t{\\n\\t\\trequire(exists(tokenId), 'Query for non-existent token');\\n\\t\\t_tokenIndices[tokenId] = indices;\\n\\t\\temit SetTokenIndices(tokenId, indices[0], indices[1]);\\n\\t}\\n\\n\\t/// @param tokenId number\\n\\t/// @notice returns base metadata, name, desc. Returns default if none exist.\\n\\tfunction metadata(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (Metadata memory m)\\n\\t{\\n\\t\\trequire(exists(tokenId), 'Query for non-existent token');\\n\\t\\tm = _metadata[tokenId];\\n\\t\\tif (bytes(m.name).length > 0) {\\n\\t\\t\\treturn m;\\n\\t\\t} else {\\n\\t\\t\\treturn Metadata(defaultName, defaultDescription);\\n\\t\\t}\\n\\t}\\n\\n\\t// VIEW\\n\\t/// @notice total minted tokens.\\n\\t/// @dev warning doesn't take in account of burnt tokens as burn is disabled. Also, doesn't check locked in L1Tunnel.\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn tokenIds.current();\\n\\t}\\n\\n\\t/// @notice get attributes(features)\\n\\t/// @param tokenId id of the token\\n\\tfunction getAttributes(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string[] memory featureNamesArr, uint256[] memory valuesArr)\\n\\t{\\n\\t\\trequire(exists(tokenId), 'Query for non-existent token');\\n\\t\\tfeatureNamesArr = new string[](numFeatures);\\n\\t\\tvaluesArr = new uint256[](numFeatures);\\n\\n\\t\\tfor (uint256 i = 0; i < numFeatures; i++) {\\n\\t\\t\\tfeatureNamesArr[i] = featureNames[i];\\n\\t\\t\\tvaluesArr[i] = values[tokenId][featureNamesArr[i]];\\n\\t\\t\\tif (valuesArr[i] == 0) {\\n\\t\\t\\t\\tvaluesArr[i] = defaultValue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @param m Metadata\\n\\t/// @param tokenId id of the token\\n\\tfunction setMetadata(Metadata memory m, uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\tonlyAdmin\\n\\t{\\n\\t\\trequire(exists(tokenId), 'Query for non-existent token');\\n\\t\\t_metadata[tokenId] = m;\\n\\t}\\n\\n\\t///\\t@param _tokenIds tokenIds to update for\\n\\t///\\t@param _featureNames name of feature to update for\\n\\t///\\t@param _newValues new value for update\\n\\tfunction updateFeatureValueBatch(\\n\\t\\tuint256[] memory _tokenIds,\\n\\t\\tstring[] memory _featureNames,\\n\\t\\tuint256[] memory _newValues\\n\\t) public virtual override onlyUpdateAdmin {\\n\\t\\tfor (uint256 index = 0; index < _tokenIds.length; index++) {\\n\\t\\t\\trequire(exists(_tokenIds[index]), 'Query for non-existent token');\\n\\t\\t\\tuint256 oldValue = values[_tokenIds[index]][_featureNames[index]];\\n\\n\\t\\t\\tvalues[_tokenIds[index]][_featureNames[index]] = _newValues[index];\\n\\n\\t\\t\\temit UpdateFeatures(\\n\\t\\t\\t\\t_tokenIds[index],\\n\\t\\t\\t\\t_featureNames[index],\\n\\t\\t\\t\\toldValue,\\n\\t\\t\\t\\t_newValues[index]\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice get feature value for a feature name like feature(1,\\\"Health\\\")\\n\\t/// @param tokenId id of the token\\n\\t/// @param featureName name of feature\\n\\tfunction feature(uint256 tokenId, string memory featureName)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(exists(tokenId), 'Query for non-existent token');\\n\\t\\tif (values[tokenId][featureName] == 0) {\\n\\t\\t\\treturn defaultValue;\\n\\t\\t}\\n\\t\\treturn values[tokenId][featureName];\\n\\t}\\n\\n\\t/// @param _indices number[]\\n\\tfunction setDefaultIndices(uint256[2] memory _indices) external onlyAdmin {\\n\\t\\tdefaultIndices[0] = _indices[0];\\n\\t\\tdefaultIndices[1] = _indices[1];\\n\\t}\\n\\n\\t/// @param _value number. default to 1 in initializer.\\n\\tfunction setDefaultValuesForFeatures(uint256 _value) public onlyAdmin {\\n\\t\\tdefaultValue = _value;\\n\\t}\\n\\n\\t/// @param tokenId id of token\\n\\t/// @notice need to override in 721. Requires `ERC721._exists`\\n\\tfunction exists(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t\\t@dev space reserved for inheritance\\n\\t */\\n\\tuint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessControlWithUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport './AccessControlUpgradeable.sol';\\n\\n/// @title AccessControlWithUpdater\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Describes common functions.\\n/// @dev Multiple uses. Used for second admin access. Granted only to contract(?)\\ncontract AccessControlWithUpdater is AccessControlUpgradeable {\\n\\tmapping(address => bool) private _updateAdmins;\\n\\n\\tevent UpdateAccessSet(address indexed updateAdmin, bool enabled);\\n\\n\\t/// @notice add/remove update admin\\n\\t/// @param _updateAdmin address\\n\\t/// @param enabled set as Admin?\\n\\tfunction setUpdateAccess(address _updateAdmin, bool enabled)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_updateAdmins[_updateAdmin] = enabled;\\n\\t\\temit AdminAccessSet(_updateAdmin, enabled);\\n\\t}\\n\\n\\t/// @notice check update admin status\\n\\t/// @param _admin address\\n\\tfunction isUpdateAdmin(address _admin) public view returns (bool) {\\n\\t\\treturn _updateAdmins[_admin];\\n\\t}\\n\\n\\tmodifier onlyUpdateAdmin() {\\n\\t\\trequire(\\n\\t\\t\\tisUpdateAdmin(_msgSender()) ||\\n\\t\\t\\t\\tisAdmin(_msgSender()) ||\\n\\t\\t\\t\\t_msgSender() == owner(),\\n\\t\\t\\t'Caller does not have admin access'\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IBaseNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title IBaseNFT - Interface\\n/// @author CulturalSurround64<CulturalSurround64@gmail.com>(https://github.com/SurroundingArt64/)\\n/// @notice Describes common functions.\\n/// @dev Used in BaseNFT, SVG721 and L2_SVG721\\nabstract contract IBaseNFT {\\n\\t/** \\n\\t\\t@notice Stores Metadata for the NFT\\n\\t\\t@dev Stored in mapping of tokenId => Metadata. Defaults to defaultMetadata.\\n\\t */\\n\\tstruct Metadata {\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t}\\n\\n\\t/** \\n\\t\\t@notice tokenURI is fetched from token descriptor contract\\n\\t\\t@dev This is used to generate tokenURI on the fly\\n\\t \\t@param __tokenDescriptor address of token descriptor contract\\n\\t*/\\n\\tfunction setTokenDescriptor(address __tokenDescriptor) public virtual;\\n\\n\\t/** \\n\\t\\t@notice Sets default metadata name and description.\\n\\t\\t@param _defaultName default name field\\n\\t\\t@param _defaultDescription default description field\\n\\t*/\\n\\tfunction setDefaults(\\n\\t\\tstring memory _defaultName,\\n\\t\\tstring memory _defaultDescription\\n\\t) public virtual;\\n\\n\\t/**\\n\\t\\t@notice Set number of features\\n\\t\\t@param _numFeatures total features available\\n\\t*/\\n\\tfunction setNumFeatures(uint256 _numFeatures) external virtual;\\n\\n\\t/**\\n\\t\\t@notice set feature names for idx\\n\\t\\t@dev this should set after deployment and shouldn't be changes unless required or more are added.\\n\\t\\t@param indices index\\n\\t\\t@param _featureNames name of feature\\n\\t */\\n\\tfunction setFeatureNameBatch(\\n\\t\\tuint256[] memory indices,\\n\\t\\tstring[] memory _featureNames\\n\\t) external virtual;\\n\\n\\t/**\\n\\t\\t@notice values provided to tokenURI to get image data by SVG contract\\n\\t\\t@dev token index to query. If Image is at index 0 to 3, indices will be [0,3]\\n\\t\\t@dev Image data is too big to be stored in single transaction. So, multiple are required.\\n\\n\\t\\t@param tokenId token id for which to set\\n\\t\\t@param indices Values to query.\\n\\t */\\n\\tfunction setTokenIndices(uint256 tokenId, uint256[2] memory indices)\\n\\t\\tpublic\\n\\t\\tvirtual;\\n\\n\\t/**\\n\\t\\t@notice query the metadata for a tokenId. Returns name and symbol\\n\\n\\t\\t@param tokenId token id to query for\\n\\t\\t@return m Metadata {name and description}\\n\\t*/\\n\\tfunction metadata(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (Metadata memory m);\\n\\n\\t/**\\n\\t\\t@notice query the metadata for a tokenId. Returns name and symbol\\n\\n\\t\\t@param tokenId token id to query for\\n\\t\\t@return featureNamesArr list of features\\n\\t\\t@return valuesArr list of values for a given feature\\n\\t*/\\n\\tfunction getAttributes(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory featureNamesArr, uint256[] memory valuesArr);\\n\\n\\tfunction setMetadata(Metadata memory m, uint256 tokenId) public virtual;\\n\\n\\t/**\\n\\t\\t@notice update feature value\\n\\n\\t\\t@param _tokenIds tokenIds to update for\\n\\t\\t@param _featureNames name of feature to update for\\n\\t\\t@param _newValues new value for update \\n\\t */\\n\\tfunction updateFeatureValueBatch(\\n\\t\\tuint256[] memory _tokenIds,\\n\\t\\tstring[] memory _featureNames,\\n\\t\\tuint256[] memory _newValues\\n\\t) public virtual;\\n\\n\\t/**\\n\\t\\t@notice query the existence for a tokenId\\n\\t\\t\\n\\t\\t@param tokenId token id to query for\\n\\t\\t@return bool true if exists\\n\\t*/\\n\\tfunction exists(uint256 tokenId) public view virtual returns (bool);\\n\\n\\t/**\\n\\t\\t@dev space reserved\\n\\t */\\n\\tuint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"AdminAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Svg721\",\"outputs\":[{\"internalType\":\"contract ISVG721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Svg721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchaseLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"__admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchaseLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtonautSale", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}