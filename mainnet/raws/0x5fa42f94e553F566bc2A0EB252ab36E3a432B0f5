{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BlockInvaders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./ERC721OBI.sol\\\";\\r\\n\\r\\n//\\r\\n//\\r\\n//                              ///                                      \\r\\n//                           ////////                                    \\r\\n//                         /////////////                                 \\r\\n//                     //////////////////                               \\r\\n//                   ///////////////////////                            \\r\\n//                ////////////////////////////                          \\r\\n//    &&&&&&&&&     ////////////////////////     &&&&&&&&&&             \\r\\n//                     ///////////////////                              \\r\\n//      &&&&&&&&&&&      //////////////      &&&&&&&&&&&&               \\r\\n//      &&&&&&&&&&&&&&      /////////     &&&&&&&&&&&&&&&               \\r\\n//                &&&&&&      ////      &&&&&&&                         \\r\\n//                  &&&&&&&          &&&&&&&                            \\r\\n//            &&&&&    &&&&&&      &&&&&&&   &&&&&                      \\r\\n//               &&&&&   &&&&&&&&&&&&&&    &&&&&                        \\r\\n//                 &&&&&    &&&&&&&&&   &&&&&                           \\r\\n//                    &&&&&   &&&&    &&&&&                             \\r\\n//                      &&&&&      &&&&&                                \\r\\n//                         &&&&& &&&&&                                  \\r\\n//                           &&&&&&                                     \\r\\n//                             &&                                       \\r\\n//                                                                      \\r\\n//                                                                      \\r\\n//                      &&&     &&&&&    &&                             \\r\\n//                    &&   &&   &&   &&  &&                             \\r\\n//                   &&     &&  &&&&&&&  &&                             \\r\\n//                    &&   &&   &&&   && &&                             \\r\\n//                      &&&     &&&& &&  &&            \\r\\n//\\r\\n//========================================================================\\r\\n//  ONCHAIN BLOCK INVADERS - Mint contract\\r\\n\\r\\n\\r\\n\\r\\ninterface IMotherShip  {\\r\\n    function isMotherShip() external pure returns (bool);\\r\\n    function launchPad(uint256 tokenId,uint8 idx1,uint8 idx2,uint8 cnt1,uint8 cnt2 ) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract BlockInvaders is ERC721OBI, Ownable, ReentrancyGuard {\\r\\n    \\r\\n    struct globalConfigStruct {\\r\\n        uint8  skinIndex;\\r\\n        uint8  colorIndex;\\r\\n    }\\r\\n\\r\\n    globalConfigStruct globalConfig;\\r\\n    \\r\\n    //Mint Related\\r\\n    uint256 public constant MAX_PER_TX                   = 1;\\r\\n    uint256 public FOUNDERS_RESERVE_AMOUNT               = 250;\\r\\n    uint256 public constant MAX_SUPPLY                   = 9750;\\r\\n    uint256 private isMintPaused = 0;\\r\\n\\r\\n\\r\\n    //Accountability \\r\\n    //Future Skin and color Morph Mint\\r\\n    uint256 public MORPH_MINT_PRICE;\\r\\n    address obiAccount;\\r\\n    address artistAccount;\\r\\n    uint256 artistPercentage;\\r\\n    uint256 private morphMintPhase = 0;\\r\\n   \\r\\n    //white List\\r\\n    bytes32 public whiteListRoot;\\r\\n    mapping(address => uint256) private _addressToMinted; \\r\\n        \\r\\n    \\r\\n    //Mapping from token index to Address\\r\\n    //this will give the Token Owner the ability to switch betwen upgradable Contracts\\r\\n    mapping(uint256 =>address) private _tokenIndexToAddress;\\r\\n    \\r\\n    //Events \\r\\n    event ConnectedToMotherShip(address motherShipAddress);\\r\\n    event ContractPaused();\\r\\n    event ContractUnpaused();\\r\\n    event MintNewSkinPaused();\\r\\n    event MintNewSkinUnpaused();\\r\\n    event whiteListRootSet();\\r\\n    event mintPriceSet();\\r\\n\\r\\n\\r\\n//Implementation\\r\\n    constructor() ERC721OBI(\\\"Onchain Block Invaders\\\", \\\"OBI\\\") {\\r\\n        //initialize the collection\\r\\n        _mint(_msgSender(),0);\\r\\n    } \\r\\n\\r\\n// deployment related \\r\\n//===============================   \\r\\n    //Acknowledge contract is `BlockInvaders` :always true\\r\\n    function isBlockInvaders() external pure returns (bool) {return true;}\\r\\n    \\r\\n    \\r\\n    function setTeleporterAddress(address _motherShipAddress,uint8 _skinIndex,uint8 _indexColor) public onlyOwner {\\r\\n        \\r\\n        IMotherShip  motherShip = IMotherShip (_motherShipAddress);\\r\\n        // Verify that we have the appropriate address\\r\\n        require( motherShip.isMotherShip() );\\r\\n\\r\\n        //prepare the new skin and/or color pallete for morph mint\\r\\n        globalConfig.skinIndex    =  _skinIndex;\\r\\n        globalConfig.colorIndex   =  _indexColor;\\r\\n\\r\\n        //store the address of the mothership contract per skin\\r\\n        _tokenIndexToAddress[globalConfig.skinIndex] =  _motherShipAddress;\\r\\n\\r\\n        emit ConnectedToMotherShip(_tokenIndexToAddress[globalConfig.skinIndex]);\\r\\n    } \\r\\n\\r\\n    function getRenderingContract(uint256 skinIdx) public view returns (address) {\\r\\n        if (_tokenIndexToAddress[skinIdx] == address(0)) {\\r\\n            return address(0);\\r\\n        }\\r\\n        return _tokenIndexToAddress[skinIdx];\\r\\n    }\\r\\n\\r\\n    function getGlobalConfig() public view returns (address,uint8,uint8) {\\r\\n        return (_tokenIndexToAddress[globalConfig.skinIndex],globalConfig.skinIndex,globalConfig.colorIndex);\\r\\n    }\\r\\n\\r\\n// ERC721 related\\r\\n//===============================   \\r\\n\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view  returns (uint256 tokenId) {\\r\\n        require(index < balanceOf(owner), \\\"ERC721: owner index out of bounds\\\");\\r\\n        uint count;\\r\\n        for(uint i; i < _owners.length; i++){\\r\\n            if(owner == _owners[i].account){\\r\\n                if(count == index) return i;\\r\\n                else count++;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"ERC721: owner index out of bounds\\\");\\r\\n    }\\r\\n    \\r\\n    function isOwnerOf(address account, uint256[] calldata _tokenIds) external view returns (bool){\\r\\n        for(uint256 i; i < _tokenIds.length; ++i ){\\r\\n            if(_owners[_tokenIds[i]].account != account)\\r\\n                return false;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function getOwnerTokens(address owner) public view  returns (uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        if (tokenCount == 0) return new uint256[](0);\\r\\n  \\r\\n        uint256[] memory tokensId = new uint256[](tokenCount);\\r\\n     \\r\\n        uint k;\\r\\n        for(uint i; i < _owners.length; i++){\\r\\n            if(owner == _owners[i].account){\\r\\n                tokensId[k]=i;\\r\\n                k++;\\r\\n            }\\r\\n        }\\r\\n        return tokensId;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view  returns (uint256) {\\r\\n        return _owners.length;\\r\\n    }\\r\\n\\r\\n// Contract Actions\\r\\n//===============================   \\r\\n   \\r\\n    function unpauseMint(uint256 _mintType) public onlyOwner {\\r\\n        isMintPaused = _mintType;\\r\\n        emit ContractUnpaused();\\r\\n    }\\r\\n\\r\\n    function getMintPhase() public view returns (uint256) {\\r\\n        return isMintPaused;\\r\\n    }\\r\\n    \\r\\n    function unpauseMorph(uint256 _morphType) public onlyOwner {\\r\\n        morphMintPhase = _morphType;\\r\\n    }\\r\\n\\r\\n    function getMorphPhase() public view returns (uint256) {\\r\\n        return morphMintPhase;\\r\\n    }\\r\\n\\r\\n// merkleTree \\r\\n//===============================       \\r\\n    function _leaf(string memory allowance, string memory payload) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(payload, allowance));\\r\\n    }\\r\\n    \\r\\n    function _verify(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {\\r\\n        return MerkleProof.verify(proof, whiteListRoot, leaf);\\r\\n    }\\r\\n\\r\\n    function getAllowance(string memory allowance, bytes32[] calldata proof) public view returns (string memory) {\\r\\n        string memory payload = string(abi.encodePacked(_msgSender()));\\r\\n        require(_verify(_leaf(allowance, payload), proof), \\\"OBI: Merkle Tree proof supplied.\\\");\\r\\n        return allowance;\\r\\n    }\\r\\n\\r\\n    function setWhiteListRoot(bytes32 _whiteListRoot) external onlyOwner {\\r\\n        whiteListRoot = _whiteListRoot;\\r\\n        emit whiteListRootSet();\\r\\n    }\\r\\n\\r\\n// skins and chromas related\\r\\n//===============================   \\r\\n      \\r\\n    //1.returns the total number of skins or color for a given skin or color index [flag = 0 - skin, 1 - color]\\r\\n    function getMorphTotalSupply(uint8 id,uint256 flag) public view returns (uint256) {\\r\\n        require((id >=0) && (id<32), \\\"OBI: invalid ID.Should be [0-31].\\\");\\r\\n        uint256 k=0;\\r\\n        for(uint256 tknID = 0; tknID < _owners.length; tknID++){\\r\\n            uint32 bitmap = _owners[tknID].bitmap1;\\r\\n            if (flag == 1){\\r\\n                bitmap = _owners[tknID].bitmap2;\\r\\n            }\\r\\n            if( isBitSet(bitmap,id)==true ){\\r\\n                k++;\\r\\n            }\\r\\n        }\\r\\n        return k;\\r\\n    }\\r\\n    \\r\\n    //2.returns the active index for skins or color for a token, [flag = 0 - skin, 1 - color]\\r\\n    function getActiveMorphIdxByToken(uint256 tokenId,uint256 flag) public view returns (uint8){\\r\\n        require(tokenId < _owners.length, \\\"OBI: invalid token ID.\\\");\\r\\n        uint8 idx = _owners[tokenId].idx1;\\r\\n        if (flag == 1){\\r\\n                idx = _owners[tokenId].idx2;\\r\\n        }\\r\\n        return idx;\\r\\n    }\\r\\n    \\r\\n    //3.returns a list of active index for skins or color for a token list, [flag = 0 - skin, 1 - color]\\r\\n    function getActiveMorphIdxByTokenLst(uint256[] calldata tokensIdList,uint256 flag) public view returns (uint8[] memory){\\r\\n        uint8[] memory activeIdxList = new uint8[](tokensIdList.length);\\r\\n        for(uint256 id = 0; id < tokensIdList.length; id++){\\r\\n            uint256 tokenId = tokensIdList[id];\\r\\n            require(tokenId < _owners.length, \\\"OBI: invalid token ID.\\\");\\r\\n            activeIdxList[id] =  _owners[tokenId].idx1;\\r\\n            if (flag == 1){\\r\\n                activeIdxList[id] =  _owners[tokenId].idx2;\\r\\n            }\\r\\n        }\\r\\n        return activeIdxList;\\r\\n    }\\r\\n    \\r\\n    //4.returns the map of skins or color for a token, [flag = 0 - skin, 1 - color]\\r\\n    function getMorphMapByToken(uint256 tokenId,uint256 flag) public view returns (uint32){\\r\\n        require(tokenId < _owners.length, \\\"OBI: invalid token ID.\\\");\\r\\n        if (flag == 0){\\r\\n        return _owners[tokenId].bitmap1;\\r\\n        }\\r\\n        else{\\r\\n            return _owners[tokenId].bitmap2;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //5.returns a list of tokens that have the selected skin or color for a token list, [flag = 0 - skin, 1 - color]\\r\\n    function getOBIforIdx(uint256[] calldata tokensIdList,uint8 idx,uint256 flag) public view returns (uint256[] memory) {\\r\\n        require((idx >=0) && (idx<32), \\\"OBI: invalid IDX.Should be [0-31].\\\");\\r\\n        uint256 count=0;\\r\\n        for(uint256 id = 0; id < tokensIdList.length; id++)\\r\\n        {\\r\\n            uint256 tokenID = tokensIdList[id];\\r\\n            uint32 bitmap = _owners[tokenID].bitmap1;\\r\\n            if (flag == 1){\\r\\n                bitmap = _owners[tokenID].bitmap2;\\r\\n            }\\r\\n            if ( isBitSet(bitmap,idx) == true )\\r\\n            {\\r\\n                count ++;\\r\\n            }\\r\\n        }\\r\\n        uint256 k=0;\\r\\n        uint256[] memory tokenList = new uint256[](count);\\r\\n        for(uint256 id = 0; id < tokensIdList.length; id++){\\r\\n           uint256 tokenID = tokensIdList[id];\\r\\n           uint32 bitmap = _owners[tokenID].bitmap1;\\r\\n           if (flag == 1){\\r\\n                bitmap = _owners[tokenID].bitmap2;\\r\\n            }\\r\\n           if(isBitSet(bitmap,idx) ){\\r\\n                tokenList[k] = tokenID;\\r\\n                k++;\\r\\n           }\\r\\n        }\\r\\n        return tokenList;\\r\\n    }\\r\\n\\r\\n    //6.returns the list skins owned by token \\r\\n    function getOBISkinListByToken(uint256 tokenId) public view returns (uint8[] memory) {\\r\\n        require(tokenId < _owners.length, \\\"OBI: invalid token id.\\\");\\r\\n        uint32 count=countSetBits(_owners[tokenId].bitmap1);\\r\\n        uint8[] memory skinList = new uint8[](count);\\r\\n        uint8 k = 0;\\r\\n        for(uint8 i=0; i <32; i++) {\\r\\n            if(isBitSet(_owners[tokenId].bitmap1,i)){\\r\\n                skinList[k] = i;\\r\\n                k++;\\r\\n            }\\r\\n        }\\r\\n        return skinList;\\r\\n    }\\r\\n\\r\\n    //7.returns the list of colors owned by token \\r\\n    function getOBIColorListByToken(uint256 tokenId) public view returns (uint8[] memory) {\\r\\n        require(tokenId < _owners.length, \\\"OBI: invalid token id.\\\");\\r\\n        uint32 count=countSetBits(_owners[tokenId].bitmap2);\\r\\n        uint8[] memory colorList = new uint8[](count);\\r\\n        uint8 k = 0;\\r\\n        for(uint8 i=0; i <32; i++) {\\r\\n            if(isBitSet(_owners[tokenId].bitmap2,i)){\\r\\n                colorList[k] = i;\\r\\n                k++;\\r\\n            }\\r\\n        }\\r\\n        return colorList;\\r\\n    }\\r\\n\\r\\n    //Strict Validation for payed Mint\\r\\n    function _validateMorphList(uint256[] calldata tokensIdList) internal view  {\\r\\n        for(uint256 id; id < tokensIdList.length; id++){\\r\\n            uint256 tokenID = tokensIdList[id];\\r\\n            require(tokenID < _owners.length, \\\"OBI: invalid token id\\\");\\r\\n            require(msg.sender == _owners[tokenID].account, \\\"OBI: You are not the owner of one of the OBI.\\\");\\r\\n            \\r\\n            bool hasSkin = isBitSet(_owners[tokenID].bitmap1,globalConfig.skinIndex);\\r\\n            bool hasColor= isBitSet(_owners[tokenID].bitmap2,globalConfig.colorIndex);\\r\\n            require( ( hasSkin == false) || (hasColor == false), \\\"OBI: One of the OBI is already Morph Minted.\\\");\\r\\n        }\\r\\n    }\\r\\n    //Light Validation for free Mint,morph transform\\r\\n    function _validateLightMorphList(uint256[] calldata tokensIdList) internal view  {\\r\\n        uint256 count = 0;\\r\\n        for(uint256 id; id < tokensIdList.length; id++){\\r\\n            uint256 tokenID = tokensIdList[id];\\r\\n            require(tokenID < _owners.length, \\\"OBI: invalid token id\\\");\\r\\n            require(msg.sender == _owners[tokenID].account, \\\"OBI: You are not the owner of one of the OBI.\\\");\\r\\n\\r\\n            bool hasSkin = isBitSet(_owners[tokenID].bitmap1,globalConfig.skinIndex);\\r\\n            bool hasColor= isBitSet(_owners[tokenID].bitmap2,globalConfig.colorIndex);\\r\\n            if ( ( hasSkin == true) && (hasColor == true))\\r\\n            {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        require(  count < tokensIdList.length , \\\"OBI: All the OBIs are up to date\\\");\\r\\n    }\\r\\n\\r\\n    function _updateMorphList(uint256[] calldata tokensIdList) internal   {\\r\\n        for(uint256 id; id < tokensIdList.length; id++){\\r\\n            uint256 tokenID = tokensIdList[id];\\r\\n            //update skin if owner does not have it already\\r\\n            if ( isBitSet(_owners[tokenID].bitmap1,globalConfig.skinIndex) == false ){\\r\\n                _owners[tokenID].cnt1 ++;\\r\\n                _owners[tokenID].bitmap1 = setBit(_owners[tokenID].bitmap1, globalConfig.skinIndex);\\r\\n            }\\r\\n                _owners[tokenID].idx1 =  globalConfig.skinIndex;\\r\\n            //update skin if owner does not have it already\\r\\n            if ( isBitSet(_owners[tokenID].bitmap2,globalConfig.colorIndex) == false ){\\r\\n                _owners[tokenID].cnt2 ++;\\r\\n                _owners[tokenID].bitmap2 = setBit(_owners[tokenID].bitmap2, globalConfig.colorIndex);\\r\\n            }\\r\\n               _owners[tokenID].idx2 = globalConfig.colorIndex;\\r\\n        }\\r\\n    }\\r\\n   \\r\\n    //change the owned Skins or owned Colors for OBI\\r\\n    function morphOBI(uint256[] calldata tokensIdList,uint8 skinNr,uint8 colorNr) public {\\r\\n       //validation\\r\\n       require((skinNr >=0) && (skinNr<32), \\\"OBI: invalid skinNr.Value must be between [0-31]\\\");\\r\\n       require((colorNr >=0) && (colorNr<32), \\\"OBI: invalid colorNr.Value must be between [0-31]\\\");\\r\\n       \\r\\n       //Validate Morph\\r\\n       for(uint256 id; id < tokensIdList.length; id++){\\r\\n        uint256 tokenID = tokensIdList[id];\\r\\n        require(tokenID < _owners.length, \\\"OBI: invalid token id\\\");\\r\\n        require(msg.sender == _owners[tokenID].account, \\\"OBI: You ar e not the owner of one of the OBI\\\");\\r\\n       } \\r\\n       //Morph the OBIS\\r\\n       for(uint256 id; id < tokensIdList.length; id++){\\r\\n            uint256 tokenID = tokensIdList[id];\\r\\n            //update skin if you own it\\r\\n            if ( isBitSet(_owners[tokenID].bitmap1,skinNr) == true ){\\r\\n                if ( _owners[tokenID].idx1 != skinNr){ //check if not already set,maybe save some gas\\r\\n                  _owners[tokenID].idx1 =skinNr;\\r\\n                }\\r\\n            }\\r\\n            //update color if you own it\\r\\n            if ( isBitSet(_owners[tokenID].bitmap2,colorNr) == true ){\\r\\n                if ( _owners[tokenID].idx2 != colorNr){ //check if not already set,maybe save some gas\\r\\n                _owners[tokenID].idx2 = colorNr;\\r\\n                }\\r\\n            }\\r\\n       }\\r\\n    }\\r\\n//OBI Mint\\r\\n//=============================== \\r\\n    \\r\\n    function mintWhitelist(uint256 _count, uint256 allowance, bytes32[] calldata proof) external nonReentrant {\\r\\n        require(isMintPaused == 1, \\\"OBI List Mint is not active\\\");\\r\\n        string memory payload = string(abi.encodePacked(_msgSender()));\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        require(_totalSupply + _count <= MAX_SUPPLY, \\\"OBI: All OBIs have been minted.\\\");\\r\\n        require(_verify(_leaf(Strings.toString(allowance), payload), proof), \\\"OBI:Your are not on the OBI List.\\\");\\r\\n        require(_count > 0 && _addressToMinted[_msgSender()] + _count <= allowance, \\\"OBI:Exceeds OBIList supply\\\"); \\r\\n        require(msg.sender == tx.origin);\\r\\n        \\r\\n        _addressToMinted[_msgSender()] += _count;\\r\\n\\r\\n        for(uint i=0; i < _count; i++) { \\r\\n            _mint(_msgSender(), _totalSupply + i);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //mint only 1 OBI per Wallet on Public Mint\\r\\n    function mintPublic() external nonReentrant   {\\r\\n        \\r\\n        require(isMintPaused == 2, \\\"OBI: Public Mint is not active\\\");\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        require(_totalSupply + 1 <= MAX_SUPPLY, \\\"OBI: All OBIs have been minted.\\\");\\r\\n        require(msg.sender == tx.origin);\\r\\n        \\r\\n        uint256 _ownedCount = balanceOf(_msgSender());\\r\\n        require(_ownedCount < ( _addressToMinted[_msgSender()]+ 1 ), \\\"OBI: Exceeds max OBIs per wallet.\\\");\\r\\n             \\r\\n        _mint(_msgSender(), _totalSupply);\\r\\n        \\r\\n    }\\r\\n\\r\\n    //only allowed for OBI Founders to mint according to the FOUNDERS_RESERVE_AMOUNT\\r\\n    //this supply will be allocated equaly to each OBI Founder\\r\\n    //or some part of the supply will be used for giveaways\\r\\n    function mintDev(uint256 tknQuantity)  external onlyOwner nonReentrant {\\r\\n            require(tknQuantity <= FOUNDERS_RESERVE_AMOUNT, \\\"OBI:more tokens requested than founders reserve\\\");\\r\\n            uint256 _totalSupply = totalSupply();\\r\\n            FOUNDERS_RESERVE_AMOUNT -= tknQuantity;\\r\\n            for(uint256 i=0; i < tknQuantity; i++)\\r\\n                _mint(_msgSender(),_totalSupply + i);\\r\\n    }\\r\\n\\r\\n    \\r\\n    //------------------------------------\\r\\n    //The Mint and Morph can be called only by the owner of the token\\r\\n    //------------------------------------\\r\\n    \\r\\n    //OBI 0 will be minted only by OBI Team.\\r\\n    //And it is used to show case future skins and color palettes.\\r\\n    function mintOBIZeroMorph() public onlyOwner {\\r\\n            \\r\\n            //update skin\\r\\n            if ( isBitSet(_owners[0].bitmap1,globalConfig.skinIndex) == false ){\\r\\n                _owners[0].cnt1 ++;\\r\\n                _owners[0].bitmap1 = setBit(_owners[0].bitmap1, globalConfig.skinIndex);\\r\\n            }\\r\\n            _owners[0].idx1 = globalConfig.skinIndex;\\r\\n            //update color \\r\\n            if ( isBitSet(_owners[0].bitmap1,globalConfig.colorIndex) == false ){\\r\\n                _owners[0].cnt2 ++;\\r\\n                _owners[0].bitmap2 = setBit(_owners[0].bitmap2, globalConfig.colorIndex);\\r\\n            }\\r\\n            _owners[0].idx2 = globalConfig.colorIndex;\\r\\n    }\\r\\n  \\r\\n    //free Mint\\r\\n    function mintFreeOBIMorph(uint256[] calldata tokenIdList) public  {\\r\\n        require(msg.sender == tx.origin);\\r\\n        require(morphMintPhase == 1, \\\"OBI: Free OBI Morph is not active\\\");\\r\\n\\r\\n        _validateLightMorphList(tokenIdList);\\r\\n        _updateMorphList(tokenIdList);\\r\\n    }\\r\\n\\r\\n    function mintFreeOBIListMorph(uint256[] calldata tokenIdList,bytes32[] calldata proof) public  {\\r\\n        require(msg.sender == tx.origin);\\r\\n        require(morphMintPhase == 2, \\\"OBI: Free OBIList Morph is not active\\\");\\r\\n        bytes memory payload = abi.encodePacked(_msgSender());\\r\\n        require(_verify(keccak256(payload), proof), \\\"OBI: Your are not on the OBIList.\\\");\\r\\n\\r\\n        _validateLightMorphList(tokenIdList);\\r\\n        _updateMorphList(tokenIdList);\\r\\n    }\\r\\n\\r\\n    function mintOBIMorph(uint256[] calldata tokenIdList) public payable  {\\r\\n        require(msg.sender == tx.origin);\\r\\n        require(morphMintPhase == 3, \\\"OBI: OBI Morph is not active\\\");\\r\\n        require(tokenIdList.length * MORPH_MINT_PRICE == msg.value, \\\"OBI: Invalid funds provided.\\\");\\r\\n         \\r\\n         //avoid to pay in case Obi already minted \\r\\n        _validateMorphList(tokenIdList);    \\r\\n        _updateMorphList(tokenIdList);\\r\\n    }\\r\\n    \\r\\n    function mintOBIListMorph(uint256[] calldata tokenIdList,bytes32[] calldata proof) public payable  {\\r\\n        require(msg.sender == tx.origin);\\r\\n        require(morphMintPhase == 4, \\\"OBI: OBILIST Morph is not active\\\");\\r\\n        require(tokenIdList.length * MORPH_MINT_PRICE == msg.value, \\\"OBI: Invalid funds provided.\\\");\\r\\n        bytes memory payload = abi.encodePacked(_msgSender());\\r\\n        require(_verify(keccak256(payload), proof), \\\"OBI: Your are not on the OBIList.\\\");\\r\\n        \\r\\n        //avoid to pay in case Obi already minted \\r\\n        _validateMorphList(tokenIdList);    \\r\\n        _updateMorphList(tokenIdList);\\r\\n    }\\r\\n    \\r\\n    //give a skin or pallete to a friend\\r\\n    function mintGiveawayMorph(uint256[] calldata tokenIdList) public payable  {\\r\\n        require(msg.sender == tx.origin);\\r\\n        require(morphMintPhase == 5 , \\\"OBI: OBI Giveaway Morph is not active\\\");\\r\\n        require(tokenIdList.length * MORPH_MINT_PRICE == msg.value, \\\"OBI: Invalid funds provided.\\\");\\r\\n         \\r\\n         //avoid to pay in case Obi already minted \\r\\n        for(uint256 id; id < tokenIdList.length; id++){\\r\\n            uint256 tokenID = tokenIdList[id];\\r\\n            require(tokenID < _owners.length, \\\"OBI: invalid token id\\\");\\r\\n\\r\\n            bool hasSkin = isBitSet(_owners[tokenID].bitmap1,globalConfig.skinIndex);\\r\\n            bool hasColor= isBitSet(_owners[tokenID].bitmap2,globalConfig.colorIndex);\\r\\n            require( ( hasSkin == false) || (hasColor == false), \\\"OBI: One of the OBI is already Morph Minted\\\");\\r\\n        }    \\r\\n        \\r\\n        for(uint256 id; id < tokenIdList.length; id++){\\r\\n            uint256 tokenID = tokenIdList[id];\\r\\n            //update skin if owner does not have it already\\r\\n            if ( isBitSet(_owners[tokenID].bitmap1,globalConfig.skinIndex) == false ){\\r\\n                _owners[tokenID].cnt1 ++;\\r\\n                _owners[tokenID].bitmap1 = setBit(_owners[tokenID].bitmap1, globalConfig.skinIndex);\\r\\n            }\\r\\n            //update skin if owner does not have it already\\r\\n            if ( isBitSet(_owners[tokenID].bitmap2,globalConfig.colorIndex) == false ){\\r\\n                _owners[tokenID].cnt2 ++;\\r\\n                _owners[tokenID].bitmap2 = setBit(_owners[tokenID].bitmap2, globalConfig.colorIndex);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n  //=============================== \\r\\n    receive() external payable {}\\r\\n    \\r\\n    function setupMorphMint(uint256 _price,address account1,address account2,uint256 percentage) public onlyOwner {\\r\\n        obiAccount = account1;\\r\\n        artistAccount = account2;\\r\\n        artistPercentage = percentage;\\r\\n        MORPH_MINT_PRICE = _price;\\r\\n    }\\r\\n    \\r\\n    function getMorphMintConfig() public view onlyOwner returns (uint256,address,address,uint256){\\r\\n        return (MORPH_MINT_PRICE,obiAccount,artistAccount,artistPercentage);\\r\\n    }\\r\\n    \\r\\n    //function to return the price\\r\\n    function getMintPrice() public view returns (uint256) {\\r\\n        return MORPH_MINT_PRICE;\\r\\n    }\\r\\n   \\r\\n    \\r\\n    function withdrawAllAdmin() public payable onlyOwner {\\r\\n        require(payable(msg.sender).send(address(this).balance));\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public payable onlyOwner {\\r\\n        uint256 totalBalance  = address(this).balance;\\r\\n        uint256 _artistBalance = totalBalance * artistPercentage/100;\\r\\n        uint256 _obiBalance = totalBalance - _artistBalance;\\r\\n        require(payable(artistAccount).send(_artistBalance));\\r\\n        require(payable(obiAccount).send(_obiBalance));\\r\\n    }\\r\\n\\r\\n//===============================   \\r\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(_tokenId), \\\"OBI:URI query for nonexistent OBI.\\\");\\r\\n        if (_tokenIndexToAddress[_owners[_tokenId].idx1] == address(0)) {\\r\\n            return '';\\r\\n        }\\r\\n        IMotherShip  motherShip = IMotherShip (_tokenIndexToAddress[_owners[_tokenId].idx1]);\\r\\n        return motherShip.launchPad(_tokenId,_owners[_tokenId].idx1,_owners[_tokenId].idx2,_owners[_tokenId].cnt1,_owners[_tokenId].cnt2);     \\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/ERC721OBI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n//The ERC721OBI Contract is a modification of the ERC721 standard contract.\\r\\n//Added features to the ERC721 contract :\\r\\n//Support for upgradable and modular mint/render contracts\\r\\n//Gas optimization for minting,skin mint,color pallets mint,color,pallets change\\r\\n\\r\\ncontract ERC721OBI is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n    \\r\\n   struct _contractStruct {\\r\\n        uint8 idx1;\\r\\n        uint8 idx2;\\r\\n        uint8 cnt1;\\r\\n        uint8 cnt2;\\r\\n        uint32 bitmap1;\\r\\n        uint32 bitmap2;\\r\\n        address account;\\r\\n    }\\r\\n    \\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    \\r\\n\\r\\n    //OBI: Mapping from token ID to owner address\\r\\n    _contractStruct[] internal _owners;\\r\\n\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    // util\\r\\n//===============================   \\r\\n\\r\\n    function isBitSet( uint32 _packedBits,uint8 _bitPos) internal pure  returns (bool){\\r\\n        uint32 flag = (_packedBits >> _bitPos) & uint32(1);\\r\\n        return (flag == 1 ? true : false);\\r\\n    }\\r\\n    \\r\\n    function setBit( uint32 _packedBits,uint8 _bitPos)  internal pure  returns (uint32){\\r\\n        return _packedBits | uint32(1) << _bitPos;\\r\\n    }\\r\\n\\r\\n    function  countSetBits(uint32 _num)  internal pure  returns (uint32)\\r\\n    {\\r\\n     uint32 count = 0;\\r\\n     while (_num > 0) {\\r\\n            count = count + (_num & 1); // num&1 => it gives either 0 or 1\\r\\n            _num = _num >> 1;\\t// bitwise rightshift \\r\\n        }\\r\\n    return count;\\r\\n}\\r\\n    \\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) \\r\\n        public \\r\\n        view \\r\\n        virtual \\r\\n        override \\r\\n        returns (uint) \\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        uint count;\\r\\n        for( uint i; i < _owners.length; ++i ){\\r\\n          if( owner == _owners[i].account )\\r\\n            ++count;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        address owner = _owners[tokenId].account;\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721: owner query for nonexistent token\\\"\\r\\n        );\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721OBI.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return tokenId < _owners.length && _owners[tokenId].account != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        address owner = ERC721OBI.ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            getApproved(tokenId) == spender ||\\r\\n            isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _contractStruct memory tokenData;\\r\\n        tokenData.account = to;\\r\\n        tokenData.idx1 = 0;\\r\\n        tokenData.idx2 = 0;\\r\\n        tokenData.bitmap1 = 1;\\r\\n        tokenData.bitmap2 = 1;\\r\\n        tokenData.cnt1 = 1;\\r\\n        tokenData.cnt2 = 1;\\r\\n        _owners.push(tokenData);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721OBI.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n        _owners[tokenId].account = address(0);\\r\\n         delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            ERC721OBI.ownerOf(tokenId) == from,\\r\\n            \\\"ERC721: transfer of token that is not own\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n        _owners[tokenId].account = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721OBI.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    _msgSender(),\\r\\n                    from,\\r\\n                    tokenId,\\r\\n                    _data\\r\\n                )\\r\\n            returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\r\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n                    );\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"motherShipAddress\",\"type\":\"address\"}],\"name\":\"ConnectedToMotherShip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintNewSkinPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintNewSkinUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"mintPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"whiteListRootSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOUNDERS_RESERVE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPH_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getActiveMorphIdxByToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getActiveMorphIdxByTokenLst\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"allowance\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getMorphMapByToken\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMorphMintConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMorphPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getMorphTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOBIColorListByToken\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOBISkinListByToken\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"idx\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"getOBIforIdx\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skinIdx\",\"type\":\"uint256\"}],\"name\":\"getRenderingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlockInvaders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tknQuantity\",\"type\":\"uint256\"}],\"name\":\"mintDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintFreeOBIListMorph\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"mintFreeOBIMorph\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"mintGiveawayMorph\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintOBIListMorph\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"mintOBIMorph\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintOBIZeroMorph\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"skinNr\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"colorNr\",\"type\":\"uint8\"}],\"name\":\"morphOBI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_motherShipAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_skinIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_indexColor\",\"type\":\"uint8\"}],\"name\":\"setTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whiteListRoot\",\"type\":\"bytes32\"}],\"name\":\"setWhiteListRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setupMorphMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintType\",\"type\":\"uint256\"}],\"name\":\"unpauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_morphType\",\"type\":\"uint256\"}],\"name\":\"unpauseMorph\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BlockInvaders", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}