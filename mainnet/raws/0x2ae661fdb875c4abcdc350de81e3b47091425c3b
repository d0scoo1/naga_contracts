{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/XNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./interface/IP2Controller.sol\\\";\\r\\nimport \\\"./interface/IXToken.sol\\\";\\r\\nimport \\\"./library/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/IXAirDrop.sol\\\";\\r\\nimport \\\"./interface/IPunks.sol\\\";\\r\\nimport \\\"./interface/IWrappedPunks.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract XNFT is  IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable, Initializable{\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 internal constant RATE_UPPER_LIMIT = 1e18;\\r\\n    address internal constant ADDRESS_ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    enum OrderState{\\r\\n        NOPLEDGE,\\r\\n        PLEDGEING,\\r\\n        LIQUIDITYING,\\r\\n        NORMALWITHDRAW,\\r\\n        LIQUIDITYWITHDRAW,\\r\\n        REDEEMPROTECTION,\\r\\n        LIQUIDITYEND\\r\\n    }\\r\\n\\r\\n    address public admin;\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    IP2Controller public controller;\\r\\n\\r\\n    struct Order{\\r\\n        address pledger;\\r\\n        address collection;\\r\\n        uint256 tokenId;\\r\\n        uint256 nftType;\\r\\n        bool isWithdraw;\\r\\n    }\\r\\n    mapping (uint256 => Order) public allOrders;\\r\\n\\r\\n    struct LiquidatedOrder{\\r\\n        address liquidator;\\r\\n        uint256 liquidatedPrice;\\r\\n        address xToken;\\r\\n        uint256 liquidatedStartTime;\\r\\n        address auctionAccount;\\r\\n        uint256 auctionPrice;\\r\\n        bool isPledgeRedeem;\\r\\n        address auctionWinner;\\r\\n    }\\r\\n    mapping(uint256 => LiquidatedOrder) public allLiquidatedOrder;\\r\\n\\r\\n    struct CollectionNFT{\\r\\n        bool isCollectionWhiteList;\\r\\n        uint256 auctionDuration;\\r\\n        uint256 redeemProtection;\\r\\n        uint256 increasingMin;\\r\\n    }\\r\\n    mapping (address => CollectionNFT) public collectionWhiteList;\\r\\n    uint256 public counter;\\r\\n\\r\\n    uint256 public auctionDurationOverAll;\\r\\n    uint256 public redeemProtectionOverAll;\\r\\n    uint256 public increasingMinOverAll;\\r\\n\\r\\n    uint256 public pledgerFineRate;\\r\\n    uint256 public rewardFirstRate;\\r\\n    uint256 public rewardLastRate;\\r\\n    uint256 public compensatePledgerRate;\\r\\n\\r\\n    uint256 public transferEthGasCost;\\r\\n\\r\\n    mapping(uint256 => bool) public pausedMap;\\r\\n\\r\\n    IXAirDrop public xAirDrop;\\r\\n\\r\\n    mapping(address => uint256[]) public ordersMap;\\r\\n\\r\\n    IPunks public punks;\\r\\n    IWrappedPunks public wrappedPunks;\\r\\n    address public userProxy;\\r\\n\\r\\n    mapping(address => uint256) public addUpIncomeMap;\\r\\n\\r\\n    event Pledge(address collection, uint256 tokenId, uint256 orderId, address indexed pledger);\\r\\n    event WithDraw(address collection, uint256 tokenId, uint256 orderId, address indexed pledger, address indexed receiver);\\r\\n    event PledgeAdvanceRedeem(address account, address xToken, uint256 orderId, uint256 amount);\\r\\n    event AuctionNFT(uint256 orderId, address xToken, address account, uint256 amount, bool isProtection);\\r\\n    event AirDrop(address xAirDrop, address msgSender, address receiver, address collection, uint256 tokenId);\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        admin = msg.sender;\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable{}\\r\\n\\r\\n    function pledgeAndBorrow(address _collection, uint256 _tokenId, uint256 _nftType, address xToken, uint256 borrowAmount) external nonReentrant {\\r\\n        uint256 orderId = pledgeInternal(_collection, _tokenId, _nftType);\\r\\n        IXToken(xToken).borrow(orderId, payable(msg.sender), borrowAmount);\\r\\n    }\\r\\n\\r\\n    function pledge(address _collection, uint256 _tokenId, uint256 _nftType) external nonReentrant{\\r\\n        pledgeInternal(_collection, _tokenId, _nftType);\\r\\n    }\\r\\n\\r\\n    function pledge721(address _collection, uint256 _tokenId) external nonReentrant{\\r\\n        pledgeInternal(_collection, _tokenId, 721);\\r\\n    }\\r\\n\\r\\n    function pledge1155(address _collection, uint256 _tokenId) external nonReentrant{\\r\\n        pledgeInternal(_collection, _tokenId, 1155);\\r\\n    }\\r\\n\\r\\n    function pledgeInternal(address _collection, uint256 _tokenId, uint256 _nftType) internal whenNotPaused(1) returns(uint256){\\r\\n        require(_nftType == 721 || _nftType == 1155, \\\"don't support this nft type\\\");\\r\\n        if(_collection != address(punks)){\\r\\n            transferNftInternal(msg.sender, address(this), _collection, _tokenId, _nftType);\\r\\n        }else{\\r\\n            _depositPunk(_tokenId);\\r\\n            _collection = address(wrappedPunks);\\r\\n        }\\r\\n        require(collectionWhiteList[_collection].isCollectionWhiteList, \\\"collection not insist\\\");\\r\\n\\r\\n        counter = counter.add(1);\\r\\n        uint256 _orderId = counter;\\r\\n        Order storage _order = allOrders[_orderId];\\r\\n        _order.collection = _collection;\\r\\n        _order.tokenId = _tokenId;\\r\\n        _order.nftType = _nftType;\\r\\n        _order.pledger = msg.sender;\\r\\n\\r\\n        ordersMap[msg.sender].push(counter);\\r\\n\\r\\n        emit Pledge(_collection, _tokenId, _orderId, msg.sender);\\r\\n        return _orderId;\\r\\n    }\\r\\n\\r\\n    function auctionAllowed(address pledger, address auctioneer, address _collection, uint256 liquidatedStartTime, uint256 lastPrice, uint256 amount) internal view returns(bool){\\r\\n        uint256 _auctionDuration;\\r\\n        uint256 _redeemProtection;\\r\\n        uint256 _increasingMin;\\r\\n        CollectionNFT memory collectionNFT = collectionWhiteList[_collection];\\r\\n        if(collectionNFT.auctionDuration != 0 && collectionNFT.redeemProtection != 0 && collectionNFT.increasingMin != 0){\\r\\n            _auctionDuration = collectionNFT.auctionDuration;\\r\\n            _redeemProtection = collectionNFT.redeemProtection;\\r\\n            _increasingMin = collectionNFT.increasingMin;\\r\\n        }else{\\r\\n            _auctionDuration = auctionDurationOverAll;\\r\\n            _redeemProtection = redeemProtectionOverAll;\\r\\n            _increasingMin = increasingMinOverAll;\\r\\n        }\\r\\n        require(block.timestamp < liquidatedStartTime.add(_auctionDuration), \\\"auction time has passed\\\");\\r\\n        if(pledger == auctioneer && block.timestamp < liquidatedStartTime.add(_redeemProtection)){\\r\\n            return true;\\r\\n        }else{\\r\\n            require(amount >= lastPrice.add(lastPrice.mul(_increasingMin).div(1e18)), \\\"do not meet the minimum mark up\\\");\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function auction(uint256 orderId, uint256 amount) payable external nonReentrant whenNotPaused(3){\\r\\n        require(isOrderLiquidated(orderId), \\\"this order is not a liquidation order\\\");\\r\\n        LiquidatedOrder storage liquidatedOrder = allLiquidatedOrder[orderId];\\r\\n        require(liquidatedOrder.auctionWinner == address(0), \\\"the order has been withdrawn\\\");\\r\\n        require(!liquidatedOrder.isPledgeRedeem, \\\"redeemed by the pledgor\\\");\\r\\n        Order storage _order = allOrders[orderId];\\r\\n        if(IXToken(liquidatedOrder.xToken).underlying() == ADDRESS_ETH){\\r\\n            amount = msg.value;\\r\\n        }\\r\\n        uint256 price;\\r\\n        if(liquidatedOrder.auctionAccount == address(0)){\\r\\n            price = liquidatedOrder.liquidatedPrice;\\r\\n        }else{\\r\\n            price = liquidatedOrder.auctionPrice;\\r\\n        }\\r\\n\\r\\n        bool isPledger = auctionAllowed(_order.pledger, msg.sender, _order.collection, liquidatedOrder.liquidatedStartTime, price, amount);\\r\\n\\r\\n        if(isPledger){\\r\\n            uint256 fine = price.mul(pledgerFineRate).div(1e18);\\r\\n            uint256 _amount = liquidatedOrder.liquidatedPrice.add(fine);\\r\\n            doTransferIn(liquidatedOrder.xToken, payable(msg.sender), _amount);\\r\\n            uint256 rewardFirst = fine.mul(rewardFirstRate).div(1e18);\\r\\n            if(liquidatedOrder.auctionAccount != address(0)){\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.liquidator), rewardFirst);\\r\\n                uint256 rewardLast = fine.mul(rewardLastRate).div(1e18);\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.auctionAccount), (rewardLast + liquidatedOrder.auctionPrice));\\r\\n\\r\\n                addUpIncomeMap[liquidatedOrder.xToken] = addUpIncomeMap[liquidatedOrder.xToken] + (fine - rewardFirst - rewardLast);\\r\\n            }else{\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.liquidator), (liquidatedOrder.liquidatedPrice + rewardFirst));\\r\\n\\r\\n                addUpIncomeMap[liquidatedOrder.xToken] = addUpIncomeMap[liquidatedOrder.xToken] + (fine - rewardFirst);\\r\\n            }\\r\\n            transferNftInternal(address(this), msg.sender, _order.collection, _order.tokenId, _order.nftType);\\r\\n            _order.isWithdraw = true;\\r\\n            liquidatedOrder.isPledgeRedeem = true;\\r\\n            liquidatedOrder.auctionWinner = msg.sender;\\r\\n            liquidatedOrder.auctionAccount = msg.sender;\\r\\n            liquidatedOrder.auctionPrice = _amount;\\r\\n\\r\\n            emit AuctionNFT(orderId, liquidatedOrder.xToken, msg.sender, amount, true);\\r\\n            emit WithDraw(_order.collection, _order.tokenId, orderId, _order.pledger, msg.sender);\\r\\n        }else{\\r\\n            doTransferIn(liquidatedOrder.xToken, payable(msg.sender), amount);\\r\\n            if(liquidatedOrder.auctionAccount == address(0)){\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.liquidator), liquidatedOrder.liquidatedPrice);\\r\\n            }else{\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.auctionAccount), liquidatedOrder.auctionPrice);\\r\\n            }\\r\\n\\r\\n            liquidatedOrder.auctionAccount = msg.sender;\\r\\n            liquidatedOrder.auctionPrice = amount;\\r\\n            \\r\\n            emit AuctionNFT(orderId, liquidatedOrder.xToken, msg.sender, amount, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawNFT(uint256 orderId) external nonReentrant whenNotPaused(2){\\r\\n        LiquidatedOrder storage liquidatedOrder = allLiquidatedOrder[orderId];\\r\\n        Order storage _order = allOrders[orderId];\\r\\n        if(isOrderLiquidated(orderId)){\\r\\n            require(liquidatedOrder.auctionWinner == address(0), \\\"the order has been withdrawn\\\");\\r\\n            require(!allLiquidatedOrder[orderId].isPledgeRedeem, \\\"redeemed by the pledgor\\\");\\r\\n            CollectionNFT memory collectionNFT = collectionWhiteList[_order.collection];\\r\\n            uint256 auctionDuration;\\r\\n            if(collectionNFT.auctionDuration != 0){\\r\\n                auctionDuration = collectionNFT.auctionDuration;\\r\\n            }else{\\r\\n                auctionDuration = auctionDurationOverAll;\\r\\n            }\\r\\n            require(block.timestamp > liquidatedOrder.liquidatedStartTime.add(auctionDuration), \\\"the auction is not yet closed\\\");\\r\\n            require(msg.sender == liquidatedOrder.auctionAccount || (liquidatedOrder.auctionAccount == address(0) && msg.sender == liquidatedOrder.liquidator), \\\"you can't extract NFT\\\");\\r\\n            transferNftInternal(address(this), msg.sender, _order.collection, _order.tokenId, _order.nftType);\\r\\n            if(msg.sender == liquidatedOrder.auctionAccount && liquidatedOrder.auctionPrice != 0){\\r\\n                uint256 profit = liquidatedOrder.auctionPrice.sub(liquidatedOrder.liquidatedPrice);\\r\\n                uint256 compensatePledgerAmount = profit.mul(compensatePledgerRate).div(1e18);\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(_order.pledger), compensatePledgerAmount);\\r\\n                uint256 liquidatorAmount = profit.mul(rewardFirstRate).div(1e18);\\r\\n                doTransferOut(liquidatedOrder.xToken, payable(liquidatedOrder.liquidator), liquidatorAmount);\\r\\n\\r\\n                addUpIncomeMap[liquidatedOrder.xToken] = addUpIncomeMap[liquidatedOrder.xToken] + (profit - compensatePledgerAmount - liquidatorAmount);\\r\\n            }\\r\\n            liquidatedOrder.auctionWinner = msg.sender;\\r\\n        }else{\\r\\n            require(!_order.isWithdraw, \\\"the order has been drawn\\\");\\r\\n            require(_order.pledger != address(0) && msg.sender == _order.pledger, \\\"withdraw auth failed\\\");\\r\\n            uint256 borrowBalance = controller.getOrderBorrowBalanceCurrent(orderId);\\r\\n            require(borrowBalance == 0, \\\"order has debt\\\");\\r\\n            transferNftInternal(address(this), _order.pledger, _order.collection, _order.tokenId, _order.nftType);\\r\\n        }\\r\\n        _order.isWithdraw = true;\\r\\n        emit WithDraw(_order.collection, _order.tokenId, orderId, _order.pledger, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getOrderDetail(uint256 orderId) external view returns(address collection, uint256 tokenId, address pledger){\\r\\n        Order storage _order = allOrders[orderId];\\r\\n        collection = _order.collection;\\r\\n        tokenId = _order.tokenId;\\r\\n        pledger = _order.pledger;\\r\\n    }\\r\\n\\r\\n    function notifyOrderLiquidated(address xToken, uint256 orderId, address liquidator, uint256 liquidatedPrice) external{\\r\\n        require(msg.sender == address(controller), \\\"auth failed\\\");\\r\\n        require(liquidatedPrice > 0, \\\"invalid liquidate price\\\");\\r\\n        LiquidatedOrder storage liquidatedOrder = allLiquidatedOrder[orderId];\\r\\n        require(liquidatedOrder.liquidator == address(0), \\\"order has been liquidated\\\");\\r\\n\\r\\n        liquidatedOrder.liquidatedPrice = liquidatedPrice;\\r\\n        liquidatedOrder.liquidator = liquidator;\\r\\n        liquidatedOrder.xToken = xToken;\\r\\n        liquidatedOrder.liquidatedStartTime = block.timestamp;\\r\\n\\r\\n        Order storage order = allOrders[orderId];\\r\\n        if(liquidator == order.pledger){\\r\\n            liquidatedOrder.auctionWinner = liquidator;\\r\\n            liquidatedOrder.isPledgeRedeem = true;\\r\\n            order.isWithdraw = true;\\r\\n            transferNftInternal(address(this), order.pledger, order.collection, order.tokenId, order.nftType);\\r\\n\\r\\n            emit WithDraw(order.collection, order.tokenId, orderId, order.pledger, liquidatedOrder.auctionWinner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function notifyRepayBorrow(uint256 orderId) external{\\r\\n        require(msg.sender == address(controller), \\\"auth failed\\\");\\r\\n        require(!isOrderLiquidated(orderId), \\\"withdrawal is not allowed for this order\\\");\\r\\n        Order storage _order = allOrders[orderId];\\r\\n        require(tx.origin == _order.pledger, \\\"you are not pledgor\\\");\\r\\n        require(!_order.isWithdraw, \\\"the order has been drawn\\\");\\r\\n        transferNftInternal(address(this), _order.pledger, _order.collection, _order.tokenId, _order.nftType);\\r\\n        _order.isWithdraw = true;\\r\\n\\r\\n        emit WithDraw(_order.collection, _order.tokenId, orderId, _order.pledger, _order.pledger);\\r\\n    }\\r\\n\\r\\n    function isOrderLiquidated(uint256 orderId) public view returns(bool){\\r\\n        LiquidatedOrder storage _order = allLiquidatedOrder[orderId];\\r\\n        return ((_order.liquidatedPrice > 0) && (_order.liquidator != address(0)));\\r\\n    }\\r\\n\\r\\n    function doTransferIn(address xToken, address payable account, uint256 amount) internal{\\r\\n        if(IXToken(xToken).underlying() != ADDRESS_ETH){\\r\\n            require(msg.value == 0, \\\"ERC20 don't accecpt ETH\\\");\\r\\n            uint256 balanceBefore = IERC20(IXToken(xToken).underlying()).balanceOf(address(this));\\r\\n            IERC20(IXToken(xToken).underlying()).safeTransferFrom(account, address(this), amount);\\r\\n            uint256 balanceAfter = IERC20(IXToken(xToken).underlying()).balanceOf(address(this));\\r\\n\\r\\n            require(balanceAfter - balanceBefore == amount,\\\"TransferIn amount not valid\\\");\\r\\n        }else{\\r\\n            require(msg.value >= amount, \\\"ETH value not enough\\\");\\r\\n            if (msg.value > amount){\\r\\n                uint256 changeAmount = msg.value.sub(amount);\\r\\n                (bool result, ) = account.call{value: changeAmount,gas: transferEthGasCost}(\\\"\\\");\\r\\n                require(result, \\\"Transfer of ETH failed\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doTransferOut(address xToken, address payable account, uint256 amount) internal{\\r\\n        if(amount == 0) return;\\r\\n        if (IXToken(xToken).underlying() != ADDRESS_ETH) {\\r\\n            IERC20(IXToken(xToken).underlying()).safeTransfer(account, amount);\\r\\n        } else {\\r\\n            account.transfer(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferNftInternal(address _from, address _to, address _collection, uint256 _tokenId, uint256 _nftType) internal{\\r\\n        require(_nftType == 721 || _nftType == 1155, \\\"don't support this nft type\\\");\\r\\n        \\r\\n        if (_nftType == 721) {\\r\\n            IERC721Upgradeable(_collection).safeTransferFrom(_from, _to, _tokenId);\\r\\n        }else if (_nftType == 1155){\\r\\n\\r\\n            IERC1155Upgradeable(_collection).safeTransferFrom(\\r\\n                    _from,\\r\\n                    _to,\\r\\n                    _tokenId,\\r\\n                    1,\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _depositPunk(uint256 punkIndex) internal{\\r\\n        address owner = punks.punkIndexToAddress(punkIndex);\\r\\n        require(owner == msg.sender, \\\"not owner of punkIndex\\\");\\r\\n        punks.buyPunk(punkIndex);\\r\\n        punks.transferPunk(userProxy, punkIndex);\\r\\n        wrappedPunks.mint(punkIndex);\\r\\n    }\\r\\n\\r\\n    function getOrderState(uint256 orderId) external view returns(OrderState orderState){\\r\\n        Order memory order = allOrders[orderId];\\r\\n        LiquidatedOrder memory liquidatedOrder =  allLiquidatedOrder[orderId];\\r\\n        if(order.pledger != address(0)){\\r\\n            if(order.isWithdraw == false){\\r\\n                if(liquidatedOrder.liquidator == address(0)){\\r\\n                    orderState = OrderState.PLEDGEING;\\r\\n                }else{\\r\\n                    CollectionNFT memory collectionNFT = collectionWhiteList[order.collection];\\r\\n                    uint256 auctionDuration;\\r\\n                    uint256 redeemProtection;\\r\\n                    if(collectionNFT.auctionDuration != 0){\\r\\n                        auctionDuration = collectionNFT.auctionDuration;\\r\\n                        redeemProtection = collectionNFT.redeemProtection;\\r\\n                    }else{\\r\\n                        auctionDuration = auctionDurationOverAll;\\r\\n                        redeemProtection = redeemProtectionOverAll;\\r\\n                    }\\r\\n                    if(block.timestamp < liquidatedOrder.liquidatedStartTime.add(redeemProtection)){\\r\\n                        orderState = OrderState.REDEEMPROTECTION;\\r\\n                    }else if(block.timestamp < liquidatedOrder.liquidatedStartTime.add(auctionDuration)){\\r\\n                        orderState = OrderState.LIQUIDITYING;\\r\\n                    }else{\\r\\n                        orderState = OrderState.LIQUIDITYEND;\\r\\n                    }\\r\\n                }\\r\\n            }else{\\r\\n                if(liquidatedOrder.auctionWinner == address(0)){\\r\\n                    orderState = OrderState.NORMALWITHDRAW;\\r\\n                }else{\\r\\n                    orderState = OrderState.LIQUIDITYWITHDRAW;\\r\\n                }\\r\\n            }\\r\\n            return orderState;\\r\\n        }\\r\\n        return OrderState.NOPLEDGE;\\r\\n    }\\r\\n\\r\\n    function airDrop(uint256 orderId, address airDropContract, uint256 ercType) public{\\r\\n        require(address(xAirDrop) != address(0) && airDropContract != address(0), \\\"no airdrop\\\");\\r\\n        Order memory order = allOrders[orderId];\\r\\n        require(!order.isWithdraw, \\\"order has been withdrawn\\\");\\r\\n        address receiver;\\r\\n        if(isOrderLiquidated(orderId)){\\r\\n            LiquidatedOrder memory liquidatedOrder =  allLiquidatedOrder[orderId];\\r\\n            CollectionNFT memory collectionNFT = collectionWhiteList[order.collection];\\r\\n            uint256 auctionDuration;\\r\\n            if(collectionNFT.auctionDuration != 0){\\r\\n                auctionDuration = collectionNFT.auctionDuration;\\r\\n            }else{\\r\\n                auctionDuration = auctionDurationOverAll;\\r\\n            }\\r\\n            if(block.timestamp > liquidatedOrder.liquidatedStartTime.add(auctionDuration)){\\r\\n                if(liquidatedOrder.auctionAccount == address(0)){\\r\\n                    receiver = liquidatedOrder.liquidator;\\r\\n                }else{\\r\\n                    receiver = liquidatedOrder.auctionAccount;\\r\\n                }\\r\\n            }else{\\r\\n                receiver = order.pledger;\\r\\n            }\\r\\n        }else{\\r\\n            receiver = order.pledger;\\r\\n        }\\r\\n        IERC721Upgradeable(order.collection).safeTransferFrom(address(this), address(xAirDrop), order.tokenId);\\r\\n        xAirDrop.execution(order.collection, airDropContract, receiver, order.tokenId, ercType);\\r\\n        IERC721Upgradeable(order.collection).safeTransferFrom(address(xAirDrop), address(this), order.tokenId);\\r\\n\\r\\n        emit AirDrop(address(xAirDrop), msg.sender, receiver, order.collection, order.tokenId);\\r\\n    }\\r\\n\\r\\n    function batchAirDrop(uint256[] memory orderId, address airDropContract, uint256 ercType) external{\\r\\n        for(uint256 i=0; i<orderId.length; i++){\\r\\n            airDrop(orderId[i], airDropContract, ercType);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ordersBalancesOf(address account) external view returns(uint256){\\r\\n        return ordersMap[account].length;\\r\\n    }\\r\\n\\r\\n    function ordersOfOwnerByIndex(address account, uint256 index) external view returns(uint256){\\r\\n        require(index < ordersMap[account].length, \\\"upper limit exceeded\\\");\\r\\n        return ordersMap[account][index];\\r\\n    }\\r\\n\\r\\n    function ordersOfOwnerOffset(address account, uint256 index, uint256 offset) external view returns(uint256[] memory orders){\\r\\n        require(index + offset < ordersMap[account].length, \\\"upper limit exceeded\\\");\\r\\n        orders = new uint256[](offset);\\r\\n        uint256 count;\\r\\n        for(uint256 i=index; i<index+offset; i++){\\r\\n            orders[count] = ordersMap[account][i];\\r\\n            count++;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //================ receiver ================\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 id,\\r\\n        uint256 value,\\r\\n        bytes calldata data\\r\\n    ) external override returns(bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata values,\\r\\n        bytes calldata data\\r\\n    ) external override returns(bytes4) {\\r\\n        return this.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\r\\n        return  interfaceId == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\\r\\n            interfaceId == 0x4e2312e0;     // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) ^ bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\r\\n    }\\r\\n\\r\\n    //================ admin function ================\\r\\n    function setCollectionlWhitList(address collection, bool flag, uint256 _auctionDuration, uint256 _redeemProtection, uint256 _increasingMin) external onlyAdmin{\\r\\n        setCollectionlWhitListInternal(collection, flag, _auctionDuration, _redeemProtection, _increasingMin);\\r\\n    }\\r\\n    function setCollectionlWhitListInternal(address collection, bool flag, uint256 _auctionDuration, uint256 _redeemProtection, uint256 _increasingMin) internal{\\r\\n        require(collection != address(0), \\\"invalid collection\\\");\\r\\n        collectionWhiteList[collection].isCollectionWhiteList = flag;\\r\\n        collectionWhiteList[collection].auctionDuration = _auctionDuration;\\r\\n        collectionWhiteList[collection].redeemProtection = _redeemProtection;\\r\\n        collectionWhiteList[collection].increasingMin = _increasingMin;\\r\\n    }\\r\\n\\r\\n    function batchAddCollectionlWhitList(address[] calldata collections, uint256[] calldata _auctionDuration, uint256[] calldata _redeemProtection, uint256[] calldata _increasingMin) external onlyAdmin{\\r\\n        require(collections.length > 0, \\\"invalid collections\\\");\\r\\n        require(collections.length == _auctionDuration.length,\\\"collections and _auctionDuration len mismatch\\\");\\r\\n        require(_auctionDuration.length == _redeemProtection.length,\\\"_redeemProtection and _auctionDuration len mismatch\\\");\\r\\n        require(_redeemProtection.length == _increasingMin.length,\\\"_redeemProtection and _increasingMin len mismatch\\\");\\r\\n        for(uint256 i = 0; i < collections.length; i++){\\r\\n            setCollectionlWhitListInternal(collections[i], true, _auctionDuration[i], _redeemProtection[i], _increasingMin[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPendingAdmin(address newPendingAdmin) external onlyAdmin{\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n    }\\r\\n\\r\\n    function acceptAdmin() external{\\r\\n        require(msg.sender == pendingAdmin, \\\"only pending admin could accept\\\");\\r\\n        admin = pendingAdmin;\\r\\n        pendingAdmin = address(0);\\r\\n    }\\r\\n\\r\\n    function setController(address _controller) external onlyAdmin{\\r\\n        controller = IP2Controller(_controller);\\r\\n    }\\r\\n\\r\\n    function setPledgerFineRate(uint256 _pledgerFineRate) external onlyAdmin{\\r\\n        require(_pledgerFineRate <= RATE_UPPER_LIMIT, \\\"the upper limit cannot be exceeded\\\");\\r\\n        pledgerFineRate = _pledgerFineRate;\\r\\n    }\\r\\n\\r\\n    function setRewardFirstRate(uint256 _rewardFirstRate) external onlyAdmin{\\r\\n        require((_rewardFirstRate + rewardLastRate) <= RATE_UPPER_LIMIT, \\\"rewardLastRate the upper limit cannot be exceeded\\\");\\r\\n        require((_rewardFirstRate + compensatePledgerRate) <= RATE_UPPER_LIMIT, \\\"compensatePledgerRate the upper limit cannot be exceeded\\\");\\r\\n        rewardFirstRate = _rewardFirstRate;\\r\\n    }\\r\\n\\r\\n    function setRewardLastRate(uint256 _rewardLastRate) external onlyAdmin{\\r\\n        require((rewardFirstRate + _rewardLastRate) <= RATE_UPPER_LIMIT, \\\"the upper limit cannot be exceeded\\\");\\r\\n        rewardLastRate = _rewardLastRate;\\r\\n    }\\r\\n\\r\\n    function setCompensatePledgerRate(uint256 _compensatePledgerRate) external onlyAdmin{\\r\\n        require((_compensatePledgerRate + rewardFirstRate) <= RATE_UPPER_LIMIT, \\\"the upper limit cannot be exceeded\\\");\\r\\n        compensatePledgerRate = _compensatePledgerRate;\\r\\n    }\\r\\n\\r\\n    function setAuctionDurationOverAll(uint256 _auctionDurationOverAll) external onlyAdmin{\\r\\n        auctionDurationOverAll = _auctionDurationOverAll;\\r\\n    }\\r\\n\\r\\n    function setRedeemProtectionOverAll(uint256 _redeemProtectionOverAll) external onlyAdmin{\\r\\n        redeemProtectionOverAll = _redeemProtectionOverAll;\\r\\n    }\\r\\n\\r\\n    function setIncreasingMinOverAll(uint256 _increasingMinOverAll) external onlyAdmin{\\r\\n        increasingMinOverAll = _increasingMinOverAll;\\r\\n    }\\r\\n\\r\\n    function withdraw(address xToken, uint256 amount) external onlyAdmin{\\r\\n        doTransferOut(xToken, payable(admin), amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAuctionIncome(address xToken, uint256 amount) external onlyAdmin{\\r\\n        require(amount <= addUpIncomeMap[xToken], \\\"amount cannot be greater than the withdrawable income\\\");\\r\\n        doTransferOut(xToken, payable(admin), amount);\\r\\n        addUpIncomeMap[xToken] -= amount;\\r\\n    }\\r\\n\\r\\n    function setTransferEthGasCost(uint256 _transferEthGasCost) external onlyAdmin {\\r\\n        transferEthGasCost = _transferEthGasCost;\\r\\n    }\\r\\n\\r\\n    // 1 pledge, 2 withdraw, 3 auction\\r\\n    function setPause(uint256 index, bool isPause) external onlyAdmin{\\r\\n        pausedMap[index] = isPause;\\r\\n    }\\r\\n\\r\\n    function setXAirDrop(IXAirDrop _xAirDrop) external onlyAdmin{\\r\\n        xAirDrop = _xAirDrop;\\r\\n    }\\r\\n\\r\\n    function claim(address airdop, bytes memory byteCode) external onlyAdmin{\\r\\n        (bool result, ) = airdop.call(byteCode);\\r\\n        require(result, \\\"claim error\\\");\\r\\n    }\\r\\n\\r\\n    function setPunks(IPunks _punks, IWrappedPunks _wrappedPunks) external onlyAdmin{\\r\\n        punks = _punks;\\r\\n        wrappedPunks = _wrappedPunks;\\r\\n        wrappedPunks.registerProxy();\\r\\n        userProxy = wrappedPunks.proxyInfo(address(this));\\r\\n    }\\r\\n\\r\\n    //================ modifier ================\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin(){\\r\\n        require(msg.sender == admin, \\\"admin auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotPaused(uint256 index) {\\r\\n        require(!pausedMap[index], \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IP2Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IP2Controller {\\r\\n\\r\\n    function mintAllowed(address xToken, address minter, uint256 mintAmount) external;\\r\\n\\r\\n    function mintVerify(address xToken, address account) external;\\r\\n\\r\\n    function redeemAllowed(address xToken, address redeemer, uint256 redeemTokens, uint256 redeemAmount) external;\\r\\n\\r\\n    function redeemVerify(address xToken, address redeemer) external;\\r\\n    \\r\\n    function borrowAllowed(address xToken, uint256 orderId, address borrower, uint256 borrowAmount) external;\\r\\n\\r\\n    function borrowVerify(uint256 orderId, address xToken, address borrower) external;\\r\\n\\r\\n    function repayBorrowAllowed(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external;\\r\\n\\r\\n    function repayBorrowVerify(address xToken, uint256 orderId, address borrower, address payer, uint256 repayAmount) external;\\r\\n\\r\\n    function repayBorrowAndClaimVerify(address xToken, uint256 orderId) external;\\r\\n\\r\\n    function liquidateBorrowAllowed(address xToken, uint256 orderId, address borrower, address liquidator) external;\\r\\n\\r\\n    function liquidateBorrowVerify(address xToken, uint256 orderId, address borrower, address liquidator, uint256 repayAmount)external;\\r\\n    \\r\\n    function transferAllowed(address xToken, address src, address dst, uint256 transferTokens) external;\\r\\n\\r\\n    function transferVerify(address xToken, address src, address dst) external;\\r\\n\\r\\n    function getOrderBorrowBalanceCurrent(uint256 orderId) external returns(uint256);\\r\\n\\r\\n    // admin function\\r\\n\\r\\n    function addPool(address xToken, uint256 _borrowCap, uint256 _supplyCap) external;\\r\\n\\r\\n    function addCollateral(address _collection, uint256 _collateralFactor, uint256 _liquidateFactor, address[] calldata _pools) external;\\r\\n\\r\\n    function setPriceOracle(address _oracle) external;\\r\\n\\r\\n    function setXNFT(address _xNFT) external;\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interface/IXToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IInterestRateModel.sol\\\";\\r\\n\\r\\ninterface IXToken is IERC20 {\\r\\n\\r\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\r\\n\\r\\n    function mint(uint256 amount) external payable;\\r\\n    function redeem(uint256 redeemTokens) external;\\r\\n    function redeemUnderlying(uint256 redeemAmounts) external;\\r\\n\\r\\n    function borrow(uint256 orderId, address payable borrower, uint256 borrowAmount) external;\\r\\n    function repayBorrow(uint256 orderId, address borrower, uint256 repayAmount) external payable;\\r\\n    function liquidateBorrow(uint256 orderId, address borrower) external payable;\\r\\n\\r\\n    function orderLiquidated(uint256 orderId) external view returns(bool, address, uint256); \\r\\n\\r\\n    function accrueInterest() external;\\r\\n\\r\\n    function borrowBalanceCurrent(uint256 orderId) external returns (uint256);\\r\\n    function borrowBalanceStored(uint256 orderId) external view returns (uint256);\\r\\n\\r\\n    function exchangeRateCurrent() external returns (uint256);\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n\\r\\n    function underlying() external view returns(address);\\r\\n    function totalBorrows() external view returns(uint256);\\r\\n    function totalCash() external view returns (uint256);\\r\\n    function totalReserves() external view returns (uint256);\\r\\n\\r\\n    /**admin function **/\\r\\n    function setPendingAdmin(address payable newPendingAdmin) external;\\r\\n    function acceptAdmin() external;\\r\\n    function setReserveFactor(uint256 newReserveFactor) external;\\r\\n    function reduceReserves(uint256 reduceAmount) external;\\r\\n    function setInterestRateModel(IInterestRateModel newInterestRateModel) external;\\r\\n    function setTransferEthGasCost(uint256 _transferEthGasCost) external;\\r\\n\\r\\n    /**event */\\r\\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\r\\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\r\\n    event Borrow(uint256 orderId, address borrower, uint256 borrowAmount, uint256 orderBorrows, uint256 totalBorrows);\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/library/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\r\\n            value\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IXAirDrop.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\r\\n\\r\\ninterface IXAirDrop {\\r\\n\\r\\n    function execution(address nftContract,  address airDropContract, address receiver, uint256 tokenIds, uint256 ercType) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^   0.8.2;\\r\\n\\r\\ninterface IPunks {\\r\\n    \\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\r\\n\\r\\n    function buyPunk(uint256 punkIndex) external;\\r\\n\\r\\n    function transferPunk(address to, uint256 punkIndex) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IWrappedPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\r\\n\\r\\ninterface IWrappedPunks is IERC721EnumerableUpgradeable {\\r\\n\\r\\n    function punkContract() external view returns (address);\\r\\n\\r\\n    function mint(uint256 punkIndex) external;\\r\\n\\r\\n    function burn(uint256 punkIndex) external;\\r\\n\\r\\n    function registerProxy() external;\\r\\n\\r\\n    function proxyInfo(address user) external returns (address proxy);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IInterestRateModel {\\r\\n\\r\\n    function blocksPerYear() external view returns (uint256); \\r\\n\\r\\n    function isInterestRateModel() external returns(bool);\\r\\n\\r\\n    function getBorrowRate(\\r\\n        uint256 cash, \\r\\n        uint256 borrows, \\r\\n        uint256 reserves) external view returns (uint256);\\r\\n\\r\\n    function getSupplyRate(\\r\\n        uint256 cash, \\r\\n        uint256 borrows, \\r\\n        uint256 reserves, \\r\\n        uint256 reserveFactor) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a < b) {\\r\\n            return b - a;\\r\\n        }\\r\\n        return a - b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xAirDrop\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProtection\",\"type\":\"bool\"}],\"name\":\"AuctionNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"}],\"name\":\"Pledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PledgeAdvanceRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addUpIncomeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airDropContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ercType\",\"type\":\"uint256\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLiquidatedOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedStartTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPledgeRedeem\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"auctionWinner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"auction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDurationOverAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_auctionDuration\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_redeemProtection\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_increasingMin\",\"type\":\"uint256[]\"}],\"name\":\"batchAddCollectionlWhitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderId\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"airDropContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ercType\",\"type\":\"uint256\"}],\"name\":\"batchAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airdop\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"byteCode\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectionWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCollectionWhiteList\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemProtection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increasingMin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compensatePledgerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IP2Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pledger\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderState\",\"outputs\":[{\"internalType\":\"enum XNFT.OrderState\",\"name\":\"orderState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasingMinOverAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"isOrderLiquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedPrice\",\"type\":\"uint256\"}],\"name\":\"notifyOrderLiquidated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"notifyRepayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ordersBalancesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ordersMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ordersOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"ordersOfOwnerOffset\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orders\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pausedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pledge1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pledge721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"pledgeAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgerFineRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punks\",\"outputs\":[{\"internalType\":\"contract IPunks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemProtectionOverAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFirstRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLastRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionDurationOverAll\",\"type\":\"uint256\"}],\"name\":\"setAuctionDurationOverAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemProtection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_increasingMin\",\"type\":\"uint256\"}],\"name\":\"setCollectionlWhitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compensatePledgerRate\",\"type\":\"uint256\"}],\"name\":\"setCompensatePledgerRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasingMinOverAll\",\"type\":\"uint256\"}],\"name\":\"setIncreasingMinOverAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pledgerFineRate\",\"type\":\"uint256\"}],\"name\":\"setPledgerFineRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPunks\",\"name\":\"_punks\",\"type\":\"address\"},{\"internalType\":\"contract IWrappedPunks\",\"name\":\"_wrappedPunks\",\"type\":\"address\"}],\"name\":\"setPunks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemProtectionOverAll\",\"type\":\"uint256\"}],\"name\":\"setRedeemProtectionOverAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardFirstRate\",\"type\":\"uint256\"}],\"name\":\"setRewardFirstRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardLastRate\",\"type\":\"uint256\"}],\"name\":\"setRewardLastRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferEthGasCost\",\"type\":\"uint256\"}],\"name\":\"setTransferEthGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IXAirDrop\",\"name\":\"_xAirDrop\",\"type\":\"address\"}],\"name\":\"setXAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEthGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAuctionIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedPunks\",\"outputs\":[{\"internalType\":\"contract IWrappedPunks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAirDrop\",\"outputs\":[{\"internalType\":\"contract IXAirDrop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XNFT", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}