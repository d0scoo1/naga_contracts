{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/llamapay/AnteLlamaPayTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\n// Uses the setTokenAddress and setPayerAddress functions to set the addresses\\n// of the LlamaPay instance(s) and payer address to check\\n// https://.etherscan.io/address/[CONTRACT_ADDRESS]#readContract to check values\\n// https://.etherscan.io/address/[CONTRACT_ADDRESS]#writeContract to set values\\n\\n// NOTE: As of May 2022, a challenger attempting to check this test via web app\\n// or interacting with the AntePool directly can potentially be front-run. In\\n// order to avoid being front-run, a potential challenger should deploy an\\n// instance of the AnteLlamaPayTestChallengerWrapper.sol contract and use that\\n// to challenge the Ante Pool. Staking functions can be done normally through\\n// the web app or directly interacting with the AntePool contract.\\n// https://github.com/antefinance/ante-community-tests/blob/main/contracts/llamapay/AnteLlamaPayTestChallengerWrapper.sol\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../libraries/ante-v05-core/AnteTest.sol\\\";\\n\\ninterface ILlamaPayFactory {\\n    function getLlamaPayContractByToken(address _token) external view returns (address, bool);\\n}\\n\\ninterface ILlamaPay {\\n    function payers(address _payer) external view returns (uint40, uint216);\\n}\\n\\n/// @title  LlamaPay never goes backwards in time test\\n/// @notice Ante Test to check that lastPayerUpdate <= block.timestamp holds\\n///         for any LlamaPay payer/token. Uses the setter functions provided to\\n///         set the LlamaPay instance and payer to check.\\n///         Note: may no longer hold after 231,800 A.D. due to holding timestamp in uint40\\ncontract AnteLlamaPayTest is\\n    AnteTest(\\\"LlamaPay never pays future payments early (lastPayerUpdate[anyone] <= block.timestamp)\\\")\\n{\\n    // https://etherscan.io/address/0xde1C04855c2828431ba637675B6929A684f84C7F on Eth Mainnet\\n    ILlamaPayFactory internal factory;\\n\\n    address public tokenAddress;\\n    address public payerAddress;\\n\\n    constructor(address _llamaPayFactoryAddress) {\\n        factory = ILlamaPayFactory(_llamaPayFactoryAddress);\\n\\n        protocolName = \\\"LlamaPay\\\"; // <3\\n        testedContracts.push(_llamaPayFactoryAddress);\\n        testedContracts.push(address(0)); // LlamaPay instance once set\\n    }\\n\\n    /// @notice Checks that lastPayerUpdate[payer] <= block.timestamp for a\\n    ///         given payer and LlamaPay instance. Uses the setter functions\\n    ///         provided to set the token address and payer address to check.\\n    /// @return true if lastPayerUpdate[payer] <= block.timestamp for the\\n    ///         LlamaPay instance and payer checked\\n    function checkTestPasses() external view override returns (bool) {\\n        // If a valid LlamaPay instance is specified, check it\\n        (address predictedAddress, bool isDeployed) = factory.getLlamaPayContractByToken(tokenAddress);\\n        if (isDeployed) {\\n            (uint40 lastPayerUpdate, ) = ILlamaPay(predictedAddress).payers(payerAddress);\\n\\n            // We don't need to worry about checking if the payer exists in the\\n            // payer mapping for this LlamaPay instance since 0 < block.timestamp\\n            return (lastPayerUpdate <= block.timestamp);\\n        }\\n\\n        // If invalid LlamaPay address passed in, test will still pass\\n        return true;\\n    }\\n\\n    /*****************************************************\\n     * ================ USER INTERFACE ================= *\\n     *****************************************************/\\n\\n    /// @notice Sets the payer address for the Ante Test to check\\n    /// @param  _payerAddress address of payer to check\\n    function setPayerAddress(address _payerAddress) external {\\n        // Could check that valid payer mapping exists, but also, an invalid\\n        // payer address doesn't fail the test so no risk of false positive.\\n        payerAddress = _payerAddress;\\n    }\\n\\n    /// @notice Sets the token address of the LlamaPay instance to check\\n    /// @param  _tokenAddress address of token to check LlamaPay instance for\\n    function setTokenAddress(address _tokenAddress) external {\\n        // Check that LlamaPay instance exists for the token\\n        (address predictedAddress, bool isDeployed) = factory.getLlamaPayContractByToken(_tokenAddress);\\n        require(isDeployed, \\\"ANTE: LlamaPay instance not deployed for that token\\\");\\n        testedContracts[1] = predictedAddress;\\n        tokenAddress = _tokenAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ante-v05-core/AnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IAnteTest.sol\\\";\\n\\n/// @title Ante V0.5 Ante Test smart contract\\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\\n/// @dev Usage: contract YourAnteTest is AnteTest(\\\"String descriptor of test\\\") { ... }\\nabstract contract AnteTest is IAnteTest {\\n    /// @inheritdoc IAnteTest\\n    address public override testAuthor;\\n    /// @inheritdoc IAnteTest\\n    string public override testName;\\n    /// @inheritdoc IAnteTest\\n    string public override protocolName;\\n    /// @inheritdoc IAnteTest\\n    address[] public override testedContracts;\\n\\n    /// @dev testedContracts and protocolName are optional parameters which should\\n    /// be set in the constructor of your AnteTest\\n    /// @param _testName The name of the Ante Test\\n    constructor(string memory _testName) {\\n        testAuthor = msg.sender;\\n        testName = _testName;\\n    }\\n\\n    /// @notice Returns the testedContracts array of addresses\\n    /// @return The list of tested contracts as an array of addresses\\n    function getTestedContracts() external view returns (address[] memory) {\\n        return testedContracts;\\n    }\\n\\n    /// @inheritdoc IAnteTest\\n    function checkTestPasses() external virtual override returns (bool) {}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ante-v05-core/interfaces/IAnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// \u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2503\u2517\u2501\u251b\u2503\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u2501\u2513\u250f\u2513\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\\n// \u2503\u250f\u2501\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2501\u251b\u2523\u252b\u2503\u250f\u2513\u2513\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2513\u2513\u2503\u250f\u2501\u251b\u2503\u250f\u2513\u2503\\n// \u2503\u2503 \u2503\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u252b\u2501\u250f\u2513\u2501\u2503\u2503\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u2503\u2503\u2501\u252b\\n// \u2517\u251b \u2517\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u251b\u2501\u2517\u251b\u2501\u2501\u2501\u2517\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\npragma solidity ^0.7.0;\\n\\n/// @title The interface for the Ante V0.5 Ante Test\\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\\ninterface IAnteTest {\\n    /// @notice Returns the author of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\\n    /// @return The address of the test author\\n    function testAuthor() external view returns (address);\\n\\n    /// @notice Returns the name of the protocol the Ante Test is testing\\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\\n    /// @return The name of the protocol in string format\\n    function protocolName() external view returns (string memory);\\n\\n    /// @notice Returns a single address in the testedContracts array\\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\\n    /// @param i The array index of the address to return\\n    /// @return The address of the i-th element in the list of tested contracts\\n    function testedContracts(uint256 i) external view returns (address);\\n\\n    /// @notice Returns the name of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testName as a public var\\n    /// @return The name of the Ante Test in string format\\n    function testName() external view returns (string memory);\\n\\n    /// @notice Function containing test logic to inspect the protocol invariant\\n    /// @dev This should usually return True\\n    /// @return A single bool indicating if the Ante Test passes/fails\\n    function checkTestPasses() external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_llamaPayFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payerAddress\",\"type\":\"address\"}],\"name\":\"setPayerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnteLlamaPayTest", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000de1c04855c2828431ba637675b6929a684f84c7f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}