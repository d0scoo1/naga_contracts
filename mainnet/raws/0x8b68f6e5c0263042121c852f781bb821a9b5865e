{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-05-07\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-04-21\r\n*/\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Math error\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ncontract ERC20 {\r\n    \r\n    function balanceOf(address _address) public view returns (uint256 balance);\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n// Token contract\r\ncontract NFTSHARK is ERC20 {\r\n    \r\n    string public name = \"NFTSHARK\";\r\n    string public symbol = \"NFTS\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 1 * 10**9 * 10**18;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    address public owner;\r\n    address private giveawayWallet;\r\n    bytes4 private constant TRANSFER = bytes4(\r\n        keccak256(bytes(\"transfer(address,uint256)\"))\r\n    );\r\n    \r\n    constructor(address _giveawayWallet) public {\r\n        owner = msg.sender;\r\n        balances[msg.sender] = totalSupply;\r\n        giveawayWallet = _giveawayWallet;\r\n    }\r\n    \r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0), \"Zero address error\");\r\n        require(balances[msg.sender] >= _value && _value > 0, \"Insufficient balance or zero amount\");\r\n\r\n        uint256 _holdersRewardsAmount = SafeMath.div(_value,10);\r\n        balances[giveawayWallet] = SafeMath.add(balances[giveawayWallet], _holdersRewardsAmount);\r\n\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], SafeMath.sub(_value,_holdersRewardsAmount));\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(_spender != address(0), \"Zero address error\");\r\n        require((allowed[msg.sender][_spender] == 0) || (_amount == 0), \"Approve amount error\");\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_from != address(0) && _to != address(0), \"Zero address error\");\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0, \"Insufficient balance or zero amount\");\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        uint256 _holdersRewardsAmount = SafeMath.div(_value,10);\r\n        balances[giveawayWallet] = SafeMath.add(balances[giveawayWallet], _holdersRewardsAmount);\r\n        \r\n        balances[_to] = SafeMath.add(balances[_to], SafeMath.sub(_value,_holdersRewardsAmount));\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"You are not owner\");\r\n        _;\r\n    }\r\n    \r\n    \r\n}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://aa373714771ebf8046bb1bdaa277ee6a5ba03b3eda29ac4d47cac8e57299a629"}]}