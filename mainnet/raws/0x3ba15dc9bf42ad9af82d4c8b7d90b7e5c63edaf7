{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.1;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // \u6210\u90fd\u94fe\u5b89 // \u5185\u90e8\u51fd\u6570_msgSender\uff0c\u83b7\u53d6\u51fd\u6570\u8c03\u7528\u8005\u5730\u5740\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    // \u6210\u90fd\u94fe\u5b89 // \u5b9a\u4e49ERC20 Token\u6807\u51c6\u8981\u6c42\u7684\u63a5\u53e3\u51fd\u6570\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u4ee3\u5e01\u8f6c\u8d26\u4e8b\u4ef6\u4e0e\u4ee3\u5e01\u6388\u6743\u4e8b\u4ef6\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256; // \u6210\u90fd\u94fe\u5b89 // \u5f15\u5165SafeMath\u5b89\u5168\u6570\u5b66\u8fd0\u7b97\u5e93\uff0c\u907f\u514d\u6570\u5b66\u8fd0\u7b97\u6574\u578b\u6ea2\u51fa\r\n    \r\n    uint256 internal _totalSupply; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u53d8\u91cf_totalSupply\uff0c\u5b58\u50a8\u4ee3\u5e01\u603b\u91cf\r\n    \r\n    mapping (address => uint256) internal _balances; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660emapping\u53d8\u91cf_balances\uff0c\u5b58\u50a8\u6307\u5b9a\u5730\u5740\u7684\u4ee3\u5e01\u4f59\u989d\r\n    mapping (address => mapping (address => uint256)) internal _allowances; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660emapping\u53d8\u91cf_allowances\uff0c\u5b58\u50a8\u5bf9\u5e94\u5730\u5740\u95f4\u7684\u6388\u6743\u503c\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_transfer\u8fdb\u884c\u4ee3\u5e01\u8f6c\u8d26\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    // \u6210\u90fd\u94fe\u5b89 // \u7528\u6237\u8c03\u7528\u8be5\u51fd\u6570\u4fee\u6539\u6388\u6743\u503c\u65f6\uff0c\u53ef\u80fd\u5bfc\u81f4\u591a\u91cd\u6388\u6743\u3002\u5efa\u8bae\u7528\u6237\u4f7f\u7528increaseAllowance\u4e0edecreaseAllowance\u4fee\u6539\u6388\u6743\u503c\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_approve\u8bbe\u7f6e\u8c03\u7528\u8005\u5bf9spender\u7684\u6388\u6743\u503c\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_transfer\u8fdb\u884c\u4ee3\u5e01\u8f6c\u8d26\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_approve\u66f4\u65b0\u8f6c\u8d26\u6e90\u5730\u5740sender\u5bf9\u8c03\u7528\u8005\u7684\u6388\u6743\u503c\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_approve\u589e\u52a0\u8c03\u7528\u8005\u5bf9spender\u7684\u6388\u6743\u503c\uff0c\u589e\u52a0\u503c\u4e3aaddedValue\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_approve\u51cf\u5c11\u8c03\u7528\u8005\u5bf9spender\u7684\u6388\u6743\u503c\uff0c\u51cf\u5c11\u503c\u4e3asubtractedValue\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\"); // \u6210\u90fd\u94fe\u5b89 // sender\u975e\u96f6\u5730\u5740\u68c0\u67e5\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\"); // \u6210\u90fd\u94fe\u5b89 // recipient\u975e\u96f6\u5730\u5740\u68c0\u67e5\uff0c\u907f\u514d\u8f6c\u8d26\u4ee3\u5e01\u4e22\u5931\r\n        // \u6210\u90fd\u94fe\u5b89 // \u4fee\u6539\u8f6c\u8d26\u53cc\u65b9\u5730\u5740\u7684\u4ee3\u5e01\u4f59\u989d\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1Transfer\u4e8b\u4ef6\r\n    }\r\n     /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\"); // \u6210\u90fd\u94fe\u5b89 // account\u975e\u96f6\u5730\u5740\u68c0\u67e5\r\n        _totalSupply = _totalSupply.add(amount); // \u6210\u90fd\u94fe\u5b89 // \u66f4\u65b0\u4ee3\u5e01\u603b\u91cf\r\n        _balances[account] = _balances[account].add(amount); // \u6210\u90fd\u94fe\u5b89 // \u4fee\u6539\u94f8\u5e01\u5730\u5740account\u7684\u4ee3\u5e01\u4f59\u989d\r\n        emit Transfer(address(0), account, amount); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1Transfer\u4e8b\u4ef6\r\n    }    \r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\"); // \u6210\u90fd\u94fe\u5b89 // account\u975e\u96f6\u5730\u5740\u68c0\u67e5\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); // \u6210\u90fd\u94fe\u5b89 // \u4fee\u6539\u4ee3\u5e01\u9500\u6bc1\u5730\u5740account\u7684\u4ee3\u5e01\u4f59\u989d\r\n        _totalSupply = _totalSupply.sub(amount); // \u6210\u90fd\u94fe\u5b89 // \u66f4\u65b0\u4ee3\u5e01\u603b\u91cf\r\n        emit Transfer(account, address(0), amount); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1Transfer\u4e8b\u4ef6\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\"); // \u6210\u90fd\u94fe\u5b89 // owner\u975e\u96f6\u5730\u5740\u68c0\u67e5\r\n        require(spender != address(0), \"ERC20: approve to the zero address\"); // \u6210\u90fd\u94fe\u5b89 // spender\u975e\u96f6\u5730\u5740\u68c0\u67e5\r\n\r\n        _allowances[owner][spender] = amount; // \u6210\u90fd\u94fe\u5b89 // \u8bbe\u7f6eowner\u5bf9spender\u7684\u6388\u6743\u503c\u4e3aamount\r\n        emit Approval(owner, spender, amount); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1Approval\u4e8b\u4ef6\r\n    }\r\n      \r\n    \r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address internal _owner; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u53d8\u91cf_owner\uff0c\u5b58\u50a8\u5408\u7ea6\u6240\u6709\u8005\u5730\u5740\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u5408\u7ea6\u6240\u6709\u8005\u6743\u9650\u8f6c\u79fb\u4e8b\u4ef6\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); // \u6210\u90fd\u94fe\u5b89 // \u4fee\u9970\u5668\uff0c\u8981\u6c42\u88ab\u4fee\u9970\u51fd\u6570\u7684\u8c03\u7528\u8005\u5fc5\u987b\u4e3a\u5408\u7ea6\u6240\u6709\u8005\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); // \u6210\u90fd\u94fe\u5b89 // newOwner\u975e\u96f6\u5730\u5740\u68c0\u67e5\uff0c\u907f\u514d\u5408\u7ea6\u6240\u6709\u8005\u6743\u9650\u4e22\u5931\r\n        emit OwnershipTransferred(_owner, newOwner); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1OwnershipTransferred\u4e8b\u4ef6\r\n        _owner = newOwner; // \u6210\u90fd\u94fe\u5b89 // \u8f6c\u79fb\u5408\u7ea6\u6240\u6709\u8005\u6743\u9650\u81f3newOwner\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\n abstract contract ERC20Mintable is Ownable, ERC20{\r\n    /**\r\n     * @dev See `ERC20._mint`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MinterRole`.\r\n     */\r\n    // \u6210\u90fd\u94fe\u5b89 // \u94f8\u5e01\u51fd\u6570\uff0c\u5408\u7ea6\u6240\u6709\u8005\u5411\u6307\u5b9a\u5730\u5740account\u94f8\u9020\u4e00\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\r\n    function mint(address account, uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(account, amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_mint\uff0c\u5411\u6307\u5b9a\u5730\u5740account\u8fdb\u884c\u94f8\u5e01\r\n        return true;\r\n    }\r\n}\r\nabstract contract ERC20Burnable is Ownable, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    // \u6210\u90fd\u94fe\u5b89 // \u4ee3\u5e01\u9500\u6bc1\u51fd\u6570\uff0c\u5408\u7ea6\u6240\u6709\u8005\u9500\u6bc1\u81ea\u8eab\u4e00\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\r\n    function burn(uint256 amount) public virtual  {\r\n        _burn(_msgSender(), amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_burn\u8fdb\u884c\u4ee3\u5e01\u9500\u6bc1\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    // \u6210\u90fd\u94fe\u5b89 // \u4ee3\u7406\u4ee3\u5e01\u9500\u6bc1\u51fd\u6570\uff0c\u5408\u7ea6\u6240\u6709\u8005\u4ee3\u7406\u6307\u5b9a\u4ee3\u5e01\u6301\u6709\u8005account\u9500\u6bc1\u4e00\u5b9a\u6570\u91cf\u7684\u4ee3\u5e01\r\n    function burnFrom(address account, uint256 amount) public virtual  {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_approve\u66f4\u65b0account\u5bf9\u8c03\u7528\u8005\u7684\u6388\u6743\u503c\r\n        _burn(account, amount); // \u6210\u90fd\u94fe\u5b89 // \u8c03\u7528\u5185\u90e8\u51fd\u6570_burn\u8fdb\u884c\u4ee3\u5e01\u9500\u6bc1\r\n    }\r\n}\r\n\r\ncontract CIPToken is ERC20Burnable , ERC20Mintable{\r\n    string public constant name = \"CYBERBANK IMPORTANT PARTHER\"; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u5e38\u91cfname\uff0c\u5b58\u50a8\u4ee3\u5e01\u540d\u79f0\u4e3aCYBERBANK IMPORTANT PARTHER\r\n    string public constant symbol = \"CIP\"; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u5e38\u91cfsymbol\uff0c\u5b58\u50a8\u4ee3\u5e01\u7b80\u79f0\u4e3aCIP\r\n    uint8 public constant decimals = 18; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u5e38\u91cfdecimals\uff0c\u5b58\u50a8\u4ee3\u5e01\u7cbe\u5ea6\u4e3a18\r\n    address public constant tokenOwner = 0x047572d7c46eb325064A849Abe69F7Ae46a5326C; // \u6210\u90fd\u94fe\u5b89 // \u58f0\u660e\u53d8\u91cftokenOwner\uff0c\u5b58\u50a8\u521d\u59cb\u4ee3\u5e01\u63a5\u6536\u5730\u5740\r\n    uint256 public constant INIT_TOTALSUPPLY = 210000; \r\n    \r\n    /**\r\n     * @dev Constructor.\r\n     */\r\n    constructor () public {\r\n        _owner = tokenOwner; // \u6210\u90fd\u94fe\u5b89 // \u521d\u59cb\u5316\u5408\u7ea6\u6240\u6709\u8005\u5730\u5740\u4e3atokenOwner\r\n        _totalSupply = INIT_TOTALSUPPLY.mul(10 ** uint256(decimals)); // \u6210\u90fd\u94fe\u5b89 // \u521d\u59cb\u5316\u4ee3\u5e01\u603b\u91cf\r\n        _balances[tokenOwner] = _totalSupply; // \u6210\u90fd\u94fe\u5b89 // \u53d1\u9001\u5168\u90e8\u4ee3\u5e01\u81f3tokenOwner\u5730\u5740\r\n        emit Transfer(address(0), tokenOwner, _totalSupply); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1Transfer\u4e8b\u4ef6\r\n        emit OwnershipTransferred(address(0), tokenOwner); // \u6210\u90fd\u94fe\u5b89 // \u89e6\u53d1OwnershipTransferred\u4e8b\u4ef6\r\n    }\r\n    // \u6210\u90fd\u94fe\u5b89 // \u6279\u91cf\u8f6c\u8d26\u51fd\u6570\uff0c\u4ec5owner\u53ef\u8c03\u7528\r\n    function batchTransfer(address[] memory _to, uint256[] memory _value) public onlyOwner returns (bool) {\r\n        require(_to.length > 0);\r\n        require(_to.length <= 150);\r\n        require(_to.length == _value.length);\r\n        for(uint256 k = 0; k < _to.length; k++){\r\n            _transfer(msg.sender, _to[k], _value[k]);\r\n        }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_TOTALSUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CIPToken", "CompilerVersion": "v0.6.1+commit.e6f7d5a4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0dc96141b5595d47d1616a86d4f7e4aa6ef418cd928fce8f8aa9c6c1d07cd3a"}]}