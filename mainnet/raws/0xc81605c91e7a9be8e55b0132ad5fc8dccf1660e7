{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ElementalbyFangLijunRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// An example of a consumer contract that relies on a subscription for funding.\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./LinkTokenInterface.sol\\\";\\r\\nimport \\\"./VRFCoordinator.sol\\\";\\r\\nimport \\\"./VRFConsumerBase.sol\\\";\\r\\n\\r\\ncontract ElementalbyFangLijunRandomizer is VRFConsumerBase {\\r\\n  VRFCoordinator COORDINATOR;\\r\\n  LinkTokenInterface LINKTOKEN;\\r\\n\\r\\n  // Your subscription ID.\\r\\n  uint64 s_subscriptionId;\\r\\n\\r\\n  // Rinkeby coordinator. For other networks,\\r\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n  address vrfCoordinator = 0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\\r\\n\\r\\n  // Rinkeby LINK token contract. For other networks,\\r\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n  address link = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\\r\\n\\r\\n  // The gas lane to use, which specifies the maximum gas price to bump to.\\r\\n  // For a list of available gas lanes on each network,\\r\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n  bytes32 keyHash = 0x9fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded86805;\\r\\n\\r\\n  uint32 callbackGasLimit = 100000;\\r\\n\\r\\n  // The default is 3, but you can set this higher.\\r\\n  uint16 requestConfirmations = 3;\\r\\n\\r\\n  uint32 numWords =  2;\\r\\n\\r\\n  uint256[] public random;\\r\\n  uint256 public randomnumber;\\r\\n  address s_owner;\\r\\n\\r\\n  constructor(uint64 subscriptionId) VRFConsumerBase(vrfCoordinator) {\\r\\n    COORDINATOR = VRFCoordinator(vrfCoordinator);\\r\\n    LINKTOKEN = LinkTokenInterface(link);\\r\\n    s_owner = msg.sender;\\r\\n    s_subscriptionId = subscriptionId;\\r\\n  }\\r\\n\\r\\n  // Assumes the subscription is funded sufficiently.\\r\\n  function requestRandom() external onlyOwner {\\r\\n    // Will revert if subscription is not set and funded.\\r\\n    randomnumber = COORDINATOR.requestRandomWords(\\r\\n      keyHash,\\r\\n      s_subscriptionId,\\r\\n      requestConfirmations,\\r\\n      callbackGasLimit,\\r\\n      numWords\\r\\n    );\\r\\n  }\\r\\n  \\r\\n  function fulfillRandomWords(\\r\\n    uint256, /* requestId */\\r\\n    uint256[] memory randomWords\\r\\n  ) internal override {\\r\\n    random = randomWords;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == s_owner);\\r\\n    _;\\r\\n  }\\r\\n}\\r\\n\"},\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface LinkTokenInterface {\\r\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool success);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  function decimals() external view returns (uint8 decimalPlaces);\\r\\n\\r\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\r\\n\\r\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\r\\n\\r\\n  function name() external view returns (string memory tokenName);\\r\\n\\r\\n  function symbol() external view returns (string memory tokenSymbol);\\r\\n\\r\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool success);\\r\\n\\r\\n  function transferAndCall(\\r\\n    address to,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external returns (bool success);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool success);\\r\\n}\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/** ****************************************************************************\\r\\n * @notice Interface for contracts using VRF randomness\\r\\n * *****************************************************************************\\r\\n * @dev PURPOSE\\r\\n *\\r\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\r\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\r\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\r\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\r\\n * @dev Reggie, he gives back a value which is computed completely\\r\\n * @dev deterministically from the seed and the secret key.\\r\\n *\\r\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\r\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\r\\n * @dev the output is indistinguishable to her from a uniform random sample\\r\\n * @dev from the output space.\\r\\n *\\r\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\r\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\r\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\r\\n * @dev 1. The fulfillment came from the VRFCoordinator\\r\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\r\\n * *****************************************************************************\\r\\n * @dev USAGE\\r\\n *\\r\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\r\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\r\\n * @dev shown:\\r\\n *\\r\\n * @dev   contract VRFConsumer {\\r\\n * @dev     constructor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\r\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\r\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\r\\n * @dev       }\\r\\n * @dev   }\\r\\n *\\r\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\r\\n * @dev committed to (let\\u0027s call it keyHash). Create subscription, fund it\\r\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\r\\n * @dev subscription management functions).\\r\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\r\\n * @dev callbackGasLimit, numWords),\\r\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\r\\n *\\r\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\r\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomWords method.\\r\\n *\\r\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\r\\n * @dev generated from your requestId and the blockHash of the request.\\r\\n *\\r\\n * @dev If your contract could have concurrent requests open, you can use the\\r\\n * @dev requestId returned from requestRandomWords to track which response is associated\\r\\n * @dev with which randomness request.\\r\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\r\\n * @dev if your contract could have multiple requests in flight simultaneously.\\r\\n *\\r\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\r\\n * @dev differ.\\r\\n *\\r\\n * *****************************************************************************\\r\\n * @dev SECURITY CONSIDERATIONS\\r\\n *\\r\\n * @dev A method with the ability to call your fulfillRandomness method directly\\r\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\r\\n * @dev it cannot be directly called by anything other than this base contract\\r\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\r\\n *\\r\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\r\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\r\\n * @dev behaviors implied by a VRF response are executed *during* your\\r\\n * @dev fulfillRandomness method. If your contract must store the response (or\\r\\n * @dev anything derived from it) and use it later, you must ensure that any\\r\\n * @dev user-significant behavior which depends on that stored value cannot be\\r\\n * @dev manipulated by a subsequent VRF request.\\r\\n *\\r\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\r\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\r\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\r\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\r\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\r\\n *\\r\\n * @dev Since the block hash of the block which contains the requestRandomness\\r\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\r\\n * @dev miner could, in principle, fork the blockchain to evict the block\\r\\n * @dev containing the request, forcing the request to be included in a\\r\\n * @dev different block with a different hash, and therefore a different input\\r\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\r\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\r\\n * @dev until it calls responds to a request. It is for this reason that\\r\\n * @dev that you can signal to an oracle you\\u0027d like them to wait longer before\\r\\n * @dev responding to the request (however this is not enforced in the contract\\r\\n * @dev and so remains effective only in the case of unmodified oracle software).\\r\\n */\\r\\nabstract contract VRFConsumerBase {\\r\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\r\\n  address private immutable vrfCoordinator;\\r\\n\\r\\n  /**\\r\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\r\\n   */\\r\\n  constructor(address _vrfCoordinator) {\\r\\n    vrfCoordinator = _vrfCoordinator;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\r\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\r\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\r\\n   * @notice method.\\r\\n   *\\r\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\r\\n   * @dev signature, and will call it once it has verified the proof\\r\\n   * @dev associated with the randomness. (It is triggered via a call to\\r\\n   * @dev rawFulfillRandomness, below.)\\r\\n   *\\r\\n   * @param requestId The Id initially returned by requestRandomness\\r\\n   * @param randomWords the VRF output expanded to the requested number of words\\r\\n   */\\r\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\r\\n\\r\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\r\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\r\\n  // the origin of the call\\r\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\r\\n    if (msg.sender != vrfCoordinator) {\\r\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\r\\n    }\\r\\n    fulfillRandomWords(requestId, randomWords);\\r\\n  }\\r\\n}\"},\"VRFCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface VRFCoordinator {\\r\\n  /**\\r\\n   * @notice Get configuration relevant for making requests\\r\\n   * @return minimumRequestConfirmations global min for request confirmations\\r\\n   * @return maxGasLimit global max for request gas limit\\r\\n   * @return s_provingKeyHashes list of registered key hashes\\r\\n   */\\r\\n  function getRequestConfig()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint16,\\r\\n      uint32,\\r\\n      bytes32[] memory\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Request a set of random words.\\r\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\r\\n   * that key for generating the VRF proof. Different keyHash\\u0027s have different gas price\\r\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\r\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\r\\n   * with the minimum subscription balance required for the selected keyHash.\\r\\n   * @param minimumRequestConfirmations - How many blocks you\\u0027d like the\\r\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\r\\n   * for why you may want to request more. The acceptable range is\\r\\n   * [minimumRequestBlockConfirmations, 200].\\r\\n   * @param callbackGasLimit - How much gas you\\u0027d like to receive in your\\r\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\r\\n   * may be slightly less than this amount because of gas used calling the function\\r\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\r\\n   * to have inside fulfillRandomWords. The acceptable range is\\r\\n   * [0, maxGasLimit]\\r\\n   * @param numWords - The number of uint256 random values you\\u0027d like to receive\\r\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\r\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\r\\n   * @return requestId - A unique identifier of the request. Can be used to match\\r\\n   * a request to a response in fulfillRandomWords.\\r\\n   */\\r\\n  function requestRandomWords(\\r\\n    bytes32 keyHash,\\r\\n    uint64 subId,\\r\\n    uint16 minimumRequestConfirmations,\\r\\n    uint32 callbackGasLimit,\\r\\n    uint32 numWords\\r\\n  ) external returns (uint256 requestId);\\r\\n\\r\\n  /**\\r\\n   * @notice Create a VRF subscription.\\r\\n   * @return subId - A unique subscription id.\\r\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\r\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\r\\n   * @dev  LINKTOKEN.transferAndCall(\\r\\n   * @dev    address(COORDINATOR),\\r\\n   * @dev    amount,\\r\\n   * @dev    abi.encode(subId));\\r\\n   */\\r\\n  function createSubscription() external returns (uint64 subId);\\r\\n\\r\\n  /**\\r\\n   * @notice Get a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @return balance - LINK balance of the subscription in juels.\\r\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\r\\n   * @return owner - owner of the subscription.\\r\\n   * @return consumers - list of consumer address which are able to use this subscription.\\r\\n   */\\r\\n  function getSubscription(uint64 subId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint96 balance,\\r\\n      uint64 reqCount,\\r\\n      address owner,\\r\\n      address[] memory consumers\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Request subscription owner transfer.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param newOwner - proposed new owner of the subscription\\r\\n   */\\r\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Request subscription owner transfer.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @dev will revert if original owner of subId has\\r\\n   * not requested that msg.sender become the new owner.\\r\\n   */\\r\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add a consumer to a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param consumer - New consumer which can use the subscription\\r\\n   */\\r\\n  function addConsumer(uint64 subId, address consumer) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Remove a consumer from a VRF subscription.\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param consumer - Consumer to remove from the subscription\\r\\n   */\\r\\n  function removeConsumer(uint64 subId, address consumer) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Cancel a subscription\\r\\n   * @param subId - ID of the subscription\\r\\n   * @param to - Where to send the remaining LINK to\\r\\n   */\\r\\n  function cancelSubscription(uint64 subId, address to) external;\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomnumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElementalbyFangLijunRandomizer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a40d1ed3b0fc33d90c8dfcd8ffff0d6cf0ab1a7fb188dfca93d9298341461cea"}]}