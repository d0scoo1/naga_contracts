{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/auction/DopamineAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// DoapmineAuctionHouse is a modification of Nouns DAO's NounsAuctionHouse.sol:\\n/// https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/NounsAuctionHouse.sol\\n/// Copyright licensing is under the GPL-3.0 license, as the above contract\\n/// is itself a modification of Zora's Auction House (GPL-3.0 licensed).\\n///\\n/// The following major changes were made from the original Nouns DAO contract:\\n/// - `SettleCurrentAndCreateNewAuction()` and `SettleAuction()` were unified\\n///   into a single `SettleAuction()` function that can be called, paused or not\\n/// - Auctions begin with `auction.settled = true` to make settlements simpler\\n/// - The semantics around pausing vs. unpausing were changed to orient around\\n///   suspension of NEW auctions (pausing has no effect on the current auction)\\n/// - `AuctionCreationFailed` event added to indicate failed auction creation\\n/// - Proxy was changed from OZ's TransparentUpgradeableProxy to OZ's UUPS proxy\\n/// - Support for WETH as a fallback for failed ETH refunds was removed\\n/// - Support for splitting auction revenue with another address was added\\n/// - Failed ETH refunds now emit `RefundFailed` events\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport '../interfaces/Errors.sol';\\nimport { IDopamineAuctionHouse } from \\\"../interfaces/IDopamineAuctionHouse.sol\\\";\\nimport { IDopamineAuctionHouseToken } from \\\"../interfaces/IDopamineAuctionHouseToken.sol\\\";\\nimport { DopamineAuctionHouseStorage } from \\\"./DopamineAuctionHouseStorage.sol\\\";\\n\\n/// @title Dopamine Auction House Contract\\n/// @notice The Dopamine auction house contract is an English auctions platform\\n///  that auctions NFTs of a given collection at `auctionDuration` intervals.\\n///  This contract specifically configures seasonal emissions for Dopamine tabs.\\ncontract DopamineAuctionHouse is UUPSUpgradeable, DopamineAuctionHouseStorage, IDopamineAuctionHouse {\\n\\n    /// @notice The min % difference a bidder must bid relative to the last bid.\\n    uint256 public constant MIN_BID_DIFF = 5;\\n\\n    /// @notice The minimum time buffer in seconds that can be set for auctions.\\n    uint256 public constant MIN_AUCTION_BUFFER = 60 seconds;\\n\\n    /// @notice The maximum time buffer in seconds that can be set for auctions.\\n    uint256 public constant MAX_AUCTION_BUFFER = 24 hours;\\n\\n    /// @notice The minimum reserve price in wei that can be set for auctions.\\n    uint256 public constant MIN_RESERVE_PRICE = 1 wei;\\n\\n    /// @notice The maximum reserve price in wei that can be set for auctions.\\n    uint256 public constant MAX_RESERVE_PRICE = 99 ether;\\n\\n    /// @notice The minimum time period in seconds an auction can run for.\\n    uint256 public constant MIN_AUCTION_DURATION = 30 minutes;\\n\\n    /// @notice The maximum time period in seconds an auction can run for.\\n    uint256 public constant MAX_AUCTION_DURATION = 1 weeks;\\n\\n    /// @dev Gas-efficient reentrancy & suspension markers marking true / false.\\n    uint256 private constant _TRUE = 1;\\n    uint256 private constant _FALSE = 2;\\n\\n    /// @dev This modifier restrict calls to only the admin.\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) {\\n            revert AdminOnly();\\n        }\\n        _;\\n    }\\n\\n    /// @dev This modifier acts as a reentrancy guard.\\n    modifier nonReentrant() {\\n        if (_locked != _FALSE) {\\n            revert FunctionReentrant();\\n        }\\n        _locked = _TRUE;\\n        _;\\n        _locked = _FALSE;\\n    }\\n\\n    /// @notice Initializes the Dopamine auction house contract.\\n    /// @param token_ The address of the NFT up for auction.\\n    /// @param reserve_ Address of the Dopamine reserve.\\n    /// @param treasury_ Address of the Dopamine treasury.\\n    /// @param treasurySplit_ Sale % given to `treasury_` (rest to `reserve_`).\\n    /// @param auctionBuffer_ Time window in seconds auctions may be extended.\\n    /// @param reservePrice_ The minimum bidding price for auctions in wei.\\n    /// @param auctionDuration_ How long in seconds an auction may be up for.\\n    function initialize(\\n        address token_,\\n        address payable reserve_,\\n        address payable treasury_,\\n        uint256 treasurySplit_,\\n        uint256 auctionBuffer_,\\n        uint256 reservePrice_,\\n        uint256 auctionDuration_\\n    ) onlyProxy external {\\n        if (address(token) != address(0)) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        _suspended = _TRUE;\\n        _locked = _FALSE;\\n\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), admin);\\n\\n        token = IDopamineAuctionHouseToken(token_);\\n        auction.settled = true;\\n\\n        setTreasury(treasury_);\\n        setReserve(reserve_);\\n        setTreasurySplit(treasurySplit_);\\n        setAuctionBuffer(auctionBuffer_);\\n        setReservePrice(reservePrice_);\\n        setAuctionDuration(auctionDuration_);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function suspended() external view returns (bool) {\\n        return _suspended == _TRUE;\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function suspendNewAuctions() external onlyAdmin {\\n        if (_suspended == _TRUE) {\\n            revert AuctionAlreadySuspended();\\n        }\\n        _suspended = _TRUE;\\n        emit AuctionSuspended();\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function resumeNewAuctions() external onlyAdmin {\\n\\n        // This function can only be called if auctions are currently suspended.\\n        if (_suspended == _FALSE) {\\n            revert AuctionNotSuspended();\\n        }\\n\\n        // Unless auction settles and ensuing creation fails, resume auctions.\\n        if (!auction.settled || _createAuction()) {\\n            _suspended = _FALSE;\\n            emit AuctionResumed();\\n        }\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function settleAuction() external nonReentrant {\\n        _settleAuction();\\n\\n        // If auctions are live, create a new auction but suspend under failure.\\n        if (_suspended != _TRUE && !_createAuction()) {\\n            _suspended = _TRUE;\\n            emit AuctionSuspended();\\n        }\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function createBid(uint256 tokenId) external payable nonReentrant {\\n        if (block.timestamp > auction.endTime) {\\n            revert AuctionExpired();\\n        }\\n        if (auction.tokenId != tokenId) {\\n            revert AuctionBidInvalid();\\n        }\\n        if (\\n            msg.value < reservePrice ||\\n            msg.value < auction.amount + ((auction.amount * MIN_BID_DIFF) / 100)\\n        ) {\\n            revert AuctionBidTooLow();\\n        }\\n\\n        address payable lastBidder = auction.bidder;\\n\\n        // Emit a `RefundFailed` event if the refund to the last bidder fails.\\n        // This only happens if the bidder is a contract not accepting payments.\\n        if (\\n            lastBidder != address(0) &&\\n            !_transferETH(lastBidder, auction.amount)\\n        )\\n        {\\n            _transferETH(treasury, auction.amount);\\n            emit RefundFailed(lastBidder);\\n        }\\n\\n        auction.amount = msg.value;\\n        auction.bidder = payable(msg.sender);\\n\\n        // Extend auction if bid is received within `auctionBuffer` of end time.\\n        bool extended = auction.endTime - block.timestamp < auctionBuffer;\\n        emit AuctionBid(auction.tokenId, msg.sender, msg.value, extended);\\n\\n        if (extended) {\\n            auction.endTime = block.timestamp + auctionBuffer;\\n            emit AuctionExtended(tokenId, auction.endTime);\\n        }\\n\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function acceptAdmin() public override {\\n        if (msg.sender != pendingAdmin) {\\n            revert PendingAdminOnly();\\n        }\\n\\n        emit AdminChanged(admin, pendingAdmin);\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setPendingAdmin(address newPendingAdmin) public override onlyAdmin {\\n        pendingAdmin = newPendingAdmin;\\n        emit PendingAdminSet(pendingAdmin);\\n    }\\n\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setTreasury(address payable newTreasury) public onlyAdmin {\\n        treasury = newTreasury;\\n        emit TreasurySet(treasury);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setReserve(address payable newReserve) public onlyAdmin {\\n        reserve = newReserve;\\n        emit ReserveSet(reserve);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setAuctionDuration(uint256 newAuctionDuration) public onlyAdmin {\\n        if (\\n            newAuctionDuration < MIN_AUCTION_DURATION ||\\n            newAuctionDuration > MAX_AUCTION_DURATION\\n        ) {\\n            revert AuctionDurationInvalid();\\n        }\\n        auctionDuration = newAuctionDuration;\\n        emit AuctionDurationSet(auctionDuration);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setTreasurySplit(uint256 newTreasurySplit)\\n        public override onlyAdmin\\n    {\\n        if (newTreasurySplit > 100) {\\n            revert AuctionTreasurySplitInvalid();\\n        }\\n        treasurySplit = newTreasurySplit;\\n        emit AuctionTreasurySplitSet(treasurySplit);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setAuctionBuffer(uint256 newAuctionBuffer)\\n        public\\n        override\\n        onlyAdmin\\n    {\\n        if (\\n            newAuctionBuffer < MIN_AUCTION_BUFFER ||\\n            newAuctionBuffer > MAX_AUCTION_BUFFER\\n        ) {\\n            revert AuctionBufferInvalid();\\n        }\\n        auctionBuffer = newAuctionBuffer;\\n        emit AuctionBufferSet(auctionBuffer);\\n    }\\n\\n    /// @inheritdoc IDopamineAuctionHouse\\n    function setReservePrice(uint256 newReservePrice)\\n        public\\n        override\\n        onlyAdmin\\n    {\\n        if (\\n            newReservePrice < MIN_RESERVE_PRICE ||\\n            newReservePrice > MAX_RESERVE_PRICE\\n        ) {\\n            revert AuctionReservePriceInvalid();\\n        }\\n        reservePrice = newReservePrice;\\n        emit AuctionReservePriceSet(reservePrice);\\n    }\\n\\n    /// @dev Puts the NFT produced by `token.mint()` up for auction.\\n    /// @return created True if auction creation succeeds, false otherwise.\\n    function _createAuction() internal returns (bool created) {\\n        try token.mint() returns (uint256 tokenId) {\\n            uint256 startTime = block.timestamp;\\n            uint256 endTime = startTime + auctionDuration;\\n\\n            auction = Auction({\\n                tokenId: tokenId,\\n                amount: 0,\\n                startTime: startTime,\\n                endTime: endTime,\\n                bidder: payable(0),\\n                settled: false\\n            });\\n\\n            created = true;\\n            emit AuctionCreated(tokenId, startTime, endTime);\\n        } catch {\\n            emit AuctionCreationFailed();\\n        }\\n    }\\n\\n    /// @dev Settles the auction, transferring the NFT to the winning bidder.\\n    function _settleAuction() internal {\\n        if (auction.settled) {\\n            revert AuctionAlreadySettled();\\n        }\\n\\n        if (block.timestamp < auction.endTime) {\\n            revert AuctionOngoing();\\n        }\\n\\n        auction.settled = true;\\n\\n        if (auction.bidder == address(0)) {\\n            token.transferFrom(address(this), treasury, auction.tokenId);\\n        } else {\\n            token.transferFrom(address(this), auction.bidder, auction.tokenId);\\n        }\\n\\n        if (auction.amount > 0) {\\n            uint256 treasuryProceeds = auction.amount * treasurySplit / 100;\\n            uint256 reserveProceeds = auction.amount - treasuryProceeds;\\n            _transferETH(treasury, treasuryProceeds);\\n            if (reserveProceeds != 0) {\\n                _transferETH(reserve, reserveProceeds);\\n            }\\n        }\\n\\n        emit AuctionSettled(auction.tokenId, auction.bidder, auction.amount);\\n    }\\n\\n    /// @dev Transfers `value` wei to address `to`, forwarding a max of 30k gas.\\n    /// @return True if transfer is successful, False otherwise.\\n    function _transferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\n        return success;\\n    }\\n\\n    /// @dev Performs an admin authorization check for UUPS upgrades.\\n    function _authorizeUpgrade(address) internal view override {\\n        if (msg.sender != admin) {\\n            revert UpgradeUnauthorized();\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n// This file is a shared repository of all errors used in Dopamine's contracts.\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                              Dopamine Tab                                ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Configured drop delay is invalid.\\nerror DropDelayInvalid();\\n\\n/// @notice Drop identifier is invalid.\\nerror DropInvalid();\\n\\n/// @notice Drop details may no longer be modified.\\nerror DropImmutable();\\n\\n/// @notice Drop hit max allocatable capacity.\\nerror DropMaxCapacity();\\n\\n/// @notice No such drop exists.\\nerror DropNonExistent();\\n\\n/// @notice Action cannot be completed as a current drop is ongoing.\\nerror DropOngoing();\\n\\n/// @notice Configured drop size is invalid.\\nerror DropSizeInvalid();\\n\\n/// @notice Drop starting index is incorrect.\\nerror DropStartInvalid();\\n\\n/// @notice Insufficient time passed since last drop was created.\\nerror DropTooEarly();\\n\\n/// @notice Configured allowlist size is too large.\\nerror DropAllowlistOverCapacity();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                          Dopamine Auction House                          ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Auction has already been settled.\\nerror AuctionAlreadySettled();\\n\\n/// @notice Operation cannot be performed as auction is already suspended.\\nerror AuctionAlreadySuspended();\\n\\n/// @notice The NFT specified in the auction bid is invalid.\\nerror AuctionBidInvalid();\\n\\n/// @notice Bid placed was too low.\\nerror AuctionBidTooLow();\\n\\n/// @notice Auction duration set is invalid.\\nerror AuctionDurationInvalid();\\n\\n/// @notice The auction has expired.\\nerror AuctionExpired();\\n\\n/// @notice Operation cannot be performed as auction is not suspended.\\nerror AuctionNotSuspended();\\n\\n/// @notice Auction has yet to complete.\\nerror AuctionOngoing();\\n\\n/// @notice Reserve price set is invalid.\\nerror AuctionReservePriceInvalid();\\n\\n/// @notice Time buffer set is invalid.\\nerror AuctionBufferInvalid();\\n\\n/// @notice Treasury split is invalid, must be in range [0, 100].\\nerror AuctionTreasurySplitInvalid();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                              Miscellaneous                               ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Mismatch between input arrays.\\nerror ArityMismatch();\\n\\n/// @notice Block number being queried is invalid.\\nerror BlockInvalid();\\n\\n/// @notice Reentrancy vulnerability.\\nerror FunctionReentrant();\\n\\n/// @notice Number does not fit in 32 bytes.\\nerror Uint32ConversionInvalid();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                                 Upgrades                                 ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Contract already initialized.\\nerror ContractAlreadyInitialized();\\n\\n/// @notice Upgrade requires either admin or vetoer privileges.\\nerror UpgradeUnauthorized();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                                 EIP-712                                  ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Signature has expired and is no longer valid.\\nerror SignatureExpired();\\n\\n/// @notice Signature invalid.\\nerror SignatureInvalid();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                                 EIP-721                                  ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Originating address does not own the NFT.\\nerror OwnerInvalid();\\n\\n/// @notice Receiving address cannot be the zero address.\\nerror ReceiverInvalid();\\n\\n/// @notice Receiving contract does not implement the ERC-721 wallet interface.\\nerror SafeTransferUnsupported();\\n\\n/// @notice Sender is not NFT owner, approved address, or owner operator.\\nerror SenderUnauthorized();\\n\\n/// @notice NFT supply has hit maximum capacity.\\nerror SupplyMaxCapacity();\\n\\n/// @notice Token has already minted.\\nerror TokenAlreadyMinted();\\n\\n/// @notice NFT does not exist.\\nerror TokenNonExistent();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                              Administrative                              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Function callable only by the admin.\\nerror AdminOnly();\\n\\n/// @notice Function callable only by the minter.\\nerror MinterOnly();\\n\\n/// @notice Function callable only by the owner.\\nerror OwnerOnly();\\n\\n/// @notice Function callable only by the pending owner.\\nerror PendingAdminOnly();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                                Governance                                ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Invalid number of actions proposed.\\nerror ProposalActionCountInvalid();\\n\\n/// @notice Proposal has already been settled.\\nerror ProposalAlreadySettled();\\n\\n/// @notice Inactive proposals may not be voted for.\\nerror ProposalInactive();\\n\\n/// @notice Proposal has failed to or has yet to be queued.\\nerror ProposalNotYetQueued();\\n\\n/// @notice Quorum threshold is invalid.\\nerror ProposalQuorumThresholdInvalid();\\n\\n/// @notice Proposal threshold is invalid.\\nerror ProposalThresholdInvalid();\\n\\n/// @notice Proposal has failed to or has yet to be successful.\\nerror ProposalUnpassed();\\n\\n/// @notice A proposal is currently running and must be settled first.\\nerror ProposalUnsettled();\\n\\n/// @notice Voting delay set is invalid.\\nerror ProposalVotingDelayInvalid();\\n\\n/// @notice Voting period set is invalid.\\nerror ProposalVotingPeriodInvalid();\\n\\n/// @notice Only the proposer may invoke this action.\\nerror ProposerOnly();\\n\\n/// @notice Function callable only by the vetoer.\\nerror VetoerOnly();\\n\\n/// @notice Veto power has been revoked.\\nerror VetoPowerRevoked();\\n\\n/// @notice Proposal already voted for.\\nerror VoteAlreadyCast();\\n\\n/// @notice Vote type is not valid.\\nerror VoteInvalid();\\n\\n/// @notice Voting power insufficient.\\nerror VotingPowerInsufficient();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                                 Timelock                                 ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Invalid set timelock delay.\\nerror TimelockDelayInvalid();\\n\\n/// @notice Function callable only by the timelock itself.\\nerror TimelockOnly();\\n\\n/// @notice Duplicate transaction queued.\\nerror TransactionAlreadyQueued();\\n\\n/// @notice Transaction is not yet queued.\\nerror TransactionNotYetQueued();\\n\\n/// @notice Transaction executed prematurely.\\nerror TransactionPremature();\\n\\n/// @notice Transaction execution was reverted.\\nerror TransactionReverted();\\n\\n/// @notice Transaction is stale.\\nerror TransactionStale();\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///                             Merkle Allowlist                             ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Claim drop identifier is invalid.\\nerror ClaimInvalid();\\n\\n/// @notice Proof for claim is invalid.\\nerror ProofInvalid();\\n\\n///////////////////////////////////////////////////////////////////////////////\\n///                           EIP-2981 Royalties                             ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @notice Royalties are set too high.\\nerror RoyaltiesTooHigh();\\n\"\r\n    },\r\n    \"src/interfaces/IDopamineAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\nimport { IDopamineAuctionHouseEvents } from \\\"./IDopamineAuctionHouseEvents.sol\\\";\\n\\n/// @title Dopamine DAO Auction House Interface\\ninterface IDopamineAuctionHouse is IDopamineAuctionHouseEvents {\\n\\n    /// @notice Auction struct that encapsulates the ongoing English auction.\\n    struct Auction {\\n\\n        /// @notice The id of the NFT being auctioned.\\n        uint256 tokenId;\\n\\n        /// @notice The highest bid in wei placed so far for the auction.\\n        uint256 amount;\\n\\n        /// @notice The epoch timestamp at which the auction started.\\n        uint256 startTime;\\n\\n        /// @notice The epoch timestamp projected for the auction to end.\\n        uint256 endTime;\\n\\n        /// @notice The address of the bidder with the highest bid so far.\\n        address payable bidder;\\n\\n        /// @notice A boolean indicating whether the auction has been settled.\\n        bool settled;\\n    }\\n\\n    /// @notice Indicates whether new auctions are suspened or not.\\n    /// @return True if new auctions are suspended, False otherwise.\\n    function suspended() external view returns (bool);\\n\\n    /// @notice Suspends new auctions from being created.\\n    /// @dev Reverts if not called by admin or auctions are already suspended.\\n    ///  Note that suspension does not interfere with the ongoing auction.\\n    function suspendNewAuctions() external;\\n\\n    /// @notice Resumes creation of new auctions.\\n    /// @dev Reverts if not called by admin or auctions are already live.\\n    ///  If the existing auction has already settled, then a new auction will\\n    ///  be created. If minting on creation fails, the auction stays suspended.\\n    function resumeNewAuctions() external;\\n\\n    /// @notice Settles ongoing auction and creates a new one if unsuspended.\\n    /// @dev Throws if current auction ongoing or already settled. 2 scenarios:\\n    ///  [Suspended]:   Current auction settles.\\n    ///  [Unsuspended]: Current auction settles, and a new auction is created.\\n    ///  If in the latter case creation fails, new auctions will be suspended.\\n    function settleAuction() external;\\n\\n    /// @notice Place a bid for the current NFT being auctioned.\\n    /// @dev Reverts if invalid NFT specified, the auction has expired, or the\\n    ///  placed bid is not at least `MIN_BID_DIFF` % higher than the last bid.\\n    /// @param tokenId The identifier of the NFT currently being auctioned.\\n    function createBid(uint256 tokenId) external payable;\\n\\n    /// @notice Sets a new pending admin `newPendingAdmin`.\\n    /// @dev This function throws if not called by the current admin.\\n    /// @param newPendingAdmin The address of the new pending admin.\\n    function setPendingAdmin(address newPendingAdmin) external;\\n\\n    /// @notice Convert the current `pendingAdmin` to the new `admin`.\\n    /// @dev This function throws if not called by the current pending admin.\\n    function acceptAdmin() external;\\n\\n    /// @notice Sets a new auctions bidding duration, `newAuctionDuration`.\\n    /// @dev This function is only callable by the admin, and throws if the\\n    ///  auction duration is set too low or too high.\\n    /// @param newAuctionDuration New auction duration to set, in seconds.\\n    function setAuctionDuration(uint256 newAuctionDuration) external;\\n\\n    /// @notice Sets a new treasury split, `newTreasurySplit`.\\n    /// @dev This function is only callable by the admin, and throws if the\\n    ///  new treasury split is set to a percentage above 100%.\\n    /// @param newTreasurySplit The new treasury split to set, as a percentage.\\n    function setTreasurySplit(uint256 newTreasurySplit) external;\\n\\n    /// @notice Sets a new auction time buffer, `newAuctionBuffer`.\\n    /// @dev This function is only callable by the admin and throws if the time\\n    ///  buffer is set too low or too high.\\n    /// @param newAuctionBuffer The time buffer to set, in seconds since epoch.\\n    function setAuctionBuffer(uint256 newAuctionBuffer) external;\\n\\n    /// @notice Sets a new auction reserve price, `newReservePrice`.\\n    /// @dev This function is only callable by the admin and throws if the\\n    ///  auction reserve price is set too low or too high.\\n    /// @param newReservePrice The new reserve price to set, in wei.\\n    function setReservePrice(uint256 newReservePrice) external;\\n\\n    /// @notice Sets the treasury address to `newTreasury`.\\n    /// @dev This function is only callable by the admin.\\n    /// @param newTreasury The new treasury address to set.\\n    function setTreasury(address payable newTreasury) external;\\n\\n    /// @notice Sets the reserve address to `newReserve`.\\n    /// @dev This function is only callable by the admin.\\n    /// @param newReserve The new reserve address to set.\\n    function setReserve(address payable newReserve) external;\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDopamineAuctionHouseToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title Dopamine DAO Auction House Token\\n/// @notice Any contract implementing the provided interface can be integrated\\n///  into the Dopamine DAO Auction House platform. Although originally intended\\n///  only for the Dopamine ERC-721 tab, it is possible that the auction platform \\n///  will be reused for English auctions of other NFTs.\\ninterface IDopamineAuctionHouseToken is IERC721 {\\n\\n    function mint() external returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"src/auction/DopamineAuctionHouseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\nimport { IDopamineAuctionHouse } from \\\"../interfaces/IDopamineAuctionHouse.sol\\\";\\nimport { IDopamineAuctionHouseToken } from \\\"../interfaces/IDopamineAuctionHouseToken.sol\\\";\\n\\n/// @title Dopamine Auction House Storage Contract\\n/// @dev Upgrades involving new storage variables should utilize a new contract\\n///  inheriting the prior storage contract. This would look like the following:\\n/// `contract DopamineAuctionHouseStorageV1 is DopamineAuctionHouseStorage {}`\\n/// `contract DopamineAuctionHouseStorageV2 is DopamineAuctionHouseStorageV1 {}`\\ncontract DopamineAuctionHouseStorage {\\n\\n    /// @notice Address of temporary admin that will become admin once accepted.\\n    address public pendingAdmin;\\n\\n    /// @notice The address administering auctions and thus token emissions.\\n    address public admin;\\n\\n    /// @notice The time window in seconds to extend bids that are placed within\\n    ///  `auctionBuffer` seconds from the auction's end time.\\n    uint256 public auctionBuffer;\\n\\n    /// @notice The English auction starting reserve price.\\n    uint256 public reservePrice;\\n\\n    /// @notice The percentage of auction revenue directed to the treasury.\\n    uint256 public treasurySplit;\\n\\n    /// @notice The initial duration in seconds to allot for a single auction.\\n    uint256 public auctionDuration;\\n\\n    /// @notice The address of the Dopamine treasury.\\n    address payable public treasury;\\n\\n    /// @notice The address of the Dopamine reserve.\\n    address payable public reserve;\\n\\n    /// @notice The Dopamine auction house ERC-721 token.\\n    IDopamineAuctionHouseToken public token;\\n\\n    /// @notice The ongoing auction being run.\\n    IDopamineAuctionHouse.Auction public auction;\\n\\n    /// @dev A uint marker for preventing reentrancy (locked = 1, unlocked = 2).\\n    uint256 internal _locked;\\n\\n    /// @dev A boolean indicating whether or not the auction is suspended.\\n    uint256 internal _suspended;\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDopamineAuctionHouseEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\n////////////////////////////////////////////////////////////////////////////////\\n///              \u2591\u2592\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2588\u2591\u2592\u2588\u2580\u2580\u2588\u2591\u2588\u2580\u2580\u2584\u2591\u2592\u2588\u2580\u2584\u2580\u2588\u2591\u2584\u2588\u2591\u2591\u2592\u2588\u2584\u2591\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2588\u2584\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2588\u2592\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2591\u2588\u2592\u2591\u2592\u2588\u2592\u2588\u2592\u2588\u2591\u2592\u2588\u2580\u2580\u2580              ///\\n///              \u2591\u2592\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2592\u2588\u2591\u2591\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2592\u2588\u2591\u2591\u2592\u2588\u2591\u2584\u2588\u2584\u2591\u2592\u2588\u2591\u2591\u2580\u2588\u2591\u2592\u2588\u2584\u2584\u2584              ///\\n////////////////////////////////////////////////////////////////////////////////\\n\\n/// @title Dopamine Auction House Events Interface\\ninterface IDopamineAuctionHouseEvents {\\n\\n    /// @notice Emits when a new auction is created.\\n    /// @param tokenId The id of the NFT put up for auction.\\n    /// @param startTime The timestamp in epoch seconds the auction was created.\\n    /// @param endTime The projected end time of the auction in epoch seconds.\\n    event AuctionCreated(\\n        uint256 indexed tokenId,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    /// @notice Emits when the auction for NFT `tokenId` is extended.\\n    /// @param tokenId The id of the NFT being auctioned.\\n    /// @param endTime The new auction end time as an epoch timestamp.\\n    event AuctionExtended(\\n        uint256 indexed tokenId,\\n        uint256 endTime\\n    );\\n\\n    /// @notice Emits when auction for NFT of id `tokenId` is settled.\\n    /// @param tokenId The id of the NFT being auctioned.\\n    /// @param winner The address of the auction winner.\\n    /// @param amount The amount in wei the winner paid for the auction.\\n    event AuctionSettled(\\n        uint256 indexed tokenId,\\n        address winner,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emits when a new bid is placed for NFT of id `tokenId`.\\n    /// @param tokenId The id of the NFT being bid on.\\n    /// @param bidder The address which placed the bid.\\n    /// @param extended True if the bid triggered extension, False otherwise.\\n    event AuctionBid(\\n        uint256 indexed tokenId,\\n        address bidder,\\n        uint256 value,\\n        bool extended\\n    );\\n\\n    /// @notice Emits when auction creation fails (due to NFT mint reverting).\\n    event AuctionCreationFailed();\\n\\n    /// @notice Emits when a refund fails for bidder `bidder`.\\n    /// @param bidder The address of the bidder which does not accept payments.\\n    event RefundFailed(address bidder);\\n\\n    /// @notice Emits when the auction is suspended.\\n    event AuctionSuspended();\\n\\n    /// @notice Emits when the auction is unpaused.\\n    event AuctionResumed();\\n\\n    /// @notice Emits when a new auctionbuffer `auctionBuffer` is set.\\n    /// @param auctionBuffer The new auction buffer to set, in seconds.\\n    event AuctionBufferSet(uint256 auctionBuffer);\\n\\n    /// @notice Emits when a new auction reserve price, `reservePrice` is set.\\n    /// @param reservePrice The new auction reserve price in wei.\\n    event AuctionReservePriceSet(uint256 reservePrice);\\n\\n    /// @notice Emits when a new auction treasury split `treasurySplit` is set.\\n    /// @param treasurySplit The percentage of auction revenue sent to treasury.\\n    event AuctionTreasurySplitSet(uint256 treasurySplit);\\n\\n    /// @notice Emits when a new auction duration `auctionDuration` is set.\\n    /// @param auctionDuration The time in seconds an auction will run for.\\n    event AuctionDurationSet(uint256 auctionDuration);\\n\\n    /// @notice Emits when a new pending admin `pendingAdmin` is set.\\n    /// @param pendingAdmin The new address of the pending admin that was set.\\n    event PendingAdminSet(address indexed pendingAdmin);\\n\\n    /// @notice Emits when a new treasury address `treasury` is set.\\n    /// @param treasury The new address of the treasury that was set.\\n    event TreasurySet(address indexed treasury);\\n\\n    /// @notice Emits when a new reserve address `reserve` is set.\\n    /// @param reserve The new address of the reserve that was set.\\n    event ReserveSet(address indexed reserve);\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AdminOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionAlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionAlreadySuspended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionBidInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionBidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionBufferInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionDurationInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotSuspended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionOngoing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionReservePriceInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionTreasurySplitInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionReentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingAdminOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpgradeUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionBufferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionCreationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasurySplit\",\"type\":\"uint256\"}],\"name\":\"AuctionTreasurySplitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"PendingAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"RefundFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"ReserveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AUCTION_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESERVE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUCTION_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID_DIFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RESERVE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"reserve_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"treasurySplit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionBuffer_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeNewAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionBuffer\",\"type\":\"uint256\"}],\"name\":\"setAuctionBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newReserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasurySplit\",\"type\":\"uint256\"}],\"name\":\"setTreasurySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspendNewAuctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IDopamineAuctionHouseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasurySplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "DopamineAuctionHouse", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}