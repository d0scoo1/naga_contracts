{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: CC0-1.0\r\npragma solidity 0.8.11;\r\n\r\ninterface ERC721{\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    address immutable printer = msg.sender;\r\n    string public constant name = \"Print\";\r\n    string public constant symbol = \"PRINT\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Approval(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        allowance[_from][msg.sender] -= _value;\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) public {\r\n        require(msg.sender == printer);\r\n        balanceOf[_to] += _value;\r\n        totalSupply += _value;\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract Printer {\r\n    struct Record {\r\n        address owner;\r\n        uint64 beginning;\r\n        ERC20 erc20;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => Record)) public records;\r\n\r\n    function onERC721Received(address, address _from, uint256 _tokenId, bytes calldata) public returns (bytes4) {\r\n        Record storage record = records[msg.sender][_tokenId];\r\n        if (address(record.erc20) == address(0)) {\r\n            record.erc20 = new ERC20();\r\n        }\r\n        record.owner = _from;\r\n        record.beginning = uint64(block.timestamp);\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    function print(address _collection, uint256 _tokenId) public {\r\n        Record storage record = records[_collection][_tokenId];\r\n        require(msg.sender == record.owner);\r\n        uint256 value = (block.timestamp - record.beginning) * 10**18;\r\n        record.beginning = uint64(block.timestamp);\r\n        record.erc20.mint(msg.sender, value);\r\n    }\r\n\r\n    function withdraw(address _collection, uint256 _tokenId) public {\r\n        Record storage record = records[_collection][_tokenId];\r\n        require(msg.sender == record.owner);\r\n        uint256 value = (block.timestamp - record.beginning) * 10**18;\r\n        record.owner = address(0);\r\n        record.beginning = 0;\r\n        record.erc20.mint(msg.sender, value);\r\n        ERC721(_collection).safeTransferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"print\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"beginning\",\"type\":\"uint64\"},{\"internalType\":\"contract ERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Printer", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37793d92d4dc72bb62b322d51534617d4d7301f39a62376ed7da81fee3bcd95e"}]}