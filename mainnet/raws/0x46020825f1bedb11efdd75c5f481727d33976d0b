{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ICosmicInstance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\ninterface ICosmicInstance {\\r\\n  function token() external view returns (address);\\r\\n\\r\\n  function denomination() external view returns (uint256);\\r\\n\\r\\n  function deposit(bytes32 commitment) external payable;\\r\\n\\r\\n  function withdraw(\\r\\n    bytes calldata proof,\\r\\n    bytes32 root,\\r\\n    bytes32 nullifierHash,\\r\\n    address payable recipient,\\r\\n    address payable relayer,\\r\\n    uint256 fee,\\r\\n    uint256 refund\\r\\n  ) external payable;\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"proxy.sol\":{\"content\":\"// Cosmic Kiss Mixer\\r\\n// https://cosmickiss.io/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\nimport \\\"ICosmicInstance.sol\\\";\\r\\nimport \\\"IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract CosmicRouter {\\r\\n\\r\\n\\r\\n  event EncryptedNote(address indexed sender, bytes encryptedNote);\\r\\n  event InstanceStateUpdate(ICosmicInstance indexed instance, InstanceState state);\\r\\n\\r\\n\\r\\n  enum InstanceState { Disabled, Enabled }\\r\\n\\r\\n  struct Instance {\\r\\n    bool isERC20;\\r\\n    IERC20 token;\\r\\n    InstanceState state;\\r\\n  }\\r\\n\\r\\n  struct CosmicInstance {\\r\\n    ICosmicInstance addr;\\r\\n    Instance instance;\\r\\n  }\\r\\n\\r\\n  mapping(ICosmicInstance =\\u003e Instance) public instances;\\r\\n\\r\\n  constructor(\\r\\n    CosmicInstance[] memory _instances\\r\\n  ) public {\\r\\n\\r\\n    for (uint256 i = 0; i \\u003c _instances.length; i++) {\\r\\n      _updateInstance(_instances[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function deposit(\\r\\n    ICosmicInstance _cosmic,\\r\\n    bytes32 _commitment,\\r\\n    bytes calldata _encryptedNote\\r\\n) external payable {\\r\\n    Instance memory instance = instances[_cosmic];\\r\\n    require(instance.state != InstanceState.Disabled, \\\"The instance is not supported\\\");\\r\\n\\r\\n    if (instance.isERC20) {\\r\\n      instance.token.transferFrom(msg.sender, address(this), _cosmic.denomination());\\r\\n    }\\r\\n    _cosmic.deposit{ value: msg.value }(_commitment);\\r\\n\\r\\n    emit EncryptedNote(msg.sender, _encryptedNote);\\r\\n  }\\r\\n\\r\\n  function withdraw(\\r\\n    ICosmicInstance _cosmic,\\r\\n    bytes calldata _proof,\\r\\n    bytes32 _root,\\r\\n    bytes32 _nullifierHash,\\r\\n    address payable _recipient,\\r\\n    address payable _relayer,\\r\\n    uint256 _fee,\\r\\n    uint256 _refund\\r\\n  ) external payable {\\r\\n    Instance memory instance = instances[_cosmic];\\r\\n    require(instance.state != InstanceState.Disabled, \\\"The instance is not supported\\\");\\r\\n\\r\\n    _cosmic.withdraw{ value: msg.value }(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund);\\r\\n  }\\r\\n\\r\\n  function backupNotes(bytes[] calldata _encryptedNotes) external {\\r\\n    for (uint256 i = 0; i \\u003c _encryptedNotes.length; i++) {\\r\\n      emit EncryptedNote(msg.sender, _encryptedNotes[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function updateInstance(CosmicInstance calldata _cosmic) external {\\r\\n    _updateInstance(_cosmic);\\r\\n  }\\r\\n  \\r\\n  function _updateInstance(CosmicInstance memory _cosmic) internal {\\r\\n    instances[_cosmic.addr] = _cosmic.instance;\\r\\n    if (_cosmic.instance.isERC20) {\\r\\n      IERC20 token = IERC20(_cosmic.addr.token());\\r\\n      require(token == _cosmic.instance.token, \\\"Incorrect token\\\");\\r\\n      uint256 allowance = token.allowance(address(this), address(_cosmic.addr));\\r\\n\\r\\n      if (_cosmic.instance.state != InstanceState.Disabled \\u0026\\u0026 allowance == 0) {\\r\\n        token.approve(address(_cosmic.addr), uint256(-1));\\r\\n      } else if (_cosmic.instance.state == InstanceState.Disabled \\u0026\\u0026 allowance != 0) {\\r\\n        token.approve(address(_cosmic.addr), 0);\\r\\n      }\\r\\n    }\\r\\n    emit InstanceStateUpdate(_cosmic.addr, _cosmic.instance.state);\\r\\n  }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ICosmicInstance\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum CosmicRouter.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct CosmicRouter.Instance\",\"name\":\"instance\",\"type\":\"tuple\"}],\"internalType\":\"struct CosmicRouter.CosmicInstance[]\",\"name\":\"_instances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedNote\",\"type\":\"bytes\"}],\"name\":\"EncryptedNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICosmicInstance\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CosmicRouter.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InstanceStateUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_encryptedNotes\",\"type\":\"bytes[]\"}],\"name\":\"backupNotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICosmicInstance\",\"name\":\"_cosmic\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedNote\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICosmicInstance\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum CosmicRouter.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ICosmicInstance\",\"name\":\"addr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum CosmicRouter.InstanceState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct CosmicRouter.Instance\",\"name\":\"instance\",\"type\":\"tuple\"}],\"internalType\":\"struct CosmicRouter.CosmicInstance\",\"name\":\"_cosmic\",\"type\":\"tuple\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICosmicInstance\",\"name\":\"_cosmic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CosmicRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000706796c95b3b5e7277b7681f819151831cd343b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005f8d2642676c7dce1a80f7c0e9517f4cdaac52180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004343cf841c3858abef68b3034029d434946224d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000009a8d206b5324df09715455f9e1644a8e97812b76000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56a4c83123650c5986a1f1240db805ab838db009f6bcccbc6ffb8ee21acb0dcd"}]}