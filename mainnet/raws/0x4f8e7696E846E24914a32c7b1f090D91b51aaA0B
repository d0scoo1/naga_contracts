{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PublicEnsProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./EnsLibrary.sol\\\";\\n\\ncontract PublicEnsProxy {\\n    address public immutable ensRegistry;\\n\\n    constructor(address _ensRegistry) {\\n        ensRegistry = _ensRegistry;\\n    }\\n\\n    function getAddressFromEnsNode(bytes32 ensNode)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return EnsLibrary.ensNodeToAddressFromEnsRegistry(ensRegistry, ensNode);\\n    }\\n\\n    /*\\n     * proxyDestination: the contract you want to proxy to\\n     * offsets: the offset in bytes into data where you want to insert a 32 byte ens addresses\\n     * ensNodes: the ens nodes you want to resolve and then replace in data\\n     * NOTE: offsets must be the same length as ensNodes\\n     * data: the data you want to pass along to the proxy contract\\n     */\\n    function forwardWithEnsParamaterResolution(\\n        address proxyDestination,\\n        uint256[] calldata offsets,\\n        bytes32[] calldata ensNodes,\\n        bytes calldata data\\n    ) public payable returns (bytes memory) {\\n        require(\\n            offsets.length == ensNodes.length,\\n            \\\"offsets and ensNodes length doesn't match\\\"\\n        );\\n\\n        bytes memory dataCopy = new bytes(data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            dataCopy[i] = data[i];\\n        }\\n        for (uint256 i = 0; i < offsets.length; i++) {\\n            address ensAddr = getAddressFromEnsNode(ensNodes[i]);\\n            // mstore offsets are indexed at the end of the 32 byte value you want to store\\n            // so we have to add 32 to account for the size of the ens address\\n            uint256 offset = offsets[i] + 32;\\n            assembly {\\n                mstore(add(dataCopy, offset), ensAddr)\\n            }\\n        }\\n        (bool success, bytes memory returnData) = proxyDestination.call{\\n            value: msg.value\\n        }(dataCopy);\\n        require(success, \\\"Proxy failed\\\");\\n        return returnData;\\n    }\\n\\n    /*\\n     * An extension of forwardWithEnsParamaterResolution that also allows you\\n     * to resolve the destination contract you are proxing to.\\n     */\\n    function forwardWithEnsParamaterAndEnsProxyDestinationResolution(\\n        bytes32 proxyDestinationEnsNode,\\n        uint256[] calldata offsets,\\n        bytes32[] calldata ensNodes,\\n        bytes calldata data\\n    ) public payable returns (bytes memory) {\\n        return\\n            forwardWithEnsParamaterResolution(\\n                getAddressFromEnsNode(proxyDestinationEnsNode),\\n                offsets,\\n                ensNodes,\\n                data\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EnsLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface EnsRegistry {\\n    function resolver(bytes32 node) external view returns (address);\\n}\\n\\ninterface EnsResolver {\\n    function addr(bytes32 node) external view returns (address);\\n}\\n\\nlibrary EnsLibrary {\\n    function ensNodeToAddressFromEnsRegistry(\\n        address ensRegistry,\\n        bytes32 ensNode\\n    ) internal view returns (address) {\\n        address resolver = EnsRegistry(ensRegistry).resolver(ensNode);\\n        require(resolver != address(0), \\\"The resolver for ensNode DNE\\\");\\n        address addr = EnsResolver(resolver).addr(ensNode);\\n        require(addr != address(0), \\\"The address for resolver DNE\\\");\\n        return addr;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proxyDestinationEnsNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"offsets\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ensNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forwardWithEnsParamaterAndEnsProxyDestinationResolution\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyDestination\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"offsets\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ensNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forwardWithEnsParamaterResolution\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ensNode\",\"type\":\"bytes32\"}],\"name\":\"getAddressFromEnsNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PublicEnsProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}