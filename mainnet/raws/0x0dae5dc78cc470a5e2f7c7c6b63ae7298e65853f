{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.13;\r\n\r\nlibrary ConvertStringByte {\r\n  function bytes32ToString(bytes32 x) constant returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n          bytesString[charCount] = char;\r\n          charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n  function stringToBytes32(string memory source) returns (bytes32 result) {\r\n    assembly {\r\n      result := mload(add(source, 32))\r\n    }\r\n  }\r\n}\r\n\r\nlibrary Strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private {\r\n        // Copy word-length chunks while possible\r\n        for(; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string self) internal returns (slice) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (self & 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret += 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (self & 0xffffffffffffffff == 0) {\r\n            ret += 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (self & 0xffffffff == 0) {\r\n            ret += 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (self & 0xffff == 0) {\r\n            ret += 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (self & 0xff == 0) {\r\n            ret += 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-termintaed utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal returns (slice ret) {\r\n        // Allocate space for `self` in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as `self`.\r\n     */\r\n    function copy(slice self) internal returns (slice) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice's text.\r\n     */\r\n    function toString(slice self) internal returns (string) {\r\n        var ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call `slice.empty()` if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice self) internal returns (uint) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        var ptr = self._ptr - 31;\r\n        var end = ptr + self._len;\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if(b < 0xE0) {\r\n                ptr += 2;\r\n            } else if(b < 0xF0) {\r\n                ptr += 3;\r\n            } else if(b < 0xF8) {\r\n                ptr += 4;\r\n            } else if(b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice self) internal returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if `other` comes lexicographically after\r\n     *      `self`, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice self, slice other) internal returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len < self._len)\r\n            shortest = other._len;\r\n\r\n        var selfptr = self._ptr;\r\n        var otherptr = other._ptr;\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                var diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice self, slice other) internal returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\r\n     *      slice to point to the next rune and returning `self`.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `rune`.\r\n     */\r\n    function nextRune(slice self, slice rune) internal returns (slice) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint len;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b < 0x80) {\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            len = 3;\r\n        } else {\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            rune._len = self._len;\r\n            self._ptr += self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr += len;\r\n        self._len -= len;\r\n        rune._len = len;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from `self`.\r\n     */\r\n    function nextRune(slice self) internal returns (slice ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice self) internal returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint len;\r\n        uint div = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        var b = word / div;\r\n        if (b < 0x80) {\r\n            ret = b;\r\n            len = 1;\r\n        } else if(b < 0xE0) {\r\n            ret = b & 0x1F;\r\n            len = 2;\r\n        } else if(b < 0xF0) {\r\n            ret = b & 0x0F;\r\n            len = 3;\r\n        } else {\r\n            ret = b & 0x07;\r\n            len = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (len > self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i < len; i++) {\r\n            div = div / 256;\r\n            b = (word / div) & 0xFF;\r\n            if (b & 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b & 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice self) internal returns (bytes32 ret) {\r\n        assembly {\r\n            ret := sha3(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if `self` starts with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function beyond(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr += needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with `needle`.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice self, slice needle) internal returns (bool) {\r\n        if (self._len < needle._len) {\r\n            return false;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let len := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` ends with `needle`, `needle` is removed from the\r\n     *      end of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n    function until(slice self, slice needle) internal returns (slice) {\r\n        if (self._len < needle._len) {\r\n            return self;\r\n        }\r\n\r\n        var selfptr = self._ptr + self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let len := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(sha3(selfptr, len), sha3(needleptr, len))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // `needle` in `self`, or the first byte after `self` if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 68 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    let end := add(selfptr, sub(selflen, needlelen))\r\n                    ptr := selfptr\r\n                    loop:\r\n                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := add(ptr, 1)\r\n                    jumpi(loop, lt(sub(ptr, 1), end))\r\n                    ptr := add(selfptr, selflen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr;\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // `needle` in `self`, or the address of `self` if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                // Optimized assembly for 69 gas per byte on short strings\r\n                assembly {\r\n                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\r\n                    let needledata := and(mload(needleptr), mask)\r\n                    ptr := add(selfptr, sub(selflen, needlelen))\r\n                    loop:\r\n                    jumpi(ret, eq(and(mload(ptr), mask), needledata))\r\n                    ptr := sub(ptr, 1)\r\n                    jumpi(loop, gt(add(ptr, 1), selfptr))\r\n                    ptr := selfptr\r\n                    jump(exit)\r\n                    ret:\r\n                    ptr := add(ptr, needlelen)\r\n                    exit:\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := sha3(needleptr, needlelen) }\r\n                ptr = selfptr + (selflen - needlelen);\r\n                while (ptr >= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := sha3(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr + needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function find(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain the part of the string from the start of\r\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\r\n     *      is not found, `self` is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n    function rfind(slice self, slice needle) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and `token` to everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function split(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr + self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n            self._ptr = ptr + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything after the first\r\n     *      occurrence of `needle`, and returning everything before it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` up to the first occurrence of `delim`.\r\n     */\r\n    function split(slice self, slice needle) internal returns (slice token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and `token` to everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and `token` is set to the entirety of `self`.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n    function rsplit(slice self, slice needle, slice token) internal returns (slice) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len + needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting `self` to everything before the last\r\n     *      occurrence of `needle`, and returning everything after it. If\r\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\r\n     *      and the entirety of `self` is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The part of `self` after the last occurrence of `delim`.\r\n     */\r\n    function rsplit(slice self, slice needle) internal returns (slice token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return The number of occurrences of `needle` found in `self`.\r\n     */\r\n    function count(slice self, slice needle) internal returns (uint count) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\r\n        while (ptr <= self._ptr + self._len) {\r\n            count++;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if `self` contains `needle`.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in `self`.\r\n     * @return True if `needle` is found in `self`, false otherwise.\r\n     */\r\n    function contains(slice self, slice needle) internal returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      `self` and `other`.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice self, slice other) internal returns (string) {\r\n        var ret = new string(self._len + other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr + self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in `parts`,\r\n     *         joined with `self`.\r\n     */\r\n    function join(slice self, slice[] parts) internal returns (string) {\r\n        if (parts.length == 0)\r\n            return \"\";\r\n\r\n        uint len = self._len * (parts.length - 1);\r\n        for(uint i = 0; i < parts.length; i++)\r\n            len += parts[i]._len;\r\n\r\n        var ret = new string(len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(i = 0; i < parts.length; i++) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr += parts[i]._len;\r\n            if (i < parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr += self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Platinum is Ownable {\r\n  using SafeMath for uint256;\r\n  using Strings for *;\r\n\r\n  // ========= \u5ba3\u544a =========\r\n  string public version = \"0.0.1\";\r\n  // \u57fa\u672c\u55ae\u4f4d\r\n  string public unit = \"oz\";\r\n  // \u7e3d\u4f9b\u7d66\u91cf\r\n  uint256 public total;\r\n  // \u5b58\u8ca8\r\n  struct Bullion {\r\n    string index;\r\n    string unit;\r\n    uint256 amount;\r\n    string ipfs;\r\n  }\r\n  bytes32[] public storehouseIndex;\r\n  mapping (bytes32 => Bullion) public storehouse;\r\n  // \u639b\u52fe\u8ca8\u5e63\r\n  address public token;\r\n  // \u532f\u7387 1\u767d\u91d1\uff1a\u767d\u91d1\u5e63\r\n  uint256 public rate = 10;\r\n  // PlatinumToken \u5be6\u4f8b\r\n  PlatinumToken coin;\r\n\r\n\r\n\r\n\r\n\r\n  // ========= \u521d\u59cb\u5316 =========\r\n  function Platinum() {\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  // ========= event =========\r\n  event Stock (\r\n    string index,\r\n    string unit,\r\n    uint256 amount,\r\n    string ipfs,\r\n    uint256 total\r\n  );\r\n\r\n  event Ship (\r\n    string index,\r\n    uint256 total\r\n  );\r\n\r\n  event Mint (\r\n    uint256 amount,\r\n    uint256 total\r\n  );\r\n\r\n  event Alchemy (\r\n    uint256 amount,\r\n    uint256 total\r\n  );\r\n\r\n  event Buy (\r\n    string index,\r\n    address from,\r\n    uint256 fee,\r\n    uint256 price\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // ========= \u64c1\u6709\u8005\u65b9\u6cd5 =========\r\n\r\n  /**\r\n   * \u64cd\u4f5c\u5b58\u8ca8-\u9032\u8ca8\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u7d00\u9304\u65b0\u589e\u7684\u767d\u91d1\uff0c\u7d00\u9304\u8cc7\u8a0a\uff1a\r\n   *    - index: \u767d\u91d1\u7de8\u865f\r\n   *    - unit: \u767d\u91d1\u55ae\u4f4d\r\n   *    - amount: \u6578\u91cf\r\n   *    - ipfs: \u767d\u91d1\u8b49\u660eURL\r\n   *  - \u589e\u52a0\u767d\u91d1\u7e3d\u5eab\u5b58\u6578\u91cf\uff0c\u91cf\u70baamount\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u9808\u70baowner\r\n   *  - \u767d\u91d1\u7de8\u865findex\u4e0d\u80fd\u91cd\u8907\r\n   *  - \u55ae\u4f4d\u9808\u7b49\u65bc\u76ee\u524d\u5408\u7d04\u6240\u8a2d\u5b9a\u7684\u55ae\u4f4d\r\n   *  - \u91cfamount\u9700\u5927\u65bc0\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\u6642\uff0c\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Stock: \u57f7\u884c\u6210\u529f\u6642\u89f8\u767c\r\n   */\r\n  function stock(string _index, string _unit, uint256 _amount, string _ipfs) onlyOwner returns (bool) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n\r\n    require(_amount > 0);\r\n    require(_unit.toSlice().equals(unit.toSlice()));\r\n    require(!(storehouse[_bindex].amount > 0));\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n    bullion.index = _index;\r\n    bullion.unit = _unit;\r\n    bullion.amount = _amount;\r\n    bullion.ipfs = _ipfs;\r\n\r\n    // \u52a0\u5165\u5009\u5132\u76ee\u9304\r\n    storehouseIndex.push(_bindex);\r\n    // \u52a0\u5165\u5009\u5132\r\n    storehouse[_bindex] = bullion;\r\n\r\n    // \u589e\u52a0\u7e3d\u5eab\u5b58\r\n    total = total.add(_amount);\r\n\r\n    Stock(bullion.index, bullion.unit, bullion.amount, bullion.ipfs, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u64cd\u4f5c\u5b58\u8ca8-\u51fa\u8ca8\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u79fb\u9664\u767d\u91d1\u5eab\u5b58\r\n   *  - \u6e1b\u5c11\u767d\u91d1\u7e3d\u5eab\u5b58\u91cf\uff0c\u91cf\u70ba\u767d\u91d1\u5eab\u5b58\u7684\u6578\u91cf\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u767d\u91d1\u7de8\u865findex\u9700\u5b58\u5728\u65bc\u7d00\u9304\uff08\u5df2\u4f7f\u7528stock\u65b9\u6cd5\u65b0\u589e\u8a72\u5eab\u5b58\uff09\r\n   *  - \u767d\u91d1\u7e3d\u5eab\u5b58\u9700\u8db3\u5920\uff0c\u5927\u65bc\u6307\u5b9a\u767d\u91d1\u5eab\u5b58\u7684\u6578\u91cf\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\u6642\uff0c\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Ship: \u57f7\u884c\u6210\u529f\u6642\u89f8\u767c\r\n   */\r\n  function ship(string _index) onlyOwner returns (bool) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n\r\n    require(storehouse[_bindex].amount > 0);\r\n    Bullion bullion = storehouse[_bindex];\r\n    require(total.sub(bullion.amount) >= 0);\r\n\r\n    uint256 tmpAmount = bullion.amount;\r\n\r\n    for (uint256 index = 0; index < storehouseIndex.length; index++) {\r\n      Bullion _bullion = storehouse[storehouseIndex[index]];\r\n      if (_bullion.index.toSlice().equals(_index.toSlice())) {\r\n        // \u5f9e\u5009\u5132\u76ee\u9304\u79fb\u9664\r\n        delete storehouseIndex[index];\r\n      }\r\n    }\r\n    // \u5f9e\u5009\u5132\u79fb\u9664\r\n    delete storehouse[_bindex];\r\n    // \u6e1b\u5c11\u7e3d\u5eab\u5b58\r\n    total = total.sub(tmpAmount);\r\n\r\n    Ship(bullion.index, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9444\u5e63\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u589e\u52a0\u767d\u91d1\u4ee3\u5e63\u6578\u91cf\r\n   *  - \u6e1b\u5c11\u7e3d\u767d\u91d1\u5eab\u5b58\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u767d\u91d1\u7e3d\u5eab\u5b58\u9700\u8db3\u5920\uff0c\u5373\u5927\u65bc\u7b49\u65bcptAmount\r\n   *  - \u767d\u91d1\u4ee3\u5e63\u5408\u7d04\u9700\u5df2\u8a2d\u5b9a\uff08setTokenAddress\u65b9\u6cd5\uff09\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\u6642\uff0c\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Mint: \u57f7\u884c\u6210\u529f\u6642\u89f8\u767c\r\n   */\r\n  function mint(uint256 _ptAmount) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n\r\n    uint256 amount = convert2PlatinumToken(_ptAmount);\r\n    // \u767c\u9001token\u7684\u589e\u52a0\u6db5\u5f0f\r\n    bool produced = coin.produce(amount);\r\n    require(produced);\r\n\r\n    total = total.sub(_ptAmount);\r\n\r\n    Mint(_ptAmount, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u7149\u91d1\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u6e1b\u5c11\u767d\u91d1\u4ee3\u5e63\r\n   *  - \u589e\u52a0\u7e3d\u767d\u91d1\u5eab\u5b58\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u9700\u5df2\u8a2d\u5b9a\u767d\u91d1\u4ee3\u5e63\u5408\u7d04\uff08setTokenAddress\u65b9\u6cd5\uff09\r\n   *  - \u767d\u91d1\u4ee3\u5e63owner\u6240\u64c1\u6709\u7684\u4ee3\u5e63\u8db3\u5920\uff0c\u5373tokenAmount\u5c0f\u65bc\u7b49\u65bc\u4ee3\u5e63owner\u7684\u767d\u91d1\u4ee3\u5e63\u6578\u91cf\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Alchemy: \u57f7\u884c\u6210\u529f\u6642\u89f8\u767c\r\n   */\r\n  function alchemy(uint256 _tokenAmount) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n\r\n    uint256 amount = convert2Platinum(_tokenAmount);\r\n    bool reduced = coin.reduce(_tokenAmount);\r\n    require(reduced);\r\n\r\n    total = total.add(amount);\r\n\r\n    Alchemy(amount, total);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8a2d\u5b9a-\u532f\u7387\r\n   *\r\n   * \u532f\u7387\u898f\u5247:\r\n   *  - \u767d\u91d1\u6578\u91cf * \u532f\u7387 = \u767d\u91d1\u4ee3\u5e63\u6578\u91cf\r\n   *  - \u767d\u91d1\u4ee3\u5e63\u6578\u91cf / \u532f\u7387 = \u767d\u91d1\u6578\u91cf\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u532f\u7387rate\u9700\u5927\u65bc0\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   */\r\n  function setRate(uint256 _rate) onlyOwner returns (bool) {\r\n    require(_rate > 0);\r\n\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8a2d\u5b9a-Token\u5730\u5740\r\n   *\r\n   * \u8a2d\u5b9a\u767d\u91d1\u5408\u7d04\u5730\u5740\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u5408\u7d04\u5730\u5740address\u4e0d\u70ba0\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   */\r\n  function setTokenAddress(address _address) onlyOwner returns (bool) {\r\n    require(_address != 0x0);\r\n\r\n    coin = PlatinumToken(_address);\r\n    token = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8cfc\u8cb7\u91d1\u689d\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u6263\u9664buyer\u7684\u767d\u91d1\u4ee3\u5e63\r\n   *  - \u79fb\u9664\u767d\u91d1\u5eab\u5b58\uff0c\u4ee3\u8868buyer\u5df2\u5f9e\u5eab\u5b58\u8cb7\u8d70\u767d\u91d1\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *  - \u767d\u91d1\u7de8\u865findex\u9700\u5b58\u5728\u65bc\u7d00\u9304\uff08\u5df2\u4f7f\u7528stock\u65b9\u6cd5\u65b0\u589e\u8a72\u5eab\u5b58\uff09\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Buy: \u57f7\u884c\u6210\u529f\u6642\u89f8\u767c\r\n   */\r\n  function buy(string _index, address buyer) onlyOwner returns (bool) {\r\n    require(token != 0x0);\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n    uint256 fee = coin.fee();\r\n    require(storehouse[_bindex].amount > 0);\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n    uint256 tokenPrice = convert2PlatinumToken(bullion.amount);\r\n    uint256 tokenPriceFee = tokenPrice.add(fee);\r\n\r\n    // \u8f49\u5e33\r\n    bool transfered = coin.transferFrom(buyer, coin.owner(), tokenPriceFee);\r\n    require(transfered);\r\n\r\n    // \u76f4\u63a5\u628a\u525b\u525b\u8ce3\u51fa\u7684\u50f9\u683c\u7149\u91d1\r\n    bool reduced = coin.reduce(tokenPrice);\r\n    require(reduced);\r\n\r\n    // \u6e1b\u5c11\u5eab\u5b58\r\n    for (uint256 index = 0; index < storehouseIndex.length; index++) {\r\n      Bullion _bullion = storehouse[storehouseIndex[index]];\r\n      if (_bullion.index.toSlice().equals(_index.toSlice())) {\r\n        // \u5f9e\u5009\u5132\u76ee\u9304\u79fb\u9664\r\n        delete storehouseIndex[index];\r\n      }\r\n    }\r\n    // \u5f9e\u5009\u5132\u79fb\u9664\r\n    delete storehouse[_bindex];\r\n\r\n    Buy(_index, buyer, fee, tokenPrice);\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // ========= \u516c\u5171\u65b9\u6cd5 =========\r\n\r\n  // \u6bd4\u7387\u8f49\u63db-\u767d\u91d1\u5e63\u63db\u767d\u91d1\r\n  function convert2Platinum(uint256 _amount) constant returns (uint256) {\r\n    return _amount.div(rate);\r\n  }\r\n\r\n  // \u6bd4\u7387\u8f49\u63db-\u767d\u91d1\u63db\u767d\u91d1\u5e63\r\n  function convert2PlatinumToken(uint256 _amount) constant returns (uint256) {\r\n    return _amount.mul(rate);\r\n  }\r\n\r\n  // \u91d1\u689d\u8cc7\u8a0a\r\n  function info(string _index) constant returns (string, string, uint256, string) {\r\n    bytes32 _bindex = ConvertStringByte.stringToBytes32(_index);\r\n    require(storehouse[_bindex].amount > 0);\r\n\r\n    Bullion bullion = storehouse[_bindex];\r\n\r\n    return (bullion.index, bullion.unit, bullion.amount, bullion.ipfs);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PlatinumToken is Ownable, ERC20 {\r\n  using SafeMath for uint256;\r\n  // ========= \u5ba3\u544a =========\r\n\r\n  // \u7248\u672c\r\n  string public version = \"0.0.1\";\r\n  // \u540d\u7a31\r\n  string public name;\r\n  // \u6a19\u8a18\r\n  string public symbol;\r\n  // \u5c0f\u6578\u9ede\u4f4d\u6578\r\n  uint256 public decimals;\r\n  // \u767d\u91d1\u5408\u7d04\u5730\u5740\r\n  address public platinum;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping(address => uint256) balances;\r\n  // \u7e3d\u4f9b\u7d66\u91cf\r\n  uint256 public totalSupply;\r\n  // \u624b\u7e8c\u8cbb\r\n  uint256 public fee = 10;\r\n\r\n  // ========= \u521d\u59cb\u5316 =========\r\n  function PlatinumToken(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n    ) {\r\n    balances[msg.sender] = initialSupply;\r\n    totalSupply = initialSupply;\r\n    name = tokenName;\r\n    symbol = tokenSymbol;\r\n    decimals = decimalUnits;\r\n  }\r\n\r\n  /**\r\n   * Transfer\r\n   *\r\n   * \u50b3\u9001\u4e8b\u4ef6\uff0c\u7576\u6709\u767d\u91d1\u4ee3\u5e63\u7684\u6240\u6709\u6b0a\u8f49\u79fb\u6642\uff0c\u6b64\u4e8b\u4ef6\u6703\u88ab\u89f8\u767c\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  // ========= \u6b0a\u9650\u63a7\u7ba1 =========\r\n  modifier isPlatinumContract() {\r\n    require(platinum != 0x0);\r\n    require(msg.sender == platinum);\r\n    _;\r\n  }\r\n\r\n  modifier isOwnerOrPlatinumContract() {\r\n    require(msg.sender != address(0) && (msg.sender == platinum || msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * \u589e\u7522\r\n   *\r\n   *  \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *    - \u589e\u52a0owner\u7684balance\uff0c\u91cf\u70ba\u6307\u5b9a\u7684amount\r\n   *    - \u589e\u52a0totalSupply\uff0c\u91cf\u70ba\u6307\u5b9a\u7684amount\r\n   *\r\n   *  Requires:\r\n   *    - \u57f7\u884c\u8005\u70ba\u767d\u91d1\u5408\u7d04\uff08\u53ef\u900f\u904esetPlatinumAddress\u65b9\u6cd5\u8a2d\u5b9a\uff09\r\n   *    - amount\u9808\u8a2d\u5b9a\u70ba0\u4ee5\u4e0a\r\n   *\r\n   *  Return:\r\n   *    - bool: \u57f7\u884c\u6210\u529f\u56de\u50b3true\r\n   */\r\n  function produce(uint256 amount) isPlatinumContract returns (bool) {\r\n    balances[owner] = balances[owner].add(amount);\r\n    totalSupply = totalSupply.add(amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /** \u6e1b\u7522\r\n   *\r\n   *  \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *    - \u6e1b\u5c11owner\u7684balance\uff0c\u91cf\u70ba\u6307\u5b9a\u7684amount\r\n   *    - \u6e1b\u5c11totalSupply\uff0c\u91cf\u70ba\u6307\u5b9a\u7684amount\r\n   *\r\n   *  Requires:\r\n   *    - \u57f7\u884c\u8005\u70ba\u767d\u91d1\u5408\u7d04\uff08\u53ef\u900f\u904esetPlatinumAddress\u65b9\u6cd5\u8a2d\u5b9a\uff09\r\n   *    - amount\u9808\u8a2d\u5b9a\u70ba0\u4ee5\u4e0a\r\n   *    - owner\u7684balance\u9700\u5927\u65bc\u7b49\u65bc\u6307\u5b9a\u7684amount\r\n   *    - totalSupply\u9700\u5927\u65bc\u7b49\u65bc\u6307\u5b9a\u7684amount\r\n   *\r\n   *  Return:\r\n   *    - bool: \u57f7\u884c\u6210\u529f\u56de\u50b3true\r\n   */\r\n  function reduce(uint256 amount) isPlatinumContract returns (bool) {\r\n    require(balances[owner].sub(amount) >= 0);\r\n    require(totalSupply.sub(amount) >= 0);\r\n\r\n    balances[owner] = balances[owner].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8a2d\u5b9a-\u767d\u91d1\u5408\u7d04\u5730\u5740\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u4fee\u6539\u6b64\u5408\u7d04\u6240\u8a8d\u8b58\u7684\u767d\u91d1\u5408\u7d04\u5730\u5740\uff0c\u6b64\u5730\u5740\u6c7a\u5b9a\u80fd\u57f7\u884cproduce\u548creduce\u65b9\u6cd5\u7684\u5408\u7d04\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u9808\u70baowner\r\n   *  - \u5730\u5740\u4e0d\u80fd\u8a2d\u70ba0\r\n   *\r\n   * Returns:\r\n   *  - bool: \u8a2d\u5b9a\u6210\u529f\u6642\u56de\u50b3true\r\n   */\r\n  function setPlatinumAddress(address _address) onlyOwner returns (bool) {\r\n    require(_address != 0x0);\r\n\r\n    platinum = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8a2d\u5b9a-\u624b\u7e8c\u8cbb\r\n   *\r\n   * \u624b\u7e8c\u8cbb\u898f\u5247\uff1a\r\n   *  - \u8cfc\u8cb7\u91d1\u689d\u6642\uff0c\u4ee3\u5e63\u91cf\u7e3d\u91cf\u589e\u52a0\u624b\u7e8c\u8cbb\u70ba\u7e3d\u6263\u9664\u4ee3\u5e63\u7e3d\u91cf\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   */\r\n  function setFee(uint256 _fee) onlyOwner returns (bool) {\r\n    require(_fee >= 0);\r\n\r\n    fee = _fee;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u4ea4\u6613\uff0c\u8f49\u79fb\u767d\u91d1\u4ee3\u5e63\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u6e1b\u5c11from\u7684\u767d\u91d1\u4ee3\u5e63\uff0c\u91cf\u70bavalue\r\n   *  - \u589e\u52a0to\u7684\u767d\u91d1\u4ee3\u5e63\uff0c\u91cf\u70bavalue\r\n   *\r\n   * Requires:\r\n   *  - \u57f7\u884c\u8005\u70baowner\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\u56de\u50b3true\r\n   *\r\n   * Events:\r\n   *  - Transfer: \u57f7\u884c\u6210\u529f\u6642\uff0c\u89f8\u767c\u6b64\u4e8b\u4ef6\r\n   */\r\n  function transfer(address _to, uint256 _value) onlyOwner returns (bool) {\r\n    balances[owner] = balances[owner].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(owner, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u67e5\u8a62\u767d\u91d1\u4ee3\u5e63\u9918\u984d\r\n   *\r\n   * Returns:\r\n   *  - balance: \u6307\u5b9aaddress\u7684\u767d\u91d1\u4ee3\u5e63\u9918\u984d\r\n   */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * \u8f49\u5e33\r\n   *\r\n   * \u5be6\u969b\u5c07approve\u904e\u7684token\u6578\u91cf\u9032\u884c\u4ea4\u6613\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u57f7\u884c\uff1a\r\n   *  - \u4ea4\u6613\u6307\u5b9a\u6578\u91cf\u7684\u4ee3\u5e63\r\n   *\r\n   * Requires:\r\n   *  - \u4ea4\u6613\u7684\u4ee3\u5e63\u6578\u91cfvalue\u9700\u5927\u65bc0\r\n   *  - allowed\u7684\u4ee3\u5e63\u6578\u91cf\u9700\u5927\u65bcvalue\uff08allowed\u7684\u4ee3\u5e63\u5148\u7531\u547c\u53ebapprove\u65b9\u6cd5\u8a2d\u5b9a\uff09\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) isOwnerOrPlatinumContract returns (bool) {\r\n    var _allowance = allowed[_from][owner];\r\n\r\n    uint256 valueSubFee = _value.sub(fee);\r\n\r\n    balances[_to] = balances[_to].add(valueSubFee);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[owner] = balances[owner].add(fee);\r\n    allowed[_from][owner] = _allowance.sub(_value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8f49\u5e33 - \u5141\u8a31\r\n   *\r\n   * \u5141\u8a31\u4e00\u5b9a\u6578\u91cf\u7684\u4ee3\u5e63\u53ef\u4ee5\u8f49\u5e33\u81f3owner\r\n   *\r\n   * \u6b32\u4fee\u6539\u5141\u8a31\u503c\uff0c\u9700\u5148\u57f7\u884c\u6b64\u65b9\u6cd5\u5c07value\u8a2d\u70ba0\uff0c\u518d\u57f7\u884c\u4e00\u6b21\u6b64\u65b9\u6cd5\u5c07value\u8a2d\u70ba\u6307\u5b9a\u503c\r\n   *\r\n   * \u6b64\u65b9\u6cd5\u64cd\u4f5c\uff1a\r\n   *  - \u4fee\u6539allowed\u503c\uff0c\u7d00\u9304sender\u5141\u8a31\u8f49\u5e33value\u6578\u91cf\u4ee3\u5e63\u7d66owner\r\n   *  - allowed\u503c\u6709\u8a2d\u5b9a\u6642\uff0cvalue\u9808\u70ba0\r\n   *  - allowed\u503c\u672a\u8a2d\u5b9a\u6642\uff0cvalue\u4e0d\u70ba0\r\n   *\r\n   * Returns:\r\n   *  - bool: \u57f7\u884c\u6210\u529f\uff0c\u56de\u50b3true\r\n   */\r\n  function approve(address _dummy, uint256 _value) returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][owner] == 0));\r\n    // TODO whether or not to checkout the balance of the sender\r\n\r\n    allowed[msg.sender][owner] = _value;\r\n    Approval(msg.sender, owner, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u8f49\u5e33 - \u67e5\u8a62\u5141\u8a31\u503c\r\n   *\r\n   * Returns:\r\n   *  - unit256: \u5141\u8a31\u503c\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dummy\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"produce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPlatinumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platinum\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "PlatinumToken", "CompilerVersion": "v0.4.13+commit.fb4cb1a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001145746f776e506c6174696e756d436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035054430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1756ebd5859f9e5f37d0f3c28e6ad14944131e4d850b67001b3360cf1dafa94b"}]}