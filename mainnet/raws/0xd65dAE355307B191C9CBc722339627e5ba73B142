{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.7;\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ncontract ERC20Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"ERC20Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"ERC20Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract APEDAO is Context, IERC20, ERC20Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily\r\n    mapping(address => bool) private _isExcluded;\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isMaxWalletExclude;\r\n    mapping (address => bool) private _isExcludedMaxTxnAmount;\r\n    mapping (address => bool) public isBot;\r\n\tmapping(address => bool) public isSniper;\r\n\taddress payable private MarketingWallet;\r\n    address payable private TreasuryWallet;\r\n    address payable private DevWallet;\r\n    address dead = address(0xdead);\r\n    IUniswapV2Router02 public uniV2Router;\r\n    address public uniV2Pair;\r\n    address[] private _excluded;\r\n\tuint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e12 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _maxWallet;\r\n\tuint256 private _minTaxSwap;\r\n\tuint256 private tokensForMarketing;\r\n    uint256 private tokensForTreasury;\r\n\tuint256 private tokensForLiquidity;\r\n\tuint256 private totalBurnedTokens;\r\n\r\n\tuint256 private constant BUY = 1;\r\n    uint256 private constant SELL = 2;\r\n    uint256 private constant TRANSFER = 3;\r\n    uint256 private buyOrSellSwitch;\r\n    uint256 private _marketingTax = 4;\r\n    uint256 private _previousMarketingTax = _marketingTax;\r\n    uint256 private _treasuryTax = 5;\r\n    uint256 private _previousTreasuryTax = _treasuryTax;\r\n    uint256 private _reflectionsTax = 0;\r\n    uint256 private _previousReflectionsTax = _reflectionsTax;\r\n    uint256 private _liquidityTax = 3;\r\n    uint256 private _previousLiquidityTax = _liquidityTax;\r\n    uint256 private _divForLiq = _marketingTax + _liquidityTax + _treasuryTax;\r\n    uint256 public taxBuyMarketing = 4;\r\n    uint256 public taxBuyTreasury = 5;\r\n    uint256 public taxBuyReflections = 0;\r\n    uint256 public taxBuyLiquidity = 3;\r\n    uint256 public taxSellMarketing = 4;\r\n    uint256 public taxSellTreasury = 5;\r\n    uint256 public taxSellReflections = 0;\r\n    uint256 public taxSellLiquidity = 3;\r\n    uint256 public activeTradingBlock = 0;\r\n    uint256 public earlyBuyPenaltyEnd;\r\n    uint256 public maxTxnAmount;\r\n    bool public limitsOn = false;\r\n    bool private _initiateTrades = true;\r\n    bool public maxWalletOn = false;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n\r\n\r\n    string private constant _name = \"APEDAO\";\r\n    string private constant _symb = \"APEDAO\";\r\n    uint8 private constant _decimal = 18;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event ExcludeFromFee(address excludedAddress);\r\n    event IncludeInFee(address includedAddress);\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n        \r\n    }\r\n    constructor() payable {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        maxTxnAmount = _tTotal / 100; \r\n        _maxWallet = _tTotal * 2 / 100;\r\n        _minTaxSwap = _tTotal * 5 / 10000;\r\n        MarketingWallet = payable(0x4d32d91e75924cc0e02b7899D6db8a36bc0D545e);\r\n        TreasuryWallet = payable(0x40DB261E0E67dcCFFfa0615dA578F83e195DD5B6);\r\n        DevWallet = payable(0x3B822b9b572567C7150b384eBb7C32cB366680D3);\r\n        _isExcluded[dead] = true;\r\n        _isExcludedFromFee[_msgSender()] = true;\r\n        _isExcludedFromFee[dead] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[MarketingWallet] = true;\r\n        _isExcludedFromFee[TreasuryWallet] = true;\r\n        _isExcludedFromFee[DevWallet] = true;\r\n        _isMaxWalletExclude[address(this)] = true;\r\n        _isMaxWalletExclude[_msgSender()] = true;\r\n        _isMaxWalletExclude[dead] = true;\r\n        _isMaxWalletExclude[MarketingWallet] = true;\r\n        _isMaxWalletExclude[TreasuryWallet] = true;\r\n        _isMaxWalletExclude[DevWallet] = true;\r\n        BotAddToList(0x41B0320bEb1563A048e2431c8C1cC155A0DFA967);\r\n        BotAddToList(0x91B305F0890Fd0534B66D8d479da6529C35A3eeC);\r\n        BotAddToList(0x7F5622afb5CEfbA39f96CA3b2814eCF0E383AAA4);\r\n        BotAddToList(0xfcf6a3d7eb8c62a5256a020e48f153c6D5Dd6909);\r\n        BotAddToList(0x74BC89a9e831ab5f33b90607Dd9eB5E01452A064);\r\n        BotAddToList(0x1F53592C3aA6b827C64C4a3174523182c52Ece84);\r\n        BotAddToList(0x460545C01c4246194C2e511F166D84bbC8a07608);\r\n        BotAddToList(0x2E5d67a1d15ccCF65152B3A8ec5315E73461fBcd);\r\n        BotAddToList(0xb5aF12B837aAf602298B3385640F61a0fF0F4E0d);\r\n        BotAddToList(0xEd3e444A30Bd440FBab5933dCCC652959DfCB5Ba);\r\n        BotAddToList(0xEC366bbA6266ac8960198075B14FC1D38ea7de88);\r\n        BotAddToList(0x10Bf6836600D7cFE1c06b145A8Ac774F8Ba91FDD);\r\n        BotAddToList(0x44ae54e28d082C98D53eF5593CE54bB231e565E7);\r\n        BotAddToList(0xa3e820006F8553d5AC9F64A2d2B581501eE24FcF);\r\n\t\tBotAddToList(0x2228476AC5242e38d5864068B8c6aB61d6bA2222);\r\n\t\tBotAddToList(0xcC7e3c4a8208172CA4c4aB8E1b8B4AE775Ebd5a8);\r\n\t\tBotAddToList(0x5b3EE79BbBDb5B032eEAA65C689C119748a7192A);\r\n\t\tBotAddToList(0x4ddA45d3E9BF453dc95fcD7c783Fe6ff9192d1BA);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n    receive() external payable {}\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symb;\r\n    }\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimal;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),\r\n        _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n        require(tAmount <= _tTotal, \"Amt must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"Amt must be less than tot refl\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    function _getValues(uint256 tAmount) private view returns (uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    function _getTValues(uint256 tAmount)private view returns (uint256,uint256,uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n    function _getRValues(uint256 tAmount,uint256 tFee,uint256 tLiquidity,uint256 currentRate) private pure returns (uint256,uint256,uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        if(buyOrSellSwitch == BUY){\r\n            tokensForMarketing += tLiquidity * taxBuyMarketing / _divForLiq;\r\n            tokensForTreasury += tLiquidity * taxBuyTreasury / _divForLiq;\r\n            tokensForLiquidity += tLiquidity * taxBuyLiquidity / _divForLiq;\r\n        } else if(buyOrSellSwitch == SELL){\r\n            tokensForMarketing += tLiquidity * taxSellMarketing / _divForLiq;\r\n            tokensForTreasury += tLiquidity * taxSellTreasury / _divForLiq;\r\n            tokensForLiquidity += tLiquidity * taxSellLiquidity / _divForLiq;\r\n        }\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_reflectionsTax).div(10**2);\r\n    }\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityTax + _marketingTax + _treasuryTax).div(10**2);\r\n    }\r\n    function _approve(address owner,address spender,uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from zero address\");\r\n        require(spender != address(0), \"ERC20: approve to zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBot[from]);\r\n        if (maxWalletOn == true && ! _isMaxWalletExclude[to]) {\r\n            require(balanceOf(to) + amount <= _maxWallet, \"Max amount of tokens for wallet reached\");\r\n        }\r\n        if(_initiateTrades == true) {\r\n            IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            uniV2Router = _uniV2Router;\r\n            uniV2Pair = IUniswapV2Factory(_uniV2Router.factory()).getPair(address(this), _uniV2Router.WETH());\r\n            activeTradingBlock = block.number;\r\n            earlyBuyPenaltyEnd = block.timestamp + 127 hours;\r\n            _isMaxWalletExclude[address(uniV2Pair)] = true;\r\n            _isMaxWalletExclude[address(uniV2Router)] = true;\r\n            _isExcludedMaxTxnAmount[address(uniV2Router)] = true;\r\n            _isExcludedMaxTxnAmount[address(uniV2Pair)] = true;\r\n            limitsOn = true;\r\n            maxWalletOn = true;\r\n            swapAndLiquifyEnabled = true;\r\n            _initiateTrades = false;\r\n        }\r\n        if(limitsOn){\r\n            if (from != owner() && to != owner() && to != address(0) && to != dead && !inSwapAndLiquify) {\r\n                if(from != owner() && to != uniV2Pair) {\r\n                    for (uint x = 0; x < 2; x++) {\r\n                    if(block.number == activeTradingBlock + x) {\r\n                        isSniper[to] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        uint256 totalTokensToSwap = tokensForLiquidity.add(tokensForMarketing);\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= _minTaxSwap;\r\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && balanceOf(uniV2Pair) > 0 && totalTokensToSwap > 0 && !_isExcludedFromFee[to] && !_isExcludedFromFee[from] && to == uniV2Pair && overMinimumTokenBalance) {\r\n            swapTokens();\r\n            }\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n            buyOrSellSwitch = TRANSFER;\r\n        } else {\r\n            if (from == uniV2Pair) {\r\n                removeAllFee();\r\n                _marketingTax = taxBuyMarketing;\r\n                _treasuryTax = taxBuyTreasury;\r\n                _reflectionsTax = taxBuyReflections;\r\n                _liquidityTax = taxBuyLiquidity;\r\n                buyOrSellSwitch = BUY;\r\n            } \r\n            else if (to == uniV2Pair) {\r\n                removeAllFee();\r\n                _marketingTax = taxSellMarketing;\r\n                _treasuryTax = taxSellTreasury;\r\n                _reflectionsTax = taxSellReflections;\r\n                _liquidityTax = taxSellLiquidity;\r\n                buyOrSellSwitch = SELL;\r\n                if(isSniper[from] && earlyBuyPenaltyEnd >= block.timestamp){\r\n                    _marketingTax = 98;\r\n                }\r\n            } else {\r\n                require(!isSniper[from]);\r\n                removeAllFee();\r\n                buyOrSellSwitch = TRANSFER;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n    function swapTokens() private lockTheSwap {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForMarketing + tokensForLiquidity + tokensForTreasury;\r\n        uint256 swapLiquidityTokens = tokensForLiquidity.div(2);\r\n        uint256 amountToSwapForETH = contractBalance.sub(swapLiquidityTokens);\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForETH(amountToSwapForETH); \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\r\n        uint256 ethForTreasury = ethBalance.mul(tokensForTreasury).div(totalTokensToSwap);\r\n        uint256 ethForLiquidity = ethBalance.sub(ethForMarketing).sub(ethForTreasury);\r\n        tokensForMarketing = 0;\r\n        tokensForTreasury = 0;\r\n        tokensForLiquidity = 0;\r\n        (bool success,) = address(MarketingWallet).call{value: ethForMarketing}(\"\");\r\n        (success,) = address(TreasuryWallet).call{value: ethForTreasury}(\"\");\r\n        addLiquidity(swapLiquidityTokens, ethForLiquidity);\r\n        if(address(this).balance > 5 * 10**17){\r\n            (success,) = address(DevWallet).call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniV2Router.WETH();\r\n        _approve(address(this), address(uniV2Router), tokenAmount);\r\n        uniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniV2Router), tokenAmount);\r\n        uniV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            dead,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function removeAllFee() private {\r\n        if (_liquidityTax == 0 && _marketingTax == 0 && _treasuryTax == 0 && _reflectionsTax == 0) return;\r\n        _previousLiquidityTax = _liquidityTax;\r\n        _previousMarketingTax = _marketingTax;\r\n        _previousTreasuryTax = _treasuryTax;\r\n        _previousReflectionsTax = _reflectionsTax;\r\n\r\n        _marketingTax = 0;\r\n        _treasuryTax = 0;\r\n        _reflectionsTax = 0;\r\n        _liquidityTax = 0;\r\n    }\r\n    function restoreAllFee() private {\r\n        _marketingTax = _previousMarketingTax;\r\n        _treasuryTax = _previousTreasuryTax;\r\n        _reflectionsTax = _previousReflectionsTax;\r\n        _liquidityTax = _previousLiquidityTax;\r\n    }\r\n    function _tokenTransfer(address sender,address recipient,uint256 amount,bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n    function _transferStandard(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferToExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferFromExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferBothExcluded(address sender,address recipient,uint256 tAmount) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _tokenTransferNoFee(address sender,address recipient,uint256 amount) private {\r\n        _rOwned[sender] = _rOwned[sender].sub(amount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(amount);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(amount);\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function excludeFromMaxWallet(address account) external onlyOwner {\r\n        _isMaxWalletExclude[account] = true;\r\n    }\r\n    function includeInMaxWallet(address account) external onlyOwner {\r\n        _isMaxWalletExclude[account] = false;\r\n    }\r\n    function isExcludedFromMaxWallet(address account) public view returns (bool) {\r\n        return _isMaxWalletExclude[account];\r\n    }\r\n    function BotAddToList(address _user) public onlyOwner {\r\n        require(!isBot[_user]);\r\n        isBot[_user] = true;\r\n    }\r\n\tfunction BotRemoveFromList(address _user) public onlyOwner {\r\n        require(isBot[_user]);\r\n        isBot[_user] = false;\r\n    }\r\n\tfunction removeSniper(address account) external onlyOwner {\r\n        isSniper[account] = false;\r\n    }\r\n    function executeLimits() external onlyOwner {\r\n        limitsOn = true;\r\n    }\r\n    function LimitRemovalExecution() external onlyOwner {\r\n        limitsOn = false;\r\n    }\r\n    function INITIATE() external onlyOwner {\r\n\t\t_initiateTrades = true;\r\n\t}\r\n\tfunction STOPINITIATE() external onlyOwner {\r\n\t\t_initiateTrades = false;\r\n\t}\r\n    function TaxSwapEnable() external onlyOwner {\r\n        swapAndLiquifyEnabled = true;\r\n    }\r\n    function TaxSwapDisable() external onlyOwner {\r\n        swapAndLiquifyEnabled = false;\r\n    }\r\n    function enableMaxWallet() external onlyOwner {\r\n        maxWalletOn = true;\r\n    }\r\n    function disableMaxWallet() external onlyOwner {\r\n        maxWalletOn = false;\r\n    }\r\n    function setBuyTax(uint256 _buyMarketingTax, uint256 _buyLiquidityTax, uint256 _buyTreasuryTax, uint256 _buyReflectionsTax) external onlyOwner {\r\n        taxBuyMarketing = _buyMarketingTax;\r\n        taxBuyLiquidity = _buyLiquidityTax;\r\n        taxBuyTreasury = _buyTreasuryTax;\r\n        taxBuyReflections = _buyReflectionsTax;\r\n    }\r\n    function setSellTax(uint256 _sellMarketingTax, uint256 _sellLiquidityTax, uint256 _sellTreasuryTax, uint256 _sellReflectionsTax) external onlyOwner {\r\n        taxSellMarketing = _sellMarketingTax;\r\n        taxSellLiquidity = _sellLiquidityTax;\r\n        taxSellTreasury = _sellTreasuryTax;\r\n        taxSellReflections = _sellReflectionsTax;\r\n    }\r\n    function forceSwapBack() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        require(contractBalance >= _tTotal * 5 / 10000, \"Can only swap back if more than 0.05% of tokens stuck on contract\");\r\n        swapTokens();\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n    function withdrawDevETH() public onlyOwner {\r\n        bool success;\r\n        (success,) = address(DevWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n    function manualBurnTokens(uint256 percent) external onlyOwner returns (bool){\r\n        require(percent <= 10, \"May not nuke more than 10% of tokens in LP\");\r\n        uint256 liquidityPairBalance = this.balanceOf(uniV2Pair);\r\n        uint256 amountToBurn = liquidityPairBalance * percent / 10**2;\r\n        if (amountToBurn > 0){\r\n            _transfer(uniV2Pair, dead, amountToBurn);\r\n        }\r\n        totalBurnedTokens = balanceOf(dead);\r\n        require(totalBurnedTokens <= _tTotal * 50 / 10**2, \"Can not burn more then 50% of supply\");\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniV2Pair);\r\n        pair.sync();\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"excludedAddress\",\"type\":\"address\"}],\"name\":\"ExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"includedAddress\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"BotAddToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"BotRemoveFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LimitRemovalExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STOPINITIATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxSwapDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TaxSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTreasuryTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyReflectionsTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTreasuryTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellReflectionsTax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuyLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuyReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuyTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSellLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSellReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSellTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDevETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "APEDAO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7d5a367e33e3f1e9fc8e0efdba337f662bcb1051b122182ebc6c16d46d1e3ab"}]}