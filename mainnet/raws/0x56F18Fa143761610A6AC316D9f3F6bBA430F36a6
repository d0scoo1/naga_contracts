{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ember.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./interfaces/IEmber.sol\\\";\\r\\nimport \\\"./interfaces/IProxy.sol\\\";\\r\\nimport \\\"./factory.sol\\\";\\r\\nimport \\\"./proxy.sol\\\";\\r\\n\\r\\ncontract Ember is factory, IEmber{\\r\\n\\r\\n    // A unique Id for each NFT to be lended\\r\\n    uint256 private lendingId;\\r\\n\\r\\n    // represent seconds in one day\\r\\n    uint256 public ONE_DAY = 86400;\\r\\n\\r\\n    // A uint to struct mapping to store lending & renting data against Id\\r\\n    mapping(uint256 => IEmber.LendingRenting) private lendingRenting;\\r\\n\\r\\n    //A address BorrowerProxy struct to store newBorrower address & proxyAddress\\r\\n    mapping(address => IEmber.BorrowerProxy) private BorrowerProxyAddress;\\r\\n    \\r\\n    /**\\r\\n    * @notice lend NFT for renting.\\r\\n    * @dev A unique lending Id will be associated with each NFT staked.\\r\\n    * @param _nft - nft address\\r\\n    * @param _adapter - adapter address: adapters include functions allowed by lender\\r\\n    * to be executed using it's nft by borrower\\r\\n    * @param _tokenId - nft's tokenId\\r\\n    * @param _maxRentDuration - rent duration for NFT\\r\\n    * @param _perDayRentCharges - per day rent charges  \\r\\n    * Emits a {lend} event.\\r\\n    */\\r\\n     \\r\\n    function lend(\\r\\n        address _nft,\\r\\n        address _adapter, \\r\\n        uint256 _tokenId,\\r\\n        uint256 _maxRentDuration,\\r\\n        uint256 _perDayRentCharges\\r\\n    ) external override {\\r\\n\\r\\n        createLendData(_tokenId, lendingId, _maxRentDuration, _perDayRentCharges, msg.sender, _adapter);\\r\\n\\r\\n        ensureLendable(_nft, _maxRentDuration, _perDayRentCharges);\\r\\n\\r\\n        IERC721(_nft).transferFrom(msg.sender,address(this),_tokenId);\\r\\n\\r\\n        emit Lent(\\r\\n        _nft,\\r\\n        msg.sender,\\r\\n        _tokenId,\\r\\n        lendingId,\\r\\n        _perDayRentCharges,\\r\\n        lendingRenting[lendingId].lending.stakedTill,\\r\\n        block.timestamp\\r\\n        );\\r\\n\\r\\n        lendingId++;\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice Rent NFT.\\r\\n    * @dev for each unique borrower a proxy contract will be deployed and that\\r\\n    * borrowed nft will be transffered to that proxy contract\\r\\n    * payable - Amount in ETH for renting the NFT will be transffered to NFT lender \\r\\n    * @param _nft - nft address\\r\\n    * @param _tokenId - nft's tokenId\\r\\n    * @param _lendingId - lendingID for that NFT  \\r\\n    * Emits a {rent} event.\\r\\n    */\\r\\n\\r\\n    function rent(\\r\\n        address _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lendingId,\\r\\n        uint256 _rentDuration\\r\\n    ) external override payable returns(address){\\r\\n        uint256 amount = msg.value;\\r\\n        address proxy = getProxy(_lendingId, msg.sender);\\r\\n\\r\\n        if(IERC721(_nft).ownerOf(_tokenId) != address(this)){\\r\\n            \\r\\n            IProxy(proxy).getNFT(_nft, _tokenId, _lendingId);    \\r\\n\\r\\n        }\\r\\n\\r\\n        createRentData(_lendingId, _rentDuration, _tokenId, _nft, msg.sender);\\r\\n        \\r\\n        ensureRentable(_nft, _tokenId, _lendingId, _rentDuration);\\r\\n        \\r\\n        payable(lendingRenting[_lendingId].lending.lenderAddress).transfer(address(this).balance);\\r\\n        \\r\\n        IERC721(_nft).transferFrom(address(this),proxy,_tokenId);\\r\\n        \\r\\n        emit Rented(\\r\\n        msg.sender,\\r\\n        lendingRenting[_lendingId].lending.lenderAddress,\\r\\n        _nft,\\r\\n        _tokenId,\\r\\n        _lendingId,\\r\\n        _rentDuration,\\r\\n        amount,\\r\\n        block.timestamp\\r\\n        );\\r\\n        \\r\\n        return proxy;   \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice unLend the the NFT.\\r\\n    * @dev  get NFT from proxy if it's not in this contract and then transfer to the lender \\r\\n    * @param _nft - nft address\\r\\n    * @param _tokenId - nft's tokenId\\r\\n    * @param _lendingId - lendingID for that NFT \\r\\n    * Emits a {LendingStopped} event.\\r\\n    */\\r\\n\\r\\n    function stopLending(\\r\\n        address _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lendingId\\r\\n    ) external override {\\r\\n\\r\\n        ensureStopable(_nft,_tokenId,_lendingId);\\r\\n\\r\\n        if(IERC721(_nft).ownerOf(_tokenId)!= address(this)){\\r\\n    \\r\\n            IProxy(checkProxy(lendingRenting[_lendingId].renting.renterAddress)).getNFT(_nft, _tokenId, _lendingId);\\r\\n           \\r\\n        }\\r\\n\\r\\n            IERC721(_nft).transferFrom(address(this),msg.sender,_tokenId);\\r\\n            emit LendingStopped(msg.sender, block.timestamp, _nft);\\r\\n            delete lendingRenting[_lendingId];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice  update the renting struct agianst lendingId.\\r\\n    * @param _lendingId - lendingID \\r\\n    * @param _rentDuration -  rent duration for NFT\\r\\n    * @param msgSender - Renter address\\r\\n    */\\r\\n\\r\\n    function createRentData(uint256 _lendingId,  uint256 _rentDuration, uint256 _tokenId, address _nft,address msgSender) internal {\\r\\n\\r\\n        lendingRenting[_lendingId].renting.renterAddress = payable(msgSender);\\r\\n        lendingRenting[_lendingId].renting.rentedTill = block.timestamp + _rentDuration;\\r\\n        lendingRenting[_lendingId].renting.rentDuration = _rentDuration;\\r\\n        lendingRenting[_lendingId].renting.tokenId = _tokenId;\\r\\n        lendingRenting[_lendingId].renting.nft = _nft;\\r\\n        \\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice  update the lending struct agianst lendingId.\\r\\n    * @param _tokenId - lendingID \\r\\n    * @param _lendingId - lendingID \\r\\n    * @param _maxRentDuration - NFT lend duration i.e for 30 days\\r\\n    * @param _perDayRentPrice - _perDayrentPrice\\r\\n    * @param msgSender - lender address\\r\\n    * @param _adapter - adapter address\\r\\n    */\\r\\n\\r\\n    function createLendData(uint256 _tokenId,uint256 _lendingId, uint256 _maxRentDuration, uint256 _perDayRentPrice, address msgSender, address _adapter) internal{\\r\\n\\r\\n        lendingRenting[_lendingId].lending.lenderAddress = msgSender;\\r\\n        lendingRenting[_lendingId].lending.adapter = _adapter;\\r\\n        lendingRenting[_lendingId].lending.dailyRentPrice = _perDayRentPrice;\\r\\n        lendingRenting[_lendingId].lending.stakedTill = block.timestamp + _maxRentDuration;\\r\\n        lendingRenting[_lendingId].lending.tokenId = _tokenId; \\r\\n    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice  returns the proxy address for after delopying new proxy contract cond: unique borrrower\\r\\n    * @dev check that isnewBorrower then deploy new Proxy; update Borrowerproxy struct & return proxy Address\\r\\n    * @param _lendingId - lendingID \\r\\n    * @param _borrower - borrower address\\r\\n    */\\r\\n    \\r\\n\\r\\n\\r\\n    function getProxy(uint256 _lendingId, address _borrower) internal returns(address){\\r\\n        \\r\\n        if(!BorrowerProxyAddress[_borrower].newBorrower) // new borrower\\r\\n        {   \\r\\n            \\r\\n            bytes memory bytecode = getbytecode(address(this), _borrower);\\r\\n            getAddress(bytecode, _lendingId);\\r\\n            address _proxyAddress = deploy(bytecode, _lendingId);\\r\\n            BorrowerProxyAddress[_borrower].newBorrower = true;\\r\\n            BorrowerProxyAddress[_borrower].proxyAddress = _proxyAddress;\\r\\n            \\r\\n        }\\r\\n\\r\\n        return BorrowerProxyAddress[_borrower].proxyAddress;\\r\\n\\r\\n    }\\r\\n\\r\\n    // view functions \\r\\n\\r\\n    /**\\r\\n     * @dev ensure the NFT is lendable by passing through require checks\\r\\n     * @param _nft - nft address\\r\\n     * @param _maxRentDuration - lended till\\r\\n     * @param _dailyRentPrice  - per day rent charges \\r\\n    */\\r\\n\\r\\n    function ensureLendable(address _nft, uint256 _maxRentDuration, uint256 _dailyRentPrice) internal view{\\r\\n\\r\\n        require(is721(_nft),\\\"Ember:: Not ERC721 token\\\");\\r\\n        require(_maxRentDuration!=0 && _dailyRentPrice!=0,\\\"Ember :: Invalid Parameters\\\");\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev ensure the NFT is rentable by passing through require checks\\r\\n     * @param _nft - nft address\\r\\n     * @param _tokenId - tokenid\\r\\n     * @param _lendingId - lendingId\\r\\n     * @param _rentDuration - rent duration for NFT \\r\\n    */\\r\\n\\r\\n    function ensureRentable(address _nft, uint256 _tokenId, uint256 _lendingId, uint256 _rentDuration) internal view{\\r\\n\\r\\n        require(lendingRenting[_lendingId].lending.lenderAddress!=msg.sender, \\\"Lender can't be borrower for it's own NFT\\\");\\r\\n        require(_rentDuration!=0,\\\"Ember :: Invalid RentDuaration\\\");\\r\\n        require(is721(_nft),\\\"Ember:: Not ERC721 token\\\");\\r\\n        require(lendingRenting[_lendingId].lending.tokenId == _tokenId,\\\"Ember::invalid tokenId || _lendingId\\\");\\r\\n        require(lendingRenting[_lendingId].renting.rentedTill <= lendingRenting[_lendingId].lending.stakedTill,\\\"Ember::Rent duration>staked duration\\\");\\r\\n        require(lendingRenting[_lendingId].lending.dailyRentPrice * (lendingRenting[_lendingId].renting.rentDuration)/ONE_DAY == msg.value, \\\"Invalid Amount\\\");\\r\\n    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev ensure the NFT is can unlendable by passing through require checks\\r\\n     * @param _nft - nft address\\r\\n     * @param _tokenId - tokenId\\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n\\r\\n    function ensureStopable(address _nft, uint256 _tokenId, uint256 _lendingId) internal view{\\r\\n\\r\\n        require(lendingRenting[_lendingId].lending.lenderAddress == msg.sender, \\\"Ember::not lender\\\");\\r\\n        require(is721(_nft),\\\"Ember:: Not ERC721 token\\\");\\r\\n        require(lendingRenting[_lendingId].lending.tokenId == _tokenId,\\\"Ember:: invalid tokenId || _lendingId\\\");\\r\\n    \\r\\n    }\\r\\n\\r\\n    // Getter Functions\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev checks whether NFT is type of ERC721 & returns true if success \\r\\n     * @param _nft nft address\\r\\n    */\\r\\n\\r\\n    function is721(address _nft) private view returns (bool) {\\r\\n\\r\\n        return IERC165(_nft).supportsInterface(type(IERC721).interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the adapter address against lendingId\\r\\n     * @notice this function can be called from proxy contract  \\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n\\r\\n    function getNFTAdapter(uint256 _lendingId) external override view returns(address){\\r\\n\\r\\n        return lendingRenting[_lendingId].lending.adapter;\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the proxy address against borrower  \\r\\n     * @param _borrower - borrower address\\r\\n    */\\r\\n\\r\\n    function checkProxy(address _borrower) public override view returns(address){\\r\\n\\r\\n        return BorrowerProxyAddress[_borrower].proxyAddress;\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the NFT staked Till  \\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n    function getStakedTill(uint256 _lendingId) external override view returns(uint256){\\r\\n\\r\\n        return lendingRenting[_lendingId].lending.stakedTill; \\r\\n    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the NFT rented Till  \\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n    function getRentedTill(uint256 _lendingId) external override view returns(uint256){\\r\\n\\r\\n        return lendingRenting[_lendingId].renting.rentedTill; \\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the NFT per day rent charges  \\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n    function getDailyRentCharges(uint256 _lendingId) external override view returns(uint256){\\r\\n\\r\\n        return lendingRenting[_lendingId].lending.dailyRentPrice; \\r\\n    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the NFT address & tokenId associated to the lendingId  \\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n\\r\\n    function getNFTtokenID(uint256 _lendingId) external override view returns(address,uint256){\\r\\n\\r\\n        return (lendingRenting[_lendingId].renting.nft,lendingRenting[_lendingId].renting.tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmber.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IEmber {\\r\\n\\r\\n    struct Lending {\\r\\n        address lenderAddress;\\r\\n        address adapter;\\r\\n        uint256 dailyRentPrice;\\r\\n        uint256 stakedTill;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Renting {\\r\\n        address payable renterAddress;\\r\\n        address nft;\\r\\n        uint256 tokenId;\\r\\n        uint256 rentedTill;\\r\\n        uint256 rentedAt;\\r\\n        uint256 rentDuration;\\r\\n    }\\r\\n\\r\\n    struct LendingRenting {\\r\\n       Lending lending;\\r\\n       Renting renting;\\r\\n    }\\r\\n\\r\\n    struct BorrowerProxy{\\r\\n        bool newBorrower;\\r\\n        address proxyAddress;\\r\\n    }\\r\\n    \\r\\n    event Lent(\\r\\n        address indexed nftAddress,\\r\\n        address indexed lenderAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 lendingId, \\r\\n        uint256 dailyRentPrice,\\r\\n        uint256 stakedTill,\\r\\n        uint256 lentAt\\r\\n    );\\r\\n\\r\\n    event Rented(\\r\\n        address indexed renterAddress,\\r\\n        address indexed lenderAddress,\\r\\n        address indexed nft,\\r\\n        uint256 tokenId,\\r\\n        uint256 lendingId,\\r\\n        uint256 rentDuration,\\r\\n        uint256 amountPaid,\\r\\n        uint256 rentedAt\\r\\n    );\\r\\n\\r\\n    event LendingStopped(address msgSender, uint256 stoppedAt, address nft);\\r\\n\\r\\n    function lend(\\r\\n        address _nft,\\r\\n        address _adapter, \\r\\n        uint256 _tokenId,\\r\\n        uint256 _maxRentDuration,\\r\\n        uint256 _dailyRentPrice\\r\\n    ) external;\\r\\n\\r\\n    \\r\\n    function rent(\\r\\n        address _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lendingId,\\r\\n        uint256 _rentDuration\\r\\n    ) external payable returns(address);\\r\\n\\r\\n    function stopLending(\\r\\n        address _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lendingId\\r\\n    ) external;\\r\\n\\r\\n    function checkProxy(address _borrower) external view returns(address);\\r\\n\\r\\n    function getRentedTill(uint256 _lendingId) external view returns(uint256);\\r\\n\\r\\n    function getStakedTill(uint256 _lendingId) external view returns(uint256);\\r\\n\\r\\n    function getDailyRentCharges(uint256 _lendingId) external view returns(uint256);\\r\\n\\r\\n    function getNFTAdapter(uint256 _lendingId) external view returns(address);\\r\\n\\r\\n    function getNFTtokenID(uint256 _lendingId) external view returns(address, uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IProxy{\\r\\n\\r\\n    function getNFT(address _nft, uint256 _tokenId, uint256 _lendingId) external;\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\nimport \\\"./proxy.sol\\\";\\r\\ncontract factory {\\r\\n    event deployed(address addr,  uint256 _salt);\\r\\n\\r\\n    //1:get bytecode contract to be deployed \\r\\n    function getbytecode(address stakingAddress, address proxyOwner) public pure returns(bytes memory) {\\r\\n        \\r\\n        bytes memory bytecode = type(Proxy).creationCode;\\r\\n        return abi.encodePacked(bytecode, abi.encode(stakingAddress, proxyOwner)); //constructor argument of bytecode\\r\\n        \\r\\n    }\\r\\n\\r\\n    //2:compute address of contract to be deployed\\r\\n    function getAddress(bytes memory bytecode, uint256 _salt) public view returns(address){\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                bytes1(0xff),\\r\\n                address(this),//address of deployer: proxy will be deployed from factory\\r\\n                _salt, // a random number\\r\\n                keccak256(bytecode)\\r\\n                )\\r\\n        );\\r\\n\\r\\n        //cast last 20 bytes of hash to address\\r\\n        return address(uint160(uint256(hash)));\\r\\n    }\\r\\n\\r\\n    //3 deploy contract\\r\\n    function deploy(bytes memory bytecode, uint256 _salt) public payable returns(address){\\r\\n        address addr;\\r\\n        //how to call create2\\r\\n            //create2(v,p,n,s)\\r\\n            //1:v-amount of ETH to send \\r\\n            //2:p-pointer to start of the code in memory\\r\\n            //3:n-size of code\\r\\n            //4:s-salt\\r\\n        assembly{\\r\\n            addr:= create2(\\r\\n                0, // wei sent with current call\\r\\n                add(bytecode,0x20), //actual code start after skipping the first 32 bytes\\r\\n                mload(bytecode), //load the size of the code contained in the first 32 bytes\\r\\n                _salt // a random number\\r\\n            )\\r\\n            //check contract is deployed: if not zero else revert the whole process\\r\\n            if iszero(extcodesize(addr)) { \\r\\n                revert(0, 0) \\r\\n                }\\r\\n        }\\r\\n        emit deployed(addr, _salt);\\r\\n        \\r\\n        return addr;\\r\\n           \\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/proxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"./interfaces/IEmber.sol\\\";\\r\\n\\r\\n\\r\\n// Proxy contract deployed at run time for each unique borrower & NFT transffered to proxy\\r\\n// it holds the all NFTs borrowed by a single borrower address\\r\\n// it serve as msg.sender for games contract\\r\\n// this contract delegates call to suitable adapters which further calls to game contract\\r\\n\\r\\n contract Proxy {\\r\\n\\r\\n    // store borrower address as proxyOwner   \\r\\n    address proxyOwner;\\r\\n\\r\\n    // store staking contract address\\r\\n    address stakingAddress;\\r\\n\\r\\n    constructor(address _staking, address _proxyOwner){\\r\\n\\r\\n        proxyOwner = _proxyOwner;  \\r\\n        stakingAddress = _staking;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev fallback function executed when no other function signature matches in this contract\\r\\n     * for each function signature that exexuted using fallback must have type\\r\\n     * uint256 lendingId as a last paramter of that function signature  \\r\\n     * extract lendingId from msg.data to get NFT adapter & to pass through few require checks\\r\\n     * returns the success value or error  \\r\\n    */\\r\\n    \\r\\n    fallback () external payable {\\r\\n\\r\\n        bytes calldata data = msg.data;\\r\\n        bytes memory lendId =bytes(data[msg.data.length-32:]); //last parameter must be lendingId\\r\\n        uint256 _lendingId = uint256(abi.decode(lendId,(uint256)));\\r\\n        address adapter = IEmber(stakingAddress).getNFTAdapter(_lendingId);\\r\\n        ensureCallable(_lendingId, msg.sender);\\r\\n\\r\\n        assembly {\\r\\n            \\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the adapter\\r\\n            //gas\\taddr\\targsOffset\\targsLength\\tretOffset\\tretLength\\t\\r\\n            let result := delegatecall(gas(), adapter, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n                case 0 {\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n                default {\\r\\n                    return(0, returndatasize())\\r\\n                }\\r\\n            }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice this function can be called uisng staking contract\\r\\n     * @dev transfers the nft back to satking contract after passing through require\\r\\n     * @param _nft - nft address\\r\\n     * @param _tokenId - nft's tokenId\\r\\n     * @param _lendingId - lendingId\\r\\n    */\\r\\n\\r\\n\\r\\n    function getNFT(address _nft, uint256 _tokenId, uint256 _lendingId) external {\\r\\n        \\r\\n        require(stakingAddress == msg.sender,\\\"Invalid::Call\\\");\\r\\n        require(IEmber(stakingAddress).getRentedTill(_lendingId)< block.timestamp, \\\"Rent duration not Expired\\\");\\r\\n        IERC721(_nft).transferFrom(address(this),stakingAddress,_tokenId);\\r\\n    \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice this function called from above fallback function to ensure the valididity \\r\\n     * @param _lendingId - lendingId\\r\\n     * @param msgSender - msg.sender address\\r\\n    */\\r\\n\\r\\n    function ensureCallable(uint256 _lendingId, address msgSender) internal view{\\r\\n        \\r\\n        (address _nft, uint256 _tokenId) = IEmber(stakingAddress).getNFTtokenID(_lendingId);\\r\\n        require(_nft != address(0),\\\"Invalid::ID\\\");\\r\\n        require(IERC721(_nft).ownerOf(_tokenId) == address(this),\\\"NFT not in proxy\\\");\\r\\n        require(proxyOwner == msgSender,\\\"caller must be owner\\\");\\r\\n        require(IEmber(stakingAddress).getRentedTill(_lendingId)> block.timestamp, \\\"Rent duration Expired\\\");\\r\\n            \\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stoppedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"LendingStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyRentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lentAt\",\"type\":\"uint256\"}],\"name\":\"Lent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"renterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rentDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rentedAt\",\"type\":\"uint256\"}],\"name\":\"Rented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"deployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"checkProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"getDailyRentCharges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"getNFTAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"getNFTtokenID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"getRentedTill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"getStakedTill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"}],\"name\":\"getbytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRentDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perDayRentCharges\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentDuration\",\"type\":\"uint256\"}],\"name\":\"rent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingId\",\"type\":\"uint256\"}],\"name\":\"stopLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Ember", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}