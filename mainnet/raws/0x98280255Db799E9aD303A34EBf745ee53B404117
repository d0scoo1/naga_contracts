{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\nimport \\\"./Interfaces/ICollSurplusPool.sol\\\";\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\nimport \\\"./Interfaces/ILQTYStaking.sol\\\";\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\nimport \\\"./Dependencies/Ownable.sol\\\";\\nimport \\\"./Dependencies/IERC20.sol\\\";\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Interfaces/IGovernance.sol\\\";\\nimport \\\"./Interfaces/ILiquityLUSDToken.sol\\\";\\nimport \\\"./Dependencies/ISimpleERCFund.sol\\\";\\n\\ncontract BorrowerOperations is LiquityBase, Ownable, CheckContract, IBorrowerOperations {\\n    using SafeMath for uint256;\\n    string public constant NAME = \\\"BorrowerOperations\\\";\\n\\n    // --- Connected contract declarations ---\\n\\n    ITroveManager public troveManager;\\n\\n    address stabilityPoolAddress;\\n\\n    address gasPoolAddress;\\n\\n    ICollSurplusPool collSurplusPool;\\n\\n    ILiquityLUSDToken public lusdToken;\\n    IERC20 public weth;\\n\\n    // A doubly linked list of Troves, sorted by their collateral ratios\\n    ISortedTroves public sortedTroves;\\n\\n    /* --- Variable container structs  ---\\n\\n    Used to hold, return and assign variables inside a function, in order to avoid the error:\\n    \\\"CompilerError: Stack too deep\\\". */\\n\\n    struct LocalVariables_adjustTrove {\\n        uint256 price;\\n        uint256 collChange;\\n        uint256 netDebtChange;\\n        bool isCollIncrease;\\n        uint256 debt;\\n        uint256 coll;\\n        uint256 oldICR;\\n        uint256 newICR;\\n        uint256 newTCR;\\n        uint256 LUSDFee;\\n        uint256 newDebt;\\n        uint256 newColl;\\n        uint256 stake;\\n    }\\n\\n    struct LocalVariables_openTrove {\\n        uint256 price;\\n        uint256 LUSDFee;\\n        uint256 netDebt;\\n        uint256 compositeDebt;\\n        uint256 ICR;\\n        uint256 NICR;\\n        uint256 stake;\\n        uint256 arrayIndex;\\n    }\\n\\n    struct ContractsCache {\\n        ITroveManager troveManager;\\n        IActivePool activePool;\\n        ILiquityLUSDToken lusdToken;\\n        IPriceFeed priceFeed;\\n    }\\n\\n\\n\\n    mapping(address => bool) public frontEnds;\\n\\n    // --- Dependency setters ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _lusdTokenAddress,\\n        address _wethAddress,\\n        address _governanceAddress\\n    ) external override onlyOwner {\\n        // This makes impossible to open a trove with zero withdrawn LUSD\\n        assert(MIN_NET_DEBT > 0);\\n\\n        checkContract(_troveManagerAddress);\\n        checkContract(_activePoolAddress);\\n        checkContract(_defaultPoolAddress);\\n        checkContract(_stabilityPoolAddress);\\n        checkContract(_gasPoolAddress);\\n        checkContract(_collSurplusPoolAddress);\\n        checkContract(_sortedTrovesAddress);\\n        checkContract(_lusdTokenAddress);\\n        checkContract(_wethAddress);\\n        checkContract(_governanceAddress);\\n\\n        troveManager = ITroveManager(_troveManagerAddress);\\n        activePool = IActivePool(_activePoolAddress);\\n        defaultPool = IDefaultPool(_defaultPoolAddress);\\n        stabilityPoolAddress = _stabilityPoolAddress;\\n        gasPoolAddress = _gasPoolAddress;\\n        collSurplusPool = ICollSurplusPool(_collSurplusPoolAddress);\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\n        lusdToken = ILiquityLUSDToken(_lusdTokenAddress);\\n        weth = IERC20(_wethAddress);\\n        governance = IGovernance(_governanceAddress);\\n\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\n        emit ActivePoolAddressChanged(_activePoolAddress);\\n        emit DefaultPoolAddressChanged(_defaultPoolAddress);\\n        emit StabilityPoolAddressChanged(_stabilityPoolAddress);\\n        emit GasPoolAddressChanged(_gasPoolAddress);\\n        emit CollSurplusPoolAddressChanged(_collSurplusPoolAddress);\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\n        emit LUSDTokenAddressChanged(_lusdTokenAddress);\\n        emit GovernanceAddressChanged(_governanceAddress);\\n\\n        _renounceOwnership();\\n    }\\n\\n    // --- Borrower Trove Operations ---\\n\\n    function registerFrontEnd() external override {\\n        // should move this to a registry and have the control given to governance\\n        _requireFrontEndNotRegistered(msg.sender);\\n        _requireTroveisNotActive(troveManager, msg.sender);\\n        frontEnds[msg.sender] = true;\\n        emit FrontEndRegistered(msg.sender, block.timestamp);\\n    }\\n\\n    function openTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _LUSDAmount,\\n        uint256 _ETHAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        address _frontEndTag\\n    ) external override {\\n        _requireFrontEndIsRegisteredOrZero(_frontEndTag);\\n        _requireFrontEndNotRegistered(msg.sender);\\n\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            lusdToken,\\n            getPriceFeed()\\n        );\\n        LocalVariables_openTrove memory vars;\\n\\n        vars.price = contractsCache.priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n        _requireTroveisNotActive(contractsCache.troveManager, msg.sender);\\n\\n        vars.LUSDFee;\\n        vars.netDebt = _LUSDAmount;\\n\\n        if (!isRecoveryMode) {\\n            vars.LUSDFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.lusdToken,\\n                _LUSDAmount,\\n                _maxFeePercentage,\\n                _frontEndTag\\n            );\\n            vars.netDebt = vars.netDebt.add(vars.LUSDFee);\\n        }\\n        _requireAtLeastMinNetDebt(vars.netDebt);\\n\\n        // ICR is based on the composite debt, i.e. the requested LUSD amount + LUSD borrowing fee + LUSD gas comp.\\n        vars.compositeDebt = _getCompositeDebt(vars.netDebt);\\n        assert(vars.compositeDebt > 0);\\n\\n        vars.ICR = LiquityMath._computeCR(_ETHAmount, vars.compositeDebt, vars.price);\\n        vars.NICR = LiquityMath._computeNominalCR(_ETHAmount, vars.compositeDebt);\\n\\n        if (isRecoveryMode) {\\n            _requireICRisAboveCCR(vars.ICR);\\n        } else {\\n            _requireICRisAboveMCR(vars.ICR);\\n            uint256 newTCR = _getNewTCRFromTroveChange(\\n                _ETHAmount,\\n                true,\\n                vars.compositeDebt,\\n                true,\\n                vars.price\\n            ); // bools: coll increase, debt increase\\n            _requireNewTCRisAboveCCR(newTCR);\\n        }\\n\\n        // Set the trove struct's properties\\n        contractsCache.troveManager.setTroveFrontEndTag(msg.sender, _frontEndTag);\\n        contractsCache.troveManager.setTroveStatus(msg.sender, 1);\\n        contractsCache.troveManager.increaseTroveColl(msg.sender, _ETHAmount);\\n        contractsCache.troveManager.increaseTroveDebt(msg.sender, vars.compositeDebt);\\n\\n        contractsCache.troveManager.updateTroveRewardSnapshots(msg.sender);\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(msg.sender);\\n\\n        sortedTroves.insert(msg.sender, vars.NICR, _upperHint, _lowerHint);\\n        vars.arrayIndex = contractsCache.troveManager.addTroveOwnerToArray(msg.sender);\\n        emit TroveCreated(msg.sender, vars.arrayIndex);\\n\\n        // Move the ether to the Active Pool, and mint the LUSDAmount to the borrower\\n        _activePoolAddColl(contractsCache.activePool, _ETHAmount);\\n        _withdrawLUSD(\\n            contractsCache.activePool,\\n            contractsCache.lusdToken,\\n            msg.sender,\\n            _LUSDAmount,\\n            vars.netDebt\\n        );\\n        // Move the LUSD gas compensation to the Gas Pool\\n        _withdrawLUSD(\\n            contractsCache.activePool,\\n            contractsCache.lusdToken,\\n            gasPoolAddress,\\n            LUSD_GAS_COMPENSATION,\\n            LUSD_GAS_COMPENSATION\\n        );\\n\\n        emit TroveUpdated(\\n            msg.sender,\\n            vars.compositeDebt,\\n            _ETHAmount,\\n            vars.stake,\\n            BorrowerOperation.openTrove\\n        );\\n        emit LUSDBorrowingFeePaid(msg.sender, vars.LUSDFee);\\n    }\\n\\n    // Send ETH as collateral to a trove\\n    function addColl(\\n        uint256 _ETHAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(msg.sender, 0, 0, _ETHAmount, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Send ETH as collateral to a trove. Called by only the Stability Pool.\\n    function moveETHGainToTrove(\\n        uint256 _ETHAmount,\\n        address _borrower,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _requireCallerIsStabilityPool();\\n        _adjustTrove(_borrower, 0, 0, _ETHAmount, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Withdraw ETH collateral from a trove\\n    function withdrawColl(\\n        uint256 _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(msg.sender, _collWithdrawal, 0, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    // Withdraw LUSD tokens from a trove: mint new LUSD tokens to the owner, and increase the trove's debt accordingly\\n    function withdrawLUSD(\\n        uint256 _maxFeePercentage,\\n        uint256 _LUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(msg.sender, 0, _LUSDAmount, 0, true, _upperHint, _lowerHint, _maxFeePercentage);\\n    }\\n\\n    // Repay LUSD tokens to a Trove: Burn the repaid LUSD tokens, and reduce the trove's debt accordingly\\n    function repayLUSD(\\n        uint256 _LUSDAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(msg.sender, 0, _LUSDAmount, 0, false, _upperHint, _lowerHint, 0);\\n    }\\n\\n    function adjustTrove(\\n        uint256 _maxFeePercentage,\\n        uint256 _collWithdrawal,\\n        uint256 _LUSDChange,\\n        uint256 _ETHAmount,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external override {\\n        _adjustTrove(\\n            msg.sender,\\n            _collWithdrawal,\\n            _LUSDChange,\\n            _ETHAmount,\\n            _isDebtIncrease,\\n            _upperHint,\\n            _lowerHint,\\n            _maxFeePercentage\\n        );\\n    }\\n\\n    /*\\n     * _adjustTrove(): Alongside a debt change, this function can perform either a collateral top-up or a collateral withdrawal.\\n     *\\n     * It therefore expects either a positive _ETHAmount, or a positive _collWithdrawal argument.\\n     *\\n     * If both are positive, it will revert.\\n     */\\n    function _adjustTrove(\\n        address _borrower,\\n        uint256 _collWithdrawal,\\n        uint256 _LUSDChange,\\n        uint256 _ETHAmount,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint,\\n        uint256 _maxFeePercentage\\n    ) internal {\\n        ContractsCache memory contractsCache = ContractsCache(\\n            troveManager,\\n            activePool,\\n            lusdToken,\\n            getPriceFeed()\\n        );\\n        LocalVariables_adjustTrove memory vars;\\n\\n        vars.price = contractsCache.priceFeed.fetchPrice();\\n        bool isRecoveryMode = _checkRecoveryMode(vars.price);\\n\\n        if (_isDebtIncrease) {\\n            _requireValidMaxFeePercentage(_maxFeePercentage, isRecoveryMode);\\n            _requireNonZeroDebtChange(_LUSDChange);\\n        }\\n        _requireSingularCollChange(_ETHAmount, _collWithdrawal);\\n        _requireNonZeroAdjustment(_ETHAmount, _collWithdrawal, _LUSDChange);\\n        _requireTroveisActive(contractsCache.troveManager, _borrower);\\n\\n        // Confirm the operation is either a borrower adjusting their own trove, or a pure ETH transfer from the Stability Pool to a trove\\n        assert(\\n            msg.sender == _borrower ||\\n                (msg.sender == stabilityPoolAddress && _ETHAmount > 0 && _LUSDChange == 0)\\n        );\\n\\n        contractsCache.troveManager.applyPendingRewards(_borrower);\\n\\n        // Get the collChange based on whether or not ETH was sent in the transaction\\n        (vars.collChange, vars.isCollIncrease) = _getCollChange(_ETHAmount, _collWithdrawal);\\n\\n        vars.netDebtChange = _LUSDChange;\\n\\n        // If the adjustment incorporates a debt increase and system is in Normal Mode, then trigger a borrowing fee\\n        if (_isDebtIncrease && !isRecoveryMode) {\\n            address frontEndTag = contractsCache.troveManager.getTroveFrontEnd(_borrower);\\n            vars.LUSDFee = _triggerBorrowingFee(\\n                contractsCache.troveManager,\\n                contractsCache.lusdToken,\\n                _LUSDChange,\\n                _maxFeePercentage,\\n                frontEndTag\\n            );\\n            vars.netDebtChange = vars.netDebtChange.add(vars.LUSDFee); // The raw debt change includes the fee\\n        }\\n\\n        vars.debt = contractsCache.troveManager.getTroveDebt(_borrower);\\n        vars.coll = contractsCache.troveManager.getTroveColl(_borrower);\\n\\n        // Get the trove's old ICR before the adjustment, and what its new ICR will be after the adjustment\\n        vars.oldICR = LiquityMath._computeCR(vars.coll, vars.debt, vars.price);\\n        vars.newICR = _getNewICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease,\\n            vars.price\\n        );\\n        assert(_collWithdrawal <= vars.coll);\\n\\n        // Check the adjustment satisfies all conditions for the current system mode\\n        _requireValidAdjustmentInCurrentMode(isRecoveryMode, _collWithdrawal, _isDebtIncrease, vars);\\n\\n        // When the adjustment is a debt repayment, check it's a valid amount and that the caller has enough LUSD\\n        if (!_isDebtIncrease && _LUSDChange > 0) {\\n            _requireAtLeastMinNetDebt(_getNetDebt(vars.debt).sub(vars.netDebtChange));\\n            _requireValidLUSDRepayment(vars.debt, vars.netDebtChange);\\n            _requireSufficientLUSDBalance(contractsCache.lusdToken, _borrower, vars.netDebtChange);\\n        }\\n\\n        (vars.newColl, vars.newDebt) = _updateTroveFromAdjustment(\\n            contractsCache.troveManager,\\n            _borrower,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        vars.stake = contractsCache.troveManager.updateStakeAndTotalStakes(_borrower);\\n\\n        // Re-insert trove in to the sorted list\\n        uint256 newNICR = _getNewNominalICRFromTroveChange(\\n            vars.coll,\\n            vars.debt,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            vars.netDebtChange,\\n            _isDebtIncrease\\n        );\\n        sortedTroves.reInsert(_borrower, newNICR, _upperHint, _lowerHint);\\n\\n        emit TroveUpdated(\\n            _borrower,\\n            vars.newDebt,\\n            vars.newColl,\\n            vars.stake,\\n            BorrowerOperation.adjustTrove\\n        );\\n        emit LUSDBorrowingFeePaid(msg.sender, vars.LUSDFee);\\n\\n        // Use the unmodified _LUSDChange here, as we don't send the fee to the user\\n        _moveTokensAndETHfromAdjustment(\\n            contractsCache.activePool,\\n            contractsCache.lusdToken,\\n            msg.sender,\\n            vars.collChange,\\n            vars.isCollIncrease,\\n            _LUSDChange,\\n            _isDebtIncrease,\\n            vars.netDebtChange\\n        );\\n    }\\n\\n    function closeTrove() external override {\\n        ITroveManager troveManagerCached = troveManager;\\n        IActivePool activePoolCached = activePool;\\n        ILiquityLUSDToken lusdTokenCached = lusdToken;\\n        IPriceFeed priceFeed = getPriceFeed();\\n\\n        _requireTroveisActive(troveManagerCached, msg.sender);\\n        uint256 price = priceFeed.fetchPrice();\\n        _requireNotInRecoveryMode(price);\\n\\n        troveManagerCached.applyPendingRewards(msg.sender);\\n\\n        uint256 coll = troveManagerCached.getTroveColl(msg.sender);\\n        uint256 debt = troveManagerCached.getTroveDebt(msg.sender);\\n\\n        _requireSufficientLUSDBalance(lusdTokenCached, msg.sender, debt.sub(LUSD_GAS_COMPENSATION));\\n\\n        uint256 newTCR = _getNewTCRFromTroveChange(coll, false, debt, false, price);\\n        _requireNewTCRisAboveCCR(newTCR);\\n\\n        troveManagerCached.removeStake(msg.sender);\\n        troveManagerCached.closeTrove(msg.sender);\\n\\n        emit TroveUpdated(msg.sender, 0, 0, 0, BorrowerOperation.closeTrove);\\n\\n        // Burn the repaid LUSD from the user's balance and the gas compensation from the Gas Pool\\n        _repayLUSD(activePoolCached, lusdTokenCached, msg.sender, debt.sub(LUSD_GAS_COMPENSATION));\\n        _repayLUSD(activePoolCached, lusdTokenCached, gasPoolAddress, LUSD_GAS_COMPENSATION);\\n\\n        // Send the collateral back to the user\\n        activePoolCached.sendETH(msg.sender, coll);\\n    }\\n\\n    /**\\n     * Claim remaining collateral from a redemption or from a liquidation with ICR > MCR in Recovery Mode\\n     */\\n    function claimCollateral() external override {\\n        // send ETH from CollSurplus Pool to owner\\n        collSurplusPool.claimColl(msg.sender);\\n    }\\n\\n    // --- Helper functions ---\\n\\n    function _triggerBorrowingFee(\\n        ITroveManager _troveManager,\\n        ILiquityLUSDToken _lusdToken,\\n        uint256 _LUSDAmount,\\n        uint256 _maxFeePercentage,\\n        address _frontEndTag\\n    ) internal returns (uint256) {\\n        _troveManager.decayBaseRateFromBorrowing(); // decay the baseRate state variable\\n        uint256 LUSDFee = _troveManager.getBorrowingFee(_LUSDAmount);\\n\\n        _requireUserAcceptsFee(LUSDFee, _LUSDAmount, _maxFeePercentage);\\n\\n        // If fee > 0, send fee.\\n        if (LUSDFee > 0) {\\n            // If frontEndTag is not there then send entire fee to fund.\\n            if (_frontEndTag == address(0)) {\\n                _sendFeeToFund(_lusdToken, LUSDFee);\\n            } else {\\n                // Else split and send half to fund and half to frontend.\\n                uint256 feeToFrontEnd = LUSDFee.mul(50).div(100);\\n                uint256 remainingFee = LUSDFee.sub(feeToFrontEnd);\\n                _lusdToken.mint(_frontEndTag, feeToFrontEnd); // send half to frontend.\\n                _sendFeeToFund(_lusdToken, remainingFee); // And reamining half to fund.\\n            }\\n        }\\n\\n        return LUSDFee;\\n    }\\n\\n    function _sendFeeToFund(ILiquityLUSDToken _lusdToken, uint256 _LUSDFeeToFund) internal {\\n        // 1. Mint the fee tokens to governance.\\n        _lusdToken.mint(address(governance), _LUSDFeeToFund);\\n        // 2. The governance nows has the fee tokens, and hence can be sent to funds by governance.\\n        governance.sendToFund(address(_lusdToken), _LUSDFeeToFund, \\\"Borrowing fee triggered\\\");\\n    }\\n\\n    function _getUSDValue(uint256 _coll, uint256 _price) internal pure returns (uint256) {\\n        uint256 usdValue = _price.mul(_coll).div(DECIMAL_PRECISION);\\n        return usdValue;\\n    }\\n\\n    function _getCollChange(uint256 _collReceived, uint256 _requestedCollWithdrawal)\\n        internal\\n        pure\\n        returns (uint256 collChange, bool isCollIncrease)\\n    {\\n        if (_collReceived != 0) {\\n            collChange = _collReceived;\\n            isCollIncrease = true;\\n        } else {\\n            collChange = _requestedCollWithdrawal;\\n        }\\n    }\\n\\n    // Update trove's coll and debt based on whether they increase or decrease\\n    function _updateTroveFromAdjustment(\\n        ITroveManager _troveManager,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal returns (uint256, uint256) {\\n        uint256 newColl = (_isCollIncrease)\\n            ? _troveManager.increaseTroveColl(_borrower, _collChange)\\n            : _troveManager.decreaseTroveColl(_borrower, _collChange);\\n        uint256 newDebt = (_isDebtIncrease)\\n            ? _troveManager.increaseTroveDebt(_borrower, _debtChange)\\n            : _troveManager.decreaseTroveDebt(_borrower, _debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _moveTokensAndETHfromAdjustment(\\n        IActivePool _activePool,\\n        ILiquityLUSDToken _lusdToken,\\n        address _borrower,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _LUSDChange,\\n        bool _isDebtIncrease,\\n        uint256 _netDebtChange\\n    ) internal {\\n        if (_isDebtIncrease) {\\n            _withdrawLUSD(_activePool, _lusdToken, _borrower, _LUSDChange, _netDebtChange);\\n        } else {\\n            _repayLUSD(_activePool, _lusdToken, _borrower, _LUSDChange);\\n        }\\n\\n        if (_isCollIncrease) {\\n            _activePoolAddColl(_activePool, _collChange);\\n        } else {\\n            _activePool.sendETH(_borrower, _collChange);\\n        }\\n    }\\n\\n    // Send ETH to Active Pool and increase its recorded ETH balance\\n    function _activePoolAddColl(IActivePool _activePool, uint256 _amount) internal {\\n        weth.transferFrom(msg.sender, address(this), _amount);\\n        weth.approve(address(_activePool), _amount);\\n        _activePool.receiveETH(_amount);\\n    }\\n\\n    // Issue the specified amount of LUSD to _account and increases the total active debt (_netDebtIncrease potentially includes a LUSDFee)\\n    function _withdrawLUSD(\\n        IActivePool _activePool,\\n        ILiquityLUSDToken _lusdToken,\\n        address _account,\\n        uint256 _LUSDAmount,\\n        uint256 _netDebtIncrease\\n    ) internal {\\n        _activePool.increaseLUSDDebt(_netDebtIncrease);\\n        _lusdToken.mint(_account, _LUSDAmount);\\n    }\\n\\n    // Burn the specified amount of LUSD from _account and decreases the total active debt\\n    function _repayLUSD(\\n        IActivePool _activePool,\\n        ILiquityLUSDToken _lusdToken,\\n        address _account,\\n        uint256 _LUSD\\n    ) internal {\\n        _activePool.decreaseLUSDDebt(_LUSD);\\n        _lusdToken.burn(_account, _LUSD);\\n    }\\n\\n    // --- 'Require' wrapper functions ---\\n\\n    function _requireFrontEndNotRegistered(address _address) internal view {\\n        require(\\n            !frontEnds[_address],\\n            \\\"BorrowerOperations: must not already be a registered front end\\\"\\n        );\\n    }\\n\\n    function _requireFrontEndIsRegisteredOrZero(address _address) internal view {\\n        require(\\n            frontEnds[_address] || _address == address(0),\\n            \\\"BorrowerOperations: Tag must be a registered front end, or the zero address\\\"\\n        );\\n    }\\n\\n    function _requireSingularCollChange(uint256 _ETHAmount, uint256 _collWithdrawal) internal pure {\\n        require(\\n            _ETHAmount == 0 || _collWithdrawal == 0,\\n            \\\"BorrowerOperations: Cannot withdraw and add coll\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsBorrower(address _borrower) internal view {\\n        require(\\n            msg.sender == _borrower,\\n            \\\"BorrowerOps: Caller must be the borrower for a withdrawal\\\"\\n        );\\n    }\\n\\n    function _requireNonZeroAdjustment(\\n        uint256 _ETHAmount,\\n        uint256 _collWithdrawal,\\n        uint256 _LUSDChange\\n    ) internal pure {\\n        require(\\n            _ETHAmount != 0 || _collWithdrawal != 0 || _LUSDChange != 0,\\n            \\\"BorrowerOps: There must be either a collateral change or a debt change\\\"\\n        );\\n    }\\n\\n    function _requireTroveisActive(ITroveManager _troveManager, address _borrower) internal view {\\n        uint256 status = _troveManager.getTroveStatus(_borrower);\\n        require(status == 1, \\\"BorrowerOps: Trove does not exist or is closed\\\");\\n    }\\n\\n    function _requireTroveisNotActive(ITroveManager _troveManager, address _borrower) internal view {\\n        uint256 status = _troveManager.getTroveStatus(_borrower);\\n        require(status != 1, \\\"BorrowerOps: Trove is active\\\");\\n    }\\n\\n    function _requireNonZeroDebtChange(uint256 _LUSDChange) internal pure {\\n        require(_LUSDChange > 0, \\\"BorrowerOps: Debt increase requires non-zero debtChange\\\");\\n    }\\n\\n    function _requireNotInRecoveryMode(uint256 _price) internal view {\\n        require(\\n            !_checkRecoveryMode(_price),\\n            \\\"BorrowerOps: Operation not permitted during Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNoCollWithdrawal(uint256 _collWithdrawal) internal pure {\\n        require(\\n            _collWithdrawal == 0,\\n            \\\"BorrowerOps: Collateral withdrawal not permitted Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireValidAdjustmentInCurrentMode(\\n        bool _isRecoveryMode,\\n        uint256 _collWithdrawal,\\n        bool _isDebtIncrease,\\n        LocalVariables_adjustTrove memory _vars\\n    ) internal view {\\n        /*\\n         *In Recovery Mode, only allow:\\n         *\\n         * - Pure collateral top-up\\n         * - Pure debt repayment\\n         * - Collateral top-up with debt repayment\\n         * - A debt increase combined with a collateral top-up which makes the ICR >= 150% and improves the ICR (and by extension improves the TCR).\\n         *\\n         * In Normal Mode, ensure:\\n         *\\n         * - The new ICR is above MCR\\n         * - The adjustment won't pull the TCR below CCR\\n         */\\n        if (_isRecoveryMode) {\\n            _requireNoCollWithdrawal(_collWithdrawal);\\n            if (_isDebtIncrease) {\\n                _requireICRisAboveCCR(_vars.newICR);\\n                _requireNewICRisAboveOldICR(_vars.newICR, _vars.oldICR);\\n            }\\n        } else {\\n            // if Normal Mode\\n            _requireICRisAboveMCR(_vars.newICR);\\n            _vars.newTCR = _getNewTCRFromTroveChange(\\n                _vars.collChange,\\n                _vars.isCollIncrease,\\n                _vars.netDebtChange,\\n                _isDebtIncrease,\\n                _vars.price\\n            );\\n            _requireNewTCRisAboveCCR(_vars.newTCR);\\n        }\\n    }\\n\\n    function _requireICRisAboveMCR(uint256 _newICR) internal view {\\n        require(\\n            _newICR >= MCR,\\n            \\\"BorrowerOps: An operation that would result in ICR < MCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireICRisAboveCCR(uint256 _newICR) internal view {\\n        require(_newICR >= CCR, \\\"BorrowerOps: Operation must leave trove with ICR >= CCR\\\");\\n    }\\n\\n    function _requireNewICRisAboveOldICR(uint256 _newICR, uint256 _oldICR) internal pure {\\n        require(\\n            _newICR >= _oldICR,\\n            \\\"BorrowerOps: Cannot decrease your Trove's ICR in Recovery Mode\\\"\\n        );\\n    }\\n\\n    function _requireNewTCRisAboveCCR(uint256 _newTCR) internal view {\\n        require(\\n            _newTCR >= CCR,\\n            \\\"BorrowerOps: An operation that would result in TCR < CCR is not permitted\\\"\\n        );\\n    }\\n\\n    function _requireAtLeastMinNetDebt(uint256 _netDebt) internal view {\\n        require(\\n            _netDebt >= MIN_NET_DEBT,\\n            \\\"BorrowerOps: Trove's net debt must be greater than minimum\\\"\\n        );\\n    }\\n\\n    function _requireValidLUSDRepayment(uint256 _currentDebt, uint256 _debtRepayment) internal view {\\n        require(\\n            _debtRepayment <= _currentDebt.sub(LUSD_GAS_COMPENSATION),\\n            \\\"BorrowerOps: Amount repaid must not be larger than the Trove's debt\\\"\\n        );\\n    }\\n\\n    function _requireCallerIsStabilityPool() internal view {\\n        require(msg.sender == stabilityPoolAddress, \\\"BorrowerOps: Caller is not Stability Pool\\\");\\n    }\\n\\n    function _requireSufficientLUSDBalance(\\n        ILiquityLUSDToken _lusdToken,\\n        address _borrower,\\n        uint256 _debtRepayment\\n    ) internal view {\\n        require(\\n            _lusdToken.balanceOf(_borrower) >= _debtRepayment,\\n            \\\"BorrowerOps: Caller doesnt have enough LUSD to make repayment\\\"\\n        );\\n    }\\n\\n    function _requireValidMaxFeePercentage(uint256 _maxFeePercentage, bool _isRecoveryMode)\\n        internal\\n        view\\n    {\\n        if (_isRecoveryMode) {\\n            require(\\n                _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must less than or equal to 100%\\\"\\n            );\\n        } else {\\n            require(\\n                _maxFeePercentage >= getBorrowingFeeFloor() && _maxFeePercentage <= DECIMAL_PRECISION,\\n                \\\"Max fee percentage must be between 0.5% and 100%\\\"\\n            );\\n        }\\n    }\\n\\n    // --- ICR and TCR getters ---\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewNominalICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint256) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint256 newNICR = LiquityMath._computeNominalCR(newColl, newDebt);\\n        return newNICR;\\n    }\\n\\n    // Compute the new collateral ratio, considering the change in coll and debt. Assumes 0 pending rewards.\\n    function _getNewICRFromTroveChange(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal pure returns (uint256) {\\n        (uint256 newColl, uint256 newDebt) = _getNewTroveAmounts(\\n            _coll,\\n            _debt,\\n            _collChange,\\n            _isCollIncrease,\\n            _debtChange,\\n            _isDebtIncrease\\n        );\\n\\n        uint256 newICR = LiquityMath._computeCR(newColl, newDebt, _price);\\n        return newICR;\\n    }\\n\\n    function _getNewTroveAmounts(\\n        uint256 _coll,\\n        uint256 _debt,\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 newColl = _coll;\\n        uint256 newDebt = _debt;\\n\\n        newColl = _isCollIncrease ? _coll.add(_collChange) : _coll.sub(_collChange);\\n        newDebt = _isDebtIncrease ? _debt.add(_debtChange) : _debt.sub(_debtChange);\\n\\n        return (newColl, newDebt);\\n    }\\n\\n    function _getNewTCRFromTroveChange(\\n        uint256 _collChange,\\n        bool _isCollIncrease,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        uint256 totalColl = getEntireSystemColl();\\n        uint256 totalDebt = getEntireSystemDebt();\\n\\n        totalColl = _isCollIncrease ? totalColl.add(_collChange) : totalColl.sub(_collChange);\\n        totalDebt = _isDebtIncrease ? totalDebt.add(_debtChange) : totalDebt.sub(_debtChange);\\n\\n        uint256 newTCR = LiquityMath._computeCR(totalColl, totalDebt, _price);\\n        return newTCR;\\n    }\\n\\n    function getCompositeDebt(uint256 _debt) external view override returns (uint256) {\\n        return _getCompositeDebt(_debt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IBorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n// Common interface for the Trove Manager.\\ninterface IBorrowerOperations {\\n    enum BorrowerOperation {\\n        openTrove,\\n        closeTrove,\\n        adjustTrove\\n    }\\n    // --- Events ---\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint256 timestamp);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event GovernanceAddressChanged(address _governanceAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event LUSDTokenAddressChanged(address _lusdTokenAddress);\\n\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 stake,\\n        BorrowerOperation operation\\n    );\\n    event LUSDBorrowingFeePaid(address indexed _borrower, uint256 _LUSDFee);\\n\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _sortedTrovesAddress,\\n        address _lusdTokenAddress,\\n        address _wethAddress,\\n        address _governanceAddress\\n    ) external;\\n\\n    function registerFrontEnd() external;\\n\\n    function openTrove(\\n        uint256 _maxFee,\\n        uint256 _LUSDAmount,\\n        uint256 _ETHAmount,\\n        address _upperHint,\\n        address _lowerHint,\\n        address _frontEndTag\\n    ) external;\\n\\n    function addColl(\\n        uint256 _ETHAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function moveETHGainToTrove(\\n        uint256 _ETHAmount,\\n        address _user,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawColl(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawLUSD(\\n        uint256 _maxFee,\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function repayLUSD(\\n        uint256 _amount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove() external;\\n\\n    function adjustTrove(\\n        uint256 _maxFee,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        uint256 _ETHAmount,\\n        bool isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function claimCollateral() external;\\n\\n    function getCompositeDebt(uint256 _debt) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITroveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\nimport \\\"./ILiquityBase.sol\\\";\\nimport \\\"../Interfaces/ILiquityLUSDToken.sol\\\";\\n\\n// Common interface for the Trove Manager.\\ninterface ITroveManager is ILiquityBase {\\n\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\n    event GovernanceAddressChanged(address _governanceAddress);\\n    event WETHAddressChanged(address _wethAddress);\\n\\n    event RewardSnapshotDetailsUpdated(address owner, address newOwner, uint256 timestamp);\\n    event TroveOwnersUpdated(address owner, address newOwner, uint256 idx, uint256 timestamp);\\n    event Liquidation(\\n        uint256 _liquidatedDebt,\\n        uint256 _liquidatedColl,\\n        uint256 _collGasCompensation,\\n        uint256 _LUSDGasCompensation\\n    );\\n    event Redemption(\\n        uint256 _attemptedLUSDAmount,\\n        uint256 _actualLUSDAmount,\\n        uint256 _ETHSent,\\n        uint256 _ETHFee\\n    );\\n    event TroveUpdated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _stake,\\n        TroveManagerOperation _operation\\n    );\\n    event TroveLiquidated(\\n        address indexed _borrower,\\n        uint256 _debt,\\n        uint256 _coll,\\n        TroveManagerOperation _operation\\n    );\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n    event LTermsUpdated(uint256 _L_ETH, uint256 _L_LUSDDebt);\\n    event TroveSnapshotsUpdated(uint256 _L_ETH, uint256 _L_LUSDDebt);\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n\\n    enum TroveManagerOperation {\\n        applyPendingRewards,\\n        liquidateInNormalMode,\\n        liquidateInRecoveryMode,\\n        redeemCollateral\\n    }\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _defaultPoolAddress,\\n        address _stabilityPoolAddress,\\n        address _gasPoolAddress,\\n        address _collSurplusPoolAddress,\\n        address _lusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _governanceAddress,\\n        address _wethAddress\\n    ) external;\\n\\n    function stabilityPool() external view returns (IStabilityPool);\\n\\n    function lusdToken() external view returns (ILiquityLUSDToken);\\n\\n    function getTroveOwnersCount() external view returns (uint256);\\n\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n    function getNominalICR(address _borrower) external view returns (uint256);\\n\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n    function liquidate(address _borrower) external;\\n\\n    function liquidateTroves(uint256 _n) external;\\n\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\n\\n    function redeemCollateral(\\n        uint256 _LUSDAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint256);\\n\\n    function updateTroveRewardSnapshots(address _borrower) external;\\n\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\n\\n    function applyPendingRewards(address _borrower) external;\\n\\n    function getPendingETHReward(address _borrower) external view returns (uint256);\\n\\n    function getPendingLUSDDebtReward(address _borrower) external view returns (uint256);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function getEntireDebtAndColl(address _borrower)\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 pendingLUSDDebtReward,\\n            uint256 pendingETHReward\\n        );\\n\\n    function closeTrove(address _borrower) external;\\n\\n    function removeStake(address _borrower) external;\\n\\n    function getRedemptionRate() external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\n\\n    function getRedemptionFeeWithDecay(uint256 _ETHDrawn) external view returns (uint256);\\n\\n    function getBorrowingRate() external view returns (uint256);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\n\\n    function getBorrowingFee(uint256 LUSDDebt) external view returns (uint256);\\n\\n    function getBorrowingFeeWithDecay(uint256 _LUSDDebt) external view returns (uint256);\\n\\n    function decayBaseRateFromBorrowing() external;\\n\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\n\\n    function getTroveStake(address _borrower) external view returns (uint256);\\n\\n    function getTroveDebt(address _borrower) external view returns (uint256);\\n\\n    function getTroveFrontEnd(address _borrower) external view returns (address);\\n\\n    function getTroveColl(address _borrower) external view returns (uint256);\\n\\n    function setTroveStatus(address _borrower, uint256 num) external;\\n\\n    function setTroveFrontEndTag(address _borrower, address _frontEndTag) external;\\n\\n    function increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint256);\\n\\n    function decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint256);\\n\\n    function increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint256);\\n\\n    function decreaseTroveDebt(address _borrower, uint256 _collDecrease) external returns (uint256);\\n\\n    function getTCR(uint256 _price) external view returns (uint256);\\n\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ICollSurplusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface ICollSurplusPool {\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n\\n    event CollBalanceUpdated(address indexed _account, uint256 _newBalance);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Contract setters ---\\n\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _wethAddress\\n    ) external;\\n\\n    function getETH() external view returns (uint256);\\n\\n    function receiveETH(uint256 _amount) external;\\n\\n    function getCollateral(address _account) external view returns (uint256);\\n\\n    function accountSurplus(address _account, uint256 _amount) external;\\n\\n    function claimColl(address _account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n// Common interface for the SortedTroves Doubly Linked List.\\ninterface ISortedTroves {\\n    // --- Events ---\\n\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n    event NodeOwnerUpdated(address id, address newId, uint256 timestamp);\\n\\n    // --- Functions ---\\n\\n    function setParams(\\n        uint256 _size,\\n        address _TroveManagerAddress,\\n        address _borrowerOperationsAddress\\n    ) external;\\n\\n    function insert(\\n        address _id,\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function remove(address _id) external;\\n\\n    function reInsert(\\n        address _id,\\n        uint256 _newICR,\\n        address _prevId,\\n        address _nextId\\n    ) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function isFull() external view returns (bool);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function getMaxSize() external view returns (uint256);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function validInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (bool);\\n\\n    function findInsertPosition(\\n        uint256 _ICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILQTYStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface ILQTYStaking {\\n    // --- Events --\\n\\n    event LQTYTokenAddressSet(address _lqtyTokenAddress);\\n    event LUSDTokenAddressSet(address _lusdTokenAddress);\\n    event TroveManagerAddressSet(address _troveManager);\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\n    event ActivePoolAddressSet(address _activePoolAddress);\\n\\n    event StakeChanged(address indexed staker, uint256 newStake);\\n    event StakingGainsWithdrawn(address indexed staker, uint256 LUSDGain, uint256 ETHGain);\\n    event F_ETHUpdated(uint256 _F_ETH);\\n    event F_LUSDUpdated(uint256 _F_LUSD);\\n    event TotalLQTYStakedUpdated(uint256 _totalLQTYStaked);\\n    event EtherSent(address _account, uint256 _amount);\\n    event StakerSnapshotsUpdated(address _staker, uint256 _F_ETH, uint256 _F_LUSD);\\n\\n    // --- Functions ---\\n\\n    function setAddresses(\\n        address _lqtyTokenAddress,\\n        address _lusdTokenAddress,\\n        address _troveManagerAddress,\\n        address _borrowerOperationsAddress,\\n        address _activePoolAddress,\\n        address _wethAddress\\n    ) external;\\n\\n    function stake(uint256 _LQTYamount) external;\\n\\n    function unstake(uint256 _LQTYamount) external;\\n\\n    function increaseF_ETH(uint256 _ETHFee) external;\\n\\n    function increaseF_LUSD(uint256 _LQTYFee) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint256);\\n\\n    function getPendingLUSDGain(address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./BaseMath.sol\\\";\\nimport \\\"./LiquityMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\n\\n/*\\n * Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\n * common functions.\\n */\\ncontract LiquityBase is BaseMath, ILiquityBase {\\n    using SafeMath for uint256;\\n\\n    uint256 public _100pct = 1000000000000000000; // 1e18 == 100%\\n\\n    // Minimum collateral ratio for individual troves\\n    uint256 public MCR = 1100000000000000000; // 108%\\n\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\n    uint256 public CCR = 1500000000000000000; // 130%\\n\\n    // Amount of LUSD to be locked in gas pool on opening troves\\n    uint256 public LUSD_GAS_COMPENSATION = 50e18;\\n\\n    // Minimum amount of net LUSD debt a trove must have\\n    uint256 public MIN_NET_DEBT = 50e18;\\n    // uint constant public MIN_NET_DEBT = 0;\\n\\n    uint256 public PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\n\\n    IActivePool public activePool;\\n    IDefaultPool public defaultPool;\\n    IGovernance public governance;\\n\\n    // --- Gas compensation functions ---\\n\\n    function getBorrowingFeeFloor() public view returns (uint256) {\\n        return governance.getBorrowingFeeFloor();\\n    }\\n\\n    function getRedemptionFeeFloor() public view returns (uint256) {\\n        return governance.getRedemptionFeeFloor();\\n    }\\n\\n    function getMaxBorrowingFee() public view returns (uint256) {\\n        return governance.getMaxBorrowingFee();\\n    }\\n\\n    function getPriceFeed() public view override returns (IPriceFeed) {\\n        return governance.getPriceFeed();\\n    }\\n\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\n    function _getCompositeDebt(uint256 _debt) internal view returns (uint256) {\\n        return _debt.add(LUSD_GAS_COMPENSATION);\\n    }\\n\\n    function _getNetDebt(uint256 _debt) internal view returns (uint256) {\\n        return _debt.sub(LUSD_GAS_COMPENSATION);\\n    }\\n\\n    // Return the amount of ETH to be drawn from a trove's collateral and sent as gas compensation.\\n    function _getCollGasCompensation(uint256 _entireColl) internal view returns (uint256) {\\n        return _entireColl / PERCENT_DIVISOR;\\n    }\\n\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\n        uint256 activeColl = activePool.getETH();\\n        uint256 liquidatedColl = defaultPool.getETH();\\n        return activeColl.add(liquidatedColl);\\n    }\\n\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\n        uint256 activeDebt = activePool.getLUSDDebt();\\n        uint256 closedDebt = defaultPool.getLUSDDebt();\\n        return activeDebt.add(closedDebt);\\n    }\\n\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\n        uint256 entireSystemColl = getEntireSystemColl();\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\n        return TCR;\\n    }\\n\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\n        uint256 TCR = _getTCR(_price);\\n        return TCR < CCR;\\n    }\\n\\n    function _requireUserAcceptsFee(\\n        uint256 _fee,\\n        uint256 _amount,\\n        uint256 _maxFeePercentage\\n    ) internal pure {\\n        uint256 feePercentage = _fee.mul(DECIMAL_PRECISION).div(_amount);\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n// MOdificaitons taken from: `https://github.com/FraxFinance/frax-solidity/blob/master/src/hardhat/contracts/Common/Ownable.sol`\\n/**\\n * Based on OpenZeppelin's Ownable contract:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n *\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     *\\n     * NOTE: This function is not safe, as it doesn't check owner is calling it.\\n     * Make sure you check it before calling it.\\n     */\\n    function _renounceOwnership() internal {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ncontract CheckContract {\\n    /**\\n     * Check that the account is an already deployed non-destroyed contract.\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\n     */\\n    function checkContract(address _account) internal view {\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_account)\\n        }\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\nimport \\\"../Dependencies/ISimpleERCFund.sol\\\";\\nimport \\\"../Interfaces/IOracle.sol\\\";\\n\\ninterface IGovernance {\\n    function getDeploymentStartTime() external view returns (uint256);\\n\\n    function getBorrowingFeeFloor() external view returns (uint256);\\n\\n    function getRedemptionFeeFloor() external view returns (uint256);\\n\\n    function getMaxBorrowingFee() external view returns (uint256);\\n\\n    function getMaxDebtCeiling() external view returns (uint256);\\n\\n    function getAllowMinting() external view returns (bool);\\n\\n    function getPriceFeed() external view returns (IPriceFeed);\\n\\n    function getStabilityFee() external view returns (uint256);\\n\\n    function getStabilityFeeToken() external view returns (IERC20);\\n\\n    function getStabilityTokenPairOracle() external view returns (IOracle);\\n\\n    function getFund() external view returns (ISimpleERCFund);\\n\\n    function chargeStabilityFee(address who, uint256 LUSDAmount) external;\\n\\n    function sendToFund(address token, uint256 amount, string memory reason) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILiquityLUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"../Dependencies/IERC20.sol\\\";\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\n\\ninterface ILiquityLUSDToken is IERC20, IERC2612 {\\n\\n    // --- Events ---\\n\\n    event BorrowerOperationsAddressToggled(address borrowerOperations, bool oldFlag, bool newFlag, uint256 timestamp);\\n    event TroveManagerToggled(address troveManager, bool oldFlag, bool newFlag, uint256 timestamp);\\n    event StabilityPoolToggled(address stabilityPool, bool oldFlag, bool newFlag, uint256 timestamp);\\n\\n    event LUSDTokenBalanceUpdated(address _user, uint _amount);\\n\\n    // --- Functions ---\\n\\n    function toggleBorrowerOperations(address borrowerOperations) external;\\n\\n    function toggleTroveManager(address troveManager) external;\\n\\n    function toggleStabilityPool(address stabilityPool) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function sendToPool(address _sender,  address poolAddress, uint256 _amount) external;\\n\\n    function returnFromPool(address poolAddress, address user, uint256 _amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/ISimpleERCFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface ISimpleERCFund {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        string memory reason\\n    ) external;\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        string memory reason\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/*\\n * The Stability Pool holds LUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its LUSD debt gets offset with\\n * LUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of LUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a LUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total LUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An LQTY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Events ---\\n\\n    event StabilityPoolETHBalanceUpdated(uint256 _newBalance);\\n    event StabilityPoolLUSDBalanceUpdated(uint256 _newBalance);\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n    event P_Updated(uint256 _P);\\n    event S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    event FrontEndRegistered(address indexed _frontEnd, uint256 _kickbackRate);\\n    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\\n\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S, uint256 _G);\\n    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint256 _P, uint256 _G);\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n    event FrontEndStakeChanged(\\n        address indexed _frontEnd,\\n        uint256 _newFrontEndStake,\\n        address _depositor\\n    );\\n\\n    event ETHGainWithdrawn(address indexed _depositor, uint256 _ETH, uint256 _LUSDLoss);\\n    event LQTYPaidToDepositor(address indexed _depositor, uint256 _LQTY);\\n    event LQTYPaidToFrontEnd(address indexed _frontEnd, uint256 _LQTY);\\n    event EtherSent(address _to, uint256 _amount);\\n    event GovernanceAddressChanged(address _governanceAddress);\\n\\n    // --- Functions ---\\n\\n    /*\\n     * Called only once on init, to set addresses of other Liquity contracts\\n     * Callable only by owner, renounces ownership at the end\\n     */\\n    function setAddresses(\\n        address _borrowerOperationsAddress,\\n        address _troveManagerAddress,\\n        address _activePoolAddress,\\n        address _lusdTokenAddress,\\n        address _sortedTrovesAddress,\\n        address _wethAddress,\\n        address _governanceAddress\\n    ) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's LQTY gain to  depositor\\n     * - Sends all tagged front end's LQTY gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n    function registerFrontEnd(uint256 _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint256);\\n\\n    /*\\n     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalLUSDDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorLQTYGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the LQTY gain earned by the front end.\\n     */\\n    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint256);\\n\\n    /*\\n     * Fallback function\\n     * Only callable by Active Pool, it just accounts for ETH received\\n     * receive() external payable;\\n     */\\n    function receiveETH(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\ninterface ILiquityBase {\\n    function getPriceFeed() external view returns (IPriceFeed);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\n\\n    // --- Function ---\\n    function fetchPrice() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n *\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to\\n     * a value in the near future. The deadline argument can be set to uint(-1) to\\n     * create Permits that effectively never expire.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n\\n    function permitTypeHash() external view returns (bytes32);\\n\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/BaseMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ncontract BaseMath {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary LiquityMath {\\n    using SafeMath for uint;\\n\\n    uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n     *\\n     * - Making it \u201ctoo high\u201d could lead to overflows.\\n     * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n     *\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n     *\\n     */\\n    uint internal constant NICR_PRECISION = 1e20;\\n\\n    function _min(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a < _b) ? _a : _b;\\n    }\\n\\n    function _max(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a : _b;\\n    }\\n\\n    /*\\n    * Multiply two decimal numbers and use normal rounding rules:\\n    * -round product up if 19'th mantissa digit >= 5\\n    * -round product down if 19'th mantissa digit < 5\\n    *\\n    * Used only inside the exponentiation, _decPow().\\n    */\\n    function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n        uint prod_xy = x.mul(y);\\n\\n        decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n    }\\n\\n    /*\\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n    *\\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n    *\\n    * Called by two functions that represent time in units of minutes:\\n    * 1) TroveManager._calcDecayedBaseRate\\n    * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n    *\\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n    *\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n    * negligibly different from just passing the cap, since:\\n    *\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n    */\\n    function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n\\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\n\\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\n\\n        uint y = DECIMAL_PRECISION;\\n        uint x = _base;\\n        uint n = _minutes;\\n\\n        // Exponentiation-by-squaring\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                x = decMul(x, x);\\n                n = n.div(2);\\n            } else { // if (n % 2 != 0)\\n                y = decMul(x, y);\\n                x = decMul(x, x);\\n                n = (n.sub(1)).div(2);\\n            }\\n        }\\n\\n        return decMul(x, y);\\n  }\\n\\n    function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n        return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n    }\\n\\n    function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            return _coll.mul(NICR_PRECISION).div(_debt);\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n\\n    function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n        if (_debt > 0) {\\n            uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n            return newCollRatio;\\n        }\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n        else { // if (_debt == 0)\\n            return 2**256 - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IActivePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IActivePool is IPool {\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event ActivePoolLUSDDebtUpdated(uint256 _LUSDDebt);\\n    event ActivePoolETHBalanceUpdated(uint256 _ETH);\\n\\n    event Repay(address indexed from, uint256 amount);\\n    event Borrow(address indexed from, uint256 amount);\\n\\n    // --- Functions ---\\n    function sendETH(address _account, uint256 _amount) external;\\n\\n    function receiveETH(uint256 _amount) external;\\n\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDefaultPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IDefaultPool is IPool {\\n    // --- Events ---\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\n    event DefaultPoolLUSDDebtUpdated(uint256 _LUSDDebt);\\n    event DefaultPoolETHBalanceUpdated(uint256 _ETH);\\n\\n    // --- Functions ---\\n    function sendETHToActivePool(uint256 _amount) external;\\n\\n    function receiveETH(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * Based on OpenZeppelin's SafeMath:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\n *\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IOracle {\\n    function getPrice() external view returns (uint256);\\n\\n    function getDecimalPercision() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n// Common interface for the Pools.\\ninterface IPool {\\n    // --- Events ---\\n\\n    event ETHBalanceUpdated(uint256 _newBalance);\\n    event LUSDBalanceUpdated(uint256 _newBalance);\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n    event EtherSent(address _to, uint256 _amount);\\n\\n    // --- Functions ---\\n\\n    function getETH() external view returns (uint256);\\n\\n    function getLUSDDebt() external view returns (uint256);\\n\\n    function increaseLUSDDebt(uint256 _amount) external;\\n\\n    function decreaseLUSDDebt(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"}],\"name\":\"ActivePoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"}],\"name\":\"CollSurplusPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"}],\"name\":\"DefaultPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_frontEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FrontEndRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"}],\"name\":\"GasPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_LUSDFee\",\"type\":\"uint256\"}],\"name\":\"LUSDBorrowingFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lusdTokenAddress\",\"type\":\"address\"}],\"name\":\"LUSDTokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"}],\"name\":\"TroveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTroveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IBorrowerOperations.BorrowerOperation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"TroveUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"addColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LUSDChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIncrease\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"adjustTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frontEnds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingFeeFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"getCompositeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionFeeFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusdToken\",\"outputs\":[{\"internalType\":\"contract ILiquityLUSDToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"moveETHGainToTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_frontEndTag\",\"type\":\"address\"}],\"name\":\"openTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerFrontEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_LUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"repayLUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collSurplusPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawColl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LUSDAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lowerHint\",\"type\":\"address\"}],\"name\":\"withdrawLUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BorrowerOperations", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}