{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\ncontract MOB {\r\n    function buy(address _referredBy) public payable returns(uint256);\r\n    function exit() public;\r\n}\r\n\r\ncontract MOBDividends {\r\n    MOB MOBContract = MOB(0x81b88b12CD8e228e976DF92bB6aD2E74ECCa1d08);\r\n    \r\n    /// @notice Any funds sent here are for dividend payment.\r\n    function () public payable {\r\n    }\r\n    \r\n    /// @notice Distribute dividends to the MOB contract. Can be called\r\n    ///     repeatedly until practically all dividends have been distributed.\r\n    /// @param rounds How many rounds of dividend distribution do we want?\r\n    function distribute(uint256 rounds) external {\r\n        for (uint256 i = 0; i < rounds; i++) {\r\n            if (address(this).balance < 0.001 ether) {\r\n                // Balance is very low. Not worth the gas to distribute.\r\n                break;\r\n            }\r\n            \r\n            MOBContract.buy.value(address(this).balance)(0x0);\r\n            MOBContract.exit();\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"rounds\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "MOBDividends", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://93be128a6d6f8f8c356b368b6094b2189cd3e2ea3bb6092f2392a53684aeb385"}]}