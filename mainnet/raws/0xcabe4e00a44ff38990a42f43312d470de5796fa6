{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/incentives/BendProtocolIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {DistributionTypes} from \\\"./DistributionTypes.sol\\\";\\n\\nimport {DistributionManager} from \\\"./DistributionManager.sol\\\";\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IScaledBalanceToken} from \\\"./interfaces/IScaledBalanceToken.sol\\\";\\nimport {IIncentivesController} from \\\"./interfaces/IIncentivesController.sol\\\";\\n\\n/**\\n * @title BendProtocolIncentivesController\\n * @notice Distributor contract for rewards to the Bend protocol\\n * @author Bend\\n **/\\ncontract BendProtocolIncentivesController is\\n    IIncentivesController,\\n    DistributionManager\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IERC20Upgradeable public REWARD_TOKEN;\\n    address public REWARDS_VAULT;\\n\\n    mapping(address => uint256) internal usersUnclaimedRewards;\\n    mapping(address => bool) public authorizedAssets;\\n\\n    /**\\n     * @dev initial and configrate contract\\n     * @param _rewardToken The reward token to incentivize\\n     * @param _rewardsVault The vault of reward token\\n     * @param _distributionDuration  Duration of the reward distribution\\n     */\\n    function initialize(\\n        address _rewardToken,\\n        address _rewardsVault,\\n        uint128 _distributionDuration\\n    ) external initializer {\\n        __DistributionManager_init(_distributionDuration);\\n        REWARD_TOKEN = IERC20Upgradeable(_rewardToken);\\n        REWARDS_VAULT = _rewardsVault;\\n    }\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param _assets The assets to incentivize\\n     * @param _emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(\\n        IScaledBalanceToken[] calldata _assets,\\n        uint256[] calldata _emissionsPerSecond\\n    ) external override onlyOwner {\\n        require(\\n            _assets.length == _emissionsPerSecond.length,\\n            \\\"INVALID_CONFIGURATION\\\"\\n        );\\n\\n        DistributionTypes.AssetConfigInput[]\\n            memory assetsConfig = new DistributionTypes.AssetConfigInput[](\\n                _assets.length\\n            );\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            authorizedAssets[address(_assets[i])] = true;\\n            assetsConfig[i].underlyingAsset = address(_assets[i]);\\n            assetsConfig[i].emissionPerSecond = uint128(_emissionsPerSecond[i]);\\n\\n            require(\\n                assetsConfig[i].emissionPerSecond == _emissionsPerSecond[i],\\n                \\\"INVALID_CONFIGURATION\\\"\\n            );\\n\\n            assetsConfig[i].totalStaked = _assets[i].scaledTotalSupply();\\n        }\\n        _configureAssets(assetsConfig);\\n    }\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param _user The address of the user\\n     * @param _totalSupply The total supply of the asset in the lending pool\\n     * @param _userBalance The balance of the user of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address _user,\\n        uint256 _totalSupply,\\n        uint256 _userBalance\\n    ) external override {\\n        require(authorizedAssets[msg.sender], \\\"Sender Unauthorized\\\");\\n        uint256 accruedRewards = _updateUserAssetInternal(\\n            _user,\\n            msg.sender,\\n            _userBalance,\\n            _totalSupply\\n        );\\n        if (accruedRewards != 0) {\\n            usersUnclaimedRewards[_user] = usersUnclaimedRewards[_user].add(\\n                accruedRewards\\n            );\\n            emit RewardsAccrued(_user, accruedRewards);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param _assets The assets to incentivize\\n     * @param _user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(\\n        IScaledBalanceToken[] calldata _assets,\\n        address _user\\n    ) external view override returns (uint256) {\\n        uint256 unclaimedRewards = usersUnclaimedRewards[_user];\\n\\n        DistributionTypes.UserStakeInput[]\\n            memory userState = new DistributionTypes.UserStakeInput[](\\n                _assets.length\\n            );\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            userState[i].underlyingAsset = address(_assets[i]);\\n            (\\n                userState[i].stakedByUser,\\n                userState[i].totalStaked\\n            ) = IScaledBalanceToken(_assets[i]).getScaledUserBalanceAndSupply(\\n                _user\\n            );\\n        }\\n        unclaimedRewards = unclaimedRewards.add(\\n            _getUnclaimedRewards(_user, userState)\\n        );\\n        return unclaimedRewards;\\n    }\\n\\n    /**\\n\\n     * @dev returns the unclaimed rewards of the user\\n     * @param _user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return usersUnclaimedRewards[_user];\\n    }\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param _assets The assets to incentivize\\n     * @param _amount Amount of rewards to claim\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        IScaledBalanceToken[] calldata _assets,\\n        uint256 _amount\\n    ) external override returns (uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        address user = msg.sender;\\n        uint256 unclaimedRewards = usersUnclaimedRewards[user];\\n\\n        DistributionTypes.UserStakeInput[]\\n            memory userState = new DistributionTypes.UserStakeInput[](\\n                _assets.length\\n            );\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            userState[i].underlyingAsset = address(_assets[i]);\\n            (\\n                userState[i].stakedByUser,\\n                userState[i].totalStaked\\n            ) = IScaledBalanceToken(_assets[i]).getScaledUserBalanceAndSupply(\\n                user\\n            );\\n        }\\n\\n        uint256 accruedRewards = _claimRewards(user, userState);\\n        if (accruedRewards != 0) {\\n            unclaimedRewards = unclaimedRewards.add(accruedRewards);\\n            emit RewardsAccrued(user, accruedRewards);\\n        }\\n\\n        if (unclaimedRewards == 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountToClaim = _amount > unclaimedRewards\\n            ? unclaimedRewards\\n            : _amount;\\n        usersUnclaimedRewards[user] = unclaimedRewards - amountToClaim; // Safe due to the previous line\\n\\n        IERC20Upgradeable(REWARD_TOKEN).safeTransferFrom(\\n            REWARDS_VAULT,\\n            msg.sender,\\n            amountToClaim\\n        );\\n\\n        emit RewardsClaimed(msg.sender, amountToClaim);\\n\\n        return amountToClaim;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nlibrary DistributionTypes {\\n    struct AssetConfigInput {\\n        uint128 emissionPerSecond;\\n        uint256 totalStaked;\\n        address underlyingAsset;\\n    }\\n\\n    struct UserStakeInput {\\n        address underlyingAsset;\\n        uint256 stakedByUser;\\n        uint256 totalStaked;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/DistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {DistributionTypes} from \\\"./DistributionTypes.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title DistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Bend\\n **/\\ncontract DistributionManager is Initializable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n\\n    struct AssetData {\\n        uint128 emissionPerSecond;\\n        uint128 lastUpdateTimestamp;\\n        uint256 index;\\n        mapping(address => uint256) users;\\n    }\\n\\n    uint256 public DISTRIBUTION_END;\\n\\n    uint8 public constant PRECISION = 18;\\n\\n    mapping(address => AssetData) public assets;\\n\\n    event AssetConfigUpdated(\\n        address indexed _asset,\\n        uint256 _emissionPerSecond\\n    );\\n    event AssetIndexUpdated(address indexed _asset, uint256 _index);\\n    event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n    event UserIndexUpdated(\\n        address indexed user,\\n        address indexed asset,\\n        uint256 index\\n    );\\n\\n    function __DistributionManager_init(uint256 _distributionDuration)\\n        internal\\n        initializer\\n    {\\n        __Ownable_init();\\n        DISTRIBUTION_END = block.timestamp.add(_distributionDuration);\\n    }\\n\\n    function setDistributionEnd(uint256 _distributionEnd) external onlyOwner {\\n        DISTRIBUTION_END = _distributionEnd;\\n        emit DistributionEndUpdated(_distributionEnd);\\n    }\\n\\n    function _configureAssets(\\n        DistributionTypes.AssetConfigInput[] memory _assetsConfigInput\\n    ) internal onlyOwner {\\n        for (uint256 i = 0; i < _assetsConfigInput.length; i++) {\\n            AssetData storage assetConfig = assets[\\n                _assetsConfigInput[i].underlyingAsset\\n            ];\\n\\n            _updateAssetStateInternal(\\n                _assetsConfigInput[i].underlyingAsset,\\n                assetConfig,\\n                _assetsConfigInput[i].totalStaked\\n            );\\n\\n            assetConfig.emissionPerSecond = _assetsConfigInput[i]\\n                .emissionPerSecond;\\n\\n            emit AssetConfigUpdated(\\n                _assetsConfigInput[i].underlyingAsset,\\n                _assetsConfigInput[i].emissionPerSecond\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n     * @param _underlyingAsset The address used as key in the distribution, for example sBEND or the aTokens addresses on Bend\\n     * @param _assetConfig Storage pointer to the distribution's config\\n     * @param _totalStaked Current total of staked assets for this distribution\\n     * @return The new distribution index\\n     **/\\n    function _updateAssetStateInternal(\\n        address _underlyingAsset,\\n        AssetData storage _assetConfig,\\n        uint256 _totalStaked\\n    ) internal returns (uint256) {\\n        uint256 oldIndex = _assetConfig.index;\\n        uint128 lastUpdateTimestamp = _assetConfig.lastUpdateTimestamp;\\n\\n        if (block.timestamp == lastUpdateTimestamp) {\\n            return oldIndex;\\n        }\\n        uint256 newIndex = _getAssetIndex(\\n            oldIndex,\\n            _assetConfig.emissionPerSecond,\\n            lastUpdateTimestamp,\\n            _totalStaked\\n        );\\n\\n        if (newIndex != oldIndex) {\\n            _assetConfig.index = newIndex;\\n            emit AssetIndexUpdated(_underlyingAsset, newIndex);\\n        }\\n\\n        _assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\\n\\n        return newIndex;\\n    }\\n\\n    /**\\n     * @dev Updates the state of an user in a distribution\\n     * @param _user The user's address\\n     * @param _asset The address of the reference asset of the distribution\\n     * @param _stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n     * @param _totalStaked Total tokens staked in the distribution\\n     * @return The accrued rewards for the user until the moment\\n     **/\\n    function _updateUserAssetInternal(\\n        address _user,\\n        address _asset,\\n        uint256 _stakedByUser,\\n        uint256 _totalStaked\\n    ) internal returns (uint256) {\\n        AssetData storage assetData = assets[_asset];\\n        uint256 userIndex = assetData.users[_user];\\n        uint256 accruedRewards = 0;\\n\\n        uint256 newIndex = _updateAssetStateInternal(\\n            _asset,\\n            assetData,\\n            _totalStaked\\n        );\\n        if (userIndex != newIndex) {\\n            if (_stakedByUser != 0) {\\n                accruedRewards = _getRewards(\\n                    _stakedByUser,\\n                    newIndex,\\n                    userIndex\\n                );\\n            }\\n\\n            assetData.users[_user] = newIndex;\\n            emit UserIndexUpdated(_user, _asset, newIndex);\\n        }\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n     * @param _user The address of the user\\n     * @param _stakes List of structs of the user data related with his stake\\n     * @return The accrued rewards for the user until the moment\\n     **/\\n    function _claimRewards(\\n        address _user,\\n        DistributionTypes.UserStakeInput[] memory _stakes\\n    ) internal returns (uint256) {\\n        uint256 accruedRewards = 0;\\n\\n        for (uint256 i = 0; i < _stakes.length; i++) {\\n            accruedRewards = accruedRewards.add(\\n                _updateUserAssetInternal(\\n                    _user,\\n                    _stakes[i].underlyingAsset,\\n                    _stakes[i].stakedByUser,\\n                    _stakes[i].totalStaked\\n                )\\n            );\\n        }\\n\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Return the accrued rewards for an user over a list of distribution\\n     * @param _user The address of the user\\n     * @param _stakes List of structs of the user data related with his stake\\n     * @return The accrued rewards for the user until the moment\\n     **/\\n    function _getUnclaimedRewards(\\n        address _user,\\n        DistributionTypes.UserStakeInput[] memory _stakes\\n    ) internal view returns (uint256) {\\n        uint256 accruedRewards = 0;\\n\\n        for (uint256 i = 0; i < _stakes.length; i++) {\\n            AssetData storage assetConfig = assets[_stakes[i].underlyingAsset];\\n            uint256 assetIndex = _getAssetIndex(\\n                assetConfig.index,\\n                assetConfig.emissionPerSecond,\\n                assetConfig.lastUpdateTimestamp,\\n                _stakes[i].totalStaked\\n            );\\n\\n            accruedRewards = accruedRewards.add(\\n                _getRewards(\\n                    _stakes[i].stakedByUser,\\n                    assetIndex,\\n                    assetConfig.users[_user]\\n                )\\n            );\\n        }\\n        return accruedRewards;\\n    }\\n\\n    /**\\n     * @dev Internal function for the calculation of user's rewards on a distribution\\n     * @param _principalUserBalance Amount staked by the user on a distribution\\n     * @param _reserveIndex Current index of the distribution\\n     * @param _userIndex Index stored for the user, representation his staking moment\\n     * @return The rewards\\n     **/\\n    function _getRewards(\\n        uint256 _principalUserBalance,\\n        uint256 _reserveIndex,\\n        uint256 _userIndex\\n    ) internal pure returns (uint256) {\\n        return\\n            _principalUserBalance.mul(_reserveIndex.sub(_userIndex)).div(\\n                10**uint256(PRECISION)\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the next value of an specific distribution index, with validations\\n     * @param _currentIndex Current index of the distribution\\n     * @param _emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n     * @param _lastUpdateTimestamp Last moment this distribution was updated\\n     * @param _totalBalance of tokens considered for the distribution\\n     * @return The new index.\\n     **/\\n    function _getAssetIndex(\\n        uint256 _currentIndex,\\n        uint256 _emissionPerSecond,\\n        uint128 _lastUpdateTimestamp,\\n        uint256 _totalBalance\\n    ) internal view returns (uint256) {\\n        if (\\n            _emissionPerSecond == 0 ||\\n            _totalBalance == 0 ||\\n            _lastUpdateTimestamp == block.timestamp ||\\n            _lastUpdateTimestamp >= DISTRIBUTION_END\\n        ) {\\n            return _currentIndex;\\n        }\\n\\n        uint256 currentTimestamp = block.timestamp > DISTRIBUTION_END\\n            ? DISTRIBUTION_END\\n            : block.timestamp;\\n        uint256 timeDelta = currentTimestamp.sub(_lastUpdateTimestamp);\\n        return\\n            _emissionPerSecond\\n                .mul(timeDelta)\\n                .mul(10**uint256(PRECISION))\\n                .div(_totalBalance)\\n                .add(_currentIndex);\\n    }\\n\\n    /**\\n     * @dev Returns the data of an user on a distribution\\n     * @param _user Address of the user\\n     * @param _asset The address of the reference asset of the distribution\\n     * @return The new index\\n     **/\\n    function getUserAssetData(address _user, address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return assets[_asset].users[_user];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Returns the scaled balance of the user and the scaled total supply.\\n     * @param _user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled balance and the scaled total supply\\n     **/\\n    function getScaledUserBalanceAndSupply(address _user)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/interfaces/IIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\n\\ninterface IIncentivesController {\\n    event RewardsAccrued(address indexed _user, uint256 _amount);\\n\\n    event RewardsClaimed(address indexed _user, uint256 _amount);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param _assets The assets to incentivize\\n     * @param _emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(\\n        IScaledBalanceToken[] calldata _assets,\\n        uint256[] calldata _emissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param _user The address of the user\\n     * @param _totalSupply The total supply of the asset in the lending pool\\n     * @param _userBalance The balance of the user of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address _user,\\n        uint256 _totalSupply,\\n        uint256 _userBalance\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param _assets The assets to incentivize\\n     * @param _user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(\\n        IScaledBalanceToken[] calldata _assets,\\n        address _user\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param _assets The assets to incentivize\\n     * @param _amount Amount of rewards to claim\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        IScaledBalanceToken[] calldata _assets,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param _user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_emissionPerSecond\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"}],\"name\":\"DistributionEndUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IScaledBalanceToken[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IScaledBalanceToken[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_emissionsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IScaledBalanceToken[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsVault\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_distributionDuration\",\"type\":\"uint128\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributionEnd\",\"type\":\"uint256\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BendProtocolIncentivesController", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}