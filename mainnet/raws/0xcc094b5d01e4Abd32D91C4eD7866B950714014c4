{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Broker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IOnchainVaults.sol\\\";\\nimport \\\"./interfaces/IOrderRegistry.sol\\\";\\nimport \\\"./interfaces/IShareToken.sol\\\";\\nimport \\\"./interfaces/IStrategyPool.sol\\\";\\n\\n/**\\n * @title common broker\\n */\\ncontract Broker is Ownable {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event PriceChanged(uint256 rideId, uint256 oldVal, uint256 newVal);\\n    event SlippageChanged(uint256 rideId, uint256 oldVal, uint256 newVal);\\n    event RideInfoRegistered(uint256 rideId, RideInfo rideInfo);\\n    event MintAndSell(uint256 rideId, uint256 mintShareAmt, uint256 price, uint256 slippage);\\n    event CancelSell(uint256 rideId, uint256 cancelShareAmt);\\n    event RideDeparted(uint256 rideId, uint256 usedInputTokenAmt);\\n    event SharesBurned(uint256 rideId, uint256 burnedShareAmt);\\n    event SharesRedeemed(uint256 rideId, uint256 redeemedShareAmt);\\n    event OnchainVaultsChanged(address oldAddr, address newAddr);\\n\\n    address public onchainVaults;\\n\\n    mapping (uint256=>uint256) public prices; // rideid=>price, price in decimal 1e18\\n    uint256 public constant PRICE_DECIMALS = 1e18;\\n    mapping (uint256=>uint256) public slippages; // rideid=>slippage, slippage in denominator 10000\\n    uint256 public constant SLIPPAGE_DENOMINATOR = 10000;\\n\\n    bytes4 internal constant ERC20_SELECTOR = bytes4(keccak256(\\\"ERC20Token(address)\\\"));\\n    bytes4 internal constant ETH_SELECTOR = bytes4(keccak256(\\\"ETH()\\\"));\\n    uint256 internal constant SELECTOR_OFFSET = 0x20;\\n\\n    // Starkex token id of this mint token\\n\\n    struct RideInfo {\\n        address share;\\n        uint256 tokenIdShare;\\n        uint256 quantumShare; \\n        address inputToken;\\n        uint256 tokenIdInput;\\n        uint256 quantumInput;\\n        address outputToken;\\n        uint256 tokenIdOutput;\\n        uint256 quantumOutput;\\n\\n        address strategyPool; // 3rd defi pool\\n    }\\n    // rideid => RideInfo\\n    // rideId will also be used as vaultIdShare, vaultIdInput and vaultIdOutput,\\n    // this is easy to maintain and will assure funds from different rides won\u2019t mix together and create weird edge cases\\n    mapping (uint256 => RideInfo) public rideInfos; \\n\\n    mapping (uint256=>uint256) public ridesShares; // rideid=>amount\\n    mapping (uint256=>bool) public rideDeparted; // rideid=>bool\\n    \\n    uint256 public nonce;\\n    uint256 public constant EXP_TIME = 2e6; // expiration time stamp of the limit order \\n\\n    mapping (uint256=>uint256) public actualPrices; //rideid=>actual price\\n\\n    struct OrderAssetInfo {\\n        uint256 tokenId;\\n        uint256 quantizedAmt;\\n        uint256 vaultId;\\n    }\\n\\n    /**\\n     * @dev Constructor\\n     */\\n    constructor(\\n        address _onchainVaults\\n    ) {\\n        onchainVaults = _onchainVaults;\\n    }\\n\\n    /**\\n     * @notice can be set multiple times, will use latest when mintShareAndSell.\\n     */\\n    function setPrice(uint256 _rideId, uint256 _price) external onlyOwner {\\n        require(ridesShares[_rideId] == 0, \\\"change forbidden once share starting to sell\\\");\\n\\n        uint256 oldVal = prices[_rideId];\\n        prices[_rideId] = _price;\\n        emit PriceChanged(_rideId, oldVal, _price);\\n    }\\n\\n    /**\\n     * @notice price slippage allowance when executing strategy\\n     */\\n    function setSlippage(uint256 _rideId, uint256 _slippage) external onlyOwner {\\n        require(_slippage <= 10000, \\\"invalid slippage\\\");\\n        require(ridesShares[_rideId] == 0, \\\"change forbidden once share starting to sell\\\");\\n\\n        uint256 oldVal = slippages[_rideId];\\n        slippages[_rideId] = _slippage;\\n        emit SlippageChanged(_rideId, oldVal, _slippage);\\n    }\\n\\n    /**\\n     * @notice registers ride info\\n     */\\n    function addRideInfo(uint256 _rideId, uint256[3] memory _tokenIds, address[3] memory _tokens, address _strategyPool) external onlyOwner {\\n        RideInfo memory rideInfo = rideInfos[_rideId];\\n        require(rideInfo.tokenIdInput == 0, \\\"ride assets info registered already\\\");\\n\\n        require(_strategyPool.isContract(), \\\"invalid strategy pool addr\\\");\\n        _checkValidTokenIdAndAddr(_tokenIds[0], _tokens[0]);\\n        _checkValidTokenIdAndAddr(_tokenIds[1], _tokens[1]);\\n        _checkValidTokenIdAndAddr(_tokenIds[2], _tokens[2]);\\n\\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\\n        uint256 quantumShare = ocv.getQuantum(_tokenIds[0]);\\n        uint256 quantumInput = ocv.getQuantum(_tokenIds[1]);\\n        uint256 quantumOutput = ocv.getQuantum(_tokenIds[2]);\\n        rideInfo = RideInfo(_tokens[0], _tokenIds[0], quantumShare, _tokens[1], _tokenIds[1], \\n            quantumInput,  _tokens[2], _tokenIds[2], quantumOutput, _strategyPool);\\n        rideInfos[_rideId] = rideInfo;\\n        emit RideInfoRegistered(_rideId, rideInfo);\\n    }\\n\\n    /**\\n     * @notice mint share and sell for input token\\n     */\\n    function mintShareAndSell(uint256 _rideId, uint256 _amount, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\\n        RideInfo memory rideInfo = rideInfos[_rideId];\\n        require(rideInfo.tokenIdInput != 0, \\\"ride assets info not registered\\\");\\n        require(prices[_rideId] != 0, \\\"price not set\\\");\\n        require(slippages[_rideId] != 0, \\\"slippage not set\\\");\\n        require(ridesShares[_rideId] == 0, \\\"already mint for this ride\\\"); \\n        if (_tokenIdFee != 0) {\\n            _checkValidTokenId(_tokenIdFee);\\n        }\\n\\n        IShareToken(rideInfo.share).mint(address(this), _amount);\\n\\n        IERC20(rideInfo.share).safeIncreaseAllowance(onchainVaults, _amount);\\n        IOnchainVaults(onchainVaults).depositERC20ToVault(rideInfo.tokenIdShare, _rideId, _amount / rideInfo.quantumShare);\\n        \\n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdShare, _amount / rideInfo.quantumShare, _rideId), \\n            OrderAssetInfo(rideInfo.tokenIdInput, _amount / rideInfo.quantumInput, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\\n        \\n        ridesShares[_rideId] = _amount;\\n\\n        emit MintAndSell(_rideId, _amount, prices[_rideId], slippages[_rideId]);\\n    }\\n\\n    /**\\n     * @notice cancel selling for input token\\n     */\\n    function cancelSell(uint256 _rideId, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\\n        uint256 amount = ridesShares[_rideId];\\n        require(amount > 0, \\\"no shares to cancel sell\\\"); \\n        require(!rideDeparted[_rideId], \\\"ride departed already\\\");\\n        if (_tokenIdFee != 0) {\\n            _checkValidTokenId(_tokenIdFee);\\n        }\\n\\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\\n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdInput, amount / rideInfo.quantumInput, _rideId), \\n            OrderAssetInfo(rideInfo.tokenIdShare, amount / rideInfo.quantumShare, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\\n\\n        emit CancelSell(_rideId, amount);\\n    }\\n\\n    /**\\n     * @notice ride departure to execute strategy (swap input token for output token)\\n     * share : inputtoken = 1 : 1, outputtoken : share = price\\n     */\\n    function departRide(uint256 _rideId, uint256 _tokenIdFee, uint256 _quantizedAmtFee, uint256 _vaultIdFee) external onlyOwner {\\n        require(!rideDeparted[_rideId], \\\"ride departed already\\\");\\n        if (_tokenIdFee != 0) {\\n            _checkValidTokenId(_tokenIdFee);\\n        }\\n\\n        rideDeparted[_rideId] = true;\\n\\n        burnRideShares(_rideId); //burn unsold shares\\n        uint256 amount = ridesShares[_rideId]; //get the left share amount\\n        require(amount > 0, \\\"no shares to depart\\\"); \\n        \\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\\n\\n        uint256 inputTokenAmt;\\n        {\\n            uint256 inputTokenQuantizedAmt = ocv.getQuantizedVaultBalance(address(this), rideInfo.tokenIdInput, _rideId);\\n            assert(inputTokenQuantizedAmt > 0); \\n            ocv.withdrawFromVault(rideInfo.tokenIdInput, _rideId, inputTokenQuantizedAmt);\\n            inputTokenAmt = inputTokenQuantizedAmt * rideInfo.quantumInput;\\n        }\\n\\n        uint256 outputAmt;\\n        if (rideInfo.inputToken == address(0) /*ETH*/) {\\n            outputAmt = IStrategyPool(rideInfo.strategyPool).sellEth{value: inputTokenAmt}(rideInfo.outputToken);\\n        } else {\\n            IERC20(rideInfo.inputToken).safeIncreaseAllowance(rideInfo.strategyPool, inputTokenAmt);\\n            outputAmt = IStrategyPool(rideInfo.strategyPool).sellErc(rideInfo.inputToken, rideInfo.outputToken, inputTokenAmt);\\n        }\\n\\n        {\\n            uint256 expectMinResult = amount * prices[_rideId] * (SLIPPAGE_DENOMINATOR - slippages[_rideId]) / PRICE_DECIMALS / SLIPPAGE_DENOMINATOR;\\n            require(outputAmt >= expectMinResult, \\\"price and slippage not fulfilled\\\");\\n            \\n            actualPrices[_rideId] = outputAmt * PRICE_DECIMALS / amount;\\n\\n            if (rideInfo.outputToken != address(0) /*ERC20*/) {\\n                IERC20(rideInfo.outputToken).safeIncreaseAllowance(onchainVaults, outputAmt);\\n                ocv.depositERC20ToVault(rideInfo.tokenIdOutput, _rideId, outputAmt / rideInfo.quantumOutput);\\n            } else {\\n                ocv.depositEthToVault{value: outputAmt / rideInfo.quantumOutput}(rideInfo.tokenIdOutput, _rideId);\\n            }\\n        }\\n\\n        _submitOrder(OrderAssetInfo(rideInfo.tokenIdOutput, outputAmt / rideInfo.quantumOutput, _rideId), \\n            OrderAssetInfo(rideInfo.tokenIdShare, amount / rideInfo.quantumShare, _rideId), OrderAssetInfo(_tokenIdFee, _quantizedAmtFee, _vaultIdFee));\\n\\n        emit RideDeparted(_rideId, inputTokenAmt);\\n    }\\n\\n    /**\\n     * @notice burn ride shares after ride is done\\n     */\\n    function burnRideShares(uint256 _rideId) public onlyOwner {\\n        uint256 amount = ridesShares[_rideId];\\n        require(amount > 0, \\\"no shares to burn\\\"); \\n        \\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\\n        uint256 quantizedAmountToBurn = ocv.getQuantizedVaultBalance(address(this), rideInfo.tokenIdShare, _rideId);\\n        require(quantizedAmountToBurn > 0, \\\"no shares to burn\\\");\\n\\n        ocv.withdrawFromVault(rideInfo.tokenIdShare, _rideId, quantizedAmountToBurn);\\n\\n        uint256 burnAmt = quantizedAmountToBurn * rideInfo.quantumShare;\\n        ridesShares[_rideId] = amount - burnAmt; // update to left amount\\n        IShareToken(rideInfo.share).burn(address(this), burnAmt);\\n\\n        emit SharesBurned(_rideId, burnAmt);\\n    }\\n\\n    /**\\n     * @notice user to redeem share for input or output token \\n     * input token when ride has not been departed, otherwise, output token\\n     */\\n    function redeemShare(uint256 _rideId, uint256 _redeemAmount) external {\\n        uint256 amount = ridesShares[_rideId];\\n        require(amount > 0, \\\"no shares to redeem\\\");\\n\\n        RideInfo memory rideInfo = rideInfos[_rideId]; //amount > 0 implies that the rideAssetsInfo already registered\\n\\n        IERC20(rideInfo.share).safeTransferFrom(msg.sender, address(this), _redeemAmount);\\n\\n        IOnchainVaults ocv = IOnchainVaults(onchainVaults);\\n        bool departed = rideDeparted[_rideId];\\n        if (departed) {\\n            //swap to output token\\n            uint256 boughtAmt = _redeemAmount * actualPrices[_rideId] / PRICE_DECIMALS;            \\n            ocv.withdrawFromVault(rideInfo.tokenIdOutput, _rideId, boughtAmt / rideInfo.quantumOutput);\\n            IERC20(rideInfo.outputToken).safeTransfer(msg.sender, boughtAmt);\\n        } else {\\n            //swap to input token\\n            ocv.withdrawFromVault(rideInfo.tokenIdInput, _rideId, _redeemAmount / rideInfo.quantumInput);\\n            if (rideInfo.inputToken == address(0) /*ETH*/) {\\n                (bool success, ) = msg.sender.call{value: _redeemAmount}(\\\"\\\"); \\n                require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n            } else {\\n                IERC20(rideInfo.inputToken).safeTransfer(msg.sender, _redeemAmount);\\n            }\\n        }\\n\\n        ridesShares[_rideId] -= _redeemAmount;\\n        IShareToken(rideInfo.share).burn(address(this), _redeemAmount);\\n\\n        emit SharesRedeemed(_rideId, _redeemAmount);\\n    }\\n\\n    function _checkValidTokenIdAndAddr(uint256 tokenId, address token) view internal {\\n        bytes4 selector = _checkValidTokenId(tokenId);\\n        if (selector == ETH_SELECTOR) {\\n            require(token == address(0), \\\"ETH addr should be 0\\\");\\n        } else if (selector == ERC20_SELECTOR) {\\n            require(token.isContract(), \\\"invalid token addr\\\");\\n        }\\n    }\\n\\n    function _checkValidTokenId(uint256 tokenId) view internal returns (bytes4 selector) {\\n        selector = extractTokenSelector(IOnchainVaults(onchainVaults).getAssetInfo(tokenId));\\n        require(selector == ETH_SELECTOR || selector == ERC20_SELECTOR, \\\"unsupported token\\\"); \\n    }\\n\\n    function extractTokenSelector(bytes memory assetInfo)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        assembly {\\n            selector := and(\\n                0xffffffff00000000000000000000000000000000000000000000000000000000,\\n                mload(add(assetInfo, SELECTOR_OFFSET))\\n            )\\n        }\\n    }\\n\\n    function _submitOrder(OrderAssetInfo memory sellInfo, OrderAssetInfo memory buyInfo, OrderAssetInfo memory feeInfo) private {\\n        nonce += 1;\\n        address orderRegistryAddr = IOnchainVaults(onchainVaults).orderRegistryAddress();\\n        IOrderRegistry(orderRegistryAddr).registerLimitOrder(onchainVaults, sellInfo.tokenId, buyInfo.tokenId, feeInfo.tokenId, \\n            sellInfo.quantizedAmt, buyInfo.quantizedAmt, feeInfo.quantizedAmt, sellInfo.vaultId, buyInfo.vaultId, feeInfo.vaultId, nonce, EXP_TIME);\\n    }\\n\\n    function setOnchainVaults(address _newAddr) external onlyOwner {\\n        emit OnchainVaultsChanged(onchainVaults, _newAddr);\\n        onchainVaults = _newAddr;\\n    }\\n\\n    // To receive ETH when invoking IOnchainVaults.withdrawFromVault\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOnchainVaults.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOnchainVaults {\\n    function depositERC20ToVault(\\n        uint256 assetId,\\n        uint256 vaultId,\\n        uint256 quantizedAmount\\n    ) external;\\n\\n    function depositEthToVault(\\n        uint256 assetId, \\n        uint256 vaultId) \\n    external payable;\\n\\n    function withdrawFromVault(\\n        uint256 assetId,\\n        uint256 vaultId,\\n        uint256 quantizedAmount\\n    ) external;\\n\\n    function getQuantizedVaultBalance(\\n        address ethKey,\\n        uint256 assetId,\\n        uint256 vaultId\\n    ) external view returns (uint256);\\n\\n    function getVaultBalance(\\n        address ethKey,\\n        uint256 assetId,\\n        uint256 vaultId\\n    ) external view returns (uint256);\\n\\n    function getQuantum(uint256 presumedAssetType) external view returns (uint256);\\n\\n    function orderRegistryAddress() external view returns (address);\\n\\n    function isAssetRegistered(uint256 assetType) external view returns (bool);\\n\\n    function getAssetInfo(uint256 assetType) external view returns (bytes memory assetInfo);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOrderRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IOrderRegistry {\\n\\n    function registerLimitOrder(\\n        address exchangeAddress,\\n        uint256 tokenIdSell,\\n        uint256 tokenIdBuy,\\n        uint256 tokenIdFee,\\n        uint256 amountSell,\\n        uint256 amountBuy,\\n        uint256 amountFee,\\n        uint256 vaultIdSell,\\n        uint256 vaultIdBuy,\\n        uint256 vaultIdFee,\\n        uint256 nonce,\\n        uint256 expirationTimestamp\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IShareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface IShareToken {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategyPool {\\n    // sell the amount of the input token, and the amount of output token will be sent to msg.sender\\n    function sellErc(address inputToken, address outputToken, uint256 inputAmt) external returns (uint256 outputAmt);\\n\\n    function sellEth(address outputToken) external payable returns (uint256 outputAmt);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onchainVaults\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelShareAmt\",\"type\":\"uint256\"}],\"name\":\"CancelSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintShareAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"MintAndSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"OnchainVaultsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedInputTokenAmt\",\"type\":\"uint256\"}],\"name\":\"RideDeparted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"share\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumInput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumOutput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategyPool\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Broker.RideInfo\",\"name\":\"rideInfo\",\"type\":\"tuple\"}],\"name\":\"RideInfoRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedShareAmt\",\"type\":\"uint256\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedShareAmt\",\"type\":\"uint256\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rideId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"SlippageChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"EXP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actualPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tokenIds\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[3]\",\"name\":\"_tokens\",\"type\":\"address[3]\"},{\"internalType\":\"address\",\"name\":\"_strategyPool\",\"type\":\"address\"}],\"name\":\"addRideInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"}],\"name\":\"burnRideShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantizedAmtFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultIdFee\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantizedAmtFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultIdFee\",\"type\":\"uint256\"}],\"name\":\"departRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantizedAmtFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultIdFee\",\"type\":\"uint256\"}],\"name\":\"mintShareAndSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onchainVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rideDeparted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rideInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"share\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumInput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantumOutput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategyPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ridesShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setOnchainVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rideId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slippages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Broker", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000fd9368179bf4e2e9f0360c5758d5d3b65eec2de2", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}