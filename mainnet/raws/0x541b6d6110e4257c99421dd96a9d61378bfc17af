{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/KWWMovingBoats.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ninterface IKWWMovingBoats {\r\n    struct MovingBoatDetails{\r\n        // uint256 id;\r\n        //When the sail started\r\n        uint64 startSailTime;\r\n        //Kangaroos on the boat\r\n        // uint32[] kangaroos;\r\n        //Types of the boat (Pirate, Native, etc.)\r\n        uint8 boatState;\r\n        //Direction - true = forward , false = backward\r\n        bool direction;\r\n    }\r\n}\r\n\r\n\r\ncontract KWWMovingBoats is Ownable, IKWWMovingBoats { \r\n    uint256 lastId = 0;\r\n    address gameManager;\r\n\r\n    mapping(uint256 => MovingBoatDetails) public boatsData;\r\n    mapping(uint8 => uint8) public routeToDuration;\r\n\r\n    /*\r\n       EXECUTABLE FUNCTIONS\r\n    */\r\n\r\n    function startSail(uint8 boatState,bool direction) public onlyGameManager{\r\n        lastId = lastId + 1;\r\n        // boatsData[lastId].id = lastId;\r\n        boatsData[lastId].startSailTime = uint64(block.timestamp);\r\n        // boatsData[lastId].kangaroos = kangaroos;\r\n        boatsData[lastId].boatState = boatState;\r\n        boatsData[lastId].direction = direction;\r\n        // boatsData[lastId] = MovingBoatDetails(lastId, uint64(block.timestamp), kangaroos, boatState, route);\r\n    }\r\n\r\n\r\n    /*\r\n       GETTERS\r\n    */\r\n\r\n    function getLastId() public view returns(uint256) {\r\n        return lastId;\r\n    }\r\n\r\n    function getBoatData(uint16 tokenId) public view returns(MovingBoatDetails memory){\r\n        require(boatsData[tokenId].boatState != 0, \"Token not exists\");\r\n        return boatsData[tokenId];\r\n    }\r\n\r\n    // function getKangaroos(uint16 tokenId) public view returns(uint32[] memory){\r\n    //   require(boatsData[tokenId].boatState != 0, \"Token not exists\");\r\n    //   return boatsData[tokenId].kangaroos;\r\n    // }\r\n\r\n    function getStartSailTime(uint16 tokenId) public view returns(uint64){\r\n      require(boatsData[tokenId].startSailTime != 0, \"Token not exists\");\r\n      return boatsData[tokenId].startSailTime;\r\n    }\r\n    \r\n    function getBoatState(uint16 tokenId) public view returns(uint8){\r\n      require(boatsData[tokenId].boatState != 0, \"Token not exists\");\r\n      return boatsData[tokenId].boatState;\r\n    }\r\n\r\n    function getDirection(uint16 tokenId) public view returns(bool){\r\n      require(boatsData[tokenId].boatState != 0, \"Token not exists\");\r\n      return boatsData[tokenId].direction;\r\n    }\r\n\r\n    function sailEnd(uint16 tokenId) public view returns(uint64){\r\n      require(boatsData[tokenId].startSailTime > 0, \"Sail is not active\");\r\n      return boatsData[tokenId].startSailTime + routeToDuration[boatsData[tokenId].boatState] * 1 days;\r\n    }\r\n\r\n    /*\r\n        MODIFIERS\r\n    */\r\n    modifier onlyGameManager() {\r\n        require(msg.sender == owner() || (gameManager != address(0) &&msg.sender == gameManager), \"caller is not the game manager\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n        ONLY OWNER\r\n    */\r\n\r\n    function setGameManager(address _addr) public onlyOwner{\r\n      gameManager = _addr;\r\n    }\r\n    \r\n    function setRouteDuration(uint8 boatState, uint8 duration) public onlyOwner{\r\n        routeToDuration[boatState] = duration;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boatsData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startSailTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getBoatData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startSailTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"}],\"internalType\":\"struct IKWWMovingBoats.MovingBoatDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getBoatState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getDirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"getStartSailTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"routeToDuration\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"sailEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGameManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"setRouteDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"boatState\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"direction\",\"type\":\"bool\"}],\"name\":\"startSail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KWWMovingBoats", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2f682f41a25b9d8c792b4aa7e5ad67b3dda71717e65c9f85d700e4b75c2e77f"}]}