{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT \r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction factory() external pure returns (address);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract DRAKO is IERC20, Auth {\r\n\tstring _name = \"Drako\";\r\n\tstring _symbol = \"DRAKO\";\r\n\tuint256 constant _totalSupply = 100_000_000 * (10 ** _decimals);\r\n\tuint8 constant _decimals = 9;\r\n\tuint32 _smd; uint32 _smr;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tmapping (address => bool) private _noFees;\r\n\tmapping (address => bool) private _noLimits;\r\n\tbool private tradingOpen;\r\n\tuint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n\tuint256 private _taxSwapMin; uint256 private _taxSwapMax;\r\n\tmapping (address => bool) private _isLiqPool;\r\n\tuint16 public blacklistLength = 0;\r\n\tuint8 _maxTaxRate = 13; \r\n\tuint8 private _buyTaxRate; uint8 private _sellTaxRate; uint8 private _txTaxRate;\r\n\tuint16 private _burnTaxShares  = 300;\r\n\tuint16 private _autoLPShares   = 400;\r\n\tuint16 private _treasuryTaxShares  = 900;\r\n\tuint16 private _marketingTaxShares  = 800;\r\n\tuint16 private _totalTaxShares = _burnTaxShares + _autoLPShares + _treasuryTaxShares + _marketingTaxShares;\r\n\taddress constant _burnWallet = address(0);\r\n\r\n\tuint256 private _humanBlock = 0;\r\n\tmapping (address => bool) private _nonSniper;\r\n\tmapping (address => uint256) private _blacklistBlock;\r\n\r\n\tuint8 private _gasPriceBlocks = 10;\r\n\tuint256 private blackGwei = 50 * 10**9;\r\n\r\n\taddress payable private _treasuryWallet = payable(0x84A3E432a910159127F7E0A7faf6fFc2Aa67C45B); \r\n\taddress payable private _marketingWallet = payable(0xda6ce969002fc019546c30DC665ADbae8AF2C4F4); \r\n\tbool private _inTaxSwap = false;\r\n\taddress private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for ETH\r\n\tIUniswapV2Router02 private _uniswapV2Router;\r\n\taddress private wethCA = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tevent ManualTokensBurned(address indexed burnedByWallet, uint256 tokenAmount); \r\n\r\n\tconstructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n\t\ttradingOpen = false;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\t_taxSwapMin = _totalSupply * 10 / 10000;\r\n\t\t_taxSwapMax = _totalSupply * 50 / 10000;\r\n\t\t_uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\t\t_noFees[owner] = true;\r\n\t\t_noFees[address(this)] = true;\r\n\t\t_noFees[_uniswapV2RouterAddress] = true;\r\n\t\t_noFees[_treasuryWallet] = true;\r\n\t\t_noFees[_marketingWallet] = true;\r\n\t\t_noLimits[_treasuryWallet] = true;\r\n\t\t_noLimits[_marketingWallet] = true;\r\n\t\t_noLimits[_burnWallet] = true;\r\n\r\n\t\trequire(smd>0, \"init out of bounds\");\r\n\t\t_smd = smd; _smr = smr;\r\n\t\t_balances[address(this)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(this), _totalSupply);\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\trequire(balanceOf(msg.sender) > 0);\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction initLP(uint256 ethAmountWei) external onlyOwner {\r\n\t\trequire(!tradingOpen, \"trading already open\");\r\n\t\trequire(ethAmountWei > 0, \"eth cannot be 0\");\r\n\r\n\t\t_nonSniper[address(this)] = true;\r\n\t\t_nonSniper[owner] = true;\r\n\t\t_nonSniper[_treasuryWallet] = true;\r\n        _nonSniper[_marketingWallet] = true;\r\n\r\n\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\trequire(_contractETHBalance >= ethAmountWei, \"not enough eth\");\r\n\t\tuint256 _contractTokenBalance = balanceOf(address(this));\r\n\t\trequire(_contractTokenBalance > 0, \"no tokens\");\r\n\t\tif (wethCA != _uniswapV2Router.WETH()) { wethCA = _uniswapV2Router.WETH(); } \r\n\t\taddress _uniLpAddr = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), wethCA);\r\n\t\t\r\n\r\n\t\t_isLiqPool[_uniLpAddr] = true;\r\n\t\t_nonSniper[_uniLpAddr] = true;\r\n\r\n\t\t_approveRouter(_contractTokenBalance);\r\n\t\t_addLiquidity(_contractTokenBalance, ethAmountWei, false);\r\n\r\n\t\t_openTrading();\r\n\t}\r\n\r\n\tfunction _approveRouter(uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tif ( !autoburn ) { lpTokenRecipient = owner; }\r\n\t\t_uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction _openTrading() internal {\r\n\t\t_humanBlock = block.number + 20;\r\n\t\tmaxTxAmount     = 5 * _totalSupply / 1000 + 10**_decimals; \r\n\t\tmaxWalletAmount = 5 * _totalSupply / 1000 + 10**_decimals;\r\n\t\t_buyTaxRate = 11;\r\n\t\t_sellTaxRate = 25;\r\n\t\t_txTaxRate = 13; \r\n\t\ttradingOpen = true;\r\n\t}\r\n\r\n\tfunction humanize() external onlyOwner{\r\n\t\t_humanize(0);\r\n\t}\r\n\r\n\tfunction _humanize(uint8 blkcount) internal {\r\n\t\tif ( _humanBlock > block.number || _humanBlock == 0 ) {\r\n\t\t\t_humanBlock = block.number + blkcount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender != address(0), \"No transfers from Zero wallet\");\r\n\t\tif ( _humanBlock > block.number ) {\r\n\t\t\tif ( uint160(address(recipient)) % _smd == _smr ) { _humanize(1); }\r\n\t\t\telse if ( _blacklistBlock[sender] == 0 ) { _addBlacklist(recipient, block.number); }\r\n\t\t\telse { _addBlacklist(recipient, _blacklistBlock[sender]); }\r\n\t\t} else {\r\n\t\t\tif ( _blacklistBlock[sender] != 0 ) { _addBlacklist(recipient, _blacklistBlock[sender]); }\r\n\t\t\tif ( block.number < _humanBlock + _gasPriceBlocks && tx.gasprice > block.basefee ) {\r\n\t\t\t\tuint256 priceDiff = tx.gasprice - block.basefee;\r\n\t\t    \tif ( priceDiff >= blackGwei ) { revert(\"Gas price over limit\"); }\r\n\t\t    }\r\n\t\t}\r\n\t\tif ( tradingOpen && _blacklistBlock[sender] != 0 && _blacklistBlock[sender] < block.number ) { revert(\"blacklisted\"); }\r\n\r\n\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) {\r\n\t\t\t_swapTaxAndLiquify();\r\n\t\t}\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _addBlacklist(address wallet, uint256 blacklistBlockNum) internal {\r\n\t\tif ( !_nonSniper[wallet] && _blacklistBlock[wallet] == 0 ) { \r\n\t\t\t_blacklistBlock[wallet] = blacklistBlockNum; \r\n\t\t\tblacklistLength ++;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( tradingOpen && !_noLimits[recipient] ) {\r\n\t\t\tif ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen() private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( tradingOpen ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !tradingOpen || _noFees[sender] || _noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[sender] ) { taxAmount = amount * _buyTaxRate / 100; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * _sellTaxRate / 100; }\r\n\t\telse { taxAmount = amount * _txTaxRate / 100; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction isBlacklisted(address wallet) external view returns(bool) {\r\n\t\tif ( _blacklistBlock[wallet] != 0 ) { return true; }\r\n\t\telse { return false; }\r\n\t}\r\n\r\n\tfunction blacklistedInBlock(address wallet) external view returns(uint256) {\r\n\t\treturn _blacklistBlock[wallet];\r\n\t}\r\n\r\n\tfunction ignoreFees(address wallet, bool toggle) external onlyOwner {\r\n\t\t_noFees[ wallet ] = toggle;\r\n\t}\r\n\r\n\tfunction ignoreLimits(address wallet, bool toggle) external onlyOwner {\r\n\t\tif ( wallet == _burnWallet ) { require(toggle, \"Zero wallet must be unlimited\"); }\r\n\t\t_noLimits[ wallet ] = toggle;\r\n\t}\r\n\r\n\tfunction setTaxRates(uint8 newBuyTax, uint8 newSellTax, uint8 newTxTax) external onlyOwner {\r\n\t\trequire(newBuyTax <= _maxTaxRate && newSellTax <= _maxTaxRate && newTxTax <= _maxTaxRate, \"Tax too high\");\r\n\t\t_buyTaxRate = newBuyTax;\r\n\t\t_sellTaxRate = newSellTax;\r\n\t\t_txTaxRate = newTxTax;\r\n\t}\r\n\r\n\tfunction enableBuySupport() external onlyOwner {\r\n\t\t_buyTaxRate = 0;\r\n\t\t_sellTaxRate = 2 * _maxTaxRate;\r\n\t}\r\n  \r\n\tfunction setTaxDistribution(uint16 sharesBurnedTokens, uint16 sharesAutoLP, uint16 sharesTreasury, uint16 sharesMarketing) external onlyOwner {\r\n\t\t_burnTaxShares  = sharesBurnedTokens;\r\n\t\t_autoLPShares = sharesAutoLP;\r\n\t\t_treasuryTaxShares = sharesTreasury;\r\n\t\t_marketingTaxShares = sharesMarketing;\r\n\t\t_totalTaxShares = _burnTaxShares + _autoLPShares + _treasuryTaxShares + _marketingTaxShares;\r\n\t}\r\n\t\r\n\tfunction setTaxWallets(address newTreasuryWallet, address newMarketingWallet) external onlyOwner {\r\n\t\t_treasuryWallet = payable(newTreasuryWallet);\r\n\t\t_marketingWallet = payable(newMarketingWallet);\r\n\t\t_noFees[newTreasuryWallet] = true;\r\n\t\t_noFees[newMarketingWallet] = true;\r\n\t\t_noLimits[newTreasuryWallet] = true;\r\n\t\t_noLimits[newMarketingWallet] = true;\r\n\t}\r\n\r\n\tfunction increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n\t\trequire(newTxAmt >= maxTxAmount, \"tx limit too low\");\r\n\t\tmaxTxAmount = newTxAmt;\r\n\t\tuint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n\t\trequire(newWalletAmt >= maxWalletAmount, \"wallet limit too low\");\r\n\t\tmaxWalletAmount = newWalletAmt;\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\t_taxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\t_taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(_taxSwapMin > 100, \"min too low\");\r\n\t\trequire(_taxSwapMax >= _taxSwapMin, \"min/max error\");\r\n\t}\r\n\r\n\tfunction _transferTaxTokens(address recipient, uint256 amount) private {\r\n\t\tif ( amount > 0 ) {\r\n\t\t\t_balances[address(this)] = _balances[address(this)] - amount;\r\n\t\t\t_balances[recipient] = _balances[recipient] + amount;\r\n\t\t\temit Transfer(address(this), recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify() private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= _taxSwapMin && tradingOpen ) {\r\n\t\t\tif ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n\r\n\t\t\t\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * _autoLPShares / _totalTaxShares / 2;\r\n\t\t\tuint256 _tokensToBurn = _taxTokensAvailable * _burnTaxShares / _totalTaxShares;\r\n\t\t\t_transferTaxTokens(_burnWallet, _tokensToBurn);\r\n\t\t\t\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP - _tokensToBurn;\r\n\t\t\tif (_tokensToSwap>100) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( _autoLPShares > 0 ) {\r\n\t\t\t\t\tuint256 _ethWeiAmount = _ethSwapped * _autoLPShares / _totalTaxShares ;\r\n\t\t\t\t\t_approveRouter(_tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuint256 _contractETHBalance = address(this).balance;\r\n\t\t\tif(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n\t\t_approveRouter(_tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = wethCA;\r\n\t\t_uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction _distributeTaxEth(uint256 _amount) private {\r\n\t\tuint16 _ethTaxShareTotal = _treasuryTaxShares + _marketingTaxShares;\r\n\t\tif ( _treasuryTaxShares > 0 ) { _treasuryWallet.transfer(_amount * _treasuryTaxShares / _ethTaxShareTotal); }\r\n\t\tif ( _marketingTaxShares > 0 ) { _marketingWallet.transfer(_amount * _marketingTaxShares / _ethTaxShareTotal); }\r\n\t}\r\n\r\n\tfunction taxTokensSwap() external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxEthSend() external onlyOwner { \r\n\t\t_distributeTaxEth(address(this).balance); \r\n\t}\r\n\r\n\tfunction burnTokens(uint256 amount) external {\r\n\t\tuint256 _tokensAvailable = balanceOf(msg.sender);\r\n\t\trequire(amount <= _tokensAvailable, \"Token balance too low\");\r\n\t\t_balances[msg.sender] -= amount;\r\n\t\t_balances[address(0)] += amount;\r\n\t\temit Transfer(msg.sender,address(0), amount);\r\n\t\temit ManualTokensBurned(msg.sender, amount);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnedByWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ManualTokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"blacklistedInBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"humanize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"ignoreFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"ignoreLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmountWei\",\"type\":\"uint256\"}],\"name\":\"initLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesBurnedTokens\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTreasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTxTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEthSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTokensSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DRAKO", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000314c415b0000000000000000000000000000000000000000000000000000000007eefef2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fbaa57aea6ff65a4bb41d94340108968386429e3ce4d0d2143ff2dee9a08e81a"}]}