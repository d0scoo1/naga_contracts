{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/crowdsale.sol\": {\r\n      \"content\": \"////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                        //\\n//    NNNNNNNN        NNNNNNNN   ffffffffffffffff           tttt                                               iiii                       //\\n//    N:::::::N       N::::::N  f::::::::::::::::f       ttt:::t                                              i::::i                      //\\n//    N::::::::N      N::::::N f::::::::::::::::::f      t:::::t                                               iiii                       //\\n//    N:::::::::N     N::::::N f::::::fffffff:::::f      t:::::t                                                                          //\\n//    N::::::::::N    N::::::N f:::::f       ffffffttttttt:::::ttttttt      aaaaaaaaaaaaa  nnnn  nnnnnnnn    iiiiiii   aaaaaaaaaaaaa      //\\n//    N:::::::::::N   N::::::N f:::::f             t:::::::::::::::::t      a::::::::::::a n:::nn::::::::nn  i:::::i   a::::::::::::a     //\\n//    N:::::::N::::N  N::::::Nf:::::::ffffff       t:::::::::::::::::t      aaaaaaaaa:::::an::::::::::::::nn  i::::i   aaaaaaaaa:::::a    //\\n//    N::::::N N::::N N::::::Nf::::::::::::f       tttttt:::::::tttttt               a::::ann:::::::::::::::n i::::i            a::::a    //\\n//    N::::::N  N::::N:::::::Nf::::::::::::f             t:::::t              aaaaaaa:::::a  n:::::nnnn:::::n i::::i     aaaaaaa:::::a    //\\n//    N::::::N   N:::::::::::Nf:::::::ffffff             t:::::t            aa::::::::::::a  n::::n    n::::n i::::i   aa::::::::::::a    //\\n//    N::::::N    N::::::::::N f:::::f                   t:::::t           a::::aaaa::::::a  n::::n    n::::n i::::i  a::::aaaa::::::a    //\\n//    N::::::N     N:::::::::N f:::::f                   t:::::t    tttttta::::a    a:::::a  n::::n    n::::n i::::i a::::a    a:::::a    //\\n//    N::::::N      N::::::::Nf:::::::f                  t::::::tttt:::::ta::::a    a:::::a  n::::n    n::::ni::::::ia::::a    a:::::a    //\\n//    N::::::N       N:::::::Nf:::::::f                  tt::::::::::::::ta:::::aaaa::::::a  n::::n    n::::ni::::::ia:::::aaaa::::::a    //\\n//    N::::::N        N::::::Nf:::::::f                    tt:::::::::::tt a::::::::::aa:::a n::::n    n::::ni::::::i a::::::::::aa:::a   //\\n//    NNNNNNNN         NNNNNNNfffffffff                      ttttttttttt    aaaaaaaaaa  aaaa nnnnnn    nnnnnniiiiiiii  aaaaaaaaaa  aaaa   //\\n//                                                                                                                                        //\\n//                                                                                                                                        //\\n//                                                                      .^!7JY5PPP55J?!^.                                                 //\\n//                                                                  :!YG#&@@@@@@@@@@@@@@&B57^                                             //\\n//                                                               :?G&@@@@@@@@@@@@@@@@@@@@@@@@BJ^                                          //\\n//                                                             ^5&@@@@@@@&BPYJ?777?JYPB&@@@@@@@@G!                                        //\\n//                                                           :5@@@@@@@#Y!:             :!Y#@@@@@@@G^                                      //\\n//                                                          !&@@@@@@P~                     ~P@@@@@@@J                                     //\\n//                                                         ?@@@@@@G~             .:::.       ~G@@@@@@5                                    //\\n//                      .^^^^^^^^^^^^^^^^^^               7@@@@@@Y     7#BBBB~!PB&&&&#G?.      Y@@@@@@Y                                   //\\n//                     7#@@@@@@@@@@@@@@@@@@#~            :&@@@@@5      ?@@@@@&@@@@@@@@@@G.      5@@@@@@!                                  //\\n//                     5@@@@@@@@@@@@@@@@@@@@B            J@@@@@#.      ?@@@@@@Y~^^7#@@@@@7      .#@@@@@G                                  //\\n//                     .!JYYYYYYYYYYYYYB@@@@@~           G@@@@@5       ?@@@@@Y     J@@@@@J       5@@@@@&.                                 //\\n//                                     7@@@@@5           B@@@@@Y       ?@@@@@?     ?@@@@@J       Y@@@@@&:                                 //\\n//                                     .#@@@@#.          P@@@@@G       ?@@@@@?     ?@@@@@J       G@@@@@#.                                 //\\n//                                      Y@@@@@7          !@@@@@@!      ?@@@@@J     ?@@@@@J      !@@@@@@Y                                  //\\n//               .................      ~@@@@@G           G@@@@@#^     ?@@@@@J     J@@@@@J     ^#@@@@@&:                                  //\\n//             7G##################5:    B@@@@@#BBB#5     :#@@@@@&!    ~YYYYY~     ~YYYYY~    !&@@@@@@!     J#BBBP!                       //\\n//             &@@@@@@@@@@@@@@@@@@@@7    ?@@@@@@@@@@@Y     :B@@@@@@P^                       ^P@@@@@@&!     !@@@@@@&                       //\\n//             ^YGGGGGGGGGGGGGGGGGP7     :&@@@@@@@@@@@Y     .5@@@@@@@G7:                 :7G@@@@@@@G^     7@@@@@@@P                       //\\n//                                        P@@@@@@@@@@@@P.     ~G@@@@@@@&GY7~:..   ..:~7YG&@@@@@@@B7      J@@@@@@@@^                       //\\n//                                        !@@@@@@@@@@@@@#7      ~5&@@@@@@@@@&&#BBB#&&@@@@@@@@@@G!      ~G@@@@@@@@P                        //\\n//                  ?GBBBBBBBBBBBBBBP!    .#@@@@@@@@@@@@@@G~      .75#@@@@@@@@@@@@@@@@@@@@@#P?:      ^5@@@@@@@@@@!                        //\\n//                 ~@@@@@@@@@@@@@@@@@&.    Y@@@@@@@@@@@@@@@@G7.      .^7YPB#&@@@@@@@&&BG5?~.       ~P@@@@@@@@@@@B                         //\\n//                  ?GBBBBBBBBBBBBBBP!     ^@@@@@@@@@@@@@@@@@@#5!.         .:^^~~~^^:.         .~Y#@@@@@@@@@@@@@7                         //\\n//                                          G@@@@@@@@@@@@@@@@@@@@&GJ!:                     :~?P#@@@@@@@@@@@@@@@#.                         //\\n//                                          ?@@@@@@@@@@@@@@@@@@@@@@@@&#PY?7~^^:::::^^~!?YPB&@@@@@@@@@@@@@@@@@@@J                          //\\n//                      .?PGGGGGGGGGGGJ:    :&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@&:                          //\\n//                      Y@@@@@@@@@@@@@@P     P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Y                           //\\n//                      :5############P~     !@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@^                           //\\n//                        ............       .#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@P                            //\\n//                                            Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~                            //\\n//                                            ^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G                             //\\n//                                             G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@7                             //\\n//                                           .:5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#.                             //\\n//                                         !P#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@?                              //\\n//                                       ^B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G.                              //\\n//                                      ^&@@@@@P?7777777777777777777777777777777777777777777777777777777!~                                //\\n//                                      Y@@@@@?                                                                                           //\\n//                                      J@@@@@Y                                                                                           //\\n//                                      .B@@@@@#5YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJ~                                 //\\n//                                       .5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@J                                //\\n//                                         :?P#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B~                                //\\n//                                            .:^^^J@@@@@@@@@@@@@@@@@J^^^^^^^^^7@@@@@@@@@@@@@@@@@Y^^^^^^                                  //\\n//                                                 5@@@@@@@@@@@@@@@@@5         J@@@@@@@@@@@@@@@@@G                                        //\\n//                                                 J@@@@@@@@@@@@@@@@@J         7@@@@@@@@@@@@@@@@@5                                        //\\n//                                                 .G@@@@@@@@@@@@@@@G.          5@@@@@@@@@@@@@@@B:                                        //\\n//                                                   ?#@@@@@@@@@@@#?             7B@@@@@@@@@@@#Y.                                         //\\n//                                                    .!5B&@@@&B5!.               .!YB&@@@&B57:                                           //\\n//                                                                                                                                        //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n// SPDX-License-Identifier: MIT\\n\\n// @title: Nftania NFT2.0\\n// @author: Nftania.com\\n// @custom: security-contact info@nftania.com\\n// @Contract: Nftania Crowdsale\\n\\npragma solidity 0.8.15;\\n   //////////////////////// Imports ////////////////////////////////////////\\n    import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n    import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n    import \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n    import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IAddLiquidity {\\n    function addLiquidityETH  (address _token, uint tokenAmount, uint EthAmount, address beneficiary ) external payable\\n    returns (uint amountToken, uint amountETH, uint amountliquidity, uint totalLiquidity, address pairAddress);\\n}\\n\\ninterface IToken {\\n    function releaseOnTarget() external;\\n}\\n\\ncontract Nftania_Crowdsale is Pausable, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n   //////////////////////// Main Variables /////////////////////////////////// \\n        uint256 public totalTokensSold;                        // Total accumilative tokens purchased \\n        uint256 private remainingTokens;                       // The cap of tokens available for purchase\\n        uint256 private tokenPresalePrice;                     // Token price fror presale (per one token in wei units) \\n        uint256 private tokenPrice;                            // Token price before liquidty pool (per one nft2 token in wei units) \\n        uint256 private purchaseOrderID;                       // Purcase order serial number\\n        uint256 private walletLimit;                           // Max total number of tokens allowed to be purchased per wallet (in complete units not decimals)\\n        uint256 private minPurchase;                           // Minimum number of tokens allowed per order (in complete units not decimals)\\n        uint256 private maxPurchase;                           // Maximum number of tokens allowed per order (in complete units not decimals)\\n        uint256 private weiRaised;                             // Total sales in wei\\n        uint256 private poolRaised;                            // Total Accumulative liquidity pool revenue share in wei\\n        uint256 private poolBalance;                           // Current contract balance allocated for liquidity pool in wei\\n        uint256 private freeBalance;                           // non liquidity pool eth balance inside the contract\\n        uint256 private revenueRaised;                         // Total revenue share in wei\\n        uint256 private startDate;                             // Sale starting date\\n        uint256 private endDate;                               // Sale ending date\\n        uint256 private poolPercent;                           // pool Percentage value in  per thousand value (1 per mili)\\n        uint256 private targetPool;                            // Minimum number of eth (in wei) needed to activate automatic liquity pool threshould\\n        uint256 private totalLiquidityTokens;                  // total number of liquidity tokens generated by manual and automaitc liquidity pool creation\\n        address private tokenAddress;                          // Address of the ERC-20 token to be sold\\n        address payable private AddLiquidityContract;          // Add Liquidity Contract (add liquidity to uniswap exchange)\\n        address payable private revenueWallet;                 // Wallet Receiving Sales in eth\\n        address private LiquidityPoolLocker;                   // Liquidity pool locker address\\n        bool private closed;                                   // Flag (\\\"true\\\" if crowdsale is closed)\\n        bool private soldOut;                                  // Flag (\\\"true\\\" if crowdsale token are sold out) \\n        bool private timeEnded;                                // Flag (\\\"true\\\" if crowdsale end date achieved)\\n        mapping (address => uint256) public walletPurchases;   // Total Purchases for each purchasing wallet\\n\\n   //////////////////////// Events /////////////////////////////////////////// \\n    // Pause/unpause Smart Contract\\n        event ContractIsPaused(bool status);\\n    // Purchase Order                                          \\n        event PurchaseOrder(address indexed to, uint256 EthValue, uint256 tokensAmount, uint256 poolShare, uint256 revenueShare, uint256 totalWalletPurchases, uint256 walletTokenBalance, uint256 indexed purchaseOrderID, uint256 indexed date); \\n    // Set New Price\\n        event NewPriceSet(uint256 indexed tokenPresalePrice, uint256 indexed tokenPrice, uint256 indexed date);\\n    // Status Update\\n        event StatusUpdate(uint256 weiRaised, uint256 poolRaised, uint256 revenueRaised, uint256 poolBalance, uint256 totalTokensSold, uint256 remainingTokens);\\n    // New Dates Set\\n        event NewDatesSet(uint startDate, uint endDate);\\n    // New Purchase Limits\\n        event NewPurchaseLimits(uint256 _minPurchase, uint256 _maxPurchase, uint256 _walletLimit);\\n    // Withdraw Tokens \\n        event WithdrawTokens (address to, uint256  amount);\\n    // Liquidity Added\\n        event AutoLiquidity (uint tokenAmount, uint EthAmount);\\n        event ManualLiquidity (uint tokenAmount, uint EthAmount);\\n        event LiquidityAdded (uint amountToken, uint amountETH, uint amountliquidityTokens, uint totalLiquidityTokens, address pairAddress);\\n      \\n   //////////////////////// Constructor //////////////////////////////////////\\n    constructor(\\n        uint256 _tokenPresalePrice,   \\n        uint256 _tokenPrice,                 \\n        uint256 _walletLimit,  \\n        uint256 _minPurchase,  \\n        uint256 _maxPurchase,  \\n        uint256 _poolPercent,\\n        uint256 _targetPool,\\n        uint _startDate,\\n        uint _endDate){\\n\\n        require(_tokenPresalePrice > 0,\\\"NftaniaCrowdsale: token rate is 0 Wei\\\");\\n        require(_tokenPrice > 0,\\\"NftaniaCrowdsale: token rate is 0 Wei\\\");\\n        require(_walletLimit != 0,\\\"NftaniaCrowdsale: The wallet limit should not be zero\\\");\\n        require(_minPurchase != 0,\\\"NftaniaCrowdsale: The minimum purchase should not be zero\\\");\\n        require(_maxPurchase >= _minPurchase,\\\"NftaniaCrowdsale: The maximum purchase should be larger or equal to the minimum purchase\\\");\\n        require(_poolPercent > 0,\\\"NftaniaCrowdsale: Liquidity pool percent should not be zero\\\");\\n        require(_targetPool > 0,\\\"NftaniaCrowdsale: Target amount of tokens for liquidity pool should not be zero\\\");\\n        require(_startDate >= block.timestamp,\\\"NftaniaCrowdsale: opening time is before current time\\\");\\n        require(_endDate > _startDate,\\\"NftaniaCrowdsale: Closing time is  before openning time\\\");\\n\\n        tokenPresalePrice = _tokenPresalePrice;\\n        tokenPrice = _tokenPrice;    \\n        walletLimit = _walletLimit;\\n        minPurchase = _minPurchase;\\n        maxPurchase = _maxPurchase;\\n        poolPercent = _poolPercent;\\n        targetPool = _targetPool;\\n        startDate = _startDate;\\n        endDate = _endDate;\\n    }\\n\\n   //////////////////////// intializeAddresses //////////////////////////////////////     \\n    function intilizeAddresses(\\n        address _tokenAddress, \\n        address _LiquidityPoolLocker,\\n        address payable _AddLiquidityContract,\\n        address payable _revenueWallet) \\n        public onlyOwner{\\n        require(_tokenAddress != address(0),\\\"NftaniaCrowdsale: token is the zero address\\\");\\n        require(_LiquidityPoolLocker != address(0),\\\"NftaniaCrowdsale: Liquidity Locker is the zero address\\\");\\n        require(_AddLiquidityContract != address(0),\\\"NftaniaCrowdsale: Nftania Add Liquidity contract is the zero address\\\");\\n        require(_revenueWallet != address(0),\\\"NftaniaCrowdsale: wallet is the zero address\\\");\\n        tokenAddress = _tokenAddress;  \\n        LiquidityPoolLocker =_LiquidityPoolLocker;\\n        AddLiquidityContract = _AddLiquidityContract;\\n        revenueWallet = _revenueWallet;        \\n        updateStatus();\\n    }\\n\\n   //////////////////////// Fallback //////////////////////////////////////   \\n    fallback() external payable {} \\n    receive()  external payable {} \\n    \\n   ////////////////////////  get remaining tokens //////////////////////////////// \\n    function getRemainingTokens() public view returns (uint256 _remainingTokens){\\n        _remainingTokens = remainingTokens;\\n        require(_remainingTokens > 10**18,\\\"remaining tokens are fractions\\\");\\n        return (_remainingTokens);\\n    }\\n\\n   //////////////////////// Function update Remaining Tokens /////////////  \\n    function updateStatus() internal {\\n        uint256 tokenAllowance;\\n        uint256 tokenBallance;\\n        require(block.timestamp >= startDate,\\\"Nftania Crowdsale: Sale has not started yet\\\");\\n        tokenAllowance = IERC20(tokenAddress).allowance(owner(), address(this));\\n        tokenBallance = IERC20(tokenAddress).balanceOf(owner());\\n        remainingTokens = min (tokenAllowance, tokenBallance);\\n        soldOut = remainingTokens < minPurchase * 10**18;  // Checks if there is remaining tokens supply\\n        timeEnded = block.timestamp > endDate; // Checks if date Ended  \\n        closed = soldOut || timeEnded;   \\n        require(!soldOut,\\\"Nftania Crowdsale: All tokens are sold out\\\");  \\n        require(!timeEnded,\\\"Nftania Crowdsale: Crowdsale time has ended\\\"); \\n    }\\n\\n   //////////////////////// Function Reopen Corwdsale after close /////////////  \\n    //Owner must make sure of enough allowance and new date before reopen\\n    function reopenCrowdsale() public onlyOwner{\\n        closed = false;\\n    }\\n\\n   //////////////////////// Function gets Minimum Value /////////////  \\n    function min (uint256 a, uint256 b) internal pure returns (uint minimum) {\\n        if (a>b) {return b;} else{return a;}\\n    }\\n\\n   //////////////////////// get Details ////////////////////////////////\\n    function getDetails() public view returns (address _tokenAddress, address _revenueWallet, bool _soldOut, bool _timeEnded, bool _closed, uint _startDate, uint _endDate) {\\n        return (tokenAddress, revenueWallet, soldOut, timeEnded, closed, startDate, endDate) ;\\n    }\\n\\n   //////////////////////// Get Purchase Limit ///////////////////////////////// \\n    function getPurchaseLimits () public view returns (uint256 _minPurchase, uint256 _maxPurchase, uint256 _walletLimit){\\n        return (minPurchase, maxPurchase, walletLimit);\\n    }\\n\\n   //////////////////////// Get Results //////////////////////// \\n    function getEthInfo () external view returns (uint _balance, uint256 _weiRaised, uint256 _poolRaised, uint256 _poolBalance, uint256 _freeBalance, uint256 _revenueRaised) {\\n        _freeBalance = address(this).balance - poolBalance;\\n        return (address(this).balance, weiRaised, poolRaised, poolBalance, _freeBalance, revenueRaised);\\n    }\\n\\n   //////////////////////// Get Token Price ////////////////////////////////// \\n    function getPrices() public view returns (uint256 _tokenPresalePrice, uint256 _tokenPrice){\\n        return (tokenPresalePrice, tokenPrice);\\n    } \\n\\n   //////////////////////// Withdraw Funds ////////////////////////////////     \\n    function withdrawEth(uint amount, address payable receivingWallet) public onlyOwner returns (uint256 _contractBalance, uint256 _freeBalance, uint256 _poolBalance)  {\\n        freeBalance = address(this).balance - poolBalance;\\n        require(amount > 0, \\\"NftaniaCrowdsale: amount cannot be zero\\\");\\n        require(amount <= freeBalance, \\\"NftaniaCrowdsale: Insufficient non-liquidity pool balance\\\"); //owner cannot withdraw ETH allocated for liquidity pool\\n        (bool success, ) = receivingWallet.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Error\\\");\\n        _contractBalance = address(this).balance;\\n        return (_contractBalance, freeBalance, poolBalance);\\n    }\\n\\n   //////////////////////// Withdraw Tokens ////////////////////////////////    \\n    function withdrawTokens (IERC20 token , address to , uint256 amount ) public onlyOwner {\\n        uint256 tokenBalance = token.balanceOf (address(this)) ;\\n        require (amount <= tokenBalance,\\\"NftaniaCrowdsale: tokenBalance is low\\\") ;\\n        token.safeTransfer(to,amount);\\n        emit WithdrawTokens (to, amount);\\n    }\\n\\n   //////////////////////// update Purchase Limits ///////////////////////////////// \\n    function updatePurchaseLimits (uint256 _minPurchase, uint256 _maxPurchase, uint256 _walletLimit) public onlyOwner whenNotClosed returns (bool status){\\n        require (_minPurchase > 0,\\\"NftaniaCrowdsale: The minimum purchase should not be zero\\\");\\n        require (_maxPurchase >= _minPurchase,\\\"NftaniaCrowdsale: The max purchase should be larger or euqal to the minimum purchase\\\");\\n        require (_walletLimit >= _maxPurchase,\\\"NftaniaCrowdsale: The wallet limit should be larger or euqal to the maximum purchase\\\");\\n\\n        minPurchase = _minPurchase;\\n        maxPurchase = _maxPurchase;\\n        walletLimit = _walletLimit;\\n        emit NewPurchaseLimits(minPurchase, maxPurchase, walletLimit);\\n        return true;\\n    }\\n\\n   //////////////////////// update Token Price ////////////////////////////////// \\n    function updateTokenPrices(uint256 _tokenPresalePrice, uint256 _tokenPrice) public onlyOwner whenNotClosed returns (bool success){\\n        require (paused(),\\\"NftaniaCrowdsale: contract should be paused to inform users about price change in advance\\\");\\n        require (_tokenPresalePrice != 0,\\\"NftaniaCrowdsale: The Price is zero\\\"); \\n        require (_tokenPrice != 0,\\\"NftaniaCrowdsale: The Price is zero\\\");\\n        tokenPresalePrice = _tokenPresalePrice;\\n        tokenPrice = _tokenPrice;\\n        emit NewPriceSet(tokenPresalePrice, tokenPrice, block.timestamp);\\n        return true;       \\n    } \\n\\n   //////////////////////// Update Dates //////////////////////////////////////// \\n    function updateDates(uint _startDate, uint _endDate) public onlyOwner {\\n        require(_startDate >= block.timestamp,\\\"NftaniaCrowdsale: opening time is before current time\\\");\\n        require(_endDate > _startDate,\\\"NftaniaCrowdsale: opening time is not before closing time\\\");\\n        startDate = _startDate;\\n        endDate = _endDate;\\n        emit NewDatesSet(startDate, endDate);     \\n    } \\n\\n   //////////////////////// Purchase Tokens  /////////////  \\n    function buyTokens(uint amount) public payable whenNotPaused whenNotClosed nonReentrant returns\\n    (address userAddress, uint256 orderValue, uint256 _amount , uint256 poolShare, uint256 revenueShare, \\n    uint256 _walletPurchases, uint256 walletTokenBalance, uint256 _purchaseOrderID, uint256 date){  \\n\\n        // Qualify Order\\n        updateStatus();\\n        require(amount >= minPurchase,\\\"Nftania Crowdsale: The tokens amount for this order is smaller than the minimum tokens amount allowed per order\\\"); // checks if transaction value less than minimum allowed order value.\\n        require(amount * 10**18 <= remainingTokens,\\\"Nftania Crowdsale: Amount requested is lager than remaining tokens\\\");                            // Checks \\\"Purchase supply\\\" availability.\\n        require(amount <= maxPurchase,\\\"Nftania Crowdsale: The tokens amount for this order is larger than the maximum tokens amount allowed per order\\\");  // Checks is remaining tokens are below minimum order quantity\\n        require(amount + walletPurchases[msg.sender] <= walletLimit,\\\"Nftania Crowdsale: The total cumulative tokens requested is more than max qouta per wallet\\\"); // Checks \\\"qouta amount\\\" limit if allowed.\\n        require(msg.value == amount * tokenPresalePrice,\\\"Nftania Crowdsale: Ether amount does not match tokens amount value\\\");                                    // checks if paid value match qunatity total cost.\\n          \\n        // Update variables Status \\n        (poolShare, revenueShare) = getShares(msg.value);\\n        weiRaised += msg.value;                    // UPDATE WEI RAISED STATE\\n        poolRaised += poolShare;                   // UPDATE TOTAL ACCUMULATIVE WEI POOL\\n        poolBalance += poolShare;                  // UPDATE CURRENT BALANCE IN CONTRACT FOR LIQUIDTY POOL WEI \\n        revenueRaised += revenueShare;             // UPDATE WEI REVENUE STATE\\n        totalTokensSold += amount;                 // UPDATE TOTAL PURCHASED TOKENS \\n        purchaseOrderID += 1;                      // GENERATE ORDER ID\\n        remainingTokens -= amount * 10**18;        // UPDATE REMAINING TOKENS\\n        walletPurchases[msg.sender] += amount;     // regiter total tokens purchasea by a wallet.\\n                \\n        // Collect & Deliver\\n        forwardFunds(revenueShare,poolShare);   \\n        deliverTokens(msg.sender, amount);\\n        walletTokenBalance = IERC20(tokenAddress).balanceOf(msg.sender); //get total wallet token balance after pruchase\\n        autoAddLiquidity(); \\n\\n        // Events\\n        emit PurchaseOrder(msg.sender, msg.value, amount * 10**18, poolShare, revenueShare, walletPurchases[msg.sender] * 10**18 , walletTokenBalance, purchaseOrderID, block.timestamp);\\n        emit StatusUpdate(weiRaised , poolRaised, revenueRaised , poolBalance , totalTokensSold, remainingTokens);\\n        return (msg.sender, msg.value, amount * 10**18, poolShare, revenueShare, walletPurchases[msg.sender] * 10**18 , walletTokenBalance, purchaseOrderID, block.timestamp);\\n    } \\n\\n   //////////////////////// function Deliver Tokens /////////////  \\n    function deliverTokens(address to, uint256 amount) internal {\\n        IERC20(tokenAddress).safeTransferFrom(owner(), to, amount * 10**18); \\n    }     \\n\\n   //////////////////////// function Forward Funds /////////////  \\n    function forwardFunds(uint256 _revenueShare, uint256 _poolShare) internal {  \\n        (bool successRevenueShare, ) = revenueWallet.call{value: _revenueShare}(\\\"\\\");\\n        require(successRevenueShare, \\\"Error revenueShare\\\");  \\n        (bool successPoolShare, ) = payable (address(this)).call{value: _poolShare}(\\\"\\\");\\n        require(successPoolShare, \\\"Error PoolShare\\\");  \\n    }  \\n\\n   ////////////////// calculate shares for revenue and liquidity pool /////////////\\n    function getShares(uint256 paymentAmount) internal view returns (uint256 poolShare, uint256 revenueShare ) {\\n        require(paymentAmount * poolPercent  > 1000,\\\"small transaction amount\\\");\\n        poolShare = (paymentAmount * poolPercent) / 1000;\\n        revenueShare = paymentAmount - poolShare; \\n        return (poolShare, revenueShare);\\n    }\\n\\n   /////////////////// Automatic Add Liquidity /////////////  \\n    function autoAddLiquidity () internal returns (uint tokenAmount, uint EthAmount) {\\n        if (poolRaised >= targetPool) {\\n            EthAmount = poolBalance;\\n            tokenAmount = calclulateTokens(EthAmount);\\n            (, uint amountETH,,,) = callAddLiquidity (tokenAmount, EthAmount);  \\n            poolBalance -= amountETH;      \\n            IToken(tokenAddress).releaseOnTarget();\\n        }\\n        emit AutoLiquidity (tokenAmount,EthAmount);\\n        return (tokenAmount, EthAmount);\\n    }\\n\\n   /////////////////// Increase Target Pool  /////////////  \\n    function increaseTargetPool(uint256 newTargetPool) public onlyOwner{\\n        require (newTargetPool > targetPool, \\\"Pool Target can be increased only\\\");\\n        targetPool = newTargetPool;\\n    }\\n\\n   /////////////////// get pool info /////////////  \\n    function getPoolInfo() public view returns (uint _poolRaised,uint _targetPool,uint _poolBalance,address _LiquidityPoolLocker, uint _totalLiquidityTokens) {\\n        return (poolRaised,targetPool,poolBalance,LiquidityPoolLocker,totalLiquidityTokens);\\n    }\\n\\n   //////////////////// Manual Add Liquidity /////////////  \\n    function manualAddLiquidity (uint EthAmount)  public onlyOwner {\\n        require (EthAmount <= poolBalance, \\\"Nftania Crowdsale: No Enough funds for liquidity\\\");\\n        uint tokenAmount = calclulateTokens (EthAmount);\\n        callAddLiquidity (tokenAmount, EthAmount) ;\\n        (, uint amountETH,,,) = callAddLiquidity (tokenAmount, EthAmount) ;\\n        poolBalance -= amountETH;\\n        emit ManualLiquidity (tokenAmount,EthAmount);\\n    }\\n\\n    function calclulateTokens (uint EthAmount) internal view returns (uint tokenAmount){\\n        tokenAmount = (EthAmount / tokenPrice) * 10**18;\\n        return tokenAmount;\\n    }\\n        \\n   //////////////////// Add Liquidity /////////////  \\n    function callAddLiquidity (uint tokenAmount, uint EthAmount) internal\\n    returns (uint amountToken, uint amountETH,uint amountliquidityTokens, uint _totalLiquidityTokens, address pairAddress){\\n        IERC20(tokenAddress).safeTransferFrom(owner(), address(this), tokenAmount); \\n        IERC20(tokenAddress).safeIncreaseAllowance(AddLiquidityContract, tokenAmount);  \\n\\n        (amountToken, amountETH, amountliquidityTokens, totalLiquidityTokens, pairAddress) = \\n        IAddLiquidity(AddLiquidityContract).addLiquidityETH {value:EthAmount} (tokenAddress, tokenAmount, EthAmount, LiquidityPoolLocker);\\n        \\n        emit LiquidityAdded (amountToken, amountETH, amountliquidityTokens, totalLiquidityTokens, pairAddress);\\n        return (amountToken, amountETH, amountliquidityTokens, totalLiquidityTokens, pairAddress);\\n    }   \\n\\n   ////////////////// Modifier Checks if Not Closed  ///////////////////// \\n    modifier whenNotClosed {\\n        require(!closed,\\\"Nftania Crowdsale: Crowdsale is closed\\\");\\n        _;\\n    }\\n\\n   //////////////////////// Pause/UnPause Smart Contract ///////////////////// \\n    function pause() public onlyOwner {\\n        _pause();\\n        emit ContractIsPaused(true);        \\n    }\\n    \\n    function unpause() public onlyOwner {\\n        _unpause();\\n        emit ContractIsPaused(false);\\n    }\\n\\n   /////////////////////// Disable Renounce Ownership //////////////////////////////////// \\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"Nftania Crowdsale: Ownership cannot be renounced\\\");  \\n    }   \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPresalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ContractIsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountliquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLiquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"name\":\"ManualLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"NewDatesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenPresalePrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NewPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"NewPurchaseLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EthValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWalletPurchases\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"walletTokenBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseOrderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"PurchaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"}],\"name\":\"StatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenueShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseOrderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_soldOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_timeEnded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revenueRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_LiquidityPoolLocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalLiquidityTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPresalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_remainingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTargetPool\",\"type\":\"uint256\"}],\"name\":\"increaseTargetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiquidityPoolLocker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_AddLiquidityContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_revenueWallet\",\"type\":\"address\"}],\"name\":\"intilizeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EthAmount\",\"type\":\"uint256\"}],\"name\":\"manualAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reopenCrowdsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"updateDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPresalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receivingWallet\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nftania_Crowdsale", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000517da02c0000000000000000000000000000000000000000000000000000000065dd08370000000000000000000000000000000000000000000000000000000000003938700000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000017d784000000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000002722072fd7a31b800000000000000000000000000000000000000000000000000000000000062b609b00000000000000000000000000000000000000000000000000000000062f06010", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}