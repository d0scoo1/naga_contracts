{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.2 https://hardhat.org\r\n\r\n// File contracts/lib/LibAppStorage.sol\r\n\r\n/**\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * Copyright (c) 2021 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\npragma solidity 0.8.9;\r\n\r\nenum AuthorizationState {\r\n    Unused,\r\n    Used,\r\n    Canceled\r\n}\r\n\r\nstruct AppStorage {\r\n    address owner;\r\n    address pauser;\r\n    bool paused;\r\n    address blacklister;\r\n    mapping(address => bool) blacklisted;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n    string currency;\r\n    address masterMinter;\r\n    bool initialized;\r\n    bool initializing;\r\n    bool initializedV2;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    uint256 totalSupply;\r\n    mapping(address => bool) minters;\r\n    mapping(address => uint256) minterAllowed;\r\n    address rescuer;\r\n    bytes32 domainSeparator;\r\n    mapping(address => mapping(bytes32 => AuthorizationState)) authorizationStates;\r\n    mapping(address => uint256) nonces;\r\n}\r\n\r\nlibrary LibAppStorage {\r\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\r\n        assembly {\r\n            ds.slot := 0\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/lib/LibContext.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title ECRecover\r\n * @notice A library that provides a safe ECDSA recovery function\r\n */\r\nlibrary LibContext {\r\n    function _msgSender() internal view returns (address sender) {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            }\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibOwnable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nlibrary LibOwnable {\r\n    function _requireOnlyOwner() internal view {\r\n        require(\r\n            LibContext._msgSender() == LibAppStorage.diamondStorage().owner,\r\n            \"Ownable: caller is not the owner\"\r\n        );\r\n    }\r\n}\r\n\r\n// File contracts/common/Ownable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018 zOS Global Limited.\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @notice The Ownable contract has an owner address, and provides basic\r\n * authorization control functions\r\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\r\n * Modifications:\r\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\r\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\r\n * 3. Make public functions external (5/27/20)\r\n */\r\ncontract Ownable {\r\n    /**\r\n     * @dev Event to show ownership has been transferred\r\n     * @param previousOwner representing the address of the previous owner\r\n     * @param newOwner representing the address of the new owner\r\n     */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev The constructor sets the original owner of the contract to the sender account.\r\n     */\r\n    constructor() {\r\n        setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells the address of the owner\r\n     * @return the address of the owner\r\n     */\r\n    function owner() external view returns (address) {\r\n        return LibAppStorage.diamondStorage().owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner address\r\n     */\r\n    function setOwner(address newOwner) internal {\r\n        LibAppStorage.diamondStorage().owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        LibOwnable._requireOnlyOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(LibAppStorage.diamondStorage().owner, newOwner);\r\n        setOwner(newOwner);\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibBlacklistable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nlibrary LibBlacklistable {\r\n    function _requireBlacklister() internal view {\r\n        require(\r\n            msg.sender == LibAppStorage.diamondStorage().blacklister,\r\n            \"Blacklistable: caller is not the blacklister\"\r\n        );\r\n    }\r\n\r\n    function _requireNotBlacklisted(address account) internal view {\r\n        require(\r\n            !LibAppStorage.diamondStorage().blacklisted[account],\r\n            \"Blacklistable: account is blacklisted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File contracts/common/Blacklistable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title Blacklistable Token\r\n * @dev Allows accounts to be blacklisted by a \"blacklister\" role\r\n */\r\ncontract Blacklistable is Ownable {\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the blacklister\r\n     */\r\n    modifier onlyBlacklister() {\r\n        LibBlacklistable._requireBlacklister();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if argument account is blacklisted\r\n     * @param account The address to check\r\n     */\r\n    modifier notBlacklisted(address account) {\r\n        LibBlacklistable._requireNotBlacklisted(account);\r\n        _;\r\n    }\r\n\r\n    function blacklister() external view returns (address) {\r\n        return LibAppStorage.diamondStorage().blacklister;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if account is blacklisted\r\n     * @param account The address to check\r\n     */\r\n    function isBlacklisted(address account) external view returns (bool) {\r\n        return LibAppStorage.diamondStorage().blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds account to blacklist\r\n     * @param account The address to blacklist\r\n     */\r\n    function blacklist(address account) external onlyBlacklister {\r\n        LibAppStorage.diamondStorage().blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     * @param account The address to remove from the blacklist\r\n     */\r\n    function unBlacklist(address account) external onlyBlacklister {\r\n        LibAppStorage.diamondStorage().blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n    function updateBlacklister(address newBlacklister) external onlyOwner {\r\n        require(newBlacklister != address(0), \"Blacklistable: new blacklister is the zero address\");\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        appStorage.blacklister = newBlacklister;\r\n        emit BlacklisterChanged(appStorage.blacklister);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC165.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20Metadata.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\r\n\r\n// File contracts/lib/LibERC20.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title ECRecover\r\n * @notice A library that provides a safe ECDSA recovery function\r\n */\r\nlibrary LibERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Internal function to set allowance\r\n     * @param owner_    Token owner's address\r\n     * @param spender   Spender's address\r\n     * @param value     Allowance amount\r\n     */\r\n    function _approve(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        appStorage.allowed[owner_][spender] = value;\r\n        emit Approval(owner_, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to increase the allowance by a given increment\r\n     * @param owner     Token owner's address\r\n     * @param spender   Spender's address\r\n     * @param increment Amount of increase\r\n     */\r\n    function _increaseAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 increment\r\n    ) internal {\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        uint256 currentAllowance = appStorage.allowed[owner][spender];\r\n        _approve(owner, spender, currentAllowance.add(increment));\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to decrease the allowance by a given decrement\r\n     * @param owner     Token owner's address\r\n     * @param spender   Spender's address\r\n     * @param decrement Amount of decrease\r\n     */\r\n    function _decreaseAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 decrement\r\n    ) internal {\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        _approve(\r\n            owner,\r\n            spender,\r\n            appStorage.allowed[owner][spender].sub(\r\n                decrement,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to process transfers\r\n     * @param from  Payer's address\r\n     * @param to    Payee's address\r\n     * @param value Transfer amount\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        require(value <= appStorage.balances[from], \"ERC20: transfer amount exceeds balance\");\r\n\r\n        appStorage.balances[from] = appStorage.balances[from].sub(value);\r\n        appStorage.balances[to] = appStorage.balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens by spending allowance\r\n     * @param from   Payer's address\r\n     * @param to     Payee's address\r\n     * @param value  Transfer amount\r\n     * @return True if successful\r\n     */\r\n    function _transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        _transfer(from, to, value);\r\n\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        address msgSender = LibContext._msgSender();\r\n        uint256 currentAllowance = appStorage.allowed[from][msgSender];\r\n        require(value <= currentAllowance, \"ERC20: transfer amount exceeds allowance\");\r\n        appStorage.allowed[from][msgSender] = currentAllowance.sub(value);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibPausable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nlibrary LibPausable {\r\n    function _requireNotPaused() internal view {\r\n        require(!LibAppStorage.diamondStorage().paused, \"Pausable: paused\");\r\n    }\r\n\r\n    function _requireOnlyPauser() internal view {\r\n        require(\r\n            LibContext._msgSender() == LibAppStorage.diamondStorage().pauser,\r\n            \"Pausable: caller is not the pauser\"\r\n        );\r\n    }\r\n}\r\n\r\n// File contracts/common/Pausable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Copyright (c) 2018-2020 CENTRE SECZ0\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @notice Base contract which allows children to implement an emergency stop\r\n * mechanism\r\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol\r\n * Modifications:\r\n * 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\r\n * 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\r\n * 3. Removed whenPaused (6/14/2018)\r\n * 4. Switches ownable library to use ZeppelinOS (7/12/18)\r\n * 5. Remove constructor (7/13/18)\r\n * 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20)\r\n * 7. Make public functions external (5/27/20)\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    event PauserChanged(address indexed newAddress);\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        LibPausable._requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev throws if called by any account other than the pauser\r\n     */\r\n    modifier onlyPauser() {\r\n        LibPausable._requireOnlyPauser();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() external onlyPauser {\r\n        LibAppStorage.diamondStorage().paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function paused() external view returns (bool) {\r\n        return LibAppStorage.diamondStorage().paused;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external onlyPauser {\r\n        LibAppStorage.diamondStorage().paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    function pauser() external view returns (address) {\r\n        return LibAppStorage.diamondStorage().pauser;\r\n    }\r\n\r\n    /**\r\n     * @dev update the pauser role\r\n     */\r\n    function updatePauser(address newPauser) external onlyOwner {\r\n        require(newPauser != address(0), \"Pausable: new pauser is the zero address\");\r\n        LibAppStorage.diamondStorage().pauser = newPauser;\r\n        emit PauserChanged(LibAppStorage.diamondStorage().pauser);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/common/Rescuable.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\ncontract Rescuable is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event RescuerChanged(address indexed newRescuer);\r\n\r\n    /**\r\n     * @notice Returns current rescuer\r\n     * @return Rescuer's address\r\n     */\r\n    function rescuer() external view returns (address) {\r\n        return LibAppStorage.diamondStorage().rescuer;\r\n    }\r\n\r\n    /**\r\n     * @notice Revert if called by any account other than the rescuer.\r\n     */\r\n    modifier onlyRescuer() {\r\n        _requireOnlyRescuer();\r\n        _;\r\n    }\r\n\r\n    function _requireOnlyRescuer() internal view {\r\n        require(\r\n            msg.sender == LibAppStorage.diamondStorage().rescuer,\r\n            \"Rescuable: caller is not the rescuer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Rescue ERC20 tokens locked up in this contract.\r\n     * @param tokenContract ERC20 token contract address\r\n     * @param to        Recipient address\r\n     * @param amount    Amount to withdraw\r\n     */\r\n    function rescueERC20(\r\n        IERC20 tokenContract,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyRescuer {\r\n        tokenContract.safeTransfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Assign the rescuer role to a given address.\r\n     * @param newRescuer New rescuer's address\r\n     */\r\n    function updateRescuer(address newRescuer) external onlyOwner {\r\n        require(newRescuer != address(0), \"Rescuable: new rescuer is the zero address\");\r\n        LibAppStorage.diamondStorage().rescuer = newRescuer;\r\n        emit RescuerChanged(newRescuer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/proxy/beacon/IBeacon.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/StorageSlot.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT =\r\n        0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\r\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(\r\n            Address.isContract(newImplementation),\r\n            \"ERC1967: new implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(\r\n            _ROLLBACK_SLOT\r\n        );\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            Address.functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(\r\n                oldImplementation == _getImplementation(),\r\n                \"ERC1967Upgrade: upgrade breaks further upgrades\"\r\n            );\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _upgradeTo(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT =\r\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT =\r\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data)\r\n        external\r\n        payable\r\n        virtual\r\n        onlyProxy\r\n    {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n}\r\n\r\n// File contracts/common/BaseToken.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title BaseToken\r\n */\r\nabstract contract BaseToken is\r\n    UUPSUpgradeable,\r\n    IERC165,\r\n    IERC20,\r\n    IERC20Metadata,\r\n    Ownable,\r\n    Pausable,\r\n    Blacklistable,\r\n    Rescuable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    AppStorage internal appStorage;\r\n\r\n    event Mint(address indexed minter, address indexed to, uint256 amount);\r\n    event Burn(address indexed burner, uint256 amount);\r\n    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\r\n    event MinterRemoved(address indexed oldMinter);\r\n    event MasterMinterChanged(address indexed newMasterMinter);\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return LibContext._msgSender();\r\n    }\r\n\r\n    /**\r\n     * @dev Authorizes the contract owner to perform a contract upgrade.\r\n     */\r\n    function _authorizeUpgrade(address) internal virtual override onlyOwner {\r\n        this;\r\n    }\r\n\r\n    function implementation() external view returns (address) {\r\n        return _getImplementation();\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return appStorage.name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return appStorage.symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return appStorage.decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC20).interfaceId ||\r\n            interfaceId == type(IERC20Metadata).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint tokens.\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint. Must be less than or equal\r\n     * to the minterAllowance of the caller.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function _mint(address to, uint256 amount) internal returns (bool) {\r\n        address msgSender = _msgSender();\r\n        appStorage.totalSupply = appStorage.totalSupply.add(amount);\r\n        appStorage.balances[to] = appStorage.balances[to].add(amount);\r\n        emit Mint(msgSender, to, amount);\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Amount of remaining tokens spender is allowed to transfer on\r\n     * behalf of the token owner\r\n     * @param tokenOwner    Token owner's address\r\n     * @param spender   Spender's address\r\n     * @return Allowance amount\r\n     */\r\n    function allowance(address tokenOwner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return appStorage.allowed[tokenOwner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Get totalSupply of token\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return appStorage.totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get token balance of an account\r\n     * @param account address The account\r\n     */\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return appStorage.balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Set spender's allowance over the caller's tokens to be a given\r\n     * value.\r\n     * @param spender   Spender's address\r\n     * @param value     Allowance amount\r\n     * @return True if successful\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(_msgSender())\r\n        notBlacklisted(spender)\r\n        returns (bool)\r\n    {\r\n        LibERC20._approve(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens by spending allowance\r\n     * @param from  Payer's address\r\n     * @param to    Payee's address\r\n     * @param value Transfer amount\r\n     * @return True if successful\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(_msgSender())\r\n        notBlacklisted(from)\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        return LibERC20._transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from the caller\r\n     * @param to    Payee's address\r\n     * @param value Transfer amount\r\n     * @return True if successful\r\n     */\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        notBlacklisted(_msgSender())\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        LibERC20._transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev allows a user to burn some of its own tokens\r\n     * Validates that amount is less than or equal to the caller's account balance\r\n     * @param amount uint256 the amount of tokens to be burned\r\n     */\r\n    function _burn(uint256 amount) internal virtual {\r\n        address msgSender = _msgSender();\r\n        uint256 balance = appStorage.balances[msgSender];\r\n        require(amount > 0, \"BaseToken: burn amount not greater than 0\");\r\n        require(balance >= amount, \"BaseToken: burn amount exceeds balance\");\r\n\r\n        appStorage.totalSupply = appStorage.totalSupply.sub(amount);\r\n        appStorage.balances[msgSender] = balance.sub(amount);\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibECRecover.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2016-2019 zOS Global Limited\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title ECRecover\r\n * @notice A library that provides a safe ECDSA recovery function\r\n */\r\nlibrary LibECRecover {\r\n    /**\r\n     * @notice Recover signer's address from a signed message\r\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\r\n     * Modifications: Accept v, r, and s as separate arguments\r\n     * @param digest    Keccak-256 hash digest of the signed message\r\n     * @param v         v of the signature\r\n     * @param r         r of the signature\r\n     * @param s         s of the signature\r\n     * @return Signer address\r\n     */\r\n    function recover(\r\n        bytes32 digest,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECRecover: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECRecover: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(digest, v, r, s);\r\n        require(signer != address(0), \"ECRecover: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibEIP712.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title EIP712\r\n * @notice A library that provides EIP712 helper functions\r\n */\r\nlibrary LibEIP712 {\r\n    /**\r\n     * @notice Make EIP712 domain separator\r\n     * @param name      Contract name\r\n     * @param version   Contract version\r\n     * @return Domain separator\r\n     */\r\n    function makeDomainSeparator(string memory name, string memory version)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\r\n                    // = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n                    keccak256(bytes(name)),\r\n                    keccak256(bytes(version)),\r\n                    chainId,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Recover signer's address from a EIP712 signature\r\n     * @param domainSeparator   Domain separator\r\n     * @param v                 v of the signature\r\n     * @param r                 r of the signature\r\n     * @param s                 s of the signature\r\n     * @param typeHashAndData   Type hash concatenated with data\r\n     * @return Signer's address\r\n     */\r\n    function recover(\r\n        bytes32 domainSeparator,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes memory typeHashAndData\r\n    ) internal pure returns (address) {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, keccak256(typeHashAndData))\r\n        );\r\n        return LibECRecover.recover(digest, v, r, s);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC1363.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363.sol)\r\n\r\ninterface IERC1363 is IERC165, IERC20 {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\r\n     * 0x4bbee2df ===\r\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n     */\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\r\n     * 0xfb9ec8ce ===\r\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n     */\r\n\r\n    /**\r\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     */\r\n    function approveAndCall(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n     */\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC1363Receiver.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363Receiver.sol)\r\n\r\ninterface IERC1363Receiver {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\r\n     * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\r\n     */\r\n\r\n    /**\r\n     * @notice Handle the receipt of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\r\n     * transfer. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param from address The address which are token transferred from\r\n     * @param value uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onTransferReceived(\r\n        address operator,\r\n        address from,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC1363Spender.sol@v4.4.1\r\n\r\n//\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1363Spender.sol)\r\n\r\ninterface IERC1363Spender {\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\r\n     * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\r\n     */\r\n\r\n    /**\r\n     * @notice Handle the approval of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after an `approve`. This function MAY throw to revert and reject the\r\n     * approval. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param owner address The address which called `approveAndCall` function\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\r\n     *  unless throwing\r\n     */\r\n    function onApprovalReceived(\r\n        address owner,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File contracts/lib/LibERC1363.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title ECRecover\r\n * @notice A library that provides a safe ECDSA recovery function\r\n */\r\nlibrary LibERC1363 {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\r\n     * 0x4bbee2df ===\r\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\r\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\r\n     */\r\n    bytes4 private constant INTERFACE_TRANSFER_AND_CALL = 0x4bbee2df;\r\n\r\n    /*\r\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\r\n     * 0xfb9ec8ce ===\r\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\r\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\r\n     */\r\n    bytes4 private constant INTERFACE_APPROVE_AND_CALL = 0xfb9ec8ce;\r\n\r\n    function _supportsInterface(bytes4 interfaceId) internal pure returns (bool) {\r\n        return\r\n            interfaceId == INTERFACE_TRANSFER_AND_CALL ||\r\n            interfaceId == INTERFACE_APPROVE_AND_CALL ||\r\n            interfaceId == type(IERC1363).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function _transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        address msgSender = LibContext._msgSender();\r\n        LibERC20._transfer(msgSender, to, value);\r\n        require(\r\n            _checkAndCallTransfer(msgSender, to, value, data),\r\n            \"ERC1363: _checkAndCallTransfer reverts\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function _transferFromAndCall(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        LibERC20._transferFrom(from, to, value);\r\n        require(\r\n            _checkAndCallTransfer(from, to, value, data),\r\n            \"ERC1363: _checkAndCallTransfer reverts\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onTransferReceived` on a target address\r\n     *  The call is not executed if the target address is not a contract\r\n     * @param sender address Representing the previous owner of the given token value\r\n     * @param recipient address Target address that will receive the tokens\r\n     * @param amount uint256 The amount mount of tokens to be transferred\r\n     * @param data bytes Optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkAndCallTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        if (!recipient.isContract()) {\r\n            return false;\r\n        }\r\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(\r\n            LibContext._msgSender(),\r\n            sender,\r\n            amount,\r\n            data\r\n        );\r\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n     */\r\n    function _approveAndCall(\r\n        address spender,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        LibERC20._approve(LibContext._msgSender(), spender, value);\r\n        require(\r\n            _checkAndCallApprove(spender, value, data),\r\n            \"ERC1363: _checkAndCallApprove reverts\"\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\r\n     *  The call is not executed if the target address is not a contract\r\n     * @param spender address The address which will spend the funds\r\n     * @param amount uint256 The amount of tokens to be spent\r\n     * @param data bytes Optional data to send along with the call\r\n     * @return whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkAndCallApprove(\r\n        address spender,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        if (!spender.isContract()) {\r\n            return false;\r\n        }\r\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\r\n            LibContext._msgSender(),\r\n            amount,\r\n            data\r\n        );\r\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\r\n    }\r\n}\r\n\r\n// File contracts/common/ERC1363.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nabstract contract ERC1363 is IERC1363, Pausable, Blacklistable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return LibERC1363._supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from `msgSender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(address to, uint256 value)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._transferAndCall(to, value, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from `msgSender` to another address and then call `onTransferReceived` on receiver\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    )\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._transferAndCall(to, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(from)\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._transferFromAndCall(from, to, value, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `to`\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    )\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(from)\r\n        notBlacklisted(to)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._transferFromAndCall(from, to, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msgSender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     */\r\n    function approveAndCall(address spender, uint256 value)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(spender)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._approveAndCall(spender, value, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msgSender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * @param spender address The address which will spend the funds\r\n     * @param value uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n     */\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 value,\r\n        bytes memory data\r\n    )\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(LibContext._msgSender())\r\n        notBlacklisted(spender)\r\n        returns (bool)\r\n    {\r\n        return LibERC1363._approveAndCall(spender, value, data);\r\n    }\r\n}\r\n\r\n// File contracts/lib/LibGasAbstraction.sol\r\n\r\n//\r\n\r\n// keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\r\nbytes32 constant _TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\r\n// keccak256(\"ApproveWithAuthorization(address owner,address spender,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\r\nbytes32 constant _APPROVE_WITH_AUTHORIZATION_TYPEHASH = 0x808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c;\r\n// keccak256(\"IncreaseAllowanceWithAuthorization(address owner,address spender,uint256 increment,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\r\nbytes32 constant _INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0x424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a;\r\n// keccak256(\"DecreaseAllowanceWithAuthorization(address owner,address spender,uint256 decrement,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")\r\nbytes32 constant _DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0xb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8;\r\n// keccak256(\"CancelAuthorization(address authorizer,bytes32 nonce)\")\r\nbytes32 constant _CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\r\n// keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\nbytes32 constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n/**\r\n * @title Gas Abstraction\r\n * @notice Provide internal implementation for gas-abstracted transfers and\r\n * approvals\r\n * @dev Contracts that inherit from this must wrap these with publicly\r\n * accessible functions, optionally adding modifiers where necessary\r\n */\r\nlibrary LibGasAbstraction {\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n    event AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\r\n\r\n    /**\r\n     * @notice Verify a signed transfer authorization and execute if valid\r\n     * @param from          Payer's address (Authorizer)\r\n     * @param to            Payee's address\r\n     * @param value         Amount to be transferred\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function _transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\r\n            from,\r\n            to,\r\n            value,\r\n            validAfter,\r\n            validBefore,\r\n            nonce\r\n        );\r\n        require(\r\n            LibEIP712.recover(LibAppStorage.diamondStorage().domainSeparator, v, r, s, data) ==\r\n                from,\r\n            \"GasAbstraction: invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(from, nonce);\r\n        LibERC20._transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify a signed authorization for an increase in the allowance\r\n     * granted to the spender and execute if valid\r\n     * @param owner         Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param increment     Amount of increase in allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function _increaseAllowanceWithAuthorization(\r\n        address owner,\r\n        address spender,\r\n        uint256 increment,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\r\n            owner,\r\n            spender,\r\n            increment,\r\n            validAfter,\r\n            validBefore,\r\n            nonce\r\n        );\r\n        require(\r\n            LibEIP712.recover(LibAppStorage.diamondStorage().domainSeparator, v, r, s, data) ==\r\n                owner,\r\n            \"GasAbstraction: invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(owner, nonce);\r\n        LibERC20._increaseAllowance(owner, spender, increment);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify a signed authorization for a decrease in the allowance\r\n     * granted to the spender and execute if valid\r\n     * @param owner         Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param decrement     Amount of decrease in allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function _decreaseAllowanceWithAuthorization(\r\n        address owner,\r\n        address spender,\r\n        uint256 decrement,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\r\n            owner,\r\n            spender,\r\n            decrement,\r\n            validAfter,\r\n            validBefore,\r\n            nonce\r\n        );\r\n        require(\r\n            LibEIP712.recover(LibAppStorage.diamondStorage().domainSeparator, v, r, s, data) ==\r\n                owner,\r\n            \"GasAbstraction: invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(owner, nonce);\r\n        LibERC20._decreaseAllowance(owner, spender, decrement);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify a signed approval authorization and execute if valid\r\n     * @param owner         Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param value         Amount of allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function _approveWithAuthorization(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _APPROVE_WITH_AUTHORIZATION_TYPEHASH,\r\n            owner,\r\n            spender,\r\n            value,\r\n            validAfter,\r\n            validBefore,\r\n            nonce\r\n        );\r\n        require(\r\n            LibEIP712.recover(LibAppStorage.diamondStorage().domainSeparator, v, r, s, data) ==\r\n                owner,\r\n            \"GasAbstraction: invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(owner, nonce);\r\n        LibERC20._approve(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @notice Attempt to cancel an authorization\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function _cancelAuthorization(\r\n        address authorizer,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        _requireUnusedAuthorization(authorizer, nonce);\r\n\r\n        bytes memory data = abi.encode(_CANCEL_AUTHORIZATION_TYPEHASH, authorizer, nonce);\r\n        require(\r\n            LibEIP712.recover(LibAppStorage.diamondStorage().domainSeparator, v, r, s, data) ==\r\n                authorizer,\r\n            \"GasAbstraction: invalid signature\"\r\n        );\r\n\r\n        LibAppStorage.diamondStorage().authorizationStates[authorizer][nonce] = AuthorizationState\r\n            .Canceled;\r\n        emit AuthorizationCanceled(authorizer, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Check that an authorization is unused\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     */\r\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce) private view {\r\n        require(\r\n            LibAppStorage.diamondStorage().authorizationStates[authorizer][nonce] ==\r\n                AuthorizationState.Unused,\r\n            \"GasAbstraction: authorization is used or canceled\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Check that authorization is valid\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     */\r\n    function _requireValidAuthorization(\r\n        address authorizer,\r\n        bytes32 nonce,\r\n        uint256 validAfter,\r\n        uint256 validBefore\r\n    ) private view {\r\n        require(block.timestamp > validAfter, \"GasAbstraction: authorization is not yet valid\");\r\n        require(block.timestamp < validBefore, \"GasAbstraction: authorization is expired\");\r\n        _requireUnusedAuthorization(authorizer, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Mark an authorization as used\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     */\r\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce) private {\r\n        LibAppStorage.diamondStorage().authorizationStates[authorizer][nonce] = AuthorizationState\r\n            .Used;\r\n        emit AuthorizationUsed(authorizer, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify a signed approval permit and execute if valid\r\n     * @param owner     Token owner's address (Authorizer)\r\n     * @param spender   Spender's address\r\n     * @param value     Amount of allowance\r\n     * @param deadline  The time at which this expires (unix time)\r\n     * @param v         v of the signature\r\n     * @param r         r of the signature\r\n     * @param s         s of the signature\r\n     */\r\n    function _permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        require(deadline >= block.timestamp, \"Permit: permit is expired\");\r\n\r\n        AppStorage storage appStorage = LibAppStorage.diamondStorage();\r\n        bytes memory data = abi.encode(\r\n            _PERMIT_TYPEHASH,\r\n            owner,\r\n            spender,\r\n            value,\r\n            appStorage.nonces[owner]++,\r\n            deadline\r\n        );\r\n        require(\r\n            LibEIP712.recover(appStorage.domainSeparator, v, r, s, data) == owner,\r\n            \"Permit: invalid signature\"\r\n        );\r\n\r\n        LibERC20._approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File contracts/common/EIP712Domain.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title EIP712 Domain\r\n */\r\ncontract EIP712Domain {\r\n    /**\r\n     * @dev EIP712 Domain Separator\r\n     */\r\n    // solhint-disable-next-line\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n        return LibAppStorage.diamondStorage().domainSeparator;\r\n    }\r\n}\r\n\r\n// File contracts/common/GasAbstraction.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title Gas Abstraction\r\n * @notice Provide internal implementation for gas-abstracted transfers and\r\n * approvals\r\n * @dev Contracts that inherit from this must wrap these with publicly\r\n * accessible functions, optionally adding modifiers where necessary\r\n */\r\nabstract contract GasAbstraction is EIP712Domain {\r\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\r\n        _TRANSFER_WITH_AUTHORIZATION_TYPEHASH;\r\n    bytes32 public constant APPROVE_WITH_AUTHORIZATION_TYPEHASH =\r\n        _APPROVE_WITH_AUTHORIZATION_TYPEHASH;\r\n    bytes32 public constant INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH =\r\n        _INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH;\r\n    bytes32 public constant DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH =\r\n        _DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH;\r\n    bytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = _CANCEL_AUTHORIZATION_TYPEHASH;\r\n\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n    event AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\r\n\r\n    /**\r\n     * @notice Returns the state of an authorization\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     * @return Authorization state\r\n     */\r\n    function authorizationState(address authorizer, bytes32 nonce)\r\n        external\r\n        view\r\n        returns (AuthorizationState)\r\n    {\r\n        return LibAppStorage.diamondStorage().authorizationStates[authorizer][nonce];\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the allowance by a given increment\r\n     * @param spender   Spender's address\r\n     * @param increment Amount of increase in allowance\r\n     * @return True if successful\r\n     */\r\n    function increaseAllowance(address spender, uint256 increment) external returns (bool) {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(msg.sender);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibERC20._increaseAllowance(msg.sender, spender, increment);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease the allowance by a given decrement\r\n     * @param spender   Spender's address\r\n     * @param decrement Amount of decrease in allowance\r\n     * @return True if successful\r\n     */\r\n    function decreaseAllowance(address spender, uint256 decrement) external returns (bool) {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(msg.sender);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibERC20._decreaseAllowance(msg.sender, spender, decrement);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute a transfer with a signed authorization\r\n     * @param from          Payer's address (Authorizer)\r\n     * @param to            Payee's address\r\n     * @param value         Amount to be transferred\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(from);\r\n        LibBlacklistable._requireNotBlacklisted(to);\r\n\r\n        LibGasAbstraction._transferWithAuthorization(\r\n            from,\r\n            to,\r\n            value,\r\n            validAfter,\r\n            validBefore,\r\n            nonce,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update allowance with a signed authorization\r\n     * @param tokenOwner    Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param value         Amount of allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function approveWithAuthorization(\r\n        address tokenOwner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(tokenOwner);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibGasAbstraction._approveWithAuthorization(\r\n            tokenOwner,\r\n            spender,\r\n            value,\r\n            validAfter,\r\n            validBefore,\r\n            nonce,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Increase allowance with a signed authorization\r\n     * @param tokenOwner    Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param increment     Amount of increase in allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function increaseAllowanceWithAuthorization(\r\n        address tokenOwner,\r\n        address spender,\r\n        uint256 increment,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(tokenOwner);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibGasAbstraction._increaseAllowanceWithAuthorization(\r\n            tokenOwner,\r\n            spender,\r\n            increment,\r\n            validAfter,\r\n            validBefore,\r\n            nonce,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease allowance with a signed authorization\r\n     * @param tokenOwner    Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param decrement     Amount of decrease in allowance\r\n     * @param validAfter    The time after which this is valid (unix time)\r\n     * @param validBefore   The time before which this is valid (unix time)\r\n     * @param nonce         Unique nonce\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function decreaseAllowanceWithAuthorization(\r\n        address tokenOwner,\r\n        address spender,\r\n        uint256 decrement,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(tokenOwner);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibGasAbstraction._decreaseAllowanceWithAuthorization(\r\n            tokenOwner,\r\n            spender,\r\n            decrement,\r\n            validAfter,\r\n            validBefore,\r\n            nonce,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Attempt to cancel an authorization\r\n     * @dev Works only if the authorization is not yet used.\r\n     * @param authorizer    Authorizer's address\r\n     * @param nonce         Nonce of the authorization\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function cancelAuthorization(\r\n        address authorizer,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n\r\n        LibGasAbstraction._cancelAuthorization(authorizer, nonce, v, r, s);\r\n    }\r\n}\r\n\r\n// File contracts/common/Permit.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2018-2020 CENTRE SECZ\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title Permit\r\n * @notice An alternative to approveWithAuthorization, provided for\r\n * compatibility with the draft EIP2612 proposed by Uniswap.\r\n * @dev Differences:\r\n * - Uses sequential nonce, which restricts transaction submission to one at a\r\n *   time, or else it will revert\r\n * - Has deadline (= validBefore - 1) but does not have validAfter\r\n * - Doesn't have a way to change allowance atomically to prevent ERC20 multiple\r\n *   withdrawal attacks\r\n */\r\nabstract contract Permit is EIP712Domain {\r\n    bytes32 public constant PERMIT_TYPEHASH = _PERMIT_TYPEHASH;\r\n\r\n    /**\r\n     * @notice Nonces for permit (shared with meta transaction)\r\n     * @dev Nonces is shared for permits and meta transaction nonces.  The nonces and getNonce\r\n     * methods both return the same nonce sequence, but are both kept for compatability\r\n     * @param owner Token owner's address (Authorizer)\r\n     * @return Next nonce\r\n     */\r\n    function nonces(address owner) external view returns (uint256) {\r\n        return LibAppStorage.diamondStorage().nonces[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Update allowance with a signed permit\r\n     * @param tokenOwner    Token owner's address (Authorizer)\r\n     * @param spender       Spender's address\r\n     * @param value         Amount of allowance\r\n     * @param deadline      Expiration time, seconds since the epoch\r\n     * @param v             v of the signature\r\n     * @param r             r of the signature\r\n     * @param s             s of the signature\r\n     */\r\n    function permit(\r\n        address tokenOwner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        LibPausable._requireNotPaused();\r\n        LibBlacklistable._requireNotBlacklisted(tokenOwner);\r\n        LibBlacklistable._requireNotBlacklisted(spender);\r\n\r\n        LibGasAbstraction._permit(tokenOwner, spender, value, deadline, v, r, s);\r\n    }\r\n}\r\n\r\n// File contracts/tokens/HeartToken.sol\r\n\r\n/**\r\n *\r\n *\r\n * Copyright (c) 2022 YellowHeart\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\ncontract HeartToken is BaseToken, GasAbstraction, Permit, ERC1363 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MAX_SUPPLY = 692000000 * 1e18;\r\n\r\n    function initialize(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        address newPauser,\r\n        address newBlacklister,\r\n        address newOwner,\r\n        address tokenReceiver\r\n    ) external {\r\n        require(!appStorage.initialized, \"HeartToken: contract is already initialized\");\r\n        require(newPauser != address(0), \"HeartToken: new pauser is the zero address\");\r\n        require(newBlacklister != address(0), \"HeartToken: new blacklister is the zero address\");\r\n        require(newOwner != address(0), \"HeartToken: new owner is the zero address\");\r\n        require(tokenReceiver != address(0), \"HeartToken: token receiver is the zero address\");\r\n\r\n        appStorage.name = tokenName;\r\n        appStorage.symbol = tokenSymbol;\r\n        appStorage.decimals = 18;\r\n        // appStorage.masterMinter = newMasterMinter;\r\n        appStorage.pauser = newPauser;\r\n        appStorage.blacklister = newBlacklister;\r\n        setOwner(newOwner);\r\n\r\n        appStorage.domainSeparator = LibEIP712.makeDomainSeparator(tokenName, \"1\");\r\n\r\n        _mint(tokenReceiver, MAX_SUPPLY);\r\n        require(\r\n            appStorage.totalSupply == MAX_SUPPLY,\r\n            \"HeartToken: totalSupply is not expected value\"\r\n        );\r\n        require(\r\n            appStorage.balances[tokenReceiver] == MAX_SUPPLY,\r\n            \"HeartToken: tokenReceiver balance is not expected value\"\r\n        );\r\n\r\n        appStorage.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(BaseToken, ERC1363)\r\n        returns (bool)\r\n    {\r\n        return ERC1363.supportsInterface(interfaceId) || BaseToken.supportsInterface(interfaceId);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMasterMinter\",\"type\":\"address\"}],\"name\":\"MasterMinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"approveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"enum AuthorizationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"decreaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"increaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"updateRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "HeartToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b1fd0b3a27d277199ef42f1ba3645dde2da668627f7dcc5b9e47dbc2b1fb8590"}]}