{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPIFConfig.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPIFConfig {\r\n    function getRevenueAddress() external view returns (address);\r\n    function getMrNftAddress() external view returns (address);\r\n    function getRoyalityFeeRate() external view returns (uint256);\r\n    function getMinDuration() external view returns (uint256);\r\n    function getMaxDuration() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/PIFConfig.sol\r\n\r\n\r\n\r\n//** PIF Config Contract */\r\n//** Author ishanshahzad :  Config Contract 2022.6 */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract PIFConfig is Ownable, IPIFConfig {\r\n    uint256 public constant FEE_RATE_BASE = 10000;\r\n\r\n    uint256 public constant MAXIMUM_ROYALTIES_FEE_RATE = 5000;\r\n\r\n    // The royalties fee rate\r\n    uint256 public royaltiesFeeRate = 500;\r\n\r\n    // The PIFDeFI NFT contract address\r\n    address public mrNftContractAddress;\r\n\r\n    // the Revenue address\r\n    address public revenueAddress;\r\n    // The minimum duration\r\n    uint256 public minDuration = 1 days;\r\n\r\n    // The maximum duration\r\n    uint256 public maxDuration = 7 days;\r\n\r\n    event UpdatedRoyaltiesFeeRate(uint256 rate);\r\n    event UpdatedMrNftContractAddress(address addr);\r\n    event UpdatedRevenueAddress(address addr);\r\n    event UpdatedMinDuration(uint256 duration);\r\n    event UpdatedMaxDuration(uint256 duration);\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _revenueAddress\r\n    ) {\r\n        require(_owner != address(0), \"Invalid owner address\");\r\n        _transferOwnership(_owner);\r\n\r\n        require(_revenueAddress != address(0), \"Invalid revenue address\");\r\n        revenueAddress = _revenueAddress;\r\n    }\r\n\r\n    function setRoyaltiesFeeRate(uint256 rate) external onlyOwner {\r\n        require(rate <= MAXIMUM_ROYALTIES_FEE_RATE, \"Invalid royalities fee rate\");\r\n        royaltiesFeeRate = rate;\r\n        emit UpdatedRoyaltiesFeeRate(rate);\r\n    }\r\n\r\n    function setMrNftContractAddress(address _address) external onlyOwner {\r\n        mrNftContractAddress = _address;\r\n        emit UpdatedMrNftContractAddress(_address);\r\n    }\r\n\r\n    function setRevenueAddress(address _address) external onlyOwner {\r\n        require(_address != address(0), \"Invalid revenue address\");\r\n        revenueAddress = _address;\r\n        emit UpdatedRevenueAddress(_address);\r\n    }\r\n\r\n    function setMinDuration(uint256 _duration) external onlyOwner {\r\n        require(_duration > 0 && _duration < maxDuration, \"Invalid minimum duration\");\r\n        minDuration = _duration;\r\n        emit UpdatedMinDuration(_duration);\r\n    }\r\n\r\n    function setMaxDuration(uint256 _duration) external onlyOwner {\r\n        require(_duration > minDuration, \"Invalid maximum duration\");\r\n\r\n        maxDuration = _duration;\r\n        emit UpdatedMaxDuration(_duration);\r\n    }\r\n\r\n\r\n    function getRevenueAddress() external view override returns (address) {\r\n        return revenueAddress;\r\n    }\r\n\r\n    function getMrNftAddress() external view override returns (address) {\r\n        return mrNftContractAddress;\r\n    }\r\n\r\n    function getRoyalityFeeRate() external view override returns (uint256) {\r\n        return royaltiesFeeRate;\r\n    }\r\n\r\n\r\n    function getMinDuration() external view override returns (uint256) {\r\n        return minDuration;\r\n    }\r\n\r\n    function getMaxDuration() external view override returns (uint256) {\r\n        return maxDuration;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdatedMrNftContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UpdatedRevenueAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdatedRoyaltiesFeeRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_RATE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_ROYALTIES_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMrNftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyalityFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mrNftContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setMaxDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setMinDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMrNftContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PIFConfig", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000452c7e22898e116a6d73865dbf47d6fe3519bb0b000000000000000000000000452c7e22898e116a6d73865dbf47d6fe3519bb0b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5f23060a1f09ac22b8ae6ba29c54ab0f730527951e683d40ee4acd6dd428fb6"}]}