{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/dao/SmartWalletWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/// @notice Interface of the `SmartWalletChecker` contracts of the protocol\\ninterface SmartWalletChecker {\\n\\tfunction check(address) external view returns (bool);\\n}\\n\\n/// @title SmartWalletWhitelist\\n/// @author Curve Finance and adapted by Stake DAO Core Team (https://etherscan.io/address/0xca719728ef172d0961768581fdf35cb116e0b7a4#code)\\n/// @notice Provides functions to check whether a wallet has been verified or not to own veSDT\\ncontract SmartWalletWhitelist {\\n\\t/// @notice Mapping between addresses and whether they are whitelisted or not\\n\\tmapping(address => bool) public wallets;\\n\\t/// @notice Admin address of the contract\\n\\taddress public admin;\\n\\t/// @notice Future admin address of the contract\\n\\t//solhint-disable-next-line\\n\\taddress public future_admin;\\n\\t/// @notice Contract which works as this contract and that can whitelist addresses\\n\\taddress public checker;\\n\\t/// @notice Future address to become checker\\n\\t//solhint-disable-next-line\\n\\taddress public future_checker;\\n\\n\\tevent ApproveWallet(address indexed _wallet);\\n\\tevent RevokeWallet(address indexed _wallet);\\n\\n\\t/// @notice Constructor of the contract\\n\\t/// @param _admin Admin address of the contract\\n\\tconstructor(address _admin) {\\n\\t\\trequire(_admin != address(0), \\\"0\\\");\\n\\t\\tadmin = _admin;\\n\\t}\\n\\n\\t/// @notice Commits to change the admin\\n\\t/// @param _admin New admin of the contract\\n\\tfunction commitAdmin(address _admin) external {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\tfuture_admin = _admin;\\n\\t}\\n\\n\\t/// @notice Changes the admin to the admin that has been committed\\n\\tfunction applyAdmin() external {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\trequire(future_admin != address(0), \\\"admin not set\\\");\\n\\t\\tadmin = future_admin;\\n\\t}\\n\\n\\t/// @notice Commits to change the checker address\\n\\t/// @param _checker New checker address\\n\\t/// @dev This address can be the zero address in which case there will be no checker\\n\\tfunction commitSetChecker(address _checker) external {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\tfuture_checker = _checker;\\n\\t}\\n\\n\\t/// @notice Applies the checker previously committed\\n\\tfunction applySetChecker() external {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\tchecker = future_checker;\\n\\t}\\n\\n\\t/// @notice Approves a wallet\\n\\t/// @param _wallet Wallet to approve\\n\\tfunction approveWallet(address _wallet) public {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\twallets[_wallet] = true;\\n\\n\\t\\temit ApproveWallet(_wallet);\\n\\t}\\n\\n\\t/// @notice Revokes a wallet\\n\\t/// @param _wallet Wallet to revoke\\n\\tfunction revokeWallet(address _wallet) external {\\n\\t\\trequire(msg.sender == admin, \\\"!admin\\\");\\n\\t\\twallets[_wallet] = false;\\n\\n\\t\\temit RevokeWallet(_wallet);\\n\\t}\\n\\n\\t/// @notice Checks whether a wallet is whitelisted\\n\\t/// @param _wallet Wallet address to check\\n\\t/// @dev This function can also rely on another SmartWalletChecker (a `checker` to see whether the wallet is whitelisted or not)\\n\\tfunction check(address _wallet) external view returns (bool) {\\n\\t\\tbool _check = wallets[_wallet];\\n\\t\\tif (_check) {\\n\\t\\t\\treturn _check;\\n\\t\\t} else {\\n\\t\\t\\tif (checker != address(0)) {\\n\\t\\t\\t\\treturn SmartWalletChecker(checker).check(_wallet);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"ApproveWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"RevokeWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applySetChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"approveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"commitAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checker\",\"type\":\"address\"}],\"name\":\"commitSetChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"revokeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartWalletWhitelist", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b36a0671b3d49587236d7833b01e79798175875f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}