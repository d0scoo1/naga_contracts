{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./UAV/Chainlink/AggregatorValidatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface AggregatorValidatorInterface {\\n\\tfunction validate(uint256 previousRoundId,\\n\\t\\t\\tint256 previousAnswer,\\n\\t\\t\\tuint256 currentRoundId,\\n\\t\\t\\tint256 currentAnswer) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"./UAV/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\n/**\\n * @notice A contract with helpers for safe contract ownership.\\n */\\ncontract Ownable {\\n\\n    address private ownerAddr;\\n    address private pendingOwnerAddr;\\n\\n    event OwnershipTransferRequested(address indexed from, address indexed to);\\n    event OwnershipTransferred(address indexed from, address indexed to);\\n\\n    constructor() public {\\n        ownerAddr = msg.sender;\\n    }\\n\\n    /**\\n    * @notice Allows an owner to begin transferring ownership to a new address,\\n    * pending.\\n    */\\n    function transferOwnership(address to) external onlyOwner() {\\n        require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n        pendingOwnerAddr = to;\\n\\n        emit OwnershipTransferRequested(ownerAddr, to);\\n    }\\n\\n    /**\\n    * @notice Allows an ownership transfer to be completed by the recipient.\\n    */\\n    function acceptOwnership() external {\\n        require(msg.sender == pendingOwnerAddr, \\\"Must be proposed owner\\\");\\n\\n        address oldOwner = ownerAddr;\\n        ownerAddr = msg.sender;\\n        pendingOwnerAddr = address(0);\\n\\n        emit OwnershipTransferred(oldOwner, msg.sender);\\n    }\\n\\n    /**\\n    * @notice Get the current owner\\n    */\\n    function owner() public view returns (address) {\\n        return ownerAddr;\\n    }\\n\\n    /**\\n    * @notice Reverts if called by anyone other than the contract owner.\\n    */\\n    modifier onlyOwner() {\\n        require(msg.sender == ownerAddr, \\\"Only callable by owner\\\");\\n        _;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"./UAV/Uniswap/UniswapConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\n    enum PriceSource {\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\n        REPORTER   /// implies the price is set by the reporter\\n    }\\n\\n    /// @dev Describe how the USD price should be determined for an asset.\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        address reporter;\\n        uint256 reporterMultiplier;\\n        bool isUniswapReversed;\\n    }\\n\\n    /// @notice The max number of tokens this contract is hardcoded to support\\n    /// @dev Do not change this variable without updating all the fields throughout the contract.\\n    uint public constant maxTokens = 25;\\n\\n    /// @notice The number of tokens this contract actually supports\\n    uint public immutable numTokens;\\n\\n    address internal immutable cToken00;\\n    address internal immutable cToken01;\\n    address internal immutable cToken02;\\n    address internal immutable cToken03;\\n    address internal immutable cToken04;\\n    address internal immutable cToken05;\\n    address internal immutable cToken06;\\n    address internal immutable cToken07;\\n    address internal immutable cToken08;\\n    address internal immutable cToken09;\\n    address internal immutable cToken10;\\n    address internal immutable cToken11;\\n    address internal immutable cToken12;\\n    address internal immutable cToken13;\\n    address internal immutable cToken14;\\n    address internal immutable cToken15;\\n    address internal immutable cToken16;\\n    address internal immutable cToken17;\\n    address internal immutable cToken18;\\n    address internal immutable cToken19;\\n    address internal immutable cToken20;\\n    address internal immutable cToken21;\\n    address internal immutable cToken22;\\n    address internal immutable cToken23;\\n    address internal immutable cToken24;\\n\\n    address internal immutable underlying00;\\n    address internal immutable underlying01;\\n    address internal immutable underlying02;\\n    address internal immutable underlying03;\\n    address internal immutable underlying04;\\n    address internal immutable underlying05;\\n    address internal immutable underlying06;\\n    address internal immutable underlying07;\\n    address internal immutable underlying08;\\n    address internal immutable underlying09;\\n    address internal immutable underlying10;\\n    address internal immutable underlying11;\\n    address internal immutable underlying12;\\n    address internal immutable underlying13;\\n    address internal immutable underlying14;\\n    address internal immutable underlying15;\\n    address internal immutable underlying16;\\n    address internal immutable underlying17;\\n    address internal immutable underlying18;\\n    address internal immutable underlying19;\\n    address internal immutable underlying20;\\n    address internal immutable underlying21;\\n    address internal immutable underlying22;\\n    address internal immutable underlying23;\\n    address internal immutable underlying24;\\n\\n    bytes32 internal immutable symbolHash00;\\n    bytes32 internal immutable symbolHash01;\\n    bytes32 internal immutable symbolHash02;\\n    bytes32 internal immutable symbolHash03;\\n    bytes32 internal immutable symbolHash04;\\n    bytes32 internal immutable symbolHash05;\\n    bytes32 internal immutable symbolHash06;\\n    bytes32 internal immutable symbolHash07;\\n    bytes32 internal immutable symbolHash08;\\n    bytes32 internal immutable symbolHash09;\\n    bytes32 internal immutable symbolHash10;\\n    bytes32 internal immutable symbolHash11;\\n    bytes32 internal immutable symbolHash12;\\n    bytes32 internal immutable symbolHash13;\\n    bytes32 internal immutable symbolHash14;\\n    bytes32 internal immutable symbolHash15;\\n    bytes32 internal immutable symbolHash16;\\n    bytes32 internal immutable symbolHash17;\\n    bytes32 internal immutable symbolHash18;\\n    bytes32 internal immutable symbolHash19;\\n    bytes32 internal immutable symbolHash20;\\n    bytes32 internal immutable symbolHash21;\\n    bytes32 internal immutable symbolHash22;\\n    bytes32 internal immutable symbolHash23;\\n    bytes32 internal immutable symbolHash24;\\n\\n    uint256 internal immutable baseUnit00;\\n    uint256 internal immutable baseUnit01;\\n    uint256 internal immutable baseUnit02;\\n    uint256 internal immutable baseUnit03;\\n    uint256 internal immutable baseUnit04;\\n    uint256 internal immutable baseUnit05;\\n    uint256 internal immutable baseUnit06;\\n    uint256 internal immutable baseUnit07;\\n    uint256 internal immutable baseUnit08;\\n    uint256 internal immutable baseUnit09;\\n    uint256 internal immutable baseUnit10;\\n    uint256 internal immutable baseUnit11;\\n    uint256 internal immutable baseUnit12;\\n    uint256 internal immutable baseUnit13;\\n    uint256 internal immutable baseUnit14;\\n    uint256 internal immutable baseUnit15;\\n    uint256 internal immutable baseUnit16;\\n    uint256 internal immutable baseUnit17;\\n    uint256 internal immutable baseUnit18;\\n    uint256 internal immutable baseUnit19;\\n    uint256 internal immutable baseUnit20;\\n    uint256 internal immutable baseUnit21;\\n    uint256 internal immutable baseUnit22;\\n    uint256 internal immutable baseUnit23;\\n    uint256 internal immutable baseUnit24;\\n\\n    PriceSource internal immutable priceSource00;\\n    PriceSource internal immutable priceSource01;\\n    PriceSource internal immutable priceSource02;\\n    PriceSource internal immutable priceSource03;\\n    PriceSource internal immutable priceSource04;\\n    PriceSource internal immutable priceSource05;\\n    PriceSource internal immutable priceSource06;\\n    PriceSource internal immutable priceSource07;\\n    PriceSource internal immutable priceSource08;\\n    PriceSource internal immutable priceSource09;\\n    PriceSource internal immutable priceSource10;\\n    PriceSource internal immutable priceSource11;\\n    PriceSource internal immutable priceSource12;\\n    PriceSource internal immutable priceSource13;\\n    PriceSource internal immutable priceSource14;\\n    PriceSource internal immutable priceSource15;\\n    PriceSource internal immutable priceSource16;\\n    PriceSource internal immutable priceSource17;\\n    PriceSource internal immutable priceSource18;\\n    PriceSource internal immutable priceSource19;\\n    PriceSource internal immutable priceSource20;\\n    PriceSource internal immutable priceSource21;\\n    PriceSource internal immutable priceSource22;\\n    PriceSource internal immutable priceSource23;\\n    PriceSource internal immutable priceSource24;\\n\\n    uint256 internal immutable fixedPrice00;\\n    uint256 internal immutable fixedPrice01;\\n    uint256 internal immutable fixedPrice02;\\n    uint256 internal immutable fixedPrice03;\\n    uint256 internal immutable fixedPrice04;\\n    uint256 internal immutable fixedPrice05;\\n    uint256 internal immutable fixedPrice06;\\n    uint256 internal immutable fixedPrice07;\\n    uint256 internal immutable fixedPrice08;\\n    uint256 internal immutable fixedPrice09;\\n    uint256 internal immutable fixedPrice10;\\n    uint256 internal immutable fixedPrice11;\\n    uint256 internal immutable fixedPrice12;\\n    uint256 internal immutable fixedPrice13;\\n    uint256 internal immutable fixedPrice14;\\n    uint256 internal immutable fixedPrice15;\\n    uint256 internal immutable fixedPrice16;\\n    uint256 internal immutable fixedPrice17;\\n    uint256 internal immutable fixedPrice18;\\n    uint256 internal immutable fixedPrice19;\\n    uint256 internal immutable fixedPrice20;\\n    uint256 internal immutable fixedPrice21;\\n    uint256 internal immutable fixedPrice22;\\n    uint256 internal immutable fixedPrice23;\\n    uint256 internal immutable fixedPrice24;\\n\\n    address internal immutable uniswapMarket00;\\n    address internal immutable uniswapMarket01;\\n    address internal immutable uniswapMarket02;\\n    address internal immutable uniswapMarket03;\\n    address internal immutable uniswapMarket04;\\n    address internal immutable uniswapMarket05;\\n    address internal immutable uniswapMarket06;\\n    address internal immutable uniswapMarket07;\\n    address internal immutable uniswapMarket08;\\n    address internal immutable uniswapMarket09;\\n    address internal immutable uniswapMarket10;\\n    address internal immutable uniswapMarket11;\\n    address internal immutable uniswapMarket12;\\n    address internal immutable uniswapMarket13;\\n    address internal immutable uniswapMarket14;\\n    address internal immutable uniswapMarket15;\\n    address internal immutable uniswapMarket16;\\n    address internal immutable uniswapMarket17;\\n    address internal immutable uniswapMarket18;\\n    address internal immutable uniswapMarket19;\\n    address internal immutable uniswapMarket20;\\n    address internal immutable uniswapMarket21;\\n    address internal immutable uniswapMarket22;\\n    address internal immutable uniswapMarket23;\\n    address internal immutable uniswapMarket24;\\n\\n    address internal immutable reporter00;\\n    address internal immutable reporter01;\\n    address internal immutable reporter02;\\n    address internal immutable reporter03;\\n    address internal immutable reporter04;\\n    address internal immutable reporter05;\\n    address internal immutable reporter06;\\n    address internal immutable reporter07;\\n    address internal immutable reporter08;\\n    address internal immutable reporter09;\\n    address internal immutable reporter10;\\n    address internal immutable reporter11;\\n    address internal immutable reporter12;\\n    address internal immutable reporter13;\\n    address internal immutable reporter14;\\n    address internal immutable reporter15;\\n    address internal immutable reporter16;\\n    address internal immutable reporter17;\\n    address internal immutable reporter18;\\n    address internal immutable reporter19;\\n    address internal immutable reporter20;\\n    address internal immutable reporter21;\\n    address internal immutable reporter22;\\n    address internal immutable reporter23;\\n    address internal immutable reporter24;\\n\\n    uint256 internal immutable reporterMultiplier00;\\n    uint256 internal immutable reporterMultiplier01;\\n    uint256 internal immutable reporterMultiplier02;\\n    uint256 internal immutable reporterMultiplier03;\\n    uint256 internal immutable reporterMultiplier04;\\n    uint256 internal immutable reporterMultiplier05;\\n    uint256 internal immutable reporterMultiplier06;\\n    uint256 internal immutable reporterMultiplier07;\\n    uint256 internal immutable reporterMultiplier08;\\n    uint256 internal immutable reporterMultiplier09;\\n    uint256 internal immutable reporterMultiplier10;\\n    uint256 internal immutable reporterMultiplier11;\\n    uint256 internal immutable reporterMultiplier12;\\n    uint256 internal immutable reporterMultiplier13;\\n    uint256 internal immutable reporterMultiplier14;\\n    uint256 internal immutable reporterMultiplier15;\\n    uint256 internal immutable reporterMultiplier16;\\n    uint256 internal immutable reporterMultiplier17;\\n    uint256 internal immutable reporterMultiplier18;\\n    uint256 internal immutable reporterMultiplier19;\\n    uint256 internal immutable reporterMultiplier20;\\n    uint256 internal immutable reporterMultiplier21;\\n    uint256 internal immutable reporterMultiplier22;\\n    uint256 internal immutable reporterMultiplier23;\\n    uint256 internal immutable reporterMultiplier24;\\n\\n    bool internal immutable isUniswapReversed00;\\n    bool internal immutable isUniswapReversed01;\\n    bool internal immutable isUniswapReversed02;\\n    bool internal immutable isUniswapReversed03;\\n    bool internal immutable isUniswapReversed04;\\n    bool internal immutable isUniswapReversed05;\\n    bool internal immutable isUniswapReversed06;\\n    bool internal immutable isUniswapReversed07;\\n    bool internal immutable isUniswapReversed08;\\n    bool internal immutable isUniswapReversed09;\\n    bool internal immutable isUniswapReversed10;\\n    bool internal immutable isUniswapReversed11;\\n    bool internal immutable isUniswapReversed12;\\n    bool internal immutable isUniswapReversed13;\\n    bool internal immutable isUniswapReversed14;\\n    bool internal immutable isUniswapReversed15;\\n    bool internal immutable isUniswapReversed16;\\n    bool internal immutable isUniswapReversed17;\\n    bool internal immutable isUniswapReversed18;\\n    bool internal immutable isUniswapReversed19;\\n    bool internal immutable isUniswapReversed20;\\n    bool internal immutable isUniswapReversed21;\\n    bool internal immutable isUniswapReversed22;\\n    bool internal immutable isUniswapReversed23;\\n    bool internal immutable isUniswapReversed24;\\n\\n    /**\\n     * @notice Construct an immutable store of configs into the contract data\\n     * @param configs The configs for the supported assets\\n     */\\n    constructor(TokenConfig[] memory configs) public {\\n        require(configs.length <= maxTokens, \\\"too many configs\\\");\\n        numTokens = configs.length;\\n\\n        cToken00 = get(configs, 0).cToken;\\n        cToken01 = get(configs, 1).cToken;\\n        cToken02 = get(configs, 2).cToken;\\n        cToken03 = get(configs, 3).cToken;\\n        cToken04 = get(configs, 4).cToken;\\n        cToken05 = get(configs, 5).cToken;\\n        cToken06 = get(configs, 6).cToken;\\n        cToken07 = get(configs, 7).cToken;\\n        cToken08 = get(configs, 8).cToken;\\n        cToken09 = get(configs, 9).cToken;\\n        cToken10 = get(configs, 10).cToken;\\n        cToken11 = get(configs, 11).cToken;\\n        cToken12 = get(configs, 12).cToken;\\n        cToken13 = get(configs, 13).cToken;\\n        cToken14 = get(configs, 14).cToken;\\n        cToken15 = get(configs, 15).cToken;\\n        cToken16 = get(configs, 16).cToken;\\n        cToken17 = get(configs, 17).cToken;\\n        cToken18 = get(configs, 18).cToken;\\n        cToken19 = get(configs, 19).cToken;\\n        cToken20 = get(configs, 20).cToken;\\n        cToken21 = get(configs, 21).cToken;\\n        cToken22 = get(configs, 22).cToken;\\n        cToken23 = get(configs, 23).cToken;\\n        cToken24 = get(configs, 24).cToken;\\n\\n        underlying00 = get(configs, 0).underlying;\\n        underlying01 = get(configs, 1).underlying;\\n        underlying02 = get(configs, 2).underlying;\\n        underlying03 = get(configs, 3).underlying;\\n        underlying04 = get(configs, 4).underlying;\\n        underlying05 = get(configs, 5).underlying;\\n        underlying06 = get(configs, 6).underlying;\\n        underlying07 = get(configs, 7).underlying;\\n        underlying08 = get(configs, 8).underlying;\\n        underlying09 = get(configs, 9).underlying;\\n        underlying10 = get(configs, 10).underlying;\\n        underlying11 = get(configs, 11).underlying;\\n        underlying12 = get(configs, 12).underlying;\\n        underlying13 = get(configs, 13).underlying;\\n        underlying14 = get(configs, 14).underlying;\\n        underlying15 = get(configs, 15).underlying;\\n        underlying16 = get(configs, 16).underlying;\\n        underlying17 = get(configs, 17).underlying;\\n        underlying18 = get(configs, 18).underlying;\\n        underlying19 = get(configs, 19).underlying;\\n        underlying20 = get(configs, 20).underlying;\\n        underlying21 = get(configs, 21).underlying;\\n        underlying22 = get(configs, 22).underlying;\\n        underlying23 = get(configs, 23).underlying;\\n        underlying24 = get(configs, 24).underlying;\\n\\n        symbolHash00 = get(configs, 0).symbolHash;\\n        symbolHash01 = get(configs, 1).symbolHash;\\n        symbolHash02 = get(configs, 2).symbolHash;\\n        symbolHash03 = get(configs, 3).symbolHash;\\n        symbolHash04 = get(configs, 4).symbolHash;\\n        symbolHash05 = get(configs, 5).symbolHash;\\n        symbolHash06 = get(configs, 6).symbolHash;\\n        symbolHash07 = get(configs, 7).symbolHash;\\n        symbolHash08 = get(configs, 8).symbolHash;\\n        symbolHash09 = get(configs, 9).symbolHash;\\n        symbolHash10 = get(configs, 10).symbolHash;\\n        symbolHash11 = get(configs, 11).symbolHash;\\n        symbolHash12 = get(configs, 12).symbolHash;\\n        symbolHash13 = get(configs, 13).symbolHash;\\n        symbolHash14 = get(configs, 14).symbolHash;\\n        symbolHash15 = get(configs, 15).symbolHash;\\n        symbolHash16 = get(configs, 16).symbolHash;\\n        symbolHash17 = get(configs, 17).symbolHash;\\n        symbolHash18 = get(configs, 18).symbolHash;\\n        symbolHash19 = get(configs, 19).symbolHash;\\n        symbolHash20 = get(configs, 20).symbolHash;\\n        symbolHash21 = get(configs, 21).symbolHash;\\n        symbolHash22 = get(configs, 22).symbolHash;\\n        symbolHash23 = get(configs, 23).symbolHash;\\n        symbolHash24 = get(configs, 24).symbolHash;\\n\\n        baseUnit00 = get(configs, 0).baseUnit;\\n        baseUnit01 = get(configs, 1).baseUnit;\\n        baseUnit02 = get(configs, 2).baseUnit;\\n        baseUnit03 = get(configs, 3).baseUnit;\\n        baseUnit04 = get(configs, 4).baseUnit;\\n        baseUnit05 = get(configs, 5).baseUnit;\\n        baseUnit06 = get(configs, 6).baseUnit;\\n        baseUnit07 = get(configs, 7).baseUnit;\\n        baseUnit08 = get(configs, 8).baseUnit;\\n        baseUnit09 = get(configs, 9).baseUnit;\\n        baseUnit10 = get(configs, 10).baseUnit;\\n        baseUnit11 = get(configs, 11).baseUnit;\\n        baseUnit12 = get(configs, 12).baseUnit;\\n        baseUnit13 = get(configs, 13).baseUnit;\\n        baseUnit14 = get(configs, 14).baseUnit;\\n        baseUnit15 = get(configs, 15).baseUnit;\\n        baseUnit16 = get(configs, 16).baseUnit;\\n        baseUnit17 = get(configs, 17).baseUnit;\\n        baseUnit18 = get(configs, 18).baseUnit;\\n        baseUnit19 = get(configs, 19).baseUnit;\\n        baseUnit20 = get(configs, 20).baseUnit;\\n        baseUnit21 = get(configs, 21).baseUnit;\\n        baseUnit22 = get(configs, 22).baseUnit;\\n        baseUnit23 = get(configs, 23).baseUnit;\\n        baseUnit24 = get(configs, 24).baseUnit;\\n\\n        priceSource00 = get(configs, 0).priceSource;\\n        priceSource01 = get(configs, 1).priceSource;\\n        priceSource02 = get(configs, 2).priceSource;\\n        priceSource03 = get(configs, 3).priceSource;\\n        priceSource04 = get(configs, 4).priceSource;\\n        priceSource05 = get(configs, 5).priceSource;\\n        priceSource06 = get(configs, 6).priceSource;\\n        priceSource07 = get(configs, 7).priceSource;\\n        priceSource08 = get(configs, 8).priceSource;\\n        priceSource09 = get(configs, 9).priceSource;\\n        priceSource10 = get(configs, 10).priceSource;\\n        priceSource11 = get(configs, 11).priceSource;\\n        priceSource12 = get(configs, 12).priceSource;\\n        priceSource13 = get(configs, 13).priceSource;\\n        priceSource14 = get(configs, 14).priceSource;\\n        priceSource15 = get(configs, 15).priceSource;\\n        priceSource16 = get(configs, 16).priceSource;\\n        priceSource17 = get(configs, 17).priceSource;\\n        priceSource18 = get(configs, 18).priceSource;\\n        priceSource19 = get(configs, 19).priceSource;\\n        priceSource20 = get(configs, 20).priceSource;\\n        priceSource21 = get(configs, 21).priceSource;\\n        priceSource22 = get(configs, 22).priceSource;\\n        priceSource23 = get(configs, 23).priceSource;\\n        priceSource24 = get(configs, 24).priceSource;\\n\\n        fixedPrice00 = get(configs, 0).fixedPrice;\\n        fixedPrice01 = get(configs, 1).fixedPrice;\\n        fixedPrice02 = get(configs, 2).fixedPrice;\\n        fixedPrice03 = get(configs, 3).fixedPrice;\\n        fixedPrice04 = get(configs, 4).fixedPrice;\\n        fixedPrice05 = get(configs, 5).fixedPrice;\\n        fixedPrice06 = get(configs, 6).fixedPrice;\\n        fixedPrice07 = get(configs, 7).fixedPrice;\\n        fixedPrice08 = get(configs, 8).fixedPrice;\\n        fixedPrice09 = get(configs, 9).fixedPrice;\\n        fixedPrice10 = get(configs, 10).fixedPrice;\\n        fixedPrice11 = get(configs, 11).fixedPrice;\\n        fixedPrice12 = get(configs, 12).fixedPrice;\\n        fixedPrice13 = get(configs, 13).fixedPrice;\\n        fixedPrice14 = get(configs, 14).fixedPrice;\\n        fixedPrice15 = get(configs, 15).fixedPrice;\\n        fixedPrice16 = get(configs, 16).fixedPrice;\\n        fixedPrice17 = get(configs, 17).fixedPrice;\\n        fixedPrice18 = get(configs, 18).fixedPrice;\\n        fixedPrice19 = get(configs, 19).fixedPrice;\\n        fixedPrice20 = get(configs, 20).fixedPrice;\\n        fixedPrice21 = get(configs, 21).fixedPrice;\\n        fixedPrice22 = get(configs, 22).fixedPrice;\\n        fixedPrice23 = get(configs, 23).fixedPrice;\\n        fixedPrice24 = get(configs, 24).fixedPrice;\\n\\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\\n\\n        reporter00 = get(configs, 0).reporter;\\n        reporter01 = get(configs, 1).reporter;\\n        reporter02 = get(configs, 2).reporter;\\n        reporter03 = get(configs, 3).reporter;\\n        reporter04 = get(configs, 4).reporter;\\n        reporter05 = get(configs, 5).reporter;\\n        reporter06 = get(configs, 6).reporter;\\n        reporter07 = get(configs, 7).reporter;\\n        reporter08 = get(configs, 8).reporter;\\n        reporter09 = get(configs, 9).reporter;\\n        reporter10 = get(configs, 10).reporter;\\n        reporter11 = get(configs, 11).reporter;\\n        reporter12 = get(configs, 12).reporter;\\n        reporter13 = get(configs, 13).reporter;\\n        reporter14 = get(configs, 14).reporter;\\n        reporter15 = get(configs, 15).reporter;\\n        reporter16 = get(configs, 16).reporter;\\n        reporter17 = get(configs, 17).reporter;\\n        reporter18 = get(configs, 18).reporter;\\n        reporter19 = get(configs, 19).reporter;\\n        reporter20 = get(configs, 20).reporter;\\n        reporter21 = get(configs, 21).reporter;\\n        reporter22 = get(configs, 22).reporter;\\n        reporter23 = get(configs, 23).reporter;\\n        reporter24 = get(configs, 24).reporter;\\n\\n        reporterMultiplier00 = get(configs, 0).reporterMultiplier;\\n        reporterMultiplier01 = get(configs, 1).reporterMultiplier;\\n        reporterMultiplier02 = get(configs, 2).reporterMultiplier;\\n        reporterMultiplier03 = get(configs, 3).reporterMultiplier;\\n        reporterMultiplier04 = get(configs, 4).reporterMultiplier;\\n        reporterMultiplier05 = get(configs, 5).reporterMultiplier;\\n        reporterMultiplier06 = get(configs, 6).reporterMultiplier;\\n        reporterMultiplier07 = get(configs, 7).reporterMultiplier;\\n        reporterMultiplier08 = get(configs, 8).reporterMultiplier;\\n        reporterMultiplier09 = get(configs, 9).reporterMultiplier;\\n        reporterMultiplier10 = get(configs, 10).reporterMultiplier;\\n        reporterMultiplier11 = get(configs, 11).reporterMultiplier;\\n        reporterMultiplier12 = get(configs, 12).reporterMultiplier;\\n        reporterMultiplier13 = get(configs, 13).reporterMultiplier;\\n        reporterMultiplier14 = get(configs, 14).reporterMultiplier;\\n        reporterMultiplier15 = get(configs, 15).reporterMultiplier;\\n        reporterMultiplier16 = get(configs, 16).reporterMultiplier;\\n        reporterMultiplier17 = get(configs, 17).reporterMultiplier;\\n        reporterMultiplier18 = get(configs, 18).reporterMultiplier;\\n        reporterMultiplier19 = get(configs, 19).reporterMultiplier;\\n        reporterMultiplier20 = get(configs, 20).reporterMultiplier;\\n        reporterMultiplier21 = get(configs, 21).reporterMultiplier;\\n        reporterMultiplier22 = get(configs, 22).reporterMultiplier;\\n        reporterMultiplier23 = get(configs, 23).reporterMultiplier;\\n        reporterMultiplier24 = get(configs, 24).reporterMultiplier;\\n\\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\\n    }\\n\\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\\n        if (i < configs.length)\\n            return configs[i];\\n        return TokenConfig({\\n            cToken: address(0),\\n            underlying: address(0),\\n            symbolHash: bytes32(0),\\n            baseUnit: uint256(0),\\n            priceSource: PriceSource(0),\\n            fixedPrice: uint256(0),\\n            uniswapMarket: address(0),\\n            reporter: address(0),\\n            reporterMultiplier: uint256(0),\\n            isUniswapReversed: false\\n        });\\n    }\\n\\n    function getReporterIndex(address reporter) internal view returns(uint) {\\n        if (reporter == reporter00) return 0;\\n        if (reporter == reporter01) return 1;\\n        if (reporter == reporter02) return 2;\\n        if (reporter == reporter03) return 3;\\n        if (reporter == reporter04) return 4;\\n        if (reporter == reporter05) return 5;\\n        if (reporter == reporter06) return 6;\\n        if (reporter == reporter07) return 7;\\n        if (reporter == reporter08) return 8;\\n        if (reporter == reporter09) return 9;\\n        if (reporter == reporter10) return 10;\\n        if (reporter == reporter11) return 11;\\n        if (reporter == reporter12) return 12;\\n        if (reporter == reporter13) return 13;\\n        if (reporter == reporter14) return 14;\\n        if (reporter == reporter15) return 15;\\n        if (reporter == reporter16) return 16;\\n        if (reporter == reporter17) return 17;\\n        if (reporter == reporter18) return 18;\\n        if (reporter == reporter19) return 19;\\n        if (reporter == reporter20) return 20;\\n        if (reporter == reporter21) return 21;\\n        if (reporter == reporter22) return 22;\\n        if (reporter == reporter23) return 23;\\n        if (reporter == reporter24) return 24;\\n\\n        return type(uint).max;\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        if (cToken == cToken00) return 0;\\n        if (cToken == cToken01) return 1;\\n        if (cToken == cToken02) return 2;\\n        if (cToken == cToken03) return 3;\\n        if (cToken == cToken04) return 4;\\n        if (cToken == cToken05) return 5;\\n        if (cToken == cToken06) return 6;\\n        if (cToken == cToken07) return 7;\\n        if (cToken == cToken08) return 8;\\n        if (cToken == cToken09) return 9;\\n        if (cToken == cToken10) return 10;\\n        if (cToken == cToken11) return 11;\\n        if (cToken == cToken12) return 12;\\n        if (cToken == cToken13) return 13;\\n        if (cToken == cToken14) return 14;\\n        if (cToken == cToken15) return 15;\\n        if (cToken == cToken16) return 16;\\n        if (cToken == cToken17) return 17;\\n        if (cToken == cToken18) return 18;\\n        if (cToken == cToken19) return 19;\\n        if (cToken == cToken20) return 20;\\n        if (cToken == cToken21) return 21;\\n        if (cToken == cToken22) return 22;\\n        if (cToken == cToken23) return 23;\\n        if (cToken == cToken24) return 24;\\n\\n        return uint(-1);\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        if (underlying == underlying00) return 0;\\n        if (underlying == underlying01) return 1;\\n        if (underlying == underlying02) return 2;\\n        if (underlying == underlying03) return 3;\\n        if (underlying == underlying04) return 4;\\n        if (underlying == underlying05) return 5;\\n        if (underlying == underlying06) return 6;\\n        if (underlying == underlying07) return 7;\\n        if (underlying == underlying08) return 8;\\n        if (underlying == underlying09) return 9;\\n        if (underlying == underlying10) return 10;\\n        if (underlying == underlying11) return 11;\\n        if (underlying == underlying12) return 12;\\n        if (underlying == underlying13) return 13;\\n        if (underlying == underlying14) return 14;\\n        if (underlying == underlying15) return 15;\\n        if (underlying == underlying16) return 16;\\n        if (underlying == underlying17) return 17;\\n        if (underlying == underlying18) return 18;\\n        if (underlying == underlying19) return 19;\\n        if (underlying == underlying20) return 20;\\n        if (underlying == underlying21) return 21;\\n        if (underlying == underlying22) return 22;\\n        if (underlying == underlying23) return 23;\\n        if (underlying == underlying24) return 24;\\n\\n        return uint(-1);\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        if (symbolHash == symbolHash00) return 0;\\n        if (symbolHash == symbolHash01) return 1;\\n        if (symbolHash == symbolHash02) return 2;\\n        if (symbolHash == symbolHash03) return 3;\\n        if (symbolHash == symbolHash04) return 4;\\n        if (symbolHash == symbolHash05) return 5;\\n        if (symbolHash == symbolHash06) return 6;\\n        if (symbolHash == symbolHash07) return 7;\\n        if (symbolHash == symbolHash08) return 8;\\n        if (symbolHash == symbolHash09) return 9;\\n        if (symbolHash == symbolHash10) return 10;\\n        if (symbolHash == symbolHash11) return 11;\\n        if (symbolHash == symbolHash12) return 12;\\n        if (symbolHash == symbolHash13) return 13;\\n        if (symbolHash == symbolHash14) return 14;\\n        if (symbolHash == symbolHash15) return 15;\\n        if (symbolHash == symbolHash16) return 16;\\n        if (symbolHash == symbolHash17) return 17;\\n        if (symbolHash == symbolHash18) return 18;\\n        if (symbolHash == symbolHash19) return 19;\\n        if (symbolHash == symbolHash20) return 20;\\n        if (symbolHash == symbolHash21) return 21;\\n        if (symbolHash == symbolHash22) return 22;\\n        if (symbolHash == symbolHash23) return 23;\\n        if (symbolHash == symbolHash24) return 24;\\n\\n        return uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the i-th config, according to the order they were passed in originally\\n     * @param i The index of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, reporter: reporter00, reporterMultiplier: reporterMultiplier00, isUniswapReversed: isUniswapReversed00});\\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, reporter: reporter01, reporterMultiplier: reporterMultiplier01, isUniswapReversed: isUniswapReversed01});\\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, reporter: reporter02, reporterMultiplier: reporterMultiplier02, isUniswapReversed: isUniswapReversed02});\\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, reporter: reporter03, reporterMultiplier: reporterMultiplier03, isUniswapReversed: isUniswapReversed03});\\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, reporter: reporter04, reporterMultiplier: reporterMultiplier04, isUniswapReversed: isUniswapReversed04});\\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, reporter: reporter05, reporterMultiplier: reporterMultiplier05, isUniswapReversed: isUniswapReversed05});\\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, reporter: reporter06, reporterMultiplier: reporterMultiplier06, isUniswapReversed: isUniswapReversed06});\\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, reporter: reporter07, reporterMultiplier: reporterMultiplier07, isUniswapReversed: isUniswapReversed07});\\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, reporter: reporter08, reporterMultiplier: reporterMultiplier08, isUniswapReversed: isUniswapReversed08});\\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, reporter: reporter09, reporterMultiplier: reporterMultiplier09, isUniswapReversed: isUniswapReversed09});\\n\\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, reporter: reporter10, reporterMultiplier: reporterMultiplier10, isUniswapReversed: isUniswapReversed10});\\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, reporter: reporter11, reporterMultiplier: reporterMultiplier11, isUniswapReversed: isUniswapReversed11});\\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, reporter: reporter12, reporterMultiplier: reporterMultiplier12, isUniswapReversed: isUniswapReversed12});\\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, reporter: reporter13, reporterMultiplier: reporterMultiplier13, isUniswapReversed: isUniswapReversed13});\\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, reporter: reporter14, reporterMultiplier: reporterMultiplier14, isUniswapReversed: isUniswapReversed14});\\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, reporter: reporter15, reporterMultiplier: reporterMultiplier15, isUniswapReversed: isUniswapReversed15});\\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, reporter: reporter16, reporterMultiplier: reporterMultiplier16, isUniswapReversed: isUniswapReversed16});\\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, reporter: reporter17, reporterMultiplier: reporterMultiplier17, isUniswapReversed: isUniswapReversed17});\\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, reporter: reporter18, reporterMultiplier: reporterMultiplier18, isUniswapReversed: isUniswapReversed18});\\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, reporter: reporter19, reporterMultiplier: reporterMultiplier19, isUniswapReversed: isUniswapReversed19});\\n\\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, reporter: reporter20, reporterMultiplier: reporterMultiplier20, isUniswapReversed: isUniswapReversed20});\\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, reporter: reporter21, reporterMultiplier: reporterMultiplier21, isUniswapReversed: isUniswapReversed21});\\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, reporter: reporter22, reporterMultiplier: reporterMultiplier22, isUniswapReversed: isUniswapReversed22});\\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, reporter: reporter23, reporterMultiplier: reporterMultiplier23, isUniswapReversed: isUniswapReversed23});\\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, reporter: reporter24, reporterMultiplier: reporterMultiplier24, isUniswapReversed: isUniswapReversed24});\\n    }\\n\\n    /**\\n     * @notice Get the config for symbol\\n     * @param symbol The symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    /**\\n     * @notice Get the config for the reporter\\n     * @param reporter The address of the reporter of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByReporter(address reporter) public view returns (TokenConfig memory) {\\n        uint index = getReporterIndex(reporter);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    /**\\n     * @notice Get the config for the symbolHash\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    /**\\n     * @notice Get the config for the cToken\\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\\n     * @param cToken The address of the cToken of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    /**\\n     * @notice Get the config for an underlying asset\\n     * @param underlying The address of the underlying asset of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"./UAV/Uniswap/UniswapAnchoredView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./UniswapConfig.sol\\\";\\nimport \\\"./UniswapLib.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\nimport \\\"../Chainlink/AggregatorValidatorInterface.sol\\\";\\n\\nstruct Observation {\\n    uint timestamp;\\n    uint acc;\\n}\\n\\nstruct PriceData {\\n    uint248 price;\\n    bool failoverActive;\\n}\\n\\ncontract UniswapAnchoredView is AggregatorValidatorInterface, UniswapConfig, Ownable {\\n    using FixedPoint for *;\\n\\n    /// @notice The number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice A common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\\n    uint public immutable upperBoundAnchorRatio;\\n\\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\\n    uint public immutable lowerBoundAnchorRatio;\\n\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\n    uint public immutable anchorPeriod;\\n\\n    /// @notice Official prices by symbol hash\\n    mapping(bytes32 => PriceData) public prices;\\n\\n    /// @notice The old observation for each symbolHash\\n    mapping(bytes32 => Observation) public oldObservations;\\n\\n    /// @notice The new observation for each symbolHash\\n    mapping(bytes32 => Observation) public newObservations;\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(bytes32 indexed symbolHash, uint reporter, uint anchor);\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(bytes32 indexed symbolHash, uint price);\\n\\n    /// @notice The event emitted when anchor price is updated\\n    event AnchorPriceUpdated(bytes32 indexed symbolHash, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\n\\n    /// @notice The event emitted when the uniswap window changes\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\n\\n    /// @notice The event emitted when failover is activated\\n    event FailoverActivated(bytes32 indexed symbolHash);\\n\\n    /// @notice The event emitted when failover is deactivated\\n    event FailoverDeactivated(bytes32 indexed symbolHash);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\n     *      NOTE: Reported prices are set to 1 during construction. We assume that this contract will not be voted in by\\n     *      governance until prices have been updated through `validate` for each TokenConfig.\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    constructor(uint anchorToleranceMantissa_,\\n                uint anchorPeriod_,\\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\\n\\n        anchorPeriod = anchorPeriod_;\\n\\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\\n\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\n            address uniswapMarket = config.uniswapMarket;\\n            if (config.priceSource == PriceSource.REPORTER) {\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\n                require(config.reporter != address(0), \\\"reported price must have a reporter\\\");\\n                bytes32 symbolHash = config.symbolHash;\\n                prices[symbolHash].price = 1;\\n                uint cumulativePrice = currentCumulativePrice(config);\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\n                newObservations[symbolHash].timestamp = block.timestamp;\\n                oldObservations[symbolHash].acc = cumulativePrice;\\n                newObservations[symbolHash].acc = cumulativePrice;\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\n            } else {\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the official price for a symbol\\n     * @param symbol The symbol to fetch the price of\\n     * @return Price denominated in USD, with 6 decimals\\n     */\\n    function price(string memory symbol) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\n        return priceInternal(config);\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash].price;\\n        // config.fixedPrice holds a fixed-point number with scaling factor 10**6 for FIXED_USD\\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash].price;\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            // config.fixedPrice holds a fixed-point number with scaling factor 10**18 for FIXED_ETH\\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken, in the format expected by the Comptroller.\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return Price denominated in USD for the given cToken address, in the format expected by the Comptroller.\\n     */\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e36 / baseUnit\\n         // The baseUnit of an asset is the amount of the smallest denomination of that asset per whole.\\n         // For example, the baseUnit of ETH is 1e18.\\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6)/baseUnit\\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice This is called by the reporter whenever a new price is posted on-chain\\n     * @dev called by AccessControlledOffchainAggregator\\n     * @param currentAnswer the price\\n     * @return valid bool\\n     */\\n    function validate(uint256/* previousRoundId */,\\n            int256 /* previousAnswer */,\\n            uint256 /* currentRoundId */,\\n            int256 currentAnswer) external override returns (bool valid) {\\n\\n        // NOTE: We don't do any access control on msg.sender here. The access control is done in getTokenConfigByReporter,\\n        // which will REVERT if an unauthorized address is passed.\\n        TokenConfig memory config = getTokenConfigByReporter(msg.sender);\\n        uint256 reportedPrice = convertReportedPrice(config, currentAnswer);\\n        uint256 anchorPrice = calculateAnchorPriceFromEthPrice(config);\\n\\n        PriceData memory priceData = prices[config.symbolHash];\\n        if (priceData.failoverActive) {\\n            require(anchorPrice < 2**248, \\\"Anchor price too large\\\");\\n            prices[config.symbolHash].price = uint248(anchorPrice);\\n            emit PriceUpdated(config.symbolHash, anchorPrice);\\n        } else if (isWithinAnchor(reportedPrice, anchorPrice)) {\\n            require(reportedPrice < 2**248, \\\"Reported price too large\\\");\\n            prices[config.symbolHash].price = uint248(reportedPrice);\\n            emit PriceUpdated(config.symbolHash, reportedPrice);\\n            valid = true;\\n        } else {\\n            emit PriceGuarded(config.symbolHash, reportedPrice, anchorPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice In the event that a feed is failed over to Uniswap TWAP, this function can be called\\n     * by anyone to update the TWAP price.\\n     * @dev This only works if the feed represented by the symbolHash is failed over, and will revert otherwise\\n     * @param symbolHash bytes32\\n     */\\n    function pokeFailedOverPrice(bytes32 symbolHash) public {\\n        PriceData memory priceData = prices[symbolHash];\\n        require(priceData.failoverActive, \\\"Failover must be active\\\");\\n        TokenConfig memory config = getTokenConfigBySymbolHash(symbolHash);\\n        uint anchorPrice = calculateAnchorPriceFromEthPrice(config);\\n        require(anchorPrice < 2**248, \\\"Anchor price too large\\\");\\n        prices[config.symbolHash].price = uint248(anchorPrice);\\n        emit PriceUpdated(config.symbolHash, anchorPrice);\\n    }\\n\\n    /**\\n     * @notice Calculate the anchor price by fetching price data from the TWAP\\n     * @param config TokenConfig\\n     * @return anchorPrice uint\\n     */\\n    function calculateAnchorPriceFromEthPrice(TokenConfig memory config) internal returns (uint anchorPrice) {\\n        uint ethPrice = fetchEthAnchorPrice();\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\n        if (config.symbolHash == ethHash) {\\n            anchorPrice = ethPrice;\\n        } else {\\n            anchorPrice = fetchAnchorPrice(config.symbolHash, config, ethPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert the reported price to the 6 decimal format that this view requires\\n     * @param config TokenConfig\\n     * @param reportedPrice from the reporter\\n     * @return convertedPrice uint256\\n     */\\n    function convertReportedPrice(TokenConfig memory config, int256 reportedPrice) internal pure returns (uint256) {\\n        require(reportedPrice >= 0, \\\"Reported price cannot be negative\\\");\\n        uint256 unsignedPrice = uint256(reportedPrice);\\n        uint256 convertedPrice = mul(unsignedPrice, config.reporterMultiplier) / config.baseUnit;\\n        return convertedPrice;\\n    }\\n\\n\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\n        if (reporterPrice > 0) {\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\n     */\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\n        if (config.isUniswapReversed) {\\n            return cumulativePrice1;\\n        } else {\\n            return cumulativePrice0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\n     */\\n    function fetchEthAnchorPrice() internal returns (uint) {\\n        return fetchAnchorPrice(ethHash, getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\n     */\\n    function fetchAnchorPrice(bytes32 symbolHash, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\n\\n        // Calculate uniswap time-weighted average price\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\n        uint anchorPrice;\\n\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\n\\n        // In the case of non-ETH tokens\\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\\n        // b. conversionFactor = ETH price * 1e6\\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\\n        // so ->\\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * ETH_price * 1e6\\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\n\\n        emit AnchorPriceUpdated(symbolHash, anchorPrice, oldTimestamp, block.timestamp);\\n\\n        return anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\n     *  Update new and old observations of lagging window if period elapsed.\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\n        bytes32 symbolHash = config.symbolHash;\\n        uint cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[symbolHash];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\n        if (timeElapsed >= anchorPeriod) {\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\n            oldObservations[symbolHash].acc = newObservation.acc;\\n\\n            newObservations[symbolHash].timestamp = block.timestamp;\\n            newObservations[symbolHash].acc = cumulativePrice;\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\n        }\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\n    }\\n\\n    /**\\n     * @notice Activate failover, and fall back to using failover directly.\\n     * @dev Only the owner can call this function\\n     */\\n    function activateFailover(bytes32 symbolHash) external onlyOwner() {\\n        require(!prices[symbolHash].failoverActive, \\\"Already activated\\\");\\n        prices[symbolHash].failoverActive = true;\\n        emit FailoverActivated(symbolHash);\\n        pokeFailedOverPrice(symbolHash);\\n    }\\n\\n    /**\\n     * @notice Deactivate a previously activated failover\\n     * @dev Only the owner can call this function\\n     */\\n    function deactivateFailover(bytes32 symbolHash) external onlyOwner() {\\n        require(prices[symbolHash].failoverActive, \\\"Already deactivated\\\");\\n        prices[symbolHash].failoverActive = false;\\n        emit FailoverDeactivated(symbolHash);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"./UAV/Uniswap/UniswapLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534827;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"FailoverActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"FailoverDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"activateFailover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"deactivateFailover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"getTokenConfigByReporter\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"pokeFailedOverPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"failoverActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"currentAnswer\",\"type\":\"int256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniswapAnchoredView", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://038304a5c8a5ae8506fbd2006dff7c846ac7153d216acb1ca894c61f806bef6b"}]}