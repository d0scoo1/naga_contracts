{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable {    \r\n    address private _owner;\r\n    constructor(){\r\n        _owner = msg.sender;\r\n    }\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"Function accessible only by the owner !!\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\ncontract DP is Ownable, ReentrancyGuard {\r\n\r\n    uint256 private mintPrice = 0.009 ether;\r\n    uint256 private mintFees = 0.006 ether;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    modifier compliance() {\r\n        require(tx.origin == msg.sender, \"No contracts\");\r\n        _;\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {}\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {}\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function seConfig(uint256 _mintPrice, uint256 _mintFees) compliance onlyOwner public {\r\n        mintPrice = _mintPrice;\r\n        mintFees = _mintFees;\r\n    }\r\n\r\n    function getPriceToWei(uint256 _amount, bool _mintFees) compliance onlyOwner public view returns(uint256) {\r\n        uint256 amount = (_amount * mintPrice);\r\n        if (_mintFees) {\r\n            amount = amount + mintFees;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getFeesToWei() compliance onlyOwner public view returns(uint256) {\r\n        return mintFees;\r\n    }\r\n\r\n    function disperse(address[] calldata _addresses, uint256 _mintAmount) compliance onlyOwner public {\r\n        uint256 amount = getPriceToWei(_mintAmount, true);\r\n        uint256 totalAmount = amount * _addresses.length;\r\n        require(totalAmount <= address(this).balance, \"Insufficient balance!\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            withdrawAmount(_addresses[i], amount);\r\n        }\r\n    }\r\n\r\n    function withdrawPercent(address[] calldata _addresses, uint256[] calldata _percent) compliance onlyOwner public {\r\n        require(_percent.length == _addresses.length, \"You must provide a 1-to-1 relationship!\");\r\n        uint256 sum = 0;\r\n        for(uint256 i = 0; i < _percent.length; i++) {\r\n            sum = sum + _percent[i];\r\n        }\r\n        require(sum == 100, \"Total percent not equal 100\");\r\n        uint256 balance = address(this).balance;\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            withdrawAmount(_addresses[i], balance * _percent[i] / 100);\r\n        }\r\n    }\r\n\r\n    function withdrawAmount(address _address, uint256 _weiAmount) compliance onlyOwner nonReentrant public {\r\n        require(_weiAmount <= address(this).balance, \"Insufficient balance!\");\r\n        (bool os, ) = payable(_address).call{value: _weiAmount}('');\r\n        require(os);\r\n    }\r\n\r\n    function withdrawAll() compliance onlyOwner nonReentrant public {\r\n        (bool os, ) = payable(owner()).call{value: address(this).balance}('');\r\n        require(os);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_mintFees\",\"type\":\"bool\"}],\"name\":\"getPriceToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFees\",\"type\":\"uint256\"}],\"name\":\"seConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percent\",\"type\":\"uint256[]\"}],\"name\":\"withdrawPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://657408216d98db9109daed0bb869a70cdec76fafe886fb541e419760ad43020f"}]}