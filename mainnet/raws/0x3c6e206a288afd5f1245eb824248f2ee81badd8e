{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.10;\r\n\r\n/*********************    DEXStein utility token    ************************/\r\n/***************************************************************************/\r\n/** \"Don't believe everything you read on the internet.\" ~Abraham Lincoln **/\r\n/***************************************************************************/\r\n\r\ncontract owned {\r\n    address payable private _owner;\r\n\r\n    constructor () {\r\n        _owner = payable(msg.sender);\r\n    }\r\n\r\n    function owner() public returns (address payable){\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == _owner, 'you are not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ERC20Interface{\r\n    function totalSupply() external returns (uint);\r\n\r\n    function balanceOf(address tokenOwner) external returns (uint balance);\r\n\r\n    function allowance(address tokenOwner, address spender) external returns (uint remaining);\r\n\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n//Contract function to receive approval and execute function in one call\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n}\r\n\r\n//Actual token contract\r\ncontract DEXStein is ERC20Interface, owned {\r\n    string private constant _symbol = \"DCSY\";\r\n    string private constant _name = \"DEXStein commerce sys\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint private _totalSupply;\r\n    uint private _marketingPercent = 2;\r\n\r\n    address private _marketingWallet = 0xb859BdfC54E100a54bcC6531A33Cb3913d7E361d;\r\n\r\n    mapping(address => uint) private balances;\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n    mapping (address => bool) private isBlackListed;\r\n    mapping (address => bool) private isExcludedFromTaxAndLimits;\r\n\r\n    // Txn limit //\r\n    uint256 private _maxTxnAmount = 1000 * 10 ** _decimals;\r\n    // Txn limit  //\r\n\r\n    uint256 private _maxBurnAmount = 10 * 10 ** _decimals;\r\n\r\n    constructor() {\r\n        uint256 initialSupply = 250000000;\r\n        _totalSupply = initialSupply * 10 ** uint256(_decimals);\r\n\r\n        isExcludedFromTaxAndLimits[msg.sender] = true;\r\n        isExcludedFromTaxAndLimits[_marketingWallet] = true;\r\n\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success)  {\r\n        require(!isBlackListed[_from] && !isBlackListed[_to], \"You are a blocked from using this token. you know why\");\r\n\r\n        require(_value > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0), \"No zero address transfers allowd here\");\r\n\r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value, \"You are trying to transfer more than you have\");\r\n\r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to], \"Overflow\");\r\n        // Save this for an assertion in the future\r\n\r\n        // transfer free of marketing fees and limits\r\n        if(isExcludedFromTaxAndLimits[_from] || isExcludedFromTaxAndLimits[_to]){\r\n            balances[_from] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n\r\n        require(_value <= _maxTxnAmount ,\"You have exided the maximum amount you can move\");\r\n\r\n        uint marketingValue = (_value * _marketingPercent) / 100;\r\n        uint transferValue = _value - marketingValue;\r\n\r\n        uint previousBalances = balances[_from] + balances[_to] + balances[_marketingWallet];\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n\r\n        // Add the value - marketing % to the recipient\r\n        balances[_to] += transferValue;\r\n        emit Transfer(_from, _to, transferValue);\r\n\r\n        //Add the marketing % to the marketing wallet\r\n        balances[_marketingWallet] += marketingValue;\r\n        emit Transfer(_from, _marketingWallet, marketingValue);\r\n\r\n        // Sanity check\r\n        assert(balances[_from] + balances[_to] + balances[_marketingWallet] == previousBalances);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        return _transfer(msg.sender, to, tokens);\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        return _transfer(from, to, tokens);\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes calldata data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    function burnTokens(uint256 amount) external virtual {\r\n        uint256 burnAmount = amount * 10 ** _decimals;\r\n        _burnTokens(msg.sender, burnAmount);\r\n    }\r\n\r\n    function burnTokensFrom(address _from, uint256 amount) external virtual {\r\n        uint256 burnAmount = amount * 10 ** _decimals;\r\n\r\n        // Check allowance\r\n        require(burnAmount <= allowed[_from][msg.sender]);\r\n       // Subtract from the sender's allowance\r\n        allowed[_from][msg.sender] -= burnAmount;\r\n\r\n        _burnTokens(_from, burnAmount);\r\n    }\r\n\r\n    function _burnTokens(address _from, uint256 burnAmount) internal virtual {\r\n        require(burnAmount <= _maxBurnAmount, \"sorry, but currently you cant burn that much\");\r\n\r\n        require(_from != address(0), \"cant burn from the zero address\");\r\n        require(balances[_from] >= burnAmount, \"burn amount exceeds balance\");\r\n        balances[_from] -= burnAmount;\r\n        _totalSupply -= burnAmount;\r\n\r\n        emit Transfer(_from, address(0), burnAmount);\r\n    }\r\n\r\n    /*SETTINGS*/\r\n    function setMarketingWallet(address wallet) external onlyOwner{\r\n        _marketingWallet = wallet;\r\n         isExcludedFromTaxAndLimits[_marketingWallet] = true;\r\n    }\r\n\r\n    function setMarketingPercent(uint percent) external onlyOwner returns (uint oldPercent) {\r\n        require(percent >= 1 && percent <= 10, \"percent must be >=1 <=10\");\r\n\r\n        uint old = _marketingPercent;\r\n        _marketingPercent = percent;\r\n        return old;\r\n    }\r\n\r\n    function blockAddress(address account, bool state) external onlyOwner{\r\n        isBlackListed[account] = state;\r\n    }\r\n    \r\n    function blockAddressBulk(address[] memory accounts, bool state) external onlyOwner{\r\n        for(uint256 i = 0; i < accounts.length; i++){\r\n            isBlackListed[accounts[i]] = state;\r\n        }\r\n    }\r\n\r\n    function excludeFromTaxAndLimits(address account) external onlyOwner {\r\n        isExcludedFromTaxAndLimits[account] = true;\r\n    }\r\n\r\n    function includeInTaxAndLimits(address account) external onlyOwner {\r\n        isExcludedFromTaxAndLimits[account] = false;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 amount) external onlyOwner{\r\n        _maxTxnAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function updateMaxBurnAmount(uint256 amount) external onlyOwner{\r\n        _maxBurnAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    // allow owner to claim ERC20 tokens sent to this contract (by mistake)\r\n    function rescueTokens(address _tokenAddr, address _to, uint _amount) external onlyOwner {\r\n        ERC20Interface(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    //Transfer all ETH sent to the contract to the owner(depolyer) wallet\r\n    receive() external payable {\r\n        owner().transfer(msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"blockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"blockAddressBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokensFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTaxAndLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTaxAndLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMarketingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxBurnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DEXStein", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36b1741775fe0b47f837dd2be6455ba1517fec9fb5578a8b82f90b7baca02aae"}]}