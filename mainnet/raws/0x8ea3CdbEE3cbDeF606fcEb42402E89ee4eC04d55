{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ReitCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\ncontract ReitCoin is Ownable {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n    uint256 decimalfactor;\\n    uint256 public Max_Token;\\n    bool mintAllowed = true;\\n\\n    address public foundersTeam = 0xA899DdF11218D31f2f964a482933869F9602E1AD;\\n    address public reservesTeam = 0x0B1984712cf5C6d3015297cAEFf74b7fEEc694a0;\\n    address public charityTeam = 0xAc91f134D522512DAA1337d8897C460B2fa79bf6;\\n    address public strategyInitiativeTeam =0x320C1a2b6F261A6904c76d5f525719B608816DBC;\\n    struct Team {\\n        uint256 teamAmount;\\n        uint256 claimedAmount;\\n        uint256 claimTimestamp;\\n        uint256 nextClaimShare;\\n        uint256 claimInterval;\\n        address teamAddress;\\n    }\\n\\n    mapping(uint256 => Team) public idToTeam;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    constructor(\\n        string memory SYMBOL,\\n        string memory NAME,\\n        uint8 DECIMALS\\n    ) {\\n        symbol = SYMBOL;\\n        name = NAME;\\n        decimals = DECIMALS;\\n        decimalfactor = 10**uint256(decimals);\\n        Max_Token = 10_000_000_000 * decimalfactor;\\n\\n        mint(charityTeam, 1_000_000_000 * decimalfactor);\\n        mint(strategyInitiativeTeam, 5_000_000_00 * decimalfactor);\\n        mint(address(this), 4_500_000_000 * decimalfactor);\\n\\n        // team values for production\\n        createTeam(\\n            1,\\n            foundersTeam,\\n            180 days,\\n            2_000_000_000 * decimalfactor,\\n            1000,\\n            0\\n        );\\n        createTeam(\\n            2,\\n            reservesTeam,\\n            365 days,\\n            2_500_000_000 * decimalfactor,\\n            100,\\n            30 days\\n        );\\n    }\\n\\n    function createTeam(\\n        uint256 _id,\\n        address _teamAddress,\\n        uint256 _claimTimestamp,\\n        uint256 _teamAmount,\\n        uint256 _nextClaimShare,\\n        uint256 _claimInterval\\n    ) internal {\\n        Team memory newTeam = Team({\\n            claimTimestamp: block.timestamp + _claimTimestamp,\\n            teamAmount: _teamAmount,\\n            teamAddress: _teamAddress,\\n            claimedAmount: 0,\\n            nextClaimShare: _nextClaimShare,\\n            claimInterval: _claimInterval\\n        });\\n\\n        idToTeam[_id] = newTeam;\\n    }\\n\\n    function claim() external {\\n        require(\\n            ((msg.sender == foundersTeam) || (msg.sender == reservesTeam)),\\n            \\\"Cannot claim token\\\"\\n        );\\n\\n        (uint256 tokensToBeClaimed, uint256 _id) = calculateVestedTokens(\\n            msg.sender\\n        );\\n        Team memory currentTeam = idToTeam[_id];\\n        require(\\n            currentTeam.teamAmount > currentTeam.claimedAmount,\\n            \\\"Already claimed all tokens\\\"\\n        );\\n        require(\\n            block.timestamp > currentTeam.claimTimestamp,\\n            \\\"Cannot claim yet\\\"\\n        );\\n        currentTeam.claimedAmount += tokensToBeClaimed;\\n        currentTeam.claimTimestamp += currentTeam.claimInterval;\\n\\n        idToTeam[_id] = currentTeam;\\n\\n        _transfer(address(this), msg.sender, tokensToBeClaimed);\\n    }\\n\\n    function calculateVestedTokens(address _userAddress)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if ((_userAddress == foundersTeam) || (_userAddress == reservesTeam)) {\\n            uint256 _teamId = 1;\\n            if (_userAddress == reservesTeam) {\\n                _teamId = 2;\\n            }\\n            Team memory currentTeam = idToTeam[_teamId];\\n            if (\\n                (block.timestamp > currentTeam.claimTimestamp) &&\\n                (currentTeam.teamAmount != currentTeam.claimedAmount)\\n            ) {\\n                return (\\n                    ((currentTeam.teamAmount * currentTeam.nextClaimShare) /\\n                        (10**4)),\\n                    _teamId\\n                );\\n            } else {\\n                return (0, _teamId);\\n            }\\n        } else {\\n            return (0, 0);\\n        }\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        require(_to != address(0));\\n        require(balanceOf[_from] >= _value, \\\"Not enough tokens\\\");\\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n\\n        emit Transfer(_from, _to, _value);\\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool success) {\\n        require(_value <= allowance[_from][msg.sender], \\\"Allowance error\\\");\\n        allowance[_from][msg.sender] -= _value;\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value)\\n        public\\n        returns (bool success)\\n    {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] >= _value);\\n        balanceOf[msg.sender] -= _value;\\n        totalSupply -= _value;\\n        mintAllowed = true;\\n        emit Transfer(msg.sender, address(0), _value);\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _value) public returns (bool success) {\\n        require(Max_Token >= (totalSupply + _value));\\n        require(mintAllowed, \\\"Max supply reached\\\");\\n        if (Max_Token == (totalSupply + _value)) {\\n            mintAllowed = false;\\n        }\\n        require(msg.sender == owner, \\\"Only Owner Can Mint\\\");\\n        balanceOf[_to] += _value;\\n        totalSupply += _value;\\n        require(balanceOf[_to] >= _value);\\n        emit Transfer(address(0), _to, _value);\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"SYMBOL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"NAME\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"DECIMALS\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Max_Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimInterval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyInitiativeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReitCoin", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004524549540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095245495420434f494e0000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}