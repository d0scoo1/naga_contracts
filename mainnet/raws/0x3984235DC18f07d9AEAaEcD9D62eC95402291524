{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/BendCompetitionMainnet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {BendCompetition} from \\\"./BendCompetition.sol\\\";\\n\\ncontract BendCompetitionMainnet is BendCompetition {\\n    function getConfig() public pure override returns (Config memory config) {\\n        config.TREASURY_ADDRESS = address(\\n            0x472FcC65Fab565f75B1e0E861864A86FE5bcEd7B\\n        );\\n        config.BEND_TOKEN_ADDRESS = address(\\n            0x0d02755a5700414B26FF040e1dE35D337DF56218\\n        );\\n        config.TEAM_WALLET_ADDRESS = address(\\n            0x4D62360CEcF722A7888b1f97D4c7e8b170071248\\n        );\\n        config.AUTO_DRAW_DIVIDEND_THRESHOLD = 100 * 10**18;\\n        config.BEND_TOKEN_REWARD_PER_ETH = 333333 * 10**18;\\n        config.MAX_ETH_PAYMENT_PER_ADDR = 1 * 10**18;\\n        config.VEBEND_ADDRESS = address(\\n            0xd7e97172C2419566839Bf80DeeA46D22B1B2E06E\\n        );\\n        config.VEBEND_LOCK_MIN_WEEK = 2;\\n\\n        return config;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/BendCompetition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ICryptoPunks} from \\\"../interfaces/ICryptoPunks.sol\\\";\\nimport {IWETHGateway} from \\\"../interfaces/IWETHGateway.sol\\\";\\nimport {IVeBend} from \\\"../interfaces/IVeBend.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract BendCompetition is Ownable, ReentrancyGuard, Pausable {\\n    enum Stage {\\n        Prepare,\\n        Sale,\\n        Finish\\n    }\\n\\n    struct Config {\\n        address TREASURY_ADDRESS;\\n        address BEND_TOKEN_ADDRESS;\\n        address TEAM_WALLET_ADDRESS;\\n        address VEBEND_ADDRESS;\\n        uint256 VEBEND_LOCK_MIN_WEEK;\\n        uint256 AUTO_DRAW_DIVIDEND_THRESHOLD;\\n        uint256 BEND_TOKEN_REWARD_PER_ETH;\\n        uint256 MAX_ETH_PAYMENT_PER_ADDR;\\n    }\\n\\n    struct UIData {\\n        // for all\\n        uint256 remainDivident;\\n        uint256 bendClaimedTotal;\\n        uint256 bendPrice;\\n        uint256 bendTokenRewardPerETH;\\n        uint256 remainBendBalance;\\n        uint256 veBendLockMinWeek;\\n        uint256 veBendCurrentLockStartTimestamp;\\n        Stage stage;\\n        // for current address\\n        uint256 bendBalance;\\n        uint256 veBendBalance;\\n        int256 veBendLockedBalanceAmount;\\n        uint256 veBendLockedBalanceEnd;\\n        uint256 maxETHPayment;\\n        uint256 maxBendReward;\\n    }\\n\\n    uint256 public immutable CONTRACT_CREATE_TIMESTAMP;\\n    mapping(address => uint256) public ethPaymentRecord;\\n    uint256 public ethPaymentTotal;\\n    uint256 public bendClaimedTotal;\\n    uint256 public remainDivident;\\n\\n    event Claimed(\\n        address indexed owner,\\n        uint256 ethPayment,\\n        uint256 bendReward\\n    );\\n\\n    event DrawDividend(\\n        address indexed operator,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n\\n    constructor() {\\n        CONTRACT_CREATE_TIMESTAMP = block.timestamp;\\n    }\\n\\n    function getConfig() public view virtual returns (Config memory config) {}\\n\\n    function claim(uint256 lockWeek)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        Config memory CONFIG = getConfig();\\n        require(stage() == Stage.Sale, \\\"not in sale\\\");\\n        require(lockWeek >= CONFIG.VEBEND_LOCK_MIN_WEEK, \\\"lock week too short\\\");\\n\\n        (uint256 ethPayment, uint256 bendReward) = _getClaimData(msg.value);\\n        require(bendReward > 0, \\\"not enough bend reward\\\");\\n\\n        ethPaymentRecord[msg.sender] += ethPayment;\\n        ethPaymentTotal += ethPayment;\\n        remainDivident += ethPayment;\\n        bendClaimedTotal += bendReward;\\n\\n        IERC20(CONFIG.BEND_TOKEN_ADDRESS).approve(\\n            CONFIG.VEBEND_ADDRESS,\\n            bendReward\\n        );\\n\\n        IVeBend.LockedBalance memory locked = IVeBend(CONFIG.VEBEND_ADDRESS)\\n            .getLocked(msg.sender);\\n        if (locked.amount > 0) {\\n            IVeBend(CONFIG.VEBEND_ADDRESS).increaseAmountFor(\\n                msg.sender,\\n                bendReward\\n            );\\n        } else {\\n            IVeBend(CONFIG.VEBEND_ADDRESS).createLockFor(\\n                msg.sender,\\n                bendReward,\\n                ((block.timestamp / 604800) + lockWeek) * 604800\\n            );\\n        }\\n\\n        uint256 ethRemain = msg.value - ethPayment;\\n        if (ethRemain > 0) {\\n            _safeTransferETH(msg.sender, ethRemain);\\n        }\\n\\n        if (remainDivident >= CONFIG.AUTO_DRAW_DIVIDEND_THRESHOLD) {\\n            drawDividend();\\n        }\\n\\n        emit Claimed(msg.sender, ethPayment, bendReward);\\n    }\\n\\n    function drawDividend() public {\\n        Config memory CONFIG = getConfig();\\n        if (CONFIG.TEAM_WALLET_ADDRESS == address(0)) {\\n            return;\\n        }\\n\\n        uint256 amount = remainDivident;\\n        remainDivident = 0;\\n\\n        _safeTransferETH(CONFIG.TEAM_WALLET_ADDRESS, amount);\\n\\n        emit DrawDividend(msg.sender, CONFIG.TEAM_WALLET_ADDRESS, amount);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function emergencyTokenTransfer(address token, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        Config memory CONFIG = getConfig();\\n        IERC20(token).transfer(CONFIG.TREASURY_ADDRESS, amount);\\n    }\\n\\n    function emergencyEtherTransfer(uint256 amount) external onlyOwner {\\n        Config memory CONFIG = getConfig();\\n        _safeTransferETH(CONFIG.TREASURY_ADDRESS, amount);\\n    }\\n\\n    function uiData() external view returns (UIData memory data) {\\n        Config memory CONFIG = getConfig();\\n\\n        data.remainDivident = remainDivident;\\n        data.bendClaimedTotal = bendClaimedTotal;\\n        data.bendPrice = ((1 * 10**18 * 10**18) /\\n            CONFIG.BEND_TOKEN_REWARD_PER_ETH);\\n        data.bendTokenRewardPerETH = CONFIG.BEND_TOKEN_REWARD_PER_ETH;\\n        data.remainBendBalance = IERC20(CONFIG.BEND_TOKEN_ADDRESS).balanceOf(\\n            address(this)\\n        );\\n        data.veBendLockMinWeek = CONFIG.VEBEND_LOCK_MIN_WEEK;\\n        data.veBendCurrentLockStartTimestamp = ((block.timestamp / 604800) *\\n            604800);\\n\\n        data.stage = stage();\\n\\n        if (msg.sender == address(0)) {\\n            return data;\\n        }\\n\\n        data.bendBalance = IERC20(CONFIG.BEND_TOKEN_ADDRESS).balanceOf(\\n            msg.sender\\n        );\\n        data.veBendBalance = IERC20(CONFIG.VEBEND_ADDRESS).balanceOf(\\n            msg.sender\\n        );\\n\\n        IVeBend.LockedBalance memory locked = IVeBend(CONFIG.VEBEND_ADDRESS)\\n            .getLocked(msg.sender);\\n        data.veBendLockedBalanceAmount = locked.amount;\\n        data.veBendLockedBalanceEnd = locked.end;\\n        (data.maxETHPayment, data.maxBendReward) = _getClaimData(\\n            type(uint256).max\\n        );\\n\\n        return data;\\n    }\\n\\n    function stage() public view returns (Stage) {\\n        if (block.timestamp < CONTRACT_CREATE_TIMESTAMP) {\\n            return Stage.Prepare;\\n        }\\n        if (block.timestamp >= CONTRACT_CREATE_TIMESTAMP + 90 days) {\\n            return Stage.Finish;\\n        }\\n\\n        return Stage.Sale;\\n    }\\n\\n    function _getClaimData(uint256 ethBalance)\\n        internal\\n        view\\n        returns (uint256 ethPayment, uint256 bendReward)\\n    {\\n        if (msg.sender == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        Config memory CONFIG = getConfig();\\n        uint256 bendBalance = IERC20(CONFIG.BEND_TOKEN_ADDRESS).balanceOf(\\n            address(this)\\n        );\\n        if (bendBalance <= 0) {\\n            return (ethPayment, bendReward);\\n        }\\n\\n        ethPayment =\\n            CONFIG.MAX_ETH_PAYMENT_PER_ADDR -\\n            ethPaymentRecord[msg.sender];\\n\\n        if (ethPayment > ethBalance) {\\n            ethPayment = ethBalance;\\n        }\\n\\n        bendReward = (ethPayment * CONFIG.BEND_TOKEN_REWARD_PER_ETH) / 10**18;\\n\\n        if (bendReward > bendBalance) {\\n            bendReward = bendBalance;\\n            ethPayment =\\n                (bendReward * 10**18) /\\n                CONFIG.BEND_TOKEN_REWARD_PER_ETH;\\n        }\\n\\n        return (ethPayment, bendReward);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICryptoPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ICryptoPunks {\\n    function punkIndexToAddress(uint256 punkIndex)\\n        external\\n        view\\n        returns (address owner);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETHGateway {\\n    function depositETH(address onBehalfOf, uint16 referralCode)\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVeBend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVeBend {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime\\n    ) external;\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value) external;\\n\\n    function getLocked(address _addr)\\n        external\\n        view\\n        returns (LockedBalance memory);\\n\\n    function balanceOf(address _addr) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bendReward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_CREATE_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bendClaimedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockWeek\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPaymentRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPaymentTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"TREASURY_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BEND_TOKEN_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TEAM_WALLET_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"VEBEND_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"VEBEND_LOCK_MIN_WEEK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AUTO_DRAW_DIVIDEND_THRESHOLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BEND_TOKEN_REWARD_PER_ETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAX_ETH_PAYMENT_PER_ADDR\",\"type\":\"uint256\"}],\"internalType\":\"struct BendCompetition.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainDivident\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"enum BendCompetition.Stage\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uiData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"remainDivident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bendClaimedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bendPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bendTokenRewardPerETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainBendBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veBendLockMinWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veBendCurrentLockStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BendCompetition.Stage\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bendBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veBendBalance\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"veBendLockedBalanceAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"veBendLockedBalanceEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxETHPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBendReward\",\"type\":\"uint256\"}],\"internalType\":\"struct BendCompetition.UIData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BendCompetitionMainnet", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}