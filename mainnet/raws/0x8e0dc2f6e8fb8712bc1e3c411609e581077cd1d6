{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/CurveBDVFacet.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../libraries/LibMetaCurve.sol\\\";\\n\\n/*\\n * @author Publius\\n * @title CurveBDVFacet holds the Curve MetaPool BDV function.\\n*/\\ncontract CurveBDVFacet {\\n    function curveToBDV(uint256 amount) external view returns (uint256) {\\n        return LibMetaCurve.bdv(amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/LibMetaCurve.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ninterface I3Curve {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\\ninterface IMeta3Curve {\\n    function A_precise() external view returns (uint256);\\n    function get_previous_balances() external view returns (uint256[2] memory);\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\\nlibrary LibMetaCurve {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant A_PRECISION = 100;\\n    address private constant POOL = address(0x3a70DfA7d2262988064A2D051dd47521E43c9BdD);\\n    address private constant CRV3_POOL = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    uint256 private constant N_COINS  = 2;\\n    uint256 private constant RATE_MULTIPLIER = 1e12; // Bean has 6 Decimals\\n    uint256 private constant PRECISION = 1e18;\\n    uint256 private constant i = 0;\\n    uint256 private constant j = 1;\\n\\n    function bdv(uint256 amount) internal view returns (uint256) {\\n        // By using previous balances and the virtual price, we protect against flash loan\\n        uint256[2] memory balances = IMeta3Curve(POOL).get_previous_balances();\\n        uint256 virtualPrice = IMeta3Curve(POOL).get_virtual_price();\\n        uint256[2] memory xp = getXP(balances);\\n        uint256 a = IMeta3Curve(POOL).A_precise();\\n        uint256 D = getD(xp, a);\\n        uint256 price = getPrice(xp, a, D);\\n        uint256 totalSupply =  D * PRECISION / virtualPrice;\\n        uint256 beanValue = balances[0].mul(amount).div(totalSupply);\\n        uint256 curveValue = xp[1].mul(amount).div(totalSupply).div(price);\\n        return beanValue.add(curveValue);\\n    }\\n\\n    function getPrice(uint256[2] memory xp, uint256 a, uint256 D) private pure returns (uint) {\\n        uint256 x = xp[i] + RATE_MULTIPLIER;\\n        uint256 y = getY(x, xp, a, D);\\n        uint256 dy = xp[j] - y - 1;\\n        return dy;\\n    }\\n\\n    function getY(uint256 x, uint256[2] memory xp, uint256 a, uint256 D) private pure returns (uint256 y) {\\n        // Solution is taken from pool contract: 0x3a70DfA7d2262988064A2D051dd47521E43c9BdD\\n        uint256 S_ = 0;\\n        uint256 _x = 0;\\n        uint256 y_prev = 0;\\n        uint256 c = D;\\n        uint256 Ann = a * N_COINS;\\n\\n        for (uint256 _i = 0; _i < N_COINS; _i++) {\\n            if (_i == i) _x = x;\\n            else if (_i != j) _x = xp[_i];\\n            else continue;\\n            S_ += _x;\\n            c = c * D / (_x * N_COINS);\\n        }\\n\\n        c = c * D * A_PRECISION / (Ann * N_COINS);\\n        uint256 b = S_ + D * A_PRECISION / Ann; // - D\\n        y = D;\\n\\n        for (uint256 _i = 0; _i < 255; _i++) {\\n            y_prev = y;\\n            y = (y*y + c) / (2 * y + b - D);\\n            if (y > y_prev && y - y_prev <= 1) return y;\\n            else if (y_prev - y <= 1) return y;\\n        }\\n        require(false, \\\"Price: Convergence false\\\");\\n    }\\n\\n    function getD(uint256[2] memory xp, uint256 a) private pure returns (uint D) {\\n        // Solution is taken from pool contract: 0x3a70DfA7d2262988064A2D051dd47521E43c9BdD\\n        uint256 S;\\n        uint256 Dprev;\\n        for (uint _i = 0; _i < xp.length; _i++) {\\n            S += xp[_i];\\n        }\\n        if (S == 0) return 0;\\n\\n        D = S;\\n        uint256 Ann = a * N_COINS;\\n        for (uint _i = 0; _i < 256; _i++) {\\n            uint256 D_P = D;\\n            for (uint _j = 0; _j < xp.length; _j++) {\\n                D_P = D_P * D / (xp[_j] * N_COINS);\\n            }\\n            Dprev = D;\\n            D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P);\\n            if (D > Dprev && D - Dprev <= 1) return D;\\n            else if (Dprev - D <= 1) return D;\\n        }\\n        require(false, \\\"Price: Convergence false\\\");\\n        return 0;\\n    }\\n\\n    function getXP(uint256[2] memory balances) private view returns (uint256[2] memory xp) {\\n        xp[0] = balances[0].mul(RATE_MULTIPLIER);\\n        xp[1] = balances[1].mul(I3Curve(CRV3_POOL).get_virtual_price()).div(PRECISION);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"curveToBDV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveBDVFacet", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}