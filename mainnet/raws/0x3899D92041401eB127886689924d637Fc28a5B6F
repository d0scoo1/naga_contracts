{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 3000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControl`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == _msgSender(), \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IStrategy\\n/// @author Inspired by Yearn with slight changes from Angle Core Team\\n/// @notice Interface for yield farming strategies\\ninterface IStrategy is IAccessControl {\\n    function estimatedAPR() external view returns (uint256);\\n\\n    function poolManager() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256 _amountNeeded) external returns (uint256 amountFreed, uint256 _loss);\\n\\n    function setEmergencyExit() external;\\n\\n    function addGuardian(address _guardian) external;\\n\\n    function revokeGuardian(address _guardian) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/curve/IStableSwapPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// this interface doesn't wok with 3Pool as it doesn't return anything on add_liquidity, remove_liquidity_one_coin\\n\\ninterface IStableSwapPool is IERC20 {\\n    function A() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory amounts, uint256 max_burn_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/lido/ISteth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISteth is IERC20 {\\n    event Submitted(address sender, uint256 amount, address referral);\\n\\n    function submit(address) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BaseStrategyEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControl.sol\\\";\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\n\\n/// @title BaseStrategyEvents\\n/// @author Angle Core Team\\n/// @notice Events used in the abstract `BaseStrategy` contract\\ncontract BaseStrategyEvents {\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedMinReportDelayed(uint256 delay);\\n\\n    event UpdatedMaxReportDelayed(uint256 delay);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedIsRewardActivated(bool activated);\\n\\n    event UpdatedRewardAmountAndMinimumAmountMoved(uint256 _rewardAmount, uint256 _minimumAmountMoved);\\n\\n    event EmergencyExitActivated();\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BaseStrategyUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./BaseStrategyEvents.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title BaseStrategyUpgradeable\\n/// @author Forked from https://github.com/yearn/yearn-managers/blob/master/contracts/BaseStrategy.sol\\n/// @notice `BaseStrategyUpgradeable` implements all of the required functionalities to interoperate\\n/// with the `PoolManager` Contract.\\n/// @dev This contract should be inherited and the abstract methods implemented to adapt the `Strategy`\\n/// to the particular needs it has to create a return.\\nabstract contract BaseStrategyUpgradeable is BaseStrategyEvents, AccessControlUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASE = 10**18;\\n    uint256 public constant SECONDSPERYEAR = 31556952;\\n\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n    /// @notice Role for guardians and governors\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for keepers\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n\\n    // ======================== References to contracts ============================\\n\\n    /// @notice Reference to the protocol's collateral `PoolManager`\\n    IPoolManager public poolManager;\\n\\n    /// @notice Reference to the ERC20 farmed by this strategy\\n    IERC20 public want;\\n\\n    /// @notice Base of the ERC20 token farmed by this strategy\\n    uint256 public wantBase;\\n\\n    // ============================ Parameters =====================================\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a\\n    /// harvest trigger. See `setDebtThreshold()` for more details\\n    uint256 public debtThreshold;\\n\\n    /// @notice See note on `setEmergencyExit()`\\n    bool public emergencyExit;\\n\\n    // ============================ Constructor ====================================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Constructor of the `BaseStrategyUpgradeable`\\n    /// @param _poolManager Address of the `PoolManager` lending collateral to this strategy\\n    /// @param governor Governor address of the protocol\\n    /// @param guardian Address of the guardian\\n    function _initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers\\n    ) internal initializer {\\n        poolManager = IPoolManager(_poolManager);\\n        want = IERC20(poolManager.token());\\n        wantBase = 10**(IERC20Metadata(address(want)).decimals());\\n        require(guardian != address(0) && governor != address(0) && governor != guardian, \\\"0\\\");\\n        // AccessControl\\n        // Governor is guardian so no need for a governor role\\n        _setupRole(GUARDIAN_ROLE, guardian);\\n        _setupRole(GUARDIAN_ROLE, governor);\\n        _setupRole(POOLMANAGER_ROLE, address(_poolManager));\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n\\n        // Initializing roles first\\n        for (uint256 i = 0; i < keepers.length; i++) {\\n            require(keepers[i] != address(0), \\\"0\\\");\\n            _setupRole(KEEPER_ROLE, keepers[i]);\\n        }\\n        _setRoleAdmin(KEEPER_ROLE, GUARDIAN_ROLE);\\n\\n        debtThreshold = 100 * BASE;\\n        emergencyExit = false;\\n        // Give `PoolManager` unlimited access (might save gas)\\n        want.safeIncreaseAllowance(address(poolManager), type(uint256).max);\\n    }\\n\\n    // ========================== Core functions ===================================\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    function harvest() external {\\n        _report();\\n        // Check if free returns are left, and re-invest them\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Harvests the Strategy, recognizing any profits or losses and adjusting\\n    /// the Strategy's position.\\n    /// @param borrowInit Approximate optimal borrows to have faster convergence on the NR method\\n    function harvest(uint256 borrowInit) external onlyRole(KEEPER_ROLE) {\\n        _report();\\n        // Check if free returns are left, and re-invest them, gives an hint on the borrow amount to the NR method\\n        // to maximise revenue\\n        _adjustPosition(borrowInit);\\n    }\\n\\n    /// @notice Withdraws `_amountNeeded` to `poolManager`.\\n    /// @param _amountNeeded How much `want` to withdraw.\\n    /// @return amountFreed How much `want` withdrawn.\\n    /// @return _loss Any realized losses\\n    /// @dev This may only be called by the `PoolManager`\\n    function withdraw(uint256 _amountNeeded)\\n        external\\n        onlyRole(POOLMANAGER_ROLE)\\n        returns (uint256 amountFreed, uint256 _loss)\\n    {\\n        // Liquidate as much as possible `want` (up to `_amountNeeded`)\\n        (amountFreed, _loss) = _liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.safeTransfer(msg.sender, amountFreed);\\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\\n    }\\n\\n    // ============================ View functions =================================\\n\\n    /// @notice Provides an accurate estimate for the total amount of assets\\n    /// (principle + return) that this Strategy is currently managing,\\n    /// denominated in terms of `want` tokens.\\n    /// This total should be \\\"realizable\\\" e.g. the total value that could\\n    /// *actually* be obtained from this Strategy if it were to divest its\\n    /// entire position based on current on-chain conditions.\\n    /// @return The estimated total assets in this Strategy.\\n    /// @dev Care must be taken in using this function, since it relies on external\\n    /// systems, which could be manipulated by the attacker to give an inflated\\n    /// (or reduced) value produced by this function, based on current on-chain\\n    /// conditions (e.g. this function is possible to influence through\\n    /// flashloan attacks, oracle manipulations, or other DeFi attack\\n    /// mechanisms).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice Provides an indication of whether this strategy is currently \\\"active\\\"\\n    /// in that it is managing an active position, or will manage a position in\\n    /// the future. This should correlate to `harvest()` activity, so that Harvest\\n    /// events can be tracked externally by indexing agents.\\n    /// @return True if the strategy is actively managing a position.\\n    function isActive() public view returns (bool) {\\n        return estimatedTotalAssets() > 0;\\n    }\\n\\n    // ============================ Internal Functions =============================\\n\\n    /// @notice PrepareReturn the Strategy, recognizing any profits or losses\\n    /// @dev In the rare case the Strategy is in emergency shutdown, this will exit\\n    /// the Strategy's position.\\n    /// @dev  When `_report()` is called, the Strategy reports to the Manager (via\\n    /// `poolManager.report()`), so in some cases `harvest()` must be called in order\\n    /// to take in profits, to borrow newly available funds from the Manager, or\\n    /// otherwise adjust its position. In other cases `harvest()` must be\\n    /// called to report to the Manager on the Strategy's position, especially if\\n    /// any losses have occurred.\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function _report() internal {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtOutstanding = poolManager.debtOutstanding();\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            uint256 amountFreed = _liquidateAllPositions();\\n            if (amountFreed < debtOutstanding) {\\n                loss = debtOutstanding - amountFreed;\\n            } else if (amountFreed > debtOutstanding) {\\n                profit = amountFreed - debtOutstanding;\\n            }\\n            debtPayment = debtOutstanding - loss;\\n        } else {\\n            // Free up returns for Manager to pull\\n            (profit, loss, debtPayment) = _prepareReturn(debtOutstanding);\\n        }\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n\\n        // Allows Manager to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Manager.\\n        poolManager.report(profit, loss, debtPayment);\\n    }\\n\\n    /// @notice Performs any Strategy unwinding or other calls necessary to capture the\\n    /// \\\"free return\\\" this Strategy has generated since the last time its core\\n    /// position(s) were adjusted. Examples include unwrapping extra rewards.\\n    /// This call is only used during \\\"normal operation\\\" of a Strategy, and\\n    /// should be optimized to minimize losses as much as possible.\\n    ///\\n    /// This method returns any realized profits and/or realized losses\\n    /// incurred, and should return the total amounts of profits/losses/debt\\n    /// payments (in `want` tokens) for the Manager's accounting (e.g.\\n    /// `want.balanceOf(this) >= _debtPayment + _profit`).\\n    ///\\n    /// `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n    /// debt limit, otherwise its value will be how far past the debt limit\\n    /// the Strategy is. The Strategy's debt limit is configured in the Manager.\\n    ///\\n    /// NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n    ///       It is okay for it to be less than `_debtOutstanding`, as that\\n    ///       should only used as a guide for how much is left to pay back.\\n    ///       Payments should be made to minimize loss from slippage, debt,\\n    ///       withdrawal fees, etc.\\n    ///\\n    /// See `poolManager.debtOutstanding()`.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /// @notice Performs any adjustments to the core position(s) of this Strategy given\\n    /// what change the Manager made in the \\\"investable capital\\\" available to the\\n    /// Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n    /// was made is available for reinvestment. Also note that this number\\n    /// could be 0, and you should handle that scenario accordingly.\\n    function _adjustPosition() internal virtual;\\n\\n    /// @notice same as _adjustPosition but with an initial parameters\\n    function _adjustPosition(uint256) internal virtual;\\n\\n    /// @notice Liquidates up to `_amountNeeded` of `want` of this strategy's positions,\\n    /// irregardless of slippage. Any excess will be re-invested with `_adjustPosition()`.\\n    /// This function should return the amount of `want` tokens made available by the\\n    /// liquidation. If there is a difference between them, `_loss` indicates whether the\\n    /// difference is due to a realized loss, or if there is some other sitution at play\\n    /// (e.g. locked funds) where the amount made available is less than what is needed.\\n    ///\\n    /// NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _liquidatedAmount, uint256 _loss);\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\\n\\n    /// @notice Override this to add all tokens/tokenized positions this contract\\n    /// manages on a *persistent* basis (e.g. not just for swapping back to\\n    /// want ephemerally).\\n    ///\\n    /// NOTE: Do *not* include `want`, already included in `sweep` below.\\n    ///\\n    /// Example:\\n    /// ```\\n    ///    function _protectedTokens() internal override view returns (address[] memory) {\\n    ///      address[] memory protected = new address[](3);\\n    ///      protected[0] = tokenA;\\n    ///      protected[1] = tokenB;\\n    ///      protected[2] = tokenC;\\n    ///      return protected;\\n    ///    }\\n    /// ```\\n    function _protectedTokens() internal view virtual returns (address[] memory);\\n\\n    // ============================== Governance ===================================\\n\\n    /// @notice Activates emergency exit. Once activated, the Strategy will exit its\\n    /// position upon the next harvest, depositing all funds into the Manager as\\n    /// quickly as is reasonable given on-chain conditions.\\n    /// @dev This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same\\n    /// time update the debt ratio\\n    /// @dev This function can only be called once by the `PoolManager` contract\\n    /// @dev See `poolManager.setEmergencyExit()` and `harvest()` for further details.\\n    function setEmergencyExit() external onlyRole(POOLMANAGER_ROLE) {\\n        emergencyExit = true;\\n        emit EmergencyExitActivated();\\n    }\\n\\n    /// @notice Sets how far the Strategy can go into loss without a harvest and report\\n    /// being required.\\n    /// @param _debtThreshold How big of a loss this Strategy may carry without\\n    /// @dev By default this is 0, meaning any losses would cause a harvest which\\n    /// will subsequently report the loss to the Manager for tracking.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyRole(GUARDIAN_ROLE) {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /// @notice Removes tokens from this Strategy that are not the type of tokens\\n    /// managed by this Strategy. This may be used in case of accidentally\\n    /// sending the wrong kind of token to this Strategy.\\n    ///\\n    /// Tokens will be sent to `governance()`.\\n    ///\\n    /// This will fail if an attempt is made to sweep `want`, or any tokens\\n    /// that are protected by this Strategy.\\n    ///\\n    /// This may only be called by governance.\\n    /// @param _token The token to transfer out of this `PoolManager`.\\n    /// @param to Address to send the tokens to.\\n    /// @dev\\n    /// Implement `_protectedTokens()` to specify any additional tokens that\\n    /// should be protected from sweeping in addition to `want`.\\n    function sweep(address _token, address to) external onlyRole(GUARDIAN_ROLE) {\\n        require(_token != address(want), \\\"93\\\");\\n\\n        address[] memory __protectedTokens = _protectedTokens();\\n        for (uint256 i = 0; i < __protectedTokens.length; i++)\\n            // In the strategy we use so far, the only protectedToken is the want token\\n            // and this has been checked above\\n            require(_token != __protectedTokens[i], \\\"93\\\");\\n\\n        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    // ============================ Manager functions ==============================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because Access Control is not defined\\n    /// in PoolManagerInternal\\n    function addGuardian(address _guardian) external virtual;\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StETHStrategy/StETHStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"../../interfaces/external/curve/IStableSwapPool.sol\\\";\\nimport \\\"../../interfaces/external/lido/ISteth.sol\\\";\\nimport \\\"../../interfaces/external/IWETH9.sol\\\";\\nimport \\\"../BaseStrategyUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title StrategyStETHAcc\\n/// @author Forked from https://github.com/Grandthrax/yearn-steth-acc/blob/master/contracts/Strategy.sol\\n/// @notice A strategy designed to getting yield on wETH by putting ETH in Lido or Curve for stETH and exiting\\n/// for wETH\\ncontract StETHStrategy is BaseStrategyUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @notice Current `apr` of the strategy: this apr needs to be manually filled by the strategist\\n    /// and updated when Lido's APR changes. It is put like that as there is no easy way to compute Lido's APR\\n    /// on-chain\\n    /// @notice Base used is `BASE_PARAMS`\\n    uint256 public apr;\\n\\n    /// @notice Reference to the Curve ETH/stETH\\n    IStableSwapPool public stableSwapSTETH;\\n    /// @notice Reference to wETH, it should normally be equal to `want`\\n    IWETH9 public weth;\\n    /// @notice Reference to the stETH token\\n    ISteth public stETH;\\n\\n    address private _referral = 0xdC4e6DFe07EFCa50a197DF15D9200883eF4Eb1c8; //stratms. for recycling and redepositing\\n    /// @notice Maximum trade size within the strategy\\n    uint256 public maxSingleTrade;\\n    /// @notice Parameter used for slippage protection\\n    uint256 public constant DENOMINATOR = 10_000;\\n    /// @notice Slippage parameter for the swaps on Curve: out of `DENOMINATOR`\\n    uint256 public slippageProtectionOut; // = 50; //out of 10000. 50 = 0.5%\\n\\n    /// @notice ID of ETH in the Curve pool\\n    int128 private constant _WETHID = 0;\\n    /// @notice ID of stETH in the Curve pool\\n    int128 private constant _STETHID = 1;\\n\\n    /// @notice Constructor of the `Strategy`\\n    /// @param _poolManager Address of the `PoolManager` lending to this strategy\\n    /// @param governor Address of the governance multisig with governor privilege\\n    /// @param guardian Address of the guardian\\n    /// @param keepers List of addresses of keepers\\n    /// @param _stableSwapSTETH Address of the stETH/ETH Curve pool\\n    /// @param _weth Address of wETH\\n    /// @param _stETH Address of the stETH token\\n    /// @param _apr Estimated apr on staked ETH\\n    function initialize(\\n        address _poolManager,\\n        address governor,\\n        address guardian,\\n        address[] memory keepers,\\n        address _stableSwapSTETH,\\n        address _weth,\\n        ISteth _stETH,\\n        uint256 _apr\\n    ) external {\\n        _initialize(_poolManager, governor, guardian, keepers);\\n        require(address(want) == _weth, \\\"20\\\");\\n        stableSwapSTETH = IStableSwapPool(_stableSwapSTETH);\\n        weth = IWETH9(_weth);\\n        stETH = ISteth(_stETH);\\n        apr = _apr;\\n        _stETH.approve(_stableSwapSTETH, type(uint256).max);\\n        maxSingleTrade = 10_000 * 1e18;\\n        slippageProtectionOut = 30;\\n    }\\n\\n    /// @notice This contract gets ETH and so it needs this function\\n    receive() external payable {}\\n\\n    // ========================== View Functions ===================================\\n\\n    /// @notice View function to check the total assets managed by the strategy\\n    /// @dev We are purposely treating stETH and ETH as being equivalent.\\n    /// This is for a few reasons. The main one is that we do not have a good way to value\\n    /// stETH at any current time without creating exploit routes.\\n    /// Currently you can mint eth for steth but can't burn steth for eth so need to sell.\\n    /// Once eth 2.0 is merged you will be able to burn 1-1 as well.\\n    /// The main downside here is that we will noramlly overvalue our position as we expect stETH\\n    /// to trade slightly below peg. That means we will earn profit on deposits and take losses on withdrawals.\\n    /// This may sound scary but it is the equivalent of using virtualprice in a curve lp.\\n    /// As we have seen from many exploits, virtual pricing is safer than touch pricing.\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        return stethBalance() + wantBalance();\\n    }\\n\\n    /// @notice Returns the wETH balance of the strategy\\n    function wantBalance() public view returns (uint256) {\\n        return want.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the stETH balance of the strategy\\n    function stethBalance() public view returns (uint256) {\\n        return stETH.balanceOf(address(this));\\n    }\\n\\n    /// @notice The ETH APR of owning stETH\\n    function estimatedAPR() external view returns (uint256) {\\n        return apr;\\n    }\\n\\n    // ========================== Strategy Functions ===============================\\n\\n    /// @notice Frees up profit plus `_debtOutstanding`.\\n    /// @param _debtOutstanding Amount to withdraw\\n    /// @return _profit Profit freed by the call\\n    /// @return _loss Loss discovered by the call\\n    /// @return _debtPayment Amount freed to reimburse the debt: it is an amount made available for the `PoolManager`\\n    /// @dev If `_debtOutstanding` is more than we can free we get as much as possible.\\n    function _prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        uint256 wantBal = wantBalance();\\n        uint256 stethBal = stethBalance();\\n        uint256 totalAssets = wantBal + stethBal;\\n\\n        uint256 debt = poolManager.strategies(address(this)).totalStrategyDebt;\\n\\n        if (totalAssets >= debt) {\\n            _profit = totalAssets - debt;\\n\\n            uint256 toWithdraw = _profit + _debtOutstanding;\\n            // If more should be withdrawn than what's in the strategy: we divest from Curve\\n            if (toWithdraw > wantBal) {\\n                // We step our withdrawals. Adjust max single trade to withdraw more\\n                uint256 willWithdraw = Math.min(maxSingleTrade, toWithdraw - wantBal);\\n                uint256 withdrawn = _divest(willWithdraw);\\n                if (withdrawn < willWithdraw) {\\n                    _loss = willWithdraw - withdrawn;\\n                }\\n            }\\n            wantBal = wantBalance();\\n\\n            // Computing net off profit and loss\\n            if (_profit >= _loss) {\\n                _profit = _profit - _loss;\\n                _loss = 0;\\n            } else {\\n                _profit = 0;\\n                _loss = _loss - _profit;\\n            }\\n\\n            // profit + _debtOutstanding must be <= wantbalance. Prioritise profit first\\n            if (wantBal < _profit) {\\n                _profit = wantBal;\\n            } else if (wantBal < toWithdraw) {\\n                _debtPayment = wantBal - _profit;\\n            } else {\\n                _debtPayment = _debtOutstanding;\\n            }\\n        } else {\\n            _loss = debt - totalAssets;\\n        }\\n    }\\n\\n    /// @notice Liquidates everything and returns the amount that got freed.\\n    /// This function is used during emergency exit instead of `_prepareReturn()` to\\n    /// liquidate all of the Strategy's positions back to the Manager.\\n    function _liquidateAllPositions() internal override returns (uint256 _amountFreed) {\\n        _divest(stethBalance());\\n        _amountFreed = wantBalance();\\n    }\\n\\n    /// @notice Function called when harvesting to invest in stETH\\n    /// Function used in other contracts, in this strategy it is useless\\n    function _adjustPosition(uint256) internal override {\\n        _adjustPosition();\\n    }\\n\\n    /// @notice Function called when harvesting to invest in stETH\\n    function _adjustPosition() internal override {\\n        uint256 toInvest = wantBalance();\\n        if (toInvest > 0) {\\n            uint256 realInvest = Math.min(maxSingleTrade, toInvest);\\n            _invest(realInvest);\\n        }\\n    }\\n\\n    /// @notice Invests `_amount` wETH in stETH\\n    /// @param _amount Amount of wETH to put in stETH\\n    /// @return The amount of stETH received from the investment\\n    /// @dev This function chooses the optimal route between going to Lido directly or doing a swap on Curve\\n    /// @dev This function automatically wraps wETH to ETH\\n    function _invest(uint256 _amount) internal returns (uint256) {\\n        uint256 before = stethBalance();\\n        // Unwrapping the tokens\\n        weth.withdraw(_amount);\\n        // Test if we should buy from Curve instead of minting from Lido\\n        uint256 out = stableSwapSTETH.get_dy(_WETHID, _STETHID, _amount);\\n        if (out < _amount) {\\n            // If we get less than one stETH per wETH we use Lido\\n            stETH.submit{ value: _amount }(_referral);\\n        } else {\\n            // Otherwise, we do a Curve swap\\n            stableSwapSTETH.exchange{ value: _amount }(_WETHID, _STETHID, _amount, _amount);\\n        }\\n\\n        return stethBalance() - before;\\n    }\\n\\n    /// @notice Divests stETH on Curve and gets wETH back to the strategy in exchange\\n    /// @param _amount Amount of stETH to divest\\n    /// @dev Curve is the only place to convert stETH to ETH\\n    function _divest(uint256 _amount) internal returns (uint256) {\\n        uint256 before = wantBalance();\\n\\n        // Computing slippage protection for the swap\\n        uint256 slippageAllowance = (_amount * (DENOMINATOR - slippageProtectionOut)) / DENOMINATOR;\\n        // Curve swap\\n        stableSwapSTETH.exchange(_STETHID, _WETHID, _amount, slippageAllowance);\\n\\n        weth.deposit{ value: address(this).balance }();\\n\\n        return wantBalance() - before;\\n    }\\n\\n    /// @notice Attempts to withdraw `_amountNeeded` from the strategy and lets the user decide if they take the loss or not\\n    /// @param _amountNeeded Amount to withdraw from the strategy\\n    function _liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        override\\n        returns (uint256 _liquidatedAmount, uint256 _loss)\\n    {\\n        uint256 wantBal = wantBalance();\\n        if (wantBal < _amountNeeded) {\\n            uint256 toWithdraw = _amountNeeded - wantBal;\\n            uint256 withdrawn = _divest(toWithdraw);\\n            if (withdrawn < toWithdraw) {\\n                _loss = toWithdraw - withdrawn;\\n            }\\n        }\\n\\n        _liquidatedAmount = _amountNeeded - _loss;\\n    }\\n\\n    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary\\n\\n    // Override this to add all tokens/tokenized positions this contract manages\\n    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)\\n    // NOTE: Do *not* include `want`, already included in `sweep` below\\n    //\\n    // Example:\\n    //\\n    //    function _protectedTokens() internal override view returns (address[] memory) {\\n    //      address[] memory protected = new address[](3);\\n    //      protected[0] = tokenA;\\n    //      protected[1] = tokenB;\\n    //      protected[2] = tokenC;\\n    //      return protected;\\n    //    }\\n    function _protectedTokens() internal view override returns (address[] memory) {\\n        address[] memory protected = new address[](1);\\n        protected[0] = address(stETH);\\n\\n        return protected;\\n    }\\n\\n    // ============================ Governance =====================================\\n\\n    /// @notice Updates the referral code for Lido\\n    /// @param newReferral Address of the new referral\\n    function updateReferral(address newReferral) public onlyRole(GUARDIAN_ROLE) {\\n        _referral = newReferral;\\n    }\\n\\n    /// @notice Updates the size of a trade in the strategy\\n    /// @param _maxSingleTrade New `maxSingleTrade` value\\n    function updateMaxSingleTrade(uint256 _maxSingleTrade) public onlyRole(GUARDIAN_ROLE) {\\n        maxSingleTrade = _maxSingleTrade;\\n    }\\n\\n    /// @notice Changes the estimated APR of the strategy\\n    /// @param _apr New strategy APR\\n    function setApr(uint256 _apr) public onlyRole(GUARDIAN_ROLE) {\\n        apr = _apr;\\n    }\\n\\n    /// @notice Updates the maximum slippage protection parameter\\n    /// @param _slippageProtectionOut New slippage protection parameter\\n    function updateSlippageProtectionOut(uint256 _slippageProtectionOut) public onlyRole(GUARDIAN_ROLE) {\\n        slippageProtectionOut = _slippageProtectionOut;\\n    }\\n\\n    /// @notice Invests `_amount` in stETH\\n    /// @param _amount Amount to invest\\n    /// @dev This function allows to override the behavior that could be obtained through `harvest` calls\\n    function invest(uint256 _amount) external onlyRole(GUARDIAN_ROLE) {\\n        require(wantBalance() >= _amount);\\n        uint256 realInvest = Math.min(maxSingleTrade, _amount);\\n        _invest(realInvest);\\n    }\\n\\n    /// @notice Rescues stuck ETH from the strategy\\n    /// @dev This strategy should never have stuck eth, but let it just in case\\n    function rescueStuckEth() external onlyRole(GUARDIAN_ROLE) {\\n        weth.deposit{ value: address(this).balance }();\\n    }\\n\\n    // ========================== Manager functions ================================\\n\\n    /// @notice Adds a new guardian address and echoes the change to the contracts\\n    /// that interact with this collateral `PoolManager`\\n    /// @param _guardian New guardian address\\n    /// @dev This internal function has to be put in this file because `AccessControl` is not defined\\n    /// in `PoolManagerInternal`\\n    function addGuardian(address _guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        // Granting the new role\\n        // Access control for this contract\\n        _grantRole(GUARDIAN_ROLE, _guardian);\\n    }\\n\\n    /// @notice Revokes the guardian role and propagates the change to other contracts\\n    /// @param guardian Old guardian address to revoke\\n    function revokeGuardian(address guardian) external override onlyRole(POOLMANAGER_ROLE) {\\n        _revokeRole(GUARDIAN_ROLE, guardian);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyExitActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"UpdatedIsRewardActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinReportDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumAmountMoved\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardAmountAndMinimumAmountMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDSPERYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowInit\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_stableSwapSTETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ISteth\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSingleTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract ISteth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableSwapSTETH\",\"outputs\":[{\"internalType\":\"contract IStableSwapPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSingleTrade\",\"type\":\"uint256\"}],\"name\":\"updateMaxSingleTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReferral\",\"type\":\"address\"}],\"name\":\"updateReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageProtectionOut\",\"type\":\"uint256\"}],\"name\":\"updateSlippageProtectionOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StETHStrategy", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "3000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}