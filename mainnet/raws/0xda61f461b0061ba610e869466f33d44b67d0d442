{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nAxiom (Ax-1)\r\n\r\nWEBSITE:\r\nhttps://axiomspace.net/\r\n\r\nTELEGRAM:\r\nhttps://t.me/axiomspace_eth\r\n\r\nTWITTER:\r\nhttps://twitter.com/AxiomSpaceEth\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.9;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n \r\n}\r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n \r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n \r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n \r\n    function factory() external pure returns (address);\r\n \r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n \r\ncontract AXIOM is Context, IERC20, Ownable {\r\n \r\n    using SafeMath for uint256;\r\n \r\n    string private constant _name = \"Axiom Space\";//\r\n    string private constant _symbol = \"Ax-1\";//\r\n    uint8 private constant _decimals = 9;\r\n \r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 69000000000000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public launchBlock;\r\n \r\n    //Buy Fee\r\n    uint256 private _redisFeeOnBuy = 0;//\r\n    uint256 private _taxFeeOnBuy = 5;//\r\n \r\n    //Sell Fee\r\n    uint256 private _redisFeeOnSell = 0;//\r\n    uint256 private _taxFeeOnSell = 20;//\r\n\r\n\r\n \r\n    //Original Fee\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _taxFee = _taxFeeOnSell;\r\n \r\n    uint256 private _previousredisFee = _redisFee;\r\n    uint256 private _previoustaxFee = _taxFee;\r\n \r\n    mapping(address => bool) public bots;\r\n    mapping(address => uint256) private cooldown;\r\n \r\n    address payable private _devAddress = payable(0x85FF6C0aCE065545498e46c6Ed656d07329F11dc);//\r\n    address payable private _marketingAddress = payable(0xBE39B83fD81AE1Db582EEC219FeC3D7C733728A6);//\r\n \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n \r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n \r\n    uint256 public _maxTxAmount = 690000000005000000000 * 10**9; //\r\n    uint256 public _maxWalletSize = 690000000010000000000 * 10**9; //\r\n    uint256 public _swapTokensAtAmount = 10000000000000000 * 10**9; //\r\n \r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n \r\n    constructor() {\r\n \r\n        _rOwned[_msgSender()] = _rTotal;\r\n \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_devAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n \r\n        bots[address(0xE4D448e3a7d63555f8bbBB51464455979a47e54d)] = true;\r\n        bots[address(0x5d88C2C5a93d147e845f0146D27537FfD881c867)] = true;\r\n        bots[address(0xab8C24b79ab5AD47Cfd22d8CD1214220a642b58B)] = true;\r\n        bots[address(0x5B436b7CC93D246D3a62Fc7a95339f6faC7d2A4a)] = true;\r\n        bots[address(0xaAdBedA3c4B14211c8315bd3270C91444080FA00)] = true;\r\n        bots[address(0xcF700a80b37751a53b8671b8BB51F334F2C10386)] = true;\r\n        bots[address(0x16A67875f239939617D409CFdF132175B952c99b)] = true;\r\n        bots[address(0x855e9d3201e7c61A2d01C3b9C5B2c2A3B8012205)] = true;\r\n        bots[address(0xBbDEe82f5C9Fd8951B4ec86Ebf63e206b44B3d51)] = true;\r\n        bots[address(0xdEcaE214FC6CCc24c5dF1AbBdEbb7030be67CeD6)] = true;\r\n        bots[address(0x8515544FdAf6200ac6a155b184Cd1F4d1d530d24)] = true;\r\n        bots[address(0xA9fAfA2BF10b8bbDF8869bb8beE62DF23827794B)] = true;\r\n        bots[address(0xcaD621da75a66c7A8f4FF86D30A2bF981Bfc8FdD)] = true;\r\n        bots[address(0x92eAeA03584d6b2c5852EBcbF9931dA8C1Ff6fF0)] = true;\r\n        bots[address(0x081DC2d8EA7F2daa13fFf6A041252AACd40e01f1)] = true;\r\n        bots[address(0x00EC9e5A060C465E39b0FA905680d857637B0e26)] = true;\r\n        bots[address(0x666666B08D1A825b9745F38Ae0d2B5DC5cFE6666)] = true;\r\n\r\n         \r\n        bots[address(0xCdD1D60Fa41A57d374c2B1D4bAa4eC943dAeD031)] = true;\r\n        bots[address(0x9B34dA05b216506f2206e6a9807578920d95218E)] = true;\r\n        bots[address(0x06063dA44a2A9baAE7d1508a5D39abEb6c1b13B2)] = true;\r\n        bots[address(0x0540810eAe14A14CB2217489C12a7A6fdbE8fD1f)] = true;\r\n        bots[address(0xE20d08F7F51F4E477A92275F1121832c01916aF5)] = true;\r\n        bots[address(0x1cF0D4A40D1DA64232F9F2bDEc9684AAdF354411)] = true;\r\n        bots[address(0xB0B7ffC97839c42e0f3108482D4090D2684dADAE)] = true;\r\n        bots[address(0x065455488a97C9F59E9F4CA635a27077d0ee741F)] = true;\r\n        bots[address(0x3b9A8249A749098c7dB331aE353Dfd50DF06929e)] = true;\r\n        bots[address(0x188F230210c6f478546d0e23cF05d8Ad5c6482A9)] = true;\r\n        bots[address(0x0d495a1B363a276ee63A05b161e28581957a43f5)] = true;\r\n        bots[address(0xE24f657e7d6fCFA7E6763320Cbb8fA80d898559D)] = true;\r\n        bots[address(0xB7D34e3bc9d2CcB498225841CbA9EE8011b7eB10)] = true;\r\n        bots[address(0x74497875a2A58db7eD286C33B43a035f2EA630C2)] = true;\r\n        bots[address(0xD1A411D56573560D7356a50582e68350d9eC1D03)] = true;\r\n        bots[address(0x72e307c6Ed797A150B9Ca4b820Cf8b40aEd59741)] = true;\r\n        bots[address(0xCdD1D60Fa41A57d374c2B1D4bAa4eC943dAeD031)] = true;\r\n        bots[address(0xa0177FF4Cff4a536A6be8e6d68f05E7eC43C86Ae)] = true;\r\n\r\n        bots[address(0x0540810eAe14A14CB2217489C12a7A6fdbE8fD1f)] = true;\r\n        bots[address(0xE841182eB5a5721ec893524001522933115cE1f7)] = true;\r\n        bots[address(0x9B34dA05b216506f2206e6a9807578920d95218E)] = true;\r\n        bots[address(0x06063dA44a2A9baAE7d1508a5D39abEb6c1b13B2)] = true;\r\n        bots[address(0xE20d08F7F51F4E477A92275F1121832c01916aF5)] = true;\r\n        bots[address(0x139e56F24fD7f4F51e8baa170E74C23596A3cBf7)] = true;\r\n        bots[address(0x74731b53eDF6B6b0dFa7e6D8284811271c005d35)] = true;\r\n        bots[address(0xa2E5053c54947cB6722DCa5169B6e8e7d09F72A6)] = true;\r\n        bots[address(0x844fD6297c8d5067aDBa002242f657956AE5e516)] = true;\r\n        bots[address(0xE6fd7A8F1A97c047e9E4CeC3aaA2839a9CcfB88c)] = true;\r\n        bots[address(0xb689A89954C04C4a238697b64379810a666287ea)] = true;\r\n        bots[address(0xCb9CebfA5B96444Eb91021e44c8486dEf08094c7)] = true;\r\n        bots[address(0xFda6d2f9Fa960c2Feac25560092dd2fF07E87aeE)] = true;\r\n        bots[address(0xbdD51b66C58ad97109825cddfADB4525b6118b56)] = true;\r\n        bots[address(0x068095D4fF8f8785D84c68a31EA3DC1EFd1C4a86)] = true;\r\n        bots[address(0x033e2eA0b2A0509c8C19bae691Cf43f421d0C646)] = true;\r\n        bots[address(0x2B1AC39fEF977C280244423Ab6cf1F25C9Cc4731)] = true;\r\n        bots[address(0xF2A66B4CFEbc62DA69d06901B01C6394646Bc75d)] = true;\r\n\r\n        bots[address(0x5F0CfCD36fF0Fa9D5E3aDd8d14d9Ee33E4cf07e4)] = true;\r\n        bots[address(0x8f5094ac8D30Fd14602366c0aCD6584CB32C90C9)] = true;\r\n        bots[address(0xC0b907c02aCa4e19aFDa6A9d670ce1868796695B)] = true;\r\n        bots[address(0x5E48E19BB60E1EdEC93653EE2C6e6537E7b63eb2)] = true;\r\n        bots[address(0x710AbAA993F7EEE4b80CD2Bc80eED5B4ae99165F)] = true;\r\n        bots[address(0x67Da9c8F1Be7984898b4285717dE2aADe896e583)] = true;\r\n        bots[address(0x57fD1207E9cc0F6B847C67De1b9c6b2516A86083)] = true;\r\n        bots[address(0xD3e2784Ea0D237cfCAa6F41a5197f83626131409)] = true;\r\n        bots[address(0xB0B7ffC97839c42e0f3108482D4090D2684dADAE)] = true;\r\n        bots[address(0x90E24d68e572900987B10865304cd0F63ba1c771)] = true;\r\n        bots[address(0x7AF0C539Bad46E7Ff84Be8e11CD5E5bfFbf191D3)] = true;\r\n        bots[address(0x166678020850A6db0128c839E57E299be8c7C1e5)] = true;\r\n        bots[address(0xEdb0bE2207664EA3D1873a134177f05Ccd799fcf)] = true;\r\n        bots[address(0x0532D5A747828508dDdfBf8aD224C9c9cE97EE5b)] = true;\r\n        bots[address(0xF848DB385e5d79472ca3B97F9468Dc6d6B25FBaC)] = true;\r\n        bots[address(0xb6268875bfEb716B558db76f418F18D8413D8563)] = true;\r\n        bots[address(0x75A292e7DE2981184D8bD026b9e1d77A013365f9)] = true;\r\n        bots[address(0x381202e56FE3aAF4b7b34b89FaC0aa8EE9e7917E)] = true;\r\n\r\n        bots[address(0x602eCa834611fbd9Ce68f99AEE20e29D567f530F)] = true;\r\n        bots[address(0x5F899bfB8f9DD6919367dd05af99Eb11625Be9A8)] = true;\r\n        bots[address(0x2f382D0d5c29b1Eb88164b07fFf4B9B7C0Db5758)] = true;\r\n        bots[address(0x5a64Dc3317D5D0C7670e02b4C610912d30a64aEf)] = true;\r\n        bots[address(0xB5da213AC82051d095162AE2a5aDf16837068f05)] = true;\r\n        bots[address(0xd936eb8739D3718e58aB79462b293DA4e68127B4)] = true;\r\n        bots[address(0xB450B091960d16BE3b22fc6700e51F4634A6fb8d)] = true;\r\n        bots[address(0x6059c2d0B4fed7Ca84Bf3fac4DCe69E0F7a0bb45)] = true;\r\n        bots[address(0x533C0E866A4cDB955057515d820E38DB2446bBd4)] = true;\r\n        bots[address(0x9dda370f43567b9C757A3F946705567BcE482C42)] = true;\r\n        bots[address(0xe1991b3EC01AFf856B93B2DB7b3b90b45c98Fbfc)] = true;\r\n        bots[address(0xF20e53b1b21b4cF9e688aa65439e4C364F51fAc9)] = true;\r\n        bots[address(0xE24f657e7d6fCFA7E6763320Cbb8fA80d898559D)] = true;\r\n        bots[address(0xB7D34e3bc9d2CcB498225841CbA9EE8011b7eB10)] = true;\r\n        bots[address(0x0d495a1B363a276ee63A05b161e28581957a43f5)] = true;\r\n        bots[address(0x6059c2d0B4fed7Ca84Bf3fac4DCe69E0F7a0bb45)] = true;\r\n        bots[address(0x72e307c6Ed797A150B9Ca4b820Cf8b40aEd59741)] = true;\r\n        bots[address(0xD1A411D56573560D7356a50582e68350d9eC1D03)] = true;\r\n        bots[address(0x74497875a2A58db7eD286C33B43a035f2EA630C2)] = true;\r\n        bots[address(0xE841182eB5a5721ec893524001522933115cE1f7)] = true;\r\n        bots[address(0xa0177FF4Cff4a536A6be8e6d68f05E7eC43C86Ae)] = true;\r\n\r\n \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n \r\n    function tokenFromReflection(uint256 rAmount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n \r\n    function removeAllFee() private {\r\n        if (_redisFee == 0 && _taxFee == 0) return;\r\n \r\n        _previousredisFee = _redisFee;\r\n        _previoustaxFee = _taxFee;\r\n \r\n        _redisFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n \r\n    function restoreAllFee() private {\r\n        _redisFee = _previousredisFee;\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n \r\n        if (from != owner() && to != owner()) {\r\n \r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n \r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n \r\n            if(block.number <= launchBlock && from == uniswapV2Pair && to != address(uniswapV2Router) && to != address(this)){   \r\n                bots[to] = true;\r\n            } \r\n \r\n            if(to != uniswapV2Pair) {\r\n                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n \r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n \r\n            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n \r\n        bool takeFee = true;\r\n \r\n        //Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        } else {\r\n \r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _taxFee = _taxFeeOnBuy;\r\n            }\r\n \r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _taxFee = _taxFeeOnSell;\r\n            }\r\n \r\n        }\r\n \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function sendETHToFee(uint256 amount) private {\r\n        _devAddress.transfer(amount.div(2));\r\n        _marketingAddress.transfer(amount.div(2));\r\n    }\r\n \r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n        launchBlock = block.number;\r\n    }\r\n \r\n    function manualswap() external {\r\n        require(_msgSender() == _devAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n \r\n    function manualsend() external {\r\n        require(_msgSender() == _devAddress || _msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n \r\n    function blockBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n \r\n    function unblockBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n \r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tTeam\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n \r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n            _getTValues(tAmount, _redisFee, _taxFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n            _getRValues(tAmount, tFee, tTeam, currentRate);\r\n \r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 redisFee,\r\n        uint256 taxFee\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n \r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n \r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tTeam,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n \r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n \r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n \r\n        return rSupply.div(tSupply);\r\n    }\r\n \r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n \r\n        return (rSupply, tSupply);\r\n    }\r\n \r\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n        _redisFeeOnBuy = redisFeeOnBuy;\r\n        _redisFeeOnSell = redisFeeOnSell;\r\n \r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n    }\r\n \r\n    //Set minimum tokens required to swap.\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n \r\n \r\n    //Set maximum transaction\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n \r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n \r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AXIOM", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bdf5bf0f363874ea99dcbc9a865fa9f7d6acfa53f74a310db40b896adbb7a188"}]}