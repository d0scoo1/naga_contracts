{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/factory/SimpleFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ncontract SimpleFactory {\\n\\n    /**\\n    * @dev Deploys any contract using create2 asm opcode creating the same address for same bytecode\\n     * @param bytecode - bytecode packed with params to deploy\\n     * @param constructorParams - ctor params encoded with abi.encode\\n     * @param salt - salt required by create2\\n     */\\n    function deployCreate2WithParams(bytes memory bytecode, bytes memory constructorParams, bytes32 salt) public returns(address) {\\n        return deployCreate2(abi.encodePacked(bytecode, constructorParams), salt);\\n    }\\n\\n    /**\\n    * @dev Deploys any contract using create2 asm opcode creating the same address for same bytecode\\n     * @param bytecode - bytecode packed with params to deploy\\n     * @param salt - salt required by create2\\n     */\\n    function deployCreate2(bytes memory bytecode, bytes32 salt) public returns(address) {\\n        address newContract;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            newContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        require(_isContract(newContract), \\\"Deploy failed\\\");\\n\\n        return newContract;\\n    }\\n\\n    /**\\n    * @dev Returns True if provided address is a contract\\n     * @param account Prospective contract address\\n     * @return True if there is a contract behind the provided address\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"constructorParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployCreate2WithParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleFactory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}