{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/key-pass/SwapERC721KeyPassUAEUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"./IERC721KeyPassUAEUpgradeable.sol\\\";\\r\\n\\r\\ncontract SwapERC721KeyPassUAEUpgradeable is Initializable, ContextUpgradeable, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n\\r\\n    // Swap key pass contract address\\r\\n    address private _erc721KeyPassAddress;\\r\\n    // Swap trusted signer address\\r\\n    address private _trustedSignerAddress;\\r\\n\\r\\n    // Swap plan parameters\\r\\n    struct PlanData {\\r\\n        uint256 tokenAmount;\\r\\n        uint256 tokenAmountLimit;\\r\\n        uint256 tokenPrice;\\r\\n        uint256 tokenPerClaimLimit;\\r\\n        uint256 ethAmount;\\r\\n    }\\r\\n    PlanData private _freePlan;\\r\\n    PlanData private _paidPlan;\\r\\n\\r\\n    // Swap stage parameters\\r\\n    struct StageData {\\r\\n        bool mintingEnabled;\\r\\n        bool whitelistRequired;\\r\\n        bool firstClaimFree;\\r\\n        uint256 ethAmount;\\r\\n        uint256 totalClaimedFreeTokens;\\r\\n        uint256 totalClaimedPaidTokens;\\r\\n    }\\r\\n    mapping(uint256 => StageData) private _stages;\\r\\n    uint256 private _currentStageId;\\r\\n\\r\\n    // Mapping from recipient address to claimed free tokens\\r\\n    mapping(address => uint256) private _claimedFreeTokens;\\r\\n    // Mapping from recipient address to claimed paid tokens\\r\\n    mapping(address => uint256) private _claimedPaidTokens;\\r\\n\\r\\n    // Emitted when `trustedSignerAddress` updated.\\r\\n    event TrustedSignerAddressUpdated(address trustedSignerAddress);\\r\\n\\r\\n    // Emitted when new Stage updated.\\r\\n    event StageUpdated(uint256 stageId, bool mintingEnabled, bool whitelistRequired, bool firstMintFree);\\r\\n    // Emitted when current stageId updated.\\r\\n    event CurrentStageUpdated(uint256 stageId);\\r\\n    // Emitted when plan config updated\\r\\n    event PlanConfigUpdated(uint256 freeTokenAmountLimit, uint256 paidTokenAmountLimit, uint256 paidTokenPrice);\\r\\n\\r\\n    // Emitted when `account` receive key pass tokens\\r\\n    event TokenClaimed(uint256 stageId, address indexed account, uint256 tokenAmount, uint256 ethAmount);\\r\\n\\r\\n    // Emitted when `ethAmount` ETH withdrawal to `account`\\r\\n    event EthWithdrawal(address account, uint256 ethAmount);\\r\\n\\r\\n    function initialize(\\r\\n        address erc721KeyPassAddress_,\\r\\n        address trustedSignerAddress_,\\r\\n        uint256 freeTokenAmountLimit_,\\r\\n        uint256 paidTokenAmountLimit_,\\r\\n        uint256 paidTokenPrice_\\r\\n    ) public virtual initializer {\\r\\n        __SwapERC721KeyPassUAE_init(\\r\\n            erc721KeyPassAddress_,\\r\\n            trustedSignerAddress_,\\r\\n            freeTokenAmountLimit_,\\r\\n            paidTokenAmountLimit_,\\r\\n            paidTokenPrice_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function __SwapERC721KeyPassUAE_init(\\r\\n        address erc721KeyPassAddress_,\\r\\n        address trustedSignerAddress_,\\r\\n        uint256 freeTokenAmountLimit_,\\r\\n        uint256 paidTokenAmountLimit_,\\r\\n        uint256 paidTokenPrice_\\r\\n    ) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n        __Pausable_init_unchained();\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n        __SwapERC721KeyPassUAE_init_unchained(\\r\\n            erc721KeyPassAddress_,\\r\\n            trustedSignerAddress_,\\r\\n            freeTokenAmountLimit_,\\r\\n            paidTokenAmountLimit_,\\r\\n            paidTokenPrice_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function __SwapERC721KeyPassUAE_init_unchained(\\r\\n        address erc721KeyPassAddress_,\\r\\n        address trustedSignerAddress_,\\r\\n        uint256 freeTokenAmountLimit_,\\r\\n        uint256 paidTokenAmountLimit_,\\r\\n        uint256 paidTokenPrice_\\r\\n    ) internal initializer {\\r\\n        require(erc721KeyPassAddress_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        require(trustedSignerAddress_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        require(freeTokenAmountLimit_ != 0, \\\"SwapERC721KeyPassUAE: invalid token amount limit\\\");\\r\\n        require(paidTokenAmountLimit_ != 0, \\\"SwapERC721KeyPassUAE: invalid token amount limit\\\");\\r\\n        require(paidTokenPrice_ != 0, \\\"SwapERC721KeyPassUAE: invalid token price\\\");\\r\\n\\r\\n        _erc721KeyPassAddress = erc721KeyPassAddress_;\\r\\n        _trustedSignerAddress = trustedSignerAddress_;\\r\\n\\r\\n        _freePlan = PlanData(0, freeTokenAmountLimit_, 0, 0, 0);\\r\\n        _paidPlan = PlanData(0, paidTokenAmountLimit_, paidTokenPrice_, 1, 0);\\r\\n    }\\r\\n\\r\\n    function erc721KeyPassAddress() external view virtual returns (address) {\\r\\n        return _erc721KeyPassAddress;\\r\\n    }\\r\\n\\r\\n    function trustedSignerAddress() external view virtual returns (address) {\\r\\n        return _trustedSignerAddress;\\r\\n    }\\r\\n\\r\\n    function freePlanInfo() external view virtual returns (\\r\\n        uint256 tokenAmount,\\r\\n        uint256 tokenAmountLimit,\\r\\n        uint256 tokenPrice,\\r\\n        uint256 tokenPerClaimLimit,\\r\\n        uint256 ethAmount\\r\\n    ) {\\r\\n        return (\\r\\n            _freePlan.tokenAmount,\\r\\n            _freePlan.tokenAmountLimit,\\r\\n            _freePlan.tokenPrice,\\r\\n            _freePlan.tokenPerClaimLimit,\\r\\n            _freePlan.ethAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function paidPlanInfo() external view virtual returns (\\r\\n        uint256 tokenAmount,\\r\\n        uint256 tokenAmountLimit,\\r\\n        uint256 tokenPrice,\\r\\n        uint256 tokenPerClaimLimit,\\r\\n        uint256 ethAmount\\r\\n    ) {\\r\\n        return (\\r\\n            _paidPlan.tokenAmount,\\r\\n            _paidPlan.tokenAmountLimit,\\r\\n            _paidPlan.tokenPrice,\\r\\n            _paidPlan.tokenPerClaimLimit,\\r\\n            _paidPlan.ethAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function currentStageId() external view virtual returns (uint256) {\\r\\n        return _currentStageId;\\r\\n    }\\r\\n\\r\\n    function getStageInfo(uint256 stageId_)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            bool mintingEnabled,\\r\\n            bool whitelistRequired,\\r\\n            bool firstClaimFree,\\r\\n            uint256 ethAmount,\\r\\n            uint256 totalClaimedFreeTokens,\\r\\n            uint256 totalClaimedPaidTokens\\r\\n        )\\r\\n    {\\r\\n        StageData storage stage = _stages[stageId_];\\r\\n        return (\\r\\n            stage.mintingEnabled,\\r\\n            stage.whitelistRequired,\\r\\n            stage.firstClaimFree,\\r\\n            stage.ethAmount,\\r\\n            stage.totalClaimedFreeTokens,\\r\\n            stage.totalClaimedPaidTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAddressClaimInfo(address address_) external view virtual returns (uint256 freeTokens, uint256 paidTokens) {\\r\\n        return (\\r\\n            _claimedFreeTokens[address_],\\r\\n            _claimedPaidTokens[address_]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function checkBeforeClaim(address address_, bool isWhitelisted_) public view virtual returns (bool shouldBeFreeClaim, uint256 tokenPerClaimLimit, uint256 tokenPrice) {\\r\\n        require(address_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        require(!paused(), \\\"SwapERC721KeyPassUAE: contract is paused\\\");\\r\\n        require(!IERC721KeyPassUAEUpgradeable(_erc721KeyPassAddress).paused(), \\\"SwapERC721KeyPassUAE: erc721 is paused\\\");\\r\\n        require(IERC721KeyPassUAEUpgradeable(_erc721KeyPassAddress).isTrustedMinter(address(this)), \\\"SwapERC721KeyPassUAE: erc721 wrong trusted minter\\\");\\r\\n        StageData storage stage = _stages[_currentStageId];\\r\\n        require(stage.mintingEnabled, \\\"SwapERC721KeyPassUAE: stage minting disabled\\\");\\r\\n        require(!stage.whitelistRequired || (stage.whitelistRequired && isWhitelisted_), \\\"SwapERC721KeyPassUAE: address is not whitelisted\\\");\\r\\n        shouldBeFreeClaim = stage.firstClaimFree && _claimedFreeTokens[address_] == 0;\\r\\n        if (shouldBeFreeClaim) {\\r\\n            tokenPerClaimLimit = _freePlan.tokenPerClaimLimit;\\r\\n            tokenPrice = _freePlan.tokenPrice;\\r\\n        } else {\\r\\n            tokenPerClaimLimit = _paidPlan.tokenPerClaimLimit;\\r\\n            tokenPrice = _paidPlan.tokenPrice;\\r\\n        }\\r\\n        return (\\r\\n            shouldBeFreeClaim,\\r\\n            tokenPerClaimLimit,\\r\\n            tokenPrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimToken(\\r\\n        bool isWhitelisted_,\\r\\n        bool isFreeClaim_,\\r\\n        uint256 ethAmount_,\\r\\n        uint256 tokenAmount_,\\r\\n        uint256 nonce_,\\r\\n        uint256 salt_,\\r\\n        uint256 maxBlockNumber_,\\r\\n        bytes memory signature_\\r\\n    ) external virtual payable nonReentrant whenNotPaused {\\r\\n        // check signature\\r\\n        bytes32 hash = keccak256(abi.encodePacked(_msgSender(), isWhitelisted_, isFreeClaim_, ethAmount_, tokenAmount_, nonce_, salt_, maxBlockNumber_));\\r\\n        address signer = hash.toEthSignedMessageHash().recover(signature_);\\r\\n        require(signer == _trustedSignerAddress, \\\"SwapERC721KeyPassUAE: invalid signature\\\");\\r\\n        // check max block limit\\r\\n        require(block.number <= maxBlockNumber_, \\\"SwapERC721KeyPassUAE: failed max block check\\\");\\r\\n        (bool shouldBeFreeClaim, uint256 tokenPerClaimLimit, uint256 tokenPrice) = checkBeforeClaim(_msgSender(), isWhitelisted_);\\r\\n        // check\\r\\n        require(shouldBeFreeClaim == isFreeClaim_, \\\"SwapERC721KeyPassUAE: invalid isFreeClaim flag\\\");\\r\\n        require((tokenPerClaimLimit == 0) || (tokenPerClaimLimit == tokenAmount_), \\\"SwapERC721KeyPassUAE: invalid token amount\\\");\\r\\n        require(ethAmount_ == tokenAmount_ * tokenPrice, \\\"SwapERC721KeyPassUAE: invalid ETH amount\\\");\\r\\n        // claim tokens\\r\\n        if (isFreeClaim_) {\\r\\n            _freePlanClaim(_msgSender(), tokenAmount_, ethAmount_);\\r\\n        } else {\\r\\n            _paidPlanClaim(_msgSender(), tokenAmount_, ethAmount_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pause() external virtual onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external virtual onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function updateTrustedSignerAddress(address trustedSignerAddress_) external virtual onlyOwner {\\r\\n        require(trustedSignerAddress_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        _trustedSignerAddress = trustedSignerAddress_;\\r\\n        emit TrustedSignerAddressUpdated(trustedSignerAddress_);\\r\\n    }\\r\\n\\r\\n    function updateCurrentStageId(uint256 stageId_) external virtual onlyOwner {\\r\\n        _currentStageId = stageId_;\\r\\n        emit CurrentStageUpdated(stageId_);\\r\\n    }\\r\\n\\r\\n    function updatePlanConfig(\\r\\n        uint256 freeTokenAmountLimit_,\\r\\n        uint256 paidTokenAmountLimit_,\\r\\n        uint256 paidTokenPrice_\\r\\n    ) external virtual onlyOwner {\\r\\n        require(freeTokenAmountLimit_ != 0 && _freePlan.tokenAmount <= freeTokenAmountLimit_, \\\"SwapERC721KeyPassUAE: invalid token amount limit\\\");\\r\\n        require(paidTokenAmountLimit_ != 0 && _paidPlan.tokenAmount <= paidTokenAmountLimit_, \\\"SwapERC721KeyPassUAE: invalid token amount limit\\\");\\r\\n        require(paidTokenPrice_ != 0, \\\"SwapERC721KeyPassUAE: invalid token price\\\");\\r\\n        _freePlan.tokenAmountLimit = freeTokenAmountLimit_;\\r\\n        _paidPlan.tokenAmountLimit = paidTokenAmountLimit_;\\r\\n        _paidPlan.tokenPrice = paidTokenPrice_;\\r\\n        emit PlanConfigUpdated(freeTokenAmountLimit_, paidTokenAmountLimit_, paidTokenPrice_);\\r\\n    }\\r\\n\\r\\n    function updateStage(uint256 stageId_, bool mintingEnabled_, bool whitelistRequired_, bool firstMintFree_) external virtual onlyOwner {\\r\\n        require(stageId_ != 0, \\\"SwapERC721KeyPassUAE: invalid stageId\\\");\\r\\n        StageData storage stage = _stages[stageId_];\\r\\n        stage.mintingEnabled = mintingEnabled_;\\r\\n        stage.whitelistRequired = whitelistRequired_;\\r\\n        stage.firstClaimFree = firstMintFree_;\\r\\n        emit StageUpdated(stageId_, mintingEnabled_, whitelistRequired_, firstMintFree_);\\r\\n    }\\r\\n\\r\\n    function ethWithdrawal(address payable recipient_) external virtual onlyOwner {\\r\\n        require(recipient_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        uint256 ethAmount = address(this).balance;\\r\\n        AddressUpgradeable.sendValue(recipient_, ethAmount);\\r\\n        emit EthWithdrawal(recipient_, ethAmount);\\r\\n    }\\r\\n\\r\\n    function _freePlanClaim(address recipient_, uint256 tokenAmount_, uint256 ethAmount_) internal virtual {\\r\\n        // pre claim check\\r\\n        require(recipient_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        require(tokenAmount_ != 0, \\\"SwapERC721KeyPassUAE: invalid token amount\\\");\\r\\n        require((ethAmount_ == 0) && (ethAmount_ == msg.value), \\\"SwapERC721KeyPassUAE: invalid ETH amount\\\");\\r\\n        require((_freePlan.tokenAmount + tokenAmount_) <= _freePlan.tokenAmountLimit, \\\"SwapERC721KeyPassUAE: total amount limit reached\\\");\\r\\n        StageData storage stage = _stages[_currentStageId];\\r\\n        require(stage.mintingEnabled, \\\"SwapERC721KeyPassUAE: stage minting disabled\\\");\\r\\n        // update claimedFreeTokens for recipient\\r\\n        _claimedFreeTokens[recipient_] += tokenAmount_;\\r\\n        // update freePlan params\\r\\n        _freePlan.tokenAmount += tokenAmount_;\\r\\n        // update stage params\\r\\n        stage.totalClaimedFreeTokens += tokenAmount_;\\r\\n        // mint token batch\\r\\n        IERC721KeyPassUAEUpgradeable(_erc721KeyPassAddress).mintTokenBatch(recipient_, tokenAmount_);\\r\\n        // emit event\\r\\n        emit TokenClaimed(_currentStageId, recipient_, tokenAmount_, ethAmount_);\\r\\n    }\\r\\n\\r\\n    function _paidPlanClaim(address recipient_, uint256 tokenAmount_, uint256 ethAmount_) internal virtual {\\r\\n        // pre claim check\\r\\n        require(recipient_ != address(0), \\\"SwapERC721KeyPassUAE: invalid address\\\");\\r\\n        require(tokenAmount_ != 0, \\\"SwapERC721KeyPassUAE: invalid token amount\\\");\\r\\n        require((ethAmount_ > 0) && (ethAmount_ == msg.value), \\\"SwapERC721KeyPassUAE: invalid ETH amount\\\");\\r\\n        require((_paidPlan.tokenAmount + tokenAmount_) <= _paidPlan.tokenAmountLimit, \\\"SwapERC721KeyPassUAE: total amount limit reached\\\");\\r\\n        StageData storage stage = _stages[_currentStageId];\\r\\n        require(stage.mintingEnabled, \\\"SwapERC721KeyPassUAE: stage minting disabled\\\");\\r\\n        // update _claimedPaidTokens for recipient\\r\\n        _claimedPaidTokens[recipient_] += tokenAmount_;\\r\\n        // update paidPlan params\\r\\n        _paidPlan.ethAmount += ethAmount_;\\r\\n        _paidPlan.tokenAmount += tokenAmount_;\\r\\n        // update stage params\\r\\n        stage.ethAmount += ethAmount_;\\r\\n        stage.totalClaimedPaidTokens += tokenAmount_;\\r\\n        // mint token batch\\r\\n        IERC721KeyPassUAEUpgradeable(_erc721KeyPassAddress).mintTokenBatch(recipient_, tokenAmount_);\\r\\n        // emit event\\r\\n        emit TokenClaimed(_currentStageId, recipient_, tokenAmount_, ethAmount_);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/key-pass/IERC721KeyPassUAEUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\r\\n\\r\\ninterface IERC721KeyPassUAEUpgradeable is IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {\\r\\n    // public read methods\\r\\n    function owner() external view returns (address);\\r\\n    function getOwner() external view returns (address);\\r\\n    function paused() external view returns (bool);\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n    function getMaxTotalSupply() external pure returns (uint256);\\r\\n    function getTotalSupply() external view returns (uint256);\\r\\n    function stats() external view returns (uint256 maxTotalSupply, uint256 totalSupply, uint256 supplyLeft);\\r\\n    function isTrustedMinter(address account) external view returns (bool);\\r\\n    function royaltyParams() external view returns (address royaltyAddress, uint256 royaltyPercent);\\r\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);\\r\\n\\r\\n    // public write methods\\r\\n    function burn(uint256 tokenId) external;\\r\\n\\r\\n    // minter write methods\\r\\n    function mintTokenBatch(address recipient, uint256 tokenCount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stageId\",\"type\":\"uint256\"}],\"name\":\"CurrentStageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"EthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeTokenAmountLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidTokenAmountLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidTokenPrice\",\"type\":\"uint256\"}],\"name\":\"PlanConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintingEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelistRequired\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"firstMintFree\",\"type\":\"bool\"}],\"name\":\"StageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stageId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedSignerAddress\",\"type\":\"address\"}],\"name\":\"TrustedSignerAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted_\",\"type\":\"bool\"}],\"name\":\"checkBeforeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"shouldBeFreeClaim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerClaimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFreeClaim_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBlockNumber_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature_\",\"type\":\"bytes\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721KeyPassAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"ethWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freePlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerClaimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getAddressClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"freeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stageId_\",\"type\":\"uint256\"}],\"name\":\"getStageInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"mintingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistRequired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"firstClaimFree\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedFreeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedPaidTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721KeyPassAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedSignerAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freeTokenAmountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokenAmountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokenPrice_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerClaimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stageId_\",\"type\":\"uint256\"}],\"name\":\"updateCurrentStageId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeTokenAmountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokenAmountLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTokenPrice_\",\"type\":\"uint256\"}],\"name\":\"updatePlanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stageId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintingEnabled_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistRequired_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"firstMintFree_\",\"type\":\"bool\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedSignerAddress_\",\"type\":\"address\"}],\"name\":\"updateTrustedSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapERC721KeyPassUAEUpgradeable", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}