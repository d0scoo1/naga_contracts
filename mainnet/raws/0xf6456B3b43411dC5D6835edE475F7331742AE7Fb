{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PoolCore/Pool10.sol\": {\r\n      \"content\": \"// contracts/Pool.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../ERC20UpgradeableFromERC777.sol\\\";\\nimport '../@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport './../PropTokens/PropToken0.sol';\\nimport './../LTVGuidelines.sol';\\nimport './../PoolUtils/PoolUtils0.sol';\\nimport './../PoolStaking/PoolStaking0.sol';\\nimport './../PoolStakingRewards/PoolStakingRewards0.sol';\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\ncontract Pool10 is Initializable, ERC20UpgradeableFromERC777, IERC721ReceiverUpgradeable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    struct Loan{\\n        uint256 loanId;\\n        address borrower;\\n        uint256 interestRate;\\n        uint256 principal;\\n        uint256 interestAccrued;\\n        uint256 timeLastPayment;\\n    }\\n\\n    address servicer;\\n    address ERCAddress;\\n    address[] servicerAddresses;\\n    /* Adding a variable above this line (not reflected in Pool0) will cause contract storage conflicts */\\n\\n    uint256 poolLent;\\n    uint256 poolBorrowed;\\n    mapping(address => uint256[]) userLoans;\\n    Loan[] loans;\\n    uint256 loanCount;\\n\\n    uint constant servicerFeePercentage = 1000000;\\n    uint constant baseInterestPercentage = 1000000;\\n    uint constant curveK = 120000000;\\n\\n    /* Pool1 variables introduced here */\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => uint256) loanToPropToken;\\n    address propTokenContractAddress;\\n\\n    /* Pool2 variables introduced here */\\n    address LTVOracleAddress;\\n\\n    /* Pool3 variables introduced here */\\n    address poolUtilsAddress;\\n    address baconCoinAddress;\\n    address poolStakingAddress;\\n\\n    /* Pool 8 variables introduced here */\\n    address daoAddress;\\n\\n    /*  Pool 9 variables introduced here \\n        storage for nonReentrant modifier \\n        modifier and variables could not be imported via inheratance given upgradability rules */\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n    uint256 private _status;\\n\\n    /* pool10 variables added here */\\n    address poolStakingRewardAddress; // contract responsible for determining the rewards for staking bHome\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function initializePool9() public {\\n        require(msg.sender == servicer, \\\"unapproved sender\\\");\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /*****************************************************\\n    *       POOL STRUCTURE / UPGRADABILITY FUNCTIONS\\n    ******************************************************/\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns(string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns(uint8) {\\n        return 6;\\n    }\\n\\n    /*****************************************************\\n    *                GETTER FUNCTIONS\\n    ******************************************************/\\n    /**\\n    *   @dev Function getContractData() returns a lot of variables about the contract\\n    */\\n    function getContractData() public view returns (address, address, uint256, uint256, uint256, uint256) {\\n        return (servicer, ERCAddress, poolLent, (poolLent + PoolUtils0(poolUtilsAddress).getPoolInterestAccrued()), poolBorrowed, loanCount);\\n    }\\n\\n    /*\\n    *   @dev Function getLoanCount() returns how many active loans there are\\n    */ \\n    function getLoanCount() public view returns (uint256) {\\n        return loanCount;\\n    }\\n\\n    /**  \\n    *   @dev Function getSupplyableTokenAddress() returns the contract address of ERC20 this pool accepts (ususally USDC)\\n    */\\n    function getSupplyableTokenAddress() public view returns (address) {\\n        return ERCAddress;\\n    }\\n\\n    /**  \\n    *   @dev Function getServicerAddress() returns the address of this pool's servicer\\n    */\\n    function getServicerAddress() public view returns (address) {\\n        return servicer;\\n    } \\n\\n    /**  \\n    *   @dev Function getLoanDetails() returns an all the raw details about a loan\\n    *   @param loanId is the id for the loan we're looking up\\n    *   EDITED in pool1 to also return PropToken ID\\n    */\\n    function getLoanDetails(uint256 loanId) public view returns (uint256, address, uint256, uint256, uint256, uint256, uint256) {\\n        Loan memory loan = loans[loanId];\\n        //temp interestAccrued calculation because this is a read function\\n        uint256 interestAccrued = getLoanAccruedInterest(loanId);\\n        uint256 propTokenID = loanToPropToken[loanId];\\n        return (loan.loanId, loan.borrower, loan.interestRate, loan.principal, interestAccrued, loan.timeLastPayment, propTokenID);\\n    }\\n\\n    /**  \\n    *   @dev Function getLoanAccruedInterest() calculates and returns the amount of interest accrued on a given loan\\n    *   @param loanId is the id for the loan we're looking up\\n    */\\n    function getLoanAccruedInterest(uint256 loanId) public view returns (uint256) {\\n        Loan memory loan = loans[loanId];\\n        uint256 secondsSincePayment = block.timestamp.sub(loan.timeLastPayment);\\n\\n        uint256 interestPerSecond = loan.principal.mul(loan.interestRate).div(31104000);\\n        uint256 interestAccrued = interestPerSecond.mul(secondsSincePayment).div(100000000);\\n        return interestAccrued.add(loan.interestAccrued);\\n    }   \\n\\n\\n    /*****************************************************\\n    *                LENDING/BORROWING FUNCTIONS\\n    ******************************************************/\\n\\n    /*\\n    *   @dev Function getProportionalPoolTokens calculates how many new hc_pool tokens to mint when value is added to the pool based on proportional value\\n    *   @param recepient The address of the wallet receiving the newly minted hc_pool tokens\\n    *   @param amount The amount to be minted\\n    */\\n    function getProportionalPoolTokens(uint256 amount) private view returns (uint256) {\\n        //check if this is first deposit\\n        if (poolLent == 0) {\\n            return amount;\\n        } else {\\n            //Calculate proportional to total value\\n            uint256 new_hc_pool = amount.mul(super.totalSupply()).div(poolLent);\\n            return new_hc_pool;\\n        }\\n    }\\n\\n    /**\\n    *   @dev Function lend moves assets on the (probably usdc) contract to our own balance\\n    *   - Before calling: an approve(address _spender (proxy), uint256 _value (0xffff)) function call must be made on remote contract\\n    *   @param amount The amount of USDC to be transferred\\n    *   @return the amount of poolTokens created\\n    */\\n    function lend(\\n        uint256 amount\\n    ) public nonReentrant returns (uint256) {\\n        //USDC on Ropsten only right now\\n        IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n        uint256 newTokensMinted = getProportionalPoolTokens(amount);\\n        poolLent = poolLent.add(amount);\\n\\n        super._mint(msg.sender, newTokensMinted);\\n\\n        return newTokensMinted;\\n    }\\n\\n    /**\\n    *   @dev Function redeem burns the sender's hcPool tokens and transfers the usdc back to them\\n    *   @param amount The amount of hc_pool to be redeemed\\n    */\\n    function redeem(\\n        uint256 amount\\n    ) public nonReentrant {\\n        //check to see if sender has enough hc_pool to redeem\\n        require(balanceOf(msg.sender) >= amount);\\n\\n        //check to make sure there is liquidity available in the pool to withdraw\\n        uint256 tokenPrice = poolLent.mul(1000000).div(super.totalSupply());\\n        uint256 erc20ValueOfTokens = amount.mul(tokenPrice).div(1000000);\\n        require(erc20ValueOfTokens <= (poolLent - poolBorrowed));\\n\\n        //burn hcPool first\\n        super._burn(msg.sender, amount);\\n        poolLent = poolLent.sub(erc20ValueOfTokens);\\n        IERC20Upgradeable(ERCAddress).transfer(msg.sender, erc20ValueOfTokens);\\n    }\\n\\n    /**\\n    *   @dev Function borrow creates a new Loan, moves the USDC to Borrower, and returns the loan ID and fixed Interest Rate\\n    *   - Also creates an origination fee for the Servicer in HC_Pool\\n    *   @param amount The size of the potential loan in (probably usdc).\\n    *   @param maxRate The size of the potential loan in (probably usdc).\\n    *   EDITED in pool1 to also require a PropToken\\n    *   EDITED in pool1 - borrower param was removed and msg.sender is new recepient of USDC\\n    *   EDITED in pool2 - propToken data is oulled and LTV of loan is required before loan can process\\n    */\\n    function borrow(uint256 amount, uint256 maxRate, uint256 propTokenId) public nonReentrant {\\n        //for v2 require this address is approved to transfer propToken \\n        require(PropToken0(propTokenContractAddress).getApproved(propTokenId) == address(this), \\\"pool not approved to move egg\\\");\\n        //also require msg.sender is owner of token\\n        require(PropToken0(propTokenContractAddress).ownerOf(propTokenId) == msg.sender, \\\"msg.sender not egg owner\\\");\\n\\n        //check the requested interest rate is still available\\n        uint256 fixedInterestRate = uint256(PoolUtils0(poolUtilsAddress).getInterestRate(amount));\\n        require(fixedInterestRate <= maxRate, \\\"interest rate no longer avail\\\");\\n\\n        //require the propToken approved has a lien value less than or equal to the requested loan size\\n        uint256 lienAmount = PropToken0(propTokenContractAddress).getLienValue(propTokenId);\\n        require(lienAmount >= amount, \\\"loan larger that egg value\\\");\\n\\n        //require that LTV of propToken is less than LTV required by oracle\\n        uint256 LTVRequirement = LTVGuidelines(LTVOracleAddress).getMaxLTV();\\n        (, , uint256[] memory SeniorLiens, uint256 HomeValue, , ,) = PropToken0(propTokenContractAddress).getPropTokenData(propTokenId);\\n        for (uint i = 0; i < SeniorLiens.length; i++) {\\n            lienAmount = lienAmount.add(SeniorLiens[i]);\\n        }\\n        require(lienAmount.mul(100).div(HomeValue) < LTVRequirement, \\\"LTV too high\\\");\\n\\n\\n        //first take the propToken\\n        PropToken0(propTokenContractAddress).safeTransferFrom(msg.sender, address(this), propTokenId);\\n\\n        //create new Loan\\n        Loan memory newLoan = Loan(loanCount, msg.sender, fixedInterestRate, amount, 0, block.timestamp);\\n        loans.push(newLoan);\\n        userLoans[msg.sender].push(loanCount);\\n\\n        //map new loanID to Token ID\\n        loanToPropToken[loanCount] = propTokenId;\\n\\n        //update system variables\\n        loanCount = loanCount.add(1);\\n        poolBorrowed = poolBorrowed.add(amount);\\n\\n        //finally move the USDC\\n        IERC20Upgradeable(ERCAddress).transfer(msg.sender, amount);\\n\\n        //then mint HC_Pool for the servicer (fixed 0.5% origination is better than standard 2.5%)\\n        uint256 newTokensMinted = getProportionalPoolTokens(amount.div(200));\\n        super._mint(servicer, newTokensMinted);\\n        super._mint(daoAddress, newTokensMinted);\\n    }\\n\\n    /**\\n    *   @dev Function repay repays a specific loan\\n    *   - payment is first deducted from the interest then principal.\\n    *   - the servicer_fee is deducted from the interest repayment and servicer is compensated in hc_pool\\n    *   - repayer must have first approved fromsfers on behalf\\n    *   @param loanId The loan to be repayed\\n    *   @param amount The amount of the ERC20 token to repay the loan with\\n    *   EDITED - Pool1 returns propToken when principal reaches 0\\n    */\\n\\n    function repay(uint256 loanId, uint256 amount) public nonReentrant {        \\n        //interestAmountRepayed keeps track of how much of the loan was returned to the pool to calculate servicer fee(treated as cash investment)\\n        uint256 interestAmountRepayed = amount;\\n\\n        uint256 currentInterest = getLoanAccruedInterest(loanId);\\n        if(currentInterest > amount) {\\n            //if the payment is less than the interest accrued on the loan, just deduct amount from interest\\n            //deduct amount FIRST (to make sure they have available balance), then reduce loan amount\\n            IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n            loans[loanId].interestAccrued = currentInterest.sub(amount);\\n        } else {\\n            //if the amount borrow is repaying is greater than interest accrued, deduct the rest from principal\\n            interestAmountRepayed = currentInterest;\\n            uint256 amountAfterInterest = amount.sub(currentInterest);\\n\\n            if(loans[loanId].principal > amountAfterInterest) {\\n                //deduct amount from Borrower and reduce the principal\\n                IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n                //return the repayed principal to the 'borrowable' amount\\n                poolBorrowed = poolBorrowed.sub(amountAfterInterest);\\n                loans[loanId].principal = loans[loanId].principal.sub(amountAfterInterest);\\n            } else {\\n                //deduct totalLoanValue\\n                uint256 totalLoanValue = loans[loanId].principal.add(currentInterest);\\n                IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), totalLoanValue);\\n                //return the repayed principal to the 'borrowable' amount\\n                poolBorrowed = poolBorrowed.sub(loans[loanId].principal);\\n                loans[loanId].principal = 0;\\n                //Send PropToken back to borrower\\n                PropToken0(propTokenContractAddress).safeTransferFrom(address(this), loans[loanId].borrower, loanToPropToken[loanId]);\\n            }\\n\\n            //set interest accrued to 0 AFTER successful erc20 transfer\\n            loans[loanId].interestAccrued = 0;\\n        }\\n\\n        //last payment timestamp is only updated AFTER  successful erc20 transfer\\n        loans[loanId].timeLastPayment = block.timestamp;\\n\\n        //servicer fee is treated as cash investment in the pool as the percentage interest\\n        //calculate how much of payment goes to servicer here\\n        uint256 servicerFeeInERC = servicerFeePercentage.mul(interestAmountRepayed).div(loans[loanId].interestRate);\\n        uint256 newTokensMinted = getProportionalPoolTokens(servicerFeeInERC).div(2);\\n\\n        //treat repayed interest as new money Lent into the pool\\n        poolLent = poolLent.add(interestAmountRepayed);\\n\\n        super._mint(servicer, newTokensMinted);\\n        super._mint(daoAddress, newTokensMinted);\\n    }\\n\\n    /*****************************************************\\n    *                Staking FUNCTIONS\\n    ******************************************************/\\n\\n    /**  \\n    *   @dev Function stake transfers users bHOME to the poolStaking contract\\n    */\\n    function stake(uint256 amount) public returns (bool) {\\n        require(balanceOf(msg.sender) >= amount, \\\"not enough to stake\\\");\\n\\n        transfer(poolStakingAddress, amount);\\n        bool successfulStake = PoolStakingRewards0(poolStakingRewardAddress).stake(msg.sender, amount);\\n        require(successfulStake, \\\"Stake failed\\\");\\n\\n        return successfulStake;\\n    }\\n\\n    function linkPoolStaking(address _poolStakingAddress) public {\\n        require(msg.sender == servicer, \\\"unapproved sender\\\");\\n        poolStakingAddress = _poolStakingAddress;\\n    }\\n\\n    function linkPoolStakingReward(address _poolStakingRewardAddress) public {\\n        require(msg.sender == servicer, \\\"unapproved sender\\\");\\n        poolStakingRewardAddress = _poolStakingRewardAddress;\\n    }\\n\\n    /**  \\n    *   @dev Function lendAndStake calls both the Lend and Stake functions in one call\\n    *   @param amount is amount of USDC to be deposited\\n    *   @return the bool from stake that reprents successful stake\\n    */\\n    function lendAndStake(uint256 amount) public returns (bool) {\\n        uint256 newPoolTokens = lend(amount);\\n        return stake(newPoolTokens);\\n    }\\n\\n    /**  \\n    *   @dev Function getVersion returns current upgraded version\\n    */\\n    function getVersion() public pure returns (uint) {\\n        return 10;\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes memory ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/Staking/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"./../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IStaking {\\n\\n    function deposit(address tokenAddress, address wallet, uint256 amount) external;\\n    function withdraw(address tokenAddress, address wallet, uint256 amount) external;\\n    function balanceOf(address wallet, address tokenAddress) external view returns (uint);\\n    function getEpochId(uint timestamp) external view returns (uint); // get epoch id\\n    function getEpochUserBalance(address user, address token, uint128 epoch) external view returns(uint);\\n    function getEpochPoolSize(address token, uint128 epoch) external view returns (uint);\\n    function epoch1Start() external view returns (uint);\\n    function epochDuration() external view returns (uint);\\n}\"\r\n    },\r\n    \"/contracts/PropTokens/PropToken0.sol\": {\r\n      \"content\": \"// contracts/Pool0.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport '../@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol';\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\ncontract PropToken0 is Initializable, ERC721URIStorageUpgradeable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    struct Lien{\\n        uint256 lienIndex;\\n        uint256 lienValue;\\n        uint256[] seniorLienValues;\\n        uint256 propValue;\\n        string propAddress;\\n        uint256 issuedAtTimestamp;\\n    }\\n\\n    uint256 lienCount;\\n    address[] servicerAddresses;\\n    address[] poolAddresses;\\n    mapping(uint256 => Lien) lienData;\\n\\n\\n    /*****************************************************\\n    *       POOL STRUCTURE / UPGRADABILITY FUNCTIONS\\n    ******************************************************/\\n\\n    /** \\n    *   @dev Function initialize replaces constructor in upgradable contracts\\n    *   - Calls the init function of the inherited ERC721 contract\\n    *   @param name Name of this particular ERC721 token\\n    *   @param symbol The ticker this token will go by\\n    */\\n    function initialize(string memory name, string memory symbol, address _poolAddress, address approvedServicer) public initializer {\\n        servicerAddresses.push(approvedServicer);\\n        poolAddresses.push(_poolAddress);\\n        ERC721Upgradeable.__ERC721_init(name, symbol);\\n\\n        //set initial vars\\n        lienCount = 0;\\n    }\\n\\n    /*****************************************************\\n    *                GETTER FUNCTIONS\\n    ******************************************************/\\n\\n    /** \\n    *   @dev Function isApprovedServicer() is an internal function that checks the array of approved addresses for the given address\\n    *   @param _address The address to be checked if it is approved\\n    *   @return isApproved is if the _addess is found in the list of servicerAddresses\\n    */\\n    function isApprovedServicer(address _address) internal view returns (bool) {\\n        bool isApproved = false;\\n        \\n        for (uint i = 0; i < servicerAddresses.length; i++) {\\n            if(_address == servicerAddresses[i]) {\\n                isApproved = true;\\n            }\\n        }\\n\\n        return isApproved;\\n    }\\n\\n    /**\\n    *   @dev Function get Lien Value \\n    *   @param lienId is the ID of the lien being looked up\\n    *   @return the uint256 max value of the lien (to 6 decimal places)\\n    **/\\n    function getLienValue(uint256 lienId) public view returns (uint256) {\\n        return lienData[lienId].lienValue;\\n    }\\n\\n    /** \\n    *   @dev Function getPropTokenCount() returns the lien count\\n    *   @return lienCount uint256\\n    */\\n    function getPropTokenCount() public view returns (uint256) {\\n        return lienCount;\\n    }\\n\\n    /**\\n    *   @dev Function getPoolAddresses() returns the lien count\\n    *   @return address[] poolAddresses\\n    */\\n    function getPoolAddresses() public view returns (address[] memory) {\\n        return poolAddresses;\\n    }\\n\\n    /**\\n    *   @dev Function getPropTokenData() returns all revelant fields on propToken\\n    *   @param propTokenID  the uint256 id of token to be looked up\\n    */\\n    function getPropTokenData(uint256 propTokenID) public view returns (address, uint256, uint256[] memory, uint256, string memory, uint256, string memory) {\\n        Lien memory propToken = lienData[propTokenID];\\n        return(\\n          ownerOf(propTokenID),\\n          propToken.lienValue,\\n          propToken.seniorLienValues,\\n          propToken.propValue,\\n          propToken.propAddress,\\n          propToken.issuedAtTimestamp,\\n          tokenURI(propTokenID)\\n        );\\n    }\\n\\n    /*****************************************************\\n    *              MINTING FUNCTION\\n    ******************************************************/\\n\\n    function mintPropToken(\\n        address to,\\n        uint256 lienValue,\\n        uint256[] memory seniorLienValues,\\n        uint256 propValue,\\n        string memory propAddress,\\n        string memory propPhotoURI\\n        ) public {\\n        //require servicer is calling\\n        require(isApprovedServicer(msg.sender));\\n\\n        Lien memory newLien = Lien(lienCount, lienValue, seniorLienValues, propValue, propAddress, block.timestamp);\\n\\n        _safeMint(to, lienCount);\\n        _setTokenURI(lienCount, propPhotoURI);\\n\\n        lienData[lienCount] = newLien;\\n        lienCount = lienCount + 1;\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/PoolUtils/PoolUtils0.sol\": {\r\n      \"content\": \"// contracts/PoolUtils0.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport './../PoolCore/Pool4.sol';\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\n\\ncontract PoolUtils0 is Initializable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    uint constant servicerFeePercentage = 1000000;\\n    uint constant baseInterestPercentage = 0;\\n    uint constant curveK = 200000000;\\n\\n    address poolCore;\\n\\n    /** \\n    *   @dev Function initialize replaces constructor in upgradable contracts\\n    *   - Sets the poolCore contract Address \\n    */\\n    function initialize(address _poolCore) public initializer {\\n        poolCore = _poolCore;\\n    }\\n\\n    /********************************************\\n    *           Pool Getter Funcs               * \\n    ********************************************/\\n\\n\\n\\n    /**  \\n    *   @dev Function getAverageInterest() returns an average interest for the pool\\n    */\\n    function getAverageInterest() public view returns (uint256) {\\n        uint256 sumOfRates = 0;\\n        uint256 borrowedCounter = 0;\\n        \\n        uint256 interestRate = 0;\\n        uint256 principal = 0;\\n        uint256 loanCount = 0;\\n\\n        (, , , , , loanCount) = Pool4(poolCore).getContractData();\\n\\n        for (uint i = 0; i < loanCount; i++) {\\n\\n            (, , interestRate, principal, , , ) = Pool4(poolCore).getLoanDetails(i);\\n            if(principal != 0){\\n                sumOfRates = sumOfRates.add(interestRate.mul(principal));\\n                borrowedCounter = borrowedCounter.add(principal);\\n            }\\n        }\\n\\n       return sumOfRates.div(borrowedCounter);\\n    }\\n\\n    /**  \\n    *   @dev Function getActiveLoans() returns an array of the loans currently out by users\\n    *   @return array of bools, where the index i is the loan ID and the value bool is active or not\\n    */\\n    function getActiveLoans() public view returns (bool[] memory) {\\n        uint256 principal = 0;\\n        uint256 loanCount = 0;\\n\\n        (, , , , , loanCount) = Pool4(poolCore).getContractData();\\n        bool[] memory loanActive = new bool[](loanCount);\\n\\n        for (uint i = 0; i < loanCount; i++) {\\n            (, , , principal, , , ) = Pool4(poolCore).getLoanDetails(i);\\n\\n            if(principal != 0) {\\n                loanActive[i] = true;\\n            } else {\\n                loanActive[i] = false;\\n            }\\n        }\\n\\n        return loanActive;\\n    }\\n\\n\\n    /**  \\n    *   @dev Function getPoolInterestAccrued() returns the the amount of interest accreued by the pool in total\\n    */\\n    function getPoolInterestAccrued() public view returns (uint256) {\\n        uint256 totalInterest = 0;\\n        uint256 loanCount = Pool4(poolCore).getLoanCount();\\n\\n\\n        for (uint i=0; i<loanCount; i++) {\\n            uint256 accruedInterest = Pool4(poolCore).getLoanAccruedInterest(i);\\n            totalInterest = totalInterest.add(accruedInterest);\\n        }\\n\\n        return totalInterest;\\n    }\\n\\n    /**  \\n    *   @dev Function getInterestRate calculates the new interest rate if a loan was to be taken out in this block\\n    *   @param amount The size of the potential loan in (probably usdc).\\n    *   @return interestRate The interest rate in APR for the loan\\n    */\\n    function getInterestRate(uint256 amount) public view returns (int256) {\\n        //I = (( U - k ) / (U - 100)) - 0.01k + Base + ServicerFee\\n        //all ints multiplied by 1000000 to represent the 6 decimal points available\\n\\n        uint256 poolBorrowed = 0;\\n        uint256 poolLent = 0;\\n        (, , poolLent, , poolBorrowed, ) = Pool4(poolCore).getContractData();\\n        \\n        //first check available allocation\\n        require(amount < (poolLent - poolBorrowed));\\n\\n        //get new proposed utilization amount\\n        int256 newUtilizationRatio = int256(poolBorrowed).add(int256(amount)).mul(100000000).div(int256(poolLent));\\n\\n        //calculate interest\\n        //subtract k from U\\n        int256 numerator = newUtilizationRatio.sub(int256(curveK));  \\n        //subtract 100 from U\\n        int256 denominator = newUtilizationRatio.sub(100000000);\\n        //divide numerator by denominator and multiply percentage by 10^6 to account for decimal places\\n        int256 interest = numerator.mul(1000000).div(denominator);\\n        //add base and fees to interest\\n        interest = interest.sub(int256(curveK).div(100)).add(int256(servicerFeePercentage)).add(int256(baseInterestPercentage)); \\n        \\n        return interest;\\n    }\\n\\n    /********************************************\\n    *           Loan Getter Funcs               * \\n    ********************************************/\\n \\n}\"\r\n    },\r\n    \"/contracts/PoolStakingRewards/PoolStakingRewards0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n// Changes:\\n// 1. Separated the bond token address from the pool token address so that the pool can hold bHome and reward Bacon.\\n//    Though I suppose this makes it not a very good bond...\\n\\npragma solidity ^0.8.4;\\n\\nimport './../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport \\\"./../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./../Staking/IStaking.sol\\\";\\nimport \\\"./../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./../BaconCoin/BaconCoin3.sol\\\";\\n\\n\\ncontract PoolStakingRewards0 is Initializable {\\n\\n    // lib\\n    using SafeMath for uint;\\n    using SafeMath for uint128;\\n\\n    // Per epoch rewards\\n    uint256 constant GUARDIAN_REWARD = 23587200e18;\\n    uint256 constant DAO_REWARD = 10886400e18;\\n\\n    // constants\\n    // end of year one rewards was block 15651074\\n    // airdrop_ends_block_number (from airdrop script) was: 14127375\\n    // year one reward per block: 100 Bacon\\n    // total remaining rewards for year 1 = 100 * (endOfYearOneBlock - rewardsAirdropBlock)\\n    // = 100 * (15651074-14127375)\\n    // uint public constant TOTAL_DISTRIBUTED_AMOUNT = 152369900;\\n    // There are roughly 19 weeks left in our 1 year rewards term\\n    // starting the 19th of May 2022\\n    // uint public constant NR_OF_EPOCHS = 19;\\n    // uint128 public constant EPOCHS_DELAYED_FROM_STAKING_CONTRACT = 0;\\n\\n    // state variables\\n\\n    // addresses\\n    address private _poolTokenAddress;\\n    // contracts\\n    BaconCoin3 private _bacon;\\n    IStaking private _staking;\\n    // TODO: maybe private?\\n    mapping(address => bool) isApprovedPool;\\n    address guardianAddress;\\n    address daoAddress;\\n\\n\\n    uint[] private epochs;\\n    uint private _totalAmountPerEpoch;\\n    uint128 public lastInitializedEpoch;\\n    mapping(address => uint128) private lastEpochIdHarvested;\\n    uint public epochDuration; // init from staking contract\\n    uint public epochStart; // init from staking contract\\n    uint private _numberOfEpochs;\\n\\n    // events\\n    event MassHarvest(address indexed user, uint256 epochsHarvested, uint256 totalValue);\\n    event Harvest(address indexed user, uint128 indexed epochId, uint256 amount);\\n\\n    // constructor\\n    function initialize(address _guardianAddress, address baconTokenAddress, address poolTokenAddress, address stakeContract, uint totalAmountPerEpoch, uint numberOfEpochs ) public initializer {\\n        epochs = new uint[](numberOfEpochs + 1);\\n        \\n        guardianAddress = _guardianAddress;\\n        _bacon = BaconCoin3(baconTokenAddress);\\n        _poolTokenAddress = poolTokenAddress;\\n        _staking = IStaking(stakeContract);\\n        epochDuration = _staking.epochDuration();\\n        epochStart = _staking.epoch1Start();\\n        _numberOfEpochs = numberOfEpochs;\\n        _totalAmountPerEpoch = totalAmountPerEpoch;\\n    }\\n\\n    function setGuardianAddress(address _guardianAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        lastEpochIdHarvested[_guardianAddress] =  lastEpochIdHarvested[guardianAddress];\\n        guardianAddress = _guardianAddress;\\n    }\\n\\n    // To be called after baconCoin0 is deployed\\n    function setDAOAddress(address _DAOAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        lastEpochIdHarvested[_DAOAddress] =  lastEpochIdHarvested[daoAddress];\\n        daoAddress = _DAOAddress;\\n    }\\n\\n    function transferMintRights(address newMinter) public {\\n        require(msg.sender == guardianAddress, \\\"PoolStakingRewards: unapproved sender\\\");\\n        _bacon.setStakingContract(newMinter);\\n    }\\n\\n    function approvePool(address poolAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        isApprovedPool[poolAddress] = true;\\n    }\\n\\n    function revokePool(address poolAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        isApprovedPool[poolAddress] = false;\\n    }\\n\\n    function stake(address wallet, uint256 amount) public returns (bool) {\\n        require(isApprovedPool[msg.sender], \\\"must be approved sender\\\");\\n        // expects that the users hbHome has already been transferred to the staking contract\\n        _staking.deposit(_poolTokenAddress, wallet, amount);\\n        return true;\\n    }\\n\\n    function unstake(uint256 amount) public {\\n        _unstakeInternal(msg.sender, amount);\\n    }\\n\\n    function unstakeForWallet(address wallet, uint256 amount) public {\\n        require(isApprovedPool[msg.sender], \\\"must be approved sender\\\");\\n        _unstakeInternal(wallet, amount);\\n    }\\n\\n    // public methods\\n    // public method to harvest all the unharvested epochs until current epoch - 1\\n    function massHarvest(address wallet) external returns (uint){\\n        require(isApprovedPool[msg.sender], \\\"must be approved sender\\\");\\n        uint totalDistributedValue = 0;\\n\\n        //added so it doesn't fail on first epoch\\n        if(_getEpochId() == 0){\\n            return 0;\\n        }\\n        \\n        uint epochId = _getEpochId().sub(1); // fails in epoch 0\\n        // force max number of epochs\\n        if (epochId > _numberOfEpochs) {\\n            epochId = _numberOfEpochs;\\n        }\\n\\n        for (uint128 i = lastEpochIdHarvested[wallet] + 1; i <= epochId; i++) {\\n            // i = epochId\\n            // compute distributed Value and do one single transfer at the end\\n            totalDistributedValue += _harvest(wallet, i);\\n        }\\n\\n        emit MassHarvest(wallet, epochId - lastEpochIdHarvested[wallet], totalDistributedValue);\\n\\n        if (totalDistributedValue > 0) {\\n            _bacon.mint(wallet, totalDistributedValue);\\n        }\\n\\n        return totalDistributedValue;\\n    }\\n\\n    function harvest (address wallet, uint128 epochId) external returns (uint){\\n        require(isApprovedPool[msg.sender], \\\"must be approved sender\\\");\\n        // checks for requested epoch\\n        require (_getEpochId() > epochId, \\\"This epoch is in the future\\\");\\n        require(epochId <= _numberOfEpochs, \\\"Maximum number of epochs is 12\\\");\\n        require (lastEpochIdHarvested[wallet].add(1) == epochId, \\\"Harvest in order\\\");\\n        uint userReward = _harvest(wallet, epochId);\\n        if (userReward > 0) {\\n             _bacon.mint(wallet, userReward);\\n        }\\n        emit Harvest(wallet, epochId, userReward);\\n        return userReward;\\n    }\\n\\n    // views\\n    function getTotalEpochs() external view returns (uint) {\\n        return _numberOfEpochs;\\n    }\\n\\n    function getRewardPerEpoch() external view returns (uint) {\\n        return _totalAmountPerEpoch;\\n    }\\n\\n    // calls to the staking smart contract to retrieve the epoch total pool size\\n    function getPoolSize(uint128 epochId) external view returns (uint) {\\n        return _getPoolSize(epochId);\\n    }\\n\\n    function getCurrentEpoch() external view returns (uint) {\\n        return _getEpochId();\\n    }\\n\\n    // calls to the staking smart contract to retrieve user balance for an epoch\\n    function getEpochStake(address userAddress, uint128 epochId) external view returns (uint) {\\n        return _getUserBalancePerEpoch(userAddress, epochId);\\n    }\\n\\n    function getCurrentEpochStake(address userAddress) external view returns (uint) {\\n        return _getUserBalancePerEpoch(userAddress, _getEpochId());\\n    }\\n\\n    function getCurrentBalance(address userAddress) external view returns (uint) {\\n        return _staking.balanceOf(userAddress, _poolTokenAddress);\\n    }\\n\\n    function userLastEpochIdHarvested() external view returns (uint){\\n        return lastEpochIdHarvested[msg.sender];\\n    }\\n\\n    // internal methods\\n\\n    function _unstakeInternal(address wallet, uint256 amount) internal {\\n        _staking.withdraw(_poolTokenAddress, wallet, amount);\\n    }\\n\\n    function _initEpoch(uint128 epochId) internal {\\n        require(lastInitializedEpoch.add(1) == epochId, \\\"Epoch can be init only in order\\\");\\n        lastInitializedEpoch = epochId;\\n        // call the staking smart contract to init the epoch\\n        epochs[epochId] = _getPoolSize(epochId);\\n    }\\n\\n    function _harvest (address wallet, uint128 epochId) internal returns (uint) {\\n        // try to initialize an epoch. if it can't it fails\\n        // if it fails either user either a BarnBridge account will init not init epochs\\n        if (lastInitializedEpoch < epochId) {\\n            _initEpoch(epochId);\\n        }\\n        // Set user state for last harvested\\n        lastEpochIdHarvested[wallet] = epochId;\\n        // compute and return user total reward. For optimization reasons the transfer have been moved to an upper layer (i.e. massHarvest needs to do a single transfer)\\n        if(wallet == daoAddress){\\n            return DAO_REWARD;\\n        }\\n        if(wallet == guardianAddress){\\n            return GUARDIAN_REWARD;\\n        }\\n\\n        // exit if there is no stake on the epoch\\n        if (epochs[epochId] == 0) {\\n            return 0;\\n        }\\n        return _totalAmountPerEpoch\\n        .mul(_getUserBalancePerEpoch(wallet, epochId))\\n        .div(epochs[epochId]);\\n    }\\n\\n    // retrieve _poolTokenAddress token balance\\n    function _getPoolSize(uint128 epochId) internal view returns (uint) {\\n        return _staking.getEpochPoolSize(_poolTokenAddress, _stakingEpochId(epochId));\\n    }\\n\\n    // retrieve _poolTokenAddress token balance per user per epoch\\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId) internal view returns (uint){\\n        return _staking.getEpochUserBalance(userAddress, _poolTokenAddress, _stakingEpochId(epochId));\\n    }\\n\\n    // compute epoch id from block.timestamp and epochStart date\\n    function _getEpochId() internal view returns (uint128 epochId) {\\n        if (block.timestamp < epochStart) {\\n            return 0;\\n        }\\n        epochId = uint128(block.timestamp.sub(epochStart).div(epochDuration).add(1));\\n    }\\n\\n    // get the staking epoch\\n    function _stakingEpochId(uint128 epochId) pure internal returns (uint128) {\\n        return epochId;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/PoolStaking/PoolStaking0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport './../BaconCoin/BaconCoin0.sol';\\n\\n\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\n// Forked from Compound\\n// See https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol\\ncontract PoolStaking0 is Initializable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    uint256 constant PER_BLOCK_DECAY = 9999997757;\\n    uint256 constant PER_BLOCK_DECAY_18_DECIMALS = 999999775700000000;\\n    uint256 constant PER_BLOCK_DECAY_INVERSE = 10000002243;\\n    uint256 constant GUARDIAN_REWARD = 3900000000000000000;\\n    uint256 constant DAO_REWARD = 18000000000000000000;\\n    uint256 constant COMMUNITY_REWARD = 50000000000000000000;\\n    uint256 constant COMMUNITY_REWARD_BONUS = 100000000000000000000;\\n\\n    uint256 stakeAfterBlock;\\n    address guardianAddress;\\n    address daoAddress;\\n    address baconCoinAddress;\\n    address[] poolAddresses;\\n\\n    uint256[] updateEventBlockNumber;\\n    uint256[] updateEventNewAmountStaked;\\n    uint256 updateEventCount;\\n    uint256 currentStakedAmount;\\n\\n    mapping(address => uint256) userStaked;\\n    mapping(address => uint256) userLastDistribution;\\n\\n    uint256 oneYearBlock;\\n\\n\\n    /** \\n    *   @dev Function initialize replaces constructor in upgradable contracts\\n    *   - Calls the init function of the inherited ERC777 contract\\n    *   @param _poolAddress the address of Pool contracts approved to stake\\n    *   @param _guardianAddress The address Guardian receives Bacon distribution to\\n    */\\n    function initialize(address _poolAddress, address _guardianAddress, uint256 startingBlock, uint _stakeAfterBlock, uint256 _oneYearBlock) public initializer {\\n        guardianAddress = _guardianAddress;\\n        poolAddresses.push(_poolAddress);\\n\\n        //set initial vars\\n        updateEventCount = 0;\\n        currentStakedAmount = 0;\\n\\n        userLastDistribution[guardianAddress] = startingBlock;\\n        userLastDistribution[daoAddress] = startingBlock;\\n        stakeAfterBlock = _stakeAfterBlock;\\n        oneYearBlock = _oneYearBlock;\\n    }\\n\\n    function setOneYearBlock(uint256 _oneYearBlock) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        oneYearBlock = _oneYearBlock;\\n    }\\n\\n    function setstakeAfterBlock(uint256 _stakeAfterBlock) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        stakeAfterBlock = _stakeAfterBlock;\\n    }\\n\\n    // To be called after baconCoin0 is deployed\\n    function setBaconAddress(address _baconCoinAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        baconCoinAddress = _baconCoinAddress;\\n    }\\n\\n    // To be called after baconCoin0 is deployed\\n    function setDAOAddress(address _DAOAddress) public {\\n        require(msg.sender == guardianAddress, \\\"unapproved sender\\\");\\n        daoAddress = _DAOAddress;\\n    }\\n\\n    /**  \\n    *   @dev Function version returns uint depending on what version the contract is on\\n    */\\n    function version() public pure returns (uint) {\\n        return 0;\\n    }\\n\\n    function getContractInfo() public view returns (uint256, uint256, address, address, address, address  [] memory, uint256, uint256) {\\n        return (\\n            stakeAfterBlock,\\n            oneYearBlock,\\n            guardianAddress,\\n            daoAddress,\\n            baconCoinAddress,\\n            poolAddresses,\\n            updateEventCount,\\n            currentStakedAmount\\n        );\\n    }\\n\\n    /** \\n    *   @dev Function isApprovedPool() is an internal function that checks the array of approved pool addresses for the given address\\n    *   @param _address The address to be checked if it is approved\\n    *   @return isApproved is if the _addess is found in the list of servicerAddresses\\n    */\\n    function isApprovedPool(address _address) internal view returns (bool) {\\n        bool isApproved = false;\\n        \\n        for (uint i = 0; i < poolAddresses.length; i++) {\\n            if(_address == poolAddresses[i]) {\\n                isApproved = true;\\n            }\\n        }\\n\\n        return isApproved;\\n    }\\n\\n    /*****************************************************\\n    *       Staking FUNCTIONS\\n    ******************************************************/\\n\\n    /**\\n    *   @dev function stake accepts an amount of bHOME to be staked and creates a new updateEvent for it\\n    */\\n    function stake(address wallet, uint256 amount) public returns (bool) {\\n        require(isApprovedPool(msg.sender), \\\"sender not Pool\\\");\\n\\n        return stakeInternal(wallet, amount);\\n    }\\n\\n    \\n    function stakeInternal(address wallet, uint256 amount) internal returns (bool) {\\n        //First handle the case where this is a first staking\\n        if(userStaked[wallet] != 0 || wallet == guardianAddress || wallet == daoAddress) {\\n            distribute(wallet);\\n        } else {\\n            userLastDistribution[wallet] = block.number;\\n        }\\n\\n        userStaked[wallet] = userStaked[wallet].add(amount);\\n        currentStakedAmount = currentStakedAmount.add(amount);\\n        updateEventBlockNumber.push(block.number);\\n        updateEventNewAmountStaked.push(currentStakedAmount);\\n        updateEventCount = updateEventCount.add(1);\\n\\n        return true;\\n    }\\n\\n    function decayExponent(uint256 exponent) internal pure returns (uint256) {\\n        //10 decimals\\n        uint256 answer = PER_BLOCK_DECAY;\\n        for (uint256 i = 0; i < exponent; i++) {\\n            answer = answer.mul(10000000000).div(PER_BLOCK_DECAY_INVERSE);\\n        }\\n\\n        return answer;\\n    }\\n\\n    function calcBaconBetweenEvents(uint256 blockX, uint256 blockY) internal view returns (uint256) {\\n        //bacon per block after first year is\\n        //y=50(1-0.000000224337829)^{x}\\n        //where x is number of blocks over 15651074\\n\\n        //Bacon accumulated between two blocksover first year is:\\n        //S(x,y) = S(y) - S(x) = (A1(1-r^y) / (1-r)) - (A1(1-r^x) / (1-r))\\n        //where A1 = 50 and r = 0.9999997757\\n\\n        //1 year block subtracted from block numbers passed in since formula only cares about change in time since that point\\n        blockX = blockX.sub(oneYearBlock);\\n        blockY = blockY.sub(oneYearBlock);\\n\\n        uint256 SyNumer = decayExponent(blockY).mul(50);\\n        uint256 SxNumer = decayExponent(blockX).mul(50);\\n        uint256 denom = uint256(1000000000000000000).sub(PER_BLOCK_DECAY_18_DECIMALS);\\n\\n        uint256 Sy = SyNumer.mul(1000000000000000000).div(denom);\\n        uint256 Sx = SxNumer.mul(1000000000000000000).div(denom);\\n\\n        return Sy.sub(Sx);\\n    }\\n\\n\\n    /**\\n    *   @dev function distribute accepts a wallet address and transfers the BaconCoin accrued to their wallet since the user's Last Distribution\\n    */\\n    function distribute(address wallet) public returns (uint256) {\\n\\n        if (userStaked[wallet] == 0 && wallet != guardianAddress && wallet != daoAddress) {\\n            return 0;\\n        }\\n\\n        uint256 accruedBacon = 0;\\n        uint256 countingBlock = userLastDistribution[wallet];\\n\\n        uint256 blockDifference = 0;\\n        uint256 tempAccruedBacon = 0;\\n\\n        if(wallet == daoAddress) {\\n            blockDifference = block.number - countingBlock;\\n            tempAccruedBacon = blockDifference.mul(DAO_REWARD);\\n            accruedBacon += tempAccruedBacon;\\n        } else if (wallet == guardianAddress) {\\n            blockDifference = block.number - countingBlock;\\n            accruedBacon = blockDifference.mul(GUARDIAN_REWARD);\\n            accruedBacon += tempAccruedBacon;\\n        } else if (countingBlock < stakeAfterBlock) {\\n            countingBlock = stakeAfterBlock;\\n        }\\n\\n        if (userStaked[wallet] != 0) {\\n            //iterate through the array of update events\\n            for (uint256 i = 0; i < updateEventCount; i++) {\\n                //only accrue bacon if event is after last withdraw\\n                if (updateEventBlockNumber[i] > countingBlock) {\\n                    blockDifference = updateEventBlockNumber[i] - countingBlock;\\n                    \\n                    if(updateEventBlockNumber[i] < oneYearBlock) {\\n                        //calculate bacon accrued if update event is within the first year\\n                        //use updateEventNewAmountStaked[i-1] because that is the \\n                        tempAccruedBacon = blockDifference.mul(COMMUNITY_REWARD_BONUS).mul(userStaked[wallet]).div(updateEventNewAmountStaked[i-1]);\\n                    } else {\\n                        //calculate bacon accrued if update event is past the first year\\n                        if(countingBlock < oneYearBlock) {\\n                            //calculate the bacon accrued at the end of the first year if overlapped with first year\\n                            uint256 blocksLeftInFirstYear = oneYearBlock - countingBlock;\\n                            tempAccruedBacon = blocksLeftInFirstYear.mul(COMMUNITY_REWARD_BONUS).mul(userStaked[wallet]).div(updateEventNewAmountStaked[i-1]);\\n\\n                            //add the amount of bacon accrued before the first year to the running total and set the block difference to start calculating from new year\\n                            accruedBacon = accruedBacon.add(tempAccruedBacon);\\n                            countingBlock = oneYearBlock;\\n                        }\\n                        \\n                        //calculate the amount of Bacon accrued between events\\n                        uint256 baconBetweenBlocks = calcBaconBetweenEvents(countingBlock, updateEventBlockNumber[i]);\\n                        tempAccruedBacon = baconBetweenBlocks.mul(userStaked[wallet]).div(updateEventNewAmountStaked[i-1]);\\n                    }\\n                    \\n                    //as we iterate through events since last withdraw, add the bacon accrued since the last event to the running total & update contingBlock\\n                    accruedBacon = accruedBacon.add(tempAccruedBacon);\\n                    countingBlock = updateEventBlockNumber[i];\\n                }\\n\\n            }// end updateEvent for loop\\n\\n            // When there is no more updateEvents to loop through, the last step is to calculate accrued up to current block\\n\\n            //first check that the last updateEvent didn't happen earlier this block, in which case we're done calculating accrued bacon\\n            //countingBlock is checked against the block.number in case the counting block was set in the future as startingBlock\\n            if(countingBlock != block.number && countingBlock < block.number) {\\n                //case where still within first year\\n                if(countingBlock < oneYearBlock  && block.number < oneYearBlock) {\\n                    //calculate accrued between last updateEvent and now\\n                    blockDifference = block.number - countingBlock;\\n                    tempAccruedBacon = blockDifference.mul(COMMUNITY_REWARD_BONUS).mul(userStaked[wallet]).div(currentStakedAmount);\\n                } else {\\n                    if (countingBlock < oneYearBlock  && block.number > oneYearBlock) {\\n                        //case where current block has just surpassed 1 year\\n                        uint256 blocksLeftInFirstYear = oneYearBlock - countingBlock;\\n                        tempAccruedBacon = blocksLeftInFirstYear.mul(COMMUNITY_REWARD_BONUS).mul(userStaked[wallet]).div(updateEventNewAmountStaked[updateEventCount-1]);\\n\\n                        //add the amount of bacon accrued before the first year to the running total and set the block difference to start calculating from new year\\n                        accruedBacon = accruedBacon.add(tempAccruedBacon);\\n                        countingBlock = oneYearBlock;\\n                    } \\n\\n                    //case where last updateEvent was after year 1\\n                    //calculate the amount of Bacon accrued between events\\n                    uint256 baconBetweenBlocks = calcBaconBetweenEvents(countingBlock, block.number);\\n                    tempAccruedBacon = baconBetweenBlocks.mul(userStaked[wallet]).div(updateEventNewAmountStaked[updateEventCount-1]);\\n                }\\n\\n                accruedBacon = accruedBacon.add(tempAccruedBacon);\\n            }\\n        }\\n\\n        userLastDistribution[wallet] = block.number;\\n        BaconCoin0(baconCoinAddress).mint(wallet, accruedBacon);\\n\\n        return accruedBacon;\\n    }\\n\\n\\n    function checkStaked(address wallet) public view returns (uint256) {\\n        return userStaked[wallet];\\n    }\\n\\n    /**  \\n    *   @dev Function withdraw reduces the amount staked by a wallet by a given amount\\n    */\\n    function withdraw(uint256 amount) public returns (uint256) {\\n        require(userStaked[msg.sender] >= amount, \\\"not enough staked\\\");\\n\\n        uint256 distributed = distribute(msg.sender);\\n\\n        //reduce global variables\\n        uint256 stakedDiff = userStaked[msg.sender].sub(amount);\\n        currentStakedAmount = currentStakedAmount.sub(userStaked[msg.sender]);\\n        userStaked[msg.sender] = 0;\\n\\n        //re-stake the difference\\n        if(stakedDiff > 0) {\\n            stakeInternal(msg.sender, stakedDiff);\\n        } else {\\n            updateEventBlockNumber.push(block.number);\\n            updateEventNewAmountStaked.push(currentStakedAmount);\\n            updateEventCount = updateEventCount.add(1);\\n        }\\n\\n        //finally transfer out amount\\n        IERC777Upgradeable(poolAddresses[0]).send(msg.sender, amount, \\\"\\\");\\n\\n        return distributed;\\n\\n    }\\n\\n    function getEvents() public view returns (uint256  [] memory, uint256  [] memory) {\\n        return (updateEventBlockNumber, updateEventNewAmountStaked);\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/PoolCore/Pool4.sol\": {\r\n      \"content\": \"// contracts/Pool4.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport '../@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport './../PropTokens/PropToken0.sol';\\nimport './../LTVGuidelines.sol';\\nimport './../PoolUtils/PoolUtils0.sol';\\nimport './../PoolStaking/PoolStaking0.sol';\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\ncontract Pool4 is Initializable, ERC777Upgradeable, IERC721ReceiverUpgradeable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    struct Loan{\\n        uint256 loanId;\\n        address borrower;\\n        uint256 interestRate;\\n        uint256 principal;\\n        uint256 interestAccrued;\\n        uint256 timeLastPayment;\\n    }\\n\\n    address servicer;\\n    address ERCAddress;\\n    address[] servicerAddresses;\\n    /* Adding a variable above this line (not reflected in Pool0) will cause contract storage conflicts */\\n\\n    uint256 poolLent;\\n    uint256 poolBorrowed;\\n    mapping(address => uint256[]) userLoans;\\n    Loan[] loans;\\n    uint256 loanCount;\\n\\n    uint constant servicerFeePercentage = 1000000;\\n    uint constant baseInterestPercentage = 1000000;\\n    uint constant curveK = 120000000;\\n\\n    /* Pool1 variables introduced here */\\n    string private _name;\\n    string private _symbol;\\n    mapping(uint256 => uint256) loanToPropToken;\\n    address propTokenContractAddress;\\n\\n    /* Pool2 variables introduced here */\\n    address LTVOracleAddress;\\n\\n    /* Pool3 variables introduced here */\\n    address poolUtilsAddress;\\n    address baconCoinAddress;\\n    address poolStakingAddress;\\n\\n\\n    /*****************************************************\\n    *       POOL STRUCTURE / UPGRADABILITY FUNCTIONS\\n    ******************************************************/\\n\\n    function initializePoolFour(address _poolUtilsAddress, address _baconCoinAddress, address _poolStakingAddress) public {\\n        require(msg.sender == servicer);\\n        poolUtilsAddress = _poolUtilsAddress;\\n        baconCoinAddress = _baconCoinAddress;\\n        poolStakingAddress = _poolStakingAddress;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns(string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns(uint8) {\\n        return 6;\\n    }\\n    \\n    /** \\n    *   @dev Function setApprovedAddresses() updates the array of addresses approved by the servicer\\n    *   @param _servicerAddresses The array of addresses to be set as approved for borrowing\\n    */\\n    function setApprovedAddresses(address[] memory _servicerAddresses) public {\\n        require(msg.sender == servicer);\\n\\n        servicerAddresses = _servicerAddresses;\\n    }\\n\\n    /** \\n    *   @dev Function setApprovedAddresses() is an internal function that checks the array of approved addresses for the given address\\n    *   @param _address The address to be checked if it is approved\\n    *   @return isApproved is if the _addess is found in the list of servicerAddresses\\n    */\\n    function isApprovedServicer(address _address) internal view returns (bool) {\\n        bool isApproved = false;\\n        \\n        for (uint i = 0; i < servicerAddresses.length; i++) {\\n            if(_address == servicerAddresses[i]) {\\n                isApproved = true;\\n            }\\n        }\\n\\n        return isApproved;\\n    }\\n\\n    /*****************************************************\\n    *                GETTER FUNCTIONS\\n    ******************************************************/\\n    /**\\n    *   @dev Function getContractData() returns a lot of variables about the contract\\n    */\\n    function getContractData() public view returns (address, address, uint256, uint256, uint256, uint256) {\\n        return (servicer, ERCAddress, poolLent, (poolLent + PoolUtils0(poolUtilsAddress).getPoolInterestAccrued()), poolBorrowed, loanCount);\\n    }\\n\\n    /*\\n    *   @dev Function getLoanCount() returns how many active loans there are\\n    */ \\n    function getLoanCount() public view returns (uint256) {\\n        return loanCount;\\n    }\\n\\n    /**  \\n    *   @dev Function getSupplyableTokenAddress() returns the contract address of ERC20 this pool accepts (ususally USDC)\\n    */\\n    function getSupplyableTokenAddress() public view returns (address) {\\n        return ERCAddress;\\n    }\\n\\n    /**  \\n    *   @dev Function getServicerAddress() returns the address of this pool's servicer\\n    */\\n    function getServicerAddress() public view returns (address) {\\n        return servicer;\\n    } \\n\\n    /**  \\n    *   @dev Function getLoanDetails() returns an all the raw details about a loan\\n    *   @param loanId is the id for the loan we're looking up\\n    *   EDITED in pool1 to also return PropToken ID\\n    */\\n    function getLoanDetails(uint256 loanId) public view returns (uint256, address, uint256, uint256, uint256, uint256, uint256) {\\n        Loan memory loan = loans[loanId];\\n        //temp interestAccrued calculation because this is a read function\\n        uint256 interestAccrued = getLoanAccruedInterest(loanId);\\n        uint256 propTokenID = loanToPropToken[loanId];\\n        return (loan.loanId, loan.borrower, loan.interestRate, loan.principal, interestAccrued, loan.timeLastPayment, propTokenID);\\n    }\\n\\n    /**  \\n    *   @dev Function getLoanAccruedInterest() calculates and returns the amount of interest accrued on a given loan\\n    *   @param loanId is the id for the loan we're looking up\\n    */\\n    function getLoanAccruedInterest(uint256 loanId) public view returns (uint256) {\\n        Loan memory loan = loans[loanId];\\n        uint256 secondsSincePayment = block.timestamp.sub(loan.timeLastPayment);\\n\\n        uint256 interestPerSecond = loan.principal.mul(loan.interestRate).div(31622400);\\n        uint256 interestAccrued = interestPerSecond.mul(secondsSincePayment).div(100000000);\\n        return interestAccrued.add(loan.interestAccrued);\\n    }   \\n\\n\\n    /*****************************************************\\n    *                LENDING/BORROWING FUNCTIONS\\n    ******************************************************/\\n\\n    /**  \\n    *   @dev Function mintProportionalPoolTokens calculates how many new hc_pool tokens to mint when value is added to the pool based on proportional value\\n    *   @param recepient The address of the wallet receiving the newly minted hc_pool tokens\\n    *   @param amount The amount to be minted\\n    */\\n    function mintProportionalPoolTokens(address recepient, uint256 amount) private returns (uint256) {\\n        //check if this is first deposit\\n        if (poolLent == 0) {\\n            super._mint(recepient, amount, \\\"\\\", \\\"\\\");\\n            return amount;\\n        } else {\\n            //Calculate proportional to total value (including interest)\\n            uint256 new_hc_pool = amount.mul(super.totalSupply()).div(poolLent);\\n            super._mint(recepient, new_hc_pool, \\\"\\\", \\\"\\\");\\n            return new_hc_pool;\\n        }\\n    }\\n\\n    /**  \\n    *   @dev Function lend moves assets on the (probably usdc) contract to our own balance\\n    *   - Before calling: an approve(address _spender (proxy), uint256 _value (0xffff)) function call must be made on remote contract\\n    *   @param amount The amount of USDC to be transferred\\n    *   @return the amount of poolTokens created\\n    */\\n    function lend(\\n        uint256 amount\\n    ) public returns (uint256) {\\n        //USDC on Ropsten only right now\\n        IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n        uint256 newTokensMinted = mintProportionalPoolTokens(msg.sender, amount);\\n        poolLent = poolLent.add(amount);\\n\\n        return newTokensMinted;\\n    }\\n\\n    /**  \\n    *   @dev Function redeem burns the sender's hcPool tokens and transfers the usdc back to them\\n    *   @param amount The amount of hc_pool to be redeemed\\n    */\\n    function redeem(\\n        uint256 amount\\n    ) public {\\n        //check to see if sender has enough hc_pool to redeem\\n        require(balanceOf(msg.sender) >= amount);\\n\\n        //check to make sure there is liquidity available in the pool to withdraw\\n        uint256 tokenPrice = poolLent.mul(1000000).div(super.totalSupply());\\n        uint256 erc20ValueOfTokens = amount.mul(tokenPrice).div(1000000);\\n        require(erc20ValueOfTokens <= (poolLent - poolBorrowed));\\n\\n        //burn hcPool first\\n        super._burn(msg.sender, amount, \\\"\\\", \\\"\\\");\\n        poolLent = poolLent.sub(erc20ValueOfTokens);\\n        IERC20Upgradeable(ERCAddress).transfer(msg.sender, erc20ValueOfTokens);\\n    }\\n\\n    /**  \\n    *   @dev Function borrow creates a new Loan, moves the USDC to Borrower, and returns the loan ID and fixed Interest Rate\\n    *   - Also creates an origination fee for the Servicer in HC_Pool\\n    *   @param amount The size of the potential loan in (probably usdc).\\n    *   @param maxRate The size of the potential loan in (probably usdc).\\n    *   EDITED in pool1 to also require a PropToken\\n    *   EDITED in pool1 - borrower param was removed and msg.sender is new recepient of USDC\\n    *   EDITED in pool2 - propToken data is oulled and LTV of loan is required before loan can process\\n    */\\n    function borrow(uint256 amount, uint256 maxRate, uint256 propTokenId) public {\\n        //for v2 require this address is approved to transfer propToken \\n        require(PropToken0(propTokenContractAddress).getApproved(propTokenId) == address(this), \\\"pool not approved to move egg\\\");\\n        //also require msg.sender is owner of token\\n        require(PropToken0(propTokenContractAddress).ownerOf(propTokenId) == msg.sender, \\\"msg.sender not egg owner\\\");\\n\\n        //check the requested interest rate is still available\\n        uint256 fixedInterestRate = uint256(PoolUtils0(poolUtilsAddress).getInterestRate(amount));\\n        require(fixedInterestRate <= maxRate, \\\"interest rate no longer avail\\\");\\n\\n        //require the propToken approved has a lien value less than or equal to the requested loan size\\n        uint256 lienAmount = PropToken0(propTokenContractAddress).getLienValue(propTokenId);\\n        require(lienAmount >= amount, \\\"loan larger that egg value\\\");\\n\\n        //require that LTV of propToken is less than LTV required by oracle\\n        uint256 LTVRequirement = LTVGuidelines(LTVOracleAddress).getMaxLTV();\\n        (, , uint256[] memory SeniorLiens, uint256 HomeValue, , ,) = PropToken0(propTokenContractAddress).getPropTokenData(propTokenId);\\n        for (uint i = 0; i < SeniorLiens.length; i++) {  \\n            lienAmount = lienAmount.add(SeniorLiens[i]);\\n        }\\n        require(lienAmount.mul(100).div(HomeValue) < LTVRequirement, \\\"LTV too high\\\");\\n\\n\\n        //first take the propToken\\n        PropToken0(propTokenContractAddress).safeTransferFrom(msg.sender, address(this), propTokenId);\\n\\n        //create new Loan\\n        Loan memory newLoan = Loan(loanCount, msg.sender, fixedInterestRate, amount, 0, block.timestamp);\\n        loans.push(newLoan);\\n        userLoans[msg.sender].push(loanCount);\\n\\n        //map new loanID to Token ID\\n        loanToPropToken[loanCount] = propTokenId;\\n\\n        //update system variables\\n        loanCount = loanCount.add(1);\\n        poolBorrowed = poolBorrowed.add(amount);\\n\\n        //finally move the USDC\\n        IERC20Upgradeable(ERCAddress).transfer(msg.sender, amount);\\n\\n        //then mint HC_Pool for the servicer (fixed 1% origination is better than standard 2.5%)\\n        mintProportionalPoolTokens(servicer, amount.div(100));\\n    }\\n    \\n    /**  \\n    *   @dev Function repay repays a specific loan\\n    *   - payment is first deducted from the interest then principal. \\n    *   - the servicer_fee is deducted from the interest repayment and servicer is compensated in hc_pool\\n    *   - repayer must have first approved fromsfers on behalf \\n    *   @param loanId The loan to be repayed\\n    *   @param amount The amount of the ERC20 token to repay the loan with\\n    *   EDITED - Pool1 returns propToken when principal reaches 0\\n    */\\n\\n    function repay(uint256 loanId, uint256 amount) public {        \\n        //interestAmountRepayed keeps track of how much of the loan was returned to the pool to calculate servicer fee(treated as cash investment)\\n        uint256 interestAmountRepayed = amount;\\n\\n        uint256 currentInterest = getLoanAccruedInterest(loanId);\\n        if(currentInterest > amount) {\\n            //if the payment is less than the interest accrued on the loan, just deduct amount from interest\\n            //deduct amount FIRST (to make sure they have available balance), then reduce loan amount\\n            IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n            loans[loanId].interestAccrued = currentInterest.sub(amount);\\n        } else {\\n            //if the amount borrow is repaying is greater than interest accrued, deduct the rest from principal\\n            interestAmountRepayed = currentInterest;\\n            uint256 amountAfterInterest = amount.sub(currentInterest);\\n            \\n            if(loans[loanId].principal > amountAfterInterest) {\\n                //deduct amount from Borrower and reduce the principal\\n                IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), amount);\\n                //return the repayed principal to the 'borrowable' amount\\n                poolBorrowed = poolBorrowed.sub(amountAfterInterest);\\n                loans[loanId].principal = loans[loanId].principal.sub(amountAfterInterest);\\n            } else {\\n                //deduct totalLoanValue\\n                uint256 totalLoanValue = loans[loanId].principal.add(currentInterest);\\n                IERC20Upgradeable(ERCAddress).transferFrom(msg.sender, address(this), totalLoanValue);\\n                //return the repayed principal to the 'borrowable' amount\\n                poolBorrowed = poolBorrowed.sub(loans[loanId].principal);\\n                loans[loanId].principal = 0;\\n                //Send PropToken back to borrower\\n                PropToken0(propTokenContractAddress).safeTransferFrom(address(this), loans[loanId].borrower, loanToPropToken[loanId]);\\n            }\\n\\n            //set interest accrued to 0 AFTER successful erc20 transfer\\n            loans[loanId].interestAccrued = 0;\\n        }\\n\\n        //last payment timestamp is only updated AFTER  successful erc20 transfer\\n        loans[loanId].timeLastPayment = block.timestamp;\\n\\n        //treat repayed interest as new money Lent into the pool\\n        poolLent = poolLent.add(interestAmountRepayed);\\n\\n        //servicer fee is treated as cash investment in the pool as the percentage interest\\n        //calculate how much of payment goes to servicer here\\n        uint256 servicerFeeInERC = servicerFeePercentage.mul(interestAmountRepayed).div(loans[loanId].interestRate);\\n        mintProportionalPoolTokens(servicer, servicerFeeInERC);\\n    }\\n\\n    /*****************************************************\\n    *                Staking FUNCTIONS\\n    ******************************************************/\\n\\n    /**  \\n    *   @dev Function stake transfers users bHOME to the poolStaking contract\\n    */\\n    function stake(uint256 amount) public returns (bool) {\\n        require(balanceOf(msg.sender) >= amount, \\\"not enough to stake\\\");\\n\\n        bool successfulStake = PoolStaking0(poolStakingAddress).stake(msg.sender, amount);\\n        if(successfulStake) {\\n            transfer(poolStakingAddress, amount);\\n        }\\n\\n        return successfulStake;\\n    }\\n\\n    /**  \\n    *   @dev Function lendAndStake calls both the Lend and Stake functions in one call\\n    *   @param amount is amount of USDC to be deposited\\n    *   @return the bool from stake that reprents successful stake\\n    */\\n    function lendAndStake(uint256 amount) public returns (bool) {\\n        uint256 newPoolTokens = lend(amount);\\n        return stake(newPoolTokens);\\n    }\\n\\n    /**  \\n    *   @dev Function getVersion returns current upgraded version\\n    */\\n    function getVersion() public pure returns (uint) {\\n        return 4;\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes memory ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/LTVGuidelines.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract LTVGuidelines {\\n    uint256 maxLoanToValue;\\n\\n    constructor() {                  \\n        maxLoanToValue = 80;        \\n    } \\n \\n    // Defining function to \\n    // return the value of 'str'  \\n    function getMaxLTV() public view returns (uint256) {        \\n        return maxLoanToValue;        \\n    } \\n}\"\r\n    },\r\n    \"/contracts/ERC20UpgradeableFromERC777.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// import \\\"./IERC20Upgradeable.sol\\\";\\n// import \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\n// import \\\"../../utils/ContextUpgradeable.sol\\\";\\n// import \\\"../../proxy/utils/Initializable.sol\\\";\\n// import \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\n\\nimport './@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport './@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport './@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\nimport \\\"./@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeableFromERC777 is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n/// ERC777 Storage\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\n/// ERC20 Code\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n// ERC777 Storage\\n    uint256[41] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/BaconCoin/BaconCoin3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./../ERC20UpgradeableFromERC777.sol\\\";\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\ncontract BaconCoin3 is Initializable, ERC20UpgradeableFromERC777 {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    address stakingContract;\\n    address airdropContract;\\n\\n    /// @notice DEPRECATED  \\n    /// A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice DEPRECATED  \\n    /// The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /*****************************************************\\n    *       Variables added in BaconCoin1\\n    ******************************************************/\\n\\n    /// @notice A record of votes checkpoints for a delegate's account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public delegateCheckpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numDelegateCheckpoints;\\n\\n    /*****************************************************\\n    *       EVENTS\\n    ******************************************************/\\n    \\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /*****************************************************\\n    *       BASE FUNCTIONS\\n    ******************************************************/\\n\\n    function setStakingContract(address _stakingContract) public {\\n        require(msg.sender == stakingContract, \\\"Invalid sender\\\");\\n        stakingContract = _stakingContract;\\n    }\\n\\n    function rinkebyOnlySetStakingContract(address _stakingContract) public {\\n        require(msg.sender == 0x602eb5180Ce24240cf40f8BE124Cc4d3a2890686 && block.chainid == 4, \\\"BaconCoin: Invalid sender or chain\\\");\\n        stakingContract = _stakingContract;\\n    }\\n\\n    // Transfer func must be overwritten to also moveDelegates when balance is transferred\\n    function transfer(address dst, uint amount) public override returns (bool) {\\n        require(super.transfer(dst, amount));\\n        _moveDelegates(delegates[msg.sender], delegates[dst], amount);\\n        return true;\\n    }\\n\\n    // TransferFrom func must be overwritten to also moveDelegates when balance is transferred\\n    function transferFrom(address src, address dst, uint256 amount) public override returns (bool) {\\n        require(super.transferFrom(src, dst, amount));\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n        return true;\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        require(msg.sender == stakingContract || msg.sender == airdropContract, \\\"Invalid mint sender\\\");\\n        super._mint(account, amount);\\n        _moveDelegates(address(0), delegates[account], amount);\\n    }\\n\\n    function burn(uint256 amount, bytes memory data) public {\\n        super._burn(msg.sender, amount);\\n        _moveDelegates(delegates[msg.sender], address(0), amount);\\n    }\\n\\n    /**  \\n    *   @dev Function version returns uint depending on what version the contract is on\\n    */\\n    function version() public pure returns (uint) {\\n        return 3;\\n    }\\n    \\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    /********************************\\n    *     GOVERNANCE FUNCTIONS      *\\n    *********************************/\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"BaconCoin: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"BaconCoin: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"BaconCoin: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numDelegateCheckpoints[account];\\n        return nCheckpoints > 0 ? delegateCheckpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n    * @notice Determine the prior number of votes for an account as of a block number\\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    * @param account The address of the account to check\\n    * @param blockNumber The block number to get the vote balance at\\n    * @return The number of votes the account had as of the given block\\n    */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"BaconCoin: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numDelegateCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (delegateCheckpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return delegateCheckpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (delegateCheckpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = delegateCheckpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return delegateCheckpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numDelegateCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? delegateCheckpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numDelegateCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? delegateCheckpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"BaconCoin: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && delegateCheckpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          delegateCheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          delegateCheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numDelegateCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/BaconCoin/BaconCoin0.sol\": {\r\n      \"content\": \"// contracts/Pool0.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport '../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\n\\ncontract BaconCoin0 is Initializable, ERC777Upgradeable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    address stakingContract;\\n    address airdropContract;\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /*****************************************************\\n    *       EVENTS\\n    ******************************************************/\\n    \\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /*****************************************************\\n    *       BASE FUNCTIONS\\n    ******************************************************/\\n\\n    /** \\n    *   @dev Function initialize replaces constructor in upgradable contracts\\n    *   - Calls the init function of the inherited ERC777 contract\\n    *   @param name Name of this particular ERC777 token\\n    *   @param symbol The ticker this token will go by\\n    */\\n    function initialize(string memory name, string memory symbol, address _stakingContractAddress, address _airdropContractAddress) public initializer {\\n        stakingContract = _stakingContractAddress;\\n        airdropContract = _airdropContractAddress;\\n        address[] memory operators;\\n        ERC777Upgradeable.__ERC777_init(name, symbol, operators );\\n    }\\n\\n    // Transfer func must be overwritten to also moveDelegates when balance is transferred\\n    function transfer(address dst, uint amount) public override returns (bool) {\\n        require(super.transfer(dst, amount));\\n        _moveDelegates(delegates[msg.sender], delegates[dst], amount);\\n        return true;\\n    }\\n\\n    // TransferFrom func must be overwritten to also moveDelegates when balance is transferred\\n    function transferFrom(address src, address dst, uint256 amount) public override returns (bool) {\\n        require(super.transferFrom(src, dst, amount));\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n        return true;\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        require(msg.sender == stakingContract || msg.sender == airdropContract, \\\"Invalid mint sender\\\");\\n        super._mint(account, amount, \\\"\\\", \\\"\\\");\\n        _moveDelegates(address(0), account, amount);\\n    }\\n\\n    /**  \\n    *   @dev Function version returns uint depending on what version the contract is on\\n    */\\n    function version() public pure returns (uint) {\\n        return 0;\\n    }\\n    \\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n\\n    /********************************\\n    *     GOVERNANCE FUNCTIONS      *\\n    *********************************/\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"BaconCoin: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"BaconCoin: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"BaconCoin: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n    * @notice Determine the prior number of votes for an account as of a block number\\n    * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    * @param account The address of the account to check\\n    * @param blockNumber The block number to get the vote balance at\\n    * @return The number of votes the account had as of the given block\\n    */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"BaconCoin: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"BaconCoin: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts/utils/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC777/IERC777SenderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777SenderUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/ERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777Upgradeable.sol\\\";\\nimport \\\"./IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./IERC777SenderUpgradeable.sol\\\";\\nimport \\\"../ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777Upgradeable is Initializable, ContextUpgradeable, IERC777Upgradeable, IERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC777_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC777_init_unchained(name_, symbol_, defaultOperators_);\\n    }\\n\\n    function __ERC777_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        uint256 currentAllowance = _allowances[holder][spender];\\n        require(currentAllowance >= amount, \\\"ERC777: transfer amount exceeds allowance\\\");\\n        _approve(holder, spender, currentAllowance - amount);\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777SenderUpgradeable(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777RecipientUpgradeable(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[41] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721URIStorage_init_unchained();\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propTokenId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServicerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyableTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializePool9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lendAndStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolStakingAddress\",\"type\":\"address\"}],\"name\":\"linkPoolStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolStakingRewardAddress\",\"type\":\"address\"}],\"name\":\"linkPoolStakingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool10", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}