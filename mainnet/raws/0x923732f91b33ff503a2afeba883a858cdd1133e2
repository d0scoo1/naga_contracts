{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract BridgeToTarget {\r\n    uint256 public immutable rootChainId;\r\n    uint256 public immutable childChainId;\r\n    address public immutable rootToken;\r\n    address public immutable childToken;\r\n    address public immutable bridge;\r\n    address public immutable target;\r\n\r\n    constructor(\r\n        uint256 _rootChainId,\r\n        uint256 _childChainId,\r\n        address _rootToken,\r\n        address _childToken,\r\n        address _bridge,\r\n        address _target\r\n    ) public {\r\n        rootChainId = _rootChainId;\r\n        childChainId = _childChainId;\r\n        rootToken = _rootToken;\r\n        childToken = _childToken;\r\n        bridge = _bridge;\r\n        target = _target;\r\n    }\r\n\r\n    function run() external {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        if (chainId == rootChainId) {\r\n            uint256 balance = IERC20(rootToken).balanceOf(address(this));\r\n            if (balance > 0) IERC20(rootToken).transfer(bridge, balance);\r\n        } else if (chainId == childChainId) {\r\n            uint256 balance = IERC20(childToken).balanceOf(address(this));\r\n            if (balance > 0) IERC20(childToken).transfer(target, balance);\r\n        } else {\r\n            revert('bad chain');\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rootChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_childChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BridgeToTarget", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000380000000000000000000000004c2e59d098df7b6cbae0848d66de2f8a4889b9c300000000000000000000000043f5b29d63cedc5a7c1724dbb1d698fde05ada21000000000000000000000000533e3c0e6b48010873b947bddc4721b1bdff96480000000000000000000000005cf30c3d934c11774416becdc225d58e600effd7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e327439a8510582ad3aaf99c78f8262464cdf478f4048b5eb21216d113a9c16"}]}