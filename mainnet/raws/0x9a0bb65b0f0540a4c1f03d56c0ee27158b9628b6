{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n** Telegram : https://t.me/elonkong\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n} \r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract ElonKong is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    uint256 public buyLiquidityFee = 0;\r\n    uint256 public sellLiquidityFee = 0;\r\n\r\n    uint256 public buyTxFee = 12;\r\n    uint256 private defaultBuyTxFee = 12;\r\n    uint256 public sellTxFee = 12;\r\n\r\n    uint256 public defaultSellLiquidityFee = 0;\r\n    uint256 public defaultSellTxFee = 12;\r\n\r\n    uint256 public hourSellLiquidityFee = 0;\r\n    uint256 public hourSellTxFee = 15;\r\n\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForTax;\r\n    bool public liquifyEnabled = false;\r\n\r\n    uint256 public _tTotal = 1000000 * 10**9;                       \r\n    uint256 public swapAtAmount = _tTotal.mul(50).div(10000);      \r\n    uint256 public maxTxLimit = 35000 * 10**9;                 \r\n    uint256 public maxWalletLimit =  35000 * 10**9;                   \r\n\r\n    address private dev;\r\n    address private liquidity;\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 public launchBlock;\r\n\r\n    bool private swapping;\r\n    bool public isLaunched;\r\n    bool private cooldownEnabled = false;\r\n    bool private useBuyMap = true;\r\n    bool private blacklistAllowed = true; //blacklist will be disabled forever after launch\r\n    uint256 private deadblocks;\r\n\r\n    address private governer;\r\n\r\n    // exclude from fees\r\n    mapping (address => bool) public isExcludedFromFees;\r\n\r\n    // exclude from max transaction amount\r\n    mapping (address => bool) public isExcludedFromTxLimit;\r\n\r\n    // exclude from max wallet limit\r\n    mapping (address => bool) public isExcludedFromWalletLimit;\r\n\r\n    // if the account is blacklisted from transacting\r\n    mapping (address => bool) public isBlacklisted;\r\n\r\n    // buy map for timed sell tax\r\n    mapping (address => uint256) public _buyMap;\r\n\r\n    // mapping for cooldown\r\n    mapping (address => uint) public cooldown;\r\n\r\n\r\n    constructor() public ERC20(\"Elon Kong\", \"ELONKONG\") {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        governer = msg.sender;\r\n\r\n        // exclude from fees, wallet limit and transaction limit\r\n        excludeFromAllLimits(owner(), true);\r\n        excludeFromAllLimits(address(this), true);\r\n        excludeFromWalletLimit(uniswapV2Pair, true);\r\n\r\n        governer = msg.sender;\r\n        dev = payable(0x62F31b08427984e6dcc6C8f0173d11AFF56B263c);\r\n        liquidity = payable(msg.sender);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(owner(), _tTotal);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool value) public {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(isExcludedFromFees[account] != value, \"Fees: Already set to this value\");\r\n        isExcludedFromFees[account] = value;\r\n    }\r\n\r\n    function excludeFromTxLimit(address account, bool value) public {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(isExcludedFromTxLimit[account] != value, \"TxLimit: Already set to this value\");\r\n        isExcludedFromTxLimit[account] = value;\r\n    }\r\n\r\n    function excludeFromWalletLimit(address account, bool value) public {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(isExcludedFromWalletLimit[account] != value, \"WalletLimit: Already set to this value\");\r\n        isExcludedFromWalletLimit[account] = value;\r\n    }\r\n\r\n    function excludeFromAllLimits(address account, bool value) public {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        excludeFromFees(account, value);\r\n        excludeFromTxLimit(account, value);\r\n        excludeFromWalletLimit(account, value);\r\n    }\r\n\r\n    function setBuyFee(uint256 liquidityFee, uint256 txFee) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n\t    require(liquidityFee.add(txFee) <= 12, \"Total buy fee can not be more than 12\");\r\n        buyLiquidityFee = liquidityFee;\r\n        defaultBuyTxFee = txFee;\r\n        buyTxFee = txFee;\r\n    }\r\n\r\n    function setSellFee(uint256 liquidityFee, uint256 txFee) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(liquidityFee.add(txFee) <= 12, \"Total sell fee can not be more than 12\");\r\n        sellLiquidityFee = liquidityFee;\r\n        sellTxFee = txFee;\r\n\r\n        defaultSellLiquidityFee = liquidityFee;\r\n        defaultSellTxFee = txFee;\r\n    }\r\n\r\n    function setHourSellFee(uint256 liquidityFee, uint256 txFee) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(liquidityFee.add(txFee) <= 24, \"Total default fee can not be more than 25\");\r\n        hourSellLiquidityFee = liquidityFee;\r\n        hourSellTxFee = txFee;\r\n    }\r\n\r\n    function setCooldownEnabled(bool _enabled) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        cooldownEnabled = _enabled;\r\n    }\r\n\r\n   function setUseBuyMap(bool _enabled) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        useBuyMap = _enabled;\r\n    }\r\n\r\n    function setMaxTxLimit(uint256 newLimit) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        maxTxLimit = newLimit * (10**9);\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 newLimit) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        maxWalletLimit = newLimit * (10**9);\r\n    }\r\n\r\n    function setSwapAtAmount(uint256 amountToSwap) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        swapAtAmount = amountToSwap * (10**9);\r\n    }\r\n\r\n    \r\n    function setLiquifyEnabled(bool _enabled) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        liquifyEnabled = _enabled;\r\n    }\r\n\r\n\r\n    function setDeadBlocks(uint256 _deadblocks) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(_deadblocks < 3);\r\n        deadblocks = _deadblocks;\r\n    }\r\n\r\n    function updateDevWallet(address newWallet) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        dev = newWallet;\r\n    }\r\n\r\n    function updateLiqWallet(address newWallet) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        liquidity = newWallet;\r\n    }\r\n\r\n    function addBlacklist(address account) external onlyOwner() {\r\n        require(!isBlacklisted[account], \"Blacklist: Already blacklisted\");\r\n        require(account != uniswapV2Pair, \"Cannot blacklist pair\");\r\n        _setBlacklist(account, true);\r\n    }\r\n\r\n    function removeBlacklist(address account) external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        require(isBlacklisted[account], \"Blacklist: Not blacklisted\");\r\n        _setBlacklist(account, false);\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        uint256 totalTokensForFee = tokensForLiquidity + tokensForTax;\r\n        swapBack(totalTokensForFee);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(msg.sender == governer, \"Governer only function\");\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(address(dev)).transfer(contractETHBalance);\r\n    }\r\n    \r\n\r\n    function openTrading(uint256 _deadblocks) external onlyOwner() {\r\n        require(!isLaunched, \"Contract is already launched\");\r\n        deadblocks = _deadblocks;\r\n        isLaunched = true;\r\n        launchBlock = block.number;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"transfer from the zero address\");\r\n        require(to != address(0), \"transfer to the zero address\");\r\n        require(amount <= maxTxLimit || isExcludedFromTxLimit[from] || isExcludedFromTxLimit[to], \"Tx Amount too large\");\r\n        require(balanceOf(to).add(amount) <= maxWalletLimit || isExcludedFromWalletLimit[to], \"Transfer will exceed wallet limit\");\r\n        require(isLaunched || isExcludedFromFees[from] || isExcludedFromFees[to], \"Waiting to go live\");\r\n        require(!isBlacklisted[from], \"Sender is blacklisted\");\r\n\r\n        if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 totalTokensForFee = tokensForLiquidity + tokensForTax;\r\n        bool canSwap = totalTokensForFee >= swapAtAmount;\r\n        buyTxFee = defaultBuyTxFee;\r\n        if(\r\n            from != uniswapV2Pair &&\r\n            canSwap &&\r\n            !swapping\r\n        ) {\r\n            swapping = true;\r\n            swapBack(totalTokensForFee);\r\n            swapping = false;\r\n        } else if(\r\n            from == uniswapV2Pair &&\r\n            to != uniswapV2Pair &&\r\n            block.number < launchBlock + deadblocks &&\r\n            !isExcludedFromFees[to]\r\n        ) {\r\n            buyTxFee = 90;\r\n            _setBlacklist(to, true);\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if(isExcludedFromFees[from] || isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if(takeFee) {\r\n            uint256 fees;\r\n\r\n            // on sell\r\n            if (to == uniswapV2Pair) {\r\n                if(useBuyMap){\r\n                    if (_buyMap[from] != 0 &&\r\n                        (_buyMap[from] + (1 hours) >= block.timestamp))  {\r\n                        sellLiquidityFee = hourSellLiquidityFee;\r\n                        sellTxFee = hourSellTxFee;\r\n                        _buyMap[from] = block.timestamp;\r\n                    } else {\r\n                        sellLiquidityFee = defaultSellLiquidityFee;\r\n                        sellTxFee = defaultSellTxFee;\r\n                    }\r\n                } else {\r\n                    sellLiquidityFee = defaultSellLiquidityFee;\r\n                    sellTxFee = defaultSellTxFee;\r\n                }\r\n              \r\n                uint256 sellTotalFees = sellLiquidityFee.add(sellTxFee);\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity = tokensForLiquidity.add(fees.mul(sellLiquidityFee).div(sellTotalFees));\r\n                tokensForTax = tokensForTax.add(fees.mul(sellTxFee).div(sellTotalFees));\r\n            }\r\n            // on buy & wallet transfers\r\n            else {\r\n                if(cooldownEnabled){\r\n                    require(cooldown[to] < block.timestamp);\r\n                    cooldown[to] = block.timestamp + (30 seconds);\r\n                }\r\n                if (useBuyMap && _buyMap[to] == 0) {\r\n                    _buyMap[to] = block.timestamp;\r\n                }\r\n                uint256 buyTotalFees = buyLiquidityFee.add(buyTxFee);\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity = tokensForLiquidity.add(fees.mul(buyLiquidityFee).div(buyTotalFees));\r\n                tokensForTax = tokensForTax.add(fees.mul(buyTxFee).div(buyTotalFees));\r\n            }\r\n\r\n            if(fees > 0){\r\n                super._transfer(from, address(this), fees);\r\n                amount = amount.sub(fees);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapBack(uint256 totalTokensForFee) private {\r\n        uint256 toSwap = swapAtAmount;\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = toSwap.mul(tokensForLiquidity).div(totalTokensForFee).div(2);\r\n        uint256 taxTokens = toSwap.sub(liquidityTokens).sub(liquidityTokens);\r\n        uint256 amountToSwapForETH = toSwap.sub(liquidityTokens);\r\n\r\n        _swapTokensForETH(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForTax = ethBalance.mul(taxTokens).div(amountToSwapForETH);\r\n        uint256 ethForLiquidity = ethBalance.sub(ethForTax);\r\n\r\n        tokensForLiquidity = tokensForLiquidity.sub(liquidityTokens.mul(2));\r\n        tokensForTax = tokensForTax.sub(toSwap.sub(liquidityTokens.mul(2)));\r\n\r\n       \r\n        if((ethForLiquidity > 0) && liquifyEnabled){\r\n            _addLiquidity(liquidityTokens, ethForLiquidity);\r\n             payable(address(dev)).transfer(ethForTax);\r\n        } else {\r\n             payable(address(dev)).transfer(ethBalance);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _setBlacklist(address account, bool value) internal {\r\n        isBlacklisted[account] = value;\r\n    }\r\n\r\n    function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent){\r\n        require(_token != address(this), \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n    \r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSellTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourSellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hourSellTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadblocks\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadblocks\",\"type\":\"uint256\"}],\"name\":\"setDeadBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"setHourSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setUseBuyMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ElonKong", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9189c344b2070c32fb7052aec8192aeb3658eb09ae77f523135883216ed63ed"}]}