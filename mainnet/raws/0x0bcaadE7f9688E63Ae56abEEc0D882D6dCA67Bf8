{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Battles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\nimport './SmolGame.sol';\\n\\ncontract Battles is SmolGame, VRFConsumerBaseV2 {\\n  uint256 private constant PERCENT_DENOMENATOR = 1000;\\n  address public mainBattleToken = 0x2bf6267c4997548d8de56087E5d48bDCCb877E77;\\n\\n  VRFCoordinatorV2Interface vrfCoord;\\n  LinkTokenInterface link;\\n  uint64 private _vrfSubscriptionId;\\n  bytes32 private _vrfKeyHash;\\n  uint16 private _vrfNumBlocks = 3;\\n  uint32 private _vrfCallbackGasLimit = 600000;\\n  mapping(uint256 => bytes32) private _battleSettleInit;\\n  mapping(bytes32 => uint256) private _battleSettleInitReqId;\\n\\n  struct Battle {\\n    bytes32 id;\\n    uint256 allIndex;\\n    uint256 activeIndex;\\n    uint256 timestamp;\\n    address player1;\\n    address player2;\\n    address requiredPlayer2; // if player1 wants to battle specific address, provide here\\n    bool isNativeToken; // ETH, BNB, etc.\\n    address erc20Token;\\n    uint256 desiredAmount;\\n    uint256 actualAmount;\\n    bool isSettled;\\n    bool isCancelled;\\n  }\\n  bytes32[] public allBattles;\\n  bytes32[] public activeBattles;\\n  mapping(bytes32 => Battle) public battlesIndexed;\\n\\n  uint256 public battleWinMainPercentage = (PERCENT_DENOMENATOR * 95) / 100; // 95% wager amount\\n  uint256 public battleWinAltPercentage = (PERCENT_DENOMENATOR * 90) / 100; // 90% wager amount\\n  uint256 public battleAmountBattled;\\n  uint256 public battlesInitiatorWon;\\n  uint256 public battlesChallengerWon;\\n  mapping(address => uint256) public battlesUserWon;\\n  mapping(address => uint256) public battlesUserLost;\\n  mapping(address => uint256) public battleUserAmountWon;\\n  mapping(address => uint256) public battleUserAmountLost;\\n  mapping(address => bool) public lastBattleWon;\\n\\n  event CreateBattle(\\n    bytes32 indexed battleId,\\n    address user,\\n    bool isNative,\\n    address erc20Token,\\n    uint256 amount\\n  );\\n  event CancelBattle(bytes32 indexed battleId);\\n  event EnterBattle(bytes32 indexed battleId);\\n  event SettledBattle(\\n    bytes32 indexed battleId,\\n    address indexed winner,\\n    uint256 amountWon\\n  );\\n\\n  constructor(\\n    address _vrfCoordinator,\\n    uint64 _subscriptionId,\\n    address _linkToken,\\n    bytes32 _keyHash\\n  ) VRFConsumerBaseV2(_vrfCoordinator) {\\n    vrfCoord = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    link = LinkTokenInterface(_linkToken);\\n    _vrfSubscriptionId = _subscriptionId;\\n    _vrfKeyHash = _keyHash;\\n  }\\n\\n  function createBattle(\\n    bool _isNative,\\n    address _erc20,\\n    uint256 _amount,\\n    address _requiredPlayer2\\n  ) external payable {\\n    uint256 _actualAmount = _amount;\\n    if (_isNative) {\\n      require(\\n        msg.value >= _amount + serviceFeeWei,\\n        'not enough ETH in wallet to battle this much'\\n      );\\n    } else {\\n      IERC20 token = IERC20(_erc20);\\n      require(\\n        token.balanceOf(msg.sender) > _amount,\\n        'not enough of token in wallet to battle this much'\\n      );\\n      uint256 _balBefore = token.balanceOf(address(this));\\n      token.transferFrom(msg.sender, address(this), _amount);\\n      _actualAmount = token.balanceOf(address(this)) - _balBefore;\\n    }\\n\\n    bytes32 _battleId = getBattleId(\\n      msg.sender,\\n      _isNative,\\n      _erc20,\\n      block.timestamp\\n    );\\n    require(battlesIndexed[_battleId].timestamp == 0, 'battle already created');\\n\\n    battlesIndexed[_battleId] = Battle({\\n      id: _battleId,\\n      allIndex: allBattles.length,\\n      activeIndex: activeBattles.length,\\n      timestamp: block.timestamp,\\n      player1: msg.sender,\\n      player2: address(0),\\n      requiredPlayer2: _requiredPlayer2,\\n      isNativeToken: _isNative,\\n      erc20Token: _erc20,\\n      desiredAmount: _amount,\\n      actualAmount: _actualAmount,\\n      isSettled: false,\\n      isCancelled: false\\n    });\\n    allBattles.push(_battleId);\\n    activeBattles.push(_battleId);\\n\\n    _payServiceFee();\\n    emit CreateBattle(_battleId, msg.sender, _isNative, _erc20, _amount);\\n  }\\n\\n  function cancelBattle(bytes32 _battleId) external {\\n    Battle storage _battle = battlesIndexed[_battleId];\\n    require(_battle.timestamp > 0, 'battle not created yet');\\n    require(\\n      _battle.player1 == msg.sender || owner() == msg.sender,\\n      'user not authorized to cancel'\\n    );\\n    require(\\n      _battle.player2 == address(0),\\n      'battle settlement is already underway'\\n    );\\n    require(\\n      !_battle.isSettled && !_battle.isCancelled,\\n      'battle already settled or cancelled'\\n    );\\n\\n    _battle.isCancelled = true;\\n    _removeActiveBattle(_battle.activeIndex);\\n\\n    if (_battle.isNativeToken) {\\n      uint256 _balBefore = address(this).balance;\\n      (bool success, ) = payable(_battle.player1).call{\\n        value: _battle.actualAmount\\n      }('');\\n      require(success, 'could not refund player1 original battle fee');\\n      require(\\n        address(this).balance >= _balBefore - _battle.actualAmount,\\n        'too much withdrawn'\\n      );\\n    } else {\\n      IERC20 token = IERC20(_battle.erc20Token);\\n      token.transfer(_battle.player1, _battle.actualAmount);\\n    }\\n    emit CancelBattle(_battleId);\\n  }\\n\\n  function enterBattle(bytes32 _battleId) external payable {\\n    require(_battleSettleInitReqId[_battleId] == 0, 'already initiated');\\n    _payServiceFee();\\n    Battle storage _battle = battlesIndexed[_battleId];\\n    require(\\n      _battle.requiredPlayer2 == address(0) ||\\n        _battle.requiredPlayer2 == msg.sender,\\n      'battler is invalid user'\\n    );\\n    _battle.player2 = msg.sender;\\n    if (_battle.isNativeToken) {\\n      require(\\n        msg.value >= _battle.actualAmount + serviceFeeWei,\\n        'not enough ETH in wallet to battle this much'\\n      );\\n    } else {\\n      IERC20 token = IERC20(_battle.erc20Token);\\n      uint256 _balBefore = token.balanceOf(address(this));\\n      token.transferFrom(msg.sender, address(this), _battle.desiredAmount);\\n      require(\\n        token.balanceOf(address(this)) >= _balBefore + _battle.actualAmount,\\n        'not enough transferred probably because of token taxes'\\n      );\\n    }\\n\\n    uint256 requestId = vrfCoord.requestRandomWords(\\n      _vrfKeyHash,\\n      _vrfSubscriptionId,\\n      _vrfNumBlocks,\\n      _vrfCallbackGasLimit,\\n      uint16(1)\\n    );\\n    _battleSettleInit[requestId] = _battleId;\\n    _battleSettleInitReqId[_battleId] = requestId;\\n\\n    _removeActiveBattle(_battle.activeIndex);\\n\\n    emit EnterBattle(_battleId);\\n  }\\n\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n    internal\\n    override\\n  {\\n    _settleBattle(requestId, randomWords[0]);\\n  }\\n\\n  function manualFulfillRandomWords(\\n    uint256 requestId,\\n    uint256[] memory randomWords\\n  ) external onlyOwner {\\n    _settleBattle(requestId, randomWords[0]);\\n  }\\n\\n  function _settleBattle(uint256 requestId, uint256 randomNumber) private {\\n    bytes32 _battleId = _battleSettleInit[requestId];\\n    Battle storage _battle = battlesIndexed[_battleId];\\n    require(!_battle.isSettled, 'battle already settled');\\n    _battle.isSettled = true;\\n\\n    uint256 _feePercentage = _battle.isNativeToken\\n      ? battleWinAltPercentage\\n      : _battle.erc20Token == mainBattleToken\\n      ? battleWinMainPercentage\\n      : battleWinAltPercentage;\\n    uint256 _amountToWin = _battle.actualAmount +\\n      (_battle.actualAmount * _feePercentage) /\\n      PERCENT_DENOMENATOR;\\n\\n    address _winner = randomNumber % 2 == 0 ? _battle.player1 : _battle.player2;\\n    address _loser = _battle.player1 == _winner\\n      ? _battle.player2\\n      : _battle.player1;\\n    if (_battle.isNativeToken) {\\n      uint256 _balBefore = address(this).balance;\\n      (bool success, ) = payable(_winner).call{ value: _amountToWin }('');\\n      require(success, 'could not pay winner battle winnings');\\n      require(\\n        address(this).balance >= _balBefore - _amountToWin,\\n        'too much withdrawn'\\n      );\\n    } else {\\n      IERC20 token = IERC20(_battle.erc20Token);\\n      token.transfer(_winner, _amountToWin);\\n    }\\n\\n    battleAmountBattled += _battle.desiredAmount * 2;\\n    battlesInitiatorWon += randomNumber % 2 == 0 ? 1 : 0;\\n    battlesChallengerWon += randomNumber % 2 == 0 ? 0 : 1;\\n    battlesUserWon[_winner]++;\\n    battlesUserLost[_loser]++;\\n    battleUserAmountWon[_winner] += _amountToWin - _battle.actualAmount;\\n    battleUserAmountLost[_loser] += _battle.desiredAmount;\\n    lastBattleWon[_winner] = true;\\n    lastBattleWon[_loser] = false;\\n\\n    emit SettledBattle(_battleId, _winner, _amountToWin);\\n  }\\n\\n  function _removeActiveBattle(uint256 _activeIndex) internal {\\n    if (activeBattles.length > 1) {\\n      activeBattles[_activeIndex] = activeBattles[activeBattles.length - 1];\\n      battlesIndexed[activeBattles[_activeIndex]].activeIndex = _activeIndex;\\n    }\\n    activeBattles.pop();\\n  }\\n\\n  function getBattleId(\\n    address _player1,\\n    bool _isNative,\\n    address _erc20Token,\\n    uint256 _timestamp\\n  ) public pure returns (bytes32) {\\n    return\\n      keccak256(abi.encodePacked(_player1, _isNative, _erc20Token, _timestamp));\\n  }\\n\\n  function getNumBattles() external view returns (uint256) {\\n    return allBattles.length;\\n  }\\n\\n  function getNumActiveBattles() external view returns (uint256) {\\n    return activeBattles.length;\\n  }\\n\\n  function getAllActiveBattles() external view returns (Battle[] memory) {\\n    Battle[] memory _battles = new Battle[](activeBattles.length);\\n    for (uint256 i = 0; i < activeBattles.length; i++) {\\n      _battles[i] = battlesIndexed[activeBattles[i]];\\n    }\\n    return _battles;\\n  }\\n\\n  function setMainBattleToken(address _token) external onlyOwner {\\n    mainBattleToken = _token;\\n  }\\n\\n  function setBattleWinMainPercentage(uint256 _percentage) external onlyOwner {\\n    require(_percentage <= PERCENT_DENOMENATOR, 'cannot exceed 100%');\\n    battleWinMainPercentage = _percentage;\\n  }\\n\\n  function setBattleWinAltPercentage(uint256 _percentage) external onlyOwner {\\n    require(_percentage <= PERCENT_DENOMENATOR, 'cannot exceed 100%');\\n    battleWinAltPercentage = _percentage;\\n  }\\n\\n  function setVrfSubscriptionId(uint64 _subId) external onlyOwner {\\n    _vrfSubscriptionId = _subId;\\n  }\\n\\n  function setVrfNumBlocks(uint16 _numBlocks) external onlyOwner {\\n    _vrfNumBlocks = _numBlocks;\\n  }\\n\\n  function setVrfCallbackGasLimit(uint32 _gas) external onlyOwner {\\n    _vrfCallbackGasLimit = _gas;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/SmolGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\ncontract SmolGame is Ownable {\\n  address payable public treasury;\\n  uint256 public serviceFeeWei;\\n\\n  function _payServiceFee() internal {\\n    if (serviceFeeWei > 0) {\\n      require(msg.value >= serviceFeeWei, 'not able to pay service fee');\\n      address payable _treasury = treasury == address(0)\\n        ? payable(owner())\\n        : treasury;\\n      (bool success, ) = _treasury.call{ value: serviceFeeWei }('');\\n      require(success, 'could not pay service fee');\\n    }\\n  }\\n\\n  function setTreasury(address _treasury) external onlyOwner {\\n    treasury = payable(_treasury);\\n  }\\n\\n  function setServiceFeeWei(uint256 _feeWei) external onlyOwner {\\n    serviceFeeWei = _feeWei;\\n  }\\n\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n\\n  function withdrawETH(uint256 _amountWei) external onlyOwner {\\n    _amountWei = _amountWei == 0 ? address(this).balance : _amountWei;\\n    payable(owner()).call{ value: _amountWei }('');\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"battleId\",\"type\":\"bytes32\"}],\"name\":\"CancelBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"battleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"battleId\",\"type\":\"bytes32\"}],\"name\":\"EnterBattle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"battleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"SettledBattle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeBattles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBattles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleAmountBattled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"battleUserAmountLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"battleUserAmountWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleWinAltPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleWinMainPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battlesChallengerWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"battlesIndexed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"allIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requiredPlayer2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battlesInitiatorWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"battlesUserLost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"battlesUserWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_battleId\",\"type\":\"bytes32\"}],\"name\":\"cancelBattle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_requiredPlayer2\",\"type\":\"address\"}],\"name\":\"createBattle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_battleId\",\"type\":\"bytes32\"}],\"name\":\"enterBattle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveBattles\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"allIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requiredPlayer2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNativeToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"}],\"internalType\":\"struct Battles.Battle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBattleId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumActiveBattles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumBattles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBattleWon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainBattleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"manualFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBattleWinAltPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setBattleWinMainPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setMainBattleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeWei\",\"type\":\"uint256\"}],\"name\":\"setServiceFeeWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gas\",\"type\":\"uint32\"}],\"name\":\"setVrfCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_numBlocks\",\"type\":\"uint16\"}],\"name\":\"setVrfNumBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"setVrfSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Battles", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699090000000000000000000000000000000000000000000000000000000000000043000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}