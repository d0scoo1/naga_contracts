{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SushiLPPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { V2Migrator } from \\\"./base/V2Migrator.sol\\\";\\nimport { CorePool } from \\\"./base/CorePool.sol\\\";\\nimport { ErrorHandler } from \\\"./libraries/ErrorHandler.sol\\\";\\nimport { ICorePoolV1 } from \\\"./interfaces/ICorePoolV1.sol\\\";\\n\\n/**\\n * @title The Sushi LP Pool.\\n *\\n * @dev Extends all functionality from V2Migrator contract, there isn't a lot of\\n *      additions compared to ILV pool. Sushi LP pool basically needs to be able\\n *      to be called by ILV pool in batch calls where we claim rewards from multiple\\n *      pools.\\n */\\ncontract SushiLPPool is Initializable, V2Migrator {\\n    using ErrorHandler for bytes4;\\n\\n    /// @dev Calls __V2Migrator_init().\\n    function initialize(\\n        address ilv_,\\n        address silv_,\\n        address _poolToken,\\n        address _factory,\\n        uint64 _initTime,\\n        uint32 _weight,\\n        address _corePoolV1,\\n        uint256 v1StakeMaxPeriod_\\n    ) external initializer {\\n        __V2Migrator_init(ilv_, silv_, _poolToken, _corePoolV1, _factory, _initTime, _weight, v1StakeMaxPeriod_);\\n    }\\n\\n    /// @inheritdoc CorePool\\n    function getTotalReserves() external view virtual override returns (uint256 totalReserves) {\\n        totalReserves = poolTokenReserve + ICorePoolV1(corePoolV1).usersLockingWeight();\\n    }\\n\\n    /**\\n     * @notice This function can be called only by ILV core pool.\\n     *\\n     * @dev Uses ILV pool as a router by receiving the _staker address and executing\\n     *      the internal `_claimYieldRewards()`.\\n     * @dev Its usage allows claiming multiple pool contracts in one transaction.\\n     *\\n     * @param _staker user address\\n     * @param _useSILV whether it should claim pendingYield as ILV or sILV\\n     */\\n    function claimYieldRewardsFromRouter(address _staker, bool _useSILV) external virtual {\\n        // checks if contract is paused\\n        _requireNotPaused();\\n        // checks if caller is the ILV pool\\n        _requirePoolIsValid();\\n\\n        // calls internal _claimYieldRewards function (in CorePool.sol)\\n        _claimYieldRewards(_staker, _useSILV);\\n    }\\n\\n    /**\\n     * @notice This function can be called only by ILV core pool.\\n     *\\n     * @dev Uses ILV pool as a router by receiving the _staker address and executing\\n     *      the internal `_claimVaultRewards()`.\\n     * @dev Its usage allows claiming multiple pool contracts in one transaction.\\n     *\\n     * @param _staker user address\\n     */\\n    function claimVaultRewardsFromRouter(address _staker) external virtual {\\n        // checks if contract is paused\\n        _requireNotPaused();\\n        // checks if caller is the ILV pool\\n        _requirePoolIsValid();\\n\\n        // calls internal _claimVaultRewards function (in CorePool.sol)\\n        _claimVaultRewards(_staker);\\n    }\\n\\n    /**\\n     * @dev Checks if caller is ILV pool.\\n     * @dev We are using an internal function instead of a modifier in order to\\n     *      reduce the contract's bytecode size.\\n     */\\n    function _requirePoolIsValid() internal view virtual {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"_requirePoolIsValid()\\\"))`\\n        bytes4 fnSelector = 0x250f303f;\\n\\n        // checks if pool is the ILV pool\\n        bool poolIsValid = address(_factory.pools(_ilv)) == msg.sender;\\n        fnSelector.verifyState(poolIsValid, 0);\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/V2Migrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { ICorePoolV1 } from \\\"../interfaces/ICorePoolV1.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\nimport { Stake } from \\\"../libraries/Stake.sol\\\";\\nimport { CorePool } from \\\"./CorePool.sol\\\";\\n\\n/**\\n * @title V2Migrator\\n *\\n * @dev V2Migrator inherits all CorePool base contract functionaltiy, and adds\\n *      v1 to v2 migration related functions. This is a core smart contract of\\n *      Sushi LP and ILV pools, and manages users locked and yield weights coming\\n *      from v1.\\n * @dev Parameters need to be reviewed carefully before deployment for the migration process.\\n * @dev Users will migrate their locked stakes, which are stored in the contract,\\n *      and v1 total yield weights by data stored in a merkle tree using merkle proofs.\\n */\\nabstract contract V2Migrator is Initializable, CorePool {\\n    using ErrorHandler for bytes4;\\n    using Stake for uint256;\\n\\n    /// @dev Maps v1 addresses that are black listed for v2 migration.\\n    mapping(address => bool) public isBlacklisted;\\n\\n    /// @dev Stores maximum timestamp of a v1 stake (yield or deposit) accepted in v2.\\n    uint256 internal _v1StakeMaxPeriod;\\n\\n    /**\\n     * @dev logs `_migrateLockedStakes()`\\n     *\\n     * @param from user address\\n     * @param totalV1WeightAdded total amount of weight coming from locked stakes in v1\\n     *\\n     */\\n    event LogMigrateLockedStakes(address indexed from, uint256 totalV1WeightAdded);\\n\\n    /**\\n     * @dev V2Migrator initializer function.\\n     *\\n     * @param v1StakeMaxPeriod_ max timestamp that we accept _lockedFrom values\\n     *                         in v1 stakes\\n     */\\n    function __V2Migrator_init(\\n        address ilv_,\\n        address silv_,\\n        address _poolToken,\\n        address _corePoolV1,\\n        address factory_,\\n        uint64 _initTime,\\n        uint32 _weight,\\n        uint256 v1StakeMaxPeriod_\\n    ) internal initializer {\\n        // call internal core pool intializar\\n        __CorePool_init(ilv_, silv_, _poolToken, _corePoolV1, factory_, _initTime, _weight);\\n        // sets max period for upgrading to V2 contracts i.e migrating\\n        _v1StakeMaxPeriod = v1StakeMaxPeriod_;\\n    }\\n\\n    /**\\n     * @notice Blacklists a list of v1 user addresses by setting the\\n     *         _isBlacklisted flag to true.\\n     *\\n     * @dev The intention is to prevent addresses that exploited v1 to be able to move\\n     *      stake ids to the v2 contracts and to be able to mint any yield from a v1\\n     *      stake id with the isYield flag set to true.\\n     *\\n     * @param _users v1 users address array\\n     */\\n    function blacklistUsers(address[] calldata _users) external virtual {\\n        // only the factory controller can blacklist users\\n        _requireIsFactoryController();\\n        // we're using selector to simplify validation\\n        bytes4 fnSelector = this.blacklistUsers.selector;\\n        // gets each user in the array to be blacklisted\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            // makes sure user passed isn't the address 0\\n            fnSelector.verifyInput(_users[i] != address(0), 0);\\n            // updates mapping\\n            isBlacklisted[_users[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev External migrateLockedStakes call, used in the Sushi LP pool contract.\\n     * @dev The function is used by users that want to migrate locked stakes in v1,\\n     *      but have no yield in the pool. This happens in two scenarios:\\n     *\\n     *      1 - The user pool is the Sushi LP pool, which only has stakes;\\n     *      2 - The user joined ILV pool recently, doesn't have much yield and\\n     *          doesn't want to migrate their yield weight in the pool;\\n     * @notice Most of the times this function will be used in the inherited Sushi\\n     *         LP pool contract (called by the v1 user coming from sushi pool),\\n     *         but it's possible that a v1 user coming from the ILV pool decides\\n     *         to use this function instead of `executeMigration()` defined in\\n     *         the ILV pool contract.\\n     *\\n     * @param _stakeIds array of v1 stake ids\\n     */\\n    function migrateLockedStakes(uint256[] calldata _stakeIds) external virtual {\\n        // verifies that user isn't a v1 blacklisted user\\n        _requireNotBlacklisted(msg.sender);\\n        // checks if contract is paused\\n        _requireNotPaused();\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(msg.sender);\\n        // update user state\\n        _updateReward(msg.sender, v1WeightToAdd);\\n        // call internal migrate locked stake function\\n        // which does the loop to store each v1 stake\\n        // reference in v2 and all required data\\n        _migrateLockedStakes(_stakeIds);\\n    }\\n\\n    /**\\n     * @dev Reads v1 core pool locked stakes data (by looping through the `_stakeIds` array),\\n     *      checks if it's a valid v1 stake to migrate and save the id to v2 user struct.\\n     *\\n     * @dev Only `msg.sender` can migrate v1 stakes to v2.\\n     *\\n     * @param _stakeIds array of v1 stake ids\\n     */\\n    function _migrateLockedStakes(uint256[] calldata _stakeIds) internal virtual {\\n        User storage user = users[msg.sender];\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"_migrateLockedStakes(uint256[])\\\"))`\\n        bytes4 fnSelector = 0x80812525;\\n        // initializes variable which will tell how much\\n        // weight in v1 the user is bringing to v2\\n        uint256 totalV1WeightAdded;\\n\\n        // loops over each v1 stake id passed to do the necessary validity checks\\n        // and store the values required in v2 to keep track of v1 weight in order\\n        // to include it in v2 rewards (yield and revenue distribution) calculations\\n        for (uint256 i = 0; i < _stakeIds.length; i++) {\\n            // reads the v1 stake by calling the v1 core pool getDeposit and separates\\n            // all required data in the struct to be used\\n            (, uint256 _weight, uint64 lockedFrom, , bool isYield) = ICorePoolV1(corePoolV1).getDeposit(\\n                msg.sender,\\n                _stakeIds[i]\\n            );\\n            // checks if the v1 stake is in the valid period for migration\\n            fnSelector.verifyState(lockedFrom <= _v1StakeMaxPeriod, i * 3);\\n            // checks if the v1 stake has been locked originally and isn't a yield\\n            // stake, which are the requirements for moving to v2 through this function\\n            fnSelector.verifyState(lockedFrom > 0 && !isYield, i * 3 + 1);\\n            // checks if the user has already brought those v1 stakes to v2\\n            fnSelector.verifyState(v1StakesWeights[msg.sender][_stakeIds[i]] == 0, i * 3 + 2);\\n\\n            // adds v1 weight to the dynamic mapping which will be used in calculations\\n            v1StakesWeights[msg.sender][_stakeIds[i]] = _weight;\\n            // updates the variable keeping track of the total weight migrated\\n            totalV1WeightAdded += _weight;\\n            // update value keeping track of v1 stakes ids mapping length\\n            user.v1IdsLength++;\\n            // adds stake id to mapping keeping track of each v1 stake id\\n            user.v1StakesIds[user.v1IdsLength - 1] = _stakeIds[i];\\n        }\\n\\n        // emits an event\\n        emit LogMigrateLockedStakes(msg.sender, totalV1WeightAdded);\\n    }\\n\\n    /**\\n     * @dev Utility used by functions that can't allow blacklisted users to call.\\n     * @dev Blocks user addresses stored in the _isBlacklisted mapping to call actions like\\n     *      minting v1 yield stake ids and migrating locked stakes.\\n     */\\n    function _requireNotBlacklisted(address _user) internal view virtual {\\n        // we're using selector to simplify input and access validation\\n        bytes4 fnSelector = this.migrateLockedStakes.selector;\\n        // makes sure that msg.sender isn't a blacklisted address\\n        fnSelector.verifyAccess(!isBlacklisted[_user]);\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/CorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { Timestamp } from \\\"./Timestamp.sol\\\";\\nimport { VaultRecipient } from \\\"./VaultRecipient.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\nimport { Stake } from \\\"../libraries/Stake.sol\\\";\\nimport { IILVPool } from \\\"../interfaces/IILVPool.sol\\\";\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\nimport { ICorePool } from \\\"../interfaces/ICorePool.sol\\\";\\nimport { ICorePoolV1 } from \\\"../interfaces/ICorePoolV1.sol\\\";\\n\\n/**\\n * @title Core Pool\\n *\\n * @notice An abstract contract containing common logic for ILV and ILV/ETH SLP pools.\\n *\\n * @dev Base smart contract for ILV and LP pool. Stores each pool user by mapping\\n *      its address to the user struct. User struct stores v2 stakes, which fit\\n *      in 1 storage slot each (by using the Stake lib), total weights, pending\\n *      yield and revenue distributions, and v1 stake ids. ILV and LP stakes can\\n *      be made through flexible stake mode, which only increments the flexible\\n *      balance of a given user, or through locked staking. Locked staking creates\\n *      a new Stake element fitting 1 storage slot with its value and lock duration.\\n *      When calculating pending rewards, CorePool checks v1 locked stakes weights\\n *      to increment in the calculations and stores pending yield and pending revenue\\n *      distributions. Every time a stake or unstake related function is called,\\n *      it updates pending values, but don't require instant claimings. Rewards\\n *      claiming are executed in separate functions, and in the case of yield,\\n *      it also requires the user checking whether ILV or sILV is wanted as the yield reward.\\n *\\n * @dev Deployment and initialization.\\n *      After proxy is deployed and attached to the implementation, it should be\\n *      registered by the PoolFactory contract\\n *      Additionally, 3 token instance addresses must be defined on deployment:\\n *          - ILV token address\\n *          - sILV token address, used to mint sILV rewards\\n *          - pool token address, it can be ILV token address, ILV/ETH pair address, and others\\n *\\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\\n *      pool factory is responsible for the weight synchronization between the pools.\\n * @dev The weight is logically 20% for ILV pool and 80% for ILV/ETH pool initially.\\n *      It can be changed through ICCPs and new flash pools added in the protocol.\\n *      Since Solidity doesn't support fractions the weight is defined by the division of\\n *      pool weight by total pools weight (sum of all registered pools within the factory).\\n * @dev For ILV Pool we use 200 as weight and for ILV/ETH SLP pool - 800.\\n *\\n */\\nabstract contract CorePool is\\n    Initializable,\\n    UUPSUpgradeable,\\n    VaultRecipient,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    Timestamp\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeCast for uint256;\\n    using Stake for Stake.Data;\\n    using ErrorHandler for bytes4;\\n    using Stake for uint256;\\n\\n    /// @dev Data structure representing token holder using a pool.\\n    struct User {\\n        /// @dev pending yield rewards to be claimed\\n        uint128 pendingYield;\\n        /// @dev pending revenue distribution to be claimed\\n        uint128 pendingRevDis;\\n        /// @dev Total weight\\n        uint248 totalWeight;\\n        /// @dev number of v1StakesIds\\n        uint8 v1IdsLength;\\n        /// @dev Checkpoint variable for yield calculation\\n        uint256 yieldRewardsPerWeightPaid;\\n        /// @dev Checkpoint variable for vault rewards calculation\\n        uint256 vaultRewardsPerWeightPaid;\\n        /// @dev An array of holder's stakes\\n        Stake.Data[] stakes;\\n        /// @dev A mapping of holder's stakes ids in V1\\n        mapping(uint256 => uint256) v1StakesIds;\\n    }\\n\\n    /// @dev Data structure used in `unstakeLockedMultiple()` function.\\n    struct UnstakeParameter {\\n        uint256 stakeId;\\n        uint256 value;\\n    }\\n\\n    /// @dev Token holder storage, maps token holder address to their data record.\\n    mapping(address => User) public users;\\n\\n    /// @dev Maps `keccak256(userAddress,stakeId)` to a uint256 value that tells\\n    ///      a v1 locked stake weight that has already been migrated to v2\\n    ///      and is updated through _useV1Weight.\\n    mapping(address => mapping(uint256 => uint256)) public v1StakesWeights;\\n\\n    /// @dev Link to sILV ERC20 Token instance.\\n    address internal _silv;\\n\\n    /// @dev Link to ILV ERC20 Token instance.\\n    address internal _ilv;\\n\\n    /// @dev Address of v1 core pool with same poolToken.\\n    address internal corePoolV1;\\n\\n    /// @dev Link to the pool token instance, for example ILV or ILV/ETH pair.\\n    address public poolToken;\\n\\n    /// @dev Pool weight, initial values are 200 for ILV pool and 800 for ILV/ETH.\\n    uint32 public weight;\\n\\n    /// @dev Timestamp of the last yield distribution event.\\n    uint64 public lastYieldDistribution;\\n\\n    /// @dev Used to calculate yield rewards.\\n    /// @dev This value is different from \\\"reward per token\\\" used in flash pool.\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that.\\n    uint256 public yieldRewardsPerWeight;\\n\\n    /// @dev Used to calculate rewards, keeps track of the tokens weight locked in staking.\\n    uint256 public globalWeight;\\n\\n    /// @dev Used to calculate rewards, keeps track of the correct token weight in the v1\\n    ///      core pool.\\n    uint256 public v1GlobalWeight;\\n\\n    /// @dev Pool tokens value available in the pool;\\n    ///      pool token examples are ILV (ILV core pool) or ILV/ETH pair (LP core pool).\\n    /// @dev For LP core pool this value doesnt' count for ILV tokens received as Vault rewards\\n    ///      while for ILV core pool it does count for such tokens as well.\\n    uint256 public poolTokenReserve;\\n\\n    /// @dev Flag indicating pool type, false means \\\"core pool\\\".\\n    bool public constant isFlashPool = false;\\n\\n    /**\\n     * @dev Fired in _stake() and stakeAsPool() in ILVPool contract.\\n     * @param by address that executed the stake function (user or pool)\\n     * @param from token holder address, the tokens will be returned to that address\\n     * @param stakeId id of the new stake created\\n     * @param value value of tokens staked\\n     * @param lockUntil timestamp indicating when tokens should unlock (max 2 years)\\n     */\\n    event LogStake(address indexed by, address indexed from, uint256 stakeId, uint256 value, uint64 lockUntil);\\n\\n    /**\\n     * @dev Fired in `unstakeLocked()`.\\n     *\\n     * @param to address receiving the tokens (user)\\n     * @param stakeId id value of the stake\\n     * @param value number of tokens unstaked\\n     * @param isYield whether stake struct unstaked was coming from yield or not\\n     */\\n    event LogUnstakeLocked(address indexed to, uint256 stakeId, uint256 value, bool isYield);\\n\\n    /**\\n     * @dev Fired in `unstakeLockedMultiple()`.\\n     *\\n     * @param to address receiving the tokens (user)\\n     * @param totalValue total number of tokens unstaked\\n     * @param unstakingYield whether unstaked tokens had isYield flag true or false\\n     */\\n    event LogUnstakeLockedMultiple(address indexed to, uint256 totalValue, bool unstakingYield);\\n\\n    /**\\n     * @dev Fired in `_sync()`, `sync()` and dependent functions (stake, unstake, etc.).\\n     *\\n     * @param by an address which performed an operation\\n     * @param yieldRewardsPerWeight updated yield rewards per weight value\\n     * @param lastYieldDistribution usually, current timestamp\\n     */\\n    event LogSync(address indexed by, uint256 yieldRewardsPerWeight, uint64 lastYieldDistribution);\\n\\n    /**\\n     * @dev Fired in `_claimYieldRewards()`.\\n     *\\n     * @param by an address which claimed the rewards (staker or ilv pool contract\\n     *            in case of a multiple claim call)\\n     * @param from an address which received the yield\\n     * @param sILV flag indicating if reward was paid (minted) in sILV\\n     * @param value value of yield paid\\n     */\\n    event LogClaimYieldRewards(address indexed by, address indexed from, bool sILV, uint256 value);\\n\\n    /**\\n     * @dev Fired in `_claimVaultRewards()`.\\n     *\\n     * @param by an address which claimed the rewards (staker or ilv pool contract\\n     *            in case of a multiple claim call)\\n     * @param from an address which received the yield\\n     * @param value value of yield paid\\n     */\\n    event LogClaimVaultRewards(address indexed by, address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Fired in `_updateRewards()`.\\n     *\\n     * @param by an address which processed the rewards (staker or ilv pool contract\\n     *            in case of a multiple claim call)\\n     * @param from an address which received the yield\\n     * @param yieldValue value of yield processed\\n     * @param revDisValue value of revenue distribution processed\\n     */\\n    event LogUpdateRewards(address indexed by, address indexed from, uint256 yieldValue, uint256 revDisValue);\\n\\n    /**\\n     * @dev fired in `moveFundsFromWallet()`.\\n     *\\n     * @param from user asking migration\\n     * @param to new user address\\n     * @param previousTotalWeight total weight of `from` before moving to a new address\\n     * @param newTotalWeight total weight of `to` after moving to a new address\\n     * @param previousYield pending yield of `from` before moving to a new address\\n     * @param newYield pending yield of `to` after moving to a new address\\n     * @param previousRevDis pending revenue distribution of `from` before moving to a new address\\n     * @param newRevDis pending revenue distribution of `to` after moving to a new address\\n     */\\n    event LogMoveFundsFromWallet(\\n        address indexed from,\\n        address indexed to,\\n        uint248 previousTotalWeight,\\n        uint248 newTotalWeight,\\n        uint128 previousYield,\\n        uint128 newYield,\\n        uint128 previousRevDis,\\n        uint128 newRevDis\\n    );\\n\\n    /**\\n     * @dev Fired in `receiveVaultRewards()`.\\n     *\\n     * @param by an address that sent the rewards, always a vault\\n     * @param value amount of tokens received\\n     */\\n    event LogReceiveVaultRewards(address indexed by, uint256 value);\\n\\n    /**\\n     * @dev Used in child contracts to initialize the pool.\\n     *\\n     * @param ilv_ ILV ERC20 Token address\\n     * @param silv_ sILV ERC20 Token address\\n     * @param _poolToken token the pool operates on, for example ILV or ILV/ETH pair\\n     * @param _corePoolV1 v1 core pool address\\n     * @param factory_ PoolFactory contract address\\n     * @param _initTime initial timestamp used to calculate the rewards\\n     *      note: _initTime is set to the future effectively meaning _sync() calls will do nothing\\n     *           before _initTime\\n     * @param _weight number representing the pool's weight, which in _sync calls\\n     *        is used by checking the total pools weight in the PoolFactory contract\\n     */\\n    function __CorePool_init(\\n        address ilv_,\\n        address silv_,\\n        address _poolToken,\\n        address _corePoolV1,\\n        address factory_,\\n        uint64 _initTime,\\n        uint32 _weight\\n    ) internal initializer {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is\\n        // `bytes4(keccak256(\\\"__CorePool_init(address,address,address,address,address,uint64,uint32)\\\"))`\\n        bytes4 fnSelector = 0x1512be06;\\n        // verify the inputs\\n        fnSelector.verifyNonZeroInput(uint160(_poolToken), 2);\\n        fnSelector.verifyNonZeroInput(uint160(_corePoolV1), 3);\\n        fnSelector.verifyNonZeroInput(_initTime, 5);\\n        fnSelector.verifyNonZeroInput(_weight, 6);\\n\\n        __FactoryControlled_init(factory_);\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n\\n        // save the inputs into internal state variables\\n        _ilv = ilv_;\\n        _silv = silv_;\\n        poolToken = _poolToken;\\n        corePoolV1 = _corePoolV1;\\n        weight = _weight;\\n\\n        // init the dependent internal state variables\\n        lastYieldDistribution = _initTime;\\n    }\\n\\n    /**\\n     * @notice Calculates current yield rewards value available for address specified.\\n     *\\n     * @dev See `_pendingRewards()` for further details.\\n     *\\n     * @dev External `pendingRewards()` returns pendingYield and pendingRevDis\\n     *         accumulated with already stored user.pendingYield and user.pendingRevDis.\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     */\\n    function pendingRewards(address _staker)\\n        external\\n        view\\n        virtual\\n        returns (uint256 pendingYield, uint256 pendingRevDis)\\n    {\\n        this.pendingRewards.selector.verifyNonZeroInput(uint160(_staker), 0);\\n        // `newYieldRewardsPerWeight` will be the stored or recalculated value for `yieldRewardsPerWeight`\\n        uint256 newYieldRewardsPerWeight;\\n        // gas savings\\n        uint256 _lastYieldDistribution = lastYieldDistribution;\\n\\n        // based on the rewards per weight value, calculate pending rewards;\\n        User storage user = users[_staker];\\n        // initializes both variables from one storage slot\\n        (uint256 v1StakesLength, uint256 userWeight) = (uint256(user.v1IdsLength), uint256(user.totalWeight));\\n        // total user v1 weight to be used\\n        uint256 totalV1Weight;\\n\\n        if (v1StakesLength > 0) {\\n            // loops through v1StakesIds and adds v1 weight\\n            for (uint256 i = 0; i < v1StakesLength; i++) {\\n                uint256 stakeId = user.v1StakesIds[i];\\n                (, uint256 _weight, , , ) = ICorePoolV1(corePoolV1).getDeposit(_staker, stakeId);\\n                uint256 storedWeight = v1StakesWeights[_staker][stakeId];\\n                totalV1Weight += _weight <= storedWeight ? _weight : storedWeight;\\n            }\\n        }\\n\\n        // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\\n        // is outdated and we need to recalculate it in order to calculate pending rewards correctly\\n        if (_now256() > _lastYieldDistribution && globalWeight != 0) {\\n            uint256 endTime = _factory.endTime();\\n            uint256 multiplier = _now256() > endTime\\n                ? endTime - _lastYieldDistribution\\n                : _now256() - _lastYieldDistribution;\\n            uint256 ilvRewards = (multiplier * weight * _factory.ilvPerSecond()) / _factory.totalWeight();\\n\\n            // recalculated value for `yieldRewardsPerWeight`\\n            newYieldRewardsPerWeight =\\n                ilvRewards.getRewardPerWeight((globalWeight + v1GlobalWeight)) +\\n                yieldRewardsPerWeight;\\n        } else {\\n            // if smart contract state is up to date, we don't recalculate\\n            newYieldRewardsPerWeight = yieldRewardsPerWeight;\\n        }\\n\\n        pendingYield =\\n            (userWeight + totalV1Weight).earned(newYieldRewardsPerWeight, user.yieldRewardsPerWeightPaid) +\\n            user.pendingYield;\\n        pendingRevDis =\\n            (userWeight + totalV1Weight).earned(vaultRewardsPerWeight, user.vaultRewardsPerWeightPaid) +\\n            user.pendingRevDis;\\n    }\\n\\n    /**\\n     * @notice Returns total staked token balance for the given address.\\n     * @dev Loops through stakes and returns total balance.\\n     * @notice Expected to be called externally through `eth_call`. Gas shouldn't\\n     *         be an issue here.\\n     *\\n     * @param _user an address to query balance for\\n     * @return balance total staked token balance\\n     */\\n    function balanceOf(address _user) external view virtual returns (uint256 balance) {\\n        // gets storage pointer to _user\\n        User storage user = users[_user];\\n        // loops over each user stake and adds to the total balance.\\n        for (uint256 i = 0; i < user.stakes.length; i++) {\\n            balance += user.stakes[i].value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the sum of poolTokenReserve with the deposit reserves in v1.\\n     * @dev In ILV Pool contract the eDAO stores the v1 reserve value, and\\n     *      in the SLP pool we're able to query it from the v1 lp pool contract.\\n     */\\n    function getTotalReserves() external view virtual returns (uint256 totalReserves);\\n\\n    /**\\n     * @notice Returns information on the given stake for the given address.\\n     *\\n     * @dev See getStakesLength.\\n     *\\n     * @param _user an address to query stake for\\n     * @param _stakeId zero-indexed stake ID for the address specified\\n     * @return stake info as Stake structure\\n     */\\n    function getStake(address _user, uint256 _stakeId) external view virtual returns (Stake.Data memory) {\\n        // read stake at specified index and return\\n        return users[_user].stakes[_stakeId];\\n    }\\n\\n    /**\\n     * @notice Returns a v1 stake id in the `user.v1StakesIds` array.\\n     *\\n     * @dev Get v1 stake id position through `getV1StakePosition()`.\\n     *\\n     * @param _user an address to query stake for\\n     * @param _position position index in the array\\n     * @return stakeId value\\n     */\\n    function getV1StakeId(address _user, uint256 _position) external view virtual returns (uint256) {\\n        // returns the v1 stake id indicated at _position value\\n        return users[_user].v1StakesIds[_position];\\n    }\\n\\n    /**\\n     * @notice Returns a v1 stake position in the `user.v1StakesIds` array.\\n     *\\n     * @dev Helper function to call `getV1StakeId()`.\\n     * @dev Reverts if stakeId isn't found.\\n     *\\n     * @param _user an address to query stake for\\n     * @param _desiredId desired stakeId position in the array to find\\n     * @return position stake info as Stake structure\\n     */\\n    function getV1StakePosition(address _user, uint256 _desiredId) external view virtual returns (uint256 position) {\\n        // gets storage pointer to user\\n        User storage user = users[_user];\\n\\n        // loops over each v1 stake id and checks if it's the one\\n        // that the caller is looking for\\n        for (uint256 i = 0; i < user.v1IdsLength; i++) {\\n            if (user.v1StakesIds[i] == _desiredId) {\\n                // if it's the desired stake id, return the array index (i.e position)\\n                return i;\\n            }\\n        }\\n\\n        revert();\\n    }\\n\\n    /**\\n     * @notice Returns number of stakes for the given address. Allows iteration over stakes.\\n     *\\n     * @dev See `getStake()`.\\n     *\\n     * @param _user an address to query stake length for\\n     * @return number of stakes for the given address\\n     */\\n    function getStakesLength(address _user) external view virtual returns (uint256) {\\n        // read stakes array length and return\\n        return users[_user].stakes.length;\\n    }\\n\\n    /**\\n     * @dev Set paused/unpaused state in the pool contract.\\n     *\\n     * @param _shouldPause whether the contract should be paused/unpausd\\n     */\\n    function pause(bool _shouldPause) external {\\n        // checks if caller is authorized to pause\\n        _requireIsFactoryController();\\n        // checks bool input and pause/unpause the contract depending on\\n        // msg.sender's request\\n        if (_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /**\\n     * @notice Stakes specified value of tokens for the specified value of time,\\n     *      and pays pending yield rewards if any.\\n     *\\n     * @dev Requires value to stake and lock duration to be greater than zero.\\n     *\\n     * @param _value value of tokens to stake\\n     * @param _lockDuration stake duration as unix timestamp\\n     */\\n    function stake(uint256 _value, uint64 _lockDuration) external virtual nonReentrant {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.stake.selector;\\n        // validate the inputs\\n        fnSelector.verifyNonZeroInput(_value, 1);\\n        fnSelector.verifyInput(_lockDuration >= Stake.MIN_STAKE_PERIOD && _lockDuration <= Stake.MAX_STAKE_PERIOD, 2);\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[msg.sender];\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(msg.sender);\\n        // update user state\\n        _updateReward(msg.sender, v1WeightToAdd);\\n\\n        // calculates until when a stake is going to be locked\\n        uint64 lockUntil = (_now256()).toUint64() + _lockDuration;\\n        // stake weight formula rewards for locking\\n        uint256 stakeWeight = (((lockUntil - _now256()) * Stake.WEIGHT_MULTIPLIER) /\\n            Stake.MAX_STAKE_PERIOD +\\n            Stake.BASE_WEIGHT) * _value;\\n        // makes sure stakeWeight is valid\\n        assert(stakeWeight > 0);\\n        // create and save the stake (append it to stakes array)\\n        Stake.Data memory userStake = Stake.Data({\\n            value: (_value).toUint120(),\\n            lockedFrom: (_now256()).toUint64(),\\n            lockedUntil: lockUntil,\\n            isYield: false\\n        });\\n        // pushes new stake to `stakes` array\\n        user.stakes.push(userStake);\\n        // update user weight\\n        user.totalWeight += (stakeWeight).toUint248();\\n        // update global weight value and global pool token count\\n        globalWeight += stakeWeight;\\n        poolTokenReserve += _value;\\n\\n        // transfer `_value`\\n        IERC20Upgradeable(poolToken).safeTransferFrom(address(msg.sender), address(this), _value);\\n\\n        // emit an event\\n        emit LogStake(msg.sender, msg.sender, (user.stakes.length - 1), _value, lockUntil);\\n    }\\n\\n    /**\\n     * @dev Moves msg.sender stake data to a new address.\\n     * @dev V1 stakes are never migrated to the new address. We process all rewards,\\n     *      clean the previous user (msg.sender), add the previous user data to\\n     *      the desired address and update subYieldRewards/subVaultRewards values\\n     *      in order to make sure both addresses will have rewards cleaned.\\n     *\\n     * @param _to new user address, needs to be a fresh address with no stakes\\n     */\\n\\n    function moveFundsFromWallet(address _to) public virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // gets storage pointer to msg.sender user struct\\n        User storage previousUser = users[msg.sender];\\n        // gets storage pointer to desired address user struct\\n        User storage newUser = users[_to];\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(msg.sender);\\n        // We process update global and user's rewards\\n        // before moving the user funds to a new wallet.\\n        // This way we can ensure that all v1 ids weight have been used before the v2\\n        // stakes to a new address.\\n        _updateReward(msg.sender, v1WeightToAdd);\\n\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.moveFundsFromWallet.selector;\\n        // validate input is set\\n        fnSelector.verifyNonZeroInput(uint160(_to), 0);\\n        // verify new user records are empty\\n        fnSelector.verifyState(\\n            newUser.totalWeight == 0 &&\\n                newUser.v1IdsLength == 0 &&\\n                newUser.stakes.length == 0 &&\\n                newUser.yieldRewardsPerWeightPaid == 0 &&\\n                newUser.vaultRewardsPerWeightPaid == 0,\\n            0\\n        );\\n        // saves previous user total weight\\n        uint248 previousTotalWeight = previousUser.totalWeight;\\n        // saves previous user pending yield\\n        uint128 previousYield = previousUser.pendingYield;\\n        // saves previous user pending rev dis\\n        uint128 previousRevDis = previousUser.pendingRevDis;\\n\\n        // It's expected to have all previous user values\\n        // migrated to the new user address (_to).\\n        // We recalculate yield and vault rewards values\\n        // to make sure new user pending yield and pending rev dis to be stored\\n        // at newUser.pendingYield and newUser.pendingRevDis is 0, since we just processed\\n        // all pending rewards calling _updateReward.\\n        newUser.totalWeight = previousTotalWeight;\\n        newUser.pendingYield = previousYield;\\n        newUser.pendingRevDis = previousRevDis;\\n        newUser.yieldRewardsPerWeightPaid = yieldRewardsPerWeight;\\n        newUser.vaultRewardsPerWeightPaid = vaultRewardsPerWeight;\\n        newUser.stakes = previousUser.stakes;\\n        delete previousUser.totalWeight;\\n        delete previousUser.pendingYield;\\n        delete previousUser.pendingRevDis;\\n        delete previousUser.stakes;\\n\\n        // emits an event\\n        emit LogMoveFundsFromWallet(\\n            msg.sender,\\n            _to,\\n            previousTotalWeight,\\n            newUser.totalWeight,\\n            previousYield,\\n            newUser.pendingYield,\\n            previousRevDis,\\n            newUser.pendingRevDis\\n        );\\n    }\\n\\n    /**\\n     * @notice Service function to synchronize pool state with current time.\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      at least one second passes between synchronizations.\\n     * @dev Executed internally when staking, unstaking, processing rewards in order\\n     *      for calculations to be correct and to reflect state progress of the contract.\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end time), function doesn't throw and exits silently.\\n     */\\n    function sync() external virtual {\\n        _requireNotPaused();\\n        // calls internal function\\n        _sync();\\n    }\\n\\n    /**\\n     * @dev Calls internal `_claimYieldRewards()` passing `msg.sender` as `_staker`.\\n     *\\n     * @notice Pool state is updated before calling the internal function.\\n     */\\n    function claimYieldRewards(bool _useSILV) external virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // calls internal function\\n        _claimYieldRewards(msg.sender, _useSILV);\\n    }\\n\\n    /**\\n     * @dev Calls internal `_claimVaultRewards()` passing `msg.sender` as `_staker`.\\n     *\\n     * @notice Pool state is updated before calling the internal function.\\n     */\\n    function claimVaultRewards() external virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // calls internal function\\n        _claimVaultRewards(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Claims both revenue distribution and yield rewards in one call.\\n     *\\n     */\\n    function claimAllRewards(bool _useSILV) external virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // calls internal yield and vault rewards functions\\n        _claimVaultRewards(msg.sender);\\n        _claimYieldRewards(msg.sender, _useSILV);\\n    }\\n\\n    /**\\n     * @dev Executed by the vault to transfer vault rewards ILV from the vault\\n     *      into the pool.\\n     *\\n     * @dev This function is executed only for ILV core pools.\\n     *\\n     * @param _value amount of ILV rewards to transfer into the pool\\n     */\\n    function receiveVaultRewards(uint256 _value) external virtual {\\n        // always sync the pool state vars before moving forward\\n        _sync();\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // checks if msg.sender is the vault contract\\n        _requireIsVault();\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.receiveVaultRewards.selector;\\n        // return silently if there is no reward to receive\\n        if (_value == 0) {\\n            return;\\n        }\\n        // verify weight is not zero\\n        fnSelector.verifyState(globalWeight > 0 || v1GlobalWeight > 0, 0);\\n        // we update vaultRewardsPerWeight value using v1 and v2 global weight,\\n        // expecting to distribute revenue distribution correctly to all users\\n        // coming from v1 and new v2 users.\\n        vaultRewardsPerWeight += _value.getRewardPerWeight(globalWeight + v1GlobalWeight);\\n\\n        // transfers ILV from the Vault contract to the pool\\n        IERC20Upgradeable(_ilv).safeTransferFrom(msg.sender, address(this), _value);\\n\\n        // emits an event\\n        emit LogReceiveVaultRewards(msg.sender, _value);\\n    }\\n\\n    /**\\n     * @dev Updates value that keeps track of v1 global locked tokens weight.\\n     *\\n     * @param _v1GlobalWeight new value to be stored\\n     */\\n    function setV1GlobalWeight(uint256 _v1GlobalWeight) external virtual {\\n        // only factory controller can update the _v1GlobalWeight\\n        _requireIsFactoryController();\\n\\n        // update v1GlobalWeight state variable\\n        v1GlobalWeight = _v1GlobalWeight;\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify pool weight; the factory is expected\\n     *      to keep track of the total pools weight when updating.\\n     *\\n     * @dev Set weight to zero to disable the pool.\\n     *\\n     * @param _weight new weight to set for the pool\\n     */\\n    function setWeight(uint32 _weight) external virtual {\\n        // update pool state using current weight value\\n        _sync();\\n        // verify function is executed by the factory\\n        this.setWeight.selector.verifyAccess(msg.sender == address(_factory));\\n\\n        // set the new weight value\\n        weight = _weight;\\n    }\\n\\n    /**\\n     * @dev Unstakes a stake that has been previously locked, and is now in an unlocked\\n     *      state. If the stake has the isYield flag set to true, then the contract\\n     *      requests ILV to be minted by the PoolFactory. Otherwise it transfers ILV or LP\\n     *      from the contract balance.\\n     *\\n     * @param _stakeId stake ID to unstake from, zero-indexed\\n     * @param _value value of tokens to unstake\\n     */\\n    function unstake(uint256 _stakeId, uint256 _value) external virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.unstake.selector;\\n\\n        // verify a value is set\\n        fnSelector.verifyNonZeroInput(_value, 0);\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[msg.sender];\\n        // get a link to the corresponding stake, we may write to it later\\n        Stake.Data storage userStake = user.stakes[_stakeId];\\n        // checks if stake is unlocked already\\n        fnSelector.verifyState(_now256() > userStake.lockedUntil, 0);\\n        // stake structure may get deleted, so we save isYield flag to be able to use it\\n        // we also save stakeValue for gasSavings\\n        (uint120 stakeValue, bool isYield) = (userStake.value, userStake.isYield);\\n        // verify available balance\\n        fnSelector.verifyInput(stakeValue >= _value, 1);\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(msg.sender);\\n        // and process current pending rewards if any\\n        _updateReward(msg.sender, v1WeightToAdd);\\n        // store stake weight\\n        uint256 previousWeight = userStake.weight();\\n        // value used to save new weight after updates in storage\\n        uint256 newWeight;\\n\\n        // update the stake, or delete it if its depleted\\n        if (stakeValue - _value == 0) {\\n            // deletes stake struct, no need to save new weight because it stays 0\\n            delete user.stakes[_stakeId];\\n        } else {\\n            userStake.value -= (_value).toUint120();\\n            // saves new weight to memory\\n            newWeight = userStake.weight();\\n        }\\n        // update user record\\n        user.totalWeight = uint248(user.totalWeight - previousWeight + newWeight);\\n        // update global weight variable\\n        globalWeight = globalWeight - previousWeight + newWeight;\\n        // update global pool token count\\n        poolTokenReserve -= _value;\\n\\n        // if the stake was created by the pool itself as a yield reward\\n        if (isYield) {\\n            // mint the yield via the factory\\n            _factory.mintYieldTo(msg.sender, _value, false);\\n        } else {\\n            // otherwise just return tokens back to holder\\n            IERC20Upgradeable(poolToken).safeTransfer(msg.sender, _value);\\n        }\\n\\n        // emits an event\\n        emit LogUnstakeLocked(msg.sender, _stakeId, _value, isYield);\\n    }\\n\\n    /**\\n     * @dev Executes unstake on multiple stakeIds. See `unstakeLocked()`.\\n     * @dev Optimizes gas by requiring all unstakes to be made either in yield stakes\\n     *      or in non yield stakes. That way we can transfer or mint tokens in one call.\\n     *\\n     * @notice User is required to either mint ILV or unstake pool tokens in the function call.\\n     *         There's no way to do both operations in one call.\\n     *\\n     * @param _stakes array of stakeIds and values to be unstaked in each stake from\\n     *                the msg.sender\\n     * @param _unstakingYield whether all stakeIds have isYield flag set to true or false,\\n     *                        i.e if we're minting ILV or transferring pool tokens\\n     */\\n    function unstakeMultiple(UnstakeParameter[] calldata _stakes, bool _unstakingYield) external virtual {\\n        // checks if the contract is in a paused state\\n        _requireNotPaused();\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.unstakeMultiple.selector;\\n        // verifies if user has passed any value to be unstaked\\n        fnSelector.verifyNonZeroInput(_stakes.length, 0);\\n        // gets storage pointer to the user\\n        User storage user = users[msg.sender];\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(msg.sender);\\n        _updateReward(msg.sender, v1WeightToAdd);\\n\\n        // initialize variables that expect to receive the total\\n        // weight to be removed from the user and the value to be\\n        // unstaked from the pool.\\n        uint256 weightToRemove;\\n        uint256 valueToUnstake;\\n\\n        for (uint256 i = 0; i < _stakes.length; i++) {\\n            // destructure calldata parameters\\n            (uint256 _stakeId, uint256 _value) = (_stakes[i].stakeId, _stakes[i].value);\\n            Stake.Data storage userStake = user.stakes[_stakeId];\\n            // checks if stake is unlocked already\\n            fnSelector.verifyState(_now256() > userStake.lockedUntil, i * 3);\\n            // checks if unstaking value is valid\\n            fnSelector.verifyNonZeroInput(_value, 1);\\n            // stake structure may get deleted, so we save isYield flag to be able to use it\\n            // we also save stakeValue for gas savings\\n            (uint120 stakeValue, bool isYield) = (userStake.value, userStake.isYield);\\n            // verifies if the selected stake is yield (i.e ILV to be minted)\\n            // or not, the function needs to either mint yield or transfer tokens\\n            // and can't do both operations at the same time.\\n            fnSelector.verifyState(isYield == _unstakingYield, i * 3 + 1);\\n            // checks if there's enough tokens to unstake\\n            fnSelector.verifyState(stakeValue >= _value, i * 3 + 2);\\n\\n            // store stake weight\\n            uint256 previousWeight = userStake.weight();\\n            // value used to save new weight after updates in storage\\n            uint256 newWeight;\\n\\n            // update the stake, or delete it if its depleted\\n            if (stakeValue - _value == 0) {\\n                // deletes stake struct, no need to save new weight because it stays 0\\n                delete user.stakes[_stakeId];\\n            } else {\\n                // removes _value from the stake with safe cast\\n                userStake.value -= (_value).toUint120();\\n                // saves new weight to memory\\n                newWeight = userStake.weight();\\n            }\\n\\n            // updates the values initialized earlier with the amounts that\\n            // need to be subtracted (weight) and transferred (value to unstake)\\n            weightToRemove += previousWeight - newWeight;\\n            valueToUnstake += _value;\\n        }\\n        // subtracts weight\\n        user.totalWeight -= (weightToRemove).toUint248();\\n        // update global variable\\n        globalWeight -= weightToRemove;\\n        // update pool token count\\n        poolTokenReserve -= valueToUnstake;\\n\\n        // if the stake was created by the pool itself as a yield reward\\n        if (_unstakingYield) {\\n            // mint the yield via the factory\\n            _factory.mintYieldTo(msg.sender, valueToUnstake, false);\\n        } else {\\n            // otherwise just return tokens back to holder\\n            IERC20Upgradeable(poolToken).safeTransfer(msg.sender, valueToUnstake);\\n        }\\n\\n        // emits an event\\n        emit LogUnstakeLockedMultiple(msg.sender, valueToUnstake, _unstakingYield);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see `sync()`.\\n     *\\n     * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\\n     *      updates factory state via `updateILVPerSecond`\\n     */\\n    function _sync() internal virtual {\\n        // gas savings\\n        IFactory factory_ = _factory;\\n        // update ILV per second value in factory if required\\n        if (factory_.shouldUpdateRatio()) {\\n            factory_.updateILVPerSecond();\\n        }\\n\\n        // check bound conditions and if these are not met -\\n        // exit silently, without emitting an event\\n        uint256 endTime = factory_.endTime();\\n        if (lastYieldDistribution >= endTime) {\\n            return;\\n        }\\n        if (_now256() <= lastYieldDistribution) {\\n            return;\\n        }\\n        // if locking weight is zero - update only `lastYieldDistribution` and exit\\n        if (globalWeight == 0 && v1GlobalWeight == 0) {\\n            lastYieldDistribution = (_now256()).toUint64();\\n            return;\\n        }\\n\\n        // to calculate the reward we need to know how many seconds passed, and reward per second\\n        uint256 currentTimestamp = _now256() > endTime ? endTime : _now256();\\n        uint256 secondsPassed = currentTimestamp - lastYieldDistribution;\\n        uint256 ilvPerSecond = factory_.ilvPerSecond();\\n\\n        // calculate the reward\\n        uint256 ilvReward = (secondsPassed * ilvPerSecond * weight) / factory_.totalWeight();\\n\\n        // update rewards per weight and `lastYieldDistribution`\\n        yieldRewardsPerWeight += ilvReward.getRewardPerWeight((globalWeight + v1GlobalWeight));\\n        lastYieldDistribution = (currentTimestamp).toUint64();\\n\\n        // emit an event\\n        emit LogSync(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\\n    }\\n\\n    /**\\n     * @dev claims all pendingYield from _staker using ILV or sILV.\\n     *\\n     * @notice sILV is minted straight away to _staker wallet, ILV is created as\\n     *         a new stake and locked for Stake.MAX_STAKE_PERIOD.\\n     *\\n     * @param _staker user address\\n     * @param _useSILV whether the user wants to claim ILV or sILV\\n     */\\n    function _claimYieldRewards(address _staker, bool _useSILV) internal virtual {\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(_staker);\\n        // update user state\\n        _updateReward(_staker, v1WeightToAdd);\\n        // check pending yield rewards to claim and save to memory\\n        uint256 pendingYieldToClaim = uint256(user.pendingYield);\\n        // if pending yield is zero - just return silently\\n        if (pendingYieldToClaim == 0) return;\\n        // clears user pending yield\\n        user.pendingYield = 0;\\n\\n        // if sILV is requested\\n        if (_useSILV) {\\n            // - mint sILV\\n            _factory.mintYieldTo(_staker, pendingYieldToClaim, true);\\n        } else if (poolToken == _ilv) {\\n            // calculate pending yield weight,\\n            // 2e6 is the bonus weight when staking for 1 year\\n            uint256 stakeWeight = pendingYieldToClaim * Stake.YIELD_STAKE_WEIGHT_MULTIPLIER;\\n\\n            // if the pool is ILV Pool - create new ILV stake\\n            // and save it - push it into stakes array\\n            Stake.Data memory newStake = Stake.Data({\\n                value: (pendingYieldToClaim).toUint120(),\\n                lockedFrom: (_now256()).toUint64(),\\n                lockedUntil: (_now256() + Stake.MAX_STAKE_PERIOD).toUint64(), // staking yield for 1 year\\n                isYield: true\\n            });\\n            // add memory stake to storage\\n            user.stakes.push(newStake);\\n            // updates total user weight with the newly created stake's weight\\n            user.totalWeight += (stakeWeight).toUint248();\\n\\n            // update global variable\\n            globalWeight += stakeWeight;\\n            // update reserve count\\n            poolTokenReserve += pendingYieldToClaim;\\n        } else {\\n            // for other pools - stake as pool\\n            address ilvPool = _factory.getPoolAddress(_ilv);\\n            IILVPool(ilvPool).stakeAsPool(_staker, pendingYieldToClaim);\\n        }\\n\\n        // emits an event\\n        emit LogClaimYieldRewards(msg.sender, _staker, _useSILV, pendingYieldToClaim);\\n    }\\n\\n    /**\\n     * @dev Claims all pendingRevDis from _staker using ILV.\\n     * @dev ILV is sent straight away to _staker address.\\n     *\\n     * @param _staker user address\\n     */\\n    function _claimVaultRewards(address _staker) internal virtual {\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n        // uses v1 weight values for rewards calculations\\n        uint256 v1WeightToAdd = _useV1Weight(_staker);\\n        // update user state\\n        _updateReward(_staker, v1WeightToAdd);\\n        // check pending yield rewards to claim and save to memory\\n        uint256 pendingRevDis = uint256(user.pendingRevDis);\\n        // if pending yield is zero - just return silently\\n        if (pendingRevDis == 0) return;\\n        // clears user pending revenue distribution\\n        user.pendingRevDis = 0;\\n\\n        IERC20Upgradeable(_ilv).safeTransfer(_staker, pendingRevDis);\\n\\n        // emits an event\\n        emit LogClaimVaultRewards(msg.sender, _staker, pendingRevDis);\\n    }\\n\\n    /**\\n     * @dev Calls CorePoolV1 contract, gets v1 stake ids weight and returns.\\n     * @dev Used by `_pendingRewards()` to calculate yield and revenue distribution\\n     *      rewards taking v1 weights into account.\\n     *\\n     * @notice If v1 weights have changed since last call, we use latest v1 weight for\\n     *         yield and revenue distribution rewards calculations, and recalculate\\n     *         user sub rewards values in order to have correct rewards estimations.\\n     *\\n     * @param _staker user address passed\\n     *\\n     * @return totalV1Weight uint256 value of v1StakesIds weights\\n     */\\n    function _useV1Weight(address _staker) internal virtual returns (uint256 totalV1Weight) {\\n        // gets user storage pointer\\n        User storage user = users[_staker];\\n        // gas savings\\n        uint256 v1StakesLength = user.v1IdsLength;\\n\\n        // checks if user has any migrated stake from v1\\n        if (v1StakesLength > 0) {\\n            // loops through v1StakesIds and adds v1 weight\\n            for (uint256 i = 0; i < v1StakesLength; i++) {\\n                // saves v1 stake id to memory\\n                uint256 stakeId = user.v1StakesIds[i];\\n                (, uint256 _weight, , , ) = ICorePoolV1(corePoolV1).getDeposit(_staker, stakeId);\\n\\n                // gets weight stored initially in the v1StakesWeights mapping\\n                // through V2Migrator contract\\n                uint256 storedWeight = v1StakesWeights[_staker][stakeId];\\n                // only stores the current v1 weight that is going to be used for calculations\\n                // if current v1 weight is equal to or less than the stored weight.\\n                // This way we make sure that v1 weight never increases for any reason\\n                // (e.g increasing a v1 stake lock through v1 contract) and messes up calculations.\\n                totalV1Weight += _weight <= storedWeight ? _weight : storedWeight;\\n\\n                // if _weight has updated in v1 to a lower value, we also update\\n                // stored weight in v2 for next calculations\\n                if (storedWeight > _weight) {\\n                    // if deposit has been completely unstaked in v1, set stake id weight to 1\\n                    // so we can keep track that it has been already migrated.\\n                    // otherwise just update value to _weight\\n                    v1StakesWeights[_staker][stakeId] = _weight == 0 ? 1 : _weight;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if pool is paused.\\n     * @dev We use this internal function instead of the modifier coming from\\n     *      Pausable contract in order to decrease contract's bytecode size.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"_requireNotPaused()\\\"))`\\n        bytes4 fnSelector = 0xabb87a6f;\\n        // checks paused variable value from Pausable Open Zeppelin\\n        fnSelector.verifyState(!paused(), 0);\\n    }\\n\\n    /**\\n     * @dev Must be called every time user.totalWeight is changed.\\n     * @dev Syncs the global pool state, processes the user pending rewards (if any),\\n     *      and updates check points values stored in the user struct.\\n     * @dev If user is coming from v1 pool, it expects to receive this v1 user weight\\n     *      to include in rewards calculations.\\n     *\\n     * @param _staker user address\\n     * @param _v1WeightToAdd v1 weight to be added to calculations\\n     */\\n    function _updateReward(address _staker, uint256 _v1WeightToAdd) internal virtual {\\n        // update pool state\\n        _sync();\\n        // gets storage reference to the user\\n        User storage user = users[_staker];\\n        // gas savings\\n        uint256 userTotalWeight = uint256(user.totalWeight) + _v1WeightToAdd;\\n\\n        // calculates pending yield to be added\\n        uint256 pendingYield = userTotalWeight.earned(yieldRewardsPerWeight, user.yieldRewardsPerWeightPaid);\\n        // calculates pending reenue distribution to be added\\n        uint256 pendingRevDis = userTotalWeight.earned(vaultRewardsPerWeight, user.vaultRewardsPerWeightPaid);\\n        // increases stored user.pendingYield with value returned\\n        user.pendingYield += pendingYield.toUint128();\\n        // increases stored user.pendingRevDis with value returned\\n        user.pendingRevDis += pendingRevDis.toUint128();\\n\\n        // updates user checkpoint values for future calculations\\n        user.yieldRewardsPerWeightPaid = yieldRewardsPerWeight;\\n        user.vaultRewardsPerWeightPaid = vaultRewardsPerWeight;\\n\\n        // emit an event\\n        emit LogUpdateRewards(msg.sender, _staker, pendingYield, pendingRevDis);\\n    }\\n\\n    /**\\n     * @dev See UUPSUpgradeable `_authorizeUpgrade()`.\\n     * @dev Just checks if `msg.sender` == `factory.owner()` i.e eDAO multisig address.\\n     * @dev eDAO multisig is responsible by handling upgrades and executing other\\n     *      admin actions approved by the Council.\\n     */\\n    function _authorizeUpgrade(address) internal view virtual override {\\n        // checks caller is factory.owner()\\n        _requireIsFactoryController();\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[39] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ErrorHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors Library.\\n *\\n * @notice Introduces some very common input and state validation for smart contracts,\\n *      such as non-zero input validation, general boolean expression validation, access validation.\\n *\\n * @notice Throws pre-defined errors instead of string error messages to reduce gas costs.\\n *\\n * @notice Since the library handles only very common errors, concrete smart contracts may\\n *      also introduce their own error types and handling.\\n *\\n * @author Basil Gorin\\n */\\nlibrary ErrorHandler {\\n    /**\\n     * @notice Thrown on zero input at index specified in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param paramIndex function parameter index which caused an error thrown\\n     */\\n    error ZeroInput(bytes4 fnSelector, uint8 paramIndex);\\n\\n    /**\\n     * @notice Thrown on invalid input at index specified in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param paramIndex function parameter index which caused an error thrown\\n     */\\n    error InvalidInput(bytes4 fnSelector, uint8 paramIndex);\\n\\n    /**\\n     * @notice Thrown on invalid state in a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param errorCode unique error code determining the exact place in code where error was thrown\\n     */\\n    error InvalidState(bytes4 fnSelector, uint256 errorCode);\\n\\n    /**\\n     * @notice Thrown on invalid access to a function specified.\\n     *\\n     * @param fnSelector function selector, defines a function where error was thrown\\n     * @param addr an address which access was denied, usually transaction sender\\n     */\\n    error AccessDenied(bytes4 fnSelector, address addr);\\n\\n    /**\\n     * @notice Verifies an input is set (non-zero).\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param value a value to check if it's set (non-zero)\\n     * @param paramIndex function parameter index which is verified\\n     */\\n    function verifyNonZeroInput(\\n        bytes4 fnSelector,\\n        uint256 value,\\n        uint8 paramIndex\\n    ) internal pure {\\n        if (value == 0) {\\n            revert ZeroInput(fnSelector, paramIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an input is correct.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the input\\n     * @param paramIndex function parameter index which is verified\\n     */\\n    function verifyInput(\\n        bytes4 fnSelector,\\n        bool expr,\\n        uint8 paramIndex\\n    ) internal pure {\\n        if (!expr) {\\n            revert InvalidInput(fnSelector, paramIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies smart contract state is correct.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the contract state\\n     * @param errorCode unique error code determining the exact place in code which is verified\\n     */\\n    function verifyState(\\n        bytes4 fnSelector,\\n        bool expr,\\n        uint256 errorCode\\n    ) internal pure {\\n        if (!expr) {\\n            revert InvalidState(fnSelector, errorCode);\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an access to the function.\\n     *\\n     * @param fnSelector function selector, defines a function which called the verification\\n     * @param expr a boolean expression used to verify the access\\n     */\\n    function verifyAccess(bytes4 fnSelector, bool expr) internal view {\\n        if (!expr) {\\n            revert AccessDenied(fnSelector, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICorePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICorePoolV1 {\\n    struct V1Stake {\\n        // @dev token amount staked\\n        uint256 tokenAmount;\\n        // @dev stake weight\\n        uint256 weight;\\n        // @dev locking period - from\\n        uint64 lockedFrom;\\n        // @dev locking period - until\\n        uint64 lockedUntil;\\n        // @dev indicates if the stake was created as a yield reward\\n        bool isYield;\\n    }\\n\\n    struct V1User {\\n        // @dev Total staked amount\\n        uint256 tokenAmount;\\n        // @dev Total weight\\n        uint256 totalWeight;\\n        // @dev Auxiliary variable for yield calculation\\n        uint256 subYieldRewards;\\n        // @dev Auxiliary variable for vault rewards calculation\\n        uint256 subVaultRewards;\\n        // @dev An array of holder's deposits\\n        V1Stake[] deposits;\\n    }\\n\\n    function users(address _who)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getDeposit(address _from, uint256 _stakeId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint64,\\n            uint64,\\n            bool\\n        );\\n\\n    function poolToken() external view returns (address);\\n\\n    function usersLockingWeight() external view returns (uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Stake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Stake library used by ILV pool and Sushi LP Pool.\\n *\\n * @dev Responsible to manage weight calculation and store important constants\\n *      related to stake period, base weight and multipliers utilized.\\n */\\nlibrary Stake {\\n    struct Data {\\n        /// @dev token amount staked\\n        uint120 value;\\n        /// @dev locking period - from\\n        uint64 lockedFrom;\\n        /// @dev locking period - until\\n        uint64 lockedUntil;\\n        /// @dev indicates if the stake was created as a yield reward\\n        bool isYield;\\n    }\\n\\n    /**\\n     * @dev Stake weight is proportional to stake value and time locked, precisely\\n     *      \\\"stake value wei multiplied by (fraction of the year locked plus one)\\\".\\n     * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n     *      weight is stored multiplied by 1e6 constant, as an integer.\\n     * @dev Corner case 1: if time locked is zero, weight is stake value multiplied by 1e6 + base weight\\n     * @dev Corner case 2: if time locked is two years, division of\\n            (lockedUntil - lockedFrom) / MAX_STAKE_PERIOD is 1e6, and\\n     *      weight is a stake value multiplied by 2 * 1e6.\\n     */\\n    uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\n\\n    /**\\n     * @dev Minimum weight value, if result of multiplication using WEIGHT_MULTIPLIER\\n     *      is 0 (e.g stake flexible), then BASE_WEIGHT is used.\\n     */\\n    uint256 internal constant BASE_WEIGHT = 1e6;\\n    /**\\n     * @dev Minimum period that someone can lock a stake for.\\n     */\\n    uint256 internal constant MIN_STAKE_PERIOD = 30 days;\\n\\n    /**\\n     * @dev Maximum period that someone can lock a stake for.\\n     */\\n    uint256 internal constant MAX_STAKE_PERIOD = 365 days;\\n\\n    /**\\n     * @dev Rewards per weight are stored multiplied by 1e20 as uint.\\n     */\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e20;\\n\\n    /**\\n     * @dev When we know beforehand that staking is done for yield instead of\\n     *      executing `weight()` function we use the following constant.\\n     */\\n    uint256 internal constant YIELD_STAKE_WEIGHT_MULTIPLIER = 2 * 1e6;\\n\\n    function weight(Data storage _self) internal view returns (uint256) {\\n        return\\n            uint256(\\n                (((_self.lockedUntil - _self.lockedFrom) * WEIGHT_MULTIPLIER) / MAX_STAKE_PERIOD + BASE_WEIGHT) *\\n                    _self.value\\n            );\\n    }\\n\\n    /**\\n     * @dev Converts stake weight (not to be mixed with the pool weight) to\\n     *      ILV reward value, applying the 10^12 division on weight\\n     *\\n     * @param _weight stake weight\\n     * @param _rewardPerWeight ILV reward per weight\\n     * @param _rewardPerWeightPaid last reward per weight value used for user earnings\\n     * @return reward value normalized to 10^12\\n     */\\n    function earned(\\n        uint256 _weight,\\n        uint256 _rewardPerWeight,\\n        uint256 _rewardPerWeightPaid\\n    ) internal pure returns (uint256) {\\n        // apply the formula and return\\n        return (_weight * (_rewardPerWeight - _rewardPerWeightPaid)) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward ILV value to stake weight (not to be mixed with the pool weight),\\n     *      applying the 10^12 multiplication on the reward.\\n     *      - OR -\\n     * @dev Converts reward ILV value to reward/weight if stake weight is supplied as second\\n     *      function parameter instead of reward/weight.\\n     *\\n     * @param _reward yield reward\\n     * @param _globalWeight total weight in the pool\\n     * @return reward per weight value\\n     */\\n    function getRewardPerWeight(uint256 _reward, uint256 _globalWeight) internal pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (_reward * REWARD_PER_WEIGHT_MULTIPLIER) / _globalWeight;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity 0.8.4;\\n\\nimport { ErrorHandler } from \\\"./ErrorHandler.sol\\\";\\n\\n/**\\n * @notice Copied from OpenZeppelin's SafeCast.sol, adapted to use just in the required\\n * uint sizes.\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    using ErrorHandler for bytes4;\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 _value) internal pure returns (uint248) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint248(uint256))\\\"))`\\n        bytes4 fnSelector = 0x3fd72672;\\n        fnSelector.verifyInput(_value <= type(uint248).max, 0);\\n\\n        return uint248(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 _value) internal pure returns (uint128) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint128(uint256))\\\"))`\\n        bytes4 fnSelector = 0x809fdd33;\\n        fnSelector.verifyInput(_value <= type(uint128).max, 0);\\n\\n        return uint128(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 _value) internal pure returns (uint120) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint120(uint256))\\\"))`\\n        bytes4 fnSelector = 0x1e4e4bad;\\n        fnSelector.verifyInput(_value <= type(uint120).max, 0);\\n\\n        return uint120(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 _value) internal pure returns (uint64) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint64(uint256))\\\"))`\\n        bytes4 fnSelector = 0x2665fad0;\\n        fnSelector.verifyInput(_value <= type(uint64).max, 0);\\n\\n        return uint64(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 _value) internal pure returns (uint32) {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"toUint32(uint256))\\\"))`\\n        bytes4 fnSelector = 0xc8193255;\\n        fnSelector.verifyInput(_value <= type(uint32).max, 0);\\n\\n        return uint32(_value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/Timestamp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title Function for getting block timestamp.\\n/// @dev Base contract that is overridden for tests.\\nabstract contract Timestamp {\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts.\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden).\\n     */\\n    function _now256() internal view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/VaultRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { FactoryControlled } from \\\"./FactoryControlled.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\n\\nabstract contract VaultRecipient is Initializable, FactoryControlled {\\n    using ErrorHandler for bytes4;\\n\\n    /// @dev Link to deployed IlluviumVault instance.\\n    address internal _vault;\\n\\n    /// @dev Used to calculate vault rewards.\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool.\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that,\\n    uint256 public vaultRewardsPerWeight;\\n\\n    /**\\n     * @dev Fired in `setVault()`.\\n     *\\n     * @param by an address which executed the function, always a factory owner\\n     * @param previousVault previous vault contract address\\n     * @param newVault new vault address\\n     */\\n    event LogSetVault(address indexed by, address previousVault, address newVault);\\n\\n    /**\\n     * @dev Executed only by the factory owner to Set the vault.\\n     *\\n     * @param vault_ an address of deployed IlluviumVault instance\\n     */\\n    function setVault(address vault_) external virtual {\\n        // we're using selector to simplify input and state validation\\n        bytes4 fnSelector = this.setVault.selector;\\n        // verify function is executed by the factory owner\\n        fnSelector.verifyState(_factory.owner() == msg.sender, 0);\\n        // verify input is set\\n        fnSelector.verifyInput(vault_ != address(0), 0);\\n\\n        // saves current vault to memory\\n        address previousVault = vault_;\\n        // update vault address\\n        _vault = vault_;\\n\\n        // emit an event\\n        emit LogSetVault(msg.sender, previousVault, _vault);\\n    }\\n\\n    /// @dev Utility function to check if caller is the Vault contract\\n    function _requireIsVault() internal view virtual {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"_requireIsVault()\\\"))`\\n        bytes4 fnSelector = 0xeeea774b;\\n        // checks if caller is the same stored vault address\\n        fnSelector.verifyAccess(msg.sender == _vault);\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IILVPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { ICorePool } from \\\"./ICorePool.sol\\\";\\n\\ninterface IILVPool is ICorePool {\\n    function stakeAsPool(address _staker, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { ICorePool } from \\\"./ICorePool.sol\\\";\\n\\ninterface IFactory {\\n    function owner() external view returns (address);\\n\\n    function ilvPerSecond() external view returns (uint192);\\n\\n    function totalWeight() external view returns (uint32);\\n\\n    function secondsPerUpdate() external view returns (uint32);\\n\\n    function endTime() external view returns (uint32);\\n\\n    function lastRatioUpdate() external view returns (uint32);\\n\\n    function pools(address _poolToken) external view returns (ICorePool);\\n\\n    function poolExists(address _poolAddress) external view returns (bool);\\n\\n    function getPoolAddress(address poolToken) external view returns (address);\\n\\n    function getPoolData(address _poolToken)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint32,\\n            bool\\n        );\\n\\n    function shouldUpdateRatio() external view returns (bool);\\n\\n    function registerPool(ICorePool pool) external;\\n\\n    function updateILVPerSecond() external;\\n\\n    function mintYieldTo(\\n        address _to,\\n        uint256 _value,\\n        bool _useSILV\\n    ) external;\\n\\n    function changePoolWeight(address pool, uint32 weight) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Stake } from \\\"../libraries/Stake.sol\\\";\\n\\ninterface ICorePool {\\n    function users(address _user)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            uint128,\\n            uint248,\\n            uint8,\\n            uint256,\\n            uint256\\n        );\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint32);\\n\\n    function lastYieldDistribution() external view returns (uint64);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function globalWeight() external view returns (uint256);\\n\\n    function pendingRewards(address _user) external view returns (uint256, uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getTotalReserves() external view returns (uint256);\\n\\n    function getStake(address _user, uint256 _stakeId) external view returns (Stake.Data memory);\\n\\n    function getStakesLength(address _user) external view returns (uint256);\\n\\n    function sync() external;\\n\\n    function setWeight(uint32 _weight) external;\\n\\n    function receiveVaultRewards(uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/base/FactoryControlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\nimport { ErrorHandler } from \\\"../libraries/ErrorHandler.sol\\\";\\n\\n/**\\n * @title FactoryControlled\\n *\\n * @dev Abstract smart contract responsible to hold IFactory factory address.\\n * @dev Stores PoolFactory address on initialization.\\n *\\n */\\nabstract contract FactoryControlled is Initializable {\\n    using ErrorHandler for bytes4;\\n    /// @dev Link to the pool factory IlluviumPoolFactory instance.\\n    IFactory internal _factory;\\n\\n    /// @dev Attachs PoolFactory address to the FactoryControlled contract.\\n    function __FactoryControlled_init(address factory_) internal initializer {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"__FactoryControlled_init(address)\\\"))`\\n        bytes4 fnSelector = 0xbb6c0dbf;\\n        fnSelector.verifyNonZeroInput(uint160(factory_), 0);\\n\\n        _factory = IFactory(factory_);\\n    }\\n\\n    /// @dev checks if caller is factory admin (eDAO multisig address).\\n    function _requireIsFactoryController() internal view virtual {\\n        // we're using selector to simplify input and state validation\\n        // internal function simulated selector is `bytes4(keccak256(\\\"_requireIsFactoryController()\\\"))`\\n        bytes4 fnSelector = 0x39e71deb;\\n        fnSelector.verifyAccess(msg.sender == _factory.owner());\\n    }\\n\\n    /**\\n     * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n     *      the amount of storage used by a contract always adds up to the 50.\\n     *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"ZeroInput\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogClaimVaultRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sILV\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogClaimYieldRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalV1WeightAdded\",\"type\":\"uint256\"}],\"name\":\"LogMigrateLockedStakes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"previousTotalWeight\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"newTotalWeight\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"previousYield\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newYield\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"previousRevDis\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newRevDis\",\"type\":\"uint128\"}],\"name\":\"LogMoveFundsFromWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogReceiveVaultRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"LogSetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockUntil\",\"type\":\"uint64\"}],\"name\":\"LogStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastYieldDistribution\",\"type\":\"uint64\"}],\"name\":\"LogSync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"name\":\"LogUnstakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unstakingYield\",\"type\":\"bool\"}],\"name\":\"LogUnstakeLockedMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revDisValue\",\"type\":\"uint256\"}],\"name\":\"LogUpdateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blacklistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"claimAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"claimVaultRewardsFromRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"claimYieldRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useSILV\",\"type\":\"bool\"}],\"name\":\"claimYieldRewardsFromRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint120\",\"name\":\"value\",\"type\":\"uint120\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct Stake.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getV1StakeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_desiredId\",\"type\":\"uint256\"}],\"name\":\"getV1StakePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ilv_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"silv_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_initTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_corePoolV1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"v1StakeMaxPeriod_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakeIds\",\"type\":\"uint256[]\"}],\"name\":\"migrateLockedStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"moveFundsFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRevDis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"receiveVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v1GlobalWeight\",\"type\":\"uint256\"}],\"name\":\"setV1GlobalWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockDuration\",\"type\":\"uint64\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct CorePool.UnstakeParameter[]\",\"name\":\"_stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_unstakingYield\",\"type\":\"bool\"}],\"name\":\"unstakeMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"pendingYield\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingRevDis\",\"type\":\"uint128\"},{\"internalType\":\"uint248\",\"name\":\"totalWeight\",\"type\":\"uint248\"},{\"internalType\":\"uint8\",\"name\":\"v1IdsLength\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeightPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultRewardsPerWeightPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1GlobalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"v1StakesWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SushiLPPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}