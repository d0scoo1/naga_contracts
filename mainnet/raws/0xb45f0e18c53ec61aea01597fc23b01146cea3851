{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-06-09\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    \r\n    constructor()  {}\r\n\r\n    function _msgSender() internal view returns (address ) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Context {\r\n    \r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract TokenStaking is Ownable, Pausable {\r\n\r\n    address public penkyToken;\r\n    address public eliteToken;\r\n    uint256 public currentStakeID;\r\n    address payable public treasuryWallet;\r\n    \r\n    struct PlanInfo {\r\n        uint256 planID;\r\n        uint256 planDays;\r\n        uint256 planReward;\r\n        uint256 planReferalReward;\r\n        uint256 penaltyDays;\r\n        uint256 penaltyFee;\r\n    }\r\n\r\n    struct UserInfo{\r\n        address user;\r\n        address stakeToken;\r\n        uint256 amount;\r\n        uint256 plan;\r\n        uint256 stakeTime;\r\n        uint256 planDays;\r\n        uint256 planReward;\r\n        uint256 planReferalReward;\r\n        uint256 penaltyDays;\r\n        uint256 penaltyFee;\r\n        uint256 unstakeTime;\r\n    }\r\n\r\n    struct UserIDs{\r\n        uint256[] userID;\r\n    }\r\n\r\n    mapping (uint256 => PlanInfo) private planDetails;\r\n    mapping (address => mapping(uint256 => UserInfo)) private userDetails;\r\n    mapping (address => UserIDs) private stakeIDs;\r\n    mapping (address => bool) public isApprove;\r\n    mapping (address => address) private getReferal;\r\n\r\n    event UpdatePlans(address indexed caller, uint256 planID, PlanInfo planDetails);\r\n    event DepositTokens(address indexed caller,address indexed referal, address indexed stakeTokenAddress, uint256 stakeTokenAmount, uint256 stakeID);\r\n    event WithdrawToken(address indexed caller, address withdrawTokenAddres,uint256 stakeID, uint256 withdrawAmount, uint256 rewardAmount,  uint256 referalReward);\r\n    event Recover(address indexed caller, address indexed tokenAddress, address indexed receiver, uint256 tokenAmount );\r\n\r\n    constructor (address _wallet, address penky, address elite) {\r\n        \r\n        treasuryWallet = payable(_wallet);\r\n\r\n        isApprove[penky] = true;\r\n        isApprove[elite] = true;\r\n\r\n        penkyToken = penky;\r\n        eliteToken = elite;\r\n\r\n        planDetails[1] = PlanInfo({planID: 1, planDays: 30 * 86400, planReward: 10, planReferalReward: 10, penaltyDays: 0 * 86400,  penaltyFee: 100 });\r\n        planDetails[2] = PlanInfo({planID: 2, planDays: 182 * 86400, planReward: 80, planReferalReward: 50, penaltyDays: 0 * 86400, penaltyFee: 100 });\r\n        planDetails[3] = PlanInfo({planID: 3, planDays: 365 * 86400, planReward: 200, planReferalReward: 120, penaltyDays: 0 * 86400, penaltyFee: 100 });\r\n    }\r\n\r\n    function viewReferrer(address _account) external view returns(address ){\r\n        return getReferal[_account];\r\n    }\r\n\r\n    function viewPlans(uint256 _planID) external view returns(PlanInfo memory) {\r\n        return planDetails[_planID];\r\n    }\r\n\r\n    function viewUserDetails(address account, uint256 stakeID) external view returns(UserInfo memory){\r\n        return userDetails[account][stakeID];\r\n    }\r\n\r\n    function viewStakeID(address user) external view returns(uint256[] memory){\r\n        return stakeIDs[user].userID;\r\n    }\r\n\r\n    function approveToStake(address token,bool status) external onlyOwner {\r\n        require(isApprove[token] != status, \"already in declared status\");\r\n        isApprove[token] = status;\r\n    }\r\n\r\n    function updatePlan(uint256 _planID, PlanInfo memory _planDetails) external onlyOwner {\r\n        require(0 < _planID && _planID < 4,\"invalid plan ID\");\r\n        planDetails[_planID] = PlanInfo({planID: _planID,\r\n                    planDays: _planDetails.planDays, \r\n                    planReward: _planDetails.planReward, \r\n                    planReferalReward: _planDetails.planReferalReward, \r\n                    penaltyDays: _planDetails.penaltyDays,\r\n                    penaltyFee: _planDetails.penaltyFee \r\n                });\r\n\r\n        emit UpdatePlans(msg.sender,_planID, _planDetails);\r\n    }\r\n\r\n    function setFeeWallet(address _newWallet) external onlyOwner {\r\n        treasuryWallet = payable(_newWallet);\r\n    }\r\n\r\n    function deposit(address _stakeToken,uint256 _tokenAmount, uint256 _planID, address _referal) external whenNotPaused {\r\n        require(0 < _planID && _planID < 4,\"invalid plan ID\");\r\n        require(isApprove[_stakeToken],\"Invalid token to stake\");\r\n\r\n        if(getReferal[msg.sender] == address(0x0)){\r\n            require(_referal != address(0x0) && (getReferal[_referal] != address(0x0) || _referal == owner()),\"invalid referal address\");\r\n            getReferal[msg.sender] = _referal;\r\n        }\r\n\r\n        currentStakeID++;\r\n        UserInfo storage user = userDetails[msg.sender][currentStakeID];\r\n        PlanInfo storage plan = planDetails[_planID];\r\n        user.user = msg.sender;\r\n        user.stakeToken = _stakeToken;\r\n        user.amount = _tokenAmount;\r\n        user.plan = _planID;\r\n        user.stakeTime = block.timestamp;\r\n        user.planDays = plan.planDays;\r\n        user.penaltyFee = plan.penaltyFee;\r\n        user.planReward = plan.planReward;\r\n        user.penaltyDays = plan.penaltyDays;\r\n        user.planReferalReward = plan.planReferalReward;\r\n        stakeIDs[msg.sender].userID.push(currentStakeID);\r\n\r\n        IERC20(_stakeToken).transferFrom(_msgSender(), address(this),_tokenAmount);        \r\n        emit DepositTokens(msg.sender,_referal, _stakeToken, _tokenAmount, currentStakeID);\r\n    }\r\n\r\n    function withdraw(uint256 _stakeID) external whenNotPaused {\r\n        UserInfo storage user = userDetails[msg.sender][_stakeID];\r\n        require(user.stakeTime > 0, \"user not found\");\r\n        require(user.unstakeTime == 0,\"user already unstake\");\r\n        require(user.user == msg.sender, \"user not a caller\");\r\n        require((user.penaltyDays) <= (block.timestamp - user.stakeTime),\" unstake time not reached\");\r\n        user.unstakeTime = block.timestamp;\r\n        uint256 tokenAmount = user.amount;\r\n\r\n        uint256 reward = tokenAmount * user.planReward / 1000;\r\n        uint256 referalReward = tokenAmount * user.planReferalReward / 1000;\r\n        \r\n        if((user.planDays) > (block.timestamp - user.stakeTime) ) {\r\n            uint256 penalty = tokenAmount * user.penaltyFee / 1e3;\r\n            IERC20(user.stakeToken).transfer(treasuryWallet, penalty);\r\n            tokenAmount = tokenAmount - penalty;\r\n            reward = 0; referalReward = 0;\r\n        } else{\r\n            IERC20(user.stakeToken).transfer(msg.sender, reward );\r\n            IERC20(user.stakeToken).transfer(getReferal[msg.sender], referalReward);\r\n        }\r\n\r\n        IERC20(user.stakeToken).transfer(msg.sender, tokenAmount);\r\n\r\n        emit WithdrawToken(msg.sender, user.stakeToken, _stakeID, tokenAmount, reward, referalReward);\r\n    }\r\n\r\n    function recover(address _tokenAddress, address _to, uint256 _Amount) external onlyOwner {\r\n        if(_tokenAddress == address(0x0)){\r\n            require(payable(_to).send(_Amount),\"transaction failed\");\r\n        } else {\r\n            IERC20(_tokenAddress).transfer(_to, _Amount);\r\n        }\r\n\r\n        emit Recover(msg.sender, _tokenAddress, _to, _Amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"penky\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"elite\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Recover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReferalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TokenStaking.PlanInfo\",\"name\":\"planDetails\",\"type\":\"tuple\"}],\"name\":\"UpdatePlans\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawTokenAddres\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referalReward\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"approveToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStakeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referal\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eliteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penkyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReferalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStaking.PlanInfo\",\"name\":\"_planDetails\",\"type\":\"tuple\"}],\"name\":\"updatePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"}],\"name\":\"viewPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReferalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStaking.PlanInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"viewReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewStakeID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"viewUserDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planReferalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006bcff4e32cac3b8a1a96ab427a5b7a4366b8ccda000000000000000000000000f8939164a46fbe9fc923f837221eb541e3c7e7b0000000000000000000000000ffbb28159f9bd643ca3b2d8e2b7ff2b6b0181e59", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18a267e4d531138b738154f98ba789f157a6f671209cfd15cd6eb170a74e13c5"}]}