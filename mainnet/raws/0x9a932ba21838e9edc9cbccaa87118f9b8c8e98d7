{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RaffleBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\n\\ncontract RaffleBurn is VRFConsumerBaseV2 {\\n    event RaffleCreated(\\n        uint256 indexed raffleId,\\n        address indexed from,\\n        address indexed paymentToken,\\n        uint256 ticketPrice,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    event PrizeAdded(\\n        uint256 indexed raffleId,\\n        address indexed from,\\n        address indexed prizeToken,\\n        uint256 tokenId\\n    );\\n\\n    event TicketsPurchased(\\n        uint256 indexed raffleId,\\n        address indexed to,\\n        uint256 startId,\\n        uint256 amount\\n    );\\n\\n    event SeedInitialized(uint256 indexed raffleId, uint256 indexed requestId);\\n\\n    struct Prize {\\n        address tokenAddress;\\n        uint96 tokenId;\\n        address owner;\\n        bool claimed;\\n    }\\n\\n    struct Ticket {\\n        address owner;\\n        uint96 endId;\\n    }\\n\\n    struct Raffle {\\n        address paymentToken;\\n        bool burnable;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n        uint160 ticketPrice;\\n        uint96 seed;\\n    }\\n\\n    /*\\n    GLOBAL STATE\\n    */\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    uint256 public raffleCount;\\n\\n    mapping(uint256 => Raffle) public raffles;\\n    mapping(uint256 => Prize[]) public rafflePrizes;\\n    mapping(uint256 => Ticket[]) public raffleTickets;\\n    mapping(uint256 => uint256) public requestIdToRaffleId;\\n\\n    constructor(address vrfCoordinator) VRFConsumerBaseV2(vrfCoordinator) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n    }\\n\\n    /*\\n    WRITE FUNCTIONS\\n    */\\n\\n    /**\\n     * @notice initializes the raffle\\n     * @param prizeToken the address of the ERC721 token to raffle off\\n     * @param tokenIds the list of token ids to raffle off\\n     * @param paymentToken address of the ERC20 token used to buy tickets. Null address uses ETH\\n     * @param burnable whether payment token can be burned with `burnFrom(address account, uint256 amount)`\\n     * @param startTimestamp the timestamp at which the raffle starts\\n     * @param endTimestamp the timestamp at which the raffle ends\\n     * @param ticketPrice the price of each ticket\\n     * @return raffleId the id of the raffle\\n     */\\n    function createRaffle(\\n        address prizeToken,\\n        uint96[] calldata tokenIds,\\n        address paymentToken,\\n        bool burnable,\\n        uint40 startTimestamp,\\n        uint40 endTimestamp,\\n        uint160 ticketPrice\\n    ) external returns (uint256 raffleId) {\\n        require(prizeToken != address(0), \\\"prizeToken cannot be null\\\");\\n        require(paymentToken != address(0), \\\"paymentToken cannot be null\\\");\\n        require(\\n            endTimestamp > block.timestamp,\\n            \\\"endTimestamp must be in the future\\\"\\n        );\\n        require(ticketPrice > 0, \\\"ticketPrice must be greater than 0\\\");\\n\\n        raffleId = raffleCount++;\\n\\n        raffles[raffleId] = Raffle({\\n            paymentToken: paymentToken,\\n            burnable: burnable,\\n            startTimestamp: startTimestamp,\\n            endTimestamp: endTimestamp,\\n            ticketPrice: ticketPrice,\\n            seed: 0\\n        });\\n\\n        emit RaffleCreated(\\n            raffleId,\\n            msg.sender,\\n            paymentToken,\\n            ticketPrice,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n\\n        addPrizes(raffleId, prizeToken, tokenIds);\\n    }\\n\\n    /**\\n     * @notice add prizes to raffle. Must have transfer approval from contract\\n     *  owner or token owner\\n     * @param raffleId the id of the raffle\\n     * @param prizeToken the address of the ERC721 token to raffle off\\n     * @param tokenIds the list of token ids to raffle off\\n     */\\n    function addPrizes(\\n        uint256 raffleId,\\n        address prizeToken,\\n        uint96[] calldata tokenIds\\n    ) public {\\n        require(tokenIds.length > 0, \\\"tokenIds must be non-empty\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(prizeToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenIds[i]\\n            );\\n            rafflePrizes[raffleId].push(\\n                Prize({\\n                    tokenAddress: prizeToken,\\n                    tokenId: tokenIds[i],\\n                    owner: msg.sender,\\n                    claimed: false\\n                })\\n            );\\n            emit PrizeAdded(raffleId, msg.sender, prizeToken, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice buy ticket with erc20\\n     * @param raffleId the id of the raffle to buy ticket for\\n     * @param ticketCount the number of tickets to buy\\n     */\\n    function buyTickets(uint256 raffleId, uint96 ticketCount) external {\\n        require(raffleStarted(raffleId), \\\"Raffle not started\\\");\\n        require(!raffleEnded(raffleId), \\\"Raffle ended\\\");\\n        // transfer payment token from account\\n        uint256 cost = uint256(raffles[raffleId].ticketPrice) * ticketCount;\\n        _burnTokens(raffleId, msg.sender, cost);\\n        // give tickets to account\\n        _mintTickets(msg.sender, raffleId, ticketCount);\\n    }\\n\\n    /**\\n     * @notice claim prize\\n     * @param raffleId the id of the raffle to buy ticket for\\n     * @param prizeIndex the index of the prize to claim\\n     * @param ticketPurchaseIndex the index of the ticket purchase to claim prize for\\n     */\\n    function claimPrize(\\n        uint256 raffleId,\\n        uint256 prizeIndex,\\n        uint256 ticketPurchaseIndex\\n    ) external {\\n        require(raffles[raffleId].seed != 0, \\\"Seed not set\\\");\\n        require(\\n            rafflePrizes[raffleId][prizeIndex].claimed == false,\\n            \\\"Prize already claimed\\\"\\n        );\\n\\n        address to = raffleTickets[raffleId][ticketPurchaseIndex].owner;\\n        uint256 winnerTicketId = getWinnerTicketId(raffleId, prizeIndex);\\n        uint96 purchaseStartId = _getPurchaseStartId(\\n            raffleId,\\n            ticketPurchaseIndex\\n        );\\n        uint96 purchaseEndId = _getPurchaseEndId(raffleId, ticketPurchaseIndex);\\n        require(\\n            purchaseStartId <= winnerTicketId && winnerTicketId < purchaseEndId,\\n            \\\"Not winner ticket\\\"\\n        );\\n\\n        rafflePrizes[raffleId][prizeIndex].claimed = true;\\n        IERC721(rafflePrizes[raffleId][prizeIndex].tokenAddress).transferFrom(\\n            address(this),\\n            to,\\n            rafflePrizes[raffleId][prizeIndex].tokenId\\n        );\\n    }\\n\\n    /**\\n     * Initialize seed for raffle\\n     */\\n    function initializeSeed(\\n        uint256 raffleId,\\n        bytes32 keyHash,\\n        uint64 subscriptionId\\n    ) external {\\n        require(raffleEnded(raffleId), \\\"Raffle not ended\\\");\\n        require(raffles[raffleId].seed == 0, \\\"Seed already requested\\\");\\n        // Will revert if subscription is not set and funded.\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            3,\\n            300000,\\n            1\\n        );\\n        requestIdToRaffleId[requestId] = raffleId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 raffleId = requestIdToRaffleId[requestId];\\n        require(raffles[raffleId].seed == 0, \\\"Seed already initialized\\\");\\n        raffles[raffleId].seed = uint96(randomWords[0]);\\n        emit SeedInitialized(raffleId, requestId);\\n    }\\n\\n    /**\\n     * @dev mints tickets to account\\n     * @param to the account to send ticket to\\n     * @param raffleId the id of the raffle to send ticket for\\n     * @param ticketCount the number of tickets to send\\n     */\\n    function _mintTickets(\\n        address to,\\n        uint256 raffleId,\\n        uint96 ticketCount\\n    ) internal {\\n        uint96 purchaseStartId = _getPurchaseStartId(\\n            raffleId,\\n            raffleTickets[raffleId].length\\n        );\\n        uint96 purchaseEndId = purchaseStartId + ticketCount;\\n        Ticket memory ticket = Ticket({owner: to, endId: purchaseEndId});\\n        raffleTickets[raffleId].push(ticket);\\n        emit TicketsPurchased(\\n            raffleId,\\n            msg.sender,\\n            purchaseStartId,\\n            ticketCount\\n        );\\n    }\\n\\n    function _burnTokens(\\n        uint256 raffleId,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        if (raffles[raffleId].burnable) {\\n            IERC20Burnable(raffles[raffleId].paymentToken).burnFrom(\\n                from,\\n                amount\\n            );\\n        } else {\\n            IERC20(raffles[raffleId].paymentToken).transferFrom(\\n                from,\\n                address(0xdead),\\n                amount\\n            );\\n        }\\n    }\\n\\n    /*\\n    READ FUNCTIONS\\n    */\\n\\n    /**\\n     * @dev binary search for winner address\\n     * @param raffleId the id of the raffle to get winner for\\n     * @param prizeIndex the index of the prize to get winner for\\n     * @return account the winner address\\n     * @return ticketPurchaseIndex the index of the winner ticket purchase\\n     * @return ticketId the id of the winner ticket\\n     */\\n    function getWinner(uint256 raffleId, uint256 prizeIndex)\\n        public\\n        view\\n        returns (\\n            address account,\\n            uint256 ticketPurchaseIndex,\\n            uint256 ticketId\\n        )\\n    {\\n        ticketId = getWinnerTicketId(raffleId, prizeIndex);\\n        ticketPurchaseIndex = getTicketPurchaseIndex(raffleId, ticketId);\\n        account = raffleTickets[raffleId][ticketPurchaseIndex].owner;\\n    }\\n\\n    /**\\n     * @dev binary search for ticket purchase index of ticketId\\n     * @param raffleId the id of the raffle to get winner for\\n     * @param ticketId the id of the ticket to get index for\\n     * @return ticketPurchaseIndex the purchase index of the ticket\\n     */\\n    function getTicketPurchaseIndex(uint256 raffleId, uint256 ticketId)\\n        public\\n        view\\n        returns (uint256 ticketPurchaseIndex)\\n    {\\n        // binary search for winner\\n        uint256 left = 0;\\n        uint256 right = raffleTickets[raffleId].length - 1;\\n        while (left < right) {\\n            uint256 mid = (left + right) / 2;\\n            if (raffleTickets[raffleId][mid].endId < ticketId) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n        ticketPurchaseIndex = left;\\n    }\\n\\n    /**\\n     * @dev salt the seed with prize index and get the winner ticket id\\n     * @param raffleId the id of the raffle to get winner for\\n     * @param prizeIndex the index of the prize to get winner for\\n     * @return ticketId the id of the ticket that won\\n     */\\n    function getWinnerTicketId(uint256 raffleId, uint256 prizeIndex)\\n        public\\n        view\\n        returns (uint256 ticketId)\\n    {\\n        // add salt to seed\\n        ticketId =\\n            uint256(keccak256((abi.encode(raffleId, prizeIndex)))) %\\n            getTicketCount(raffleId);\\n    }\\n\\n    /**\\n     * @notice get total number of tickets for a purchase\\n     * @param raffleId the id of the raffle to get number of tickets for\\n     * @param ticketPurchaseIndex the index of the ticket purchase to get number of tickets for\\n     * @return ticketCount the number of tickets\\n     */\\n    function getPurchaseTicketCount(\\n        uint256 raffleId,\\n        uint256 ticketPurchaseIndex\\n    ) public view returns (uint256 ticketCount) {\\n        return\\n            _getPurchaseEndId(raffleId, ticketPurchaseIndex) -\\n            _getPurchaseStartId(raffleId, ticketPurchaseIndex);\\n    }\\n\\n    /**\\n     * @notice get total number of tickets purchased by an account\\n     * @param raffleId the id of the raffle to get number of tickets for\\n     * @param account the account to get number of tickets for\\n     * @return ticketCount the number of tickets\\n     */\\n    function getAccountTicketCount(uint256 raffleId, address account)\\n        public\\n        view\\n        returns (uint256 ticketCount)\\n    {\\n        for (uint256 i = 0; i < raffleTickets[raffleId].length; i++) {\\n            if (raffleTickets[raffleId][i].owner == account) {\\n                ticketCount += getPurchaseTicketCount(raffleId, i);\\n            }\\n        }\\n        return ticketCount;\\n    }\\n\\n    /**\\n     * @notice get total number of prizes for raffle\\n     * @param raffleId the id of the raffle to get number of prizes for\\n     * @return prizeCount the number of prizes\\n     */\\n    function getPrizeCount(uint256 raffleId)\\n        public\\n        view\\n        returns (uint256 prizeCount)\\n    {\\n        return rafflePrizes[raffleId].length;\\n    }\\n\\n    /**\\n     * @notice get total number of purchases for raffle\\n     * @param raffleId the id of the raffle to get number of purchases for\\n     * @return purchaseCount the number of tickets\\n     */\\n    function getPurchaseCount(uint256 raffleId)\\n        public\\n        view\\n        returns (uint256 purchaseCount)\\n    {\\n        return raffleTickets[raffleId].length;\\n    }\\n\\n    /**\\n     * @notice get total number of tickets sold for raffle\\n     * @param raffleId the id of the raffle to get number of tickets for\\n     * @return ticketCount the number of tickets\\n     */\\n    function getTicketCount(uint256 raffleId)\\n        public\\n        view\\n        returns (uint256 ticketCount)\\n    {\\n        uint256 length = raffleTickets[raffleId].length;\\n        return length > 0 ? raffleTickets[raffleId][length - 1].endId : 0;\\n    }\\n\\n    /**\\n     * @notice get total ticket sales for raffle\\n     * @param raffleId the id of the raffle to get number of tickets for\\n     * @return ticketSales the number of tickets\\n     */\\n    function getTicketSales(uint256 raffleId)\\n        public\\n        view\\n        returns (uint256 ticketSales)\\n    {\\n        return\\n            getTicketCount(raffleId) * uint256(raffles[raffleId].ticketPrice);\\n    }\\n\\n    /**\\n     * @notice check if raffle ended\\n     * @param raffleId the id of the raffle to check\\n     * @return ended true if ended\\n     */\\n    function raffleEnded(uint256 raffleId) public view returns (bool ended) {\\n        return raffles[raffleId].endTimestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @notice check if raffle started\\n     * @param raffleId the id of the raffle to check\\n     * @return started true if started\\n     */\\n    function raffleStarted(uint256 raffleId)\\n        public\\n        view\\n        returns (bool started)\\n    {\\n        return raffles[raffleId].startTimestamp <= block.timestamp;\\n    }\\n\\n    function _getPurchaseStartId(uint256 raffleId, uint256 ticketPurchaseIndex)\\n        private\\n        view\\n        returns (uint96 endId)\\n    {\\n        return\\n            ticketPurchaseIndex > 0\\n                ? raffleTickets[raffleId][ticketPurchaseIndex - 1].endId\\n                : 0;\\n    }\\n\\n    function _getPurchaseEndId(uint256 raffleId, uint256 ticketPurchaseIndex)\\n        private\\n        view\\n        returns (uint96 startId)\\n    {\\n        return raffleTickets[raffleId][ticketPurchaseIndex].endId;\\n    }\\n\\n    /*\\n    MODIFIERS\\n    */\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) public virtual;\\n\\n    function burnFrom(address account, uint256 amount) public virtual;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PrizeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SeedInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"prizeToken\",\"type\":\"address\"},{\"internalType\":\"uint96[]\",\"name\":\"tokenIds\",\"type\":\"uint96[]\"}],\"name\":\"addPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"ticketCount\",\"type\":\"uint96\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prizeToken\",\"type\":\"address\"},{\"internalType\":\"uint96[]\",\"name\":\"tokenIds\",\"type\":\"uint96[]\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint160\",\"name\":\"ticketPrice\",\"type\":\"uint160\"}],\"name\":\"createRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPrizeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prizeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getPurchaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPurchaseIndex\",\"type\":\"uint256\"}],\"name\":\"getPurchaseTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getTicketPurchaseIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPurchaseIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getTicketSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketPurchaseIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"}],\"name\":\"getWinnerTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"initializeSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rafflePrizes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenId\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"endId\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint160\",\"name\":\"ticketPrice\",\"type\":\"uint160\"},{\"internalType\":\"uint96\",\"name\":\"seed\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToRaffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RaffleBurn", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e69909", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}