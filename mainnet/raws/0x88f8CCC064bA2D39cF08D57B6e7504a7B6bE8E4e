{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/configuration/LendingPoolAddressesProviderRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\\nimport {ILendingPoolAddressesProviderRegistry} from '../../interfaces/ILendingPoolAddressesProviderRegistry.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\n\\n/**\\n * @title LendingPoolAddressesProviderRegistry contract\\n * @dev Main registry of LendingPoolAddressesProvider of multiple Sturdy protocol's markets\\n * - Used for indexing purposes of Sturdy protocol's markets\\n * - The id assigned to a LendingPoolAddressesProvider refers to the market it is connected with,\\n *   for example with `0` for the Sturdy main market and `1` for the next created\\n * @author Sturdy, inspiration from Aave\\n **/\\ncontract LendingPoolAddressesProviderRegistry is Ownable, ILendingPoolAddressesProviderRegistry {\\n  mapping(address => uint256) private _addressesProviders;\\n  address[] private _addressesProvidersList;\\n\\n  /**\\n   * @dev Returns the list of registered addresses provider\\n   * @return The list of addresses provider, potentially containing address(0) elements\\n   **/\\n  function getAddressesProvidersList() external view override returns (address[] memory) {\\n    address[] memory addressesProvidersList = _addressesProvidersList;\\n\\n    uint256 maxLength = addressesProvidersList.length;\\n\\n    address[] memory activeProviders = new address[](maxLength);\\n\\n    for (uint256 i; i < maxLength; ++i) {\\n      if (_addressesProviders[addressesProvidersList[i]] > 0) {\\n        activeProviders[i] = addressesProvidersList[i];\\n      }\\n    }\\n\\n    return activeProviders;\\n  }\\n\\n  /**\\n   * @dev Registers an addresses provider\\n   * @param provider The address of the new LendingPoolAddressesProvider\\n   * @param id The id for the new LendingPoolAddressesProvider, referring to the market it belongs to\\n   **/\\n  function registerAddressesProvider(address provider, uint256 id)\\n    external\\n    payable\\n    override\\n    onlyOwner\\n  {\\n    require(id > 0, Errors.LPAPR_INVALID_ADDRESSES_PROVIDER_ID);\\n\\n    _addressesProviders[provider] = id;\\n    _addToAddressesProvidersList(provider);\\n    emit AddressesProviderRegistered(provider);\\n  }\\n\\n  /**\\n   * @dev Removes a LendingPoolAddressesProvider from the list of registered addresses provider\\n   * @param provider The LendingPoolAddressesProvider address\\n   **/\\n  function unregisterAddressesProvider(address provider) external payable override onlyOwner {\\n    require(_addressesProviders[provider] > 0, Errors.LPAPR_PROVIDER_NOT_REGISTERED);\\n    _addressesProviders[provider] = 0;\\n    emit AddressesProviderUnregistered(provider);\\n  }\\n\\n  /**\\n   * @dev Returns the id on a registered LendingPoolAddressesProvider\\n   * @return The id or 0 if the LendingPoolAddressesProvider is not registered\\n   */\\n  function getAddressesProviderIdByAddress(address addressesProvider)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _addressesProviders[addressesProvider];\\n  }\\n\\n  function _addToAddressesProvidersList(address provider) internal {\\n    uint256 providersCount = _addressesProvidersList.length;\\n\\n    for (uint256 i; i < providersCount; ++i) {\\n      if (_addressesProvidersList[i] == provider) {\\n        return;\\n      }\\n    }\\n\\n    _addressesProvidersList.push(provider);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public payable virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProviderRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProviderRegistry contract\\n * @dev Main registry of LendingPoolAddressesProvider of multiple Sturdy protocol's markets\\n * - Used for indexing purposes of Sturdy protocol's markets\\n * - The id assigned to a LendingPoolAddressesProvider refers to the market it is connected with,\\n *   for example with `0` for the Sturdy main market and `1` for the next created\\n * @author Sturdy, inspiration from Aave\\n **/\\ninterface ILendingPoolAddressesProviderRegistry {\\n  event AddressesProviderRegistered(address indexed newAddress);\\n  event AddressesProviderUnregistered(address indexed newAddress);\\n\\n  function getAddressesProvidersList() external view returns (address[] memory);\\n\\n  function getAddressesProviderIdByAddress(address addressesProvider)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function registerAddressesProvider(address provider, uint256 id) external payable;\\n\\n  function unregisterAddressesProvider(address provider) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Sturdy, inspiration from Aave\\n * @notice Defines the error messages emitted by the different contracts of the Sturdy protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string internal constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string internal constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string internal constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string internal constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string internal constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string internal constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string internal constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string internal constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string internal constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string internal constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string internal constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string internal constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string internal constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string internal constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string internal constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string internal constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string internal constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string internal constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string internal constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string internal constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string internal constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string internal constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string internal constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string internal constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string internal constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string internal constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string internal constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string internal constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string internal constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string internal constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string internal constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string internal constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string internal constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string internal constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string internal constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string internal constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string internal constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string internal constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string internal constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string internal constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string internal constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string internal constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string internal constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string internal constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string internal constant MATH_ADDITION_OVERFLOW = '49';\\n  string internal constant MATH_DIVISION_BY_ZERO = '50';\\n  string internal constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string internal constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string internal constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string internal constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string internal constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string internal constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string internal constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string internal constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string internal constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string internal constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string internal constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string internal constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string internal constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string internal constant RC_INVALID_LTV = '67';\\n  string internal constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string internal constant RC_INVALID_LIQ_BONUS = '69';\\n  string internal constant RC_INVALID_DECIMALS = '70';\\n  string internal constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string internal constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string internal constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string internal constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string internal constant UL_INVALID_INDEX = '77';\\n  string internal constant LP_NOT_CONTRACT = '78';\\n  string internal constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string internal constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string internal constant VT_COLLATERAL_DEPOSIT_REQUIRE_ETH = '81'; //Only accept ETH for collateral deposit\\n  string internal constant VT_COLLATERAL_DEPOSIT_INVALID = '82'; //Collateral deposit failed\\n  string internal constant VT_LIQUIDITY_DEPOSIT_INVALID = '83'; //Only accept USDC, USDT, DAI for liquidity deposit\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID = '84'; //Collateral withdraw failed\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID_AMOUNT = '85'; //Collateral withdraw has not enough amount\\n  string internal constant VT_CONVERT_ASSET_BY_CURVE_INVALID = '86'; //Convert asset by curve invalid\\n  string internal constant VT_PROCESS_YIELD_INVALID = '87'; //Processing yield is invalid\\n  string internal constant VT_TREASURY_INVALID = '88'; //Treasury is invalid\\n  string internal constant LP_ATOKEN_INIT_INVALID = '89'; //aToken invalid init\\n  string internal constant VT_FEE_TOO_BIG = '90'; //Fee is too big\\n  string internal constant VT_COLLATERAL_DEPOSIT_VAULT_UNAVAILABLE = '91';\\n  string internal constant LP_LIQUIDATION_CONVERT_FAILED = '92';\\n  string internal constant VT_DEPLOY_FAILED = '93'; // Vault deploy failed\\n  string internal constant VT_INVALID_CONFIGURATION = '94'; // Invalid vault configuration\\n  string internal constant VL_OVERFLOW_MAX_RESERVE_CAPACITY = '95'; // overflow max capacity of reserve\\n  string internal constant VT_WITHDRAW_AMOUNT_MISMATCH = '96'; // not performed withdraw 100%\\n  string internal constant VT_SWAP_MISMATCH_RETURNED_AMOUNT = '97'; //Returned amount is not enough\\n  string internal constant CALLER_NOT_YIELD_PROCESSOR = '98'; // 'The caller must be the pool admin'\\n  string internal constant VT_EXTRA_REWARDS_INDEX_INVALID = '99'; // Invalid extraRewards index\\n  string internal constant VT_SWAP_PATH_LENGTH_INVALID = '100'; // Invalid token or fee length\\n  string internal constant VT_SWAP_PATH_TOKEN_INVALID = '101'; // Invalid token information\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressesProviderUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"getAddressesProviderIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerAddressesProvider\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressesProvider\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "LendingPoolAddressesProviderRegistry", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}