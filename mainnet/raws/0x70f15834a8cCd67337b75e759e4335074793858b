{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AaveStakeRewardClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {AccountCenterInterface} from \\\"./interfaces/IAccountCenter.sol\\\";\\n\\nstruct AaveUserData {\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 availableBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n    uint256 ethPriceInUsd;\\n    uint256 pendingRewards;\\n}\\n\\ncontract AaveStakeRewardClaimer {\\n    address public aaveResolver;\\n    address public aaveIncentivesAddress;\\n    address public aaveDataProvider;\\n    address public accountCenter;\\n    uint256 public _accountTypeCount = 2;\\n    constructor(\\n        address _accountCenter,\\n        address _aaveDataProvider,\\n        address _aaveResolver,\\n        address _aaveIncentivesAddress\\n    ) {\\n        accountCenter = _accountCenter;\\n        aaveResolver = _aaveResolver;\\n        aaveDataProvider = _aaveDataProvider;\\n        aaveIncentivesAddress = _aaveIncentivesAddress;\\n    }\\n\\n    function claimAaveStakeReward(address[] calldata dsa) public {\\n        for (uint256 i = 0; i < dsa.length; i++) {\\n            (address[] memory atokens, ) = checkAaveStakeReward(dsa[i]);\\n            IDsaProxy(dsa[i]).claimDsaAaveStakeReward(atokens);\\n        }\\n    }\\n\\n    function checkAaveStakeReward(address aaveAccount)\\n        public\\n        view\\n        returns (address[] memory atokens, uint256 rewards)\\n    {\\n        uint256 assetsCount;\\n\\n        (bool[] memory collateral, ) = IAaveV2Resolver(aaveResolver)\\n            .getConfiguration(aaveAccount);\\n\\n        address[] memory reservesList = IAaveV2Resolver(aaveResolver)\\n            .getReservesList();\\n\\n        for (uint256 i = 0; i < reservesList.length; i++) {\\n            if (collateral[i] == true) {\\n                assetsCount = assetsCount + 1;\\n            }\\n        }\\n\\n        address[] memory assets = new address[](assetsCount);\\n\\n        uint256 j;\\n\\n        for (uint256 i = 0; i < reservesList.length; i++) {\\n            if (collateral[i] == true) {\\n                assets[j] = reservesList[i];\\n                j = j + 1;\\n            }\\n        }\\n\\n        uint256 arrLength = assets.length;\\n\\n        address[] memory _atokens = new address[](arrLength);\\n\\n        AaveProtocolDataProvider aaveData = AaveProtocolDataProvider(\\n            aaveDataProvider\\n        );\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            (_atokens[i], , ) = aaveData\\n                .getReserveTokensAddresses(assets[i]);\\n        }\\n\\n        uint256 _rewards = AaveStakedTokenIncentivesController(\\n            aaveIncentivesAddress\\n        ).getRewardsBalance(_atokens, aaveAccount);\\n\\n        return (_atokens, _rewards);\\n    }\\n}\\n\\ninterface AaveStakedTokenIncentivesController {\\n\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface IAaveV2Resolver {\\n    function getConfiguration(address user)\\n        external\\n        view\\n        returns (bool[] memory collateral, bool[] memory borrowed);\\n\\n    function getReservesList() external view returns (address[] memory data);\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\\ninterface IDsaProxy {\\n    function claimDsaAaveStakeReward(address[] memory atokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccountCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AccountCenterInterface {\\n    function accountCount() external view returns (uint256);\\n\\n    function accountTypeCount() external view returns (uint256);\\n\\n    function createAccount(uint256 accountTypeID)\\n        external\\n        returns (address _account);\\n\\n    function getAccount(uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account);\\n\\n    function getEOA(address account)\\n        external\\n        view\\n        returns (address payable _eoa);\\n\\n    function isSmartAccount(address _address)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function isSmartAccountofTypeN(address _address, uint256 accountTypeID)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function getAccountCountOfTypeN(uint256 accountTypeID)\\n        external\\n        view\\n        returns (uint256 count);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveIncentivesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_accountTypeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveAccount\",\"type\":\"address\"}],\"name\":\"checkAaveStakeReward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"atokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dsa\",\"type\":\"address[]\"}],\"name\":\"claimAaveStakeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AaveStakeRewardClaimer", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9f31ee4c802cd670be2a58b8c3069db74b34f6a000000000000000000000000057835ad21a177dbdd3090bb1cae03eacf78fc6d000000000000000000000000eb2e81ec25e3f2842b46688e68a465d6c4377e39000000000000000000000000d784927ff2f95ba542bfc824c8a8a98f3495f6b5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}