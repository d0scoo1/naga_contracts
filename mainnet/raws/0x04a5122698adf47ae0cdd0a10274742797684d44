{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.23;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath32\r\n * @dev SafeMath library implemented for uint32\r\n */\r\nlibrary SafeMath32 {\r\n\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) {\r\n            return 0;\r\n       }\r\n        uint32 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint32 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        uint32 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath16\r\n * @dev SafeMath library implemented for uint16\r\n */\r\nlibrary SafeMath16 {\r\n\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint16 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract StudentFactory is Ownable{\r\n\r\n    struct Student{\r\n        string name;// \u59d3\u540d\r\n        string nation;// \u6c11\u65cf\r\n        string id;// \u8bc1\u4ef6\u53f7\r\n        uint32 birth;// \u751f\u65e5\r\n        bytes1 gender;// \u6027\u522b\r\n    } \r\n    \r\n    struct Undergraduate{\r\n        string studentId; // \u5b66\u7c4d\u53f7\r\n        string school;// \u5b66\u6821 \r\n        string major;// \u4e13\u4e1a\r\n        uint8 length;// \u5b66\u5236\r\n        uint8 eduType;// \u5b66\u5386\u7c7b\u522b\r\n        uint8 eduForm;// \u5b66\u4e60\u5f62\u5f0f\r\n        uint8 class;// \u73ed\u7ea7\r\n        uint8 level;// \u5c42\u6b21(\u4e13/\u672c/\u7855/\u535a)\r\n        uint8 state;// \u5b66\u7c4d\u72b6\u6001\r\n        uint32 admissionDate;// \u5165\u5b66\u65e5\u671f\r\n        uint32 departureDate;// \u79bb\u6821\u65e5\u671f\r\n    }\r\n\r\n    struct Master{\r\n        string studentId; // \u5b66\u7c4d\u53f7\r\n        string school;// \u5b66\u6821 \r\n        string major;// \u4e13\u4e1a\r\n        uint8 length;// \u5b66\u5236\r\n        uint8 eduType;// \u5b66\u5386\u7c7b\u522b\r\n        uint8 eduForm;// \u5b66\u4e60\u5f62\u5f0f\r\n        uint8 class;// \u73ed\u7ea7\r\n        uint8 level;// \u5c42\u6b21(\u4e13/\u672c/\u7855/\u535a)\r\n        uint8 state;// \u5b66\u7c4d\u72b6\u6001\r\n        uint32 admissionDate;// \u5165\u5b66\u65e5\u671f\r\n        uint32 departureDate;// \u79bb\u6821\u65e5\u671f\r\n    }\r\n\r\n    struct Doctor{\r\n        string studentId; // \u5b66\u7c4d\u53f7\r\n        string school;// \u5b66\u6821 \r\n        string major;// \u4e13\u4e1a\r\n        uint8 length;// \u5b66\u5236\r\n        uint8 eduType;// \u5b66\u5386\u7c7b\u522b\r\n        uint8 eduForm;// \u5b66\u4e60\u5f62\u5f0f\r\n        uint8 class;// \u73ed\u7ea7\r\n        uint8 level;// \u5c42\u6b21(\u4e13/\u672c/\u7855/\u535a)\r\n        uint8 state;// \u5b66\u7c4d\u72b6\u6001\r\n        uint32 admissionDate;// \u5165\u5b66\u65e5\u671f\r\n        uint32 departureDate;// \u79bb\u6821\u65e5\u671f\r\n    }\r\n\r\n    struct CET4{\r\n        uint32 time; //\u65f6\u95f4\uff0c\u59822017\u5e7412\u6708\r\n        uint32 grade;// \u5206\u6570\r\n    }\r\n\r\n    struct CET6{\r\n        uint32 time; //\u65f6\u95f4\uff0c\u59822017\u5e7412\u6708\r\n        uint32 grade;// \u5206\u6570\r\n    }\r\n\r\n    Student[] students;// \u5b66\u751f\u5217\u8868\r\n    CET4[] CET4List; // \u56db\u7ea7\u6210\u7ee9\u5217\u8868\r\n    CET6[] CET6List; // \u516d\u7ea7\u6210\u7ee9\u5217\u8868\r\n    mapping (address=>Student) public addrToStudent;// \u5730\u5740\u5230\u5b66\u751f\u7684\u6620\u5c04\r\n    mapping (uint=>address) internal CET4IndexToAddr; // \u56db\u7ea7\u6210\u7ee9\u5e8f\u53f7\u5230\u5730\u5740\u7684\u6620\u5c04\r\n    mapping (uint=>address) internal CET6IndexToAddr; // \u516d\u7ea7\u6210\u7ee9\u5e8f\u53f7\u5230\u5730\u5740\u7684\u6620\u5c04\r\n    mapping (address=>uint) public addrCET4Count; //\u5730\u5740\u5230\u56db\u7ea7\u6210\u7ee9\u6570\u91cf\u6620\u5c04\r\n    mapping (address=>uint) public addrCET6Count; //\u5730\u5740\u5230\u516d\u7ea7\u6210\u7ee9\u6570\u91cf\u6620\u5c04\r\n    mapping (address=>Undergraduate) public addrToUndergaduate;// \u5730\u5740\u5230\u672c\u79d1\u5b66\u7c4d\u7684\u6620\u5c04\r\n    mapping (address=>Master) public addrToMaster;// \u5730\u5740\u5230\u7855\u58eb\u5b66\u7c4d\u7684\u6620\u5c04\r\n    mapping (address=>Doctor) public addrToDoctor;// \u5730\u5740\u5230\u535a\u58eb\u5b66\u7c4d\u7684\u6620\u5c04\r\n   \r\n    // \u5b9a\u4e49\u5224\u65ad\u8eab\u4efd\u8bc1\u662f\u5426\u88ab\u4f7f\u7528\u7684modifier\r\n    modifier availableIdOf(string _id) {\r\n        require(_isIdExisted(_id));\r\n        _;\r\n    }\r\n\r\n    // \u5224\u65ad\u8bc1\u4ef6\u53f7\u7801\u662f\u5426\u5df2\u6ce8\u518c\r\n    function _isIdExisted(string _id) private view returns(bool){\r\n        for(uint i = 0;i<students.length;i++){\r\n            if(keccak256(students[i].id)==keccak256(_id)){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // \u521b\u5efa\u5b66\u751f\r\n    function createStudent(string _name,string _nation,string _id,uint32 _birth,bytes1 _gender) public availableIdOf(_id){\r\n        Student memory student = Student(_name,_nation,_id,_birth,_gender);\r\n        addrToStudent[msg.sender] = student;\r\n        students.push(student);\r\n    }\r\n}\r\ncontract StudentHelper is StudentFactory{\r\n    using SafeMath for uint;\r\n    // \u7ed9\u67d0\u4e2a\u5730\u5740\u7684\u4eba\u6dfb\u52a0\u672c\u79d1\u5b66\u7c4d\u4fe1\u606f\r\n    function addUndergraduateTo(address _addr,string _studentId,string _school,string _major,uint8 _length,uint8 _eduType,uint8 _eduForm,uint8 _class,uint8 _level,uint8 _state,uint32 _admissionDate,uint32 _departureDate) \r\n    public onlyOwner{\r\n        addrToUndergaduate[_addr] = Undergraduate(_studentId,_school,_major,_length,_eduType,_eduForm,_class,_level,_state,_admissionDate,_departureDate);\r\n    }\r\n\r\n    // \u7ed9\u67d0\u4e2a\u5730\u5740\u7684\u4eba\u6dfb\u52a0\u7855\u58eb\u5b66\u7c4d\u4fe1\u606f\r\n    function addMasterTo(address _addr,string _studentId,string _school,string _major,uint8 _length,uint8 _eduType,uint8 _eduForm,uint8 _class,uint8 _level,uint8 _state,uint32 _admissionDate,uint32 _departureDate) \r\n    public onlyOwner{\r\n        addrToMaster[_addr] = Master(_studentId,_school,_major,_length,_eduType,_eduForm,_class,_level,_state,_admissionDate,_departureDate);\r\n    }\r\n\r\n    // \u7ed9\u67d0\u4e2a\u5730\u5740\u7684\u4eba\u6dfb\u52a0\u535a\u58eb\u5b66\u7c4d\u4fe1\u606f\r\n    function addDoctorTo(address _addr,string _studentId,string _school,string _major,uint8 _length,uint8 _eduType,uint8 _eduForm,uint8 _class,uint8 _level,uint8 _state,uint32 _admissionDate,uint32 _departureDate) \r\n    public onlyOwner{\r\n        addrToDoctor[_addr] = Doctor(_studentId,_school,_major,_length,_eduType,_eduForm,_class,_level,_state,_admissionDate,_departureDate);\r\n    }\r\n\r\n    // \u7ed9\u67d0\u4e2a\u5730\u5740\u6dfb\u52a0\u56db\u7ea7\u6210\u7ee9\u8bb0\u5f55\r\n    function addCET4To(address _addr,uint32 _time,uint32 _grade) public onlyOwner{\r\n        uint index = CET4List.push(CET4(_time,_grade))-1;\r\n        CET4IndexToAddr[index] = _addr;\r\n        addrCET4Count[_addr]++;\r\n    }\r\n\r\n    // \u7ed9\u67d0\u4e2a\u5730\u5740\u6dfb\u52a0\u516d\u7ea7\u6210\u7ee9\u8bb0\u5f55\r\n    function addCET6To(address _addr,uint32 _time,uint32 _grade) public onlyOwner{\r\n        uint index = CET6List.push(CET6(_time,_grade))-1;\r\n        CET6IndexToAddr[index] = _addr;\r\n        addrCET6Count[_addr]++;\r\n    }\r\n\r\n    // \u83b7\u5f97\u67d0\u4e2a\u5730\u5740\u7684\u56db\u7ea7\u6210\u7ee9\r\n    function getCET4ByAddr(address _addr) view public returns (uint32[],uint32[]) {\r\n        uint32[] memory timeList = new uint32[](addrCET4Count[_addr]); \r\n        uint32[] memory gradeList = new uint32[](addrCET4Count[_addr]);\r\n        uint counter = 0;    \r\n        for (uint i = 0; i < CET4List.length; i++) {\r\n            if(CET4IndexToAddr[i]==_addr){\r\n                timeList[counter] = CET4List[i].time;\r\n                gradeList[counter] = CET4List[i].grade;\r\n                counter++;\r\n            }\r\n        }\r\n        return(timeList,gradeList);\r\n    }\r\n\r\n    // \u83b7\u5f97\u67d0\u4e2a\u5730\u5740\u7684\u516d\u7ea7\u6210\u7ee9\r\n    function getCET6ByAddr(address _addr) view public returns (uint32[],uint32[]) {\r\n        uint32[] memory timeList = new uint32[](addrCET6Count[_addr]); \r\n        uint32[] memory gradeList = new uint32[](addrCET6Count[_addr]);\r\n        uint counter = 0;    \r\n        for (uint i = 0; i < CET6List.length; i++) {\r\n            if(CET6IndexToAddr[i]==_addr){\r\n                timeList[counter] = CET6List[i].time;\r\n                gradeList[counter] = CET6List[i].grade;\r\n                counter++;\r\n            }\r\n        }\r\n        return(timeList,gradeList);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCET6ByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_studentId\",\"type\":\"string\"},{\"name\":\"_school\",\"type\":\"string\"},{\"name\":\"_major\",\"type\":\"string\"},{\"name\":\"_length\",\"type\":\"uint8\"},{\"name\":\"_eduType\",\"type\":\"uint8\"},{\"name\":\"_eduForm\",\"type\":\"uint8\"},{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_admissionDate\",\"type\":\"uint32\"},{\"name\":\"_departureDate\",\"type\":\"uint32\"}],\"name\":\"addMasterTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrCET6Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToUndergaduate\",\"outputs\":[{\"name\":\"studentId\",\"type\":\"string\"},{\"name\":\"school\",\"type\":\"string\"},{\"name\":\"major\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"uint8\"},{\"name\":\"eduType\",\"type\":\"uint8\"},{\"name\":\"eduForm\",\"type\":\"uint8\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"admissionDate\",\"type\":\"uint32\"},{\"name\":\"departureDate\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToStudent\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"nation\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"birth\",\"type\":\"uint32\"},{\"name\":\"gender\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_studentId\",\"type\":\"string\"},{\"name\":\"_school\",\"type\":\"string\"},{\"name\":\"_major\",\"type\":\"string\"},{\"name\":\"_length\",\"type\":\"uint8\"},{\"name\":\"_eduType\",\"type\":\"uint8\"},{\"name\":\"_eduForm\",\"type\":\"uint8\"},{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_admissionDate\",\"type\":\"uint32\"},{\"name\":\"_departureDate\",\"type\":\"uint32\"}],\"name\":\"addDoctorTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToMaster\",\"outputs\":[{\"name\":\"studentId\",\"type\":\"string\"},{\"name\":\"school\",\"type\":\"string\"},{\"name\":\"major\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"uint8\"},{\"name\":\"eduType\",\"type\":\"uint8\"},{\"name\":\"eduForm\",\"type\":\"uint8\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"admissionDate\",\"type\":\"uint32\"},{\"name\":\"departureDate\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrCET4Count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToDoctor\",\"outputs\":[{\"name\":\"studentId\",\"type\":\"string\"},{\"name\":\"school\",\"type\":\"string\"},{\"name\":\"major\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"uint8\"},{\"name\":\"eduType\",\"type\":\"uint8\"},{\"name\":\"eduForm\",\"type\":\"uint8\"},{\"name\":\"class\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"admissionDate\",\"type\":\"uint32\"},{\"name\":\"departureDate\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_nation\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_birth\",\"type\":\"uint32\"},{\"name\":\"_gender\",\"type\":\"bytes1\"}],\"name\":\"createStudent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_studentId\",\"type\":\"string\"},{\"name\":\"_school\",\"type\":\"string\"},{\"name\":\"_major\",\"type\":\"string\"},{\"name\":\"_length\",\"type\":\"uint8\"},{\"name\":\"_eduType\",\"type\":\"uint8\"},{\"name\":\"_eduForm\",\"type\":\"uint8\"},{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_state\",\"type\":\"uint8\"},{\"name\":\"_admissionDate\",\"type\":\"uint32\"},{\"name\":\"_departureDate\",\"type\":\"uint32\"}],\"name\":\"addUndergraduateTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint32\"},{\"name\":\"_grade\",\"type\":\"uint32\"}],\"name\":\"addCET6To\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCET4ByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint32\"},{\"name\":\"_grade\",\"type\":\"uint32\"}],\"name\":\"addCET4To\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "StudentHelper", "CompilerVersion": "v0.4.25-nightly.2018.5.30+commit.3f3d6df2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5a03a2f5ba91ba9e899b2004c4450b25a06c0d915e70742e65b893f6839969ff"}]}