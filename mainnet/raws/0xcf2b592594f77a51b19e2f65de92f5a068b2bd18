{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: XMOLaunchpad.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract XMOLaunchpad {\r\n  using Counters for Counters.Counter;\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"XMO Launchpad v1\";\r\n\r\n  Counters.Counter public totalExchanges;\r\n  Counters.Counter public totalIDOs;\r\n\r\n  uint256 public totalEtherSwapped;\r\n\r\n  uint256 private maxEtherSend;\r\n  uint256 private _xmoDecimals;\r\n\r\n\r\n  address payable public admin;\r\n  IERC20 public XMOContract;\r\n\r\n  struct Tier {\r\n    string tierName;\r\n    uint256 minXMO;\r\n    uint256 maxEther;\r\n    uint256 percentAllocation;\r\n  }\r\n\r\n  // DOES NOT TAKE TOKEN DECIMALS INTO CONSIDERATION.\r\n\r\n  struct IDO {\r\n    string name;\r\n    uint256 idoID;\r\n    uint256 swapRate;\r\n    uint256 bronzeTokens;\r\n    uint256 silverTokens;\r\n    uint256 goldTokens;\r\n    uint256 vipTokens;\r\n    uint256 totalTokens;\r\n    address payable idoEtherReciever;\r\n    bool active;\r\n  }\r\n\r\n  mapping(uint => Tier) public tier;\r\n  mapping(uint => IDO) public idos;\r\n  mapping(uint8 => mapping(address => uint256)) public investorBalances;\r\n\r\n  event TierUpdated(\r\n    string tierName,\r\n    uint256 minXMO,\r\n    uint256 maxEther,\r\n    uint256 percentAllocation\r\n  );\r\n  event IDOActive(\r\n    uint256 idoID,\r\n    bool active\r\n  );\r\n\r\n  event IDOCreated(\r\n    string name,\r\n    uint256 idoID,\r\n    uint256 swapRate,\r\n    uint256 bronzeTokens,\r\n    uint256 silverTokens,\r\n    uint256 goldTokens,\r\n    uint256 vipTokens,\r\n    uint256 totalTokens,\r\n    address idoEtherReciever,\r\n    bool active\r\n  );\r\n\r\n  event IDOParticipate(\r\n    uint256 idoID,\r\n    uint256 etherSent,\r\n    uint256 tokensRecieved,\r\n    uint256 totalEtherSwapped,\r\n    uint256 totalExchanges,\r\n    address swappingAddress\r\n  );\r\n\r\n  \r\n  constructor() {\r\n    admin = payable(msg.sender);\r\n    _xmoDecimals = 10 ** 18;\r\n\r\n    XMOContract = IERC20(0x60Ac53dCB16441bd7089c63ba61a0eCE97AA6387);\r\n\r\n    tier[0] = Tier(\"bronze\", 200000, 100000000000000000, 1000);\r\n    tier[1] = Tier(\"silver\", 500001, 200000000000000000, 2000);\r\n    tier[2] = Tier(\"gold\", 1000001, 500000000000000000, 3000);\r\n    tier[3] = Tier(\"vip\", 2500001, 1000000000000000000, 4000);\r\n  }\r\n\r\n  modifier onlyAdmin {\r\n    require(msg.sender == admin, \"only admin can do this.\");\r\n    _;\r\n  }\r\n\r\n  function updatXMOContractn(address _xmoContractAddress) public onlyAdmin {\r\n    XMOContract = IERC20(_xmoContractAddress);\r\n  }\r\n\r\n  function updateAdmin(address _newAdmin) public onlyAdmin {\r\n    admin = payable(_newAdmin);\r\n  }\r\n\r\n\r\n  function updateTier(\r\n                      uint _tierNumber,\r\n                      string memory _tierName,\r\n                      uint256 _tierMinXMO,\r\n                      uint256 _tierMaxEther,\r\n                      uint256 _tierPercentAllocation\r\n                      ) public onlyAdmin {\r\n    Tier memory _tier = tier[_tierNumber];\r\n    _tier.tierName = _tierName;\r\n    _tier.minXMO = _tierMinXMO;\r\n    _tier.maxEther = _tierMaxEther;\r\n    _tier.percentAllocation = _tierPercentAllocation;\r\n\r\n    tier[_tierNumber] = _tier;\r\n    emit TierUpdated(_tierName, _tierMinXMO, _tierMaxEther, _tierPercentAllocation);\r\n  }\r\n\r\n  function setIDOActive(uint8 _idoID) public onlyAdmin {\r\n    idos[_idoID].active = !idos[_idoID].active;\r\n    emit IDOActive(_idoID, idos[_idoID].active);\r\n  }\r\n\r\n  function createIDO(string memory _name, uint256 _swapRate, uint256 _tokenAmount, address _idoEtherReciever) public onlyAdmin {\r\n    uint256 _currentIDO = totalIDOs.current();\r\n\r\n    uint256 _bronzeTokens = _tokenAmount.mul(tier[0].percentAllocation).div(10000);\r\n    uint256 _silverTokens = _tokenAmount.mul(tier[1].percentAllocation).div(10000);\r\n    uint256 _goldTokens = _tokenAmount.mul(tier[2].percentAllocation).div(10000);\r\n    uint256 _vipTokens = _tokenAmount.mul(tier[3].percentAllocation).div(10000);\r\n\r\n    idos[_currentIDO] = IDO(_name, _currentIDO, _swapRate, _bronzeTokens, _silverTokens, _goldTokens, _vipTokens, _tokenAmount, payable(_idoEtherReciever), true);\r\n    \r\n    totalIDOs.increment();\r\n\r\n    emit IDOCreated(_name, _currentIDO, _swapRate, _bronzeTokens, _silverTokens, _goldTokens, _vipTokens, _tokenAmount, _idoEtherReciever, true);\r\n  }\r\n\r\n  function participateInIDO(uint8 _idoID) public payable {\r\n    require(idos[_idoID].active, \"womp womp... this IDO is no longer active.\");\r\n    require(msg.value > 0, \"in order to participate, you must send the minimum ether.\");\r\n    require(msg.value >= idos[_idoID].swapRate, \"in order to participate, you must send the minimum of the swaprate.\");\r\n    uint256 xmoBal = XMOContract.balanceOf(msg.sender) / 10 **18;\r\n\r\n\r\n    uint256 value = msg.value;\r\n    uint256 _etherExchangeValue = value;\r\n    uint256 _tokensRecieved = _etherExchangeValue.div(idos[_idoID].swapRate);\r\n\r\n\r\n    if(xmoBal >= tier[3].minXMO) {\r\n      require(_etherExchangeValue <= tier[3].maxEther, \"too much ether sent for your tier.\");\r\n      require(_tokensRecieved <= idos[_idoID].vipTokens, \"not enough tokens left to be exchanged.\");\r\n\r\n      if(investorBalances[_idoID][msg.sender] > 0) {\r\n        uint256 _previousUsedEther = investorBalances[_idoID][msg.sender].mul(idos[_idoID].swapRate);\r\n        uint256 _newCombinedUsedEther = _previousUsedEther + _etherExchangeValue;\r\n        require(_newCombinedUsedEther <= tier[3].maxEther, \"you have purchased the max amount for this round 3.\");\r\n\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].vipTokens -= _tokensRecieved;\r\n      } else {\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].vipTokens -= _tokensRecieved;\r\n      }\r\n\r\n    }\r\n    else if(xmoBal >= tier[2].minXMO) {\r\n      require(_etherExchangeValue <= tier[2].maxEther, \"too much ether sent for your tier.\");\r\n      require(_tokensRecieved <= idos[_idoID].goldTokens, \"not enough tokens left to be exchanged.\");\r\n\r\n      if(investorBalances[_idoID][msg.sender] > 0) {\r\n        uint256 _previousUsedEther = investorBalances[_idoID][msg.sender].mul(idos[_idoID].swapRate);\r\n        uint256 _newCombinedUsedEther = _previousUsedEther + _etherExchangeValue;\r\n        require(_newCombinedUsedEther <= tier[2].maxEther, \"you have purchased the max amount for this round 2.\");\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].goldTokens -= _tokensRecieved;\r\n      } else {\r\n          investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n          idos[_idoID].goldTokens -= _tokensRecieved;\r\n      }\r\n\r\n    }\r\n    else if(xmoBal >= tier[1].minXMO) {\r\n      require(_etherExchangeValue <= tier[1].maxEther, \"too much ether sent for your tier.\");\r\n      require(_tokensRecieved <= idos[_idoID].silverTokens, \"not enough tokens left to be exchanged.\");\r\n\r\n      if(investorBalances[_idoID][msg.sender] > 0) {\r\n        uint256 _previousUsedEther = investorBalances[_idoID][msg.sender].mul(idos[_idoID].swapRate);\r\n        uint256 _newCombinedUsedEther = _previousUsedEther + _etherExchangeValue;\r\n        require(_newCombinedUsedEther <= tier[1].maxEther, \"you have purchased the max amount for this round 1.\");\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].silverTokens -= _tokensRecieved;\r\n      } else {\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].silverTokens -= _tokensRecieved;\r\n      }\r\n\r\n    }\r\n    else if(xmoBal >= tier[0].minXMO) {\r\n      require(_etherExchangeValue <= tier[0].maxEther, \"too much ether sent for your tier.\");\r\n      require(_tokensRecieved <= idos[_idoID].bronzeTokens, \"not enough tokens left to be exchanged.\");\r\n\r\n      if(investorBalances[_idoID][msg.sender] > 0) {\r\n        uint256 _previousUsedEther = investorBalances[_idoID][msg.sender].mul(idos[_idoID].swapRate);\r\n        uint256 _newCombinedUsedEther = _previousUsedEther + _etherExchangeValue;\r\n        require(_newCombinedUsedEther <= tier[0].maxEther, \"you have purchased the max amount for this round 0.\");\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].bronzeTokens -= _tokensRecieved;\r\n      } else {\r\n        investorBalances[_idoID][msg.sender] += _tokensRecieved;\r\n        idos[_idoID].bronzeTokens -= _tokensRecieved;\r\n      }\r\n\r\n    } else if(xmoBal < tier[0].minXMO) {\r\n      revert( \"you do not hold enough XMO.\");\r\n    }\r\n\r\n\r\n    payable(idos[_idoID].idoEtherReciever).transfer(_etherExchangeValue);\r\n\r\n    totalEtherSwapped += value;\r\n\r\n    totalExchanges.increment();\r\n\r\n    emit IDOParticipate(_idoID, value, _tokensRecieved, totalEtherSwapped, totalExchanges.current(), msg.sender);\r\n  }\r\n\r\n  function fetchIDOs() public view returns (IDO[] memory) {\r\n    uint256 _latestIDOID = totalIDOs.current();\r\n    IDO[] memory _result = new IDO[](_latestIDOID);\r\n    for(uint256 i = 0; i < _latestIDOID; i++) {\r\n      uint256 _idoID = i;\r\n      IDO memory _currentIDO = idos[_idoID];\r\n      _result[_idoID] = _currentIDO;\r\n    }\r\n    return _result;\r\n  }\r\n\r\n  function fetchTiers() public view returns (Tier[] memory) {\r\n    uint256 _totalTiers = 4;\r\n    Tier[] memory _result = new Tier[](_totalTiers);\r\n    for(uint256 i = 0; i < _totalTiers; i++) {\r\n      uint256 _tierID = i;\r\n      Tier memory _currentTier = tier[_tierID];\r\n      _result[_tierID] = _currentTier;\r\n    }\r\n    return _result;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idoID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"IDOActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idoID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bronzeTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"silverTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vipTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"idoEtherReciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"IDOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idoID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRecieved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEtherSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalExchanges\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swappingAddress\",\"type\":\"address\"}],\"name\":\"IDOParticipate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tierName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minXMO\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEther\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentAllocation\",\"type\":\"uint256\"}],\"name\":\"TierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XMOContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_idoEtherReciever\",\"type\":\"address\"}],\"name\":\"createIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchIDOs\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"idoID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bronzeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vipTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"idoEtherReciever\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct XMOLaunchpad.IDO[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchTiers\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tierName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minXMO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct XMOLaunchpad.Tier[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"idoID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bronzeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silverTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vipTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"idoEtherReciever\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_idoID\",\"type\":\"uint8\"}],\"name\":\"participateInIDO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_idoID\",\"type\":\"uint8\"}],\"name\":\"setIDOActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tierName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minXMO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEtherSwapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExchanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIDOs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xmoContractAddress\",\"type\":\"address\"}],\"name\":\"updatXMOContractn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tierName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tierMinXMO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierMaxEther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierPercentAllocation\",\"type\":\"uint256\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XMOLaunchpad", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9af56818c42a93b66e61739cad91e9833b70123ac1cd30e35c3cca2182e78439"}]}