{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n/// @title Connect Four\r\n/// @author Miguel Piedrafita\r\n/// @notice An optimised connect four game implementation on Solidity\r\ncontract ConnectFour {\r\n\t/// ERRORS ///\r\n\r\n\t/// @notice Thrown when trying to make an invalid move\r\n\terror InvalidMove();\r\n\r\n\t/// @notice Thrown when trying to make a move during someone else's turn\r\n\terror Unauthorized();\r\n\r\n\t/// @notice Thrown when trying to make a move after the game has ended\r\n\terror GameFinished();\r\n\r\n\t/// EVENTS ///\r\n\r\n\t/// @notice Emited when a new game is created\r\n\t/// @param challenger The address that created the game\r\n\t/// @param challenged The address proposed as a rival, and that should make the first move\r\n\tevent GameProposed(address indexed challenger, address indexed challenged);\r\n\r\n\t/// @notice Emitted when a move is made\r\n\t/// @param mover The address that performed the move\r\n\t/// @param gameId The ID of the game in play\r\n\t/// @param row The row the user dropped its piece in\r\n\tevent MovePerformed(address indexed mover, uint256 gameId, uint8 row);\r\n\r\n\t/// @notice Emitted when a game is won\r\n\t/// @param winner The address that won the game\r\n\t/// @param gameId The ID of the game that was won\r\n\tevent GameWon(address indexed winner, uint256 gameId);\r\n\r\n\t/// @dev Parameters for games\r\n\t/// @param player1 The address of the first player\r\n\t/// @param player2 The address of the second player\r\n\t/// @param height A helper, used to track which position to assign to pieces for each row\r\n\t/// @param board Two bitboards (one for each player), each representing a 7x6 board with an extra column at the top to check for invalid moves.\r\n\t/// @param moves A counter of the amount of moves so far\r\n\t/// @param finished Wether the game has been won\r\n\tstruct Game {\r\n\t\taddress player1;\r\n\t\taddress player2;\r\n\t\tuint64[7] height;\r\n\t\tuint64[2] board;\r\n\t\tuint8 moves;\r\n\t\tbool finished;\r\n\t}\r\n\r\n\t/// @notice The initial value of `Game.height`, representing the indexes of the bottom column of the 7x6(+1) board\r\n\t/// @dev Solidity doesn't support array immutable variables or constants yet, so we're forced to compute this at runtime (see constructor).\r\n\tuint64[7] internal initialHeight;\r\n\r\n\t/// @notice The indexes of the helper top column of the 7x6(+1) board\r\n\tuint64 internal constant topColumn = 283691315109952;\r\n\r\n\t/// @notice Used as a counter for the next game index.\r\n\t/// @dev Initialised at 1 because it makes the first transaction slightly cheaper.\r\n\tuint256 internal gameId = 1;\r\n\r\n\t/// @notice An indexed list of games\r\n\t/// @dev This automatically generates a getter for us, which will return `Game.player1`, `Game.player2`, `Game.moves`, and `Game.finished` (the arrays are skipped)\r\n\tmapping(uint256 => Game) public getGame;\r\n\r\n\t/// @notice Deploys a ConnectFour instance\r\n\t/// @dev Used to compute the value of `initialHeight`, since we cannot make it a constant (or immutable).\r\n\tconstructor() payable {\r\n\t\tunchecked {\r\n\t\t\tfor (uint8 i = 0; i < 7; i++) {\r\n\t\t\t\tinitialHeight[i] = uint64(7 * i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Challenge another address to a game of connect four\r\n\t/// @param opponent The address you want to play against\r\n\t/// @return The ID of the newly-created game\r\n\tfunction challenge(address opponent) public payable returns (uint256) {\r\n\t\tGame memory game = Game({\r\n\t\t\tplayer1: opponent,\r\n\t\t\tplayer2: msg.sender,\r\n\t\t\theight: initialHeight,\r\n\t\t\tboard: [uint64(0), uint64(0)],\r\n\t\t\tmoves: 0,\r\n\t\t\tfinished: false\r\n\t\t});\r\n\r\n\t\temit GameProposed(msg.sender, opponent);\r\n\r\n\t\tgetGame[gameId] = game;\r\n\r\n\t\treturn gameId++;\r\n\t}\r\n\r\n\t/// @notice Perform a move on an active game\r\n\t/// @param gameId The ID of the game you want to perform your move on\r\n\t/// @param row The row on where you want to drop your piece\r\n\tfunction makeMove(uint256 gameId, uint8 row) public payable {\r\n\t\tGame storage game = getGame[gameId];\r\n\t\tif (msg.sender != (game.moves & 1 == 0 ? game.player1 : game.player2)) revert Unauthorized();\r\n\t\tif (game.finished) revert GameFinished();\r\n\r\n\t\temit MovePerformed(msg.sender, gameId, row);\r\n\r\n\t\tgame.board[game.moves & 1] ^= uint64(1) << game.height[row]++;\r\n\r\n\t\tif ((game.board[game.moves & 1] & topColumn) != 0) revert InvalidMove();\r\n\r\n\t\tif (didPlayerWin(gameId, game.moves++ & 1)) {\r\n\t\t\tgame.finished = true;\r\n\t\t\temit GameWon(msg.sender, gameId);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Check wether one of the players for a certain game has won the match\r\n\t/// @param gameId The ID for the game you want to perform the check on\r\n\t/// @param side Which side of the board you want to check (0 or 1).\r\n\tfunction didPlayerWin(uint256 gameId, uint8 side) public view returns (bool) {\r\n\t\tuint64 board = getGame[gameId].board[side];\r\n\t\tuint8[4] memory directions = [1, 7, 6, 8];\r\n\r\n\t\tuint64 bb;\r\n\r\n\t\tunchecked {\r\n\t\t\tfor (uint8 i = 0; i < 4; i++) {\r\n\t\t\t\tbb = board & (board >> directions[i]);\r\n\t\t\t\tif ((bb & (bb >> (2 * directions[i]))) != 0) return true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction getBoards(uint256 gameId) public view returns (uint64, uint64) {\r\n\t\tuint64[2] memory boards = getGame[gameId].board;\r\n\r\n\t\treturn (boards[0], boards[1]);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GameFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenged\",\"type\":\"address\"}],\"name\":\"GameProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"MovePerformed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"}],\"name\":\"challenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"didPlayerWin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getBoards\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"moves\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"row\",\"type\":\"uint8\"}],\"name\":\"makeMove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ConnectFour", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c52702ebcdbb546ef6d3c7e25082a6e937af43616196a79866ac74d7dd943e17"}]}