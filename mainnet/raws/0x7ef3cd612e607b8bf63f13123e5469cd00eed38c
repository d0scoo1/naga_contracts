{"status": "1", "message": "OK", "result": [{"SourceCode": "// https://opensea.io/collection/loot-familiars\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * Minimal ERC-721 interface Familiars implement\r\n */\r\ninterface ERC721Interface {\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\n/**\r\n * Minimal ERC-20 interface Familiars implement\r\n */\r\ninterface ERC20Interface {\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title Familiars (For Adventurers) contract. All revenue from Familiars will\r\n * be used to purchase floor Loots, which will then be fractionalized to Familiars\r\n * owners.\r\n */\r\ncontract FlootClaim is Ownable {\r\n    // Amount of FLOOT each familiar can claim\r\n    uint256 constant public FLOOT_PER_FAMILIAR = 10000 * 10**18; // 10k FLOOT per familiar\r\n\r\n    // Familiar contracts\r\n    ERC721Interface immutable v1FamiliarContract; // V1 familiars\r\n    ERC721Interface immutable familiarContract;   // Real familiars\r\n    address public immutable FAMILIAR_ADDRESS;\r\n\r\n    // FLOOT contract\r\n    ERC20Interface immutable flootContract;\r\n    address public immutable FLOOT_ADDRESS;\r\n\r\n    // When FLOOTs will be withdrawable by owner\r\n    // This is to ensure that FLOOTs aren't forever locked in this contract,\r\n    // which could prevent buyouts on Fractional art, but could also prevent\r\n    // all ETH from being distributed to FLOOT owners in case of a buyout.\r\n    uint256 public immutable UNLOCK_TIME;\r\n\r\n    // Tracks which familiar has claimed their FLOOT\r\n    mapping (uint256 => bool) public claimed;\r\n    mapping (uint256 => bool) public allowedV1;\r\n \r\n    // Store contract addresses and register unlock time to be in 1 year\r\n    constructor(address _v1FamiliarAddress, address _familiarAddress,  address _flootAddress) {\r\n      // Familiar contracts\r\n      v1FamiliarContract = ERC721Interface(_v1FamiliarAddress);\r\n      familiarContract = ERC721Interface(_familiarAddress);\r\n      FAMILIAR_ADDRESS = _familiarAddress;\r\n\r\n      // Floot contract\r\n      flootContract = ERC20Interface(_flootAddress);\r\n      FLOOT_ADDRESS = _flootAddress;\r\n\r\n      // Owner can withdraw remaining FLOOTs 1 year after contract creation\r\n      UNLOCK_TIME = block.timestamp + 365 days;\r\n    }\r\n\r\n    // Sets a V2 familiar minted from V1 as being eligible\r\n    function enableV1Claim(uint256[] calldata _ids) external onlyOwner {\r\n      for (uint256 i = 0; i < _ids.length; i++) {\r\n        allowedV1[_ids[i]] = true;\r\n      }\r\n    }\r\n\r\n    // Sets a V2 familiar from V1 as NOT eligible\r\n    function disableV1Claim(uint256[] calldata _ids) external onlyOwner {\r\n      for (uint256 i = 0; i < _ids.length; i++) {\r\n        allowedV1[_ids[i]] = false;\r\n      }\r\n    }\r\n\r\n    // Sends FLOOT to owner of _id, if FLOOT hasn't been claimed yet\r\n    function claim(uint256 _id) external {\r\n      _claim(_id);\r\n    }\r\n    \r\n    // Sends FLOOT to respective owner of all familiars in _ids, if FLOOT hasn't been claimed yet\r\n    function multiClaim(uint256[] memory _ids) external {\r\n      for (uint256 i = 0; i < _ids.length; i++) {\r\n        _claim(_ids[i]);\r\n      }\r\n    }\r\n  \r\n    function _claim(uint256 _id) private {\r\n      require(isClaimable(_id), \"Familiar cannot claim FLOOT\");\r\n\r\n      // Transfer floot to familiar owner\r\n      address familiarOwner = familiarContract.ownerOf(_id);\r\n      (bool success, bytes memory data) = address(flootContract).call(abi.encodeWithSelector(0xa9059cbb, familiarOwner, FLOOT_PER_FAMILIAR));\r\n      require(success && (data.length == 0 || abi.decode(data, (bool))), 'Floot transfer failed');\r\n      claimed[_id] = true;\r\n    }\r\n\r\n    // Check if you can claim a given familiar\r\n    function isClaimable(uint256 _id) public view returns (bool claimable) {\r\n      return !claimed[_id] && isAllowed(_id);\r\n    }\r\n\r\n    // Check if a familiar is not eligible for claiming FLOOT\r\n    function isAllowed(uint256 _id) public view returns (bool allowed) {\r\n      // ID must be within valid range\r\n      if (_id == 0 || _id > 8000) { return false; }\r\n\r\n      // Verify whether the V1 familiar exists for this ID\r\n      try v1FamiliarContract.ownerOf(_id) {\r\n        if (!allowedV1[_id]) {\r\n          // V1 exists but is not allowed\r\n          return false;\r\n        }\r\n        // V1 exists and is allowed\r\n        return true;\r\n\r\n      } catch {\r\n        // V1 familiar does not exist, so familiar must be allowed\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Allow owner of this contract to withdraw FLOOT 1 year after deployment\r\n    // This is to ensure that FLOOTs aren't forever locked in this contract,\r\n    // which could prevent buyouts on Fractional art, but could also prevent\r\n    // all ETH from being distributed to FLOOT owners in case of a buyout.\r\n    function withdrawFloot() external onlyOwner {\r\n      require(block.timestamp >= UNLOCK_TIME, \"Cannot withdraw FLOOT yet\");\r\n      uint256 balance = flootContract.balanceOf(address(this));\r\n      flootContract.transfer(owner(), balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v1FamiliarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_familiarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flootAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FAMILIAR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLOOT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLOOT_PER_FAMILIAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedV1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"disableV1Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"enableV1Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"multiClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFloot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlootClaim", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006686461fd93399af5d08a9590f4fa87d734afb43000000000000000000000000b9a9f29c037d09d284e6e218519c7bb67fbd2ef8000000000000000000000000e01a25f277c069a352601926eecc1edd9c5febcb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83f2b00be07f2e7fe4d4bf1e3cacc232d6620ea8c07b519997aa8e6b58e20b07"}]}