{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RescueToadzNounsExecutor.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: MIT */\\n\\n/**\\n *   @title Rescue Toadz Nouns Executor\\n *   @author Vladimir Haltakov (@haltakov)\\n *   @notice A special contract to be used by Nouns DAO to capture Rescue Toadz\\n *   @notice The Nouns DAO contract used to execute accepted proposals cannot receive ERC-1155 tokens so it cannot be used to capture Rescue Toadz to donate to Ukraine.\\n *   @notice This is a specialized contract that will call the capture function on the Rescue Toadz contract and hold the received ERC-1155 tokens.\\n *   @notice The contract implements a withdrawal function that allows Nouns DAO to later transfer the tokens to an arbitrary wallet\\n */\\n\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Interface of the Rescue Toadz contract\\n */\\ninterface RescueToadz {\\n    function lastPrice(uint256 tokenId) external view returns (uint256);\\n\\n    function capture(uint256 tokenId) external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\\ncontract RescueToadzNounsExecutor {\\n    // Address of the Rescue Toadz contract\\n    address internal constant RESCUE_TOADZ_CONTRACT =\\n        0x57605D3A2C7726e9A7801307AF0C893bA5199F66;\\n\\n    // Address of the Nouns DAO contract that is allowed to withdraw ERC-1155 tokens\\n    address internal constant NOUNS_DAO =\\n        0x0BC3807Ec262cB779b38D65b38158acC3bfedE10;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Call the capture function of the Rescue Toad contract passing all the funds\\n     * @notice If the Rescue Toad specified by the token ID is already captures, this function will not fail, but do nothing instead\\n     * @param tokenId The id of the Rescue Toadz to capture\\n     */\\n    function captureRescueToad(uint256 tokenId) external payable {\\n        // Get the last price of the specified Rescue Toad\\n        uint256 lastTokenPrice = RescueToadz(RESCUE_TOADZ_CONTRACT).lastPrice(\\n            tokenId\\n        );\\n\\n        // Capture the Rescue Toad only if the last price is <= the amount of the transaction\\n        if (lastTokenPrice <= msg.value) {\\n            RescueToadz(RESCUE_TOADZ_CONTRACT).capture{value: msg.value}(\\n                tokenId\\n            );\\n        } else {\\n            // If the toad will not be captured, return the funds to the sender\\n            (bool sent, ) = payable(msg.sender).call{value: msg.value}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw a Rescue Toad ERC-1155 token to another wallet\\n     * @notice Only allowed for the Nouns DAO wallet\\n     * @param tokenId The id of the Rescue Toad to transfer\\n     * @param to Address where the Rescue Toad will be transferred\\n     */\\n    function withdrawRescueToad(uint256 tokenId, address to) external {\\n        require(msg.sender == NOUNS_DAO, \\\"Only Nouns DAO can withdraw\\\");\\n\\n        RescueToadz(RESCUE_TOADZ_CONTRACT).safeTransferFrom(\\n            address(this),\\n            to,\\n            tokenId,\\n            1,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Needed so that the contract can receive ERC-1155 tokens\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external view returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"captureRescueToad\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawRescueToad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RescueToadzNounsExecutor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}