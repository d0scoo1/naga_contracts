{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"externalRegistry/ERC1820Registry.sol\": {\r\n      \"content\": \"\\n/* ERC1820 Pseudo-introspection Registry Contract\\n * This standard defines a universal registry smart contract where any address (contract or regular account) can\\n * register which interface it supports and which smart contract is responsible for its implementation.\\n *\\n * Written in 2019 by Jordi Baylina and Jacques Dafflon\\n *\\n * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to\\n * this software to the public domain worldwide. This software is distributed without any warranty.\\n *\\n * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see\\n * <http://creativecommons.org/publicdomain/zero/1.0/>.\\n *\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\\n *    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u255a\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\\n *    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551      \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\n *\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d\\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d\\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\n *    \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d\\n *\\n */\\npragma solidity 0.5.3;\\n// IV is value needed to have a vanity address starting with '0x1820'.\\n// IV: 53759\\n\\n/// @dev The interface a contract MUST implement if it is the implementer of\\n/// some (other) interface for any address other than itself.\\ninterface ERC1820ImplementerInterface {\\n    /// @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\\n    /// @param interfaceHash keccak256 hash of the name of the interface\\n    /// @param addr Address for which the contract will implement the interface\\n    /// @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\\n}\\n\\n\\n/// @title ERC1820 Pseudo-introspection Registry Contract\\n/// @author Jordi Baylina and Jacques Dafflon\\n/// @notice This contract is the official implementation of the ERC1820 Registry.\\n/// @notice For more details, see https://eips.ethereum.org/EIPS/eip-1820\\ncontract ERC1820Registry {\\n    /// @notice ERC165 Invalid ID.\\n    bytes4 constant internal INVALID_ID = 0xffffffff;\\n    /// @notice Method ID for the ERC165 supportsInterface method (= `bytes4(keccak256('supportsInterface(bytes4)'))`).\\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\\n    /// @notice Magic value which is returned if a contract implements an interface on behalf of some other address.\\n    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    /// @notice mapping from addresses and interface hashes to their implementers.\\n    mapping(address => mapping(bytes32 => address)) internal interfaces;\\n    /// @notice mapping from addresses to their manager.\\n    mapping(address => address) internal managers;\\n    /// @notice flag for each address and erc165 interface to indicate if it is cached.\\n    mapping(address => mapping(bytes4 => bool)) internal erc165Cached;\\n\\n    /// @notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\\n    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\\n    /// @notice Indicates 'newManager' is the address of the new manager for 'addr'.\\n    event ManagerChanged(address indexed addr, address indexed newManager);\\n\\n    /// @notice Query if an address implements an interface and through which contract.\\n    /// @param _addr Address being queried for the implementer of an interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\\n    /// or '0' if '_addr' did not register an implementer for this interface.\\n    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view returns (address) {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        if (isERC165Interface(_interfaceHash)) {\\n            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\\n            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : address(0);\\n        }\\n        return interfaces[addr][_interfaceHash];\\n    }\\n\\n    /// @notice Sets the contract which implements a specific interface for an address.\\n    /// Only the manager defined for that address can set it.\\n    /// (Each address is the manager for itself until it sets a new manager.)\\n    /// @param _addr Address for which to set the interface.\\n    /// (If '_addr' is the zero address then 'msg.sender' is assumed.)\\n    /// @param _interfaceHash Keccak256 hash of the name of the interface as a string.\\n    /// E.g., 'web3.utils.keccak256(\\\"ERC777TokensRecipient\\\")' for the 'ERC777TokensRecipient' interface.\\n    /// @param _implementer Contract address implementing '_interfaceHash' for '_addr'.\\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external {\\n        address addr = _addr == address(0) ? msg.sender : _addr;\\n        require(getManager(addr) == msg.sender, \\\"Not the manager\\\");\\n\\n        require(!isERC165Interface(_interfaceHash), \\\"Must not be an ERC165 hash\\\");\\n        if (_implementer != address(0) && _implementer != msg.sender) {\\n            require(\\n                ERC1820ImplementerInterface(_implementer)\\n                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC1820_ACCEPT_MAGIC,\\n                \\\"Does not implement the interface\\\"\\n            );\\n        }\\n        interfaces[addr][_interfaceHash] = _implementer;\\n        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\\n    }\\n\\n    /// @notice Sets '_newManager' as manager for '_addr'.\\n    /// The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\\n    /// @param _addr Address for which to set the new manager.\\n    /// @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\\n    function setManager(address _addr, address _newManager) external {\\n        require(getManager(_addr) == msg.sender, \\\"Not the manager\\\");\\n        managers[_addr] = _newManager == _addr ? address(0) : _newManager;\\n        emit ManagerChanged(_addr, _newManager);\\n    }\\n\\n    /// @notice Get the manager of an address.\\n    /// @param _addr Address for which to return the manager.\\n    /// @return Address of the manager for a given address.\\n    function getManager(address _addr) public view returns(address) {\\n        // By default the manager of an address is the same address\\n        if (managers[_addr] == address(0)) {\\n            return _addr;\\n        } else {\\n            return managers[_addr];\\n        }\\n    }\\n\\n    /// @notice Compute the keccak256 hash of an interface given its name.\\n    /// @param _interfaceName Name of the interface.\\n    /// @return The keccak256 hash of an interface name.\\n    function interfaceHash(string calldata _interfaceName) external pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(_interfaceName));\\n    }\\n\\n    /* --- ERC165 Related Functions --- */\\n    /* --- Developed in collaboration with William Entriken. --- */\\n\\n    /// @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n    /// @param _contract Address of the contract for which to update the cache.\\n    /// @param _interfaceId ERC165 interface for which to update the cache.\\n    function updateERC165Cache(address _contract, bytes4 _interfaceId) external {\\n        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(\\n            _contract, _interfaceId) ? _contract : address(0);\\n        erc165Cached[_contract][_interfaceId] = true;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not.\\n    //  If the result is not cached a direct lookup on the contract address is performed.\\n    //  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n    //  'updateERC165Cache' with the contract address.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        if (!erc165Cached[_contract][_interfaceId]) {\\n            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\\n        }\\n        return interfaces[_contract][_interfaceId] == _contract;\\n    }\\n\\n    /// @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n    /// @param _contract Address of the contract to check.\\n    /// @param _interfaceId ERC165 interface to check.\\n    /// @return True if '_contract' implements '_interfaceId', false otherwise.\\n    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view returns (bool) {\\n        uint256 success;\\n        uint256 result;\\n\\n        (success, result) = noThrowCall(_contract, ERC165ID);\\n        if (success == 0 || result == 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, INVALID_ID);\\n        if (success == 0 || result != 0) {\\n            return false;\\n        }\\n\\n        (success, result) = noThrowCall(_contract, _interfaceId);\\n        if (success == 1 && result == 1) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\\n    /// @param _interfaceHash The hash to check.\\n    /// @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise.\\n    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\\n        return _interfaceHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\\n    }\\n\\n    /// @dev Make a call on a contract without throwing if the function does not exist.\\n    function noThrowCall(address _contract, bytes4 _interfaceId)\\n        internal view returns (uint256 success, uint256 result)\\n    {\\n        bytes4 erc165ID = ERC165ID;\\n\\n        assembly {\\n            let x := mload(0x40)               // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, erc165ID)                // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\\n\\n            success := staticcall(\\n                30000,                         // 30k gas\\n                _contract,                     // To addr\\n                x,                             // Inputs are stored at location x\\n                0x24,                          // Inputs are 36 (4 + 32) bytes long\\n                x,                             // Store output over input (saves space)\\n                0x20                           // Outputs are 32 bytes long\\n            )\\n\\n            result := mload(x)                 // Load the result\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_interfaceHash\",\"type\":\"bytes32\"},{\"name\":\"_implementer\",\"type\":\"address\"}],\"name\":\"setInterfaceImplementer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceName\",\"type\":\"string\"}],\"name\":\"interfaceHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"updateERC165Cache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_interfaceHash\",\"type\":\"bytes32\"}],\"name\":\"getInterfaceImplementer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165InterfaceNoCache\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165Interface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceImplementerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]", "ContractName": "ERC1820Registry", "CompilerVersion": "v0.5.3+commit.10d17f24", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}