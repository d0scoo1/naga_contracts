{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/CollateralAuctionHouse.sol\n\npragma solidity =0.6.7;\n\n////// /nix/store/fs14a1fn2n0n355szi63iq33n5yzygnk-geb/dapp/geb/src/CollateralAuctionHouse.sol\n/// EnglishCollateralAuctionHouse.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\nabstract contract SAFEEngineLike_5 {\n    function transferInternalCoins(address,address,uint256) virtual external;\n    function transferCollateral(bytes32,address,address,uint256) virtual external;\n}\nabstract contract OracleRelayerLike_1 {\n    function redemptionPrice() virtual public returns (uint256);\n}\nabstract contract OracleLike_1 {\n    function priceSource() virtual public view returns (address);\n    function getResultWithValidity() virtual public view returns (uint256, bool);\n}\nabstract contract LiquidationEngineLike_1 {\n    function removeCoinsFromAuction(uint256) virtual public;\n}\n\n/*\n   This thing lets you (English) auction some collateral for a given amount of system coins\n*/\n\ncontract EnglishCollateralAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"EnglishCollateralAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // Bid size (how many coins are offered per collateral sold)\n        uint256 bidAmount;                                                                                            // [rad]\n        // How much collateral is sold in an auction\n        uint256 amountToSell;                                                                                         // [wad]\n        // Who the high bidder is\n        address highBidder;\n        // When the latest bid expires and the auction can be settled\n        uint48  bidExpiry;                                                                                            // [unix epoch time]\n        // Hard deadline for the auction after which no more bids can be placed\n        uint48  auctionDeadline;                                                                                      // [unix epoch time]\n        // Who (which SAFE) receives leftover collateral that is not sold in the auction; usually the liquidated SAFE\n        address forgoneCollateralReceiver;\n        // Who receives the coins raised from the auction; usually the accounting engine\n        address auctionIncomeRecipient;\n        // Total/max amount of coins to raise\n        uint256 amountToRaise;                                                                                        // [rad]\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_5 public safeEngine;\n    // Collateral type name\n    bytes32       public collateralType;\n\n    uint256  constant ONE = 1.00E18;                                                                                  // [wad]\n    // Minimum bid increase compared to the last bid in order to take the new one in consideration\n    uint256  public   bidIncrease = 1.05E18;                                                                          // [wad]\n    // How long the auction lasts after a new bid is submitted\n    uint48   public   bidDuration = 3 hours;                                                                          // [seconds]\n    // Total length of the auction\n    uint48   public   totalAuctionLength = 2 days;                                                                    // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n\n    LiquidationEngineLike_1 public liquidationEngine;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"COLLATERAL\");\n    bytes32 public constant AUCTION_TYPE       = bytes32(\"ENGLISH\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event StartAuction(\n        uint256 id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 indexed amountToRaise,\n        address indexed forgoneCollateralReceiver,\n        address indexed auctionIncomeRecipient,\n        uint256 auctionDeadline\n    );\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event ModifyParameters(bytes32 parameter, address data);\n    event RestartAuction(uint256 indexed id, uint256 auctionDeadline);\n    event IncreaseBidSize(uint256 indexed id, address highBidder, uint256 amountToBuy, uint256 rad, uint256 bidExpiry);\n    event DecreaseSoldAmount(uint256 indexed id, address highBidder, uint256 amountToBuy, uint256 rad, uint256 bidExpiry);\n    event SettleAuction(uint256 indexed id);\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, uint256 bidAmount, uint256 collateralAmount);\n\n    // --- Init ---\n    constructor(address safeEngine_, address liquidationEngine_, bytes32 collateralType_) public {\n        safeEngine = SAFEEngineLike_5(safeEngine_);\n        liquidationEngine = LiquidationEngineLike_1(liquidationEngine_);\n        collateralType = collateralType_;\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"EnglishCollateralAuctionHouse/add-uint48-overflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"EnglishCollateralAuctionHouse/mul-overflow\");\n    }\n    uint256 constant WAD = 10 ** 18;\n    function wmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = multiply(x, y) / WAD;\n    }\n    uint256 constant RAY = 10 ** 27;\n    function rdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"EnglishCollateralAuctionHouse/division-by-zero\");\n        z = multiply(x, RAY) / y;\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify an uint256 parameter\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"bidIncrease\") bidIncrease = data;\n        else if (parameter == \"bidDuration\") bidDuration = uint48(data);\n        else if (parameter == \"totalAuctionLength\") totalAuctionLength = uint48(data);\n        else revert(\"EnglishCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify an address parameter\n     * @param parameter The name of the contract whose address we modify\n     * @param data New contract address\n     */\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        if (parameter == \"liquidationEngine\") liquidationEngine = LiquidationEngineLike_1(data);\n        else revert(\"EnglishCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Auction ---\n    /**\n     * @notice Start a new collateral auction\n     * @param forgoneCollateralReceiver Address that receives leftover collateral that is not auctioned\n     * @param auctionIncomeRecipient Address that receives the amount of system coins raised by the auction\n     * @param amountToRaise Total amount of coins to raise (rad)\n     * @param amountToSell Total amount of collateral available to sell (wad)\n     * @param initialBid Initial bid size (usually zero in this implementation) (rad)\n     */\n    function startAuction(\n        address forgoneCollateralReceiver,\n        address auctionIncomeRecipient,\n        uint256 amountToRaise,\n        uint256 amountToSell,\n        uint256 initialBid\n    ) public isAuthorized returns (uint256 id)\n    {\n        require(auctionsStarted < uint256(-1), \"EnglishCollateralAuctionHouse/overflow\");\n        require(amountToSell > 0, \"EnglishCollateralAuctionHouse/null-amount-sold\");\n        id = ++auctionsStarted;\n\n        bids[id].bidAmount = initialBid;\n        bids[id].amountToSell = amountToSell;\n        bids[id].highBidder = msg.sender;\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n        bids[id].forgoneCollateralReceiver = forgoneCollateralReceiver;\n        bids[id].auctionIncomeRecipient = auctionIncomeRecipient;\n        bids[id].amountToRaise = amountToRaise;\n\n        safeEngine.transferCollateral(collateralType, msg.sender, address(this), amountToSell);\n\n        emit StartAuction(\n          id,\n          auctionsStarted,\n          amountToSell,\n          initialBid,\n          amountToRaise,\n          forgoneCollateralReceiver,\n          auctionIncomeRecipient,\n          bids[id].auctionDeadline\n        );\n    }\n    /**\n     * @notice Restart an auction if no bids were submitted for it\n     * @param id ID of the auction to restart\n     */\n    function restartAuction(uint256 id) external {\n        require(bids[id].auctionDeadline < now, \"EnglishCollateralAuctionHouse/not-finished\");\n        require(bids[id].bidExpiry == 0, \"EnglishCollateralAuctionHouse/bid-already-placed\");\n        bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);\n        emit RestartAuction(id, bids[id].auctionDeadline);\n    }\n    /**\n     * @notice First auction phase: submit a higher bid for the same amount of collateral\n     * @param id ID of the auction you want to submit the bid for\n     * @param amountToBuy Amount of collateral to buy (wad)\n     * @param rad New bid submitted (rad)\n     */\n    function increaseBidSize(uint256 id, uint256 amountToBuy, uint256 rad) external {\n        require(bids[id].highBidder != address(0), \"EnglishCollateralAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"EnglishCollateralAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"EnglishCollateralAuctionHouse/auction-already-expired\");\n\n        require(amountToBuy == bids[id].amountToSell, \"EnglishCollateralAuctionHouse/amounts-not-matching\");\n        require(rad <= bids[id].amountToRaise, \"EnglishCollateralAuctionHouse/higher-than-amount-to-raise\");\n        require(rad >  bids[id].bidAmount, \"EnglishCollateralAuctionHouse/new-bid-not-higher\");\n        require(multiply(rad, ONE) >= multiply(bidIncrease, bids[id].bidAmount) || rad == bids[id].amountToRaise, \"EnglishCollateralAuctionHouse/insufficient-increase\");\n\n        if (msg.sender != bids[id].highBidder) {\n            safeEngine.transferInternalCoins(msg.sender, bids[id].highBidder, bids[id].bidAmount);\n            bids[id].highBidder = msg.sender;\n        }\n        safeEngine.transferInternalCoins(msg.sender, bids[id].auctionIncomeRecipient, rad - bids[id].bidAmount);\n\n        bids[id].bidAmount = rad;\n        bids[id].bidExpiry = addUint48(uint48(now), bidDuration);\n\n        emit IncreaseBidSize(id, msg.sender, amountToBuy, rad, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Second auction phase: decrease the collateral amount you're willing to receive in\n     *         exchange for providing the same amount of coins as the winning bid\n     * @param id ID of the auction for which you want to submit a new amount of collateral to buy\n     * @param amountToBuy Amount of collateral to buy (must be smaller than the previous proposed amount) (wad)\n     * @param rad New bid submitted; must be equal to the winning bid from the increaseBidSize phase (rad)\n     */\n    function decreaseSoldAmount(uint256 id, uint256 amountToBuy, uint256 rad) external {\n        require(bids[id].highBidder != address(0), \"EnglishCollateralAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidExpiry > now || bids[id].bidExpiry == 0, \"EnglishCollateralAuctionHouse/bid-already-expired\");\n        require(bids[id].auctionDeadline > now, \"EnglishCollateralAuctionHouse/auction-already-expired\");\n\n        require(rad == bids[id].bidAmount, \"EnglishCollateralAuctionHouse/not-matching-bid\");\n        require(rad == bids[id].amountToRaise, \"EnglishCollateralAuctionHouse/bid-increase-not-finished\");\n        require(amountToBuy < bids[id].amountToSell, \"EnglishCollateralAuctionHouse/amount-bought-not-lower\");\n        require(multiply(bidIncrease, amountToBuy) <= multiply(bids[id].amountToSell, ONE), \"EnglishCollateralAuctionHouse/insufficient-decrease\");\n\n        if (msg.sender != bids[id].highBidder) {\n            safeEngine.transferInternalCoins(msg.sender, bids[id].highBidder, rad);\n            bids[id].highBidder = msg.sender;\n        }\n        safeEngine.transferCollateral(\n          collateralType,\n          address(this),\n          bids[id].forgoneCollateralReceiver,\n          bids[id].amountToSell - amountToBuy\n        );\n\n        bids[id].amountToSell = amountToBuy;\n        bids[id].bidExpiry    = addUint48(uint48(now), bidDuration);\n\n        emit DecreaseSoldAmount(id, msg.sender, amountToBuy, rad, bids[id].bidExpiry);\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        require(bids[id].bidExpiry != 0 && (bids[id].bidExpiry < now || bids[id].auctionDeadline < now), \"EnglishCollateralAuctionHouse/not-finished\");\n        safeEngine.transferCollateral(collateralType, address(this), bids[id].highBidder, bids[id].amountToSell);\n        liquidationEngine.removeCoinsFromAuction(bids[id].amountToRaise);\n        delete bids[id];\n        emit SettleAuction(id);\n    }\n    /**\n     * @notice Terminate an auction prematurely (if it's still in the first phase).\n     *         Usually called by Global Settlement.\n     * @param id ID of the auction to settle\n     */\n    function terminateAuctionPrematurely(uint256 id) external isAuthorized {\n        require(bids[id].highBidder != address(0), \"EnglishCollateralAuctionHouse/high-bidder-not-set\");\n        require(bids[id].bidAmount < bids[id].amountToRaise, \"EnglishCollateralAuctionHouse/already-decreasing-sold-amount\");\n        liquidationEngine.removeCoinsFromAuction(bids[id].amountToRaise);\n        safeEngine.transferCollateral(collateralType, address(this), msg.sender, bids[id].amountToSell);\n        safeEngine.transferInternalCoins(msg.sender, bids[id].highBidder, bids[id].bidAmount);\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].bidAmount, bids[id].amountToSell);\n        delete bids[id];\n    }\n\n    // --- Getters ---\n    function bidAmount(uint256 id) public view returns (uint256) {\n        return bids[id].bidAmount;\n    }\n    function remainingAmountToSell(uint256 id) public view returns (uint256) {\n        return bids[id].amountToSell;\n    }\n    function forgoneCollateralReceiver(uint256 id) public view returns (address) {\n        return bids[id].forgoneCollateralReceiver;\n    }\n    function raisedAmount(uint256 id) public view returns (uint256) {\n        return 0;\n    }\n    function amountToRaise(uint256 id) public view returns (uint256) {\n        return bids[id].amountToRaise;\n    }\n}\n\n/// FixedDiscountCollateralAuctionHouse.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>, 2020 Reflexer Labs, INC\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/*\n   This thing lets you sell some collateral at a fixed discount in order to instantly recapitalize the system\n*/\n\ncontract FixedDiscountCollateralAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"FixedDiscountCollateralAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // System coins raised up until now\n        uint256 raisedAmount;                                                                                         // [rad]\n        // Amount of collateral that has been sold up until now\n        uint256 soldAmount;                                                                                           // [wad]\n        // How much collateral is sold in an auction\n        uint256 amountToSell;                                                                                         // [wad]\n        // Total/max amount of coins to raise\n        uint256 amountToRaise;                                                                                        // [rad]\n        // Duration of time after which the auction can be settled\n        uint48  auctionDeadline;                                                                                      // [unix epoch time]\n        // Who (which SAFE) receives leftover collateral that is not sold in the auction; usually the liquidated SAFE\n        address forgoneCollateralReceiver;\n        // Who receives the coins raised by the auction; usually the accounting engine\n        address auctionIncomeRecipient;\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_5 public safeEngine;\n    // Collateral type name\n    bytes32       public collateralType;\n\n    // Minimum acceptable bid\n    uint256  public   minimumBid = 5 * WAD;                                                                           // [wad]\n    // Total length of the auction. Kept to adhere to the same interface as the English auction but redundant\n    uint48   public   totalAuctionLength = uint48(-1);                                                                // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n    // The last read redemption price\n    uint256  public   lastReadRedemptionPrice;\n    // Discount (compared to the system coin's current redemption price) at which collateral is being sold\n    uint256  public   discount = 0.95E18;                         // 5% discount                                      // [wad]\n    // Max lower bound deviation that the collateral median can have compared to the FSM price\n    uint256  public   lowerCollateralMedianDeviation = 0.90E18;   // 10% deviation                                    // [wad]\n    // Max upper bound deviation that the collateral median can have compared to the FSM price\n    uint256  public   upperCollateralMedianDeviation = 0.95E18;   // 5% deviation                                     // [wad]\n    // Max lower bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n    uint256  public   lowerSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n    // Max upper bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n    uint256  public   upperSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n    // Min deviation for the system coin median result compared to the redemption price in order to take the median into account\n    uint256  public   minSystemCoinMedianDeviation   = 0.999E18;                                                      // [wad]\n\n    OracleRelayerLike_1     public oracleRelayer;\n    OracleLike_1            public collateralFSM;\n    OracleLike_1            public systemCoinOracle;\n    LiquidationEngineLike_1 public liquidationEngine;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"COLLATERAL\");\n    bytes32 public constant AUCTION_TYPE       = bytes32(\"FIXED_DISCOUNT\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event StartAuction(\n        uint256 id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 indexed amountToRaise,\n        address indexed forgoneCollateralReceiver,\n        address indexed auctionIncomeRecipient,\n        uint256 auctionDeadline\n    );\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event ModifyParameters(bytes32 parameter, address data);\n    event BuyCollateral(uint256 indexed id, uint256 wad, uint256 boughtCollateral);\n    event SettleAuction(uint256 indexed id, uint256 leftoverCollateral);\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, uint256 collateralAmount);\n\n    // --- Init ---\n    constructor(address safeEngine_, address liquidationEngine_, bytes32 collateralType_) public {\n        safeEngine = SAFEEngineLike_5(safeEngine_);\n        liquidationEngine = LiquidationEngineLike_1(liquidationEngine_);\n        collateralType = collateralType_;\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"FixedDiscountCollateralAuctionHouse/add-uint48-overflow\");\n    }\n    function addUint256(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"FixedDiscountCollateralAuctionHouse/add-uint256-overflow\");\n    }\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"FixedDiscountCollateralAuctionHouse/sub-underflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"FixedDiscountCollateralAuctionHouse/mul-overflow\");\n    }\n    uint256 constant WAD = 10 ** 18;\n    function wmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = multiply(x, y) / WAD;\n    }\n    uint256 constant RAY = 10 ** 27;\n    function rdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"FixedDiscountCollateralAuctionHouse/rdiv-by-zero\");\n        z = multiply(x, RAY) / y;\n    }\n    function wdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"FixedDiscountCollateralAuctionHouse/wdiv-by-zero\");\n        z = multiply(x, WAD) / y;\n    }\n    function minimum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x <= y) ? x : y;\n    }\n    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x >= y) ? x : y;\n    }\n\n    // --- General Utils ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify an uint256 parameter\n     * @param parameter The name of the parameter modified\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"discount\") {\n            require(data < WAD, \"FixedDiscountCollateralAuctionHouse/no-discount-offered\");\n            discount = data;\n        }\n        else if (parameter == \"lowerCollateralMedianDeviation\") {\n            require(data <= WAD, \"FixedDiscountCollateralAuctionHouse/invalid-lower-collateral-median-deviation\");\n            lowerCollateralMedianDeviation = data;\n        }\n        else if (parameter == \"upperCollateralMedianDeviation\") {\n            require(data <= WAD, \"FixedDiscountCollateralAuctionHouse/invalid-upper-collateral-median-deviation\");\n            upperCollateralMedianDeviation = data;\n        }\n        else if (parameter == \"lowerSystemCoinMedianDeviation\") {\n            require(data <= WAD, \"FixedDiscountCollateralAuctionHouse/invalid-lower-system-coin-median-deviation\");\n            lowerSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"upperSystemCoinMedianDeviation\") {\n            require(data <= WAD, \"FixedDiscountCollateralAuctionHouse/invalid-upper-system-coin-median-deviation\");\n            upperSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"minSystemCoinMedianDeviation\") {\n            minSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"minimumBid\") {\n            minimumBid = data;\n        }\n        else revert(\"FixedDiscountCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify an address parameter\n     * @param parameter The name of the contract address being updated\n     * @param data New address for the oracle contract\n     */\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike_1(data);\n        else if (parameter == \"collateralFSM\") {\n          collateralFSM = OracleLike_1(data);\n          // Check that priceSource() is implemented\n          collateralFSM.priceSource();\n        }\n        else if (parameter == \"systemCoinOracle\") systemCoinOracle = OracleLike_1(data);\n        else if (parameter == \"liquidationEngine\") liquidationEngine = LiquidationEngineLike_1(data);\n        else revert(\"FixedDiscountCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Private Auction Utils ---\n    /*\n    * @notify Get the amount of bought collateral from a specific auction using custom collateral price feeds and a system coin price feed\n    * @param id The ID of the auction to bid in and get collateral from\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n    * @param systemCoinPriceFeedValue The system coin market price fetched from the oracle\n    * @param adjustedBid The system coin bid\n    */\n    function getBoughtCollateral(\n        uint256 id,\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue,\n        uint256 systemCoinPriceFeedValue,\n        uint256 adjustedBid\n    ) private view returns (uint256) {\n        // calculate the collateral price in relation to the latest system coin price and apply the discount\n        uint256 discountedCollateralPrice =\n          getDiscountedCollateralPrice(\n            collateralFsmPriceFeedValue,\n            collateralMedianPriceFeedValue,\n            systemCoinPriceFeedValue,\n            discount\n          );\n        // calculate the amount of collateral bought\n        uint256 boughtCollateral = wdivide(adjustedBid, discountedCollateralPrice);\n        // if the calculated collateral amount exceeds the amount still up for sale, adjust it to the remaining amount\n        boughtCollateral = (boughtCollateral > subtract(bids[id].amountToSell, bids[id].soldAmount)) ?\n                           subtract(bids[id].amountToSell, bids[id].soldAmount) : boughtCollateral;\n\n        return boughtCollateral;\n    }\n\n    // --- Public Auction Utils ---\n    /*\n    * @notice Fetch the collateral median price (from the oracle, not FSM)\n    * @returns The collateral price from the oracle median; zero if the address of the collateralMedian (as fetched from the FSM) is null\n    */\n    function getCollateralMedianPrice() public view returns (uint256 priceFeed) {\n        // Fetch the collateral median address from the collateral FSM\n        address collateralMedian;\n        try collateralFSM.priceSource() returns (address median) {\n          collateralMedian = median;\n        } catch (bytes memory revertReason) {}\n\n        if (collateralMedian == address(0)) return 0;\n\n        // wrapped call toward the collateral median\n        try OracleLike_1(collateralMedian).getResultWithValidity()\n          returns (uint256 price, bool valid) {\n          if (valid) {\n            priceFeed = uint256(price);\n          }\n        } catch (bytes memory revertReason) {\n          return 0;\n        }\n    }\n    /*\n    * @notice Fetch the system coin market price\n    * @returns The system coin market price fetch from the oracle\n    */\n    function getSystemCoinMarketPrice() public view returns (uint256 priceFeed) {\n        if (address(systemCoinOracle) == address(0)) return 0;\n\n        // wrapped call toward the system coin oracle\n        try systemCoinOracle.getResultWithValidity()\n          returns (uint256 price, bool valid) {\n          if (valid) {\n            priceFeed = uint256(price) * 10 ** 9; // scale to RAY\n          }\n        } catch (bytes memory revertReason) {\n          return 0;\n        }\n    }\n    /*\n    * @notice Get the smallest possible price that's at max lowerSystemCoinMedianDeviation deviated from the redemption price and at least\n    *         minSystemCoinMedianDeviation deviated\n    */\n    function getSystemCoinFloorDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 floorPrice) {\n        uint256 minFloorDeviatedPrice = wmultiply(redemptionPrice, minSystemCoinMedianDeviation);\n        floorPrice = wmultiply(redemptionPrice, lowerSystemCoinMedianDeviation);\n        floorPrice = (floorPrice <= minFloorDeviatedPrice) ? floorPrice : redemptionPrice;\n    }\n    /*\n    * @notice Get the highest possible price that's at max upperSystemCoinMedianDeviation deviated from the redemption price and at least\n    *         minSystemCoinMedianDeviation deviated\n    */\n    function getSystemCoinCeilingDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 ceilingPrice) {\n        uint256 minCeilingDeviatedPrice = wmultiply(redemptionPrice, subtract(2 * WAD, minSystemCoinMedianDeviation));\n        ceilingPrice = wmultiply(redemptionPrice, subtract(2 * WAD, upperSystemCoinMedianDeviation));\n        ceilingPrice = (ceilingPrice >= minCeilingDeviatedPrice) ? ceilingPrice : redemptionPrice;\n    }\n    /*\n    * @notice Get the collateral price from the FSM and the final system coin price that will be used when bidding in an auction\n    * @param systemCoinRedemptionPrice The system coin redemption price\n    * @returns The collateral price from the FSM and the final system coin price used for bidding (picking between redemption and market prices)\n    */\n    function getCollateralFSMAndFinalSystemCoinPrices(uint256 systemCoinRedemptionPrice) public view returns (uint256, uint256) {\n        require(systemCoinRedemptionPrice > 0, \"FixedDiscountCollateralAuctionHouse/invalid-redemption-price-provided\");\n        (uint256 collateralFsmPriceFeedValue, bool collateralFsmHasValidValue) = collateralFSM.getResultWithValidity();\n        if (!collateralFsmHasValidValue) {\n          return (0, 0);\n        }\n\n        uint256 systemCoinAdjustedPrice  = systemCoinRedemptionPrice;\n        uint256 systemCoinPriceFeedValue = getSystemCoinMarketPrice();\n\n        if (systemCoinPriceFeedValue > 0) {\n          uint256 floorPrice   = getSystemCoinFloorDeviatedPrice(systemCoinAdjustedPrice);\n          uint256 ceilingPrice = getSystemCoinCeilingDeviatedPrice(systemCoinAdjustedPrice);\n\n          if (uint(systemCoinPriceFeedValue) < systemCoinAdjustedPrice) {\n            systemCoinAdjustedPrice = maximum(uint256(systemCoinPriceFeedValue), floorPrice);\n          } else {\n            systemCoinAdjustedPrice = minimum(uint256(systemCoinPriceFeedValue), ceilingPrice);\n          }\n        }\n\n        return (uint256(collateralFsmPriceFeedValue), systemCoinAdjustedPrice);\n    }\n    /*\n    * @notice Get the collateral price used in bidding by picking between the raw FSM and the oracle median price and taking into account\n    *         deviation limits\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the median attached to the FSM\n    */\n    function getFinalBaseCollateralPrice(\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue\n    ) public view returns (uint256) {\n        uint256 floorPrice   = wmultiply(collateralFsmPriceFeedValue, lowerCollateralMedianDeviation);\n        uint256 ceilingPrice = wmultiply(collateralFsmPriceFeedValue, subtract(2 * WAD, upperCollateralMedianDeviation));\n\n        uint256 adjustedMedianPrice = (collateralMedianPriceFeedValue == 0) ?\n          collateralFsmPriceFeedValue : collateralMedianPriceFeedValue;\n\n        if (adjustedMedianPrice < collateralFsmPriceFeedValue) {\n          return maximum(adjustedMedianPrice, floorPrice);\n        } else {\n          return minimum(adjustedMedianPrice, ceilingPrice);\n        }\n    }\n    /*\n    * @notice Get the discounted collateral price (using a custom discount)\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n    * @param systemCoinPriceFeedValue The system coin price fetched from the oracle\n    * @param customDiscount The custom discount used to calculate the collateral price offered\n    */\n    function getDiscountedCollateralPrice(\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue,\n        uint256 systemCoinPriceFeedValue,\n        uint256 customDiscount\n    ) public view returns (uint256) {\n        // calculate the collateral price in relation to the latest system coin price and apply the discount\n        return wmultiply(\n          rdivide(getFinalBaseCollateralPrice(collateralFsmPriceFeedValue, collateralMedianPriceFeedValue), systemCoinPriceFeedValue),\n          customDiscount\n        );\n    }\n    /*\n    * @notice Get the actual bid that will be used in an auction (taking into account the bidder input)\n    * @param id The id of the auction to calculate the adjusted bid for\n    * @param wad The initial bid submitted\n    * @returns Whether the bid is valid or not and the adjusted bid\n    */\n    function getAdjustedBid(\n        uint256 id, uint256 wad\n    ) public view returns (bool, uint256) {\n        if (either(\n          either(bids[id].amountToSell == 0, bids[id].amountToRaise == 0),\n          either(wad == 0, wad < minimumBid)\n        )) {\n          return (false, wad);\n        }\n\n        uint256 remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n\n        // bound max amount offered in exchange for collateral\n        uint256 adjustedBid = wad;\n        if (multiply(adjustedBid, RAY) > remainingToRaise) {\n            adjustedBid = addUint256(remainingToRaise / RAY, 1);\n        }\n\n        remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n        if (both(remainingToRaise > 0, remainingToRaise < RAY)) {\n            return (false, adjustedBid);\n        }\n\n        return (true, adjustedBid);\n    }\n\n    // --- Core Auction Logic ---\n    /**\n     * @notice Start a new collateral auction\n     * @param forgoneCollateralReceiver Who receives leftover collateral that is not auctioned\n     * @param auctionIncomeRecipient Who receives the amount raised in the auction\n     * @param amountToRaise Total amount of coins to raise (rad)\n     * @param amountToSell Total amount of collateral available to sell (wad)\n     * @param initialBid Unused\n     */\n    function startAuction(\n        address forgoneCollateralReceiver,\n        address auctionIncomeRecipient,\n        uint256 amountToRaise,\n        uint256 amountToSell,\n        uint256 initialBid\n    ) public isAuthorized returns (uint256 id) {\n        require(auctionsStarted < uint256(-1), \"FixedDiscountCollateralAuctionHouse/overflow\");\n        require(amountToSell > 0, \"FixedDiscountCollateralAuctionHouse/no-collateral-for-sale\");\n        require(amountToRaise > 0, \"FixedDiscountCollateralAuctionHouse/nothing-to-raise\");\n        require(amountToRaise >= RAY, \"FixedDiscountCollateralAuctionHouse/dusty-auction\");\n        id = ++auctionsStarted;\n\n        bids[id].auctionDeadline = uint48(-1);\n        bids[id].amountToSell = amountToSell;\n        bids[id].forgoneCollateralReceiver = forgoneCollateralReceiver;\n        bids[id].auctionIncomeRecipient = auctionIncomeRecipient;\n        bids[id].amountToRaise = amountToRaise;\n\n        safeEngine.transferCollateral(collateralType, msg.sender, address(this), amountToSell);\n\n        emit StartAuction(\n          id,\n          auctionsStarted,\n          amountToSell,\n          initialBid,\n          amountToRaise,\n          forgoneCollateralReceiver,\n          auctionIncomeRecipient,\n          bids[id].auctionDeadline\n        );\n    }\n    /**\n     * @notice Calculate how much collateral someone would buy from an auction using the last read redemption price\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted\n     */\n    function getApproximateCollateralBought(uint256 id, uint256 wad) external view returns (uint256, uint256) {\n        if (lastReadRedemptionPrice == 0) return (0, wad);\n\n        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n        if (!validAuctionAndBid) {\n            return (0, adjustedBid);\n        }\n\n        // check that the oracle doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        if (collateralFsmPriceFeedValue == 0) {\n          return (0, adjustedBid);\n        }\n\n        return (getBoughtCollateral(\n          id,\n          collateralFsmPriceFeedValue,\n          getCollateralMedianPrice(),\n          systemCoinPriceFeedValue,\n          adjustedBid\n        ), adjustedBid);\n    }\n    /**\n     * @notice Calculate how much collateral someone would buy from an auction using the latest redemption price fetched from the OracleRelayer\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted\n     */\n    function getCollateralBought(uint256 id, uint256 wad) external returns (uint256, uint256) {\n        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n        if (!validAuctionAndBid) {\n            return (0, adjustedBid);\n        }\n\n        // Read the redemption price\n        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n\n        // check that the oracle doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        if (collateralFsmPriceFeedValue == 0) {\n          return (0, adjustedBid);\n        }\n\n        return (getBoughtCollateral(\n          id,\n          collateralFsmPriceFeedValue,\n          getCollateralMedianPrice(),\n          systemCoinPriceFeedValue,\n          adjustedBid\n        ), adjustedBid);\n    }\n    /**\n     * @notice Buy collateral from an auction at a fixed discount\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted (as a WAD which has 18 decimals)\n     */\n    function buyCollateral(uint256 id, uint256 wad) external {\n        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), \"FixedDiscountCollateralAuctionHouse/inexistent-auction\");\n\n        uint256 remainingToRaise = subtract(bids[id].amountToRaise, bids[id].raisedAmount);\n        require(both(wad > 0, wad >= minimumBid), \"FixedDiscountCollateralAuctionHouse/invalid-bid\");\n\n        // bound max amount offered in exchange for collateral (in case someone offers more than is necessary)\n        uint256 adjustedBid = wad;\n        if (multiply(adjustedBid, RAY) > remainingToRaise) {\n            adjustedBid = addUint256(remainingToRaise / RAY, 1);\n        }\n\n        // update amount raised\n        bids[id].raisedAmount = addUint256(bids[id].raisedAmount, multiply(adjustedBid, RAY));\n\n        // check that there's at least RAY left to raise if raisedAmount < amountToRaise\n        if (bids[id].raisedAmount < bids[id].amountToRaise) {\n            require(subtract(bids[id].amountToRaise, bids[id].raisedAmount) >= RAY, \"FixedDiscountCollateralAuctionHouse/invalid-left-to-raise\");\n        }\n\n        // Read the redemption price\n        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n\n        // check that the collateral FSM doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        require(collateralFsmPriceFeedValue > 0, \"FixedDiscountCollateralAuctionHouse/collateral-fsm-invalid-value\");\n\n        // get the amount of collateral bought\n        uint256 boughtCollateral = getBoughtCollateral(\n          id, collateralFsmPriceFeedValue, getCollateralMedianPrice(), systemCoinPriceFeedValue, adjustedBid\n        );\n        // check that the calculated amount is greater than zero\n        require(boughtCollateral > 0, \"FixedDiscountCollateralAuctionHouse/null-bought-amount\");\n        // update the amount of collateral already sold\n        bids[id].soldAmount = addUint256(bids[id].soldAmount, boughtCollateral);\n\n        // transfer the bid to the income recipient and the collateral to the bidder\n        safeEngine.transferInternalCoins(msg.sender, bids[id].auctionIncomeRecipient, multiply(adjustedBid, RAY));\n        safeEngine.transferCollateral(collateralType, address(this), msg.sender, boughtCollateral);\n\n        // Emit the buy event\n        emit BuyCollateral(id, adjustedBid, boughtCollateral);\n\n        // Remove coins from the liquidation buffer\n        bool soldAll = either(bids[id].amountToRaise <= bids[id].raisedAmount, bids[id].amountToSell == bids[id].soldAmount);\n        if (soldAll) {\n          liquidationEngine.removeCoinsFromAuction(remainingToRaise);\n        } else {\n          liquidationEngine.removeCoinsFromAuction(multiply(adjustedBid, RAY));\n        }\n\n        // If the auction raised the whole amount or all collateral was sold,\n        // send remaining collateral back to the forgone receiver\n        if (soldAll) {\n            uint256 leftoverCollateral = subtract(bids[id].amountToSell, bids[id].soldAmount);\n            safeEngine.transferCollateral(collateralType, address(this), bids[id].forgoneCollateralReceiver, leftoverCollateral);\n            delete bids[id];\n            emit SettleAuction(id, leftoverCollateral);\n        }\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        return;\n    }\n    /**\n     * @notice Terminate an auction prematurely. Usually called by Global Settlement.\n     * @param id ID of the auction to settle\n     */\n    function terminateAuctionPrematurely(uint256 id) external isAuthorized {\n        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), \"FixedDiscountCollateralAuctionHouse/inexistent-auction\");\n        uint256 leftoverCollateral = subtract(bids[id].amountToSell, bids[id].soldAmount);\n        liquidationEngine.removeCoinsFromAuction(subtract(bids[id].amountToRaise, bids[id].raisedAmount));\n        safeEngine.transferCollateral(collateralType, address(this), msg.sender, leftoverCollateral);\n        delete bids[id];\n        emit TerminateAuctionPrematurely(id, msg.sender, leftoverCollateral);\n    }\n\n    // --- Getters ---\n    function bidAmount(uint256 id) public view returns (uint256) {\n        return 0;\n    }\n    function remainingAmountToSell(uint256 id) public view returns (uint256) {\n        return subtract(bids[id].amountToSell, bids[id].soldAmount);\n    }\n    function forgoneCollateralReceiver(uint256 id) public view returns (address) {\n        return bids[id].forgoneCollateralReceiver;\n    }\n    function raisedAmount(uint256 id) public view returns (uint256) {\n        return bids[id].raisedAmount;\n    }\n    function amountToRaise(uint256 id) public view returns (uint256) {\n        return bids[id].amountToRaise;\n    }\n}\n\n/// IncreasingDiscountCollateralAuctionHouse.sol\n\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>, 2020 Reflexer Labs, INC\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/*\n   This thing lets you sell some collateral at an increasing discount in order to instantly recapitalize the system\n*/\n\ncontract IncreasingDiscountCollateralAuctionHouse {\n    // --- Auth ---\n    mapping (address => uint256) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingDiscountCollateralAuctionHouse/account-not-authorized\");\n        _;\n    }\n\n    // --- Data ---\n    struct Bid {\n        // How much collateral is sold in an auction\n        uint256 amountToSell;                                                                                         // [wad]\n        // Total/max amount of coins to raise\n        uint256 amountToRaise;                                                                                        // [rad]\n        // Current discount\n        uint256 currentDiscount;                                                                                      // [wad]\n        // Max possibe discount\n        uint256 maxDiscount;                                                                                          // [wad]\n        // Rate at which the discount is updated every second\n        uint256 perSecondDiscountUpdateRate;                                                                          // [ray]\n        // Last time when the current discount was updated\n        uint256 latestDiscountUpdateTime;                                                                             // [unix timestamp]\n        // Deadline after which the discount cannot increase anymore\n        uint48  discountIncreaseDeadline;                                                                             // [unix epoch time]\n        // Who (which SAFE) receives leftover collateral that is not sold in the auction; usually the liquidated SAFE\n        address forgoneCollateralReceiver;\n        // Who receives the coins raised by the auction; usually the accounting engine\n        address auctionIncomeRecipient;\n    }\n\n    // Bid data for each separate auction\n    mapping (uint256 => Bid) public bids;\n\n    // SAFE database\n    SAFEEngineLike_5 public safeEngine;\n    // Collateral type name\n    bytes32        public collateralType;\n\n    // Minimum acceptable bid\n    uint256  public   minimumBid = 5 * WAD;                                                                           // [wad]\n    // Total length of the auction. Kept to adhere to the same interface as the English auction but redundant\n    uint48   public   totalAuctionLength = uint48(-1);                                                                // [seconds]\n    // Number of auctions started up until now\n    uint256  public   auctionsStarted = 0;\n    // The last read redemption price\n    uint256  public   lastReadRedemptionPrice;\n    // Minimum discount (compared to the system coin's current redemption price) at which collateral is being sold\n    uint256  public   minDiscount = 0.95E18;                      // 5% discount                                      // [wad]\n    // Maximum discount (compared to the system coin's current redemption price) at which collateral is being sold\n    uint256  public   maxDiscount = 0.95E18;                      // 5% discount                                      // [wad]\n    // Rate at which the discount will be updated in an auction\n    uint256  public   perSecondDiscountUpdateRate = RAY;                                                              // [ray]\n    // Max time over which the discount can be updated\n    uint256  public   maxDiscountUpdateRateTimeline  = 1 hours;                                                       // [seconds]\n    // Max lower bound deviation that the collateral median can have compared to the FSM price\n    uint256  public   lowerCollateralMedianDeviation = 0.90E18;   // 10% deviation                                    // [wad]\n    // Max upper bound deviation that the collateral median can have compared to the FSM price\n    uint256  public   upperCollateralMedianDeviation = 0.95E18;   // 5% deviation                                     // [wad]\n    // Max lower bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n    uint256  public   lowerSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n    // Max upper bound deviation that the system coin oracle price feed can have compared to the systemCoinOracle price\n    uint256  public   upperSystemCoinMedianDeviation = WAD;       // 0% deviation                                     // [wad]\n    // Min deviation for the system coin median result compared to the redemption price in order to take the median into account\n    uint256  public   minSystemCoinMedianDeviation   = 0.999E18;                                                      // [wad]\n\n    OracleRelayerLike_1     public oracleRelayer;\n    OracleLike_1            public collateralFSM;\n    OracleLike_1            public systemCoinOracle;\n    LiquidationEngineLike_1 public liquidationEngine;\n\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"COLLATERAL\");\n    bytes32 public constant AUCTION_TYPE       = bytes32(\"INCREASING_DISCOUNT\");\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event StartAuction(\n        uint256 id,\n        uint256 auctionsStarted,\n        uint256 amountToSell,\n        uint256 initialBid,\n        uint256 indexed amountToRaise,\n        uint256 startingDiscount,\n        uint256 maxDiscount,\n        uint256 perSecondDiscountUpdateRate,\n        uint48  discountIncreaseDeadline,\n        address indexed forgoneCollateralReceiver,\n        address indexed auctionIncomeRecipient\n    );\n    event ModifyParameters(bytes32 parameter, uint256 data);\n    event ModifyParameters(bytes32 parameter, address data);\n    event BuyCollateral(uint256 indexed id, uint256 wad, uint256 boughtCollateral);\n    event SettleAuction(uint256 indexed id, uint256 leftoverCollateral);\n    event TerminateAuctionPrematurely(uint256 indexed id, address sender, uint256 collateralAmount);\n\n    // --- Init ---\n    constructor(address safeEngine_, address liquidationEngine_, bytes32 collateralType_) public {\n        safeEngine = SAFEEngineLike_5(safeEngine_);\n        liquidationEngine = LiquidationEngineLike_1(liquidationEngine_);\n        collateralType = collateralType_;\n        authorizedAccounts[msg.sender] = 1;\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Math ---\n    function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {\n        require((z = x + y) >= x, \"IncreasingDiscountCollateralAuctionHouse/add-uint48-overflow\");\n    }\n    function addUint256(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"IncreasingDiscountCollateralAuctionHouse/add-uint256-overflow\");\n    }\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"IncreasingDiscountCollateralAuctionHouse/sub-underflow\");\n    }\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"IncreasingDiscountCollateralAuctionHouse/mul-overflow\");\n    }\n    uint256 constant WAD = 10 ** 18;\n    function wmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = multiply(x, y) / WAD;\n    }\n    uint256 constant RAY = 10 ** 27;\n    function rdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"IncreasingDiscountCollateralAuctionHouse/rdiv-by-zero\");\n        z = multiply(x, RAY) / y;\n    }\n    function rmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n        require(y == 0 || z / y == x, \"IncreasingDiscountCollateralAuctionHouse/rmul-overflow\");\n        z = z / RAY;\n    }\n    function wdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y > 0, \"IncreasingDiscountCollateralAuctionHouse/wdiv-by-zero\");\n        z = multiply(x, WAD) / y;\n    }\n    function minimum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x <= y) ? x : y;\n    }\n    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = (x >= y) ? x : y;\n    }\n    function rpower(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n      assembly {\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\n        default {\n          switch mod(n, 2) case 0 { z := b } default { z := x }\n          let half := div(b, 2)  // for rounding.\n          for { n := div(n, 2) } n { n := div(n,2) } {\n            let xx := mul(x, x)\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\n            let xxRound := add(xx, half)\n            if lt(xxRound, xx) { revert(0,0) }\n            x := div(xxRound, b)\n            if mod(n,2) {\n              let zx := mul(z, x)\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n              let zxRound := add(zx, half)\n              if lt(zxRound, zx) { revert(0,0) }\n              z := div(zxRound, b)\n            }\n          }\n        }\n      }\n    }\n\n    // --- General Utils ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n    function both(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := and(x, y)}\n    }\n\n    // --- Admin ---\n    /**\n     * @notice Modify an uint256 parameter\n     * @param parameter The name of the parameter to modify\n     * @param data New value for the parameter\n     */\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n        if (parameter == \"minDiscount\") {\n            require(both(data >= maxDiscount, data < WAD), \"IncreasingDiscountCollateralAuctionHouse/invalid-min-discount\");\n            minDiscount = data;\n        }\n        else if (parameter == \"maxDiscount\") {\n            require(both(both(data <= minDiscount, data < WAD), data > 0), \"IncreasingDiscountCollateralAuctionHouse/invalid-max-discount\");\n            maxDiscount = data;\n        }\n        else if (parameter == \"perSecondDiscountUpdateRate\") {\n            require(data <= RAY, \"IncreasingDiscountCollateralAuctionHouse/invalid-discount-update-rate\");\n            perSecondDiscountUpdateRate = data;\n        }\n        else if (parameter == \"maxDiscountUpdateRateTimeline\") {\n            require(both(data > 0, uint256(uint48(-1)) > addUint256(now, data)), \"IncreasingDiscountCollateralAuctionHouse/invalid-update-rate-time\");\n            maxDiscountUpdateRateTimeline = data;\n        }\n        else if (parameter == \"lowerCollateralMedianDeviation\") {\n            require(data <= WAD, \"IncreasingDiscountCollateralAuctionHouse/invalid-lower-collateral-median-deviation\");\n            lowerCollateralMedianDeviation = data;\n        }\n        else if (parameter == \"upperCollateralMedianDeviation\") {\n            require(data <= WAD, \"IncreasingDiscountCollateralAuctionHouse/invalid-upper-collateral-median-deviation\");\n            upperCollateralMedianDeviation = data;\n        }\n        else if (parameter == \"lowerSystemCoinMedianDeviation\") {\n            require(data <= WAD, \"IncreasingDiscountCollateralAuctionHouse/invalid-lower-system-coin-median-deviation\");\n            lowerSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"upperSystemCoinMedianDeviation\") {\n            require(data <= WAD, \"IncreasingDiscountCollateralAuctionHouse/invalid-upper-system-coin-median-deviation\");\n            upperSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"minSystemCoinMedianDeviation\") {\n            minSystemCoinMedianDeviation = data;\n        }\n        else if (parameter == \"minimumBid\") {\n            minimumBid = data;\n        }\n        else revert(\"IncreasingDiscountCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n    /**\n     * @notice Modify an addres parameter\n     * @param parameter The parameter name\n     * @param data New address for the parameter\n     */\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\n        if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike_1(data);\n        else if (parameter == \"collateralFSM\") {\n          collateralFSM = OracleLike_1(data);\n          // Check that priceSource() is implemented\n          collateralFSM.priceSource();\n        }\n        else if (parameter == \"systemCoinOracle\") systemCoinOracle = OracleLike_1(data);\n        else if (parameter == \"liquidationEngine\") liquidationEngine = LiquidationEngineLike_1(data);\n        else revert(\"IncreasingDiscountCollateralAuctionHouse/modify-unrecognized-param\");\n        emit ModifyParameters(parameter, data);\n    }\n\n    // --- Private Auction Utils ---\n    /*\n    * @notify Get the amount of bought collateral from a specific auction using custom collateral price feeds, a system\n    *         coin price feed and a custom discount\n    * @param id The ID of the auction to bid in and get collateral from\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n    * @param systemCoinPriceFeedValue The system coin market price fetched from the oracle\n    * @param adjustedBid The system coin bid\n    * @param customDiscount The discount offered\n    */\n    function getBoughtCollateral(\n        uint256 id,\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue,\n        uint256 systemCoinPriceFeedValue,\n        uint256 adjustedBid,\n        uint256 customDiscount\n    ) private view returns (uint256) {\n        // calculate the collateral price in relation to the latest system coin price and apply the discount\n        uint256 discountedCollateralPrice =\n          getDiscountedCollateralPrice(\n            collateralFsmPriceFeedValue,\n            collateralMedianPriceFeedValue,\n            systemCoinPriceFeedValue,\n            customDiscount\n          );\n        // calculate the amount of collateral bought\n        uint256 boughtCollateral = wdivide(adjustedBid, discountedCollateralPrice);\n        // if the calculated collateral amount exceeds the amount still up for sale, adjust it to the remaining amount\n        boughtCollateral = (boughtCollateral > bids[id].amountToSell) ? bids[id].amountToSell : boughtCollateral;\n\n        return boughtCollateral;\n    }\n    /*\n    * @notice Update the discount used in a particular auction\n    * @param id The id of the auction to update the discount for\n    * @returns The newly computed currentDiscount for the targeted auction\n    */\n    function updateCurrentDiscount(uint256 id) private returns (uint256) {\n        // Work directly with storage\n        Bid storage auctionBidData              = bids[id];\n        auctionBidData.currentDiscount          = getNextCurrentDiscount(id);\n        auctionBidData.latestDiscountUpdateTime = now;\n        return auctionBidData.currentDiscount;\n    }\n\n    // --- Public Auction Utils ---\n    /*\n    * @notice Fetch the collateral median price (from the oracle, not FSM)\n    * @returns The collateral price from the oracle median; zero if the address of the collateralMedian (as fetched from the FSM) is null\n    */\n    function getCollateralMedianPrice() public view returns (uint256 priceFeed) {\n        // Fetch the collateral median address from the collateral FSM\n        address collateralMedian;\n        try collateralFSM.priceSource() returns (address median) {\n          collateralMedian = median;\n        } catch (bytes memory revertReason) {}\n\n        if (collateralMedian == address(0)) return 0;\n\n        // wrapped call toward the collateral median\n        try OracleLike_1(collateralMedian).getResultWithValidity()\n          returns (uint256 price, bool valid) {\n          if (valid) {\n            priceFeed = uint256(price);\n          }\n        } catch (bytes memory revertReason) {\n          return 0;\n        }\n    }\n    /*\n    * @notice Fetch the system coin market price\n    * @returns The system coin market price fetch from the oracle\n    */\n    function getSystemCoinMarketPrice() public view returns (uint256 priceFeed) {\n        if (address(systemCoinOracle) == address(0)) return 0;\n\n        // wrapped call toward the system coin oracle\n        try systemCoinOracle.getResultWithValidity()\n          returns (uint256 price, bool valid) {\n          if (valid) {\n            priceFeed = uint256(price) * 10 ** 9; // scale to RAY\n          }\n        } catch (bytes memory revertReason) {\n          return 0;\n        }\n    }\n    /*\n    * @notice Get the smallest possible price that's at max lowerSystemCoinMedianDeviation deviated from the redemption price and at least\n    *         minSystemCoinMedianDeviation deviated\n    */\n    function getSystemCoinFloorDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 floorPrice) {\n        uint256 minFloorDeviatedPrice = wmultiply(redemptionPrice, minSystemCoinMedianDeviation);\n        floorPrice = wmultiply(redemptionPrice, lowerSystemCoinMedianDeviation);\n        floorPrice = (floorPrice <= minFloorDeviatedPrice) ? floorPrice : redemptionPrice;\n    }\n    /*\n    * @notice Get the highest possible price that's at max upperSystemCoinMedianDeviation deviated from the redemption price and at least\n    *         minSystemCoinMedianDeviation deviated\n    */\n    function getSystemCoinCeilingDeviatedPrice(uint256 redemptionPrice) public view returns (uint256 ceilingPrice) {\n        uint256 minCeilingDeviatedPrice = wmultiply(redemptionPrice, subtract(2 * WAD, minSystemCoinMedianDeviation));\n        ceilingPrice = wmultiply(redemptionPrice, subtract(2 * WAD, upperSystemCoinMedianDeviation));\n        ceilingPrice = (ceilingPrice >= minCeilingDeviatedPrice) ? ceilingPrice : redemptionPrice;\n    }\n    /*\n    * @notice Get the collateral price from the FSM and the final system coin price that will be used when bidding in an auction\n    * @param systemCoinRedemptionPrice The system coin redemption price\n    * @returns The collateral price from the FSM and the final system coin price used for bidding (picking between redemption and market prices)\n    */\n    function getCollateralFSMAndFinalSystemCoinPrices(uint256 systemCoinRedemptionPrice) public view returns (uint256, uint256) {\n        require(systemCoinRedemptionPrice > 0, \"IncreasingDiscountCollateralAuctionHouse/invalid-redemption-price-provided\");\n        (uint256 collateralFsmPriceFeedValue, bool collateralFsmHasValidValue) = collateralFSM.getResultWithValidity();\n        if (!collateralFsmHasValidValue) {\n          return (0, 0);\n        }\n\n        uint256 systemCoinAdjustedPrice  = systemCoinRedemptionPrice;\n        uint256 systemCoinPriceFeedValue = getSystemCoinMarketPrice();\n\n        if (systemCoinPriceFeedValue > 0) {\n          uint256 floorPrice   = getSystemCoinFloorDeviatedPrice(systemCoinAdjustedPrice);\n          uint256 ceilingPrice = getSystemCoinCeilingDeviatedPrice(systemCoinAdjustedPrice);\n\n          if (uint(systemCoinPriceFeedValue) < systemCoinAdjustedPrice) {\n            systemCoinAdjustedPrice = maximum(uint256(systemCoinPriceFeedValue), floorPrice);\n          } else {\n            systemCoinAdjustedPrice = minimum(uint256(systemCoinPriceFeedValue), ceilingPrice);\n          }\n        }\n\n        return (uint256(collateralFsmPriceFeedValue), systemCoinAdjustedPrice);\n    }\n    /*\n    * @notice Get the collateral price used in bidding by picking between the raw FSM and the oracle median price and taking into account\n    *         deviation limits\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the median attached to the FSM\n    */\n    function getFinalBaseCollateralPrice(\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue\n    ) public view returns (uint256) {\n        uint256 floorPrice   = wmultiply(collateralFsmPriceFeedValue, lowerCollateralMedianDeviation);\n        uint256 ceilingPrice = wmultiply(collateralFsmPriceFeedValue, subtract(2 * WAD, upperCollateralMedianDeviation));\n\n        uint256 adjustedMedianPrice = (collateralMedianPriceFeedValue == 0) ?\n          collateralFsmPriceFeedValue : collateralMedianPriceFeedValue;\n\n        if (adjustedMedianPrice < collateralFsmPriceFeedValue) {\n          return maximum(adjustedMedianPrice, floorPrice);\n        } else {\n          return minimum(adjustedMedianPrice, ceilingPrice);\n        }\n    }\n    /*\n    * @notice Get the discounted collateral price (using a custom discount)\n    * @param collateralFsmPriceFeedValue The collateral price fetched from the FSM\n    * @param collateralMedianPriceFeedValue The collateral price fetched from the oracle median\n    * @param systemCoinPriceFeedValue The system coin price fetched from the oracle\n    * @param customDiscount The custom discount used to calculate the collateral price offered\n    */\n    function getDiscountedCollateralPrice(\n        uint256 collateralFsmPriceFeedValue,\n        uint256 collateralMedianPriceFeedValue,\n        uint256 systemCoinPriceFeedValue,\n        uint256 customDiscount\n    ) public view returns (uint256) {\n        // calculate the collateral price in relation to the latest system coin price and apply the discount\n        return wmultiply(\n          rdivide(getFinalBaseCollateralPrice(collateralFsmPriceFeedValue, collateralMedianPriceFeedValue), systemCoinPriceFeedValue),\n          customDiscount\n        );\n    }\n    /*\n    * @notice Get the upcoming discount that will be used in a specific auction\n    * @param id The ID of the auction to calculate the upcoming discount for\n    * @returns The upcoming discount that will be used in the targeted auction\n    */\n    function getNextCurrentDiscount(uint256 id) public view returns (uint256) {\n        if (bids[id].forgoneCollateralReceiver == address(0)) return RAY;\n        uint256 nextDiscount = bids[id].currentDiscount;\n\n        // If the increase deadline hasn't been passed yet and the current discount is not at or greater than max\n        if (both(uint48(now) < bids[id].discountIncreaseDeadline, bids[id].currentDiscount > bids[id].maxDiscount)) {\n            // Calculate the new current discount\n            nextDiscount = rmultiply(\n              rpower(bids[id].perSecondDiscountUpdateRate, subtract(now, bids[id].latestDiscountUpdateTime), RAY),\n              bids[id].currentDiscount\n            );\n\n            // If the new discount is greater than the max one\n            if (nextDiscount <= bids[id].maxDiscount) {\n              nextDiscount = bids[id].maxDiscount;\n            }\n        } else {\n            // Determine the conditions when we can instantly set the current discount to max\n            bool currentZeroMaxNonZero = both(bids[id].currentDiscount == 0, bids[id].maxDiscount > 0);\n            bool doneUpdating          = both(uint48(now) >= bids[id].discountIncreaseDeadline, bids[id].currentDiscount != bids[id].maxDiscount);\n\n            if (either(currentZeroMaxNonZero, doneUpdating)) {\n              nextDiscount = bids[id].maxDiscount;\n            }\n        }\n\n        return nextDiscount;\n    }\n    /*\n    * @notice Get the actual bid that will be used in an auction (taking into account the bidder input)\n    * @param id The id of the auction to calculate the adjusted bid for\n    * @param wad The initial bid submitted\n    * @returns Whether the bid is valid or not and the adjusted bid\n    */\n    function getAdjustedBid(\n        uint256 id, uint256 wad\n    ) public view returns (bool, uint256) {\n        if (either(\n          either(bids[id].amountToSell == 0, bids[id].amountToRaise == 0),\n          either(wad == 0, wad < minimumBid)\n        )) {\n          return (false, wad);\n        }\n\n        uint256 remainingToRaise = bids[id].amountToRaise;\n\n        // bound max amount offered in exchange for collateral\n        uint256 adjustedBid = wad;\n        if (multiply(adjustedBid, RAY) > remainingToRaise) {\n            adjustedBid = addUint256(remainingToRaise / RAY, 1);\n        }\n\n        remainingToRaise = (multiply(adjustedBid, RAY) > remainingToRaise) ? 0 : subtract(bids[id].amountToRaise, multiply(adjustedBid, RAY));\n        if (both(remainingToRaise > 0, remainingToRaise < RAY)) {\n            return (false, adjustedBid);\n        }\n\n        return (true, adjustedBid);\n    }\n\n    // --- Core Auction Logic ---\n    /**\n     * @notice Start a new collateral auction\n     * @param forgoneCollateralReceiver Who receives leftover collateral that is not auctioned\n     * @param auctionIncomeRecipient Who receives the amount raised in the auction\n     * @param amountToRaise Total amount of coins to raise (rad)\n     * @param amountToSell Total amount of collateral available to sell (wad)\n     * @param initialBid Unused\n     */\n    function startAuction(\n        address forgoneCollateralReceiver,\n        address auctionIncomeRecipient,\n        uint256 amountToRaise,\n        uint256 amountToSell,\n        uint256 initialBid\n    ) public isAuthorized returns (uint256 id) {\n        require(auctionsStarted < uint256(-1), \"IncreasingDiscountCollateralAuctionHouse/overflow\");\n        require(amountToSell > 0, \"IncreasingDiscountCollateralAuctionHouse/no-collateral-for-sale\");\n        require(amountToRaise > 0, \"IncreasingDiscountCollateralAuctionHouse/nothing-to-raise\");\n        require(amountToRaise >= RAY, \"IncreasingDiscountCollateralAuctionHouse/dusty-auction\");\n        id = ++auctionsStarted;\n\n        uint48 discountIncreaseDeadline      = addUint48(uint48(now), uint48(maxDiscountUpdateRateTimeline));\n\n        bids[id].currentDiscount             = minDiscount;\n        bids[id].maxDiscount                 = maxDiscount;\n        bids[id].perSecondDiscountUpdateRate = perSecondDiscountUpdateRate;\n        bids[id].discountIncreaseDeadline    = discountIncreaseDeadline;\n        bids[id].latestDiscountUpdateTime    = now;\n        bids[id].amountToSell                = amountToSell;\n        bids[id].forgoneCollateralReceiver   = forgoneCollateralReceiver;\n        bids[id].auctionIncomeRecipient      = auctionIncomeRecipient;\n        bids[id].amountToRaise               = amountToRaise;\n\n        safeEngine.transferCollateral(collateralType, msg.sender, address(this), amountToSell);\n\n        emit StartAuction(\n          id,\n          auctionsStarted,\n          amountToSell,\n          initialBid,\n          amountToRaise,\n          minDiscount,\n          maxDiscount,\n          perSecondDiscountUpdateRate,\n          discountIncreaseDeadline,\n          forgoneCollateralReceiver,\n          auctionIncomeRecipient\n        );\n    }\n    /**\n     * @notice Calculate how much collateral someone would buy from an auction using the last read redemption price and the old current\n     *         discount associated with the auction\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted\n     */\n    function getApproximateCollateralBought(uint256 id, uint256 wad) external view returns (uint256, uint256) {\n        if (lastReadRedemptionPrice == 0) return (0, wad);\n\n        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n        if (!validAuctionAndBid) {\n            return (0, adjustedBid);\n        }\n\n        // check that the oracle doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        if (collateralFsmPriceFeedValue == 0) {\n          return (0, adjustedBid);\n        }\n\n        return (getBoughtCollateral(\n          id,\n          collateralFsmPriceFeedValue,\n          getCollateralMedianPrice(),\n          systemCoinPriceFeedValue,\n          adjustedBid,\n          bids[id].currentDiscount\n        ), adjustedBid);\n    }\n    /**\n     * @notice Calculate how much collateral someone would buy from an auction using the latest redemption price fetched from the\n     *         OracleRelayer and the latest updated discount associated with the auction\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted\n     */\n    function getCollateralBought(uint256 id, uint256 wad) external returns (uint256, uint256) {\n        (bool validAuctionAndBid, uint256 adjustedBid) = getAdjustedBid(id, wad);\n        if (!validAuctionAndBid) {\n            return (0, adjustedBid);\n        }\n\n        // Read the redemption price\n        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n\n        // check that the oracle doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        if (collateralFsmPriceFeedValue == 0) {\n          return (0, adjustedBid);\n        }\n\n        return (getBoughtCollateral(\n          id,\n          collateralFsmPriceFeedValue,\n          getCollateralMedianPrice(),\n          systemCoinPriceFeedValue,\n          adjustedBid,\n          updateCurrentDiscount(id)\n        ), adjustedBid);\n    }\n    /**\n     * @notice Buy collateral from an auction at an increasing discount\n     * @param id ID of the auction to buy collateral from\n     * @param wad New bid submitted (as a WAD which has 18 decimals)\n     */\n    function buyCollateral(uint256 id, uint256 wad) external {\n        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), \"IncreasingDiscountCollateralAuctionHouse/inexistent-auction\");\n        require(both(wad > 0, wad >= minimumBid), \"IncreasingDiscountCollateralAuctionHouse/invalid-bid\");\n\n        // bound max amount offered in exchange for collateral (in case someone offers more than it's necessary)\n        uint256 adjustedBid = wad;\n        if (multiply(adjustedBid, RAY) > bids[id].amountToRaise) {\n            adjustedBid = addUint256(bids[id].amountToRaise / RAY, 1);\n        }\n\n        // Read the redemption price\n        lastReadRedemptionPrice = oracleRelayer.redemptionPrice();\n\n        // check that the collateral FSM doesn't return an invalid value\n        (uint256 collateralFsmPriceFeedValue, uint256 systemCoinPriceFeedValue) = getCollateralFSMAndFinalSystemCoinPrices(lastReadRedemptionPrice);\n        require(collateralFsmPriceFeedValue > 0, \"IncreasingDiscountCollateralAuctionHouse/collateral-fsm-invalid-value\");\n\n        // get the amount of collateral bought\n        uint256 boughtCollateral = getBoughtCollateral(\n            id, collateralFsmPriceFeedValue, getCollateralMedianPrice(), systemCoinPriceFeedValue, adjustedBid, updateCurrentDiscount(id)\n        );\n        // check that the calculated amount is greater than zero\n        require(boughtCollateral > 0, \"IncreasingDiscountCollateralAuctionHouse/null-bought-amount\");\n        // update the amount of collateral to sell\n        bids[id].amountToSell = subtract(bids[id].amountToSell, boughtCollateral);\n\n        // update remainingToRaise in case amountToSell is zero (everything has been sold)\n        uint256 remainingToRaise = (either(multiply(wad, RAY) >= bids[id].amountToRaise, bids[id].amountToSell == 0)) ?\n            bids[id].amountToRaise : subtract(bids[id].amountToRaise, multiply(wad, RAY));\n\n        // update leftover amount to raise in the bid struct\n        bids[id].amountToRaise = (multiply(adjustedBid, RAY) > bids[id].amountToRaise) ?\n            0 : subtract(bids[id].amountToRaise, multiply(adjustedBid, RAY));\n\n        // check that the remaining amount to raise is either zero or higher than RAY\n        require(\n          either(bids[id].amountToRaise == 0, bids[id].amountToRaise >= RAY),\n          \"IncreasingDiscountCollateralAuctionHouse/invalid-left-to-raise\"\n        );\n\n        // transfer the bid to the income recipient and the collateral to the bidder\n        safeEngine.transferInternalCoins(msg.sender, bids[id].auctionIncomeRecipient, multiply(adjustedBid, RAY));\n        safeEngine.transferCollateral(collateralType, address(this), msg.sender, boughtCollateral);\n\n        // Emit the buy event\n        emit BuyCollateral(id, adjustedBid, boughtCollateral);\n\n        // Remove coins from the liquidation buffer\n        bool soldAll = either(bids[id].amountToRaise == 0, bids[id].amountToSell == 0);\n        if (soldAll) {\n            liquidationEngine.removeCoinsFromAuction(remainingToRaise);\n        } else {\n            liquidationEngine.removeCoinsFromAuction(multiply(adjustedBid, RAY));\n        }\n\n        // If the auction raised the whole amount or all collateral was sold,\n        // send remaining collateral to the forgone receiver\n        if (soldAll) {\n            safeEngine.transferCollateral(collateralType, address(this), bids[id].forgoneCollateralReceiver, bids[id].amountToSell);\n            delete bids[id];\n            emit SettleAuction(id, bids[id].amountToSell);\n        }\n    }\n    /**\n     * @notice Settle/finish an auction\n     * @param id ID of the auction to settle\n     */\n    function settleAuction(uint256 id) external {\n        return;\n    }\n    /**\n     * @notice Terminate an auction prematurely. Usually called by Global Settlement.\n     * @param id ID of the auction to settle\n     */\n    function terminateAuctionPrematurely(uint256 id) external isAuthorized {\n        require(both(bids[id].amountToSell > 0, bids[id].amountToRaise > 0), \"IncreasingDiscountCollateralAuctionHouse/inexistent-auction\");\n        liquidationEngine.removeCoinsFromAuction(bids[id].amountToRaise);\n        safeEngine.transferCollateral(collateralType, address(this), msg.sender, bids[id].amountToSell);\n        delete bids[id];\n        emit TerminateAuctionPrematurely(id, msg.sender, bids[id].amountToSell);\n    }\n\n    // --- Getters ---\n    function bidAmount(uint256 id) public view returns (uint256) {\n        return 0;\n    }\n    function remainingAmountToSell(uint256 id) public view returns (uint256) {\n        return bids[id].amountToSell;\n    }\n    function forgoneCollateralReceiver(uint256 id) public view returns (address) {\n        return bids[id].forgoneCollateralReceiver;\n    }\n    function raisedAmount(uint256 id) public view returns (uint256) {\n        return 0;\n    }\n    function amountToRaise(uint256 id) public view returns (uint256) {\n        return bids[id].amountToRaise;\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationEngine_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtCollateral\",\"type\":\"uint256\"}],\"name\":\"BuyCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftoverCollateral\",\"type\":\"uint256\"}],\"name\":\"SettleAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionsStarted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountToRaise\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forgoneCollateralReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionIncomeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDeadline\",\"type\":\"uint256\"}],\"name\":\"StartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"TerminateAuctionPrematurely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_HOUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"amountToRaise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionsStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raisedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"auctionDeadline\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"forgoneCollateralReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionIncomeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"buyCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFSM\",\"outputs\":[{\"internalType\":\"contract OracleLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"forgoneCollateralReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"getAdjustedBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"getApproximateCollateralBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"getCollateralBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"systemCoinRedemptionPrice\",\"type\":\"uint256\"}],\"name\":\"getCollateralFSMAndFinalSystemCoinPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralMedianPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceFeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralFsmPriceFeedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralMedianPriceFeedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemCoinPriceFeedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customDiscount\",\"type\":\"uint256\"}],\"name\":\"getDiscountedCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralFsmPriceFeedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralMedianPriceFeedValue\",\"type\":\"uint256\"}],\"name\":\"getFinalBaseCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"name\":\"getSystemCoinCeilingDeviatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ceilingPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"name\":\"getSystemCoinFloorDeviatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemCoinMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceFeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReadRedemptionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract LiquidationEngineLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerCollateralMedianDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerSystemCoinMedianDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSystemCoinMedianDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"remainingAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike_5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forgoneCollateralReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionIncomeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialBid\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemCoinOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"terminateAuctionPrematurely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctionLength\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperCollateralMedianDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperSystemCoinMedianDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FixedDiscountCollateralAuctionHouse", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e6afa340851d60e75be38494813c09b3356a0090000000000000000000000003efbb71321db24810e8361a42218dc6e4225e9814f4345414e2d4100000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}