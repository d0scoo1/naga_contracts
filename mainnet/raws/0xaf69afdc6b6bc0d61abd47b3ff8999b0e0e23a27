{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**\r\n * @title Small library for working with strings\r\n * @author yearn.finance\r\n */\r\n\r\nlibrary Strings {\r\n  /**\r\n   * @notice Search for a needle in a haystack\r\n   * @param haystack The string to search\r\n   * @param needle The string to search for\r\n   */\r\n  function stringStartsWith(string memory haystack, string memory needle)\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return indexOfStringInString(needle, haystack) == 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Find the index of a string in another string\r\n   * @param needle The string to search for\r\n   * @param haystack The string to search\r\n   * @return Returns -1 if no match is found, otherwise returns the index of the match\r\n   */\r\n  function indexOfStringInString(string memory needle, string memory haystack)\r\n    public\r\n    pure\r\n    returns (int256)\r\n  {\r\n    bytes memory _needle = bytes(needle);\r\n    bytes memory _haystack = bytes(haystack);\r\n    if (_haystack.length < _needle.length) {\r\n      return -1;\r\n    }\r\n    bool _match;\r\n    for (uint256 haystackIdx; haystackIdx < _haystack.length; haystackIdx++) {\r\n      for (uint256 needleIdx; needleIdx < _needle.length; needleIdx++) {\r\n        uint8 needleChar = uint8(_needle[needleIdx]);\r\n        if (haystackIdx + needleIdx >= _haystack.length) {\r\n          return -1;\r\n        }\r\n        uint8 haystackChar = uint8(_haystack[haystackIdx + needleIdx]);\r\n        if (needleChar == haystackChar) {\r\n          _match = true;\r\n          if (needleIdx == _needle.length - 1) {\r\n            return int256(haystackIdx);\r\n          }\r\n        } else {\r\n          _match = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * @notice Check to see if two strings are exactly equal\r\n   * @dev Supports strings of arbitrary length\r\n   * @param input0 First string to compare\r\n   * @param input1 Second string to compare\r\n   * @return Returns true if strings are exactly equal, false if not\r\n   */\r\n  function stringsEqual(string memory input0, string memory input1)\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    uint256 input0Length = bytes(input0).length;\r\n    uint256 input1Length = bytes(input1).length;\r\n    uint256 maxLength;\r\n    if (input0Length > input1Length) {\r\n      maxLength = input0Length;\r\n    } else {\r\n      maxLength = input1Length;\r\n    }\r\n    uint256 numberOfRowsToCompare = (maxLength / 32) + 1;\r\n    bytes32 input0Bytes32;\r\n    bytes32 input1Bytes32;\r\n    for (uint256 rowIdx; rowIdx < numberOfRowsToCompare; rowIdx++) {\r\n      uint256 offset = 0x20 * (rowIdx + 1);\r\n      assembly {\r\n        input0Bytes32 := mload(add(input0, offset))\r\n        input1Bytes32 := mload(add(input1, offset))\r\n      }\r\n      if (input0Bytes32 != input1Bytes32) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Convert ASCII to integer\r\n   * @param input Integer as a string (ie. \"345\")\r\n   * @param base Base to use for the conversion (10 for decimal)\r\n   * @return output Returns uint256 representation of input string\r\n   * @dev Based on GemERC721 utility but includes a fix\r\n   */\r\n  function atoi(string memory input, uint8 base)\r\n    public\r\n    pure\r\n    returns (uint256 output)\r\n  {\r\n    require(base == 2 || base == 8 || base == 10 || base == 16);\r\n    bytes memory buf = bytes(input);\r\n    for (uint256 idx = 0; idx < buf.length; idx++) {\r\n      uint8 digit = uint8(buf[idx]) - 0x30;\r\n      if (digit > 10) {\r\n        digit -= 7;\r\n      }\r\n      require(digit < base);\r\n      output *= base;\r\n      output += digit;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @notice Convert integer to ASCII\r\n   * @param input Integer as a string (ie. \"345\")\r\n   * @param base Base to use for the conversion (10 for decimal)\r\n   * @return output Returns string representation of input integer\r\n   * @dev Based on GemERC721 utility but includes a fix\r\n   */\r\n  function itoa(uint256 input, uint8 base)\r\n    public\r\n    pure\r\n    returns (string memory output)\r\n  {\r\n    require(base == 2 || base == 8 || base == 10 || base == 16);\r\n    if (input == 0) {\r\n      return \"0\";\r\n    }\r\n    bytes memory buf = new bytes(256);\r\n    uint256 idx = 0;\r\n    while (input > 0) {\r\n      uint8 digit = uint8(input % base);\r\n      uint8 ascii = digit + 0x30;\r\n      if (digit > 9) {\r\n        ascii += 7;\r\n      }\r\n      buf[idx++] = bytes1(ascii);\r\n      input /= base;\r\n    }\r\n    uint256 length = idx;\r\n    for (idx = 0; idx < length / 2; idx++) {\r\n      buf[idx] ^= buf[length - 1 - idx];\r\n      buf[length - 1 - idx] ^= buf[idx];\r\n      buf[idx] ^= buf[length - 1 - idx];\r\n    }\r\n    output = string(buf);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"base\",\"type\":\"uint8\"}],\"name\":\"atoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"needle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"haystack\",\"type\":\"string\"}],\"name\":\"indexOfStringInString\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"base\",\"type\":\"uint8\"}],\"name\":\"itoa\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"haystack\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"needle\",\"type\":\"string\"}],\"name\":\"stringStartsWith\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input0\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"input1\",\"type\":\"string\"}],\"name\":\"stringsEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Strings", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92f9c71c4131f931143105141b28d11854cc2cffa4c7e21bcd67d9d2c76721a9"}]}