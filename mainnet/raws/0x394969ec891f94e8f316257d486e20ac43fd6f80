{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nhttps://t.me/ETHEREUM_DOUBLE\r\n\r\nsend eth get 2x back\r\n*/\r\npragma solidity 0.8.13;\r\n//SPDX-License-Identifier:None\r\ncontract Doubler {\r\n\r\n    modifier onlyOwner() {require(owner == msg.sender, \"Ownable: caller is not the owner\");_;}\r\n\r\n    address payable public owner;\r\n    uint256 public maxValue;\r\n    uint256 public devFee; //perkilo\r\n\r\n    bool public locked = false;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public deposits;\r\n    uint256 public depositCount;\r\n\r\n    address[] public queue;\r\n    uint256 public index = 0;\r\n\r\n    constructor(uint256 _value, uint256 _devFee){\r\n        owner = payable(msg.sender);\r\n        maxValue = _value;\r\n        devFee = _devFee;\r\n    }\r\n\r\n    receive() external payable { \r\n        require(msg.value <= maxValue, string(abi.encodePacked(\"Must send \",maxValue,\" ETH max.\")));\r\n        require(!locked, \"Reentrant call detected!\");\r\n        locked = true;\r\n        queue.push(msg.sender);\r\n        deposits[msg.sender][depositCount] = msg.value;\r\n        depositCount++;\r\n\r\n        address nextUp = queue[index];\r\n\r\n        // Payout if enough eth in contract\r\n        if(address(this).balance >= deposits[nextUp][index] * 2){\r\n            index++;\r\n            _transfer(nextUp, deposits[nextUp][index] * 2);\r\n        }\r\n\r\n        _transfer(owner, msg.value * devFee / 1000);\r\n        locked = false;\r\n    }\r\n\r\n    function _transfer(address destination, uint256 amount) internal{\r\n        payable(destination).transfer(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Doubler", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0bfbaf6b896fab1b3b2676b2c7526380ed43be6433b339136bc7a3c563be78c"}]}