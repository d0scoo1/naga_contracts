{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Party.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title RaidParty Party Contract\\n\\n/**\\n *   ___      _    _ ___          _\\n *  | _ \\\\__ _(_)__| | _ \\\\__ _ _ _| |_ _  _\\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\\n *  |_|_\\\\__,_|_\\\\__,_|_| \\\\__,_|_|  \\\\__|\\\\_, |\\n *                                    |__/\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../utils/Enhancer.sol\\\";\\nimport \\\"../interfaces/IParty.sol\\\";\\nimport \\\"../interfaces/IDamageCalculator.sol\\\";\\nimport \\\"../interfaces/IHero.sol\\\";\\nimport \\\"../interfaces/IFighter.sol\\\";\\nimport \\\"../interfaces/IEnhanceable.sol\\\";\\nimport \\\"../interfaces/IRaid.sol\\\";\\nimport \\\"../lib/Damage.sol\\\";\\n\\ncontract Party is\\n    IParty,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    Enhancer,\\n    ERC1155ReceiverUpgradeable,\\n    ERC721HolderUpgradeable\\n{\\n    using Damage for Damage.DamageComponent;\\n\\n    uint256 private constant FIGHTER_SLOTS = 16;\\n\\n    IRaid private _raid;\\n    IDamageCalculator private _damageCalculator;\\n    IHero private _hero;\\n    IFighter private _fighter;\\n    IERC20Upgradeable private _confetti;\\n\\n    mapping(address => mapping(uint256 => address)) private _ownership;\\n    mapping(address => PartyData) private _parties;\\n    mapping(address => Damage.DamageComponent) private _damage;\\n\\n    function initialize(\\n        address admin,\\n        IERC20Upgradeable confetti,\\n        IHero hero,\\n        IFighter fighter,\\n        IDamageCalculator damageCalculator\\n    ) external initializer {\\n        __AccessControl_init();\\n        _confetti = confetti;\\n        _hero = hero;\\n        _fighter = fighter;\\n        _damageCalculator = damageCalculator;\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /** Getters / Setters */\\n\\n    function getHero() external view returns (IHero) {\\n        return _hero;\\n    }\\n\\n    function getFighter() external view returns (IFighter) {\\n        return _fighter;\\n    }\\n\\n    function getDamageCalculator() external view returns (IDamageCalculator) {\\n        return _damageCalculator;\\n    }\\n\\n    function setDamageCalculator(IDamageCalculator calculator)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _damageCalculator = calculator;\\n    }\\n\\n    function getRaid() external view returns (IRaid) {\\n        return _raid;\\n    }\\n\\n    function setRaid(IRaid raid) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _raid = raid;\\n    }\\n\\n    function getConfetti() external view returns (IERC20Upgradeable) {\\n        return _confetti;\\n    }\\n\\n    function getUserHero(address user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _parties[user].hero;\\n    }\\n\\n    function getUserFighters(address user)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory fighters = new uint256[](FIGHTER_SLOTS);\\n        for (uint8 i = 0; i < FIGHTER_SLOTS; i++) {\\n            fighters[i] = _parties[user].fighters[i];\\n        }\\n        return fighters;\\n    }\\n\\n    function getDamage(address user) external view override returns (uint32) {\\n        return _getDamage(user);\\n    }\\n\\n    /** UTILITY */\\n\\n    // Force update damage\\n    function updateDamage() external {\\n        uint32 dmg = uint32(_getDamage(msg.sender));\\n        _raid.updateDamage(msg.sender, dmg);\\n\\n        emit DamageUpdated(msg.sender, dmg);\\n    }\\n\\n    // Enhances a given item (hero / fighter) without requiring the token be withdrawn\\n    function enhance(\\n        Property item,\\n        uint8 slot,\\n        uint256 burnTokenId\\n    ) external {\\n        require(\\n            item == Property.HERO || item == Property.FIGHTER,\\n            \\\"Party::enhance: invalid item\\\"\\n        );\\n\\n        IEnhanceable handler;\\n        uint256 tokenId;\\n        IERC721Upgradeable token;\\n\\n        if (item == Property.HERO) {\\n            require(\\n                _parties[msg.sender].hero != 0,\\n                \\\"Party::enhance: hero not present\\\"\\n            );\\n\\n            token = IERC721Upgradeable(address(_hero));\\n            handler = IEnhanceable(address(_hero.getHandler()));\\n            tokenId = _parties[msg.sender].hero;\\n        } else {\\n            require(\\n                _parties[msg.sender].fighters[slot] != 0,\\n                \\\"Party::enhance: fighter not present\\\"\\n            );\\n\\n            token = IERC721Upgradeable(address(_fighter));\\n            handler = IEnhanceable(address(_fighter.getHandler()));\\n            tokenId = _parties[msg.sender].fighters[slot];\\n        }\\n\\n        (uint256 cost, bool shouldBurn) = handler.enhancementCost(tokenId);\\n\\n        if (shouldBurn) {\\n            token.safeTransferFrom(msg.sender, address(this), burnTokenId);\\n            token.approve(address(handler), burnTokenId);\\n        }\\n\\n        _confetti.transferFrom(msg.sender, address(this), cost);\\n        _confetti.approve(address(handler), cost);\\n        handler.enhance(tokenId, burnTokenId);\\n    }\\n\\n    // Act applies multiple actions (equip / unequip) for batch execution\\n    function act(\\n        Action[] calldata heroActions,\\n        Action[] calldata fighterActions\\n    ) external override {\\n        require(heroActions.length <= 1, \\\"Party::act: too many hero actions\\\");\\n\\n        uint256[] memory heroesEquipped;\\n        uint256[] memory heroesUnequipped;\\n        uint256[] memory fightersEquipped;\\n        uint256[] memory fightersUnequipped;\\n\\n        if (heroActions.length > 0) {\\n            (heroesEquipped, heroesUnequipped) = _act(\\n                Property.HERO,\\n                heroActions\\n            );\\n        }\\n\\n        if (fighterActions.length > 0) {\\n            (fightersEquipped, fightersUnequipped) = _act(\\n                Property.FIGHTER,\\n                fighterActions\\n            );\\n        }\\n\\n        if (heroesEquipped.length > 0) {\\n            _validateParty(msg.sender);\\n        }\\n\\n        Damage.DamageComponent[] memory curr = _damageCalculator\\n            .getDamageComponents(heroesEquipped, fightersEquipped);\\n\\n        Damage.DamageComponent[] memory prev = _damageCalculator\\n            .getDamageComponents(heroesUnequipped, fightersUnequipped);\\n\\n        _updateDamage(msg.sender, prev, curr);\\n    }\\n\\n    // Equip applies an item to the callers party\\n    function equip(\\n        Property item,\\n        uint256 id,\\n        uint8 slot\\n    ) public override {\\n        uint256 unequipped = _equip(item, id, slot);\\n\\n        Damage.DamageComponent[] memory prev;\\n        Damage.DamageComponent[] memory curr = new Damage.DamageComponent[](1);\\n\\n        if (unequipped != 0) {\\n            prev = new Damage.DamageComponent[](1);\\n        }\\n\\n        if (item == Property.HERO) {\\n            if (unequipped != 0) {\\n                prev[0] = _damageCalculator.getHeroDamageComponent(unequipped);\\n            }\\n\\n            curr[0] = _damageCalculator.getHeroDamageComponent(id);\\n            _validateParty(msg.sender);\\n        } else if (item == Property.FIGHTER) {\\n            if (unequipped != 0) {\\n                prev[0] = _damageCalculator.getFighterDamageComponent(\\n                    unequipped\\n                );\\n            }\\n\\n            curr[0] = _damageCalculator.getFighterDamageComponent(id);\\n        }\\n\\n        _updateDamage(msg.sender, prev, curr);\\n    }\\n\\n    // Unequip removes an item from the callers party\\n    function unequip(Property item, uint8 slot) public override {\\n        uint256 unequipped = _unequip(item, slot);\\n        Damage.DamageComponent[] memory prev = new Damage.DamageComponent[](1);\\n\\n        if (item == Property.HERO) {\\n            prev[0] = _damageCalculator.getHeroDamageComponent(unequipped);\\n        } else if (item == Property.FIGHTER) {\\n            prev[0] = _damageCalculator.getFighterDamageComponent(unequipped);\\n        }\\n\\n        _updateDamage(msg.sender, prev, new Damage.DamageComponent[](0));\\n    }\\n\\n    // TODO: return excess fighters if psize decreases\\n    // Callback for damage updates upon enhancement\\n    function onEnhancement(uint256[] calldata ids, uint8[] calldata prev)\\n        public\\n        override\\n        returns (bytes4)\\n    {\\n        require(\\n            msg.sender == address(_fighter.getHandler()) ||\\n                msg.sender == address(_hero.getHandler()),\\n            \\\"Party::onEnhancement: sender must be fighter or hero\\\"\\n        );\\n\\n        if (msg.sender == address(_hero.getHandler())) {\\n            _updateDamageEnhancement(Property.HERO, ids, prev);\\n        } else {\\n            _updateDamageEnhancement(Property.FIGHTER, ids, prev);\\n        }\\n\\n        return super.onEnhancement(ids, prev);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155ReceiverUpgradeable.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector;\\n    }\\n\\n    /** INTERNAL */\\n\\n    // Compute a damage update given an array of components\\n    function _updateDamage(\\n        address user,\\n        Damage.DamageComponent[] memory prev,\\n        Damage.DamageComponent[] memory curr\\n    ) internal {\\n        _damage[user] = _damage[user].getDamageUpdate(prev, curr);\\n\\n        uint32 dmg = uint32(_getDamage(user));\\n        _raid.updateDamage(user, dmg);\\n\\n        emit DamageUpdated(user, dmg);\\n    }\\n\\n    // Compute damage update given a prev enhancement value\\n    function _updateDamageEnhancement(\\n        Property item,\\n        uint256[] memory ids,\\n        uint8[] memory prev\\n    ) internal {\\n        require(\\n            item == Property.HERO || item == Property.FIGHTER,\\n            \\\"Party::_updateDamageEnhancement: invalid item\\\"\\n        );\\n        require(\\n            ids.length == prev.length,\\n            \\\"Party::onEnhancement: input length mismatch\\\"\\n        );\\n        address token;\\n\\n        if (item == Property.HERO) {\\n            token = address(_hero);\\n        } else {\\n            token = address(_fighter);\\n        }\\n\\n        address owner = _ownership[token][ids[0]];\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(\\n                _ownership[address(token)][ids[i]] == owner,\\n                \\\"Party::onEnhancement: tokens not owned by the same user\\\"\\n            );\\n        }\\n\\n        // Check if party size was downgraded\\n        if (item == Property.HERO && prev[0] >= 5) {\\n            IHeroURIHandler handler = IHeroURIHandler(_hero.getHandler());\\n            Stats.HeroStats memory stats = handler.getStats(ids[0]);\\n            if (\\n                stats.enhancement < prev[0] &&\\n                _parties[owner].fighters[stats.partySize] != 0\\n            ) {\\n                Damage.DamageComponent[]\\n                    memory adjustPrev = new Damage.DamageComponent[](1);\\n                uint256 u = _unequip(Property.FIGHTER, stats.partySize);\\n                adjustPrev[0] = _damageCalculator.getFighterDamageComponent(u);\\n                _updateDamage(\\n                    owner,\\n                    adjustPrev,\\n                    new Damage.DamageComponent[](0)\\n                );\\n            }\\n        }\\n\\n        Damage.DamageComponent[] memory prevComponents;\\n        Damage.DamageComponent[] memory currComponents;\\n\\n        if (item == Property.HERO) {\\n            prevComponents = _damageCalculator.getHeroEnhancementComponents(\\n                ids,\\n                prev\\n            );\\n            currComponents = _damageCalculator.getDamageComponents(\\n                ids,\\n                new uint256[](0)\\n            );\\n        } else {\\n            prevComponents = _damageCalculator.getFighterEnhancementComponents(\\n                ids,\\n                prev\\n            );\\n            currComponents = _damageCalculator.getDamageComponents(\\n                new uint256[](0),\\n                ids\\n            );\\n        }\\n\\n        _damage[owner] = _damage[owner].getDamageUpdate(\\n            prevComponents,\\n            currComponents\\n        );\\n\\n        uint32 dpb = uint32(_getDamage(owner));\\n        _raid.updateDamage(owner, dpb);\\n\\n        emit DamageUpdated(owner, dpb);\\n    }\\n\\n    function _equip(\\n        Property item,\\n        uint256 id,\\n        uint8 slot\\n    ) internal returns (uint256 unequipped) {\\n        require(\\n            item == Property.HERO || item == Property.FIGHTER,\\n            \\\"Party::enhance: invalid item\\\"\\n        );\\n\\n        if (item == Property.HERO) {\\n            // Handle hero equip\\n            if (_parties[msg.sender].hero != 0) {\\n                unequipped = _unequip(item, 0);\\n            }\\n\\n            _ownership[address(_hero)][id] = msg.sender;\\n            _parties[msg.sender].hero = id;\\n            _hero.safeTransferFrom(msg.sender, address(this), id);\\n        } else if (item == Property.FIGHTER) {\\n            // Handle fighter equip\\n            Stats.HeroStats memory stats = IHeroURIHandler(_hero.getHandler())\\n                .getStats(_parties[msg.sender].hero);\\n            require(slot < stats.partySize, \\\"Party::equip: bad slot\\\");\\n\\n            if (_parties[msg.sender].fighters[slot] != 0) {\\n                unequipped = _unequip(item, slot);\\n            }\\n\\n            _ownership[address(_fighter)][id] = msg.sender;\\n            _parties[msg.sender].fighters[slot] = id;\\n            _fighter.safeTransferFrom(msg.sender, address(this), id);\\n        }\\n\\n        emit Equipped(msg.sender, uint8(item), slot, id);\\n    }\\n\\n    function _unequip(Property item, uint8 slot) internal returns (uint256 id) {\\n        require(\\n            item == Property.HERO || item == Property.FIGHTER,\\n            \\\"Party::enhance: invalid item\\\"\\n        );\\n\\n        id = 0;\\n\\n        if (item == Property.HERO) {\\n            id = _parties[msg.sender].hero;\\n            require(id != 0, \\\"Party::unequip: hero not present\\\");\\n\\n            _parties[msg.sender].hero = 0;\\n            _ownership[address(_hero)][id] = address(0);\\n            _hero.safeTransferFrom(address(this), msg.sender, id);\\n        } else if (item == Property.FIGHTER) {\\n            id = _parties[msg.sender].fighters[slot];\\n            require(id != 0, \\\"Party::unequip: fighter not present\\\");\\n\\n            _parties[msg.sender].fighters[slot] = 0;\\n            _ownership[address(_fighter)][id] = address(0);\\n            _fighter.safeTransferFrom(address(this), msg.sender, id);\\n        }\\n\\n        emit Unequipped(msg.sender, uint8(item), slot, id);\\n    }\\n\\n    function _act(Property item, Action[] calldata actions)\\n        internal\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory equipped = new uint256[](actions.length);\\n        uint256[] memory unequipped = new uint256[](actions.length);\\n\\n        uint256 u = 0;\\n\\n        (uint256 equipCounter, uint256 unequipCounter) = (0, 0);\\n\\n        // Perform actions\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            if (actions[i].action == ActionType.EQUIP) {\\n                u = _equip(item, actions[i].id, actions[i].slot);\\n\\n                equipped[equipCounter] = actions[i].id;\\n                equipCounter += 1;\\n            } else {\\n                u = _unequip(item, actions[i].slot);\\n            }\\n\\n            if (u != 0) {\\n                unequipped[unequipCounter] = u;\\n                unequipCounter += 1;\\n            }\\n        }\\n\\n        // Reset counters and resize arrays\\n        assembly {\\n            mstore(\\n                equipped,\\n                sub(mload(equipped), sub(actions.length, equipCounter))\\n            )\\n            mstore(\\n                unequipped,\\n                sub(mload(unequipped), sub(actions.length, unequipCounter))\\n            )\\n        }\\n\\n        return (equipped, unequipped);\\n    }\\n\\n    function _validateParty(address user) internal view {\\n        Stats.HeroStats memory stats = IHeroURIHandler(_hero.getHandler())\\n            .getStats(_parties[user].hero);\\n\\n        for (uint256 i = stats.partySize; i < FIGHTER_SLOTS; i++) {\\n            require(\\n                _parties[user].fighters[i] == 0,\\n                \\\"Party::_equip: hero slot mismatch\\\"\\n            );\\n        }\\n    }\\n\\n    function _getDamage(address user) internal view returns (uint32) {\\n        uint256 heroId = _parties[user].hero;\\n        uint32 adj;\\n\\n        if (heroId == 0) {\\n            return 0;\\n        } else if (heroId <= 1111) {\\n            adj = 1100;\\n        } else {\\n            adj = 800;\\n        }\\n\\n        return uint32(_damage[user].computeDamage()) + adj;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Enhancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title RaidParty Helper Contract for Enhancers\\n\\n/**\\n *   ___      _    _ ___          _\\n *  | _ \\\\__ _(_)__| | _ \\\\__ _ _ _| |_ _  _\\n *  |   / _` | / _` |  _/ _` | '_|  _| || |\\n *  |_|_\\\\__,_|_\\\\__,_|_| \\\\__,_|_|  \\\\__|\\\\_, |\\n *                                    |__/\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IEnhancer.sol\\\";\\n\\ncontract Enhancer is IEnhancer {\\n    function onEnhancement(uint256[] calldata, uint8[] calldata)\\n        public\\n        virtual\\n        override\\n        returns (bytes4)\\n    {\\n        return this.onEnhancement.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IParty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Stats.sol\\\";\\n\\ninterface IParty {\\n    event Equipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\n\\n    event Unequipped(address indexed user, uint8 item, uint8 slot, uint256 id);\\n\\n    event DamageUpdated(address indexed user, uint32 damageCurr);\\n\\n    struct PartyData {\\n        uint256 hero;\\n        mapping(uint256 => uint256) fighters;\\n    }\\n\\n    struct Action {\\n        ActionType action;\\n        uint256 id;\\n        uint8 slot;\\n    }\\n\\n    enum Property {\\n        HERO,\\n        FIGHTER\\n    }\\n\\n    enum ActionType {\\n        UNEQUIP,\\n        EQUIP\\n    }\\n\\n    function act(\\n        Action[] calldata heroActions,\\n        Action[] calldata fighterActions\\n    ) external;\\n\\n    function equip(\\n        Property item,\\n        uint256 id,\\n        uint8 slot\\n    ) external;\\n\\n    function unequip(Property item, uint8 slot) external;\\n\\n    function enhance(\\n        Property item,\\n        uint8 slot,\\n        uint256 burnTokenId\\n    ) external;\\n\\n    function getUserHero(address user) external view returns (uint256);\\n\\n    function getUserFighters(address user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getDamage(address user) external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDamageCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Stats.sol\\\";\\nimport \\\"../lib/Damage.sol\\\";\\n\\ninterface IDamageCalculator {\\n    function getDamageComponents(\\n        uint256[] calldata heroIds,\\n        uint256[] calldata fighterIds\\n    ) external view returns (Damage.DamageComponent[] memory);\\n\\n    function getHeroEnhancementComponents(\\n        uint256[] calldata ids,\\n        uint8[] calldata prev\\n    ) external view returns (Damage.DamageComponent[] memory);\\n\\n    function getFighterEnhancementComponents(\\n        uint256[] calldata ids,\\n        uint8[] calldata prev\\n    ) external view returns (Damage.DamageComponent[] memory);\\n\\n    function getHeroDamageComponent(uint256 id)\\n        external\\n        view\\n        returns (Damage.DamageComponent memory);\\n\\n    function getFighterDamageComponent(uint256 id)\\n        external\\n        view\\n        returns (Damage.DamageComponent memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHero.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRaidERC721.sol\\\";\\nimport \\\"./IHeroURIHandler.sol\\\";\\nimport \\\"./ISeeder.sol\\\";\\n\\ninterface IHero is IRaidERC721 {\\n    event HandlerUpdated(address indexed caller, address indexed handler);\\n\\n    function setHandler(IHeroURIHandler handler) external;\\n\\n    function getHandler() external view returns (address);\\n\\n    function getSeeder() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFighter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IRaidERC721.sol\\\";\\nimport \\\"./IFighterURIHandler.sol\\\";\\nimport \\\"./ISeeder.sol\\\";\\n\\ninterface IFighter is IRaidERC721 {\\n    event HandlerUpdated(address indexed caller, address indexed handler);\\n\\n    function setHandler(IFighterURIHandler handler) external;\\n\\n    function getHandler() external view returns (address);\\n\\n    function getSeeder() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEnhanceable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEnhanceable {\\n    struct EnhancementRequest {\\n        uint256 id;\\n        address requester;\\n    }\\n\\n    event EnhancementRequested(\\n        uint256 indexed tokenId,\\n        uint256 indexed timestamp\\n    );\\n\\n    event EnhancementCompleted(\\n        uint256 indexed tokenId,\\n        uint256 indexed timestamp,\\n        bool success,\\n        bool degraded\\n    );\\n\\n    event SeederUpdated(address indexed caller, address indexed seeder);\\n\\n    function enhancementCost(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256, bool);\\n\\n    function enhance(uint256 tokenId, uint256 burnTokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRaid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRaid {\\n    struct Round {\\n        uint16 boss;\\n        uint32 roll;\\n        uint32 startBlock;\\n        uint32 finalBlock;\\n    }\\n\\n    struct Raider {\\n        uint32 dpb;\\n        uint32 startedAt;\\n        uint32 startBlock;\\n        uint32 startRound;\\n        uint32 startSnapshot;\\n        uint256 pendingRewards;\\n    }\\n\\n    struct Boss {\\n        uint32 weight;\\n        uint32 blockHealth;\\n        uint128 multiplier;\\n    }\\n\\n    struct Snapshot {\\n        uint32 initialBlock;\\n        uint32 initialRound;\\n        uint32 finalBlock;\\n        uint32 finalRound;\\n        uint256 attackDealt;\\n    }\\n\\n    struct RaidData {\\n        uint16 boss;\\n        uint32 roundId;\\n        uint32 health;\\n        uint32 maxHealth;\\n        uint256 seed;\\n    }\\n\\n    function updateDamage(address user, uint32 _dpb) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Damage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Damage {\\n    struct DamageComponent {\\n        uint32 m;\\n        uint32 d;\\n    }\\n\\n    uint256 public constant PRECISION = 10;\\n\\n    function computeDamage(DamageComponent memory dmg)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return (dmg.m * dmg.d) / PRECISION;\\n    }\\n\\n    // This function assumes a hero is equipped after state change\\n    function getDamageUpdate(\\n        Damage.DamageComponent calldata dmg,\\n        Damage.DamageComponent[] calldata removed,\\n        Damage.DamageComponent[] calldata added\\n    ) public pure returns (Damage.DamageComponent memory) {\\n        Damage.DamageComponent memory updatedDmg = Damage.DamageComponent(\\n            dmg.m,\\n            dmg.d\\n        );\\n\\n        for (uint256 i = 0; i < removed.length; i++) {\\n            updatedDmg.m -= removed[i].m;\\n            updatedDmg.d -= removed[i].d;\\n        }\\n\\n        for (uint256 i = 0; i < added.length; i++) {\\n            updatedDmg.m += added[i].m;\\n            updatedDmg.d += added[i].d;\\n        }\\n\\n        return updatedDmg;\\n    }\\n\\n    // This function assumes a hero is equipped after state change\\n    function getDamageUpdate(\\n        Damage.DamageComponent calldata dmg,\\n        Damage.DamageComponent calldata removed,\\n        Damage.DamageComponent calldata added\\n    ) public pure returns (Damage.DamageComponent memory) {\\n        Damage.DamageComponent memory updatedDmg = Damage.DamageComponent(\\n            dmg.m,\\n            dmg.d\\n        );\\n\\n        updatedDmg.m -= removed.m;\\n        updatedDmg.d -= removed.d;\\n\\n        updatedDmg.m += added.m;\\n        updatedDmg.d += added.d;\\n\\n        return updatedDmg;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEnhancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEnhancer {\\n    function onEnhancement(uint256[] calldata, uint8[] calldata)\\n        external\\n        returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Stats {\\n    struct HeroStats {\\n        uint8 dmgMultiplier;\\n        uint8 partySize;\\n        uint8 enhancement;\\n    }\\n\\n    struct FighterStats {\\n        uint32 dmg;\\n        uint8 enhancement;\\n    }\\n\\n    struct EquipmentStats {\\n        uint32 dmg;\\n        uint8 dmgMultiplier;\\n        uint8 slot;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRaidERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IRaidERC721 is IERC721 {\\n    function getSeeder() external view returns (address);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function tokensOfOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function mint(address owner, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHeroURIHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IEnhanceable.sol\\\";\\nimport \\\"../lib/Stats.sol\\\";\\n\\ninterface IHeroURIHandler is IEnhanceable {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function getStats(uint256 tokenId)\\n        external\\n        view\\n        returns (Stats.HeroStats memory);\\n\\n    function getSeeder() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Randomness.sol\\\";\\n\\ninterface ISeeder {\\n    event Requested(address indexed origin, uint256 indexed identifier);\\n\\n    event Seeded(bytes32 identifier, uint256 randomness);\\n\\n    function getIdReferenceCount(\\n        bytes32 randomnessId,\\n        address origin,\\n        uint256 startIdx\\n    ) external view returns (uint256);\\n\\n    function getIdentifiers(\\n        bytes32 randomnessId,\\n        address origin,\\n        uint256 startIdx,\\n        uint256 count\\n    ) external view returns (uint256[] memory);\\n\\n    function requestSeed(uint256 identifier) external;\\n\\n    function getSeed(address origin, uint256 identifier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSeedSafe(address origin, uint256 identifier)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function executeRequestMulti() external;\\n\\n    function isSeeded(address origin, uint256 identifier)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setFee(uint256 fee) external;\\n\\n    function getFee() external view returns (uint256);\\n\\n    function getData(address origin, uint256 identifier)\\n        external\\n        view\\n        returns (Randomness.SeedData memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Randomness.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Randomness {\\n    struct SeedData {\\n        uint256 batch;\\n        bytes32 randomnessId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFighterURIHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IEnhanceable.sol\\\";\\nimport \\\"../lib/Stats.sol\\\";\\n\\ninterface IFighterURIHandler is IEnhanceable {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function getStats(uint256 tokenId)\\n        external\\n        view\\n        returns (Stats.FighterStats memory);\\n\\n    function getSeeder() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/Damage.sol\": {\r\n        \"Damage\": \"0x9636708935a7b19523556dd1e5ae84a44bf48451\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"damageCurr\",\"type\":\"uint32\"}],\"name\":\"DamageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"item\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Equipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"item\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unequipped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IParty.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct IParty.Action[]\",\"name\":\"heroActions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum IParty.ActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"internalType\":\"struct IParty.Action[]\",\"name\":\"fighterActions\",\"type\":\"tuple[]\"}],\"name\":\"act\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IParty.Property\",\"name\":\"item\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"burnTokenId\",\"type\":\"uint256\"}],\"name\":\"enhance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IParty.Property\",\"name\":\"item\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfetti\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDamage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDamageCalculator\",\"outputs\":[{\"internalType\":\"contract IDamageCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFighter\",\"outputs\":[{\"internalType\":\"contract IFighter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHero\",\"outputs\":[{\"internalType\":\"contract IHero\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaid\",\"outputs\":[{\"internalType\":\"contract IRaid\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFighters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserHero\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"confetti\",\"type\":\"address\"},{\"internalType\":\"contract IHero\",\"name\":\"hero\",\"type\":\"address\"},{\"internalType\":\"contract IFighter\",\"name\":\"fighter\",\"type\":\"address\"},{\"internalType\":\"contract IDamageCalculator\",\"name\":\"damageCalculator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"prev\",\"type\":\"uint8[]\"}],\"name\":\"onEnhancement\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDamageCalculator\",\"name\":\"calculator\",\"type\":\"address\"}],\"name\":\"setDamageCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRaid\",\"name\":\"raid\",\"type\":\"address\"}],\"name\":\"setRaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IParty.Property\",\"name\":\"item\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDamage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Party", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}