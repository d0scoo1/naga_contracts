{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Interfaces\r\ninterface IERC165 {\r\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external payable;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n  function approve(address _to, uint256 _tokenId) external payable;\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n  function getApproved(uint256 _tokenId) external view returns (address operator);\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Metadata {\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\nlibrary LibPart {\r\n  bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\r\n  struct Part {\r\n    address payable account;\r\n    uint256 value;\r\n  }\r\n  function hash(Part memory part) internal pure returns (bytes32) {\r\n    return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\r\n  }\r\n}\r\n\r\n// Abstract Contracts\r\nabstract contract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\nabstract contract Mintable {\r\n  mapping (address => bool) public minters;\r\n\r\n  constructor() {\r\n    minters[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(minters[msg.sender], \"Mintable: caller is not the minter\");\r\n    _;\r\n  }\r\n\r\n  function setMinter(address _minter) public virtual onlyMinter {\r\n    require(_minter != address(0), \"Mintable: new minter is the zero address\");\r\n    minters[_minter] = true;\r\n  }\r\n\r\n  function removeMinter(address _minter) external onlyMinter returns (bool) {\r\n    require(minters[_minter], \"Mintable: _minter is not a minter\");\r\n    minters[_minter] = false;\r\n    return true;\r\n  }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n    _status = _ENTERED;\r\n    _;\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\n// Contract\r\ncontract ShizTest is Ownable, Mintable, ReentrancyGuard {\r\n  // ERC721\r\n  mapping(uint256 => address) private _owners;\r\n  mapping(address => uint256) private _balances;\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalities);\r\n\r\n  // Constants\r\n  bytes4 private constant _INTERFACE_ID_ROYALTIES = 0xcad96cca; // Rarible\r\n  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a; // ERC2981\r\n\r\n  // ERC721Metadata\r\n  string public name = 'ShizTest';\r\n  string public symbol = 'TSZ';\r\n\r\n  // ERC721Enumerable\r\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n  uint256[] private _allTokens;\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  // Rarible\r\n  mapping (uint256 => LibPart.Part[]) internal royalties;\r\n  LibPart.Part internal globalRoyalty;\r\n\r\n  // Customized\r\n  mapping(uint256 => TokenInfo) public tokenInfo; // tokenId => traitCode\r\n  mapping(bytes12 => uint256) public traitCodeIndex; // traitCode => tokenId\r\n\r\n  struct TokenInfo {\r\n    bytes12 traitCode;\r\n    string metadataHash;\r\n    string contentHash;\r\n  }\r\n    \r\n  // Constructor\r\n  constructor() {}\r\n\r\n  // ERC165\r\n  function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n    return\r\n      interfaceId == type(IERC165).interfaceId ||\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      interfaceId == _INTERFACE_ID_ROYALTIES ||\r\n      interfaceId == _INTERFACE_ID_ERC2981;\r\n  }\r\n\r\n  // Customized (public)\r\n  function mint(\r\n    address _to,\r\n    bytes12 _traitCode,\r\n    string memory _metadataHash,\r\n    string memory _contentHash) external onlyMinter returns (bool) {\r\n\r\n    _mint(_to, _traitCode, _metadataHash, _contentHash);\r\n\r\n    return true;\r\n  }\r\n\r\n  // ERC721 (public)\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n    return _balances[owner];\r\n  }\r\n\r\n  function ownerOf(uint256 tokenId) public view returns (address) {\r\n    address tokenOwner = _owners[tokenId];\r\n    require(tokenOwner != address(0), \"ERC721: owner query for nonexistent token\");\r\n    return tokenOwner;\r\n  }\r\n\r\n  function approve(address to, uint256 tokenId) public returns (bool) {\r\n    address owner = ownerOf(tokenId);\r\n    require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n    require(\r\n      msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n      \"ERC721: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId);\r\n    return true;\r\n  }\r\n\r\n  function getApproved(uint256 tokenId) public view returns (address) {\r\n    require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  function setApprovalForAll(address operator, bool approved) public returns (bool) {\r\n    require(operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n    _operatorApprovals[msg.sender][operator] = approved;\r\n    emit ApprovalForAll(msg.sender, operator, approved);\r\n    return true;\r\n  }\r\n\r\n  function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 tokenId) public returns (bool) {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _transfer(from, to, tokenId);\r\n    return true;\r\n  }\r\n\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public returns (bool) {\r\n    require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    _safeTransfer(from, to, tokenId, _data);\r\n    return true;\r\n  }\r\n\r\n  // ERC721 (private)\r\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) private {\r\n    _transfer(from, to, tokenId);\r\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n  }\r\n\r\n  function _exists(uint256 tokenId) private view returns (bool) {\r\n    return _owners[tokenId] != address(0);\r\n  }\r\n\r\n  function _isApprovedOrOwner(address spender, uint256 tokenId) private view returns (bool) {\r\n    require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    address owner = ownerOf(tokenId);\r\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n  }\r\n\r\n  function _mint(\r\n    address _to,\r\n    bytes12 _traitCode,\r\n    string memory _metadataHash,\r\n    string memory _contentHash) private {\r\n    \r\n    uint256 tokenId = _allTokens.length + 1;\r\n\r\n    require(tokenId > 0, \"Shizuk: tokenId should be non-zero\");\r\n    require(!_exists(tokenId), \"ERC721: token already minted\");\r\n    require(_to != address(0), \"ERC721: mint to the zero address\");\r\n\r\n    require(traitCodeIndex[_traitCode] == 0, \"Shizuk: same traitCode already minted\");\r\n\r\n    _beforeTokenTransfer(address(0), _to, tokenId);\r\n\r\n    _balances[_to] += 1;\r\n    _owners[tokenId] = _to;\r\n    tokenInfo[tokenId] = TokenInfo(\r\n      _traitCode,\r\n      _metadataHash,\r\n      _contentHash\r\n    );\r\n    traitCodeIndex[_traitCode] = tokenId;\r\n\r\n    emit Transfer(address(0), owner, tokenId);\r\n    emit Transfer(owner, _to, tokenId);\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 tokenId) private {\r\n    require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n    require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(from, to, tokenId);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[from] -= 1;\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  function _approve(address to, uint256 tokenId) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ownerOf(tokenId), to, tokenId);\r\n  }\r\n\r\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n    if (isContract(to)) {\r\n      try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // ERC721Metadata\r\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n    require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n    return string(abi.encodePacked('ipfs://', tokenInfo[_tokenId].metadataHash));\r\n  }\r\n\r\n  // ERC721Enumerable (public)\r\n  function totalSupply() public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n    require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  function tokenByIndex(uint256 index) public view returns (uint256) {\r\n    require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n    return _allTokens[index];\r\n  }\r\n\r\n  // ERC721Enumerable (private)\r\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) private {\r\n    if (from == address(0)) {\r\n      _addTokenToAllTokensEnumeration(tokenId);\r\n    } else if (from != to) {\r\n      _removeTokenFromOwnerEnumeration(from, tokenId);\r\n    }\r\n    if (to == address(0)) {\r\n      _removeTokenFromAllTokensEnumeration(tokenId);\r\n    } else if (to != from) {\r\n      _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n  }\r\n\r\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n    uint256 length = balanceOf(to);\r\n    _ownedTokens[to][length] = tokenId;\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n    uint256 lastTokenIndex = balanceOf(from) - 1;\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    if (tokenIndex != lastTokenIndex) {\r\n       uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    }\r\n\r\n    delete _ownedTokensIndex[tokenId];\r\n    delete _ownedTokens[from][lastTokenIndex];\r\n  }\r\n\r\n  function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    uint256 lastTokenIndex = _allTokens.length - 1;\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n    delete _allTokensIndex[tokenId];\r\n    _allTokens.pop();\r\n  }\r\n\r\n  // ERC2981\r\n  function royaltyInfo(uint256 id, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n    if(globalRoyalty.value == 0) {\r\n      if (royalties[id].length == 0) {\r\n        receiver = address(0);\r\n        royaltyAmount = 0;\r\n      } else {\r\n        LibPart.Part[] memory _royalties = royalties[id];\r\n        receiver = _royalties[0].account;\r\n        uint basisPoint;\r\n        for (uint i = 0; i < _royalties.length; i++) {\r\n          basisPoint += _royalties[i].value;\r\n        }\r\n        royaltyAmount = basisPoint * _salePrice / 10000;\r\n      }\r\n    } else {\r\n      receiver = globalRoyalty.account;\r\n      royaltyAmount = globalRoyalty.value * _salePrice / 10000;\r\n    }\r\n  }\r\n\r\n  // Rarible\r\n  function _updateAccount(uint256 _id, address _from, address _to) internal {\r\n    uint length = royalties[_id].length;\r\n    for(uint i = 0; i < length; i++) {\r\n      if (royalties[_id][i].account == _from) {\r\n        royalties[_id][i].account = payable(address(uint160(_to)));\r\n      }\r\n    }\r\n  }\r\n\r\n  function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory) {\r\n    if(globalRoyalty.value == 0) {\r\n      return royalties[id];\r\n    } else{\r\n      LibPart.Part[] memory _royalties = new LibPart.Part[](1);\r\n      _royalties[0] = globalRoyalty;\r\n      return _royalties;\r\n    }\r\n  }\r\n\r\n  function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal {\r\n    emit RoyaltiesSet(id, _royalties);\r\n  }\r\n\r\n  function setRoyalty(uint256 _tokenId, address payable _royaltiesRecipientAddress, uint96 _percentageBasisPoints) public onlyOwner returns (bool) {\r\n    require(_royaltiesRecipientAddress != address(0), \"Recipient should be present\");\r\n    require(_percentageBasisPoints != 0, \"Royalty value should be positive\");\r\n    require(_percentageBasisPoints < 10000, \"Royalty total value should be < 10000\");\r\n\r\n    LibPart.Part[] memory _royalties = new LibPart.Part[](1);\r\n    _royalties[0].account = _royaltiesRecipientAddress;\r\n    _royalties[0].value = _percentageBasisPoints;\r\n\r\n    if(royalties[_tokenId].length > 0) {\r\n      royalties[_tokenId][0].account = _royaltiesRecipientAddress;\r\n      royalties[_tokenId][0].value = _percentageBasisPoints;\r\n    } else {\r\n      royalties[_tokenId].push(_royalties[0]);\r\n    }\r\n    _onRoyaltiesSet(_tokenId, _royalties);\r\n    return true;\r\n  }\r\n\r\n  function setGlobalRoyalty(address payable _royaltiesRecipientAddress, uint96 _percentageBasisPoints) public onlyOwner returns (bool) {\r\n    globalRoyalty = LibPart.Part(_royaltiesRecipientAddress, _percentageBasisPoints);\r\n    return true;    \r\n  }\r\n\r\n  // Utils\r\n  function isContract(address account) private view returns (bool) {\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  function toString(uint256 value) private pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalities\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes12\",\"name\":\"_traitCode\",\"type\":\"bytes12\"},{\"internalType\":\"string\",\"name\":\"_metadataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentHash\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_royaltiesRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_percentageBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setGlobalRoyalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_royaltiesRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_percentageBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setRoyalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"bytes12\",\"name\":\"traitCode\",\"type\":\"bytes12\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"\",\"type\":\"bytes12\"}],\"name\":\"traitCodeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShizTest", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3b484278a07923bdc9c6d5084492e198ee73912bd0e3421db15133a1595a976"}]}