{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/paymentSplitterOld/utils/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n// File: contracts/paymentSplitterOld/PaymentSplitter.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract can be used when payments need to be received by a group\r\n * of people and split proportionately to some number of shares they own.\r\n */\r\ncontract PaymentSplitter {\r\n  using SafeMath for uint256;\r\n\r\n  event PayeeAdded(address account, uint256 shares);\r\n  event PaymentReleased(address to, uint256 amount);\r\n  event PaymentReceived(address from, uint256 amount);\r\n\r\n  uint256 private _totalShares;\r\n  uint256 private _totalReleased;\r\n\r\n  mapping(address => uint256) private _shares;\r\n  mapping(address => uint256) private _released;\r\n  address[] private _payees;\r\n\r\n  /**\r\n   * @dev Constructor\r\n   */\r\n  constructor(address[] payees, uint256[] shares) public payable {\r\n    require(payees.length == shares.length);\r\n    require(payees.length > 0);\r\n\r\n    for (uint256 i = 0; i < payees.length; i++) {\r\n      _addPayee(payees[i], shares[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev payable fallback\r\n   */\r\n  function () external payable {\r\n    emit PaymentReceived(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @return the total shares of the contract.\r\n   */\r\n  function totalShares() public view returns(uint256) {\r\n    return _totalShares;\r\n  }\r\n\r\n  /**\r\n   * @return the total amount already released.\r\n   */\r\n  function totalReleased() public view returns(uint256) {\r\n    return _totalReleased;\r\n  }\r\n\r\n  /**\r\n   * @return the shares of an account.\r\n   */\r\n  function shares(address account) public view returns(uint256) {\r\n    return _shares[account];\r\n  }\r\n\r\n  /**\r\n   * @return the amount already released to an account.\r\n   */\r\n  function released(address account) public view returns(uint256) {\r\n    return _released[account];\r\n  }\r\n\r\n  /**\r\n   * @return the address of a payee.\r\n   */\r\n  function payee(uint256 index) public view returns(address) {\r\n    return _payees[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Release one of the payee's proportional payment.\r\n   * @param account Whose payments will be released.\r\n   */\r\n  function release(address account) public {\r\n    require(_shares[account] > 0);\r\n\r\n    uint256 totalReceived = address(this).balance.add(_totalReleased);\r\n    uint256 payment = totalReceived.mul(\r\n      _shares[account]).div(\r\n        _totalShares).sub(\r\n          _released[account]\r\n    );\r\n\r\n    require(payment != 0);\r\n\r\n    _released[account] = _released[account].add(payment);\r\n    _totalReleased = _totalReleased.add(payment);\r\n\r\n    account.transfer(payment);\r\n    emit PaymentReleased(account, payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param account The address of the payee to add.\r\n   * @param shares_ The number of shares owned by the payee.\r\n   */\r\n  function _addPayee(address account, uint256 shares_) private {\r\n    require(account != address(0));\r\n    require(shares_ > 0);\r\n    require(_shares[account] == 0);\r\n\r\n    _payees.push(account);\r\n    _shares[account] = shares_;\r\n    _totalShares = _totalShares.add(shares_);\r\n    emit PayeeAdded(account, shares_);\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"payees\",\"type\":\"address[]\"},{\"name\":\"shares\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"}]", "ContractName": "PaymentSplitter", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000500000000000000000000000045e298c8af651b017499438aaa984093db17dd0c00000000000000000000000091d4e02be8755e31a2695feeec29d924d4881258000000000000000000000000377e850ca9a0c51c2211d64ef0b9377905fd84ec0000000000000000000000001d769003f1fdcac51b436e00e1cb78efffe57ac400000000000000000000000091942c70c205df9dc4aa2472900a9b055cdfe02f000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000023000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1e43c12540b099c68623de39788454e39d4369bc03e2afbe91008790d59188f3"}]}