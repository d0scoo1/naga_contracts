{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"StakingModularProxy.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"StakingStateV2.sol\\\";\\n\\n\\ncontract StakingModularProxy is StakingStateV2 {\\n\\n    function()\\n        external\\n        payable\\n    {\\n        if (gasleft() <= 2300) {\\n            return;\\n        }\\n\\n        address target = logicTargets[msg.sig];\\n        require(target != address(0), \\\"target not active\\\");\\n\\n        bytes memory data = msg.data;\\n        assembly {\\n            let result := delegatecall(gas, target, add(data, 0x20), mload(data), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n            switch result\\n            case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n\\n    function replaceContract(\\n        address target)\\n        external\\n        onlyOwner\\n    {\\n        (bool success,) = target.delegatecall(abi.encodeWithSignature(\\\"initialize(address)\\\", target));\\n        require(success, \\\"setup failed\\\");\\n    }\\n\\n    function setTargets(\\n        string[] calldata sigsArr,\\n        address[] calldata targetsArr)\\n        external\\n        onlyOwner\\n    {\\n        require(sigsArr.length == targetsArr.length, \\\"count mismatch\\\");\\n\\n        for (uint256 i = 0; i < sigsArr.length; i++) {\\n            _setTarget(bytes4(keccak256(abi.encodePacked(sigsArr[i]))), targetsArr[i]);\\n        }\\n    }\\n\\n    function getTarget(\\n        string calldata sig)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return logicTargets[bytes4(keccak256(abi.encodePacked(sig)))];\\n    }\\n}\\n\"\r\n    },\r\n    \"StakingStateV2.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"EnumerableBytes32Set.sol\\\";\\nimport \\\"IStakingV2.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"StakingConstantsV2.sol\\\";\\n\\ncontract StakingStateV2 is StakingConstantsV2, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\\n\\n    mapping(bytes4 => address) public logicTargets;\\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet;\\n\\n    mapping(address => uint256) public _totalSupplyPerToken; // token => value\\n    mapping(address => mapping(address => uint256)) internal _balancesPerToken; // token => account => value\\n\\n    uint256 public ookiPerTokenStored;\\n    mapping(address => uint256) public ookiRewardsPerTokenPaid; // user => value\\n    mapping(address => uint256) public ookiRewards; // user => value\\n    mapping(address => uint256) public bzrxVesting; // user => value\\n\\n    uint256 public stableCoinPerTokenStored;\\n    mapping(address => uint256) public stableCoinRewardsPerTokenPaid; // user => value\\n    mapping(address => uint256) public stableCoinRewards; // user => value\\n    mapping(address => uint256) public stableCoinVesting; // user => value\\n\\n    uint256 public vBZRXWeightStored;\\n    uint256 public iOOKIWeightStored;\\n    uint256 public LPTokenWeightStored;\\n\\n    uint256 public lastRewardsAddTime;\\n    mapping(address => uint256) public vestingLastSync;\\n\\n    struct ProposalState {\\n        uint256 proposalTime;\\n        uint256 iOOKIWeight;\\n        uint256 lpOOKIBalance;\\n        uint256 lpTotalSupply;\\n    }\\n    address public governor;\\n    mapping(uint256 => ProposalState) internal _proposalState;\\n\\n    mapping(address => uint256[]) public altRewardsRounds; // depreciated\\n    mapping(address => uint256) public altRewardsPerShare; // token => value\\n\\n    // Token => (User => Info)\\n    mapping(address => mapping(address => IStakingV2.AltRewardsUserInfo)) public userAltRewardsPerShare;\\n\\n    address public voteDelegator;\\n\\n    function _setTarget(bytes4 sig, address target) internal {\\n        logicTargets[sig] = target;\\n\\n        if (target != address(0)) {\\n            logicTargetsSet.addBytes32(bytes32(sig));\\n        } else {\\n            logicTargetsSet.removeBytes32(bytes32(sig));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableBytes32Set.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @dev Library for managing loan sets\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n *\\n */\\nlibrary EnumerableBytes32Set {\\n\\n    struct Bytes32Set {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @dev Add an address value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(set, value)){\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes an address value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (contains(set, value)){\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\\n        internal\\n        view\\n        returns (bytes32[] memory output)\\n    {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end-start);\\n        for (uint256 i = start; i < end; i++) {\\n            output[i-start] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.values.length;\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function get(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return set.values[index];\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function getAddress(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 value = set.values[index];\\n        address addrvalue;\\n        assembly {\\n            addrvalue := value\\n        }\\n        return addrvalue;\\n    }\\n}\\n\"\r\n    },\r\n    \"IStakingV2.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStakingV2 {\\n    struct ProposalState {\\n        uint256 proposalTime;\\n        uint256 iOOKIWeight;\\n        uint256 lpOOKIBalance;\\n        uint256 lpTotalSupply;\\n    }\\n\\n    struct AltRewardsUserInfo {\\n        uint256 rewardsPerShare;\\n        uint256 pendingRewards;\\n    }\\n\\n    function getCurrentFeeTokens() external view returns (address[] memory);\\n\\n    function maxUniswapDisagreement() external view returns (uint256);\\n\\n    function fundsWallet() external view returns (address);\\n\\n    function callerRewardDivisor() external view returns (uint256);\\n\\n    function maxCurveDisagreement() external view returns (uint256);\\n\\n    function rewardPercent() external view returns (uint256);\\n\\n    function addRewards(uint256 newOOKI, uint256 newStableCoin) external;\\n\\n    function stake(address[] calldata tokens, uint256[] calldata values) external;\\n\\n    function unstake(address[] calldata tokens, uint256[] calldata values) external;\\n\\n    function earned(address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxRewardsEarned,\\n            uint256 stableCoinRewardsEarned,\\n            uint256 bzrxRewardsVesting,\\n            uint256 stableCoinRewardsVesting,\\n            uint256 sushiRewardsEarned\\n        );\\n\\n    function pendingCrvRewards(address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxRewardsEarned,\\n            uint256 stableCoinRewardsEarned,\\n            uint256 bzrxRewardsVesting,\\n            uint256 stableCoinRewardsVesting,\\n            uint256 sushiRewardsEarned\\n        );\\n\\n    function getVariableWeights()\\n        external\\n        view\\n        returns (\\n            uint256 vBZRXWeight,\\n            uint256 iOOKIWeight,\\n            uint256 LPTokenWeight\\n        );\\n\\n    function balanceOfByAsset(address token, address account) external view returns (uint256 balance);\\n\\n    function balanceOfByAssets(address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxBalance,\\n            uint256 iOOKIBalance,\\n            uint256 vBZRXBalance,\\n            uint256 LPTokenBalance\\n        );\\n\\n    function balanceOfStored(address account) external view returns (uint256 vestedBalance, uint256 vestingBalance);\\n\\n    function totalSupplyStored() external view returns (uint256 supply);\\n\\n    function vestedBalanceForAmount(\\n        uint256 tokenBalance,\\n        uint256 lastUpdate,\\n        uint256 vestingEndTime\\n    ) external view returns (uint256 vested);\\n\\n    function votingBalanceOf(address account, uint256 proposalId) external view returns (uint256 totalVotes);\\n\\n    function votingBalanceOfNow(address account) external view returns (uint256 totalVotes);\\n\\n    function votingFromStakedBalanceOf(address account) external view returns (uint256 totalVotes);\\n\\n    function _setProposalVals(address account, uint256 proposalId) external returns (uint256);\\n\\n    function exit() external;\\n\\n    function addAltRewards(address token, uint256 amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function claim(bool restake) external;\\n\\n    function claimAltRewards() external;\\n\\n    function _totalSupplyPerToken(address) external view returns(uint256);\\n    \\n\\n    /// Guardian Interface\\n\\n    function _isPaused(bytes4 sig) external view returns (bool isPaused);\\n\\n    function toggleFunctionPause(bytes4 sig) external;\\n\\n    function toggleFunctionUnPause(bytes4 sig) external;\\n\\n    function changeGuardian(address newGuardian) external;\\n\\n    function getGuardian() external view returns (address guardian);\\n\\n    // Admin functions\\n\\n    // Withdraw all from sushi masterchef\\n    function exitSushi() external;\\n\\n    function setGovernor(address _governor) external;\\n\\n    function setApprovals(\\n        address _token,\\n        address _spender,\\n        uint256 _value\\n    ) external;\\n\\n    function setVoteDelegator(address stakingGovernance) external;\\n\\n    function updateSettings(address settingsTarget, bytes calldata callData) external;\\n\\n    function claimSushi() external returns (uint256 sushiRewardsEarned);\\n\\n    function totalSupplyByAsset(address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"StakingConstantsV2.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IUniswapV2Router.sol\\\";\\nimport \\\"ICurve3Pool.sol\\\";\\nimport \\\"ICurveMinter.sol\\\";\\nimport \\\"ICurve3PoolGauge.sol\\\";\\nimport \\\"IBZx.sol\\\";\\nimport \\\"IBZRXv2Converter.sol\\\";\\n\\ncontract StakingConstantsV2 {\\n    address internal constant ZERO_ADDRESS = address(0);\\n\\n    address public constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\\n    address public constant OOKI = 0x0De05F6447ab4D22c8827449EE4bA2D5C288379B;\\n    address public constant vBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\\n    address public constant iOOKI = 0x05d5160cbc6714533ef44CEd6dd32112d56Ad7da;\\n    address public constant OOKI_ETH_LP = 0xEaaddE1E14C587a7Fb4Ba78eA78109BB32975f1e; // sushiswap\\n\\n    uint256 internal constant cliffDuration = 15768000; // 86400 * 365 * 0.5\\n    uint256 internal constant vestingDuration = 126144000; // 86400 * 365 * 4\\n    uint256 internal constant vestingDurationAfterCliff = 110376000; // 86400 * 365 * 3.5\\n    uint256 internal constant vestingStartTimestamp = 1594648800; // start_time\\n    uint256 internal constant vestingCliffTimestamp = vestingStartTimestamp + cliffDuration;\\n    uint256 internal constant vestingEndTimestamp = vestingStartTimestamp + vestingDuration;\\n\\n    // these are 10x original balances for BZRX because of OOKI split\\n    uint256 internal constant _startingVBZRXBalance = 8893899330e18;\\n    // uint256 public constant initialCirculatingSupply = 10300000000e18 - _startingVBZRXBalance;\\n\\n    address internal constant SUSHI_MASTERCHEF = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\\n    uint256 internal constant OOKI_ETH_SUSHI_MASTERCHEF_PID = 335;\\n    address public constant SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n\\n    ICurve3Pool public constant curve3pool = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    IERC20 public constant curve3Crv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    ICurveMinter public constant curveMinter = ICurveMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\\n\\n    IBZRXv2Converter public constant CONVERTER = IBZRXv2Converter(0x6BE9B7406260B6B6db79a1D4997e7f8f5c9D7400);\\n\\n    event Stake(address indexed user, address indexed token, address indexed delegate, uint256 amount);\\n\\n    event Unstake(address indexed user, address indexed token, address indexed delegate, uint256 amount);\\n\\n    event Claim(address indexed user, uint256 ookiAmount, uint256 stableCoinAmount);\\n\\n    event AddAltRewards(address indexed sender, address indexed token, uint256 amount);\\n\\n    event ClaimAltRewards(address indexed user, address indexed token, uint256 amount);\\n\\n    event AddRewards(address indexed sender, uint256 ookiAmount, uint256 stableCoinAmount);\\n}\\n\"\r\n    },\r\n    \"IUniswapV2Router.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ninterface IUniswapV2Router {\\n    // 0x38ed1739\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline)\\n        external\\n        returns (uint256[] memory amounts);\\n\\n    // 0x8803dbee\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline)\\n        external\\n        returns (uint256[] memory amounts);\\n\\n    // 0x1f00ca74\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    // 0xd06ca61f\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"ICurve3Pool.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\n\\ninterface ICurve3Pool {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount)\\n        external;\\n\\n    function get_virtual_price()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurveMinter.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n//0xd061D61a4d941c39E5453435B6345Dc261C2fcE0 eth mainnet\\ninterface ICurveMinter {\\n\\n    function mint(\\n        address _addr\\n    )\\n    external;\\n}\\n\"\r\n    },\r\n    \"ICurve3PoolGauge.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n//0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A eth mainnet\\ninterface ICurve3PoolGauge {\\n    function balanceOf(\\n        address _addr\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function working_balances(address)\\n        external view\\n        returns (uint256);\\n\\n    function claimable_tokens(address)\\n        external\\n        returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _addr\\n    )\\n    external;\\n\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function set_approve_deposit(\\n        address _addr,\\n        bool can_deposit\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"IBZx.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache-2.0\\n */\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/// @title A proxy interface for The Protocol\\n/// @author bZeroX\\n/// @notice This is just an interface, not to be deployed itself.\\n/// @dev This interface is to be used for the protocol interactions.\\ninterface IBZx {\\n    ////// Protocol //////\\n\\n    /// @dev adds or replaces existing proxy module\\n    /// @param target target proxy module address\\n    function replaceContract(address target) external;\\n\\n    /// @dev updates all proxy modules addreses and function signatures.\\n    /// sigsArr and targetsArr should be of equal length\\n    /// @param sigsArr array of function signatures\\n    /// @param targetsArr array of target proxy module addresses\\n    function setTargets(\\n        string[] calldata sigsArr,\\n        address[] calldata targetsArr\\n    ) external;\\n\\n    /// @dev returns protocol module address given a function signature\\n    /// @return module address\\n    function getTarget(string calldata sig) external view returns (address);\\n\\n    ////// Protocol Settings //////\\n\\n    /// @dev sets price feed contract address. The contract on the addres should implement IPriceFeeds interface\\n    /// @param newContract module address for the IPriceFeeds implementation\\n    function setPriceFeedContract(address newContract) external;\\n\\n    /// @dev sets swaps contract address. The contract on the addres should implement ISwapsImpl interface\\n    /// @param newContract module address for the ISwapsImpl implementation\\n    function setSwapsImplContract(address newContract) external;\\n\\n    /// @dev sets loan pool with assets. Accepts two arrays of equal length\\n    /// @param pools array of address of pools\\n    /// @param assets array of addresses of assets\\n    function setLoanPool(address[] calldata pools, address[] calldata assets)\\n        external;\\n\\n    /// @dev updates list of supported tokens, it can be use also to disable or enable particualr token\\n    /// @param addrs array of address of pools\\n    /// @param toggles array of addresses of assets\\n    /// @param withApprovals resets tokens to unlimited approval with the swaps integration (kyber, etc.)\\n    function setSupportedTokens(\\n        address[] calldata addrs,\\n        bool[] calldata toggles,\\n        bool withApprovals\\n    ) external;\\n\\n    /// @dev sets lending fee with WEI_PERCENT_PRECISION\\n    /// @param newValue lending fee percent\\n    function setLendingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets trading fee with WEI_PERCENT_PRECISION\\n    /// @param newValue trading fee percent\\n    function setTradingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets borrowing fee with WEI_PERCENT_PRECISION\\n    /// @param newValue borrowing fee percent\\n    function setBorrowingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets affiliate fee with WEI_PERCENT_PRECISION\\n    /// @param newValue affiliate fee percent\\n    function setAffiliateFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets liquidation inncetive percent per loan per token. This is the profit percent\\n    /// that liquidator gets in the process of liquidating.\\n    /// @param loanTokens array list of loan tokens\\n    /// @param collateralTokens array list of collateral tokens\\n    /// @param amounts array list of liquidation inncetive amount\\n    function setLiquidationIncentivePercent(\\n        address[] calldata loanTokens,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @dev sets max swap rate slippage percent.\\n    /// @param newAmount max swap rate slippage percent.\\n    function setMaxDisagreement(uint256 newAmount) external;\\n\\n    /// TODO\\n    function setSourceBufferPercent(uint256 newAmount) external;\\n\\n    /// @dev sets maximum supported swap size in ETH\\n    /// @param newAmount max swap size in ETH.\\n    function setMaxSwapSize(uint256 newAmount) external;\\n\\n    /// @dev sets fee controller address\\n    /// @param newController address of the new fees controller\\n    function setFeesController(address newController) external;\\n\\n    /// @dev withdraws lending fees to receiver. Only can be called by feesController address\\n    /// @param tokens array of token addresses.\\n    /// @param receiver fees receiver address\\n    /// @return amounts array of amounts withdrawn\\n    function withdrawFees(\\n        address[] calldata tokens,\\n        address receiver,\\n        FeeClaimType feeType\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @dev withdraw protocol token (BZRX) from vesting contract vBZRX\\n    /// @param receiver address of BZRX tokens claimed\\n    /// @param amount of BZRX token to be claimed. max is claimed if amount is greater than balance.\\n    /// @return rewardToken reward token address\\n    /// @return withdrawAmount amount\\n    function withdrawProtocolToken(address receiver, uint256 amount)\\n        external\\n        returns (address rewardToken, uint256 withdrawAmount);\\n\\n    /// @dev depozit protocol token (BZRX)\\n    /// @param amount address of BZRX tokens to deposit\\n    function depositProtocolToken(uint256 amount) external;\\n\\n    function grantRewards(address[] calldata users, uint256[] calldata amounts)\\n        external\\n        returns (uint256 totalAmount);\\n\\n    // NOTE: this doesn't sanitize inputs -> inaccurate values may be returned if there are duplicates tokens input\\n    function queryFees(address[] calldata tokens, FeeClaimType feeType)\\n        external\\n        view\\n        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\\n\\n    function priceFeeds() external view returns (address);\\n\\n    function swapsImpl() external view returns (address);\\n\\n    function logicTargets(bytes4) external view returns (address);\\n\\n    function loans(bytes32) external view returns (Loan memory);\\n\\n    function loanParams(bytes32) external view returns (LoanParams memory);\\n\\n    // we don't use this yet\\n    // function lenderOrders(address, bytes32) external returns (Order memory);\\n    // function borrowerOrders(address, bytes32) external returns (Order memory);\\n\\n    function delegatedManagers(bytes32, address) external view returns (bool);\\n\\n    function lenderInterest(address, address)\\n        external\\n        view\\n        returns (LenderInterest memory);\\n\\n    function loanInterest(bytes32) external view returns (LoanInterest memory);\\n\\n    function feesController() external view returns (address);\\n\\n    function lendingFeePercent() external view returns (uint256);\\n\\n    function lendingFeeTokensHeld(address) external view returns (uint256);\\n\\n    function lendingFeeTokensPaid(address) external view returns (uint256);\\n\\n    function borrowingFeePercent() external view returns (uint256);\\n\\n    function borrowingFeeTokensHeld(address) external view returns (uint256);\\n\\n    function borrowingFeeTokensPaid(address) external view returns (uint256);\\n\\n    function protocolTokenHeld() external view returns (uint256);\\n\\n    function protocolTokenPaid() external view returns (uint256);\\n\\n    function affiliateFeePercent() external view returns (uint256);\\n\\n    function liquidationIncentivePercent(address, address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function loanPoolToUnderlying(address) external view returns (address);\\n\\n    function underlyingToLoanPool(address) external view returns (address);\\n\\n    function supportedTokens(address) external view returns (bool);\\n\\n    function maxDisagreement() external view returns (uint256);\\n\\n    function sourceBufferPercent() external view returns (uint256);\\n\\n    function maxSwapSize() external view returns (uint256);\\n\\n    /// @dev get list of loan pools in the system. Ordering is not guaranteed\\n    /// @param start start index\\n    /// @param count number of pools to return\\n    /// @return loanPoolsList array of loan pools\\n    function getLoanPoolsList(uint256 start, uint256 count)\\n        external\\n        view\\n        returns (address[] memory loanPoolsList);\\n\\n    /// @dev checks whether addreess is a loan pool address\\n    /// @return boolean\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    ////// Loan Settings //////\\n\\n    /// @dev creates new loan param settings\\n    /// @param loanParamsList array of LoanParams\\n    /// @return loanParamsIdList array of loan ids created\\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    /// @dev Deactivates LoanParams for future loans. Active loans using it are unaffected.\\n    /// @param loanParamsIdList array of loan ids\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    /// @dev gets array of LoanParams by given ids\\n    /// @param loanParamsIdList array of loan ids\\n    /// @return loanParamsList array of LoanParams\\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\\n        external\\n        view\\n        returns (LoanParams[] memory loanParamsList);\\n\\n    /// @dev Enumerates LoanParams in the system by owner\\n    /// @param owner of the loan params\\n    /// @param start number of loans to return\\n    /// @param count total number of the items\\n    /// @return loanParamsList array of LoanParams\\n    function getLoanParamsList(\\n        address owner,\\n        uint256 start,\\n        uint256 count\\n    ) external view returns (bytes32[] memory loanParamsList);\\n\\n    /// @dev returns total loan principal for token address\\n    /// @param lender address\\n    /// @param loanToken address\\n    /// @return total principal of the loan\\n    function getTotalPrincipal(address lender, address loanToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    ////// Loan Openings //////\\n\\n    /// @dev This is THE function that borrows or trades on the protocol\\n    /// @param loanParamsId id of the LoanParam created beforehand by setupLoanParams function\\n    /// @param loanId id of existing loan, if 0, start a new loan\\n    /// @param isTorqueLoan boolean whether it is toreque or non torque loan\\n    /// @param initialMargin in WEI_PERCENT_PRECISION\\n    /// @param sentAddresses array of size 4:\\n    ///         lender: must match loan if loanId provided\\n    ///         borrower: must match loan if loanId provided\\n    ///         receiver: receiver of funds (address(0) assumes borrower address)\\n    ///         manager: delegated manager of loan unless address(0)\\n    /// @param sentValues array of size 5:\\n    ///         newRate: new loan interest rate\\n    ///         newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n    ///         torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n    ///         loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n    ///         collateralTokenReceived: total collateralToken deposit\\n    /// @param loanDataBytes required when sending ether\\n    /// @return principal of the loan and collateral amount\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId,\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        address[4] calldata sentAddresses,\\n        uint256[5] calldata sentValues,\\n        bytes calldata loanDataBytes\\n    ) external payable returns (LoanOpenData memory);\\n\\n    /// @dev sets/disables/enables the delegated manager for the loan\\n    /// @param loanId id of the loan\\n    /// @param delegated delegated manager address\\n    /// @param toggle boolean set enabled or disabled\\n    function setDelegatedManager(\\n        bytes32 loanId,\\n        address delegated,\\n        bool toggle\\n    ) external;\\n\\n    /// @dev estimates margin exposure for simulated position\\n    /// @param loanToken address of the loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param loanTokenSent amout of loan token sent\\n    /// @param collateralTokenSent amount of collateral token sent\\n    /// @param interestRate yearly interest rate\\n    /// @param newPrincipal principal amount of the loan\\n    /// @return estimated margin exposure amount\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    /// @dev calculates required collateral for simulated position\\n    /// @param loanToken address of loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param newPrincipal principal amount of the loan\\n    /// @param marginAmount margin amount of the loan\\n    /// @param isTorqueLoan boolean torque or non torque loan\\n    /// @return collateralAmountRequired amount required\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getRequiredCollateralByParams(\\n        bytes32 loanParamsId,\\n        uint256 newPrincipal\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    /// @dev calculates borrow amount for simulated position\\n    /// @param loanToken address of loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param collateralTokenAmount amount of collateral token sent\\n    /// @param marginAmount margin amount\\n    /// @param isTorqueLoan boolean torque or non torque loan\\n    /// @return borrowAmount possible borrow amount\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    function getBorrowAmountByParams(\\n        bytes32 loanParamsId,\\n        uint256 collateralTokenAmount\\n    ) external view returns (uint256 borrowAmount);\\n\\n    ////// Loan Closings //////\\n\\n    /// @dev liquidates unhealty loans\\n    /// @param loanId id of the loan\\n    /// @param receiver address receiving liquidated loan collateral\\n    /// @param closeAmount amount to close denominated in loanToken\\n    /// @return loanCloseAmount amount of the collateral token of the loan\\n    /// @return seizedAmount sezied amount in the collateral token\\n    /// @return seizedToken loan token address\\n    function liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    /// @dev rollover loan\\n    /// @param loanId id of the loan\\n    /// @param loanDataBytes reserved for future use.\\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes)\\n        external\\n        returns (address rebateToken, uint256 gasRebate);\\n\\n    /// @dev close position with loan token deposit\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param depositAmount amount of loan token to deposit\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    /// @dev close position with swap\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param swapAmount amount of loan token to swap\\n    /// @param returnTokenIsCollateral boolean whether to return tokens is collateral\\n    /// @param loanDataBytes reserved for future use\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Closings With Gas Token //////\\n\\n    /// @dev liquidates unhealty loans by using Gas token\\n    /// @param loanId id of the loan\\n    /// @param receiver address receiving liquidated loan collateral\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param closeAmount amount to close denominated in loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return seizedAmount loan token withdraw amount\\n    /// @return seizedToken loan token address\\n    function liquidateWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 closeAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    /// @dev rollover loan\\n    /// @param loanId id of the loan\\n    /// @param gasTokenUser user address of the GAS token\\n    function rolloverWithGasToken(\\n        bytes32 loanId,\\n        address gasTokenUser,\\n        bytes calldata /*loanDataBytes*/\\n    ) external returns (address rebateToken, uint256 gasRebate);\\n\\n    /// @dev close position with loan token deposit\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param depositAmount amount of loan token to deposit denominated in loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithDepositWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 depositAmount\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    /// @dev close position with swap\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param swapAmount amount of loan token to swap denominated in collateralToken\\n    /// @param returnTokenIsCollateral  true: withdraws collateralToken, false: withdraws loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithSwapWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 swapAmount,\\n        bool returnTokenIsCollateral,\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Maintenance //////\\n\\n    /// @dev deposit collateral to existing loan\\n    /// @param loanId existing loan id\\n    /// @param depositAmount amount to deposit which must match msg.value if ether is sent\\n    function depositCollateral(bytes32 loanId, uint256 depositAmount)\\n        external\\n        payable;\\n\\n    /// @dev withdraw collateral from existing loan\\n    /// @param loanId existing lona id\\n    /// @param receiver address of withdrawn tokens\\n    /// @param withdrawAmount amount to withdraw\\n    /// @return actualWithdrawAmount actual amount withdrawn\\n    function withdrawCollateral(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 actualWithdrawAmount);\\n\\n    /// @dev withdraw accrued interest rate for a loan given token address\\n    /// @param loanToken loan token address\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    /// @dev extends loan duration by depositing more collateral\\n    /// @param loanId id of the existing loan\\n    /// @param depositAmount amount to deposit\\n    /// @param useCollateral boolean whether to extend using collateral or deposit amount\\n    /// @return secondsExtended by that number of seconds loan duration was extended\\n    function extendLoanDuration(\\n        bytes32 loanId,\\n        uint256 depositAmount,\\n        bool useCollateral,\\n        bytes calldata // for future use /*loanDataBytes*/\\n    ) external payable returns (uint256 secondsExtended);\\n\\n    /// @dev reduces loan duration by withdrawing collateral\\n    /// @param loanId id of the existing loan\\n    /// @param receiver address to receive tokens\\n    /// @param withdrawAmount amount to withdraw\\n    /// @return secondsReduced by that number of seconds loan duration was extended\\n    function reduceLoanDuration(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 secondsReduced);\\n\\n    function setDepositAmount(\\n        bytes32 loanId,\\n        uint256 depositValueAsLoanToken,\\n        uint256 depositValueAsCollateralToken\\n    ) external;\\n\\n    function claimRewards(address receiver)\\n        external\\n        returns (uint256 claimAmount);\\n\\n    function transferLoan(bytes32 loanId, address newOwner) external;\\n\\n    function rewardsBalanceOf(address user)\\n        external\\n        view\\n        returns (uint256 rewardsBalance);\\n\\n    /// @dev Gets current lender interest data totals for all loans with a specific oracle and interest token\\n    /// @param lender The lender address\\n    /// @param loanToken The loan token address\\n    /// @return interestPaid The total amount of interest that has been paid to a lender so far\\n    /// @return interestPaidDate The date of the last interest pay out, or 0 if no interest has been withdrawn yet\\n    /// @return interestOwedPerDay The amount of interest the lender is earning per day\\n    /// @return interestUnPaid The total amount of interest the lender is owned and not yet withdrawn\\n    /// @return interestFeePercent The fee retained by the protocol before interest is paid to the lender\\n    /// @return principalTotal The total amount of outstading principal the lender has loaned\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    /// @dev Gets current interest data for a loan\\n    /// @param loanId A unique id representing the loan\\n    /// @return loanToken The loan token that interest is paid in\\n    /// @return interestOwedPerDay The amount of interest the borrower is paying per day\\n    /// @return interestDepositTotal The total amount of interest the borrower has deposited\\n    /// @return interestDepositRemaining The amount of deposited interest that is not yet owed to a lender\\n    function getLoanInterestData(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            address loanToken,\\n            uint256 interestOwedPerDay,\\n            uint256 interestDepositTotal,\\n            uint256 interestDepositRemaining\\n        );\\n\\n    /// @dev gets list of loans of particular user address\\n    /// @param user address of the loans\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param loanType type of the loan: All(0), Margin(1), NonMargin(2)\\n    /// @param isLender whether to list lender loans or borrower loans\\n    /// @param unsafeOnly booleat if true return only unsafe loans that are open for liquidation\\n    /// @return loansData LoanReturnData array of loans\\n    function getUserLoans(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        LoanType loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getUserLoansCount(address user, bool isLender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev gets existing loan\\n    /// @param loanId id of existing loan\\n    /// @return loanData array of loans\\n    function getLoan(bytes32 loanId)\\n        external\\n        view\\n        returns (LoanReturnData memory loanData);\\n\\n    /// @dev get current active loans in the system\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\\n    function getActiveLoans(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    /// @dev get current active loans in the system\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\\n    /// @param isLiquidatable boolean if true return liquidatable loans only\\n    function getActiveLoansAdvanced(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly,\\n        bool isLiquidatable\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getActiveLoansCount() external view returns (uint256);\\n\\n    ////// Swap External //////\\n\\n    /// @dev swap thru external integration\\n    /// @param sourceToken source token address\\n    /// @param destToken destintaion token address\\n    /// @param receiver address to receive tokens\\n    /// @param returnToSender TODO\\n    /// @param sourceTokenAmount source token amount\\n    /// @param requiredDestTokenAmount destination token amount\\n    /// @param swapData TODO\\n    /// @return destTokenAmountReceived destination token received\\n    /// @return sourceTokenAmountUsed source token amount used\\n    function swapExternal(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bytes calldata swapData\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed\\n        );\\n\\n    /// @dev swap thru external integration using GAS\\n    /// @param sourceToken source token address\\n    /// @param destToken destintaion token address\\n    /// @param receiver address to receive tokens\\n    /// @param returnToSender TODO\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param sourceTokenAmount source token amount\\n    /// @param requiredDestTokenAmount destination token amount\\n    /// @param swapData TODO\\n    /// @return destTokenAmountReceived destination token received\\n    /// @return sourceTokenAmountUsed source token amount used\\n    function swapExternalWithGasToken(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        address gasTokenUser,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bytes calldata swapData\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed\\n        );\\n\\n    /// @dev calculate simulated return of swap\\n    /// @param sourceToken source token address\\n    /// @param destToken destination token address\\n    /// @param sourceTokenAmount source token amount\\n    /// @return amoun denominated in destination token\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n\\n    /// Guardian Interface\\n\\n    function _isPaused(bytes4 sig) external view returns (bool isPaused);\\n\\n    function toggleFunctionPause(bytes4 sig) external;\\n\\n    function toggleFunctionUnPause(bytes4 sig) external;\\n\\n    function changeGuardian(address newGuardian) external;\\n\\n    function getGuardian() external view returns (address guardian);\\n\\n    /// Loan Cleanup Interface\\n\\n    function cleanupLoans(\\n        address loanToken,\\n        bytes32[] calldata loanIds)\\n        external\\n        payable\\n        returns (uint256 totalPrincipalIn);\\n\\n    struct LoanParams {\\n        bytes32 id;\\n        bool active;\\n        address owner;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 minInitialMargin;\\n        uint256 maintenanceMargin;\\n        uint256 maxLoanTerm;\\n    }\\n\\n    struct LoanOpenData {\\n        bytes32 loanId;\\n        uint256 principal;\\n        uint256 collateral;\\n    }\\n\\n    enum LoanType {\\n        All,\\n        Margin,\\n        NonMargin\\n    }\\n\\n    struct LoanReturnData {\\n        bytes32 loanId;\\n        uint96 endTimestamp;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate;\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n        uint256 depositValueAsLoanToken;\\n        uint256 depositValueAsCollateralToken;\\n    }\\n\\n    enum FeeClaimType {\\n        All,\\n        Lending,\\n        Trading,\\n        Borrowing\\n    }\\n\\n    struct Loan {\\n        bytes32 id; // id of the loan\\n        bytes32 loanParamsId; // the linked loan params id\\n        bytes32 pendingTradesId; // the linked pending trades id\\n        uint256 principal; // total borrowed amount outstanding\\n        uint256 collateral; // total collateral escrowed for the loan\\n        uint256 startTimestamp; // loan start time\\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\\n        uint256 startMargin; // initial margin when the loan opened\\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\\n        address borrower; // borrower of this loan\\n        address lender; // lender of this loan\\n        bool active; // if false, the loan has been fully closed\\n    }\\n\\n    struct LenderInterest {\\n        uint256 principalTotal; // total borrowed amount outstanding of asset\\n        uint256 owedPerDay; // interest owed per day for all loans of asset\\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\\n        uint256 paidTotal; // total interest paid so far for asset\\n        uint256 updatedTimestamp; // last update\\n    }\\n\\n    struct LoanInterest {\\n        uint256 owedPerDay; // interest owed per day for loan\\n        uint256 depositTotal; // total escrowed interest for loan\\n        uint256 updatedTimestamp; // last update\\n    }\\n}\\n\"\r\n    },\r\n    \"IBZRXv2Converter.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2022, OokiDao. All Rights Reserved.\\n * Licensed under the Apache-2.0\\n */\\n// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBZRXv2Converter {\\n    function convert(address receiver, uint256 _tokenAmount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"StakingModularProxy.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAltRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ookiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ookiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimAltRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERTER\",\"outputs\":[{\"internalType\":\"contract IBZRXv2Converter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPTokenWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OOKI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OOKI_ETH_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalSupplyPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"altRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"altRewardsRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3Crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3pool\",\"outputs\":[{\"internalType\":\"contract ICurve3Pool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveMinter\",\"outputs\":[{\"internalType\":\"contract ICurveMinter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"sig\",\"type\":\"string\"}],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iOOKI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iOOKIWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardsAddTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"logicTargets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ookiPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ookiRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ookiRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"replaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"sigsArr\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"targetsArr\",\"type\":\"address[]\"}],\"name\":\"setTargets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableCoinPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAltRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingLastSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingModularProxy", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x302def543f652068129bbad25615e3231d1ba980", "SwarmSource": ""}]}