{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/SatoshiMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IERC1155 {\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n  function setApprovalForAll(address operator, bool _approved) external;\\n  function isApprovedForAll(address account, address operator) external view returns (bool);\\n}\\n\\ninterface IERC721 {\\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _value, bytes calldata _data) external;\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  function balanceOf(address _owner) external view returns (uint256);\\n  function ownerOf(uint256 _tokenId) external view returns (address);\\n  function setApprovalForAll(address operator, bool approved) external;\\n  \\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\ninterface IERC2981 is IERC165Upgradeable {\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\\ncontract SatoshiMarketplaceV7 is Initializable,AccessControlUpgradeable {\\n    enum AssetType { UNKNOWN, ERC721, ERC1155 }\\n    enum ListingStatus { ON_HOLD, ON_SALE, IS_AUCTION}\\n\\n    struct Listing {\\n        address contractAddress;\\n        AssetType assetType;\\n        ListingStatus status;\\n        uint numOfCopies;\\n        uint256 price;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 commission;\\n        bool isDropOfTheDay;\\n        address highestBidder;\\n        uint256 highestBid;\\n    }\\n\\n    mapping(address => mapping(uint256 => mapping(address => Listing))) private _listings;\\n    mapping(address => uint256) private _outstandingPayments;\\n    mapping(address=>bool) private _approveForRole;\\n    uint256 private _defaultCommission;\\n    uint256 private _defaultAuctionCommission;\\n    address private _commissionReceiver;\\n    bytes32 public constant DROP_OF_THE_DAY_CREATOR_ROLE=keccak256(\\\"DROP_OF_THE_DAY_CREATOR_ROLE\\\");\\n    bool private _anyAddressCanCreateItem;\\n    bool private _askForRole;\\n    event PurchaseConfirmed(uint256 tokenId, address itemOwner, address buyer);\\n    event PaymentWithdrawn(uint256 amount);\\n    event TransferCommission(address indexed reciever, uint indexed tokenId, uint indexed value);\\n    event TransferRoyalty(address indexed receiver, uint indexed tokenId, uint indexed value);\\n    event HighestBidIncreased(uint256 tokenId,address itemOwner,address bidder,uint256 amount);\\n    event AuctionEnded(uint256 tokenId,address itemOwner,address winner,uint256 amount);\\n\\n    function initialize() initializer public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _defaultCommission = 250;\\n        _defaultAuctionCommission = 250;\\n        _commissionReceiver = msg.sender;\\n    }\\n\\n    function commissionReceiver() external view returns (address) {\\n        return _commissionReceiver;\\n    }\\n\\n    function setCommissionReceiver(address user) external returns (bool) {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"C1\\\"\\n        );\\n        _commissionReceiver = user;\\n\\n        return true;\\n    }\\n\\n    function defaultCommission() external view returns (uint256) {\\n        return _defaultCommission;\\n    }\\n\\n    function defaultAuctionCommission() external view returns (uint256) {\\n        return _defaultAuctionCommission;\\n    }\\n\\n    function setDefaultCommission(uint256 commission) external returns (bool) {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"C1\\\"\\n        );\\n        require(commission <= 3000, \\\"C2\\\");\\n        _defaultCommission = commission;\\n\\n        return true;\\n    }\\n\\n    function setDefaultAuctionCommission(uint256 commission)\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"C1\\\"\\n        );\\n        require(commission <= 3000, \\\"C2\\\");\\n        _defaultAuctionCommission = commission;\\n\\n        return true;\\n    }\\n\\n    function setListing(\\n        address contractAddress,\\n        AssetType assetType,\\n        uint256 tokenId,\\n        ListingStatus status,\\n        uint numOfCopies,\\n        uint256 price,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 dropOfTheDayCommission,\\n        bool isDropOfTheDay\\n    ) external {\\n        \\n        require(\\n            assetType == AssetType.ERC721 || assetType == AssetType.ERC1155,\\n            \\\"\\\"\\n        );\\n\\n        if (assetType == AssetType.ERC721) {\\n            require(\\n                IERC721(contractAddress).balanceOf(msg.sender) > 0,\\n                \\\"F1\\\"\\n            );\\n            require(IERC721(contractAddress).isApprovedForAll(msg.sender,address(this)),\\\"A1\\\");\\n        } else if(assetType == AssetType.ERC1155) {\\n            require(\\n                IERC1155(contractAddress).balanceOf(msg.sender, tokenId) >= numOfCopies,\\n                \\\"F1\\\"\\n            );\\n            require(IERC1155(contractAddress).isApprovedForAll(msg.sender,address(this)),\\\"A1\\\");\\n        }\\n\\n        if (status == ListingStatus.ON_HOLD) {\\n            require(\\n                _listings[contractAddress][tokenId][msg.sender].highestBidder == address(0),\\n                \\\"\\\"\\n            );\\n\\n            _listings[contractAddress][tokenId][msg.sender] = Listing({\\n                contractAddress: contractAddress,\\n                assetType: assetType,\\n                status: status,\\n                numOfCopies:0,\\n                price: 0,\\n                startTime: 0,\\n                endTime: 0,\\n                commission: 0,\\n                isDropOfTheDay: false,\\n                highestBidder: address(0),\\n                highestBid: 0\\n            });\\n        } else if (status == ListingStatus.ON_SALE) {\\n            require(\\n                _listings[contractAddress][tokenId][msg.sender].status == ListingStatus.ON_HOLD,\\n                \\\"S2\\\"\\n            );\\n\\n            _listings[contractAddress][tokenId][msg.sender] = Listing({\\n                contractAddress: contractAddress,\\n                assetType: assetType,\\n                status: status,\\n                numOfCopies:numOfCopies,\\n                price: price,\\n                startTime: 0,\\n                endTime: 0,\\n                commission: _defaultCommission,\\n                isDropOfTheDay: false,\\n                highestBidder: address(0),\\n                highestBid: 0\\n            });\\n        } else if (status == ListingStatus.IS_AUCTION) {\\n            require(\\n                _listings[contractAddress][tokenId][msg.sender].status == ListingStatus.ON_HOLD,\\n                \\\"S2\\\"\\n            );\\n            require(\\n                block.timestamp < startTime && startTime < endTime,\\n                \\\"S1\\\"\\n            );\\n\\n            _listings[contractAddress][tokenId][msg.sender] = Listing({\\n                contractAddress: contractAddress,\\n                assetType: assetType,\\n                status: status,\\n                numOfCopies:numOfCopies,\\n                price: price,\\n                startTime: startTime,\\n                endTime: endTime,\\n                commission: _defaultAuctionCommission,\\n                isDropOfTheDay: false,\\n                highestBidder: address(0),\\n                highestBid: 0\\n            });\\n        } else if(isDropOfTheDay){\\n            //putting DOTD on auction\\n            require(\\n                hasRole(DROP_OF_THE_DAY_CREATOR_ROLE, msg.sender),\\n                \\\"Marketplace: Caller is not a drop of the day creator\\\"\\n            );\\n            require(\\n                _listings[contractAddress][tokenId][msg.sender].status == ListingStatus.ON_HOLD,\\n                \\\"S2\\\"\\n            );\\n            require(\\n                block.timestamp < startTime && startTime < endTime,\\n                \\\"S1\\\"\\n            );\\n            require(\\n                dropOfTheDayCommission <= 3000,\\n                \\\"C2\\\"\\n            );\\n            _listings[contractAddress][tokenId][msg.sender] = Listing({\\n                contractAddress: contractAddress,\\n                assetType: assetType,\\n                status: status,\\n                numOfCopies:numOfCopies,\\n                price: price,\\n                startTime: startTime,\\n                endTime: endTime,\\n                commission: dropOfTheDayCommission,\\n                isDropOfTheDay: isDropOfTheDay,\\n                highestBidder: address(0),\\n                highestBid: 0\\n            });\\n        }\\n    }\\n\\n    function listingOf(address contractAddress, address account, uint256 tokenId)\\n        external\\n        view\\n        returns (Listing memory)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"\\\"\\n        );\\n\\n        return _listings[contractAddress][tokenId][account];\\n    }\\n\\n    function buy(uint256 tokenId, uint numOfCopies,address itemOwner, address contractAddress, bool isIERC2981)\\n        external\\n        payable\\n        returns (bool)\\n    {\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].status == ListingStatus.ON_SALE,\\n            \\\"\\\"\\n        );\\n\\n        if (_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC721) {\\n            require(\\n                IERC721(contractAddress).balanceOf(itemOwner) > 0,\\n                \\\"S3\\\"\\n            );\\n            require(msg.value == _listings[contractAddress][tokenId][itemOwner].price*1, \\\"\\\");\\n        } else if(_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC1155) {\\n            require(\\n                IERC1155(contractAddress).balanceOf(itemOwner, tokenId) >= _listings[contractAddress][tokenId][itemOwner].numOfCopies,\\n                \\\" S3\\\"\\n            );\\n            require(\\n                _listings[contractAddress][tokenId][itemOwner].numOfCopies>=numOfCopies,\\n                \\\" S3\\\"\\n            );\\n            require(msg.value == numOfCopies * _listings[contractAddress][tokenId][itemOwner].price, \\\"\\\");\\n        }\\n       \\n        if (_listings[contractAddress][tokenId][itemOwner].isDropOfTheDay) {\\n            require(\\n                block.timestamp >= _listings[contractAddress][tokenId][itemOwner].startTime &&\\n                block.timestamp <= _listings[contractAddress][tokenId][itemOwner].endTime,\\n                \\\"\\\"\\n            );\\n        }\\n        uint256 commision =\\n            (msg.value * _listings[contractAddress][tokenId][itemOwner].commission) / 10000;\\n\\n        uint copiesLeft = 0;\\n        address ownerRoyaltyAddr;\\n        uint ownerRoyaltyAmount;\\n        \\n        if (_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC721) {\\n            IERC721(contractAddress).safeTransferFrom(itemOwner, msg.sender, tokenId);\\n            if(isIERC2981) {\\n                (ownerRoyaltyAddr,ownerRoyaltyAmount) = IERC2981(contractAddress).royaltyInfo(tokenId, msg.value);\\n            }\\n            \\n        } else if(_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC1155) {\\n            IERC1155(contractAddress).safeTransferFrom(itemOwner, msg.sender, tokenId, numOfCopies, \\\"\\\");\\n            if(isIERC2981) {\\n                (ownerRoyaltyAddr,ownerRoyaltyAmount) = IERC2981(contractAddress).royaltyInfo(tokenId, msg.value);\\n            }\\n            copiesLeft = _listings[contractAddress][tokenId][itemOwner].numOfCopies - numOfCopies;\\n        }\\n\\n         _listings[contractAddress][tokenId][itemOwner] = Listing({\\n            contractAddress: copiesLeft >= 1 ? contractAddress : address(0),\\n            assetType: copiesLeft >= 1 ? _listings[contractAddress][tokenId][itemOwner].assetType : AssetType.UNKNOWN,\\n            status: copiesLeft >= 1 ? _listings[contractAddress][tokenId][itemOwner].status : ListingStatus.ON_HOLD,\\n            numOfCopies: copiesLeft >= 1 ? copiesLeft : 0,\\n            price: copiesLeft >= 1 ? _listings[contractAddress][tokenId][itemOwner].price : 0,\\n            startTime: 0,\\n            endTime: 0,\\n            commission: 0,\\n            isDropOfTheDay: false,\\n            highestBidder: address(0),\\n            highestBid: 0\\n        });\\n        emit PurchaseConfirmed(tokenId, itemOwner, msg.sender);\\n        _outstandingPayments[_commissionReceiver] += commision;\\n        _outstandingPayments[itemOwner] += (msg.value - commision);\\n        _outstandingPayments[ownerRoyaltyAddr] += ownerRoyaltyAmount;\\n        emit TransferCommission(_commissionReceiver, tokenId, commision);\\n        emit TransferRoyalty(ownerRoyaltyAddr, tokenId, ownerRoyaltyAmount);\\n        return true;\\n    }\\n\\n    function withdrawPayment() external returns (bool) {\\n        uint256 amount = _outstandingPayments[msg.sender];\\n        if (amount > 0) {\\n            _outstandingPayments[msg.sender] = 0;\\n\\n            if (!payable(msg.sender).send(amount)) {\\n                _outstandingPayments[msg.sender] = amount;\\n                return false;\\n            }\\n            emit PaymentWithdrawn(amount);\\n        }\\n        return true;\\n    }\\n\\n    function outstandingPayment(address user) external view returns (uint256) {\\n        return _outstandingPayments[user];\\n    }\\n\\n    //Auction\\n    function bid(address contractAddress, uint256 tokenId, address itemOwner) external payable {\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].status == ListingStatus.IS_AUCTION,\\n            \\\"\\\"\\n        );\\n        require(\\n            block.timestamp <= _listings[contractAddress][tokenId][itemOwner].endTime &&\\n                block.timestamp >= _listings[contractAddress][tokenId][itemOwner].startTime,\\n            \\\"\\\"\\n        );\\n        require(\\n            msg.value > _listings[contractAddress][tokenId][itemOwner].highestBid,\\n            \\\"\\\"\\n        );\\n\\n        if (_listings[contractAddress][tokenId][itemOwner].highestBid != 0) {\\n            _outstandingPayments[\\n                _listings[contractAddress][tokenId][itemOwner].highestBidder\\n            ] += _listings[contractAddress][tokenId][itemOwner].highestBid;\\n        }\\n        _listings[contractAddress][tokenId][itemOwner].highestBidder = msg.sender;\\n        _listings[contractAddress][tokenId][itemOwner].highestBid = msg.value;\\n        emit HighestBidIncreased(tokenId, itemOwner, msg.sender, msg.value);\\n    }\\n\\n    function auctionEnd(address contractAddress, uint256 tokenId, address itemOwner, bool isIERC2981) external {\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].status == ListingStatus.IS_AUCTION,\\n            \\\"\\\"\\n        );\\n        require(\\n            block.timestamp > _listings[contractAddress][tokenId][itemOwner].endTime,\\n            \\\"\\\"\\n        );\\n\\n        uint256 commision =\\n            (_listings[contractAddress][tokenId][itemOwner].highestBid *\\n                _listings[contractAddress][tokenId][itemOwner].commission) / 10000;\\n\\n        address ownerRoyaltyAddr;\\n        uint ownerRoyaltyAmount;\\n        if (_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC721) {\\n            IERC721(contractAddress).safeTransferFrom(itemOwner, msg.sender, tokenId);\\n            if(isIERC2981){\\n                (ownerRoyaltyAddr,ownerRoyaltyAmount) = IERC2981(contractAddress).royaltyInfo(tokenId, _listings[contractAddress][tokenId][itemOwner].highestBid);\\n            }\\n        } else if(_listings[contractAddress][tokenId][itemOwner].assetType == AssetType.ERC1155) {\\n            IERC1155(contractAddress).safeTransferFrom(itemOwner, msg.sender, tokenId, 1, \\\"\\\");\\n            if(isIERC2981){\\n                (ownerRoyaltyAddr,ownerRoyaltyAmount) = IERC2981(contractAddress).royaltyInfo(tokenId, _listings[contractAddress][tokenId][itemOwner].highestBid);\\n            }\\n        }\\n        _listings[contractAddress][tokenId][itemOwner] = Listing({\\n            contractAddress: address(0),\\n            assetType: AssetType.UNKNOWN,\\n            status: ListingStatus.ON_HOLD,\\n            numOfCopies:_listings[contractAddress][tokenId][itemOwner].numOfCopies,\\n            price: 0,\\n            startTime: 0,\\n            endTime: 0,\\n            commission: 0,\\n            isDropOfTheDay: false,\\n            highestBidder: _listings[contractAddress][tokenId][itemOwner].highestBidder,\\n            highestBid: _listings[contractAddress][tokenId][itemOwner].highestBid\\n        });\\n        emit AuctionEnded(\\n            tokenId,\\n            itemOwner,\\n            _listings[contractAddress][tokenId][itemOwner].highestBidder,\\n            _listings[contractAddress][tokenId][itemOwner].highestBid\\n        );\\n\\n        _outstandingPayments[itemOwner] += commision;\\n        _outstandingPayments[itemOwner] += (_listings[contractAddress][tokenId][itemOwner].highestBid - commision);\\n        _outstandingPayments[ownerRoyaltyAddr] += ownerRoyaltyAmount;\\n        emit TransferCommission(_commissionReceiver, tokenId, commision);\\n        emit TransferRoyalty(ownerRoyaltyAddr, tokenId, ownerRoyaltyAmount);\\n    }\\n\\n    function setDropOfTheDayAuctionEndTime(uint256 tokenId, address contractAddress,address itemOwner,uint256 newEndTime) external{\\n        require(\\n            hasRole(DROP_OF_THE_DAY_CREATOR_ROLE, msg.sender),\\n            \\\"\\\"\\n        );\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].status == ListingStatus.IS_AUCTION,\\n            \\\"\\\"\\n        );\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].isDropOfTheDay,\\n            \\\"\\\"\\n        );\\n        require(\\n            _listings[contractAddress][tokenId][itemOwner].endTime < newEndTime,\\n            \\\"\\\"\\n        );\\n        _listings[contractAddress][tokenId][itemOwner].endTime = newEndTime;\\n    }\\n\\n    /** transfer ADMIN ROLE functions*/\\n\\n    //admin call this function first to approve the addr\\n    function approveAddressForRole(address _receipent) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\\"C1\\\");\\n        _approveForRole[_receipent] = true;\\n    }\\n    //approved address will call this function and ask for permission\\n    function askForRole() external {\\n        require(_approveForRole[msg.sender], \\\"\\\");\\n        _askForRole = true;\\n    }\\n    //admin will call this function and assing the ADMIN role\\n    function transferRoleOwnership(address _receipent) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\\"C1\\\");\\n        require(_askForRole,\\\"\\\");\\n        _approveForRole[_receipent] = false;\\n        _askForRole = false;\\n        super.grantRole(DEFAULT_ADMIN_ROLE, _receipent);\\n        renounceRole(DEFAULT_ADMIN_ROLE,msg.sender);\\n    }\\n\\n    /**batch listing function */\\n    function setBatchListing(\\n        address[] memory contractAddress,\\n        AssetType assetType,\\n        uint256[] memory tokenId,\\n        ListingStatus status,\\n        uint[] memory numOfCopies,\\n        uint256[] memory price,\\n        uint256[] memory startTime,\\n        uint256[] memory endTime\\n    ) external {\\n        \\n        require(\\n            assetType == AssetType.ERC721 || assetType == AssetType.ERC1155,\\n            \\\"\\\"\\n        );\\n        require(contractAddress.length == tokenId.length,\\\"\\\");\\n        require(contractAddress.length == numOfCopies.length,\\\"\\\");\\n        require(contractAddress.length == price.length,\\\"\\\");\\n        require(contractAddress.length == startTime.length,\\\"\\\");\\n        require(contractAddress.length == endTime.length,\\\"\\\");\\n        require(startTime.length == endTime.length,\\\"\\\");\\n\\n        if (assetType == AssetType.ERC721) {\\n            for(uint16 i=0;i<contractAddress.length;i++){\\n                require(\\n                    IERC721(contractAddress[i]).balanceOf(msg.sender) > 0,\\n                    \\\"F1\\\"\\n                );\\n                require(\\n                    IERC721(contractAddress[i]).isApprovedForAll(msg.sender,address(this)),\\n                    \\\"A1\\\"\\n                );\\n            }\\n            \\n        } else if(assetType == AssetType.ERC1155) {\\n            for(uint16 i=0;i<contractAddress.length;i++){\\n                require(IERC1155(contractAddress[i]).balanceOf(msg.sender, tokenId[i]) >= 1,\\n                \\\"F1\\\"\\n                );\\n                require(IERC1155(contractAddress[i]).isApprovedForAll(msg.sender,address(this)),\\\"A1\\\");\\n            }\\n            \\n        }\\n\\n        if (status == ListingStatus.ON_HOLD) {\\n            for(uint16 i=0;i<contractAddress.length;i++){\\n                require(\\n                _listings[contractAddress[i]][tokenId[i]][msg.sender].highestBidder == address(0),\\n                \\\"\\\"\\n            );\\n\\n                _listings[contractAddress[i]][tokenId[i]][msg.sender] = Listing({\\n                    contractAddress: contractAddress[i],\\n                    assetType: assetType,\\n                    status: status,\\n                    numOfCopies:0,\\n                    price: 0,\\n                    startTime: 0,\\n                    endTime: 0,\\n                    commission: 0,\\n                    isDropOfTheDay: false,\\n                    highestBidder: address(0),\\n                    highestBid: 0\\n                });\\n\\n            }\\n            \\n        } else if (status == ListingStatus.ON_SALE) {\\n            for(uint16 i=0;i<contractAddress.length;i++){\\n                require(\\n                    _listings[contractAddress[i]][tokenId[i]][msg.sender].status == ListingStatus.ON_HOLD,\\n                    \\\"S2\\\"\\n                );\\n\\n                _listings[contractAddress[i]][tokenId[i]][msg.sender] = Listing({\\n                    contractAddress: contractAddress[i],\\n                    assetType: assetType,\\n                    status: status,\\n                    numOfCopies:numOfCopies[i],\\n                    price: price[i],\\n                    startTime: 0,\\n                    endTime: 0,\\n                    commission: _defaultCommission,\\n                    isDropOfTheDay: false,\\n                    highestBidder: address(0),\\n                    highestBid: 0\\n                });\\n            }\\n            \\n        } else if (status == ListingStatus.IS_AUCTION) {\\n            for(uint16 i=0; i<startTime.length;i++){\\n                require(\\n                    block.timestamp < startTime[i] && startTime[i] < endTime[i],\\n                    \\\"S1\\\"\\n                );\\n            }\\n            for(uint16 i=0;i<contractAddress.length;i++){\\n                require(\\n                    _listings[contractAddress[i]][tokenId[i]][msg.sender].status == ListingStatus.ON_HOLD,\\n                    \\\"S2\\\"\\n                );\\n            \\n                _listings[contractAddress[i]][tokenId[i]][msg.sender] = Listing({\\n                    contractAddress: contractAddress[i],\\n                    assetType: assetType,\\n                    status: status,\\n                    numOfCopies:numOfCopies[i],\\n                    price: price[i],\\n                    startTime: startTime[i],\\n                    endTime: endTime[i],\\n                    commission: _defaultAuctionCommission,\\n                    isDropOfTheDay: false,\\n                    highestBidder: address(0),\\n                    highestBid: 0\\n                });\\n            }\\n        } \\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"PurchaseConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferRoyalty\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DROP_OF_THE_DAY_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receipent\",\"type\":\"address\"}],\"name\":\"approveAddressForRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"askForRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isIERC2981\",\"type\":\"bool\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfCopies\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isIERC2981\",\"type\":\"bool\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAuctionCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"listingOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum SatoshiMarketplaceV7.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"enum SatoshiMarketplaceV7.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numOfCopies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDropOfTheDay\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"}],\"internalType\":\"struct SatoshiMarketplaceV7.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"outstandingPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"},{\"internalType\":\"enum SatoshiMarketplaceV7.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"enum SatoshiMarketplaceV7.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"numOfCopies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"price\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTime\",\"type\":\"uint256[]\"}],\"name\":\"setBatchListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setCommissionReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setDefaultAuctionCommission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"setDefaultCommission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"setDropOfTheDayAuctionEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum SatoshiMarketplaceV7.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum SatoshiMarketplaceV7.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numOfCopies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropOfTheDayCommission\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDropOfTheDay\",\"type\":\"bool\"}],\"name\":\"setListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receipent\",\"type\":\"address\"}],\"name\":\"transferRoleOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SatoshiMarketplaceV7", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}