{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/BuyAdapter.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n// File: original_contracts/lib/uniswapv2/IUniswapV2Pair.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IUniswapV2Pair {\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    )\\n        external;\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: original_contracts/lib/uniswapv2/NewUniswapV2Lib.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\nlibrary NewUniswapV2Lib {\\n    using SafeMath for uint256;\\n\\n    function getReservesByPair(\\n        address pair,\\n        bool direction\\n    )\\n        internal\\n        view\\n        returns (uint256 reserveIn, uint256 reserveOut)\\n    {\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\\n        (reserveIn, reserveOut) = direction ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address pair,\\n        bool direction,\\n        uint256 fee\\n    )\\n        internal\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"UniswapV2Lib: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, direction);\\n        uint256 amountInWithFee = amountIn.mul(fee);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = uint256(numerator / denominator);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        address pair,\\n        bool direction,\\n        uint256 fee\\n    )\\n        internal\\n        view\\n        returns (uint256 amountIn)\\n    {\\n        require(amountOut > 0, \\\"UniswapV2Lib: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, direction);\\n        require(reserveOut > amountOut, \\\"UniswapV2Lib: reserveOut should be greater than amountOut\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(fee);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/ITokenTransferProxy.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ITokenTransferProxy {\\n\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n}\\n\\n// File: original_contracts/lib/Utils.sol\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\ninterface IERC20PermitLegacy {\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETH_ADDRESS = address(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    \\n    uint256 constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct BuyData {\\n        address adapter;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        address payable beneficiary;\\n        Utils.Route[] route;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee;//NOT USED\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index;//Adapter at which index needs to be used\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee;//NOT USED - Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee;//NOT USED - Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\\n\\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    )\\n    internal\\n    {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{value: amount, gas: 10000}(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            }\\n            else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n\\n    }\\n\\n    function tokenBalance(\\n        address token,\\n        address account\\n    )\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(\\n        address token,\\n        bytes memory permit\\n    )\\n        internal\\n    {\\n        if (permit.length == 32 * 7) {\\n            (bool success,) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n\\n        if (permit.length == 32 * 8) {\\n            (bool success,) = token.call(abi.encodePacked(IERC20PermitLegacy.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n}\\n\\n// File: original_contracts/lib/weth/IWETH.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\\n// File: original_contracts/lib/uniswapv2/NewUniswapV2.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\n\\nabstract contract NewUniswapV2 {\\n    using SafeMath for uint256;\\n\\n    // Pool bits are 255-161: fee, 160: direction flag, 159-0: address\\n    uint256 constant FEE_OFFSET = 161;\\n    uint256 constant DIRECTION_FLAG =\\n        0x0000000000000000000000010000000000000000000000000000000000000000;\\n\\n    struct UniswapV2Data {\\n        address weth;\\n        uint256[] pools;\\n    }\\n\\n    function swapOnUniswapV2Fork(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        UniswapV2Data memory data = abi.decode(payload, (UniswapV2Data));\\n        _swapOnUniswapV2Fork(\\n            address(fromToken),\\n            fromAmount,\\n            data.weth,\\n            data.pools\\n        );\\n    }\\n\\n    function buyOnUniswapFork(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        UniswapV2Data memory data = abi.decode(payload, (UniswapV2Data));\\n\\n        _buyOnUniswapFork(\\n            address(fromToken),\\n            amountInMax,\\n            amountOut,\\n            data.weth,\\n            data.pools\\n        );\\n    }\\n\\n    function _buyOnUniswapFork(\\n        address tokenIn,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address weth,\\n        uint256[] memory pools\\n    )\\n        private\\n        returns (uint256 tokensSold)\\n    {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        uint256[] memory amounts = new uint256[](pairs + 1);\\n\\n        amounts[pairs] = amountOut;\\n\\n        for (uint256 i = pairs; i != 0; --i) {\\n            uint256 p = pools[i - 1];\\n            amounts[i - 1] = NewUniswapV2Lib.getAmountIn(\\n                amounts[i],\\n                address(p),\\n                p & DIRECTION_FLAG == 0,\\n                p >> FEE_OFFSET\\n            );\\n        }\\n\\n        tokensSold = amounts[0];\\n        require(tokensSold <= amountInMax, \\\"UniswapV2Router: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        bool tokensBoughtEth;\\n\\n        if (tokenIn == Utils.ethAddress()) {\\n            IWETH(weth).deposit{value: tokensSold}();\\n            require(IWETH(weth).transfer(address(pools[0]), tokensSold));\\n        } else {\\n            TransferHelper.safeTransfer(tokenIn, address(pools[0]), tokensSold);\\n            tokensBoughtEth = weth != address(0);\\n        }\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            (uint256 amount0Out, uint256 amount1Out) = p & DIRECTION_FLAG == 0\\n                ? (uint256(0), amounts[i + 1]) : (amounts[i + 1], uint256(0));\\n            IUniswapV2Pair(address(p)).swap(\\n                amount0Out,\\n                amount1Out,\\n                i + 1 == pairs ? address(this) : address(pools[i + 1]),\\n                \\\"\\\"\\n            );\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(amountOut);\\n        }\\n    }\\n\\n    function _swapOnUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address weth,\\n        uint256[] memory pools\\n    )\\n        private\\n        returns (uint256 tokensBought)\\n    {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        bool tokensBoughtEth;\\n\\n        if (tokenIn == Utils.ethAddress()) {\\n            IWETH(weth).deposit{value: amountIn}();\\n            require(IWETH(weth).transfer(address(pools[0]), amountIn));\\n        } else {\\n            TransferHelper.safeTransfer(tokenIn, address(pools[0]), amountIn);\\n            tokensBoughtEth = weth != address(0);\\n        }\\n\\n        tokensBought = amountIn;\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            address pool = address(p);\\n            bool direction = p & DIRECTION_FLAG == 0;\\n\\n            tokensBought = NewUniswapV2Lib.getAmountOut(\\n                tokensBought, pool, direction, p >> FEE_OFFSET\\n            );\\n            (uint256 amount0Out, uint256 amount1Out) = direction\\n                ? (uint256(0), tokensBought) : (tokensBought, uint256(0));\\n            IUniswapV2Pair(pool).swap(\\n                amount0Out,\\n                amount1Out,\\n                i + 1 == pairs ? address(this) : address(pools[i + 1]),\\n                \\\"\\\"\\n            );\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(tokensBought);\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/uniswapv3/ISwapRouterUniV3.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ISwapRouterUniV3 {\\n\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  function exactInputSingle(ExactInputSingleParams calldata params)\\n  external payable\\n  returns (uint256 amountOut);\\n\\n  function exactOutputSingle(ExactOutputSingleParams calldata params)\\n  external payable returns (uint256 amountIn);\\n\\n}\\n\\n// File: original_contracts/lib/WethProvider.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract WethProvider {\\n    address public immutable WETH;\\n\\n    constructor(address weth) public {\\n        WETH = weth;\\n    }\\n}\\n\\n// File: original_contracts/lib/uniswapv3/UniswapV3.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\nabstract contract UniswapV3 is WethProvider{\\n\\n  struct UniswapV3Data {\\n    uint24 fee;\\n    uint256 deadline;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  function swapOnUniswapV3(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n\\n    UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\\n\\n    address _fromToken = address(fromToken) == Utils.ethAddress()\\n    ? WETH : address(fromToken);\\n    address _toToken = address(toToken) == Utils.ethAddress()\\n    ? WETH : address(toToken);\\n\\n    if (address(fromToken) == Utils.ethAddress()) {\\n      IWETH(WETH).deposit{value : fromAmount}();\\n    }\\n\\n    Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n    ISwapRouterUniV3(exchange).exactInputSingle(ISwapRouterUniV3.ExactInputSingleParams(\\n      {\\n      tokenIn : _fromToken,\\n      tokenOut : _toToken,\\n      fee : data.fee,\\n      recipient : address(this),\\n      deadline : data.deadline,\\n      amountIn : fromAmount,\\n      amountOutMinimum : 1,\\n      sqrtPriceLimitX96 : data.sqrtPriceLimitX96\\n      }\\n      )\\n    );\\n\\n    if (address(toToken) == Utils.ethAddress()) {\\n      IWETH(WETH).withdraw(\\n        IERC20(WETH).balanceOf(address(this))\\n      );\\n    }\\n\\n  }\\n\\n\\n  function buyOnUniswapV3(\\n    IERC20 fromToken,\\n    IERC20 toToken,\\n    uint256 fromAmount,\\n    uint256 toAmount,\\n    address exchange,\\n    bytes calldata payload\\n  )\\n    internal\\n  {\\n\\n    UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\\n\\n    address _fromToken = address(fromToken) == Utils.ethAddress()\\n    ? WETH : address(fromToken);\\n    address _toToken = address(toToken) == Utils.ethAddress()\\n    ? WETH : address(toToken);\\n\\n    if (address(fromToken) == Utils.ethAddress()) {\\n      IWETH(WETH).deposit{value : fromAmount}();\\n    }\\n\\n    Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n    ISwapRouterUniV3(exchange).exactOutputSingle(ISwapRouterUniV3.ExactOutputSingleParams(\\n      {\\n      tokenIn : _fromToken,\\n      tokenOut : _toToken,\\n      fee : data.fee,\\n      recipient : address(this),\\n      deadline : data.deadline,\\n      amountOut : toAmount,\\n      amountInMaximum : fromAmount,\\n      sqrtPriceLimitX96 : data.sqrtPriceLimitX96\\n      }\\n      )\\n    );\\n\\n    if (\\n      address(fromToken) == Utils.ethAddress() ||\\n      address(toToken) == Utils.ethAddress()\\n    ) {\\n      IWETH(WETH).withdraw(\\n        IERC20(WETH).balanceOf(address(this))\\n      );\\n    }\\n\\n  }\\n}\\n\\n// File: original_contracts/lib/zeroxv4/LibOrderV4.sol\\n\\n/* solium-disable */\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nlibrary LibOrderV4 {\\n    struct Order {\\n        IERC20 makerToken;\\n        IERC20 takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN\\n    }\\n\\n    struct Signature {\\n        // How to validate the signature.\\n        SignatureType signatureType;\\n        // EC Signature data.\\n        uint8 v;\\n        // EC Signature data.\\n        bytes32 r;\\n        // EC Signature data.\\n        bytes32 s;\\n    }\\n}\\n\\n// File: original_contracts/lib/zeroxv4/ZeroxV4.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ninterface IZeroxV4 {\\n\\n    function fillRfqOrder(\\n        // The order\\n        LibOrderV4.Order calldata order,\\n        // The signature\\n        LibOrderV4.Signature calldata signature,\\n        // How much taker token to fill the order with\\n        uint128 takerTokenFillAmount\\n    )\\n        external\\n        payable\\n        // How much maker token from the order the taker received.\\n        returns (uint128, uint128);\\n}\\n\\nabstract contract ZeroxV4 is WethProvider {\\n    using SafeMath for uint256;\\n\\n    struct ZeroxV4Data {\\n        LibOrderV4.Order order;\\n        LibOrderV4.Signature signature;\\n    }\\n\\n    function swapOnZeroXv4(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{value: fromAmount}();\\n        }\\n\\n        _swapOn0xV4(\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            exchange,\\n            payload\\n        );\\n    }\\n\\n    function buyOnZeroXv4(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmountMax,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        ZeroxV4Data memory data = abi.decode(payload, (ZeroxV4Data));\\n\\n        require(toAmount <= data.order.makerAmount, \\\"insufficient makerAmount\\\");\\n        uint256 fromAmount = toAmount\\n            .mul(data.order.takerAmount)\\n            .add(data.order.makerAmount - 1) // make divide round up\\n            .div(data.order.makerAmount);\\n        require(fromAmount <= fromAmountMax, \\\"insufficient fromAmountMax\\\");\\n\\n        address _fromToken = address(fromToken);\\n        address _toToken = address(toToken);\\n        require(_fromToken != _toToken, \\\"fromToken should be different from toToken\\\");\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            _fromToken = WETH;\\n            IWETH(WETH).deposit{value: fromAmount}();\\n        }\\n        else if (address(toToken) == Utils.ethAddress()) {\\n            _toToken = WETH;\\n        }\\n\\n        require(address(data.order.takerToken) == address(_fromToken), \\\"Invalid from token!!\\\");\\n        require(address(data.order.makerToken) == address(_toToken), \\\"Invalid to token!!\\\");\\n\\n        Utils.approve(exchange, address(_fromToken), fromAmount);\\n\\n        IZeroxV4(exchange).fillRfqOrder(\\n            data.order,\\n            data.signature,\\n            uint128(fromAmount)\\n        );\\n\\n        if (\\n            address(fromToken) == Utils.ethAddress() ||\\n            address(toToken) == Utils.ethAddress()\\n        ) {\\n            uint256 amount = IERC20(WETH).balanceOf(address(this));\\n            // Normally will expect 0 when going from ETH\\n            // (because only amount required was deposited as WETH)\\n            if (amount > 0) {\\n                IWETH(WETH).withdraw(amount);\\n            }\\n        }\\n    }\\n\\n    function _swapOn0xV4(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes memory payload) private {\\n\\n        ZeroxV4Data memory data = abi.decode(payload, (ZeroxV4Data));\\n\\n        address _fromToken = address(fromToken);\\n        address _toToken = address(toToken);\\n        require(_fromToken != _toToken, \\\"fromToken should be different from toToken\\\");\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            _fromToken = WETH;\\n        }\\n        else if (address(toToken) == Utils.ethAddress()) {\\n            _toToken = WETH;\\n        }\\n\\n        require(address(data.order.takerToken) == address(_fromToken), \\\"Invalid from token!!\\\");\\n        require(address(data.order.makerToken) == address(_toToken), \\\"Invalid to token!!\\\");\\n\\n        Utils.approve(exchange, address(_fromToken), fromAmount);\\n\\n        IZeroxV4(exchange).fillRfqOrder(\\n            data.order,\\n            data.signature,\\n            uint128(fromAmount)\\n        );\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            uint256 receivedAmount = Utils.tokenBalance(WETH, address(this));\\n            IWETH(WETH).withdraw(receivedAmount);\\n        }\\n    }\\n}\\n\\n// File: original_contracts/lib/balancer/IBalancerPool.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface IBalancerPool {\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        address tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    )\\n        external\\n        returns (\\n            uint tokenAmountOut,\\n            uint spotPriceAfter\\n        );\\n\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint maxAmountIn,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    )\\n        external\\n        returns (\\n            uint tokenAmountIn,\\n            uint spotPriceAfter\\n        );\\n}\\n\\n// File: original_contracts/lib/balancer/Balancer.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ninterface IBalancerProxy {\\n\\n  struct Swap {\\n        address pool;\\n        uint tokenInParam; // tokenInAmount / maxAmountIn / limitAmountIn\\n        uint tokenOutParam; // minAmountOut / tokenAmountOut / limitAmountOut\\n        uint maxPrice;\\n    }\\n\\n    function batchSwapExactIn(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut\\n    )\\n        external\\n        returns (uint totalAmountOut);\\n\\n    function batchSwapExactOut(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint maxTotalAmountIn\\n    )\\n        external\\n        returns (uint totalAmountIn);\\n\\n    function batchEthInSwapExactIn(\\n        Swap[] calldata swaps,\\n        address tokenOut,\\n        uint minTotalAmountOut\\n    )\\n        external\\n        payable\\n        returns (uint totalAmountOut);\\n\\n    function batchEthOutSwapExactIn(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut\\n    )\\n        external\\n        returns (uint totalAmountOut);\\n\\n    function batchEthInSwapExactOut(\\n        Swap[] calldata swaps,\\n        address tokenOut\\n    )\\n        external\\n        payable\\n        returns (uint totalAmountIn);\\n\\n    function batchEthOutSwapExactOut(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        uint maxTotalAmountIn\\n    )\\n        external\\n        returns (uint totalAmountIn);\\n}\\n\\nabstract contract Balancer is WethProvider {\\n    using SafeMath for uint256;\\n\\n    struct BalancerData {\\n        IBalancerProxy.Swap[] swaps;\\n    }\\n\\n    function swapOnBalancer(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchangeProxy,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        BalancerData memory data = abi.decode(payload, (BalancerData));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress()\\n            ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress()\\n            ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n             IWETH(WETH).deposit{value: fromAmount}();\\n        }\\n\\n        uint256 totalInParam;\\n        for (uint i = 0; i < data.swaps.length; ++i) {\\n            totalInParam = totalInParam.add(data.swaps[i].tokenInParam);\\n        }\\n\\n        for (uint i = 0; i < data.swaps.length; ++i) {\\n            IBalancerProxy.Swap memory _swap = data.swaps[i];\\n            uint256 adjustedInParam =\\n                _swap.tokenInParam.mul(fromAmount).div(totalInParam);\\n            Utils.approve(\\n                _swap.pool,\\n                _fromToken,\\n                adjustedInParam\\n            );\\n            IBalancerPool(_swap.pool).swapExactAmountIn(\\n                _fromToken,\\n                adjustedInParam,\\n                _toToken,\\n                _swap.tokenOutParam,\\n                _swap.maxPrice\\n            );\\n        }\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(\\n                IERC20(WETH).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    function buyOnBalancer(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchangeProxy,\\n        bytes calldata payload\\n    )\\n        internal\\n    {\\n        BalancerData memory data = abi.decode(payload, (BalancerData));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress()\\n            ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress()\\n            ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{value: fromAmount}();\\n        }\\n\\n        _buyOnBalancer(\\n            _fromToken,\\n            _toToken,\\n            fromAmount,\\n            toAmount,\\n            data\\n        );\\n\\n        if (\\n            address(fromToken) == Utils.ethAddress() ||\\n            address(toToken) == Utils.ethAddress()\\n        ) {\\n            IWETH(WETH).withdraw(\\n                IERC20(WETH).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    function _buyOnBalancer(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        BalancerData memory data\\n    )\\n        private\\n    {\\n        uint256 totalInParam;\\n        uint256 totalOutParam;\\n        for (uint i = 0; i < data.swaps.length; ++i) {\\n            IBalancerProxy.Swap memory _swap = data.swaps[i];\\n            totalInParam = totalInParam.add(_swap.tokenInParam);\\n            totalOutParam = totalOutParam.add(_swap.tokenOutParam);\\n        }\\n\\n        for (uint i = 0; i < data.swaps.length; ++i) {\\n            IBalancerProxy.Swap memory _swap = data.swaps[i];\\n            uint256 adjustedInParam =\\n                _swap.tokenInParam.mul(fromAmount).div(totalInParam);\\n            uint256 adjustedOutParam =\\n                _swap.tokenOutParam.mul(toAmount)\\n                    .add(totalOutParam - 1).div(totalOutParam);\\n            Utils.approve(_swap.pool, _fromToken, adjustedInParam);\\n            IBalancerPool(_swap.pool).swapExactAmountOut(\\n                _fromToken,\\n                adjustedInParam,\\n                _toToken,\\n                adjustedOutParam,\\n                _swap.maxPrice\\n            );\\n        }\\n    }\\n}\\n\\n// File: original_contracts/adapters/IBuyAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ninterface IBuyAdapter {\\n\\n    /**\\n    * @dev Certain adapters needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n   * @dev The function which performs the swap on an exchange.\\n   * @param index Index of the router in the adapter\\n   * @param fromToken Address of the source token\\n   * @param toToken Address of the destination token\\n   * @param maxFromAmount Max amount of source tokens to be swapped\\n   * @param toAmount Amount of destination tokens to be received\\n   * @param targetExchange Target exchange address to be called\\n   * @param payload extra data which needs to be passed to this router\\n   */\\n    function buy(\\n        uint256 index,\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxFromAmount,\\n        uint256 toAmount,\\n        address targetExchange,\\n        bytes calldata payload\\n    )\\n        external\\n        payable;\\n}\\n\\n// File: original_contracts/adapters/mainnet/BuyAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\n/**\\n* @dev This contract will route call to:\\n* 1- UniswapV2Forks\\n* 2- UniswapV3\\n* 3- ZeroXV4\\n* 4- Balancer (V1)\\n* The above are the indexes\\n*/\\ncontract BuyAdapter is IBuyAdapter, NewUniswapV2, UniswapV3, ZeroxV4, Balancer {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        address _weth\\n    )\\n        WethProvider(_weth)\\n        public\\n    {\\n    }\\n\\n    function initialize(bytes calldata data) override external {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function buy(\\n        uint256 index,\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxFromAmount,\\n        uint256 toAmount,\\n        address targetExchange,\\n        bytes calldata payload\\n    )\\n        external\\n        override\\n        payable\\n    {\\n        if (index == 1) {\\n            buyOnUniswapFork(\\n                fromToken,\\n                toToken,\\n                maxFromAmount,\\n                toAmount,\\n                payload\\n            );\\n        }\\n        else if (index == 2) {\\n            buyOnUniswapV3(\\n                fromToken,\\n                toToken,\\n                maxFromAmount,\\n                toAmount,\\n                targetExchange,\\n                payload\\n            );\\n        }\\n        else if (index == 3) {\\n            buyOnZeroXv4(\\n                fromToken,\\n                toToken,\\n                maxFromAmount,\\n                toAmount,\\n                targetExchange,\\n                payload\\n            );\\n        }\\n        else if (index == 4) {\\n            buyOnBalancer(\\n                fromToken,\\n                toToken,\\n                maxFromAmount,\\n                toAmount,\\n                targetExchange,\\n                payload\\n            );\\n        }\\n        else {\\n            revert(\\\"Index not supported\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuyAdapter", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}