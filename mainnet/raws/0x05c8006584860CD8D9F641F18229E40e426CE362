{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/core/Rewards.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\n\\nimport {RewardsInterface} from \\\"../interfaces/RewardsInterface.sol\\\";\\nimport {ERC20Interface} from \\\"../interfaces/ERC20Interface.sol\\\";\\nimport {OtokenInterface} from \\\"../interfaces/OtokenInterface.sol\\\";\\nimport {AddressBookInterface} from \\\"../interfaces/AddressBookInterface.sol\\\";\\nimport {WhitelistInterface} from \\\"../interfaces/WhitelistInterface.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"../packages/oz/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"../packages/oz/Ownable.sol\\\";\\n\\n/**\\n * @title Rewards\\n * @author 10 Delta\\n * @notice The rewards module distributes liquidity mining rewards to oToken shorters\\n */\\ncontract Rewards is Ownable, RewardsInterface {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20Interface;\\n\\n    /// @notice AddressBook module address\\n    AddressBookInterface public immutable addressBook;\\n    /// @notice token to pay rewards in\\n    ERC20Interface public rewardsToken;\\n    /// @notice address for notifying/removing rewards\\n    address public rewardsDistribution;\\n    /// @notice if true all vault owners will receive rewards\\n    bool public whitelistAllOwners;\\n    /// @notice if true rewards get forfeited when closing an oToken before expiry\\n    bool public forfeitRewards;\\n    /// @notice total rewards forfeited\\n    uint256 public forfeitedRewards;\\n    /// @notice the reward rate for an oToken\\n    mapping(address => uint256) public rewardRate;\\n    /// @notice the last upddate time for an oToken\\n    mapping(address => uint256) public lastUpdateTime;\\n    /// @notice the reward per token for an oToken\\n    mapping(address => uint256) public rewardPerTokenStored;\\n    /// @notice the reward per token for a user\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n    /// @notice the rewards earnt by a user\\n    mapping(address => mapping(address => uint256)) public rewards;\\n    /// @notice the total amount of each oToken\\n    mapping(address => uint256) public totalSupply;\\n    /// @notice the balances for each oToken\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    /**\\n     * @dev constructor\\n     * @param _addressBook AddressBook module address\\n     */\\n    constructor(address _addressBook) public {\\n        require(_addressBook != address(0), \\\"Rewards: Invalid address book\\\");\\n\\n        addressBook = AddressBookInterface(_addressBook);\\n    }\\n\\n    /// @notice emits an event when the whitelist all owners setting changes\\n    event WhitelistAllOwners(bool whitelisted);\\n    /// @notice emits an event when the forfeit rewards setting changes\\n    event ForfeitRewards(bool forfeited);\\n    /// @notice emits an event the rewards distribution address is updated\\n    event RewardsDistributionUpdated(address indexed _rewardsDistribution);\\n    /// @notice emits an event when rewards are added for an otoken\\n    event RewardAdded(address indexed otoken, uint256 reward);\\n    /// @notice emits an event when rewards are removed for an otoken\\n    event RewardRemoved(address indexed token, uint256 amount);\\n    /// @notice emits an event when forfeited rewards are recovered\\n    event RecoveredForfeitedRewards(uint256 amount);\\n    /// @notice emits an event when rewards are paid out to a user\\n    event RewardPaid(address indexed otoken, address indexed account, uint256 reward);\\n\\n    /**\\n     * @notice check if the sender is the controller module\\n     */\\n    modifier onlyController() {\\n        require(msg.sender == addressBook.getController(), \\\"Rewards: Sender is not Controller\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice check if the sender is the rewards distribution address\\n     */\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"Rewards: Sender is not RewardsDistribution\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice initializes the rewards token\\n     * @dev can only be called by the owner, doesn't allow reinitializing the rewards token\\n     * @param _rewardsToken the address of the rewards token\\n     */\\n    function setRewardsToken(address _rewardsToken) external onlyOwner {\\n        require(rewardsToken == ERC20Interface(0), \\\"Rewards: Token already set\\\");\\n\\n        rewardsToken = ERC20Interface(_rewardsToken);\\n    }\\n\\n    /**\\n     * @notice sets the rewards distribution address\\n     * @dev can only be called by the owner\\n     * @param _rewardsDistribution the new rewards distribution address\\n     */\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        rewardsDistribution = _rewardsDistribution;\\n\\n        emit RewardsDistributionUpdated(_rewardsDistribution);\\n    }\\n\\n    /**\\n     * @notice whitelists/blacklists all vault owners from receiving rewards\\n     * @dev can only be called by the owner\\n     * @param _whitelistAllOwners new boolean value to set whitelistAllOwners to\\n     */\\n    function setWhitelistAllOwners(bool _whitelistAllOwners) external onlyOwner {\\n        whitelistAllOwners = _whitelistAllOwners;\\n\\n        emit WhitelistAllOwners(_whitelistAllOwners);\\n    }\\n\\n    /**\\n     * @notice enables/disables forfeiting of rewards when closing an oToken short before expiry\\n     * @dev can only be called by the owner\\n     * @param _forfeitRewards new boolean value to set forfeitRewards to\\n     */\\n    function setForfeitRewards(bool _forfeitRewards) external onlyOwner {\\n        forfeitRewards = _forfeitRewards;\\n\\n        emit ForfeitRewards(_forfeitRewards);\\n    }\\n\\n    /**\\n     * @notice adds rewards for an oToken\\n     * @dev can only be called by rewards distribution, reverts if rewardsToken is uninitialized\\n     * @param otoken oToken to add rewards for\\n     * @param reward amount of rewards to add\\n     */\\n    function notifyRewardAmount(address otoken, uint256 reward) external onlyRewardsDistribution {\\n        _updateReward(otoken, address(0));\\n\\n        // Reverts if oToken is expired\\n        uint256 remaining = OtokenInterface(otoken).expiryTimestamp().sub(now);\\n        uint256 _rewardRate = (reward.div(remaining)).add(rewardRate[otoken]);\\n\\n        // Transfer reward amount to this contract\\n        // This is necessary because there can be multiple rewards so a balance check isn't enough\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), reward);\\n\\n        rewardRate[otoken] = _rewardRate;\\n        lastUpdateTime[otoken] = now;\\n\\n        emit RewardAdded(otoken, reward);\\n    }\\n\\n    /**\\n     * @notice remove rewards for an oToken\\n     * @dev can only be called by rewards distribution, reverts if rewardsToken is uninitialized\\n     * @param otoken oToken to remove rewards from\\n     * @param rate rewardRate to remove for an oToken\\n     */\\n    function removeRewardAmount(address otoken, uint256 rate) external onlyRewardsDistribution {\\n        _updateReward(otoken, address(0));\\n\\n        // Reverts if oToken is expired\\n        uint256 _rewardRate = rewardRate[otoken];\\n        uint256 reward = (OtokenInterface(otoken).expiryTimestamp().sub(now)).mul(rate);\\n\\n        // Transfers the removed reward amount back to the owner\\n        rewardsToken.safeTransfer(msg.sender, reward);\\n\\n        rewardRate[otoken] = _rewardRate.sub(rate);\\n        lastUpdateTime[otoken] = now;\\n\\n        emit RewardRemoved(otoken, reward);\\n    }\\n\\n    /**\\n     * @notice transfers forfeited rewards to rewards distribution\\n     * @dev can only be called by rewards distribution\\n     */\\n    function recoverForfeitedRewards() external onlyRewardsDistribution {\\n        uint256 _forfeitedRewards = forfeitedRewards;\\n        ERC20Interface _rewardsToken = rewardsToken;\\n        uint256 rewardsBalance = _rewardsToken.balanceOf(address(this));\\n        _rewardsToken.safeTransfer(msg.sender, _forfeitedRewards < rewardsBalance ? _forfeitedRewards : rewardsBalance);\\n        forfeitedRewards = 0;\\n        emit RecoveredForfeitedRewards(_forfeitedRewards);\\n    }\\n\\n    /**\\n     * @notice records the minting of oTokens\\n     * @dev can only be called by the controller\\n     * @param otoken oToken address\\n     * @param account vault owner\\n     * @param amount amount of oTokens minted\\n     */\\n    function mint(\\n        address otoken,\\n        address account,\\n        uint256 amount\\n    ) external override onlyController {\\n        if (isWhitelistedOwner(account)) {\\n            _updateReward(otoken, account);\\n            totalSupply[otoken] = totalSupply[otoken].add(amount);\\n            balances[otoken][account] = balances[otoken][account].add(amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice records the burning of oTokens\\n     * @dev can only be called by the controller\\n     * @param otoken oToken address\\n     * @param account vault owner\\n     * @param amount amount of oTokens burnt\\n     */\\n    function burn(\\n        address otoken,\\n        address account,\\n        uint256 amount\\n    ) external override onlyController {\\n        uint256 balance = balances[otoken][account];\\n        if (balance > 0) {\\n            _updateReward(otoken, account);\\n            amount = amount > balance ? balance : amount;\\n            totalSupply[otoken] = totalSupply[otoken].sub(amount);\\n            balances[otoken][account] = balance.sub(amount);\\n            if (forfeitRewards) {\\n                uint256 _rewards = rewards[otoken][account];\\n                uint256 _forfeitedRewards = _rewards.mul(amount).div(balance);\\n                rewards[otoken][account] = _rewards.sub(_forfeitedRewards);\\n                forfeitedRewards = forfeitedRewards.add(_forfeitedRewards);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice claims oToken minting rewards and transfers it to the vault owner\\n     * @dev can only be called by the controller\\n     * @param otoken oToken address\\n     * @param account vault owner\\n     */\\n    function getReward(address otoken, address account) external override onlyController {\\n        _getReward(otoken, account);\\n    }\\n\\n    /**\\n     * @notice allows vault owners to claim rewards if this module has been deprecated\\n     * @dev oToken must be expired before claiming rewards\\n     * @param otoken oToken address\\n     */\\n    function claimReward(address otoken) external {\\n        require(address(this) != addressBook.getRewards(), \\\"Rewards: Module not deprecated\\\");\\n        require(now >= OtokenInterface(otoken).expiryTimestamp(), \\\"Rewards: Not expired\\\");\\n        _getReward(otoken, msg.sender);\\n    }\\n\\n    /**\\n     * @notice checks if a vault owner is whitelisted\\n     * @param account vault owner\\n     * @return boolean, True if the vault owner is whitelisted\\n     */\\n    function isWhitelistedOwner(address account) public view returns (bool) {\\n        return whitelistAllOwners || WhitelistInterface(addressBook.getWhitelist()).isWhitelistedOwner(account);\\n    }\\n\\n    /**\\n     * @notice returns the last time rewards are applicable for an oToken\\n     * @param otoken oToken address\\n     * @return last time rewards are applicable for the oToken\\n     */\\n    function lastTimeRewardApplicable(address otoken) public view returns (uint256) {\\n        uint256 periodFinish = OtokenInterface(otoken).expiryTimestamp();\\n        return periodFinish > now ? now : periodFinish;\\n    }\\n\\n    /**\\n     * @notice returns the reward per token for an oToken\\n     * @param otoken oToken address\\n     * @return reward per token for the oToken\\n     */\\n    function rewardPerToken(address otoken) public view returns (uint256) {\\n        uint256 _totalSupply = totalSupply[otoken];\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored[otoken];\\n        }\\n        return\\n            rewardPerTokenStored[otoken].add(\\n                lastTimeRewardApplicable(otoken).sub(lastUpdateTime[otoken]).mul(rewardRate[otoken]).mul(1e18).div(\\n                    _totalSupply\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice returns the rewards a vault owner has earnt for an oToken\\n     * @param otoken oToken address\\n     * @param account vault owner address\\n     * @return rewards earnt by the vault owner\\n     */\\n    function earned(address otoken, address account) public view returns (uint256) {\\n        return\\n            balances[otoken][account]\\n                .mul(rewardPerToken(otoken).sub(userRewardPerTokenPaid[otoken][account]))\\n                .div(1e18)\\n                .add(rewards[otoken][account]);\\n    }\\n\\n    /**\\n     * @dev updates the reward per token and the rewards earnt by a vault owner\\n     * @param otoken oToken address\\n     * @param account vault owner address\\n     */\\n    function _updateReward(address otoken, address account) internal {\\n        uint256 _rewardPerTokenStored = rewardPerToken(otoken);\\n        rewardPerTokenStored[otoken] = _rewardPerTokenStored;\\n        if (account != address(0)) {\\n            lastUpdateTime[otoken] = lastTimeRewardApplicable(otoken);\\n            rewards[otoken][account] = earned(otoken, account);\\n            userRewardPerTokenPaid[otoken][account] = _rewardPerTokenStored;\\n        }\\n    }\\n\\n    /**\\n     * @dev claims oToken minting rewards and transfers it to the vault owner\\n     * @param otoken oToken address\\n     * @param account vault owner\\n     */\\n    function _getReward(address otoken, address account) internal {\\n        _updateReward(otoken, account);\\n        uint256 reward = rewards[otoken][account];\\n        if (reward > 0) {\\n            rewards[otoken][account] = 0;\\n            ERC20Interface _rewardsToken = rewardsToken;\\n            uint256 rewardsBalance = _rewardsToken.balanceOf(address(this));\\n            if (rewardsBalance > 0) {\\n                _rewardsToken.safeTransfer(account, reward < rewardsBalance ? reward : rewardsBalance);\\n                emit RewardPaid(otoken, account, reward);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/AddressBookInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface AddressBookInterface {\\n    /* Getters */\\n\\n    function getOtokenImpl() external view returns (address);\\n\\n    function getOtokenFactory() external view returns (address);\\n\\n    function getWhitelist() external view returns (address);\\n\\n    function getController() external view returns (address);\\n\\n    function getOracle() external view returns (address);\\n\\n    function getRewards() external view returns (address);\\n\\n    function getMarginPool() external view returns (address);\\n\\n    function getMarginCalculator() external view returns (address);\\n\\n    function getLiquidationManager() external view returns (address);\\n\\n    function getAddress(bytes32 _id) external view returns (address);\\n\\n    /* Setters */\\n\\n    function setOtokenImpl(address _otokenImpl) external;\\n\\n    function setOtokenFactory(address _factory) external;\\n\\n    function setWhitelist(address _whitelist) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setMarginPool(address _marginPool) external;\\n\\n    function setMarginCalculator(address _calculator) external;\\n\\n    function setLiquidationManager(address _liquidationManager) external;\\n\\n    function setOracle(address _oracle) external;\\n\\n    function setRewards(address _rewards) external;\\n\\n    function setAddress(bytes32 _id, address _newImpl) external;\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/ERC20Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/OtokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OtokenInterface {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n\\n    function isWhitelisted() external view returns (bool);\\n\\n    function init(\\n        address _addressBook,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut,\\n        bool _isWhitelisted\\n    ) external;\\n\\n    function getOtokenDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function mintOtoken(address account, uint256 amount) external;\\n\\n    function burnOtoken(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/RewardsInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface RewardsInterface {\\n    function mint(\\n        address otoken,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        address otoken,\\n        address account,\\n        uint256 amount\\n    ) external;\\n\\n    function getReward(address otoken, address account) external;\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/interfaces/WhitelistInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface WhitelistInterface {\\n    /* View functions */\\n\\n    function addressBook() external view returns (address);\\n\\n    function isWhitelistedProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external view returns (bool);\\n\\n    function isOwnerWhitelistedProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external view returns (bool);\\n\\n    function isWhitelistedCollateral(address _collateral) external view returns (bool);\\n\\n    function isWhitelistedOtoken(address _otoken) external view returns (bool);\\n\\n    function isOwnerWhitelistedOtoken(address _otoken) external view returns (bool);\\n\\n    function isWhitelistedCallee(address _callee) external view returns (bool);\\n\\n    function isWhitelistedOwner(address _owner) external view returns (bool);\\n\\n    function whitelistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n\\n    function whitelistCollateral(address _collateral) external;\\n\\n    /* Admin / factory only functions */\\n    function ownerWhitelistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n\\n    function blacklistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n\\n    function ownerWhitelistCollateral(address _collateral) external;\\n\\n    function blacklistCollateral(address _collateral) external;\\n\\n    function whitelistOtoken(address _otoken) external;\\n\\n    function blacklistOtoken(address _otoken) external;\\n\\n    function whitelistCallee(address _callee) external;\\n\\n    function blacklistCallee(address _callee) external;\\n\\n    function whitelistOwner(address account) external;\\n\\n    function blacklistOwner(address account) external;\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\npragma solidity 0.6.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../interfaces/ERC20Interface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20Interface;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        ERC20Interface token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        ERC20Interface token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {ERC20Interface-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        ERC20Interface token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        ERC20Interface token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        ERC20Interface token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(ERC20Interface token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gge/ribbon-finance/avocado/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"forfeited\",\"type\":\"bool\"}],\"name\":\"ForfeitRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredForfeitedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistAllOwners\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"contract AddressBookInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeitRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeitedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverForfeitedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"removeRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forfeitRewards\",\"type\":\"bool\"}],\"name\":\"setForfeitRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"setRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelistAllOwners\",\"type\":\"bool\"}],\"name\":\"setWhitelistAllOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAllOwners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Rewards", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000025fc3bb16cf37ad7f4e0c039bff1284f70cb6bcb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}