{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/BNBereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract ReentrancyGuarded {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.BNBereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract ERC1155 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external virtual view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) virtual external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) virtual external;\r\n\r\n    function isApprovedForAll(address account, address operator) virtual external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) virtual external;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) virtual external;\r\n}\r\ncontract tokenAuction is ReentrancyGuarded, Ownable\r\n{\r\n    uint256 private tokenID;\r\n    uint256 private auctionStartTime;\r\n    uint256 private auctionDuration;\r\n    uint256 private auctionEndTime;\r\n    address public highestBidder;\r\n    bool public AuctionOpen;\r\n    uint256 numberOfBidders;\r\n    address seller;\r\n    struct participant{\r\n        uint256 serial;\r\n        uint256 bidamount;\r\n        uint256 bidtime;\r\n        bool locked;\r\n        bool exist;\r\n    }\r\n    mapping (address => participant) public bidders;\r\n    constructor(uint256 _tokenid, uint256 _start, uint256 _duration, address _tokenOwner)\r\n    {\r\n        tokenID = _tokenid;\r\n        auctionStartTime = _start;\r\n        auctionDuration = _duration;\r\n        auctionEndTime = auctionStartTime + auctionDuration;\r\n        highestBidder = address(0);\r\n        numberOfBidders = 0;\r\n        AuctionOpen = true;\r\n        seller = _tokenOwner;\r\n    }\r\n    function participateInAuction(uint256 _amount, address _bidder) payable public returns (bool _success){\r\n        require(!bidders[_bidder].exist, \"Your already have placed your token for auction\");\r\n        require(_bidder != address(0));\r\n        //require(_amount <= msg.value, \"ambiguous bid\");\r\n        require(AuctionOpen, \"Auction is over\");\r\n        if((auctionStartTime + block.timestamp) >= auctionEndTime)\r\n          {\r\n              AuctionOpen = false;\r\n              return AuctionOpen;\r\n          }\r\n        bidders[_bidder].exist = true;\r\n        bidders[_bidder].bidamount = _amount;\r\n        bidders[_bidder].locked = true;\r\n        bidders[_bidder].bidtime = block.timestamp;\r\n        if(bidders[highestBidder].bidamount < _amount)\r\n         highestBidder = _bidder;\r\n        numberOfBidders += 1;\r\n         bidders[_bidder].serial = numberOfBidders;\r\n    }\r\n    function declareWinner() public view returns (address _winner) {\r\n        require((auctionStartTime + block.timestamp) >= auctionEndTime, \"Auction is still going on\");\r\n        require(highestBidder != address(0));\r\n        return highestBidder;\r\n       \r\n    }\r\n    function claimBackLockedBidAmount(address _claimer) public {\r\n        require((auctionStartTime + block.timestamp) >= auctionEndTime, \"Auction is still going on\");\r\n        require(bidders[_claimer].exist,\"The claimer address does not match with any bidder in this auction\");\r\n        if(AuctionOpen)\r\n         AuctionOpen = false;\r\n        require(_claimer != highestBidder, \"Winner can't get back bid amount, it will be transferred to seller\");\r\n        payable(_claimer).transfer(bidders[_claimer].bidamount);\r\n    }\r\n   \r\n    function sendWinningamountToSeller(address _claimer, address _creator, address _feeRecipient, uint256 _adminFeePercent, uint256 _royaltyFeePercent) public {\r\n        require((auctionStartTime + block.timestamp) >= auctionEndTime, \"Auction is still going on\");\r\n        if(AuctionOpen)\r\n         AuctionOpen = false;\r\n        require(_claimer == highestBidder, \"Only winner's bidamount will be transferred to seller\");\r\n        uint256 sellerFee = bidders[_claimer].bidamount;\r\n        uint256 adminFee = (sellerFee * _adminFeePercent) / 100;\r\n       uint256 creatorFee = 0;\r\n       if(seller != _creator)\r\n        {\r\n           creatorFee = (sellerFee * _royaltyFeePercent) / 100;\r\n           payable(_creator).transfer(creatorFee);\r\n       }\r\n        sellerFee -= adminFee + creatorFee;\r\n        payable(_feeRecipient).transfer(adminFee);\r\n        payable(seller).transfer(sellerFee);\r\n       \r\n    }\r\n    function isHighestBidder(address _bidholder) public view returns(bool ){\r\n       \r\n        if(_bidholder == highestBidder)\r\n         return true;\r\n        return false;\r\n    }\r\n   \r\n    function isAuctionTimeOver() public view returns(bool _stat){\r\n        if((auctionStartTime + block.timestamp) >= auctionEndTime)\r\n        return true;\r\n       \r\n    }\r\n    function setAuctionClose() public onlyOwner{\r\n        if(isAuctionTimeOver())\r\n            AuctionOpen = false;\r\n    }\r\n   \r\n\r\n}\r\n\r\ncontract CybornTrade is ReentrancyGuarded, Ownable\r\n{\r\n\r\n   ERC1155 private ARTXToken;\r\n   mapping(uint256 => bool) public tokenOnSale;\r\n   \r\n   struct TokenOnAuction{\r\n        uint256 start;\r\n        uint256 duration;\r\n        tokenAuction auctionContract;\r\n        bool auctionOpen;\r\n    }\r\n   \r\n     mapping (uint256 => TokenOnAuction) public auctionOf;\r\n\r\n   \r\n   constructor()\r\n   {\r\n       ARTXToken = ERC1155(0xc4F4ABAcd0bA1F2DDa1Fdc32291728A16037AF63);\r\n       \r\n   }\r\n   function enlistForSale(uint256 _id) public{\r\n       require(!tokenOnSale[_id],\"token is already on sale\");\r\n       require(!auctionOf[_id].auctionOpen, \"Token is on auction\");\r\n       // call approval to approve this contract to transfer token with token id from msg_sender account\r\n       require(ARTXToken.isApprovedForAll(msg.sender, address(this)),\"Give approval to this trade engine first\");\r\n        tokenOnSale[_id] = true;\r\n       \r\n       \r\n   }\r\n   function enlistForAuction(uint256 _id, uint256 _start, uint256 _duration) public returns(tokenAuction _contract){\r\n       require(!auctionOf[_id].auctionOpen, \"Auction is already listed\");\r\n       require(!tokenOnSale[_id],\"token is on sale\");\r\n       require(ARTXToken.isApprovedForAll(msg.sender, address(this)),\"Please approve our trade engine app to use your token\");\r\n       \r\n        tokenAuction auction = new tokenAuction(_id, _start, _duration, msg.sender);    \r\n        auctionOf[_id] = TokenOnAuction({\r\n                                        start: _start,\r\n                                        duration: _duration,\r\n                                        auctionContract: auction,\r\n                                        auctionOpen: true\r\n                                    });\r\n        return auction;                            \r\n       \r\n       \r\n   }\r\n   function isTokenOnAuction(uint256 _id) public view returns(bool _status)\r\n   {\r\n       \r\n       if(auctionOf[_id].auctionOpen)\r\n        return true;\r\n       return false;\r\n       \r\n   }\r\n   function isTokenOnSale(uint256 _id) public view returns(bool _status)\r\n   {\r\n       if(tokenOnSale[_id])\r\n        return true;\r\n       return false;  \r\n   }\r\n   function buyToken(uint256 _id, address _buyfrom, address _feeRecipient, address _creator, uint256 _adminFeePercent, uint256 _royaltyFeePercent, bytes calldata data) public payable nonReentrant{\r\n       require(ARTXToken.isApprovedForAll(_buyfrom, address(this)) && tokenOnSale[_id],\"The token is not on sale\");\r\n          //address buyer = msg.sender;\r\n          //address seller = _buyfrom;\r\n       //send received wei to seller\r\n       uint256 sellerFee = msg.value;\r\n       uint256 adminFee = (msg.value * _adminFeePercent) / 10000;\r\n       uint256 creatorFee = 0;\r\n       if(_buyfrom != _creator)\r\n        {\r\n           creatorFee = (msg.value * _royaltyFeePercent) / 10000;\r\n           payable(_creator).transfer(creatorFee);\r\n       }\r\n        sellerFee = sellerFee - (adminFee + creatorFee);\r\n        payable(_feeRecipient).transfer(adminFee);\r\n        payable(_buyfrom).transfer(sellerFee);\r\n        tokenOnSale[_id] = false;\r\n        //transfer token from seller to buyer\r\n        ARTXToken.safeTransferFrom(_buyfrom, msg.sender, _id, 1, data);\r\n   }\r\n   \r\n   function bidFor(uint256 _id, address _seller) external payable nonReentrant{\r\n       require(auctionOf[_id].auctionOpen, \"Token is not listed for auction\");\r\n        //check if this contract is apporovd to send tokens on behalf of seller\r\n        require(ARTXToken.isApprovedForAll(_seller, address(this)) && auctionOf[_id].auctionOpen,\"The token auction is either closed or not listed\");\r\n      //\r\n      tokenAuction auctionContract = tokenAuction(auctionOf[_id].auctionContract);\r\n       if(auctionContract.participateInAuction(msg.value,msg.sender))\r\n         payable(address(auctionContract)).transfer(msg.value);\r\n        else\r\n            auctionOf[_id].auctionOpen = false;\r\n         \r\n   }\r\n   \r\n   function claimBackBidAmountFor(uint256 _id) public{\r\n       require(!auctionOf[_id].auctionOpen, \"When auction is going your bidamount is locked\");\r\n       tokenAuction auctionContract = tokenAuction(auctionOf[_id].auctionContract);\r\n       if(auctionContract.isAuctionTimeOver())\r\n         auctionContract.setAuctionClose();\r\n       else    \r\n         revert();\r\n       auctionContract.claimBackLockedBidAmount(msg.sender);\r\n   \r\n   }\r\n   function settleWithAuctionWinner(uint256 _id,address _creator, address _feeRecipient, uint256 _adminFeePercent, uint256 _royaltyFeePercent) public\r\n   {\r\n       require(!auctionOf[_id].auctionOpen, \"When auction is going your bidamount is locked\");\r\n       tokenAuction auctionContract = tokenAuction(auctionOf[_id].auctionContract);\r\n       require(auctionContract.isHighestBidder(msg.sender), \"only winner can settle\");\r\n       if(auctionContract.isAuctionTimeOver())\r\n         auctionContract.setAuctionClose();\r\n       else    \r\n         revert();\r\n       auctionContract.sendWinningamountToSeller(msg.sender, _creator, _feeRecipient, _adminFeePercent, _royaltyFeePercent);      \r\n   }\r\n   \r\n   \r\n}", "ABI": "[]", "ContractName": "Address", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8ede37fd6e188e564493d7b0fb51362d51f8491a6bb4de335eaa72d6ad5fe773"}]}