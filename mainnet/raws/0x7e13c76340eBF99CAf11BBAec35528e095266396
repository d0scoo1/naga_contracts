{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * C U ON THE MOON\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IAntiSnipe {\r\n  function setTokenOwner(address owner, address pair) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool checked);\r\n}\r\n\r\ncontract Madpot is IERC20, Ownable {\r\n    using Address for address;\r\n    \r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    string constant _name = \"Jackpotty\";\r\n    string constant _symbol = \"Madpot\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 constant _decimalFactor = 10 ** _decimals;\r\n\r\n    uint256 constant _totalSupply = 1_000_000_000_000 * _decimalFactor;\r\n\r\n    //For ease to the end-user these checks do not adjust for burnt tokens and should be set accordingly.\r\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 500; //0.2%\r\n    uint256 public _maxWalletSize = (_totalSupply * 1) / 500; //0.2%\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => uint256) lastBuy;\r\n    mapping (address => uint256) lastSell;\r\n    mapping (address => uint256) lastSellAmount;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    uint256 public jackpotFee = 20; // kept for jackpot\r\n    uint256 public stakingFee = 20; \r\n    uint256 public liquidityFee = 20;\r\n    uint256 public marketingFee = 40;\r\n    uint256 public devFee = 20;\r\n    uint256 public totalFee = jackpotFee + marketingFee + devFee + liquidityFee + stakingFee;\r\n\r\n    uint256 sellBias = 0;\r\n\r\n    //Higher tax for a period of time from the first purchase on an address\r\n    uint256 sellPercent = 200;\r\n    uint256 sellPeriod = 48 hours;\r\n\r\n    uint256 antiDumpTax = 0;\r\n    uint256 antiDumpPeriod = 30 minutes;\r\n    uint256 antiDumpThreshold = 21;\r\n    bool antiDumpReserve0 = true;\r\n    uint256 feeDenominator = 1000;\r\n\r\n    struct userData {\r\n        uint256 totalWon;\r\n        uint256 lastWon;\r\n    }\r\n    \r\n    struct lottery {\r\n        uint48 transactionsSinceLastLottery;\r\n        uint48 transactionsPerLottery;\r\n        uint48 playerNewId;\r\n        uint16 maximumWinners;\r\n        uint56 price;\r\n        uint16 winPercentageThousandth;\r\n        uint8 w_rt;\r\n        bool enabled;\r\n        bool multibuy;\r\n        uint256 created;\r\n        uint128 maximumJackpot;\r\n        uint128 minTxAmount;\r\n        uint256[] playerIds;\r\n        mapping(uint256 => address) players;\r\n        mapping(address => uint256[]) tickets;\r\n        uint256[] winnerValues;\r\n        address[] winnerAddresses;\r\n        string name;\r\n    }\r\n    \r\n    mapping(address => userData) private userByAddress;\r\n    uint256 numLotteries;\r\n    mapping(uint256 => lottery) private lotteries;\r\n    mapping (address => bool) private _isExcludedFromLottery;\r\n    uint256 private activeLotteries = 0;\r\n    uint256 private _allWon;\r\n    uint256 private _txCounter = 0;\r\n\r\n    address public immutable stakingReceiver;\r\n    address payable public immutable marketingReceiver;\r\n    address payable public immutable devReceiver;\r\n\r\n    uint256 targetLiquidity = 40;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public immutable router;\r\n    \r\n    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    //address public routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    //address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    //address public routerAddress = 0xc0fFee0000C824D24E0F280f1e4D21152625742b;\r\n\r\n    mapping (address => bool) liquidityPools;\r\n    mapping (address => bool) liquidityProviders;\r\n\r\n    address public immutable pair;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedTime;\r\n \r\n    IAntiSnipe public antisnipe;\r\n    bool public protectionEnabled = true;\r\n    bool public protectionDisabled = false;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 400; //0.25%\r\n    uint256 public swapMinimum = _totalSupply / 10000; //0.01%\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor (address _newOwner, address _staking, address _marketing, address _dev) {\r\n        stakingReceiver = _staking;\r\n        marketingReceiver = payable(_marketing);\r\n        devReceiver = payable(_dev);\r\n\r\n        router = IDEXRouter(routerAddress);\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        liquidityPools[pair] = true;\r\n        _allowances[_newOwner][routerAddress] = type(uint256).max;\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n        \r\n        isFeeExempt[_newOwner] = true;\r\n        liquidityProviders[_newOwner] = true;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[_newOwner] = true;\r\n        isTxLimitExempt[routerAddress] = true;\r\n\r\n        _balances[_newOwner] = _totalSupply / 2;\r\n        _balances[DEAD] = _totalSupply / 2;\r\n        emit Transfer(address(0), _newOwner, _totalSupply / 2);\r\n        emit Transfer(address(0), DEAD, _totalSupply / 2);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        require(amount > 0, \"Zero amount transferred\");\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        checkTxLimit(sender, amount);\r\n        \r\n        if (!liquidityPools[recipient] && recipient != DEAD) {\r\n            if (!isTxLimitExempt[recipient]) checkWalletLimit(recipient, amount);\r\n        }\r\n\r\n        if(!launched()){ require(liquidityProviders[sender] || liquidityProviders[recipient], \"Contract not launched yet.\"); }\r\n        else if(liquidityPools[sender]) { require(activeLotteries > 0, \"No lotteries to buy.\"); }\r\n\r\n        _balances[sender] -= amount;\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) && shouldTakeFee(recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        \r\n        if(shouldSwapBack(recipient)){ if (amount > 0) swapBack(amount); }\r\n        \r\n        _balances[recipient] += amountReceived;\r\n            \r\n        if(launched() && protectionEnabled)\r\n            antisnipe.onPreTransferCheck(sender, recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n        uint256 walletLimit = _maxWalletSize;\r\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getTotalFee(bool selling, bool inHighPeriod) public view returns (uint256) {\r\n        if(launchedAt == block.number){ return feeDenominator - 1; }\r\n        if (selling) return inHighPeriod ? (totalFee * sellPercent) / 100 : totalFee + sellBias;\r\n        return inHighPeriod ? (totalFee * sellPercent) / 100 : totalFee - sellBias;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        bool highSellPeriod = !liquidityPools[sender] && lastBuy[sender] + sellPeriod > block.timestamp;\r\n        if(liquidityPools[recipient] && antiDumpTax > 0) {\r\n            (uint112 reserve0, uint112 reserve1,) = IDEXPair(pair).getReserves();\r\n            uint256 impactEstimate = amount * 1000 / ((antiDumpReserve0 ? reserve0 : reserve1) + amount);\r\n            \r\n            if (block.timestamp > lastSell[sender] + antiDumpPeriod) {\r\n                lastSellAmount[sender] = 0;\r\n            }\r\n            \r\n            lastSellAmount[sender] += impactEstimate;\r\n            \r\n            if (lastSellAmount[sender] >= antiDumpThreshold) {\r\n                feeAmount = ((amount * totalFee * antiDumpTax) / 100) / feeDenominator;\r\n            }\r\n        }\r\n\r\n        if (feeAmount == 0)\r\n            feeAmount = (amount * getTotalFee(liquidityPools[recipient], highSellPeriod)) / feeDenominator;\r\n        \r\n        if (liquidityPools[sender] && lastBuy[recipient] == 0)\r\n            lastBuy[recipient] = block.timestamp;\r\n        else if(!liquidityPools[sender])\r\n            lastSell[sender] = block.timestamp;\r\n\r\n        uint256 staking = 0;\r\n        if (stakingFee > 0) {\r\n            staking = feeAmount * stakingFee / totalFee;\r\n            feeAmount -= staking;\r\n            _balances[stakingReceiver] += feeAmount;\r\n            emit Transfer(sender, stakingReceiver, staking);\r\n        }\r\n        _balances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount - (feeAmount + staking);\r\n    }\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return !liquidityPools[msg.sender]\r\n        && !isFeeExempt[msg.sender]\r\n        && !inSwap\r\n        && swapEnabled\r\n        && liquidityPools[recipient]\r\n        && _balances[address(this)] >= swapMinimum &&\r\n        totalFee > 0;\r\n    }\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\r\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = ((amountToSwap * dynamicLiquidityFee) / (totalFee - stakingFee)) / 2;\r\n        amountToSwap -= amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        \r\n        //Guaranteed swap desired to prevent trade blockages\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        uint256 totalETHFee = totalFee - (stakingFee + dynamicLiquidityFee / 2);\r\n\r\n        uint256 amountLiquidity = (contractBalance * dynamicLiquidityFee) / totalETHFee / 2;\r\n        uint256 amountMarketing = (contractBalance * marketingFee) / totalETHFee;\r\n        uint256 amountDev = (contractBalance * devFee) / totalETHFee;\r\n\r\n        if(amountToLiquify > 0) {\r\n            //Guaranteed swap desired to prevent trade blockages, return values ignored\r\n            router.addLiquidityETH{value: amountLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountLiquidity, amountToLiquify);\r\n        }\r\n        \r\n        if (amountMarketing > 0)\r\n            transferToAddressETH(marketingReceiver, amountMarketing);\r\n            \r\n        if (amountDev > 0)\r\n            transferToAddressETH(devReceiver, amountDev);\r\n\r\n    }\r\n\r\n    function transferToAddressETH(address wallet, uint256 amount) internal {\r\n        (bool sent, ) = wallet.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send ETH\");\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(address(0)));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return (accuracy * balanceOf(pair)) / getCirculatingSupply();\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function getBuysUntilJackpot(uint64 lotto) external view  returns (uint256) {\r\n        return lotteries[lotto].transactionsPerLottery - lotteries[lotto].transactionsSinceLastLottery;\r\n    }\r\n    \r\n    function getTotalEntries(uint64 lotto) external view  returns (uint256) {\r\n        return lotteries[lotto].playerIds.length;\r\n    }\r\n    \r\n    function getWinningChance(address addr, uint64 lotto) external view returns(uint256 myLottery,uint256 poolSize) {\r\n        require(addr != address(0), \"Please enter valid address\");\r\n        return (lotteries[lotto].tickets[addr].length,lotteries[lotto].playerIds.length);\r\n     }\r\n    \r\n    function getTotalWon(address userAddress) external view returns(uint256 totalWon) {\r\n        return userByAddress[userAddress].totalWon;\r\n    }\r\n\r\n    function getLastWon(address userAddress) external view returns(uint256 lastWon) {\r\n        return userByAddress[userAddress].lastWon;\r\n    }\r\n\r\n    function getTotalWon() external view returns(uint256) {\r\n        return _allWon;\r\n    }\r\n    \r\n    function getPotBalance() external view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getLottoDetails(uint64 lotto) external view returns(string memory lottoName, uint256 transPerLotto, uint256 winPercent, uint256 maxETH, uint256 minTx, uint256 price, bool isEnabled) {\r\n        return (lotteries[lotto].name,\r\n        lotteries[lotto].transactionsPerLottery,\r\n        lotteries[lotto].winPercentageThousandth / 10,\r\n        lotteries[lotto].maximumJackpot,\r\n        lotteries[lotto].minTxAmount,\r\n        lotteries[lotto].price,\r\n        lotteries[lotto].enabled);\r\n    }\r\n    \r\n    function getLastWinner(uint64 lotto) external view returns (address, uint256) {\r\n        return (lotteries[lotto].winnerAddresses[lotteries[lotto].winnerAddresses.length-1], lotteries[lotto].winnerValues[lotteries[lotto].winnerValues.length-1]);\r\n    }\r\n    \r\n    function getWinnerCount(uint64 lotto) external view returns (uint256) {\r\n        return (lotteries[lotto].winnerAddresses.length);\r\n    }\r\n    \r\n    function getWinnerDetails(uint64 lotto, uint256 winner) external view returns (address, uint256) {\r\n        return (lotteries[lotto].winnerAddresses[winner], lotteries[lotto].winnerValues[winner]);\r\n    }\r\n\r\n    function getLotteryCount() external view returns (uint256) {\r\n        return numLotteries;\r\n    }\r\n\r\n    function createLotto(string memory lottoName, uint48 transPerLotto, uint16 winPercentThousandth, uint16 maxWin, uint128 maxEth, uint128 minTx, uint56 price, bool isEnabled, uint8 randomSelection, bool multiple) external onlyOwner() {\r\n        lottery storage l = lotteries[numLotteries++];\r\n        l.name = lottoName;\r\n        l.transactionsSinceLastLottery = 0;\r\n        l.transactionsPerLottery = transPerLotto;\r\n        l.winPercentageThousandth = winPercentThousandth;\r\n        l.maximumWinners = maxWin;\r\n        l.maximumJackpot = maxEth * 10**18;\r\n        l.minTxAmount = minTx;\r\n        l.price = price;\r\n        l.enabled = isEnabled;\r\n        l.w_rt = randomSelection;\r\n        l.multibuy = multiple;\r\n        \r\n        if (isEnabled) {\r\n            activeLotteries++;\r\n            l.created = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function excludeFromLottery(address account) external onlyOwner() {\r\n        _isExcludedFromLottery[account] = true;\r\n    }\r\n\r\n    function includeInLottery(address account) external onlyOwner() {\r\n        _isExcludedFromLottery[account] = false;\r\n    }\r\n    \r\n    function setMaximumWinners(uint16 max, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].maximumWinners = max;\r\n    }\r\n    \r\n    function setMaximumJackpot(uint128 max, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].maximumJackpot = max * 10**18;\r\n    }\r\n\r\n    function buyTickets(uint48 number, uint64 lotto) external payable {\r\n        require(!_isExcludedFromLottery[msg.sender], \"Not eligible for lottery\");\r\n        require(msg.value == number * lotteries[lotto].price, \"Not enough paid\");\r\n        require(lotteries[lotto].enabled, \"Lottery not enabled\");\r\n        require(lotteries[lotto].transactionsSinceLastLottery + number <= lotteries[lotto].transactionsPerLottery, \"Lottery full\");\r\n        require(_balances[msg.sender] >= lotteries[lotto].minTxAmount, \"Not enough tokens held\");\r\n        if (number > 1)\r\n            require(lotteries[lotto].multibuy, \"Only ticket purchase at a time allowed\");\r\n        \r\n        require(!msg.sender.isContract(), \"Humans only\");\r\n        for (uint256 i=0; i < number; i++) {\r\n            insertPlayer(msg.sender, lotto);\r\n            insertPlayer(address(0), lotto);\r\n        }\r\n        lotteries[lotto].transactionsSinceLastLottery += number;\r\n\r\n        transferToAddressETH(owner(), msg.value/10);\r\n    }\r\n\r\n    function shredTickets() external {\r\n        uint256 number = lotteries[numLotteries-1].tickets[msg.sender].length / 5;\r\n        require(number > 0, \"Not enough tickets in previous lottery\");\r\n        require(lotteries[numLotteries].created > 0, \"New lottery not ready yet\");\r\n\r\n        for (uint256 i=0; i < number; i++) {\r\n            insertPlayer(msg.sender, numLotteries);\r\n            insertPlayer(address(0), numLotteries);\r\n            for (uint256 popper=0; popper < 5; popper++)\r\n                lotteries[numLotteries-1].tickets[msg.sender].pop();\r\n        }\r\n    }\r\n\r\n    function setPrice(uint56 price, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].price = price;\r\n    }\r\n    \r\n    function setMinTxTokens(uint128 minTxTokens, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].minTxAmount = minTxTokens;\r\n    }\r\n    \r\n    function setTransactionsPerLottery(uint16 transactions, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].transactionsPerLottery = transactions;\r\n    }\r\n    \r\n    function setWinPercentThousandth(uint16 winPercentThousandth, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].winPercentageThousandth = winPercentThousandth;\r\n    }\r\n    \r\n    function setLottoEnabled(bool enabled, uint64 lotto) external onlyOwner() {\r\n        if (enabled && !lotteries[lotto].enabled){\r\n            activeLotteries++;\r\n            lotteries[lotto].created = block.timestamp;\r\n        } else if (!enabled && lotteries[lotto].enabled)\r\n            activeLotteries--;\r\n\r\n        lotteries[lotto].enabled = enabled;\r\n    }\r\n    \r\n    function setRandomSelection(uint8 randomSelection, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].w_rt = randomSelection;\r\n    }\r\n    \r\n    function setMultibuy(bool multiple, uint64 lotto) external onlyOwner() {\r\n        lotteries[lotto].multibuy = multiple;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        isFeeExempt[owner()] = false;\r\n        isTxLimitExempt[owner()] = false;\r\n        liquidityProviders[owner()] = false;\r\n        _allowances[owner()][routerAddress] = 0;\r\n        super.transferOwnership(newOwner);\r\n        isFeeExempt[newOwner] = true;\r\n        isTxLimitExempt[newOwner] = true;\r\n        liquidityProviders[newOwner] = true;\r\n        _allowances[newOwner][routerAddress] = type(uint256).max;\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        isFeeExempt[owner()] = false;\r\n        isTxLimitExempt[owner()] = false;\r\n        liquidityProviders[owner()] = false;\r\n        _allowances[owner()][routerAddress] = 0;\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    function setProtectionEnabled(bool _protect) external onlyOwner {\r\n        if (_protect)\r\n            require(!protectionDisabled, \"Protection disabled\");\r\n        protectionEnabled = _protect;\r\n        emit ProtectionToggle(_protect);\r\n    }\r\n    \r\n    function setProtection(address _protection, bool _call) external onlyOwner {\r\n        if (_protection != address(antisnipe)){\r\n            require(!protectionDisabled, \"Protection disabled\");\r\n            antisnipe = IAntiSnipe(_protection);\r\n        }\r\n        if (_call)\r\n            antisnipe.setTokenOwner(address(this), pair);\r\n        \r\n        emit ProtectionSet(_protection);\r\n    }\r\n    \r\n    function disableProtection() external onlyOwner {\r\n        protectionDisabled = true;\r\n        emit ProtectionDisabled();\r\n    }\r\n    \r\n    function setLiquidityProvider(address _provider) external onlyOwner {\r\n        require(_provider != pair && _provider != routerAddress, \"Can't alter trading contracts in this manner.\");\r\n        isFeeExempt[_provider] = true;\r\n        liquidityProviders[_provider] = true;\r\n        isTxLimitExempt[_provider] = true;\r\n        emit LiquidityProviderSet(_provider);\r\n    }\r\n\r\n    function setSellPeriod(uint256 _sellPercentIncrease, uint256 _period) external onlyOwner {\r\n        require((totalFee * _sellPercentIncrease) / 100 <= 400, \"Sell tax too high\");\r\n        require(_sellPercentIncrease >= 100, \"Can't make sells cheaper with this\");\r\n        require(antiDumpTax == 0 || _sellPercentIncrease <= antiDumpTax, \"High period tax clashes with anti-dump tax\");\r\n        require(_period <= 7 days, \"Sell period too long\");\r\n        sellPercent = _sellPercentIncrease;\r\n        sellPeriod = _period;\r\n        emit SellPeriodSet(_sellPercentIncrease, _period);\r\n    }\r\n\r\n    function setAntiDumpTax(uint256 _tax, uint256 _period, uint256 _threshold, bool _reserve0) external onlyOwner {\r\n        require(_threshold >= 10 && _tax <= 400 && (_tax == 0 || _tax >= sellPercent) && _period <= 1 hours, \"Parameters out of bounds\");\r\n        antiDumpTax = _tax;\r\n        antiDumpPeriod = _period;\r\n        antiDumpThreshold = _threshold;\r\n        antiDumpReserve0 = _reserve0;\r\n        emit AntiDumpTaxSet(_tax, _period, _threshold);\r\n    }\r\n\r\n    function launch() external onlyOwner {\r\n        require (launchedAt == 0);\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n        emit TradingLaunched();\r\n    }\r\n\r\n    function setTxLimit(uint256 numerator, uint256 divisor) external onlyOwner {\r\n        require(numerator > 0 && divisor > 0 && (numerator * 1000) / divisor >= 5, \"Transaction limits too low\");\r\n        _maxTxAmount = (_totalSupply * numerator) / divisor;\r\n        emit TransactionLimitSet(_maxTxAmount);\r\n    }\r\n    \r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(divisor > 0 && divisor <= 10000, \"Divisor must be greater than zero\");\r\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\r\n        emit MaxWalletSet(_maxWalletSize);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Invalid address\");\r\n        isFeeExempt[holder] = exempt;\r\n        emit FeeExemptSet(holder, exempt);\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(0), \"Invalid address\");\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit TrasactionLimitExemptSet(holder, exempt);\r\n    }\r\n\r\n    function setFees(uint256 _jackpotFee, uint256 _liquidityFee, uint256 _marketingFee, uint256 _devFee, uint256 _stakingFee, uint256 _sellBias, uint256 _feeDenominator) external onlyOwner {\r\n        require((_liquidityFee / 2) * 2 == _liquidityFee, \"Liquidity fee must be an even number due to rounding\");\r\n        jackpotFee = _jackpotFee;\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        devFee = _devFee;\r\n        stakingFee = _stakingFee;\r\n        sellBias = _sellBias;\r\n        totalFee = jackpotFee + marketingFee + devFee + liquidityFee + stakingFee;\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee <= feeDenominator / 3, \"Fees too high\");\r\n        require(sellBias <= totalFee, \"Incorrect sell bias\");\r\n        emit FeesSet(totalFee, feeDenominator, sellBias);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _denominator, uint256 _denominatorMin) external onlyOwner {\r\n        require(_denominator > 0 && _denominatorMin > 0, \"Denominators must be greater than 0\");\r\n        swapEnabled = _enabled;\r\n        swapMinimum = _totalSupply / _denominatorMin;\r\n        swapThreshold = _totalSupply / _denominator;\r\n        emit SwapSettingsSet(swapMinimum, swapThreshold, swapEnabled);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n        emit TargetLiquiditySet(_target * 100 / _denominator);\r\n    }\r\n\r\n    function addLiquidityPool(address _pool, bool _enabled) external onlyOwner {\r\n        require(_pool != address(0), \"Invalid address\");\r\n        liquidityPools[_pool] = _enabled;\r\n        emit LiquidityPoolSet(_pool, _enabled);\r\n    }\r\n\r\n    function random(uint256 _totalPlayers, uint8 _w_rt) internal view returns (uint256) {\r\n\r\n        uint256 w_rnd_c_1 = block.number+_txCounter+_totalPlayers;\r\n        uint256 w_rnd_c_2 = _totalSupply+_allWon;\r\n        uint256 _rnd = 0;\r\n        if (_w_rt == 0) {\r\n            _rnd = uint(keccak256(abi.encodePacked(blockhash(block.number-1), w_rnd_c_1, blockhash(block.number-2), w_rnd_c_2)));\r\n        } else if (_w_rt == 1) {\r\n            _rnd = uint(keccak256(abi.encodePacked(blockhash(block.number-1),blockhash(block.number-2), blockhash(block.number-3),w_rnd_c_1)));\r\n        } else if (_w_rt == 2) {\r\n            _rnd = uint(keccak256(abi.encodePacked(blockhash(block.number-1), blockhash(block.number-2), w_rnd_c_1, blockhash(block.number-3))));\r\n        } else if (_w_rt == 3) {\r\n            _rnd = uint(keccak256(abi.encodePacked(w_rnd_c_1, blockhash(block.number-1), blockhash(block.number-3), w_rnd_c_2)));\r\n        } else if (_w_rt == 4) {\r\n            _rnd = uint(keccak256(abi.encodePacked(w_rnd_c_1, blockhash(block.number-1), w_rnd_c_2, blockhash(block.number-2), blockhash(block.number-3))));\r\n        } else if (_w_rt == 5) {\r\n            _rnd = uint(keccak256(abi.encodePacked(blockhash(block.number-1), w_rnd_c_2, blockhash(block.number-3), w_rnd_c_1)));\r\n        } else {\r\n            _rnd = uint(keccak256(abi.encodePacked(blockhash(block.number-1), w_rnd_c_2, blockhash(block.number-2), w_rnd_c_1, blockhash(block.number-2))));\r\n        }\r\n        _rnd = _rnd % _totalPlayers;\r\n        return _rnd;\r\n    }\r\n\r\n    function _handleLottery(uint64 lotto) external onlyOwner returns (bool) {\r\n        require(lotteries[lotto].transactionsPerLottery - lotteries[lotto].transactionsSinceLastLottery == 0, \"Not enough tickets sold\");\r\n\r\n        uint256 _randomWinner = random(lotteries[lotto].playerIds.length, lotteries[lotto].w_rt);\r\n        address _winnerAddress = lotteries[lotto].players[lotteries[lotto].playerIds[_randomWinner]];\r\n        uint256 _pot = address(this).balance;\r\n        \r\n        if (lotteries[lotto].tickets[_winnerAddress].length > 0 && _balances[_winnerAddress] > 0 && lastSell[_winnerAddress] < lotteries[lotto].created && !_isExcludedFromLottery[_winnerAddress] && lotteries[lotto].winnerAddresses.length < lotteries[lotto].maximumWinners) {\r\n            \r\n            if (_pot > lotteries[lotto].maximumJackpot)\r\n                _pot = lotteries[lotto].maximumJackpot;\r\n                \r\n            uint256 _winnings = _pot*lotteries[lotto].winPercentageThousandth/1000;\r\n        \r\n            transferToAddressETH(payable(_winnerAddress), _winnings);\r\n            emit LotteryWon(_winnerAddress, _winnings);\r\n            \r\n            uint256 winnings = userByAddress[_winnerAddress].totalWon;\r\n\r\n            // Update user stats\r\n            userByAddress[_winnerAddress].lastWon = _winnings;\r\n            userByAddress[_winnerAddress].totalWon = winnings+_winnings;\r\n\r\n            // Update global stats\r\n            lotteries[lotto].winnerValues.push(_winnings);\r\n            lotteries[lotto].winnerAddresses.push(_winnerAddress);\r\n            _allWon += _winnings;\r\n\r\n        }\r\n        else {\r\n            // Player had no tickets/were excluded/had no tokens or pot size not at minimum capacity..\r\n            emit LotterySkipped(_winnerAddress, _pot);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //Jack-potty copy pasta\r\n    \r\n    function insertPlayer(address playerAddress, uint256 lotto) internal {\r\n        lotteries[lotto].players[lotteries[lotto].playerNewId] = playerAddress;\r\n        lotteries[lotto].tickets[playerAddress].push(lotteries[lotto].playerNewId);\r\n        lotteries[lotto].playerIds.push(lotteries[lotto].playerNewId);\r\n        lotteries[lotto].playerNewId += 1;\r\n    }\r\n    \r\n    function popPlayer(address playerAddress, uint256 ticketIndex, uint64 lotto) internal {\r\n        uint256 playerId = lotteries[lotto].tickets[playerAddress][ticketIndex];\r\n        lotteries[lotto].tickets[playerAddress][ticketIndex] = lotteries[lotto].tickets[playerAddress][lotteries[lotto].tickets[playerAddress].length - 1];\r\n        lotteries[lotto].tickets[playerAddress].pop();\r\n        delete lotteries[lotto].players[playerId];\r\n    }\r\n\r\n\tfunction airdrop(address[] calldata _addresses, uint256[] calldata _amount) external onlyOwner\r\n    {\r\n        require(_addresses.length == _amount.length, \"Array lengths don't match\");\r\n        bool previousSwap = swapEnabled;\r\n        swapEnabled = false;\r\n        //This function may run out of gas intentionally to prevent partial airdrops\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            require(!liquidityPools[_addresses[i]] && _addresses[i] != address(0), \"Can't airdrop the liquidity pool or address 0\");\r\n            _transferFrom(msg.sender, _addresses[i], _amount[i] * _decimalFactor);\r\n            lastBuy[_addresses[i]] = block.timestamp;\r\n        }\r\n        swapEnabled = previousSwap;\r\n        emit AirdropSent(msg.sender);\r\n    }\r\n\r\n    event AutoLiquify(uint256 amount, uint256 amountToken);\r\n    event ProtectionSet(address indexed protection);\r\n    event ProtectionDisabled();\r\n    event LiquidityProviderSet(address indexed provider);\r\n    event SellPeriodSet(uint256 percent, uint256 period);\r\n    event TradingLaunched();\r\n    event TransactionLimitSet(uint256 limit);\r\n    event MaxWalletSet(uint256 limit);\r\n    event FeeExemptSet(address indexed wallet, bool isExempt);\r\n    event TrasactionLimitExemptSet(address indexed wallet, bool isExempt);\r\n    event FeesSet(uint256 totalFees, uint256 denominator, uint256 sellBias);\r\n    event SwapSettingsSet(uint256 minimum, uint256 maximum, bool enabled);\r\n    event LiquidityPoolSet(address indexed pool, bool enabled);\r\n    event AirdropSent(address indexed from);\r\n    event AntiDumpTaxSet(uint256 rate, uint256 period, uint256 threshold);\r\n    event TargetLiquiditySet(uint256 percent);\r\n    event ProtectionToggle(bool isEnabled);\r\n    event LotteryWon(address winner, uint256 amount);\r\n    event LotterySkipped(address skippedAddress, uint256 pot);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AirdropSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"AntiDumpTaxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellBias\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LiquidityPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"LiquidityProviderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"skippedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"LotterySkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LotteryWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProtectionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protection\",\"type\":\"address\"}],\"name\":\"ProtectionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"ProtectionToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"SellPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"TargetLiquiditySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"TransactionLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"TrasactionLimitExemptSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"_handleLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"number\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"lottoName\",\"type\":\"string\"},{\"internalType\":\"uint48\",\"name\":\"transPerLotto\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"winPercentThousandth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWin\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"maxEth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minTx\",\"type\":\"uint128\"},{\"internalType\":\"uint56\",\"name\":\"price\",\"type\":\"uint56\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"randomSelection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"multiple\",\"type\":\"bool\"}],\"name\":\"createLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getBuysUntilJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getLastWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWon\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getLottoDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"lottoName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"transPerLotto\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getTotalEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inHighPeriod\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTotalWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWon\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getWinnerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"getWinnerDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"getWinningChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myLottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_reserve0\",\"type\":\"bool\"}],\"name\":\"setAntiDumpTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setLottoEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"max\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setMaximumJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setMaximumWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"minTxTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setMinTxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"multiple\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setMultibuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint56\",\"name\":\"price\",\"type\":\"uint56\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_call\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"}],\"name\":\"setProtectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"randomSelection\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setRandomSelection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellPercentIncrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setSellPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominatorMin\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"transactions\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setTransactionsPerLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"winPercentThousandth\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"lotto\",\"type\":\"uint64\"}],\"name\":\"setWinPercentThousandth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shredTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Madpot", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000048d86741245b28d09bedc9c02eb2065eeb7db663000000000000000000000000e7da913823557f4515f000a24763346936572c73000000000000000000000000e26ff65c074d3c76678e1509862a20ab9513184a000000000000000000000000a9b2dd06904252bb9fd5c05a744a5d03c9459bec", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0d6b89e66a7e1d5c63f0ab2d2478a48340faae26a8467b2f2c92fa151704ed4"}]}