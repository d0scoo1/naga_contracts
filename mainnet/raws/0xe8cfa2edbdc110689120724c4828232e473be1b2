{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/Lens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/compound/ICompound.sol\\\";\\nimport \\\"./interfaces/IMorpho.sol\\\";\\nimport \\\"./interfaces/ILens.sol\\\";\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./libraries/CompoundMath.sol\\\";\\n\\n/// @title Lens.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @notice User accessible getters.\\ncontract Lens is ILens {\\n    using CompoundMath for uint256;\\n\\n    /// STRUCTS ///\\n\\n    struct P2PIndexesParams {\\n        uint256 lastP2PSupplyIndex; // The last peer-to-peer supply index.\\n        uint256 lastP2PBorrowIndex; // The last peer-to-peer borrow index\\n        uint256 poolSupplyIndex; // The current pool supply index.\\n        uint256 poolBorrowIndex; // The current pool borrow index.\\n        uint256 lastPoolSupplyIndex; // The pool supply index at last update.\\n        uint256 lastPoolBorrowIndex; // The pool borrow index at last update.\\n        uint256 reserveFactor; // The reserve factor percentage (10 000 = 100%).\\n        uint256 p2pIndexCursor; // The peer-to-peer index cursor (10 000 = 100%).\\n        Types.Delta delta; // The deltas and peer-to-peer amounts.\\n    }\\n\\n    struct RateParams {\\n        uint256 p2pIndex; // The peer-to-peer index.\\n        uint256 poolIndex; // The pool index.\\n        uint256 lastPoolIndex; // The pool index at last update.\\n        uint256 reserveFactor; // The reserve factor percentage (10 000 = 100%).\\n        uint256 p2pAmount; // Sum of all stored peer-to-peer balance in supply or borrow (in peer-to-peer unit).\\n        uint256 p2pDelta; // Sum of all stored peer-to-peer in supply or borrow (in peer-to-peer unit).\\n    }\\n\\n    /// STORAGE ///\\n\\n    uint256 public constant MAX_BASIS_POINTS = 10_000; // 100% (in basis points).\\n    uint256 public constant WAD = 1e18;\\n    IMorpho public immutable morpho;\\n\\n    /// CONSTRUCTOR ///\\n\\n    constructor(address _morphoAddress) {\\n        morpho = IMorpho(_morphoAddress);\\n    }\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the Compound's oracle failed.\\n    error CompoundOracleFailed();\\n\\n    ///////////////////////////////////\\n    ///           GETTERS           ///\\n    ///////////////////////////////////\\n\\n    /// MARKET STATUSES ///\\n\\n    /// @notice Checks if a market is created.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created and not paused, otherwise false.\\n    function isMarketCreated(address _poolTokenAddress) external view returns (bool) {\\n        return morpho.marketStatus(_poolTokenAddress).isCreated;\\n    }\\n\\n    /// @notice Checks if a market is created and not paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created and not paused, otherwise false.\\n    function isMarketCreatedAndNotPaused(address _poolTokenAddress) external view returns (bool) {\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        return marketStatus.isCreated && !marketStatus.isPaused;\\n    }\\n\\n    /// @notice Checks if a market is created and not paused or partially paused.\\n    /// @param _poolTokenAddress The address of the market to check.\\n    /// @return true if the market is created, not paused and not partially paused, otherwise false.\\n    function isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolTokenAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        return marketStatus.isCreated && !marketStatus.isPaused && !marketStatus.isPartiallyPaused;\\n    }\\n\\n    /// MARKET INFO ///\\n\\n    /// @notice Returns all markets entered by a given user.\\n    /// @param _user The address of the user.\\n    /// @return enteredMarkets_ The list of markets entered by this user.\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets_)\\n    {\\n        return morpho.getEnteredMarkets(_user);\\n    }\\n\\n    /// @notice Returns all created markets.\\n    /// @return marketsCreated_ The list of market addresses.\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_) {\\n        return morpho.getAllMarkets();\\n    }\\n\\n    /// @notice Returns market's data.\\n    /// @return p2pSupplyIndex_ The peer-to-peer supply index of the market.\\n    /// @return p2pBorrowIndex_ The peer-to-peer borrow index of the market.\\n    /// @return lastUpdateBlockNumber_ The last block number when peer-to-peer indexes were updated.\\n    /// @return p2pSupplyDelta_ The peer-to-peer supply delta (in scaled balance).\\n    /// @return p2pBorrowDelta_ The peer-to-peer borrow delta (in cdUnit).\\n    /// @return p2pSupplyAmount_ The peer-to-peer supply amount (in peer-to-peer unit).\\n    /// @return p2pBorrowAmount_ The peer-to-peer borrow amount (in peer-to-peer unit).\\n    function getMarketData(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyIndex_,\\n            uint256 p2pBorrowIndex_,\\n            uint32 lastUpdateBlockNumber_,\\n            uint256 p2pSupplyDelta_,\\n            uint256 p2pBorrowDelta_,\\n            uint256 p2pSupplyAmount_,\\n            uint256 p2pBorrowAmount_\\n        )\\n    {\\n        {\\n            Types.Delta memory delta = morpho.deltas(_poolTokenAddress);\\n            p2pSupplyDelta_ = delta.p2pSupplyDelta;\\n            p2pBorrowDelta_ = delta.p2pBorrowDelta;\\n            p2pSupplyAmount_ = delta.p2pSupplyAmount;\\n            p2pBorrowAmount_ = delta.p2pBorrowAmount;\\n        }\\n        p2pSupplyIndex_ = morpho.p2pSupplyIndex(_poolTokenAddress);\\n        p2pBorrowIndex_ = morpho.p2pBorrowIndex(_poolTokenAddress);\\n        lastUpdateBlockNumber_ = morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber;\\n    }\\n\\n    /// @notice Returns market's configuration.\\n    /// @return underlying_ The underlying token address.\\n    /// @return isCreated_ Whether the market is created or not.\\n    /// @return p2pDisabled_ Whether user are put in peer-to-peer or not.\\n    /// @return isPaused_ Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n    /// @return isPartiallyPaused_ Whether the market is partially paused or not (only supply and borrow are frozen).\\n    /// @return reserveFactor_ The reserve actor applied to this market.\\n    /// @return collateralFactor_ The pool collateral factor also used by Morpho.\\n    function getMarketConfiguration(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            address underlying_,\\n            bool isCreated_,\\n            bool p2pDisabled_,\\n            bool isPaused_,\\n            bool isPartiallyPaused_,\\n            uint256 reserveFactor_,\\n            uint256 collateralFactor_\\n        )\\n    {\\n        underlying_ = ICToken(_poolTokenAddress).underlying();\\n        Types.MarketStatus memory marketStatus = morpho.marketStatus(_poolTokenAddress);\\n        isCreated_ = marketStatus.isCreated;\\n        p2pDisabled_ = morpho.p2pDisabled(_poolTokenAddress);\\n        isPaused_ = marketStatus.isPaused;\\n        isPartiallyPaused_ = marketStatus.isPartiallyPaused;\\n        reserveFactor_ = morpho.marketParameters(_poolTokenAddress).reserveFactor;\\n        (, collateralFactor_, ) = morpho.comptroller().markets(_poolTokenAddress);\\n    }\\n\\n    /// @notice Computes and returns peer-to-peer and pool rates for a specific market (without taking into account deltas!).\\n    /// @param _poolTokenAddress The market address.\\n    /// @return p2pSupplyRate_ The market's peer-to-peer supply rate per block (in wad).\\n    /// @return p2pBorrowRate_ The market's peer-to-peer borrow rate per block (in wad).\\n    /// @return poolSupplyRate_ The market's pool supply rate per block (in wad).\\n    /// @return poolBorrowRate_ The market's pool borrow rate per block (in wad).\\n    function getRates(address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 p2pSupplyRate_,\\n            uint256 p2pBorrowRate_,\\n            uint256 poolSupplyRate_,\\n            uint256 poolBorrowRate_\\n        )\\n    {\\n        ICToken cToken = ICToken(_poolTokenAddress);\\n\\n        poolSupplyRate_ = cToken.supplyRatePerBlock();\\n        poolBorrowRate_ = cToken.borrowRatePerBlock();\\n        Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n\\n        uint256 p2pRate = ((MAX_BASIS_POINTS - marketParams.p2pIndexCursor) *\\n            poolSupplyRate_ +\\n            marketParams.p2pIndexCursor *\\n            poolBorrowRate_) / MAX_BASIS_POINTS;\\n\\n        p2pSupplyRate_ =\\n            p2pRate -\\n            (marketParams.reserveFactor * (p2pRate - poolSupplyRate_)) /\\n            MAX_BASIS_POINTS;\\n        p2pBorrowRate_ =\\n            p2pRate +\\n            (marketParams.reserveFactor * (poolBorrowRate_ - p2pRate)) /\\n            MAX_BASIS_POINTS;\\n    }\\n\\n    /// BALANCES ///\\n\\n    /// @notice Returns the collateral value, debt value and max debt value of a given user.\\n    /// @param _user The user to determine liquidity for.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return collateralValue The collateral value of the user.\\n    /// @return debtValue The current debt value of the user.\\n    /// @return maxDebtValue The maximum possible debt value of the user.\\n    function getUserBalanceStates(address _user, address[] calldata _updatedMarkets)\\n        external\\n        view\\n        returns (\\n            uint256 collateralValue,\\n            uint256 debtValue,\\n            uint256 maxDebtValue\\n        )\\n    {\\n        ICompoundOracle oracle = ICompoundOracle(morpho.comptroller().oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            bool shouldUpdateIndexes;\\n            for (uint256 j; j < nbUpdatedMarkets; ) {\\n                if (_updatedMarkets[j] == poolTokenEntered) {\\n                    shouldUpdateIndexes = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                shouldUpdateIndexes,\\n                oracle\\n            );\\n\\n            collateralValue += assetData.collateralValue;\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the balance in underlying of a given user in a given market.\\n    /// @param _user The user to determine balances of.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return balanceOnPool The balance on pool of the user (in underlying).\\n    /// @return balanceInP2P The balance in peer-to-peer of the user (in underlying).\\n    /// @return totalBalance The total balance of the user (in underlying).\\n    function getUpdatedUserSupplyBalance(address _user, address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        (uint256 poolSupplyIndex, ) = _computePoolIndexes(_poolTokenAddress);\\n\\n        balanceOnPool = morpho.supplyBalanceInOf(_poolTokenAddress, _user).onPool.mul(\\n            poolSupplyIndex\\n        );\\n        balanceInP2P = morpho.supplyBalanceInOf(_poolTokenAddress, _user).inP2P.mul(\\n            getUpdatedP2PSupplyIndex(_poolTokenAddress)\\n        );\\n\\n        totalBalance = balanceOnPool + balanceInP2P;\\n    }\\n\\n    /// @notice Returns the borrow balance in underlying of a given user in a given market.\\n    /// @param _user The user to determine balances of.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return balanceOnPool The balance on pool of the user (in underlying).\\n    /// @return balanceInP2P The balance in peer-to-peer of the user (in underlying).\\n    /// @return totalBalance The total balance of the user (in underlying).\\n    function getUpdatedUserBorrowBalance(address _user, address _poolTokenAddress)\\n        public\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        )\\n    {\\n        (, uint256 newBorrowIndex) = _computePoolIndexes(_poolTokenAddress);\\n\\n        balanceOnPool = morpho.borrowBalanceInOf(_poolTokenAddress, _user).onPool.mul(\\n            newBorrowIndex\\n        );\\n        balanceInP2P = morpho.borrowBalanceInOf(_poolTokenAddress, _user).inP2P.mul(\\n            getUpdatedP2PBorrowIndex(_poolTokenAddress)\\n        );\\n\\n        totalBalance = balanceOnPool + balanceInP2P;\\n    }\\n\\n    /// @notice Returns the maximum amount available to withdraw and borrow for `_user` related to `_poolTokenAddress` (in underlyings).\\n    /// @dev Note: must be called after calling `accrueInterest()` on the cToken to have the most up to date values.\\n    /// @param _user The user to determine the capacities for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return withdrawable The maximum withdrawable amount of underlying token allowed (in underlying).\\n    /// @return borrowable The maximum borrowable amount of underlying token allowed (in underlying).\\n    function getUserMaxCapacitiesForAsset(address _user, address _poolTokenAddress)\\n        external\\n        view\\n        returns (uint256 withdrawable, uint256 borrowable)\\n    {\\n        Types.LiquidityData memory data;\\n        Types.AssetLiquidityData memory assetData;\\n        ICompoundOracle oracle = ICompoundOracle(morpho.comptroller().oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            if (_poolTokenAddress != poolTokenEntered) {\\n                assetData = getUserLiquidityDataForAsset(_user, poolTokenEntered, true, oracle);\\n\\n                data.maxDebtValue += assetData.maxDebtValue;\\n                data.debtValue += assetData.debtValue;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        assetData = getUserLiquidityDataForAsset(_user, _poolTokenAddress, true, oracle);\\n\\n        data.maxDebtValue += assetData.maxDebtValue;\\n        data.debtValue += assetData.debtValue;\\n\\n        // Not possible to withdraw nor borrow.\\n        if (data.maxDebtValue < data.debtValue) return (0, 0);\\n\\n        uint256 differenceInUnderlying = (data.maxDebtValue - data.debtValue).div(\\n            assetData.underlyingPrice\\n        );\\n\\n        withdrawable = assetData.collateralValue.div(assetData.underlyingPrice);\\n        if (assetData.collateralFactor != 0) {\\n            withdrawable = Math.min(\\n                withdrawable,\\n                differenceInUnderlying.div(assetData.collateralFactor)\\n            );\\n        }\\n\\n        borrowable = differenceInUnderlying;\\n    }\\n\\n    /// @dev Returns the debt value, max debt value of a given user.\\n    /// @param _user The user to determine liquidity for.\\n    /// @param _poolTokenAddress The market to hypothetically withdraw/borrow in.\\n    /// @param _withdrawnAmount The number of tokens to hypothetically withdraw (in underlying).\\n    /// @param _borrowedAmount The amount of tokens to hypothetically borrow (in underlying).\\n    /// @return debtValue The current debt value of the user.\\n    /// @return maxDebtValue The maximum debt value possible of the user.\\n    function getUserHypotheticalBalanceStates(\\n        address _user,\\n        address _poolTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) public view returns (uint256 debtValue, uint256 maxDebtValue) {\\n        ICompoundOracle oracle = ICompoundOracle(morpho.comptroller().oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                true,\\n                oracle\\n            );\\n\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n            unchecked {\\n                ++i;\\n            }\\n\\n            if (_poolTokenAddress == poolTokenEntered) {\\n                if (_borrowedAmount > 0)\\n                    debtValue += _borrowedAmount.mul(assetData.underlyingPrice);\\n\\n                if (_withdrawnAmount > 0)\\n                    maxDebtValue -= _withdrawnAmount.mul(assetData.underlyingPrice).mul(\\n                        assetData.collateralFactor\\n                    );\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns the data related to `_poolTokenAddress` for the `_user`, by optionally computing virtually updated pool and peer-to-peer indexes.\\n    /// @param _user The user to determine data for.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _computeUpdatedIndexes Whether to compute virtually updated pool and peer-to-peer indexes.\\n    /// @param _oracle The oracle used.\\n    /// @return assetData The data related to this asset.\\n    function getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolTokenAddress,\\n        bool _computeUpdatedIndexes,\\n        ICompoundOracle _oracle\\n    ) public view returns (Types.AssetLiquidityData memory assetData) {\\n        assetData.underlyingPrice = _oracle.getUnderlyingPrice(_poolTokenAddress);\\n        if (assetData.underlyingPrice == 0) revert CompoundOracleFailed();\\n\\n        (, assetData.collateralFactor, ) = morpho.comptroller().markets(_poolTokenAddress);\\n\\n        (\\n            uint256 p2pSupplyIndex,\\n            uint256 p2pBorrowIndex,\\n            uint256 poolSupplyIndex,\\n            uint256 poolBorrowIndex\\n        ) = getIndexes(_poolTokenAddress, _computeUpdatedIndexes);\\n\\n        assetData.collateralValue = _computeUserSupplyBalanceInOf(\\n            _poolTokenAddress,\\n            _user,\\n            p2pSupplyIndex,\\n            poolSupplyIndex\\n        ).mul(assetData.underlyingPrice);\\n\\n        assetData.debtValue = _computeUserBorrowBalanceInOf(\\n            _poolTokenAddress,\\n            _user,\\n            p2pBorrowIndex,\\n            poolBorrowIndex\\n        ).mul(assetData.underlyingPrice);\\n\\n        assetData.maxDebtValue = assetData.collateralValue.mul(assetData.collateralFactor);\\n    }\\n\\n    /// INDEXES ///\\n\\n    /// @notice Returns the updated peer-to-peer supply index.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newP2PSupplyIndex The updated peer-to-peer supply index.\\n    function getUpdatedP2PSupplyIndex(address _poolTokenAddress) public view returns (uint256) {\\n        if (block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber)\\n            return morpho.p2pSupplyIndex(_poolTokenAddress);\\n        else {\\n            Types.LastPoolIndexes memory poolIndexes = morpho.lastPoolIndexes(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n\\n            (uint256 poolSupplyIndex, uint256 poolBorrowIndex) = _computePoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            P2PIndexesParams memory params = P2PIndexesParams(\\n                morpho.p2pSupplyIndex(_poolTokenAddress),\\n                morpho.p2pBorrowIndex(_poolTokenAddress),\\n                poolSupplyIndex,\\n                poolBorrowIndex,\\n                poolIndexes.lastSupplyPoolIndex,\\n                poolIndexes.lastBorrowPoolIndex,\\n                marketParams.reserveFactor,\\n                marketParams.p2pIndexCursor,\\n                morpho.deltas(_poolTokenAddress)\\n            );\\n\\n            return _computeP2PSupplyIndex(params);\\n        }\\n    }\\n\\n    /// @notice Returns the updated peer-to-peer borrow index.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newP2PBorrowIndex The updated peer-to-peer borrow index.\\n    function getUpdatedP2PBorrowIndex(address _poolTokenAddress) public view returns (uint256) {\\n        if (block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber)\\n            return morpho.p2pBorrowIndex(_poolTokenAddress);\\n        else {\\n            Types.LastPoolIndexes memory poolIndexes = morpho.lastPoolIndexes(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n\\n            (uint256 poolSupplyIndex, uint256 poolBorrowIndex) = _computePoolIndexes(\\n                _poolTokenAddress\\n            );\\n\\n            P2PIndexesParams memory params = P2PIndexesParams(\\n                morpho.p2pSupplyIndex(_poolTokenAddress),\\n                morpho.p2pBorrowIndex(_poolTokenAddress),\\n                poolSupplyIndex,\\n                poolBorrowIndex,\\n                poolIndexes.lastSupplyPoolIndex,\\n                poolIndexes.lastBorrowPoolIndex,\\n                marketParams.reserveFactor,\\n                marketParams.p2pIndexCursor,\\n                morpho.deltas(_poolTokenAddress)\\n            );\\n\\n            return _computeP2PBorrowIndex(params);\\n        }\\n    }\\n\\n    /// @notice Returns the updated peer-to-peer and pool indexes.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @param _computeUpdatedIndexes Whether to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return newP2PSupplyIndex The updated peer-to-peer supply index.\\n    /// @return newP2PBorrowIndex The updated peer-to-peer borrow index.\\n    /// @return newPoolSupplyIndex The updated pool supply index.\\n    /// @return newPoolBorrowIndex The updated pool borrow index.\\n    function getIndexes(address _poolTokenAddress, bool _computeUpdatedIndexes)\\n        public\\n        view\\n        returns (\\n            uint256 newP2PSupplyIndex,\\n            uint256 newP2PBorrowIndex,\\n            uint256 newPoolSupplyIndex,\\n            uint256 newPoolBorrowIndex\\n        )\\n    {\\n        if (!_computeUpdatedIndexes) {\\n            ICToken cToken = ICToken(_poolTokenAddress);\\n\\n            newPoolSupplyIndex = cToken.exchangeRateStored();\\n            newPoolBorrowIndex = cToken.borrowIndex();\\n        } else {\\n            (newPoolSupplyIndex, newPoolBorrowIndex) = _computePoolIndexes(_poolTokenAddress);\\n        }\\n\\n        if (\\n            !_computeUpdatedIndexes ||\\n            block.number == morpho.lastPoolIndexes(_poolTokenAddress).lastUpdateBlockNumber\\n        ) {\\n            newP2PSupplyIndex = morpho.p2pSupplyIndex(_poolTokenAddress);\\n            newP2PBorrowIndex = morpho.p2pBorrowIndex(_poolTokenAddress);\\n        } else {\\n            Types.LastPoolIndexes memory poolIndexes = morpho.lastPoolIndexes(_poolTokenAddress);\\n            Types.MarketParameters memory marketParams = morpho.marketParameters(_poolTokenAddress);\\n\\n            P2PIndexesParams memory params = P2PIndexesParams(\\n                morpho.p2pSupplyIndex(_poolTokenAddress),\\n                morpho.p2pBorrowIndex(_poolTokenAddress),\\n                newPoolSupplyIndex,\\n                newPoolBorrowIndex,\\n                poolIndexes.lastSupplyPoolIndex,\\n                poolIndexes.lastBorrowPoolIndex,\\n                marketParams.reserveFactor,\\n                marketParams.p2pIndexCursor,\\n                morpho.deltas(_poolTokenAddress)\\n            );\\n\\n            (newP2PSupplyIndex, newP2PBorrowIndex) = _computeP2PIndexes(params);\\n        }\\n    }\\n\\n    /// LIQUIDATION ///\\n\\n    /// @dev Checks whether the user has enough collateral to maintain such a borrow position.\\n    /// @param _user The user to check.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    /// @return isLiquidatable_ whether or not the user is liquidatable.\\n    function isLiquidatable(address _user, address[] memory _updatedMarkets)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ICompoundOracle oracle = ICompoundOracle(morpho.comptroller().oracle());\\n        address[] memory enteredMarkets = morpho.getEnteredMarkets(_user);\\n\\n        uint256 maxDebtValue;\\n        uint256 debtValue;\\n\\n        uint256 nbEnteredMarkets = enteredMarkets.length;\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbEnteredMarkets; ) {\\n            address poolTokenEntered = enteredMarkets[i];\\n\\n            bool shouldUpdateIndexes;\\n            for (uint256 j; j < nbUpdatedMarkets; ) {\\n                if (_updatedMarkets[j] == poolTokenEntered) {\\n                    shouldUpdateIndexes = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            Types.AssetLiquidityData memory assetData = getUserLiquidityDataForAsset(\\n                _user,\\n                poolTokenEntered,\\n                shouldUpdateIndexes,\\n                oracle\\n            );\\n\\n            maxDebtValue += assetData.maxDebtValue;\\n            debtValue += assetData.debtValue;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return debtValue > maxDebtValue;\\n    }\\n\\n    /// @dev Computes the maximum repayable amount for a potential liquidation.\\n    /// @param _user The potential liquidatee.\\n    /// @param _poolTokenBorrowedAddress The address of the market to repay.\\n    /// @param _poolTokenCollateralAddress The address of the market to seize.\\n    /// @param _updatedMarkets The list of markets of which to compute virtually updated pool and peer-to-peer indexes.\\n    function computeLiquidationRepayAmount(\\n        address _user,\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address[] calldata _updatedMarkets\\n    ) external view returns (uint256 toRepay) {\\n        address[] memory updatedMarkets = new address[](_updatedMarkets.length + 2);\\n\\n        uint256 nbUpdatedMarkets = _updatedMarkets.length;\\n        for (uint256 i; i < nbUpdatedMarkets; ) {\\n            updatedMarkets[i] = _updatedMarkets[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        updatedMarkets[updatedMarkets.length - 2] = _poolTokenBorrowedAddress;\\n        updatedMarkets[updatedMarkets.length - 1] = _poolTokenCollateralAddress;\\n        if (!isLiquidatable(_user, updatedMarkets)) return 0;\\n\\n        IComptroller comptroller = morpho.comptroller();\\n        ICompoundOracle compoundOracle = ICompoundOracle(comptroller.oracle());\\n\\n        (, , uint256 totalCollateralBalance) = getUpdatedUserSupplyBalance(\\n            _user,\\n            _poolTokenCollateralAddress\\n        );\\n        (, , uint256 totalBorrowBalance) = getUpdatedUserBorrowBalance(\\n            _user,\\n            _poolTokenBorrowedAddress\\n        );\\n\\n        uint256 borrowedPrice = compoundOracle.getUnderlyingPrice(_poolTokenBorrowedAddress);\\n        uint256 collateralPrice = compoundOracle.getUnderlyingPrice(_poolTokenCollateralAddress);\\n        if (borrowedPrice == 0 || collateralPrice == 0) revert CompoundOracleFailed();\\n\\n        uint256 maxROIRepay = totalCollateralBalance.mul(collateralPrice).div(borrowedPrice).div(\\n            comptroller.liquidationIncentiveMantissa()\\n        );\\n\\n        uint256 maxRepayable = totalBorrowBalance.mul(comptroller.closeFactorMantissa());\\n\\n        toRepay = maxROIRepay > maxRepayable ? maxRepayable : maxROIRepay;\\n    }\\n\\n    ////////////////////////////////////\\n    ///           INTERNAL           ///\\n    ////////////////////////////////////\\n\\n    /// @dev Returns the supply balance of `_user` in the `_poolTokenAddress` market.\\n    /// @dev Note: Compute the result with the index stored and not the most up to date one.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the supply amount.\\n    /// @return The supply balance of the user (in underlying).\\n    function _computeUserSupplyBalanceInOf(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _p2pSupplyIndex,\\n        uint256 _poolSupplyIndex\\n    ) internal view returns (uint256) {\\n        return\\n            morpho.supplyBalanceInOf(_poolTokenAddress, _user).inP2P.mul(_p2pSupplyIndex) +\\n            morpho.supplyBalanceInOf(_poolTokenAddress, _user).onPool.mul(_poolSupplyIndex);\\n    }\\n\\n    /// @dev Returns the borrow balance of `_user` in the `_poolTokenAddress` market.\\n    /// @param _user The address of the user.\\n    /// @param _poolTokenAddress The market where to get the borrow amount.\\n    /// @return The borrow balance of the user (in underlying).\\n    function _computeUserBorrowBalanceInOf(\\n        address _poolTokenAddress,\\n        address _user,\\n        uint256 _p2pBorrowIndex,\\n        uint256 _poolBorrowIndex\\n    ) internal view returns (uint256) {\\n        return\\n            morpho.borrowBalanceInOf(_poolTokenAddress, _user).inP2P.mul(_p2pBorrowIndex) +\\n            morpho.borrowBalanceInOf(_poolTokenAddress, _user).onPool.mul(_poolBorrowIndex);\\n    }\\n\\n    /// INDEXES ///\\n\\n    /// @dev Returns Compound's indexes, optionally computing their virtually updated values.\\n    /// @param _poolTokenAddress The address of the market.\\n    /// @return newSupplyIndex The supply index.\\n    /// @return newBorrowIndex The borrow index.\\n    function _computePoolIndexes(address _poolTokenAddress)\\n        internal\\n        view\\n        returns (uint256 newSupplyIndex, uint256 newBorrowIndex)\\n    {\\n        ICToken cToken = ICToken(_poolTokenAddress);\\n\\n        uint256 accrualBlockNumberPrior = cToken.accrualBlockNumber();\\n        if (block.number == accrualBlockNumberPrior)\\n            return (cToken.exchangeRateStored(), cToken.borrowIndex());\\n\\n        // Read the previous values out of storage\\n        uint256 cashPrior = cToken.getCash();\\n        uint256 totalSupply = cToken.totalSupply();\\n        uint256 borrowsPrior = cToken.totalBorrows();\\n        uint256 reservesPrior = cToken.totalReserves();\\n        uint256 borrowIndexPrior = cToken.borrowIndex();\\n\\n        // Calculate the current borrow interest rate\\n        uint256 borrowRateMantissa = cToken.borrowRatePerBlock();\\n        require(borrowRateMantissa <= 0.0005e16, \\\"borrow rate is absurdly high\\\");\\n\\n        uint256 blockDelta = block.number - accrualBlockNumberPrior;\\n\\n        // Calculate the interest accumulated into borrows and reserves and the new index.\\n        uint256 simpleInterestFactor = borrowRateMantissa * blockDelta;\\n        uint256 interestAccumulated = simpleInterestFactor.mul(borrowsPrior);\\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n        uint256 totalReservesNew = cToken.reserveFactorMantissa().mul(interestAccumulated) +\\n            reservesPrior;\\n\\n        newSupplyIndex = totalSupply > 0\\n            ? (cashPrior + totalBorrowsNew - totalReservesNew).div(totalSupply)\\n            : cToken.initialExchangeRateMantissa();\\n        newBorrowIndex = simpleInterestFactor.mul(borrowIndexPrior) + borrowIndexPrior;\\n    }\\n\\n    /// @notice Computes and returns virtually updated peer-to-peer indexes.\\n    /// @param _params Computation parameters.\\n    /// @return newP2PSupplyIndex The updated peer-to-peer supply index.\\n    /// @return newP2PBorrowIndex The updated peer-to-peer borrow index.\\n    function _computeP2PIndexes(P2PIndexesParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PSupplyIndex, uint256 newP2PBorrowIndex)\\n    {\\n        // Compute pool growth factors\\n\\n        uint256 poolSupplyGrowthFactor = _params.poolSupplyIndex.div(_params.lastPoolSupplyIndex);\\n        uint256 poolBorrowGrowthFactor = _params.poolBorrowIndex.div(_params.lastPoolBorrowIndex);\\n\\n        // Compute peer-to-peer growth factors\\n\\n        uint256 p2pGrowthFactor = ((MAX_BASIS_POINTS - _params.p2pIndexCursor) *\\n            poolSupplyGrowthFactor +\\n            _params.p2pIndexCursor *\\n            poolBorrowGrowthFactor) / MAX_BASIS_POINTS;\\n        uint256 p2pSupplyGrowthFactor = p2pGrowthFactor -\\n            (_params.reserveFactor * (p2pGrowthFactor - poolSupplyGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n        uint256 p2pBorrowGrowthFactor = p2pGrowthFactor +\\n            (_params.reserveFactor * (poolBorrowGrowthFactor - p2pGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        // Compute new peer-to-peer supply index\\n\\n        if (_params.delta.p2pSupplyAmount == 0 || _params.delta.p2pSupplyDelta == 0) {\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(p2pSupplyGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pSupplyDelta.mul(_params.lastPoolSupplyIndex)).div(\\n                    (_params.delta.p2pSupplyAmount).mul(_params.lastP2PSupplyIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pSupplyGrowthFactor) +\\n                    shareOfTheDelta.mul(poolSupplyGrowthFactor)\\n            );\\n        }\\n\\n        // Compute new peer-to-peer borrow index\\n\\n        if (_params.delta.p2pBorrowAmount == 0 || _params.delta.p2pBorrowDelta == 0) {\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(p2pBorrowGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pBorrowDelta.mul(_params.poolBorrowIndex)).div(\\n                    (_params.delta.p2pBorrowAmount).mul(_params.lastP2PBorrowIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pBorrowGrowthFactor) +\\n                    shareOfTheDelta.mul(poolBorrowGrowthFactor)\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes and returns the new peer-to-peer supply index.\\n    /// @param _params Computation parameters.\\n    /// @return newP2PSupplyIndex The updated p2pSupplyIndex.\\n    function _computeP2PSupplyIndex(P2PIndexesParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PSupplyIndex)\\n    {\\n        // Compute pool growth factors\\n\\n        uint256 poolSupplyGrowthFactor = _params.poolSupplyIndex.div(_params.lastPoolSupplyIndex);\\n        uint256 poolBorrowGrowthFactor = _params.poolBorrowIndex.div(_params.lastPoolBorrowIndex);\\n\\n        // Compute peer-to-peer growth factors\\n\\n        uint256 p2pGrowthFactor = ((MAX_BASIS_POINTS - _params.p2pIndexCursor) *\\n            poolSupplyGrowthFactor +\\n            _params.p2pIndexCursor *\\n            poolBorrowGrowthFactor) / MAX_BASIS_POINTS;\\n        uint256 p2pSupplyGrowthFactor = p2pGrowthFactor -\\n            (_params.reserveFactor * (p2pGrowthFactor - poolSupplyGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        // Compute new peer-to-peer supply index\\n\\n        if (_params.delta.p2pSupplyAmount == 0 || _params.delta.p2pSupplyDelta == 0) {\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(p2pSupplyGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pSupplyDelta.mul(_params.lastPoolSupplyIndex)).div(\\n                    (_params.delta.p2pSupplyAmount).mul(_params.lastP2PSupplyIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PSupplyIndex = _params.lastP2PSupplyIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pSupplyGrowthFactor) +\\n                    shareOfTheDelta.mul(poolSupplyGrowthFactor)\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes and return the new peer-to-peer borrow index.\\n    /// @param _params Computation parameters.\\n    /// @return newP2PBorrowIndex The updated p2pBorrowIndex.\\n    function _computeP2PBorrowIndex(P2PIndexesParams memory _params)\\n        internal\\n        pure\\n        returns (uint256 newP2PBorrowIndex)\\n    {\\n        // Compute pool growth factors\\n\\n        uint256 poolSupplyGrowthFactor = _params.poolSupplyIndex.div(_params.lastPoolSupplyIndex);\\n        uint256 poolBorrowGrowthFactor = _params.poolBorrowIndex.div(_params.lastPoolBorrowIndex);\\n\\n        // Compute peer-to-peer growth factors\\n\\n        uint256 p2pGrowthFactor = ((MAX_BASIS_POINTS - _params.p2pIndexCursor) *\\n            poolSupplyGrowthFactor +\\n            _params.p2pIndexCursor *\\n            poolBorrowGrowthFactor) / MAX_BASIS_POINTS;\\n        uint256 p2pBorrowGrowthFactor = p2pGrowthFactor +\\n            (_params.reserveFactor * (poolBorrowGrowthFactor - p2pGrowthFactor)) /\\n            MAX_BASIS_POINTS;\\n\\n        // Compute new peer-to-peer borrow index\\n\\n        if (_params.delta.p2pBorrowAmount == 0 || _params.delta.p2pBorrowDelta == 0) {\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(p2pBorrowGrowthFactor);\\n        } else {\\n            uint256 shareOfTheDelta = CompoundMath.min(\\n                (_params.delta.p2pBorrowDelta.mul(_params.poolBorrowIndex)).div(\\n                    (_params.delta.p2pBorrowAmount).mul(_params.lastP2PBorrowIndex)\\n                ),\\n                WAD // To avoid shareOfTheDelta > 1 with rounding errors.\\n            );\\n\\n            newP2PBorrowIndex = _params.lastP2PBorrowIndex.mul(\\n                (WAD - shareOfTheDelta).mul(p2pBorrowGrowthFactor) +\\n                    shareOfTheDelta.mul(poolBorrowGrowthFactor)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/compound/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface ICEth {\\n    function accrueInterest() external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function borrowBalanceStored(address) external returns (uint256);\\n\\n    function mint() external payable;\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function borrowBalanceCurrent(address) external returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n}\\n\\ninterface IComptroller {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getAccountLiquidity(address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getHypotheticalAccountLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMembership(address, address) external view returns (bool);\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (CompMarketState memory);\\n\\n    function compBorrowState(address) external view returns (CompMarketState memory);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n}\\n\\ninterface IInterestRateModel {\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\\ninterface ICToken {\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function borrowRate() external returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function borrow(uint256) external returns (uint256);\\n\\n    function repayBorrow(uint256) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        address cTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function mint(uint256) external returns (uint256);\\n\\n    function redeemUnderlying(uint256) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function accrualBlockNumber() external view returns (uint256);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function interestRateModel() external view returns (IInterestRateModel);\\n\\n    function reserveFactorMantissa() external view returns (uint256);\\n\\n    function initialExchangeRateMantissa() external view returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n    function _acceptAdmin() external returns (uint256);\\n\\n    function _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n    function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n    function _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n    function _setInterestRateModel(IInterestRateModel newInterestRateModel)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface ICEther is ICToken {\\n    function mint() external payable;\\n\\n    function repayBorrow() external payable;\\n}\\n\\ninterface ICompoundOracle {\\n    function getUnderlyingPrice(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IInterestRatesManager.sol\\\";\\nimport \\\"./IRewardsManager.sol\\\";\\nimport \\\"./IPositionsManager.sol\\\";\\nimport \\\"./IIncentivesVault.sol\\\";\\n\\nimport \\\"../libraries/Types.sol\\\";\\n\\n// prettier-ignore\\ninterface IMorpho {\\n\\n    /// STORAGE ///\\n\\n    function defaultMaxGasForMatching() external view returns (Types.MaxGasForMatching memory);\\n    function maxSortedUsers() external view returns (uint256);\\n    function dustThreshold() external view returns (uint256);\\n    function supplyBalanceInOf(address, address) external view returns (Types.SupplyBalance memory);\\n    function borrowBalanceInOf(address, address) external view returns (Types.BorrowBalance memory);\\n    function enteredMarkets(address) external view returns (address);\\n    function deltas(address) external view returns (Types.Delta memory);\\n    function marketsCreated() external view returns (address[] memory);\\n    function marketParameters(address) external view returns (Types.MarketParameters memory);\\n    function p2pDisabled(address) external view returns (bool);\\n    function p2pSupplyIndex(address) external view returns (uint256);\\n    function p2pBorrowIndex(address) external view returns (uint256);\\n    function lastPoolIndexes(address) external view returns (Types.LastPoolIndexes memory);\\n    function marketStatus(address) external view returns (Types.MarketStatus memory);\\n    function comptroller() external view returns (IComptroller);\\n    function interestRatesManager() external view returns (IInterestRatesManager);\\n    function rewardsManager() external view returns (IRewardsManager);\\n    function positionsManager() external view returns (IPositionsManager);\\n    function incentiveVault() external view returns (IIncentivesVault);\\n    function treasuryVault() external view returns (address);\\n    function cEth() external view returns (address);\\n    function wEth() external view returns (address);\\n\\n    /// GETTERS ///\\n\\n    function updateP2PIndexes(address _poolTokenAddress) external;\\n    function getEnteredMarkets(address _user) external view returns (address[] memory enteredMarkets_);\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_);\\n    function getHead(address _poolTokenAddress, Types.PositionType _positionType) external view returns (address head);\\n    function getNext(address _poolTokenAddress, Types.PositionType _positionType, address _user) external view returns (address next);\\n\\n    /// GOVERNANCE ///\\n\\n    function setMaxSortedUsers(uint256 _newMaxSortedUsers) external;\\n    function setDefaultMaxGasForMatching(Types.MaxGasForMatching memory _maxGasForMatching) external;\\n    function setTreasuryVault(address _newTreasuryVaultAddress) external;\\n    function setIncentivesVault(address _newIncentivesVault) external;\\n    function setRewardsManager(address _rewardsManagerAddress) external;\\n    function setDustThreshold(uint256 _dustThreshold) external;\\n    function setP2PDisable(address _poolTokenAddress, bool _p2pDisabled) external;\\n    function setReserveFactor(address _poolTokenAddress, uint256 _newReserveFactor) external;\\n    function setP2PIndexCursor(address _poolTokenAddress, uint16 _p2pIndexCursor) external;\\n    function setPauseStatus(address _poolTokenAddress) external;\\n    function setPartialPauseStatus(address _poolTokenAddress) external;\\n    function claimToTreasury(address _poolTokenAddress, uint256 _amount) external;\\n    function createMarket(address _poolTokenAddress, Types.MarketParameters calldata _params) external;\\n\\n    /// USERS ///\\n\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function supply(address _poolTokenAddress, address _onBehalf, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount) external;\\n    function borrow(address _poolTokenAddress, uint256 _amount, uint256 _maxGasForMatching) external;\\n    function withdraw(address _poolTokenAddress, uint256 _amount) external;\\n    function repay(address _poolTokenAddress, address _onBehalf, uint256 _amount) external;\\n    function liquidate(address _poolTokenBorrowedAddress, address _poolTokenCollateralAddress, address _borrower, uint256 _amount) external;\\n    function claimRewards(address[] calldata _cTokenAddresses, bool _tradeForMorphoToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/ILens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\nimport \\\"./IMorpho.sol\\\";\\n\\ninterface ILens {\\n    function MAX_BASIS_POINTS() external view returns (uint256);\\n\\n    function WAD() external view returns (uint256);\\n\\n    function morpho() external view returns (IMorpho);\\n\\n    function isMarketCreated(address _poolTokenAddress) external view returns (bool);\\n\\n    function isMarketCreatedAndNotPaused(address _poolTokenAddress) external view returns (bool);\\n\\n    function isMarketCreatedAndNotPausedNorPartiallyPaused(address _poolTokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEnteredMarkets(address _user)\\n        external\\n        view\\n        returns (address[] memory enteredMarkets_);\\n\\n    function getAllMarkets() external view returns (address[] memory marketsCreated_);\\n\\n    function getMarketData(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyIndex_,\\n            uint256 p2pBorrowIndex_,\\n            uint32 lastUpdateBlockNumber_,\\n            uint256 p2pSupplyDelta_,\\n            uint256 p2pBorrowDelta_,\\n            uint256 p2pSupplyAmount_,\\n            uint256 p2pBorrowAmount_\\n        );\\n\\n    function getMarketConfiguration(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            address underlying_,\\n            bool isCreated_,\\n            bool p2pDisabled_,\\n            bool isPaused_,\\n            bool isPartiallyPaused_,\\n            uint256 reserveFactor_,\\n            uint256 collateralFactor_\\n        );\\n\\n    function getRates(address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 p2pSupplyRate_,\\n            uint256 p2pBorrowRate_,\\n            uint256 poolSupplyRate_,\\n            uint256 poolBorrowRate_\\n        );\\n\\n    function getUserBalanceStates(address _user, address[] calldata _updatedMarkets)\\n        external\\n        view\\n        returns (\\n            uint256 collateralValue,\\n            uint256 debtValue,\\n            uint256 maxDebtValue\\n        );\\n\\n    function getUpdatedUserSupplyBalance(address _user, address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getUpdatedUserBorrowBalance(address _user, address _poolTokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 balanceOnPool,\\n            uint256 balanceInP2P,\\n            uint256 totalBalance\\n        );\\n\\n    function getUserMaxCapacitiesForAsset(address _user, address _poolTokenAddress)\\n        external\\n        view\\n        returns (uint256 withdrawable, uint256 borrowable);\\n\\n    function getUserHypotheticalBalanceStates(\\n        address _user,\\n        address _poolTokenAddress,\\n        uint256 _withdrawnAmount,\\n        uint256 _borrowedAmount\\n    ) external view returns (uint256 debtValue, uint256 maxDebtValue);\\n\\n    function getUserLiquidityDataForAsset(\\n        address _user,\\n        address _poolTokenAddress,\\n        bool _computeUpdatedIndexes,\\n        ICompoundOracle _oracle\\n    ) external view returns (Types.AssetLiquidityData memory assetData);\\n\\n    function getUpdatedP2PSupplyIndex(address _poolTokenAddress) external view returns (uint256);\\n\\n    function getUpdatedP2PBorrowIndex(address _poolTokenAddress) external view returns (uint256);\\n\\n    function getIndexes(address _poolTokenAddress, bool _computeUpdatedIndexes)\\n        external\\n        view\\n        returns (\\n            uint256 newP2PSupplyIndex,\\n            uint256 newP2PBorrowIndex,\\n            uint256 newPoolSupplyIndex,\\n            uint256 newPoolBorrowIndex\\n        );\\n\\n    function isLiquidatable(address _user, address[] memory _updatedMarkets)\\n        external\\n        view\\n        returns (bool);\\n\\n    function computeLiquidationRepayAmount(\\n        address _user,\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address[] memory _updatedMarkets\\n    ) external view returns (uint256 toRepay);\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/CompoundMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title CompoundMath.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Library emulating in solidity 8+ the behavior of Compound's mulScalarTruncate and divScalarByExpTruncate functions.\\nlibrary CompoundMath {\\n    /// ERRORS ///\\n\\n    /// @notice Reverts when the number exceeds 224 bits.\\n    error NumberExceeds224Bits();\\n\\n    /// @notice Reverts when the number exceeds 32 bits.\\n    error NumberExceeds32Bits();\\n\\n    /// INTERNAL ///\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x * y) / 1e18;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((1e18 * x * 1e18) / y) / 1e18;\\n    }\\n\\n    function safe224(uint256 n) internal pure returns (uint224) {\\n        if (n >= 2**224) revert NumberExceeds224Bits();\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        if (n >= 2**32) revert NumberExceeds32Bits();\\n        return uint32(n);\\n    }\\n\\n    function min(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256) {\\n        return a < b ? a < c ? a : c : b < c ? b : c;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IInterestRatesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IInterestRatesManager {\\n    function updateP2PIndexes(address _marketAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./compound/ICompound.sol\\\";\\n\\ninterface IRewardsManager {\\n    function claimRewards(address[] calldata, address) external returns (uint256);\\n\\n    function accrueUserUnclaimedRewards(address[] calldata _cTokenAddresses, address)\\n        external\\n        returns (uint256);\\n\\n    function userUnclaimedCompRewards(address) external view returns (uint256);\\n\\n    function getUserUnclaimedRewards(address[] calldata _cTokenAddresses, address _user)\\n        external\\n        returns (uint256 unclaimedRewards);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function getLocalCompSupplyState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getLocalCompBorrowState(address)\\n        external\\n        view\\n        returns (IComptroller.CompMarketState memory);\\n\\n    function getUpdatedSupplyIndex(address) external view returns (uint256);\\n\\n    function getUpdatedBorrowIndex(address) external view returns (uint256);\\n\\n    function accrueUserSupplyUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function accrueUserBorrowUnclaimedRewards(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IPositionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IPositionsManager {\\n    function supplyLogic(\\n        address _poolTokenAddress,\\n        address _supplier,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function borrowLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function withdrawLogic(\\n        address _poolTokenAddress,\\n        uint256 _amount,\\n        address _supplier,\\n        address _receiver,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function repayLogic(\\n        address _poolTokenAddress,\\n        address _repayer,\\n        address _onBehalf,\\n        uint256 _amount,\\n        uint256 _maxGasForMatching\\n    ) external;\\n\\n    function liquidateLogic(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IIncentivesVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IIncentivesVault {\\n    function setOracle(IOracle _newOracle) external;\\n\\n    function setMorphoDao(address _newMorphoDao) external;\\n\\n    function setBonus(uint256 _newBonus) external;\\n\\n    function setPauseStatus(bool _newStatus) external;\\n\\n    function transferMorphoTokensToDao(uint256 _amount) external;\\n\\n    function tradeCompForMorphoTokens(address _to, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/compound/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\n/// @title Types.\\n/// @author Morpho Labs.\\n/// @custom:contact security@morpho.xyz\\n/// @dev Common types and structs used in Moprho contracts.\\nlibrary Types {\\n    /// ENUMS ///\\n\\n    enum PositionType {\\n        SUPPLIERS_IN_P2P,\\n        SUPPLIERS_ON_POOL,\\n        BORROWERS_IN_P2P,\\n        BORROWERS_ON_POOL\\n    }\\n\\n    /// STRUCTS ///\\n\\n    struct SupplyBalance {\\n        uint256 inP2P; // In supplier's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests earned by suppliers in peer-to-peer. Multiply by the peer-to-peer supply index to get the underlying amount.\\n        uint256 onPool; // In cToken. Multiply by the pool supply index to get the underlying amount.\\n    }\\n\\n    struct BorrowBalance {\\n        uint256 inP2P; // In borrower's peer-to-peer unit, a unit that grows in underlying value, to keep track of the interests paid by borrowers in peer-to-peer. Multiply by the peer-to-peer borrow index to get the underlying amount.\\n        uint256 onPool; // In cdUnit, a unit that grows in value, to keep track of the debt increase when borrowers are on Compound. Multiply by the pool borrow index to get the underlying amount.\\n    }\\n\\n    // Max gas to consume during the matching process for supply, borrow, withdraw and repay functions.\\n    struct MaxGasForMatching {\\n        uint64 supply;\\n        uint64 borrow;\\n        uint64 withdraw;\\n        uint64 repay;\\n    }\\n\\n    struct Delta {\\n        uint256 p2pSupplyDelta; // Difference between the stored peer-to-peer supply amount and the real peer-to-peer supply amount (in cToken).\\n        uint256 p2pBorrowDelta; // Difference between the stored peer-to-peer borrow amount and the real peer-to-peer borrow amount (in cdUnit).\\n        uint256 p2pSupplyAmount; // Sum of all stored peer-to-peer supply (in peer-to-peer unit).\\n        uint256 p2pBorrowAmount; // Sum of all stored peer-to-peer borrow (in peer-to-peer unit).\\n    }\\n\\n    struct AssetLiquidityData {\\n        uint256 collateralValue; // The collateral value of the asset.\\n        uint256 maxDebtValue; // The maximum possible debt value of the asset.\\n        uint256 debtValue; // The debt value of the asset.\\n        uint256 underlyingPrice; // The price of the token.\\n        uint256 collateralFactor; // The liquidation threshold applied on this token.\\n    }\\n\\n    struct LiquidityData {\\n        uint256 collateralValue; // The collateral value.\\n        uint256 maxDebtValue; // The maximum debt value possible.\\n        uint256 debtValue; // The debt value.\\n    }\\n\\n    // Variables are packed together to save gas (will not exceed their limit during Morpho's lifetime).\\n    struct LastPoolIndexes {\\n        uint32 lastUpdateBlockNumber; // The last time the peer-to-peer indexes were updated.\\n        uint112 lastSupplyPoolIndex; // Last pool supply index.\\n        uint112 lastBorrowPoolIndex; // Last pool borrow index.\\n    }\\n\\n    struct MarketParameters {\\n        uint16 reserveFactor; // Proportion of the interest earned by users sent to the DAO for each market, in basis point (100% = 10 000). The value is set at market creation.\\n        uint16 p2pIndexCursor; // Position of the peer-to-peer rate in the pool's spread. Determine the weights of the weighted arithmetic average in the indexes computations ((1 - p2pIndexCursor) * r^S + p2pIndexCursor * r^B) (in basis point).\\n    }\\n\\n    struct MarketStatus {\\n        bool isCreated; // Whether or not this market is created.\\n        bool isPaused; // Whether the market is paused or not (all entry points on Morpho are frozen; supply, borrow, withdraw, repay and liquidate).\\n        bool isPartiallyPaused; // Whether the market is partially paused or not (only supply and borrow are frozen).\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compound/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IOracle {\\n    function consult(uint256 _amountIn) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_morphoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CompoundOracleFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"computeLiquidationRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toRepay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"marketsCreated_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEnteredMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enteredMarkets_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_computeUpdatedIndexes\",\"type\":\"bool\"}],\"name\":\"getIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newP2PSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newP2PBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPoolSupplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPoolBorrowIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getMarketConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCreated_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"p2pDisabled_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyPaused_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateBlockNumber_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyDelta_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowDelta_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pSupplyAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p2pSupplyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2pBorrowRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupplyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBorrowRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedP2PBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedP2PSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedUserBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUpdatedUserSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInP2P\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"getUserBalanceStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowedAmount\",\"type\":\"uint256\"}],\"name\":\"getUserHypotheticalBalanceStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_computeUpdatedIndexes\",\"type\":\"bool\"},{\"internalType\":\"contract ICompoundOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"getUserLiquidityDataForAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.AssetLiquidityData\",\"name\":\"assetData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"getUserMaxCapacitiesForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_updatedMarkets\",\"type\":\"address[]\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreatedAndNotPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"}],\"name\":\"isMarketCreatedAndNotPausedNorPartiallyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morpho\",\"outputs\":[{\"internalType\":\"contract IMorpho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lens", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008888882f8f843896699869179fb6e4f7e3b58888", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}