{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 690\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/MasterContractOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.10;\\r\\nimport \\\"./libraries/BoringOwnable.sol\\\";\\r\\n\\r\\ninterface IBentoBox {\\r\\n    function toAmount(address token, uint256 share, bool roundUp) external view returns (uint256 amount);\\r\\n    function toShare(address token, uint256 amount, bool roundUp) external view returns (uint256 share);\\r\\n    function balanceOf(address token, address owner) external view returns (uint256 share);\\r\\n}\\r\\n\\r\\ninterface IMasterContract {\\r\\n    function setFeeTo (address newFee) external;\\r\\n    function reduceSupply (uint256 amount) external;\\r\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\r\\n    function bentoBox() external returns (IBentoBox);\\r\\n} \\r\\n\\r\\ncontract MasterContractOwner is BoringOwnable {\\r\\n    event LogDepreciated(IMasterContract indexed cauldron);\\r\\n    mapping (IMasterContract => bool) public isDepreciated;\\r\\n\\r\\n    address public constant MIM = 0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3;\\r\\n\\r\\n    function transferOwnershipOfMasterContract (IMasterContract mastercontract, address newOwner) external onlyOwner {\\r\\n        mastercontract.transferOwnership(newOwner, true, false);\\r\\n    }\\r\\n\\r\\n    function setFeeTo (IMasterContract mastercontract, address feeTo) external onlyOwner {\\r\\n        mastercontract.setFeeTo(feeTo);\\r\\n    }\\r\\n\\r\\n    function depreciate (IMasterContract cauldron, bool status) external onlyOwner {\\r\\n        isDepreciated[cauldron] = status;\\r\\n        emit LogDepreciated(cauldron);\\r\\n    }\\r\\n\\r\\n    function reduceCompletely(IMasterContract cauldron) external {\\r\\n        require(isDepreciated[cauldron]);\\r\\n        IBentoBox bentoBox = cauldron.bentoBox();\\r\\n        uint256 amount = bentoBox.toAmount(MIM, bentoBox.balanceOf(MIM, address(cauldron)), false);\\r\\n        cauldron.reduceSupply(amount);\\r\\n    }\\r\\n\\r\\n    function reduceSupply(IMasterContract cauldron, uint256 amount) external onlyOwner {\\r\\n        cauldron.reduceSupply(amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/BoringOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMasterContract\",\"name\":\"cauldron\",\"type\":\"address\"}],\"name\":\"LogDepreciated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"cauldron\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"depreciate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDepreciated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"cauldron\",\"type\":\"address\"}],\"name\":\"reduceCompletely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"cauldron\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduceSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"mastercontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"mastercontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfMasterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterContractOwner", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "690", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}