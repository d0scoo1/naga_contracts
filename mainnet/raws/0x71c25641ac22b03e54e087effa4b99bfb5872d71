{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-05-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract BettingGame {\r\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.01 ether;\r\n    uint256 public constant MAX_DEPOSIT_AMOUNT = 0.08 ether;\r\n\r\n    uint256 private rewardFee = 3;\r\n    uint256 private bettingFee = 5;\r\n\r\n    uint256 public gameId = 0;\r\n    address public adminWallet;\r\n    mapping(uint256 => Game) public games;\r\n\r\n    struct Game{\r\n        uint256 id;\r\n        uint256 bet;\r\n        uint256 seed;\r\n        uint256 amount;\r\n        uint256 winAmount;\r\n        uint256 time;\r\n        address payable player;\r\n    }\r\n\r\n    uint16 private _randomIndex = 0;\r\n    uint private _randomCalls = 0;\r\n    bool private _managerSet = false;\r\n    mapping(uint16 => address) private _randomSource;\r\n    mapping(address => bool) public managers;\r\n\r\n    event Result(uint256 id, uint256 bet, uint256 randomSeed, uint256 amount, address player, uint256 winAmount, uint256 randomResult, uint256 time);\r\n\r\n    constructor (address _admin) {\r\n        // Fill random source addresses\r\n        _randomSource[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        _randomSource[1] = 0x3cD751E6b0078Be393132286c442345e5DC49699;\r\n        _randomSource[2] = 0xb5d85CBf7cB3EE0D56b3bB207D5Fc4B82f43F511;\r\n        _randomSource[3] = 0xC098B2a3Aa256D2140208C3de6543aAEf5cd3A94;\r\n        _randomSource[4] = 0x28C6c06298d514Db089934071355E5743bf21d60;\r\n        _randomSource[5] = 0x2FAF487A4414Fe77e2327F0bf4AE2a264a776AD2;\r\n        _randomSource[6] = 0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0;\r\n\r\n        managers[msg.sender] = true;\r\n        adminWallet = _admin;\r\n    }\r\n\r\n    function addManager(address _addr) external {\r\n        require(managers[msg.sender] == true, 'Error, You are not allowed!');\r\n        managers[_addr] = true;\r\n    }\r\n\r\n    function removeManager(address _addr) external {\r\n        require(managers[msg.sender] == true, 'Error, You are not allowed!');\r\n        managers[_addr] = false;\r\n    }\r\n\r\n    function initManager(address _addr) external {\r\n        require(_managerSet == false, 'Error');\r\n        managers[_addr] = true;\r\n        _managerSet = true;\r\n    }\r\n\r\n    function fund() external payable {}\r\n\r\n    /**\r\n    * Taking bets function.\r\n    * By winning, user 2x his betAmount.\r\n    * Chances to win and lose are the same.\r\n    */\r\n    function game(uint256 bet, uint256 seed) public payable returns (bool) {\r\n\r\n        /** !UPDATE\r\n        * \r\n        * Checking if msg.value is higher or equal than $1.\r\n        */\r\n        require(msg.value>=MIN_DEPOSIT_AMOUNT, 'Error, msg.value must be >= 0.01 ether');\r\n        require(msg.value<=MAX_DEPOSIT_AMOUNT, 'Error, msg.value must be <= 0.08 ether');\r\n        \r\n        //bet=0 is back\r\n        //bet=1 is front\r\n        require(bet<=1, 'Error, accept only 0 and 1');\r\n\r\n        //vault balance must be at least equal to msg.value\r\n        require(address(this).balance>=msg.value, 'Error, insufficent vault balance');\r\n        \r\n        //each bet has unique id\r\n        games[gameId] = Game(gameId, bet, seed, msg.value, 0, 0, payable(msg.sender));\r\n\r\n        //increase gameId for the next bet\r\n        gameId = gameId+1;\r\n\r\n        //seed is auto-generated by DApp\r\n        uint random = getSomeRandomNumber(seed, 2);\r\n        verdict(gameId-1, random);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRandomIndex() internal {\r\n        _randomIndex += 1;\r\n        _randomCalls += 1;\r\n        if (_randomIndex > 6) _randomIndex = 0;\r\n    }\r\n\r\n    function getSomeRandomNumber(uint _seed, uint _limit) internal returns (uint16) {\r\n        uint extra = 0;\r\n        for (uint16 i = 0; i < 7; i++) {\r\n            extra += _randomSource[_randomIndex].balance;\r\n        }\r\n\r\n        uint random = uint(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _seed,\r\n                    blockhash(block.number - 1),\r\n                    block.coinbase,\r\n                    block.difficulty,\r\n                    msg.sender,\r\n                    gameId,\r\n                    extra,\r\n                    _randomCalls,\r\n                    _randomIndex\r\n                )\r\n            )\r\n        );\r\n\r\n        _randomIndex = uint16(random % 6);\r\n        updateRandomIndex();\r\n\r\n        return uint16(random % _limit);\r\n    }\r\n\r\n    /**\r\n    * Send rewards to the winners.\r\n    */\r\n    function verdict(uint256 id, uint256 random) internal {\r\n        //reset winAmount for current user\r\n        uint256 winAmount = 0;\r\n\r\n        uint256 rewardFeeAmount = getRewardFee(games[id].amount);\r\n        payable(adminWallet).transfer(rewardFeeAmount);\r\n        \r\n        //if user wins, then receives 2x of their betting amount\r\n        if(random == games[id].bet) {\r\n            uint256 bettingFeeAmount = getBettingFee(games[id].amount);\r\n            winAmount = (games[id].amount - bettingFeeAmount) * 2;\r\n            games[id].player.transfer(winAmount);\r\n        }\r\n        games[id].winAmount = winAmount;\r\n        games[id].time = block.timestamp;\r\n        emit Result(games[id].id, games[id].bet, games[id].seed, games[id].amount, games[id].player, games[id].winAmount, random, games[id].time);\r\n    }\r\n\r\n    /**\r\n    * Withdraw Ether from this contract (manager option).\r\n    */\r\n    function withdrawEther(uint256 amount) external {\r\n        require(address(this).balance>=amount, 'Error, contract has insufficent balance');\r\n        require(managers[msg.sender] == true, 'Error, You are not allowed');\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function changeAdminWallet(address _addr) external {\r\n        require(managers[msg.sender] == true,  'Error, You are not allowed');\r\n        adminWallet = _addr;\r\n    }\r\n\r\n    function getRewardFee(uint256 amount) private view returns(uint256) {\r\n        return amount * rewardFee / 100; \r\n    }\r\n\r\n    function getBettingFee(uint256 amount) private view returns(uint256) {\r\n        return amount * bettingFee / 100;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomResult\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"game\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"player\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"initManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BettingGame", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007612128bde69d375adfecb792a04ad1d717cc446", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e64f99b6142f623334dfaf0798cda85203572b97cf00516f530d5ae8bc7fafa8"}]}