{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.5;\r\n\r\ncontract ConditionalVault {\r\n    address payable public immutable recipient;\r\n    address payable public immutable overflow;\r\n    uint256 public immutable threshold;\r\n\r\n    constructor(\r\n        address payable recipient_,\r\n        address payable overflow_,\r\n        uint256 threshold_\r\n    ) {\r\n        recipient = recipient_;\r\n        overflow = overflow_;\r\n        threshold = threshold_;\r\n    }\r\n\r\n    function transfer() public {\r\n        uint256 balance = address(this).balance;\r\n\r\n        if (balance > threshold) {\r\n            _sendFunds(overflow, balance - threshold);\r\n            _sendFunds(recipient, threshold);\r\n        } else {\r\n            _sendFunds(recipient, balance);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // ============ Private Utils ============\r\n\r\n    function _sendFunds(address payable to, uint256 amount) private {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Insufficient balance for send\"\r\n        );\r\n\r\n        (bool success, ) = to.call{value: amount}(\"\");\r\n        require(success, \"Unable to send value: recipient may have reverted\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"overflow_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"overflow\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConditionalVault", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000ac484da38306e7010d36dd9bb4533308d347c525000000000000000000000000941a3147ce69ad72c538a9da4a54bca4e6c488460000000000000000000000000000000000000000000000001bc16d674ec80000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d1ece5dbc2999860426099e2374f7a21f7fda086545613739dccc99af2ffd3e"}]}