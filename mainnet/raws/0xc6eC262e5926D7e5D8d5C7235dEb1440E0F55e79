{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/incentives/VariableYieldDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from '../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\nimport {VersionedInitializable} from '../protocol/libraries/sturdy-upgradeability/VersionedInitializable.sol';\\nimport {DistributionManager} from './DistributionManager.sol';\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from '../interfaces/IScaledBalanceToken.sol';\\nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {UserData, AssetData, AggregatedRewardsData} from '../interfaces/IVariableYieldDistribution.sol';\\nimport {IncentiveVault} from '../protocol/vault/IncentiveVault.sol';\\nimport {Errors} from '../protocol/libraries/helpers/Errors.sol';\\n\\n/**\\n * @title VariableYieldDistribution\\n * @notice Distributor contract that sends some rewards to borrowers who provide some special tokens such as Curve LP tokens.\\n * @author Sturdy\\n **/\\ncontract VariableYieldDistribution is VersionedInitializable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 private constant REVISION = 1;\\n  uint8 private constant PRECISION = 27;\\n  address public immutable EMISSION_MANAGER;\\n\\n  ILendingPoolAddressesProvider internal _addressProvider;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  event AssetRegistered(address indexed asset, address indexed yieldAddress);\\n  event AssetIndexUpdated(address indexed asset, uint256 index, uint256 rewardsAmount);\\n  event UserIndexUpdated(\\n    address indexed user,\\n    address indexed asset,\\n    uint256 index,\\n    uint256 unclaimedRewardsAmount\\n  );\\n  event RewardsReceived(address indexed asset, address indexed rewardToken, uint256 receivedAmount);\\n  event RewardsAccrued(address indexed user, address indexed asset, uint256 amount);\\n  event RewardsClaimed(\\n    address indexed asset,\\n    address indexed user,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  modifier onlyEmissionManager() {\\n    require(msg.sender == EMISSION_MANAGER, Errors.CALLER_NOT_EMISSION_MANAGER);\\n    _;\\n  }\\n\\n  modifier onlyIncentiveController() {\\n    require(\\n      msg.sender == _addressProvider.getIncentiveController(),\\n      Errors.CALLER_NOT_INCENTIVE_CONTROLLER\\n    );\\n    _;\\n  }\\n\\n  constructor(address emissionManager) {\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /**\\n   * @dev Initialize IStakedTokenIncentivesController\\n   * @param _provider the address of the corresponding addresses provider\\n   **/\\n  function initialize(ILendingPoolAddressesProvider _provider) external initializer {\\n    _addressProvider = _provider;\\n  }\\n\\n  /**\\n   * @dev Register an asset with vault which will keep some of yield for borrowers\\n   * @param asset The address of the reference asset\\n   * @param yieldAddress The address of the vault\\n   */\\n  function registerAsset(address asset, address yieldAddress) external payable onlyEmissionManager {\\n    AssetData storage assetData = assets[asset];\\n    address rewardToken = IncentiveVault(yieldAddress).getIncentiveToken();\\n\\n    require(assetData.yieldAddress == address(0), Errors.YD_VR_ASSET_ALREADY_IN_USE);\\n    require(rewardToken != address(0), Errors.YD_VR_INVALID_VAULT);\\n\\n    uint256 totalStaked = IScaledBalanceToken(asset).scaledTotalSupply();\\n    assetData.yieldAddress = yieldAddress;\\n    assetData.rewardToken = rewardToken;\\n\\n    (uint256 lastAvailableRewards, uint256 increasedRewards) = _getAvailableRewardsAmount(\\n      assetData\\n    );\\n\\n    _updateAssetStateInternal(\\n      asset,\\n      assetData,\\n      totalStaked,\\n      lastAvailableRewards,\\n      increasedRewards\\n    );\\n\\n    emit AssetRegistered(asset, yieldAddress);\\n  }\\n\\n  function receivedRewards(\\n    address asset,\\n    address rewardToken,\\n    uint256 amount\\n  ) external {\\n    AssetData storage assetData = assets[asset];\\n    address _rewardToken = assetData.rewardToken;\\n    address _yieldAddress = assetData.yieldAddress;\\n    uint256 lastAvailableRewards = assetData.lastAvailableRewards;\\n\\n    require(msg.sender == _yieldAddress, Errors.YD_VR_CALLER_NOT_VAULT);\\n    require(_rewardToken != address(0), Errors.YD_VR_ASSET_NOT_REGISTERED);\\n    require(rewardToken == _rewardToken, Errors.YD_VR_REWARD_TOKEN_NOT_VALID);\\n    require(amount >= lastAvailableRewards, Errors.YD_VR_INVALID_REWARDS_AMOUNT);\\n\\n    uint256 increasedRewards = amount - lastAvailableRewards;\\n    uint256 totalStaked = IScaledBalanceToken(asset).scaledTotalSupply();\\n\\n    _updateAssetStateInternal(asset, assetData, totalStaked, 0, increasedRewards);\\n\\n    emit RewardsReceived(asset, rewardToken, amount);\\n  }\\n\\n  function handleAction(\\n    address user,\\n    address asset,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external payable onlyIncentiveController {\\n    uint256 accruedRewards = _updateUserAssetInternal(user, asset, userBalance, totalSupply);\\n    if (accruedRewards != 0) {\\n      emit RewardsAccrued(user, asset, accruedRewards);\\n    }\\n  }\\n\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (AggregatedRewardsData[] memory)\\n  {\\n    uint256 length = assets.length;\\n    AggregatedRewardsData[] memory rewards = new AggregatedRewardsData[](length);\\n\\n    for (uint256 i; i < length; ++i) {\\n      (uint256 stakedByUser, uint256 totalStaked) = IScaledBalanceToken(assets[i])\\n        .getScaledUserBalanceAndSupply(user);\\n      rewards[i].asset = assets[i];\\n      (rewards[i].rewardToken, rewards[i].balance) = _getUnclaimedRewards(\\n        user,\\n        assets[i],\\n        stakedByUser,\\n        totalStaked\\n      );\\n    }\\n\\n    return rewards;\\n  }\\n\\n  function claimRewards(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256) {\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimRewards(asset, amount, msg.sender, to);\\n  }\\n\\n  function getUserAssetData(address user, address asset) public view returns (uint256, uint256) {\\n    UserData storage userData = assets[asset].users[user];\\n    return (userData.index, userData.unclaimedRewards);\\n  }\\n\\n  function getAssetData(address asset)\\n    public\\n    view\\n    returns (\\n      uint256,\\n      address,\\n      address,\\n      uint256\\n    )\\n  {\\n    return (\\n      assets[asset].index,\\n      assets[asset].yieldAddress,\\n      assets[asset].rewardToken,\\n      assets[asset].lastAvailableRewards\\n    );\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards.\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function _claimRewards(\\n    address asset,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) internal returns (uint256) {\\n    if (amount == 0) {\\n      return 0;\\n    }\\n\\n    AssetData storage assetData = assets[asset];\\n    UserData storage userData = assetData.users[user];\\n    address rewardToken = assetData.rewardToken;\\n\\n    (uint256 stakedByUser, uint256 totalStaked) = IScaledBalanceToken(asset)\\n      .getScaledUserBalanceAndSupply(user);\\n\\n    _updateUserAssetInternal(user, asset, stakedByUser, totalStaked);\\n\\n    uint256 unclaimedRewards = userData.unclaimedRewards;\\n    if (unclaimedRewards == 0) {\\n      return 0;\\n    }\\n\\n    uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\\n\\n    IERC20 stakeToken = IERC20(rewardToken);\\n    if (stakeToken.balanceOf(address(this)) >= amountToClaim) {\\n      stakeToken.safeTransfer(to, amountToClaim);\\n      userData.unclaimedRewards = unclaimedRewards - amountToClaim;\\n      emit RewardsClaimed(asset, user, to, amountToClaim);\\n    }\\n\\n    return amountToClaim;\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param asset The address of the asset being updated\\n   * @param assetData Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address asset,\\n    AssetData storage assetData,\\n    uint256 totalStaked,\\n    uint256 lastAvailableRewards,\\n    uint256 increasedRewards\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetData.index;\\n    uint256 oldAvailableRewards = assetData.lastAvailableRewards;\\n\\n    uint256 newIndex = _getAssetIndex(oldIndex, increasedRewards, totalStaked);\\n\\n    if (newIndex != oldIndex || lastAvailableRewards != oldAvailableRewards) {\\n      assetData.index = newIndex;\\n      assetData.lastAvailableRewards = lastAvailableRewards;\\n      emit AssetIndexUpdated(asset, newIndex, lastAvailableRewards);\\n    }\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    UserData storage userData = assetData.users[user];\\n    uint256 userIndex = userData.index;\\n    uint256 unclaimedRewards = userData.unclaimedRewards;\\n    uint256 accruedRewards;\\n\\n    (uint256 lastAvailableRewards, uint256 increasedRewards) = _getAvailableRewardsAmount(\\n      assetData\\n    );\\n    uint256 newIndex = _updateAssetStateInternal(\\n      asset,\\n      assetData,\\n      totalStaked,\\n      lastAvailableRewards,\\n      increasedRewards\\n    );\\n\\n    if (userIndex == newIndex) return accruedRewards;\\n\\n    if (stakedByUser != 0) {\\n      accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n      unclaimedRewards += accruedRewards;\\n    }\\n\\n    userData.index = newIndex;\\n    userData.unclaimedRewards = unclaimedRewards;\\n    emit UserIndexUpdated(user, asset, newIndex, unclaimedRewards);\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param asset The address of the asset\\n   * @param stakedByUser The balance of the user of the asset\\n   * @param totalStaked The total staked amount of the asset\\n   * @return rewardToken The address of the reward token\\n   * @return unclaimedRewards The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal view returns (address rewardToken, uint256 unclaimedRewards) {\\n    AssetData storage assetData = assets[asset];\\n    rewardToken = assetData.rewardToken;\\n    uint256 oldIndex = assetData.index;\\n    (, uint256 increasedRewards) = _getAvailableRewardsAmount(assetData);\\n\\n    UserData storage userData = assetData.users[user];\\n    uint256 userIndex = userData.index;\\n    unclaimedRewards = userData.unclaimedRewards;\\n\\n    uint256 assetIndex = _getAssetIndex(oldIndex, increasedRewards, totalStaked);\\n\\n    if (stakedByUser != 0) {\\n      unclaimedRewards += _getRewards(stakedByUser, assetIndex, userIndex);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return (principalUserBalance * (reserveIndex - userIndex)) / 10**uint256(PRECISION);\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param increasedRewards Earned Amount\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 increasedRewards,\\n    uint256 totalBalance\\n  ) internal pure returns (uint256) {\\n    if (increasedRewards == 0 || totalBalance == 0) {\\n      return currentIndex;\\n    }\\n\\n    return (increasedRewards * (10**uint256(PRECISION))) / totalBalance + currentIndex;\\n  }\\n\\n  function _getAvailableRewardsAmount(AssetData storage assetData)\\n    internal\\n    view\\n    returns (uint256 lastAvailableRewards, uint256 increasedRewards)\\n  {\\n    address vault = assetData.yieldAddress;\\n    uint256 oldAmount = assetData.lastAvailableRewards;\\n    lastAvailableRewards = IncentiveVault(vault).getCurrentTotalIncentiveAmount();\\n    require(lastAvailableRewards >= oldAmount, Errors.YD_VR_INVALID_REWARDS_AMOUNT);\\n    increasedRewards = lastAvailableRewards - oldAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from './IERC20.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length != 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint104 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n\\n  struct AssetConfigInputForYield {\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/sturdy-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Sturdy, inspiration from Aave\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the revision number of the contract\\n   * Needs to be defined in the inherited class as a constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns true if and only if the function is running in the constructor\\n   **/\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/incentives/DistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISturdyDistributionManager} from '../interfaces/ISturdyDistributionManager.sol';\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\n/**\\n * @title DistributionManager\\n * @notice Accounting contract to manage multiple staking distributions\\n * @author Sturdy\\n **/\\ncontract DistributionManager is ISturdyDistributionManager {\\n  struct AssetData {\\n    uint104 emissionPerSecond;\\n    uint104 index;\\n    uint40 lastUpdateTimestamp;\\n    mapping(address => uint256) users;\\n  }\\n\\n  address public immutable EMISSION_MANAGER;\\n\\n  uint8 internal constant _PRECISION = 18;\\n\\n  mapping(address => AssetData) public assets;\\n\\n  uint256 internal _distributionEnd;\\n\\n  modifier onlyEmissionManager() {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n    _;\\n  }\\n\\n  constructor(address emissionManager) {\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /// @inheritdoc ISturdyDistributionManager\\n  function setDistributionEnd(uint256 distributionEnd)\\n    external\\n    payable\\n    override\\n    onlyEmissionManager\\n  {\\n    _distributionEnd = distributionEnd;\\n    emit DistributionEndUpdated(distributionEnd);\\n  }\\n\\n  /// @inheritdoc ISturdyDistributionManager\\n  function getDistributionEnd() external view override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc ISturdyDistributionManager\\n  function DISTRIBUTION_END() external view virtual override returns (uint256) {\\n    return _distributionEnd;\\n  }\\n\\n  /// @inheritdoc ISturdyDistributionManager\\n  function getUserAssetData(address user, address asset)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return assets[asset].users[user];\\n  }\\n\\n  /// @inheritdoc ISturdyDistributionManager\\n  function getAssetData(address asset)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      assets[asset].index,\\n      assets[asset].emissionPerSecond,\\n      assets[asset].lastUpdateTimestamp\\n    );\\n  }\\n\\n  /**\\n   * @dev Configure the assets for a specific emission\\n   * @param assetsConfigInput The array of each asset configuration\\n   **/\\n  function _configureAssets(DistributionTypes.AssetConfigInput[] memory assetsConfigInput)\\n    internal\\n  {\\n    uint256 length = assetsConfigInput.length;\\n    for (uint256 i; i < length; ++i) {\\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\\n\\n      _updateAssetStateInternal(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetConfig,\\n        assetsConfigInput[i].totalStaked\\n      );\\n\\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\\n\\n      emit AssetConfigUpdated(\\n        assetsConfigInput[i].underlyingAsset,\\n        assetsConfigInput[i].emissionPerSecond\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\\n   * @param asset The address of the asset being updated\\n   * @param assetConfig Storage pointer to the distribution's config\\n   * @param totalStaked Current total of staked assets for this distribution\\n   * @return The new distribution index\\n   **/\\n  function _updateAssetStateInternal(\\n    address asset,\\n    AssetData storage assetConfig,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    uint256 oldIndex = assetConfig.index;\\n    uint256 emissionPerSecond = assetConfig.emissionPerSecond;\\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\\n\\n    if (block.timestamp == lastUpdateTimestamp) {\\n      return oldIndex;\\n    }\\n\\n    uint256 newIndex = _getAssetIndex(\\n      oldIndex,\\n      emissionPerSecond,\\n      lastUpdateTimestamp,\\n      totalStaked\\n    );\\n\\n    if (newIndex == oldIndex) {\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n    } else {\\n      require(uint104(newIndex) == newIndex, 'Index overflow');\\n      //optimization: storing one after another saves one SSTORE\\n      assetConfig.index = uint104(newIndex);\\n      assetConfig.lastUpdateTimestamp = uint40(block.timestamp);\\n      emit AssetIndexUpdated(asset, newIndex);\\n    }\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the state of an user in a distribution\\n   * @param user The user's address\\n   * @param asset The address of the reference asset of the distribution\\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\\n   * @param totalStaked Total tokens staked in the distribution\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _updateUserAssetInternal(\\n    address user,\\n    address asset,\\n    uint256 stakedByUser,\\n    uint256 totalStaked\\n  ) internal returns (uint256) {\\n    AssetData storage assetData = assets[asset];\\n    uint256 userIndex = assetData.users[user];\\n    uint256 accruedRewards;\\n\\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\\n\\n    if (userIndex == newIndex) return accruedRewards;\\n\\n    if (stakedByUser != 0) {\\n      accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\\n    }\\n\\n    assetData.users[user] = newIndex;\\n    emit UserIndexUpdated(user, asset, newIndex);\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Used by \\\"frontend\\\" stake contracts to update the data of an user when claiming rewards from there\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards;\\n    uint256 length = stakes.length;\\n    for (uint256 i; i < length; ++i) {\\n      accruedRewards =\\n        accruedRewards +\\n        _updateUserAssetInternal(\\n          user,\\n          stakes[i].underlyingAsset,\\n          stakes[i].stakedByUser,\\n          stakes[i].totalStaked\\n        );\\n    }\\n\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Return the accrued rewards for an user over a list of distribution\\n   * @param user The address of the user\\n   * @param stakes List of structs of the user data related with his stake\\n   * @return The accrued rewards for the user until the moment\\n   **/\\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 accruedRewards;\\n    uint256 length = stakes.length;\\n    for (uint256 i; i < length; ++i) {\\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\\n      uint256 assetIndex = _getAssetIndex(\\n        assetConfig.index,\\n        assetConfig.emissionPerSecond,\\n        assetConfig.lastUpdateTimestamp,\\n        stakes[i].totalStaked\\n      );\\n\\n      accruedRewards =\\n        accruedRewards +\\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user]);\\n    }\\n    return accruedRewards;\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param principalUserBalance Amount staked by the user on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 principalUserBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex\\n  ) internal pure returns (uint256) {\\n    return (principalUserBalance * (reserveIndex - userIndex)) / 10**uint256(_PRECISION);\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param currentIndex Current index of the distribution\\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\\n   * @param lastUpdateTimestamp Last moment this distribution was updated\\n   * @param totalBalance of tokens considered for the distribution\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    uint256 currentIndex,\\n    uint256 emissionPerSecond,\\n    uint128 lastUpdateTimestamp,\\n    uint256 totalBalance\\n  ) internal view returns (uint256) {\\n    uint256 distributionEnd = _distributionEnd;\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalBalance == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= distributionEnd\\n    ) {\\n      return currentIndex;\\n    }\\n\\n    uint256 currentTimestamp = block.timestamp > distributionEnd\\n      ? distributionEnd\\n      : block.timestamp;\\n    uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\\n    return\\n      ((emissionPerSecond * timeDelta * (10**uint256(_PRECISION))) / totalBalance) + currentIndex;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Sturdy Governance\\n * @author Sturdy, inspiration from Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event IncentiveControllerUpdated(address indexed newAddress);\\n  event IncentiveTokenUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external payable;\\n\\n  function setAddress(bytes32 id, address newAddress) external payable;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external payable;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external payable;\\n\\n  function getIncentiveController() external view returns (address);\\n\\n  function setIncentiveControllerImpl(address incentiveController) external payable;\\n\\n  function getIncentiveToken() external view returns (address);\\n\\n  function setIncentiveTokenImpl(address incentiveToken) external payable;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external payable;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external payable;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external payable;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external payable;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external payable;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableYieldDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nstruct UserData {\\n  uint256 index;\\n  uint256 unclaimedRewards;\\n}\\n\\nstruct AssetData {\\n  uint256 index;\\n  uint256 lastAvailableRewards;\\n  address rewardToken; // The address of reward token\\n  address yieldAddress; // The address of vault\\n  mapping(address => UserData) users;\\n}\\n\\nstruct AggregatedRewardsData {\\n  address asset;\\n  address rewardToken;\\n  uint256 balance;\\n}\\n\\ninterface IVariableYieldDistribution {\\n  function claimRewards(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (AggregatedRewardsData[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/vault/IncentiveVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {GeneralVault} from './GeneralVault.sol';\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {VariableYieldDistribution} from '../../incentives/VariableYieldDistribution.sol';\\n\\n/**\\n * @title GeneralVault\\n * @notice Basic feature of vault\\n * @author Sturdy\\n **/\\n\\nabstract contract IncentiveVault is GeneralVault {\\n  using SafeERC20 for IERC20;\\n\\n  event SetIncentiveRatio(uint256 ratio);\\n\\n  /**\\n   * @dev Get the incentive token address supported on this vault\\n   */\\n  function getIncentiveToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Get current total incentive amount\\n   */\\n  function getCurrentTotalIncentiveAmount() external view virtual returns (uint256);\\n\\n  /**\\n   * @dev Get Incentive Ratio\\n   */\\n  function getIncentiveRatio() external view virtual returns (uint256);\\n\\n  /**\\n   * @dev Set Incentive Ratio\\n   */\\n  function setIncentiveRatio(uint256 _ratio) external virtual;\\n\\n  /**\\n   * @dev Get AToken address for the vault\\n   */\\n  function _getAToken() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Claim all rewards and send some to YieldDistributor\\n   */\\n  function _clearRewards() internal virtual;\\n\\n  /**\\n   * @dev Send incentive to YieldDistribution\\n   */\\n  function _sendIncentive(uint256 amount) internal {\\n    address asset = _getAToken();\\n    address incentiveToken = getIncentiveToken();\\n\\n    // transfer to YieldDistributor\\n    address yieldDistributor = _addressesProvider.getAddress('VR_YIELD_DISTRIBUTOR');\\n    IERC20(incentiveToken).safeTransfer(yieldDistributor, amount);\\n\\n    // notify to YieldDistributor so that it updates asset index\\n    VariableYieldDistribution(yieldDistributor).receivedRewards(asset, incentiveToken, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Sturdy, inspiration from Aave\\n * @notice Defines the error messages emitted by the different contracts of the Sturdy protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string internal constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string internal constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string internal constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string internal constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string internal constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string internal constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string internal constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string internal constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string internal constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string internal constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string internal constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string internal constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string internal constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string internal constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string internal constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string internal constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string internal constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string internal constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string internal constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string internal constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string internal constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string internal constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string internal constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string internal constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string internal constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string internal constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string internal constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string internal constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string internal constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string internal constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string internal constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string internal constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string internal constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string internal constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string internal constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string internal constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string internal constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string internal constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string internal constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string internal constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string internal constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string internal constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string internal constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string internal constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string internal constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string internal constant MATH_ADDITION_OVERFLOW = '49';\\n  string internal constant MATH_DIVISION_BY_ZERO = '50';\\n  string internal constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string internal constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string internal constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string internal constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string internal constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string internal constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string internal constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string internal constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string internal constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string internal constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string internal constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string internal constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string internal constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string internal constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string internal constant RC_INVALID_LTV = '67';\\n  string internal constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string internal constant RC_INVALID_LIQ_BONUS = '69';\\n  string internal constant RC_INVALID_DECIMALS = '70';\\n  string internal constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string internal constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string internal constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string internal constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string internal constant UL_INVALID_INDEX = '77';\\n  string internal constant LP_NOT_CONTRACT = '78';\\n  string internal constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string internal constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string internal constant VT_COLLATERAL_DEPOSIT_REQUIRE_ETH = '81'; //Only accept ETH for collateral deposit\\n  string internal constant VT_COLLATERAL_DEPOSIT_INVALID = '82'; //Collateral deposit failed\\n  string internal constant VT_LIQUIDITY_DEPOSIT_INVALID = '83'; //Only accept USDC, USDT, DAI for liquidity deposit\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID = '84'; //Collateral withdraw failed\\n  string internal constant VT_COLLATERAL_WITHDRAW_INVALID_AMOUNT = '85'; //Collateral withdraw has not enough amount\\n  string internal constant VT_CONVERT_ASSET_BY_CURVE_INVALID = '86'; //Convert asset by curve invalid\\n  string internal constant VT_PROCESS_YIELD_INVALID = '87'; //Processing yield is invalid\\n  string internal constant VT_TREASURY_INVALID = '88'; //Treasury is invalid\\n  string internal constant LP_ATOKEN_INIT_INVALID = '89'; //aToken invalid init\\n  string internal constant VT_FEE_TOO_BIG = '90'; //Fee is too big\\n  string internal constant VT_COLLATERAL_DEPOSIT_VAULT_UNAVAILABLE = '91';\\n  string internal constant LP_LIQUIDATION_CONVERT_FAILED = '92';\\n  string internal constant VT_DEPLOY_FAILED = '93'; // Vault deploy failed\\n  string internal constant VT_INVALID_CONFIGURATION = '94'; // Invalid vault configuration\\n  string internal constant VL_OVERFLOW_MAX_RESERVE_CAPACITY = '95'; // overflow max capacity of reserve\\n  string internal constant VT_WITHDRAW_AMOUNT_MISMATCH = '96'; // not performed withdraw 100%\\n  string internal constant VT_SWAP_MISMATCH_RETURNED_AMOUNT = '97'; //Returned amount is not enough\\n  string internal constant CALLER_NOT_YIELD_PROCESSOR = '98'; // 'The caller must be the pool admin'\\n  string internal constant VT_EXTRA_REWARDS_INDEX_INVALID = '99'; // Invalid extraRewards index\\n  string internal constant VT_SWAP_PATH_LENGTH_INVALID = '100'; // Invalid token or fee length\\n  string internal constant VT_SWAP_PATH_TOKEN_INVALID = '101'; // Invalid token information\\n  string internal constant CLAIMER_UNAUTHORIZED = '102'; // 'The claimer is not authorized'\\n  string internal constant YD_INVALID_CONFIGURATION = '103'; // 'The yield distribution's invalid configuration'\\n  string internal constant CALLER_NOT_EMISSION_MANAGER = '104'; // 'The caller must be emission manager'\\n  string internal constant CALLER_NOT_INCENTIVE_CONTROLLER = '105'; // 'The caller must be incentive controller'\\n  string internal constant YD_VR_ASSET_ALREADY_IN_USE = '106'; // Vault is already registered\\n  string internal constant YD_VR_INVALID_VAULT = '107'; // Invalid vault is used for an asset\\n  string internal constant YD_VR_INVALID_REWARDS_AMOUNT = '108'; // Rewards amount should be bigger than before\\n  string internal constant YD_VR_REWARD_TOKEN_NOT_VALID = '109'; // The reward token must be same with configured address\\n  string internal constant YD_VR_ASSET_NOT_REGISTERED = '110';\\n  string internal constant YD_VR_CALLER_NOT_VAULT = '111'; // The caller must be same with configured vault address\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISturdyDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface ISturdyDistributionManager {\\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n  event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param distributionEnd The end date timestamp\\n   **/\\n  function setDistributionEnd(uint256 distributionEnd) external payable;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @return The end of the distribution\\n   **/\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  /**\\n   * @dev for backwards compatibility with the previous DistributionManager used\\n   * @return The end of the distribution\\n   **/\\n  function DISTRIBUTION_END() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/vault/GeneralVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {VersionedInitializable} from '../../protocol/libraries/sturdy-upgradeability/VersionedInitializable.sol';\\nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol';\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IERC20Detailed} from '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\n\\n/**\\n * @title GeneralVault\\n * @notice Basic feature of vault\\n * @author Sturdy\\n **/\\n\\nabstract contract GeneralVault is VersionedInitializable {\\n  using PercentageMath for uint256;\\n\\n  event ProcessYield(address indexed collateralAsset, uint256 yieldAmount);\\n  event DepositCollateral(address indexed collateralAsset, address indexed from, uint256 amount);\\n  event WithdrawCollateral(address indexed collateralAsset, address indexed to, uint256 amount);\\n  event SetTreasuryInfo(address indexed treasuryAddress, uint256 fee);\\n\\n  modifier onlyAdmin() {\\n    require(_addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyYieldProcessor() {\\n    require(\\n      _addressesProvider.getAddress('YIELD_PROCESSOR') == msg.sender,\\n      Errors.CALLER_NOT_YIELD_PROCESSOR\\n    );\\n    _;\\n  }\\n\\n  struct AssetYield {\\n    address asset;\\n    uint256 amount;\\n  }\\n\\n  ILendingPoolAddressesProvider internal _addressesProvider;\\n\\n  // vault fee 20%\\n  uint256 internal _vaultFee;\\n  address internal _treasuryAddress;\\n\\n  uint256 private constant VAULT_REVISION = 0x1;\\n  address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Function is invoked by the proxy contract when the Vault contract is deployed.\\n   * @param _provider The address of the provider\\n   **/\\n  function initialize(ILendingPoolAddressesProvider _provider) external initializer {\\n    _addressesProvider = _provider;\\n  }\\n\\n  function getRevision() internal pure override returns (uint256) {\\n    return VAULT_REVISION;\\n  }\\n\\n  /**\\n   * @dev Deposits an `amount` of asset as collateral to borrow other asset.\\n   * @param _asset The asset address for collateral\\n   *  _asset = 0x0000000000000000000000000000000000000000 means to use ETH as collateral\\n   * @param _amount The deposit amount\\n   */\\n  function depositCollateral(address _asset, uint256 _amount) external payable virtual {\\n    if (_asset != address(0)) {\\n      // asset = ERC20\\n      require(msg.value == 0, Errors.VT_COLLATERAL_DEPOSIT_INVALID);\\n    } else {\\n      // asset = ETH\\n      require(msg.value == _amount, Errors.VT_COLLATERAL_DEPOSIT_REQUIRE_ETH);\\n    }\\n    // Deposit asset to vault and receive stAsset\\n    // Ex: if user deposit 100ETH, this will deposit 100ETH to Lido and receive 100stETH\\n    (address _stAsset, uint256 _stAssetAmount) = _depositToYieldPool(_asset, _amount);\\n\\n    // Deposit stAsset to lendingPool, then user will get aToken of stAsset\\n    ILendingPool(_addressesProvider.getLendingPool()).deposit(\\n      _stAsset,\\n      _stAssetAmount,\\n      msg.sender,\\n      0\\n    );\\n\\n    emit DepositCollateral(_asset, msg.sender, _amount);\\n  }\\n\\n  /**\\n   * @dev Withdraw an `amount` of asset used as collateral to user.\\n   * @param _asset The asset address for collateral\\n   *  _asset = 0x0000000000000000000000000000000000000000 means to use ETH as collateral\\n   * @param _amount The amount to be withdrawn\\n   * @param _slippage The slippage of the withdrawal amount. 1% = 100\\n   * @param _to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   */\\n  function withdrawCollateral(\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    address _to\\n  ) external virtual {\\n    // Before withdraw from lending pool, get the stAsset address and withdrawal amount\\n    // Ex: In Lido vault, it will return stETH address and same amount\\n    (address _stAsset, uint256 _stAssetAmount) = _getWithdrawalAmount(_asset, _amount);\\n\\n    // withdraw from lendingPool, it will convert user's aToken to stAsset\\n    uint256 _amountToWithdraw = ILendingPool(_addressesProvider.getLendingPool()).withdrawFrom(\\n      _stAsset,\\n      _stAssetAmount,\\n      msg.sender,\\n      address(this)\\n    );\\n\\n    // Withdraw from vault, it will convert stAsset to asset and send to user\\n    // Ex: In Lido vault, it will return ETH or stETH to user\\n    uint256 withdrawAmount = _withdrawFromYieldPool(_asset, _amountToWithdraw, _to);\\n\\n    if (_amount == type(uint256).max) {\\n      uint256 decimal;\\n      if (_asset == address(0)) {\\n        decimal = 18;\\n      } else {\\n        decimal = IERC20Detailed(_asset).decimals();\\n      }\\n\\n      _amount = (_amountToWithdraw * this.pricePerShare()) / 10**decimal;\\n    }\\n    require(\\n      withdrawAmount >= _amount.percentMul(PercentageMath.PERCENTAGE_FACTOR - _slippage),\\n      Errors.VT_WITHDRAW_AMOUNT_MISMATCH\\n    );\\n\\n    emit WithdrawCollateral(_asset, _to, _amount);\\n  }\\n\\n  /**\\n   * @dev Withdraw an `amount` of asset used as collateral to user on liquidation.\\n   *  _asset = 0x0000000000000000000000000000000000000000 means to use ETH as collateral\\n   * @param _amount The amount to be withdrawn\\n   */\\n  function withdrawOnLiquidation(address, uint256 _amount) external virtual returns (uint256) {\\n    return _amount;\\n  }\\n\\n  /**\\n   * @dev Get yield based on strategy and re-deposit\\n   */\\n  function processYield() external virtual;\\n\\n  /**\\n   * @dev Get price per share based on yield strategy\\n   */\\n  function pricePerShare() external view virtual returns (uint256);\\n\\n  /**\\n   * @dev Set treasury address and vault fee\\n   * @param _treasury The treasury address\\n   * @param _fee The vault fee which has more two decimals, ex: 100% = 100_00\\n   */\\n  function setTreasuryInfo(address _treasury, uint256 _fee) external payable onlyAdmin {\\n    require(_treasury != address(0), Errors.VT_TREASURY_INVALID);\\n    require(_fee <= 30_00, Errors.VT_FEE_TOO_BIG);\\n    _treasuryAddress = _treasury;\\n    _vaultFee = _fee;\\n\\n    emit SetTreasuryInfo(_treasury, _fee);\\n  }\\n\\n  /**\\n   * @dev Get yield based on strategy and re-deposit\\n   */\\n  function _getYield(address _stAsset) internal returns (uint256) {\\n    uint256 yieldStAsset = _getYieldAmount(_stAsset);\\n    require(yieldStAsset != 0, Errors.VT_PROCESS_YIELD_INVALID);\\n\\n    ILendingPool(_addressesProvider.getLendingPool()).getYield(_stAsset, yieldStAsset);\\n    return yieldStAsset;\\n  }\\n\\n  /**\\n   * @dev Get yield amount based on strategy\\n   */\\n  function _getYieldAmount(address _stAsset) internal view returns (uint256) {\\n    (uint256 stAssetBalance, uint256 aTokenBalance) = ILendingPool(\\n      _addressesProvider.getLendingPool()\\n    ).getTotalBalanceOfAssetPair(_stAsset);\\n\\n    // when deposit for collateral, stAssetBalance = aTokenBalance\\n    // But stAssetBalance should increase overtime, so vault can grab yield from lendingPool.\\n    // yield = stAssetBalance - aTokenBalance\\n    if (stAssetBalance > aTokenBalance) return stAssetBalance - aTokenBalance;\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Deposit to yield pool based on strategy and receive stAsset\\n   */\\n  function _depositToYieldPool(address _asset, uint256 _amount)\\n    internal\\n    virtual\\n    returns (address, uint256);\\n\\n  /**\\n   * @dev Withdraw from yield pool based on strategy with stAsset and deliver asset\\n   */\\n  function _withdrawFromYieldPool(\\n    address _asset,\\n    uint256 _amount,\\n    address _to\\n  ) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Get Withdrawal amount of stAsset based on strategy\\n   */\\n  function _getWithdrawalAmount(address _asset, uint256 _amount)\\n    internal\\n    view\\n    virtual\\n    returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositYield(address asset, uint256 amount) external;\\n\\n  function getYield(address asset, uint256 amount) external;\\n\\n  function getTotalBalanceOfAssetPair(address asset) external view returns (uint256, uint256);\\n\\n  function getBorrowingAssetAndVolumes()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256[] memory,\\n      address[] memory,\\n      uint256\\n    );\\n\\n  function registerVault(address _vaultAddress) external payable;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  function withdrawFrom(\\n    address asset,\\n    uint256 amount,\\n    address from,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address yieldAddress,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external payable;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external\\n    payable;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external payable;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external payable;\\n\\n  function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title PercentageMath library\\n * @author Sturdy, inspiration from Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    uint256 halfPercentage = percentage / 2;\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //address of the yield contract\\n    address yieldAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"yieldAddress\",\"type\":\"address\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedRewardsAmount\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAvailableRewards\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct AggregatedRewardsData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receivedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldAddress\",\"type\":\"address\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "VariableYieldDistribution", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000048cc0719e3bf9561d861cb98e863fda0ceb07dbc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}