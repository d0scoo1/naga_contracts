{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title IERC1363Spender Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support approveAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://eips.ethereum.org/EIPS/eip-1363\r\n */\r\ninterface IERC1363Spender {\r\n    /**\r\n     * @notice Handle the approval of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after an `approve`. This function MAY throw to revert and reject the\r\n     * approval. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param sender address The address which called `approveAndCall` function\r\n     * @param amount uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\r\n     */\r\n    function onApprovalReceived(\r\n        address sender,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title IERC1363Receiver Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\r\n *  from ERC1363 token contracts as defined in\r\n *  https://eips.ethereum.org/EIPS/eip-1363\r\n */\r\ninterface IERC1363Receiver {\r\n    /**\r\n     * @notice Handle the receipt of ERC1363 tokens\r\n     * @dev Any ERC1363 smart contract calls this function on the recipient\r\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\r\n     * transfer. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Note: the token contract address is always the message sender.\r\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param sender address The address which are token transferred from\r\n     * @param amount uint256 The amount of tokens transferred\r\n     * @param data bytes Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\r\n     */\r\n    function onTransferReceived(\r\n        address operator,\r\n        address sender,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165Checker.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\r\n        if (result.length < 32) return false;\r\n        return success && abi.decode(result, (bool));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title IERC1363 Interface\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Interface for a Payable Token contract as defined in\r\n *  https://eips.ethereum.org/EIPS/eip-1363\r\n */\r\ninterface IERC1363 is IERC20, IERC165 {\r\n    /**\r\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param recipient address The address which you want to transfer to\r\n     * @param amount uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\r\n     * @param recipient address The address which you want to transfer to\r\n     * @param amount uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\r\n     * @return true unless throwing\r\n     */\r\n    function transferAndCall(\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param sender address The address which you want to send tokens from\r\n     * @param recipient address The address which you want to transfer to\r\n     * @param amount uint256 The amount of tokens to be transferred\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\r\n     * @param sender address The address which you want to send tokens from\r\n     * @param recipient address The address which you want to transfer to\r\n     * @param amount uint256 The amount of tokens to be transferred\r\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\r\n     * @return true unless throwing\r\n     */\r\n    function transferFromAndCall(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender address The address which will spend the funds\r\n     * @param amount uint256 The amount of tokens to be spent\r\n     */\r\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     * and then call `onApprovalReceived` on spender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender address The address which will spend the funds\r\n     * @param amount uint256 The amount of tokens to be spent\r\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\r\n     */\r\n    function approveAndCall(\r\n        address spender,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: erc-payable-token/contracts/payment/ERC1363Payable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC1363Payable\r\n * @author Vittorio Minacori (https://github.com/vittominacori)\r\n * @dev Implementation proposal of a contract that wants to accept ERC1363 payments\r\n */\r\ncontract ERC1363Payable is IERC1363Receiver, IERC1363Spender, ERC165, Context {\r\n    using ERC165Checker for address;\r\n\r\n    /**\r\n     * @dev Emitted when `amount` tokens are moved from one account (`sender`) to\r\n     * this by operator (`operator`) using {transferAndCall} or {transferFromAndCall}.\r\n     */\r\n    event TokensReceived(address indexed operator, address indexed sender, uint256 amount, bytes data);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of this for a `sender` is set by\r\n     * a call to {approveAndCall}. `amount` is the new allowance.\r\n     */\r\n    event TokensApproved(address indexed sender, uint256 amount, bytes data);\r\n\r\n    // The ERC1363 token accepted\r\n    IERC1363 private _acceptedToken;\r\n\r\n    /**\r\n     * @param acceptedToken_ Address of the token being accepted\r\n     */\r\n    constructor(IERC1363 acceptedToken_) {\r\n        require(address(acceptedToken_) != address(0), \"ERC1363Payable: acceptedToken is zero address\");\r\n        require(acceptedToken_.supportsInterface(type(IERC1363).interfaceId));\r\n\r\n        _acceptedToken = acceptedToken_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1363Receiver).interfaceId ||\r\n            interfaceId == type(IERC1363Spender).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /*\r\n     * @dev Note: remember that the token contract address is always the message sender.\r\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param sender The address which are token transferred from\r\n     * @param amount The amount of tokens transferred\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function onTransferReceived(\r\n        address operator,\r\n        address sender,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public override returns (bytes4) {\r\n        require(_msgSender() == address(_acceptedToken), \"ERC1363Payable: acceptedToken is not message sender\");\r\n\r\n        emit TokensReceived(operator, sender, amount, data);\r\n\r\n        _transferReceived(operator, sender, amount, data);\r\n\r\n        return IERC1363Receiver(this).onTransferReceived.selector;\r\n    }\r\n\r\n    /*\r\n     * @dev Note: remember that the token contract address is always the message sender.\r\n     * @param sender The address which called `approveAndCall` function\r\n     * @param amount The amount of tokens to be spent\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function onApprovalReceived(\r\n        address sender,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public override returns (bytes4) {\r\n        require(_msgSender() == address(_acceptedToken), \"ERC1363Payable: acceptedToken is not message sender\");\r\n\r\n        emit TokensApproved(sender, amount, data);\r\n\r\n        _approvalReceived(sender, amount, data);\r\n\r\n        return IERC1363Spender(this).onApprovalReceived.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev The ERC1363 token accepted\r\n     */\r\n    function acceptedToken() public view returns (IERC1363) {\r\n        return _acceptedToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onTransferReceived`. Override this method to\r\n     * make your stuffs within your contract.\r\n     * @param operator The address which called `transferAndCall` or `transferFromAndCall` function\r\n     * @param sender The address which are token transferred from\r\n     * @param amount The amount of tokens transferred\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function _transferReceived(\r\n        address operator,\r\n        address sender,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        // optional override\r\n    }\r\n\r\n    /**\r\n     * @dev Called after validating a `onApprovalReceived`. Override this method to\r\n     * make your stuffs within your contract.\r\n     * @param sender The address which called `approveAndCall` function\r\n     * @param amount The amount of tokens to be spent\r\n     * @param data Additional data with no specified format\r\n     */\r\n    function _approvalReceived(\r\n        address sender,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        // optional override\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/ExenoTokenStaking.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Staking utilizing a payable token (ERC1363)\r\n * No tokens are burnt or minted, whereas staked tokens are stored in this contract\r\n * Interest payouts are done from the wallet account (thus prior allowance is needed)\r\n * Note: Multiple staking contracts can be deployed simultaneously\r\n */\r\ncontract ExenoTokenStaking is\r\n    Ownable,\r\n    Pausable,\r\n    ReentrancyGuard,\r\n    ERC1363Payable\r\n{\r\n    using SafeERC20 for IERC1363;\r\n\r\n    // The tokens being staked\r\n    IERC1363 public immutable token;\r\n\r\n    // Source of interest payouts\r\n    address public immutable wallet;\r\n\r\n    /**\r\n     * Interest rate per annum\r\n     * Expressed as 10**4, e.g. 1285 means 0.1285 or 12.85%\r\n     */\r\n    uint256 public annualizedInterestRate;\r\n\r\n    /**\r\n     * Rebase period, expressed in hours\r\n     * 24 means rebasing every day, 168 means rebasing every week, etc\r\n     */\r\n    uint256 public immutable rebasePeriodInHours;\r\n\r\n    // Mode of calculating start time for new stakes\r\n    StakeStartMode public stakeStartMode;\r\n\r\n    // Date when this staking contract is terminated\r\n    uint256 public endDate;\r\n\r\n    // The total amount of currently staked tokens\r\n    uint256 public totalTokensStaked;\r\n\r\n    // Available options for `stakeStartMode`\r\n    enum StakeStartMode {\r\n        IMMEDIATE,\r\n        NEAREST_FULL_HOUR,\r\n        NEAREST_MIDNIGHT,\r\n        NEAREST_1AM,\r\n        NEAREST_NOON,\r\n        NEAREST_1PM\r\n    }\r\n    \r\n    // Represents a single staking deposit\r\n    struct Stake {\r\n        address user;\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n    }\r\n\r\n    // Represents a stakeholder with active stakes\r\n    struct Stakeholder {\r\n        address user;\r\n        uint256 totalAmount;\r\n        Stake[] stakes;\r\n    }\r\n\r\n    // Represents a financial record for a single stake\r\n    struct Record {\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n        uint256 interest;\r\n        uint256 claimable;\r\n        uint256 nextRebaseClaimable;\r\n        uint256 nextRebaseTimestamp;\r\n    }\r\n\r\n    // Represents all records owned by a stakeholder\r\n    struct StakingStatus {\r\n        uint256 timestamp;\r\n        uint256 totalAmount;\r\n        Record[] records;\r\n    }\r\n\r\n    /**\r\n     * Contains all stakes done with this contract\r\n     * The stakes for each address are stored at an index which can be found using the `stakes` mapping\r\n     */\r\n    Stakeholder[] internal _stakeholders;\r\n\r\n    // Keeps track of the index for the stakers in the stakes array\r\n    mapping(address => uint256) internal _stakeMap;\r\n\r\n    // Triggered whenever someone stakes tokens\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n\r\n    // Triggered whenever someone unstakes tokens\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 payout\r\n    );\r\n\r\n    // Triggered when interest-rate is updated\r\n    event UpdateAnnualizedInterestRate(\r\n        uint256 previousRate,\r\n        uint256 currentRate\r\n    );\r\n\r\n    // Triggered when start-mode is updated\r\n    event UpdateStakeStartMode(\r\n        StakeStartMode previousMode,\r\n        StakeStartMode currentMode\r\n    );\r\n\r\n    // Triggered when end-date is updated\r\n    event ExtendEndDate(\r\n        uint256 previousEndDate,\r\n        uint256 currentEndDate\r\n    );\r\n\r\n    modifier validAddress(address a) {\r\n        require(a != address(0),\r\n            \"ExenoTokenStaking: address cannot be zero\");\r\n        require(a != address(this),\r\n            \"ExenoTokenStaking: invalid address\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC1363 _token,\r\n        uint256 _annualizedInterestRate,\r\n        uint256 _rebasePeriodInHours,\r\n        uint8 _stakeStartMode,\r\n        address _wallet,\r\n        uint256 _endDate\r\n    )\r\n        ERC1363Payable(_token)\r\n        validAddress(_wallet)\r\n    {\r\n        require(_annualizedInterestRate > 0,\r\n            \"ExenoTokenStaking: invalid annualized interest rate\");\r\n\r\n        require(_rebasePeriodInHours > 0,\r\n            \"ExenoTokenStaking: invalid rebase period\");\r\n\r\n        require(_stakeStartMode <= uint256(StakeStartMode.NEAREST_1PM),\r\n            \"ExenoTokenStaking: invalid stake start mode\");\r\n\r\n        require(_endDate > block.timestamp,\r\n            \"ExenoTokenStaking: end-date cannot be in the past\");\r\n\r\n        token = _token;\r\n        annualizedInterestRate = _annualizedInterestRate;\r\n        rebasePeriodInHours = _rebasePeriodInHours;\r\n        stakeStartMode = StakeStartMode(_stakeStartMode);\r\n        wallet = _wallet;\r\n        endDate = _endDate;\r\n        \r\n        // Index 0 indicates a non-existing stakeholder\r\n        _stakeholders.push();\r\n    }\r\n\r\n    /**\r\n     * @dev When tokens are sent to this contract with `transferAndCall` a new stake is created for the sender\r\n     * @param sender The address performing the action\r\n     * @param amount The amount of tokens transferred\r\n     */\r\n    function _transferReceived(address, address sender, uint256 amount, bytes memory)\r\n        internal override validAddress(sender)\r\n    {\r\n        _stake(sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a stakeholder to the `_stakeholders` array\r\n     * @param stakeholder The stakeholder to be added\r\n     */\r\n    function _addStakeholder(address stakeholder)\r\n        internal validAddress(stakeholder) returns(uint256)\r\n    {\r\n        // Push a empty item to make space for the new stakeholder\r\n        _stakeholders.push();\r\n        // Calculate the index of the last item in the array\r\n        uint256 userIndex = _stakeholders.length - 1;\r\n        // Assign the address to the new index\r\n        _stakeholders[userIndex].user = stakeholder;\r\n        // Add index to the map\r\n        _stakeMap[stakeholder] = userIndex;\r\n        return userIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new stake for a sender\r\n     * @param stakeholder Who is staking\r\n     * @param amount Amount of tokens to be staked\r\n     */\r\n    function _stake(address stakeholder, uint256 amount)\r\n        internal validAddress(stakeholder) whenNotPaused\r\n    {\r\n        require(amount > 0,\r\n            \"ExenoTokenStaking: amount cannot be zero\");\r\n\r\n        require(endDate > block.timestamp,\r\n            \"ExenoTokenStaking: end-date is expired\");\r\n\r\n        // Make sure tokens have been received\r\n        assert(_checkBalanceIntegrity(totalTokensStaked + amount));\r\n\r\n        // Mappings in Solidity creates all values, so we can just check the address\r\n        uint256 userIndex = _stakeMap[stakeholder];\r\n        \r\n        // Check if the stakeholder already has a staked index or if its the first time\r\n        if (userIndex == 0) {\r\n            // This stakeholder stakes for the first time\r\n            // We need to add him to the stakeHolders and also map it into the index of the stakes\r\n            // The index returned will be the index of the stakeholder in the _stakeholders array\r\n            userIndex = _addStakeholder(stakeholder);\r\n        }\r\n\r\n        // Use the index to push a new stake\r\n        _stakeholders[userIndex].stakes.push(\r\n            Stake(stakeholder, _calculateStartTimestamp(), amount)\r\n        );\r\n\r\n        // Track the total amount of staked tokens for the user\r\n        _stakeholders[userIndex].totalAmount += amount;\r\n\r\n        // Track the total balance of staked tokens for all users\r\n        totalTokensStaked += amount;\r\n\r\n        // Emit an event that the stake has occurred\r\n        emit Staked(stakeholder, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstaking logic\r\n     * @param userIndex Who is unstaking\r\n     * @param stakeIndex Index of the stake is the users stake counter, starting at 0 for the first stake\r\n     * @param amount Amount of tokens to be unstaked from stakeIndex\r\n     * @return Amount of tokens to be paid as interest payout\r\n     */\r\n    function _unstake(uint256 userIndex, uint256 stakeIndex, uint256 amount)\r\n        internal returns(uint256)\r\n    {\r\n        // Calculate duration\r\n        (,uint256 recentRebaseDuration,,) = _calculateDuration(\r\n            _stakeholders[userIndex].stakes[stakeIndex].timestamp);\r\n        \r\n        // Calculate payout\r\n        uint256 payout = _calculatePayout(recentRebaseDuration, amount);\r\n        \r\n        // Reduce the stake by subtracting the unstaked amount\r\n        _stakeholders[userIndex].stakes[stakeIndex].amount -= amount;\r\n\r\n        // Track the total amount of staked tokens for the user\r\n        _stakeholders[userIndex].totalAmount -= amount;\r\n\r\n        // Track the balance of staked tokens for all users\r\n        totalTokensStaked -= amount;\r\n        \r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Purging logic for the stakes array\r\n     * It should be applied after `_unstake` is called\r\n     * @param userIndex User whose stakes are to be purged\r\n     */\r\n    function _purge(uint256 userIndex)\r\n        internal\r\n    {\r\n        Stake[] storage stakes = _stakeholders[userIndex].stakes;\r\n\r\n        uint256 i; //index of the current stake in the loop\r\n        uint256 j; //index of the nearest non-zero stake\r\n\r\n        // Loop through all stakes\r\n        while (i < stakes.length && j < stakes.length) {\r\n            // Amount equal zero indicates that a stake can be revmoved\r\n            if (stakes[i].amount == 0) {\r\n                // Find the nearest non-zero stake\r\n                if (j == 0) j = i + 1;\r\n                while (j < stakes.length && stakes[j].amount == 0) {\r\n                    j++;\r\n                }\r\n                // If it's found, use it to replace the current stake and then delete it\r\n                if (j < stakes.length) {\r\n                    stakes[i] = stakes[j];\r\n                    delete stakes[j];\r\n                }\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        // If stakes have been shifted, permanently remove the deleted ones\r\n        if (j > i) {\r\n            // At this stage all deleted stakes are at the end of the array\r\n            for (uint256 k = 0; k < j - i; k++) {\r\n                assert(stakes[stakes.length - 1].amount == 0);\r\n                stakes.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkBalanceIntegrity(uint256 expectedBalance)\r\n        internal view returns(bool)\r\n    {\r\n        return token.balanceOf(address(this)) >= expectedBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates start time for a new stake\r\n     * @return startTimestamp\r\n     */\r\n    function _calculateStartTimestamp()\r\n        internal view virtual returns(uint256)\r\n    {\r\n        if (stakeStartMode == StakeStartMode.IMMEDIATE) {\r\n            return block.timestamp;\r\n        }\r\n        uint256 startTimestamp = block.timestamp;\r\n        if (stakeStartMode == StakeStartMode.NEAREST_FULL_HOUR) {\r\n            // Reverse time to the top of the hour and then add 1 hour\r\n            startTimestamp = startTimestamp / 1 hours * 1 hours + 1 hours;\r\n        } else if (stakeStartMode == StakeStartMode.NEAREST_MIDNIGHT) {\r\n            // Reverse time to 00:00 UTC and then add 1 day\r\n            startTimestamp = startTimestamp / 1 days * 1 days + 1 days;\r\n        } else if (stakeStartMode == StakeStartMode.NEAREST_1AM) {\r\n            // Reverse time to 00:00 UTC and then add 1 hour\r\n            startTimestamp = startTimestamp / 1 days * 1 days + 1 hours;\r\n        } else if (stakeStartMode == StakeStartMode.NEAREST_NOON) {\r\n            // Reverse time to 00:00 UTC and then add 12 hours\r\n            startTimestamp = startTimestamp / 1 days * 1 days + 12 hours;\r\n        } else if (stakeStartMode == StakeStartMode.NEAREST_1PM) {\r\n            // Reverse time to 00:00 UTC and then add 13 hours\r\n            startTimestamp = startTimestamp / 1 days * 1 days + 13 hours;\r\n        }\r\n        // Shift by 1 day if the new start is earlier than the current time\r\n        if (startTimestamp < block.timestamp) {\r\n            startTimestamp += 1 days;\r\n            assert(startTimestamp >= block.timestamp);\r\n        }\r\n        return startTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates durations for different scenarios\r\n     * @param startTimestamp When staking started\r\n     * @return actualDuration Actual duration, expressed in hours\r\n     * @return recentRebaseDuration Recent rebase duration, expressed in hours\r\n     * @return nextRebaseDuration Next rebase duration, expressed in hours\r\n     * @return nextRebaseTimestamp Next rebase timestamp expressed in hours\r\n     */\r\n    function _calculateDuration(uint256 startTimestamp)\r\n        internal view virtual returns(\r\n            uint256 actualDuration,\r\n            uint256 recentRebaseDuration,\r\n            uint256 nextRebaseDuration,\r\n            uint256 nextRebaseTimestamp\r\n        )\r\n    {\r\n        // We assume the stake is going to be terminated now\r\n        uint256 endTimestamp = block.timestamp;\r\n        \r\n        // In case endDate has already happened, allow endTimestamp to extend one extra rebase period\r\n        if (endDate < endTimestamp) {\r\n            endTimestamp = Math.min(endTimestamp, endDate + rebasePeriodInHours * 1 hours);\r\n        }\r\n\r\n        // Actual duration of the stake, expressed in hours\r\n        actualDuration = 0;\r\n        \r\n        // When the stake is already started, actualDuration becomes non-zero\r\n        if (startTimestamp < endTimestamp) {\r\n            actualDuration = (endTimestamp - startTimestamp) / 1 hours;\r\n        }\r\n\r\n        // Duration of the most recent rebase, expressed in hours\r\n        recentRebaseDuration = (actualDuration / rebasePeriodInHours) * rebasePeriodInHours;\r\n\r\n        // If no additional interest can be accrued, reduce actualDuration to recentRebaseDuration\r\n        if (endTimestamp < block.timestamp) {\r\n            actualDuration = recentRebaseDuration;\r\n        }\r\n\r\n        // Duration of the next rebase, expressed in hours\r\n        nextRebaseDuration = 0;\r\n        nextRebaseTimestamp = 0;\r\n        \r\n        // If this in not the last rebase, set nextRebaseDuration by extending recentRebaseDuration by one rebase period\r\n        if (startTimestamp + recentRebaseDuration * 1 hours < endDate) {\r\n            nextRebaseDuration = recentRebaseDuration + rebasePeriodInHours;\r\n            nextRebaseTimestamp = startTimestamp + nextRebaseDuration * 1 hours;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates interest payout\r\n     * @param duration Duration expressed in hours\r\n     * @param amount Amount of tokens staked\r\n     * @return Actual or potential payout\r\n     */\r\n    function _calculatePayout(uint256 duration, uint256 amount)\r\n        internal view virtual returns(uint256)\r\n    {\r\n        return duration * amount * annualizedInterestRate / 365 / 24 / 10**4;\r\n    }\r\n\r\n    function pause()\r\n        external onlyOwner\r\n    {\r\n        _pause();\r\n    }\r\n\r\n    function unpause()\r\n        external onlyOwner\r\n    {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new annualized-interest-rate\r\n     * @param newAnnualizedInterestRate New value for the rate\r\n     */\r\n    function updateAnnualizedInterestRate(uint256 newAnnualizedInterestRate)\r\n        external onlyOwner\r\n    {\r\n        require(newAnnualizedInterestRate > 0,\r\n            \"ExenoTokenStaking: invalid annualized interest rate\");\r\n        \r\n        emit UpdateAnnualizedInterestRate(annualizedInterestRate, newAnnualizedInterestRate);\r\n        annualizedInterestRate = newAnnualizedInterestRate;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new stake-start-mode\r\n     * @param newStakeStartValue New value for the mode\r\n     */\r\n    function updateStakeStartMode(uint8 newStakeStartValue)\r\n        external onlyOwner\r\n    {\r\n        require(newStakeStartValue <= uint256(StakeStartMode.NEAREST_1PM),\r\n            \"ExenoTokenStaking: invalid stake start mode\");\r\n        \r\n        StakeStartMode newStakeStartMode = StakeStartMode(newStakeStartValue);\r\n        emit UpdateStakeStartMode(stakeStartMode, newStakeStartMode);\r\n        stakeStartMode = newStakeStartMode;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new end-date under the following conditions:\r\n     * (1) the existing end-date has not expired yet\r\n     * (2) the new end-date is later then existing end-date\r\n     * @param newEndDate New value for the end-date\r\n     */\r\n    function extendEndDate(uint256 newEndDate)\r\n        external onlyOwner\r\n    {\r\n        require(newEndDate > block.timestamp,\r\n            \"ExenoTokenStaking: new end-date cannot be in the past\");\r\n\r\n        require(newEndDate > endDate,\r\n            \"ExenoTokenStaking: new end-date cannot be prior to existing end-date\");\r\n        \r\n        require(endDate > block.timestamp,\r\n            \"ExenoTokenStaking: cannot set a new end-date as existing end-date is expired\");\r\n        \r\n        emit ExtendEndDate(endDate, newEndDate);\r\n        endDate = newEndDate;\r\n    }\r\n\r\n    /**\r\n     * @notice Generates a staking status report for a given stakeholder\r\n     * @param stakeholder For whom is the report\r\n     * @return StakingStatus report\r\n     */\r\n    function getStakingStatus(address stakeholder)\r\n        external view validAddress(stakeholder) returns(StakingStatus memory)\r\n    {\r\n        Stake[] memory stakes = _stakeholders[_stakeMap[stakeholder]].stakes;\r\n        Record[] memory records = new Record[](stakes.length);\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            uint256 timestamp = stakes[i].timestamp;\r\n            records[i].timestamp = timestamp;\r\n            (\r\n                uint256 actualDuration,\r\n                uint256 recentRebaseDuration,\r\n                uint256 nextRebaseDuration,\r\n                uint256 nextRebaseTimestamp\r\n            ) = _calculateDuration(timestamp);\r\n            uint256 amount = stakes[i].amount;\r\n            records[i].amount = amount;\r\n            records[i].interest = _calculatePayout(actualDuration, amount);\r\n            records[i].claimable = _calculatePayout(recentRebaseDuration, amount);\r\n            records[i].nextRebaseClaimable = _calculatePayout(nextRebaseDuration, amount);\r\n            records[i].nextRebaseTimestamp = nextRebaseTimestamp;\r\n        }\r\n        StakingStatus memory status = StakingStatus(block.timestamp,\r\n            _stakeholders[_stakeMap[stakeholder]].totalAmount, records);\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of stakeholders\r\n     * @return Number of stakeholders\r\n     */\r\n    function getNumberOfStakeholders()\r\n        external view returns(uint256)\r\n    {\r\n        return _stakeholders.length - 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Shows the current amount of tokens available for payouts\r\n     * @return Owner's balance and this contract's allowance\r\n     */\r\n    function checkAvailableFunds()\r\n        external view returns(uint256, uint256)\r\n    {\r\n        return (token.balanceOf(wallet), token.allowance(wallet, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws stake from a given staking index and makes appropriate transfers\r\n     * @param amount Amount to unstake, zero indicates maximum available\r\n     * @param stakeIndex Index of the stake is the users stake counter, starting at 0 for the first stake\r\n     * @param skipPayout Whether to give up interest payout (do not use it unless you have to)\r\n     */\r\n    function unstake(uint256 amount, uint256 stakeIndex, bool skipPayout)\r\n        external nonReentrant\r\n    {\r\n        address stakeholder = msg.sender;\r\n        uint256 userIndex = _stakeMap[stakeholder];\r\n\r\n        Stake[] memory stakes = _stakeholders[userIndex].stakes;\r\n\r\n        require(stakes.length > 0,\r\n            \"ExenoTokenStaking: this account has never made any staking\");\r\n\r\n        require(stakeIndex < stakes.length,\r\n            \"ExenoTokenStaking: provided index is out of range\");\r\n\r\n        Stake memory currentStake = stakes[stakeIndex];\r\n\r\n        if (amount > 0) {\r\n            require(currentStake.amount >= amount,\r\n                \"ExenoTokenStaking: there is not enough stake on the provided index for the requested amount\");\r\n        } else {\r\n            // Amount equal to zero indicates that the entire index needs to be unstaked\r\n            require(currentStake.amount > 0,\r\n                \"ExenoTokenStaking: there is not enough stake on the provided index for the requested amount\");\r\n            amount = currentStake.amount;\r\n        }\r\n\r\n        // Unstake and calculate the payout\r\n        uint256 payout = _unstake(userIndex, stakeIndex, amount);\r\n        \r\n        // Reduce payout to zero in case we don't need it\r\n        if (skipPayout) payout = 0;\r\n        \r\n        require(token.balanceOf(wallet) >= payout,\r\n            \"ExenoTokenStaking: not enough balance for payout\");\r\n\r\n        require(token.allowance(wallet, address(this)) >= payout,\r\n            \"ExenoTokenStaking: not enough allowance for payout\");\r\n\r\n        assert(_checkBalanceIntegrity(totalTokensStaked));\r\n\r\n        // Apply purging right after unstaking to eliminate empty stakes\r\n        _purge(userIndex);\r\n\r\n        // Return staked tokens to the stakeholder\r\n        token.safeTransfer(stakeholder, amount);\r\n\r\n        // Send payout to the stakeholder\r\n        if (payout > 0) {\r\n            token.safeTransferFrom(wallet, stakeholder, payout);\r\n        }\r\n        \r\n        assert(_checkBalanceIntegrity(totalTokensStaked));\r\n\r\n        // Emit an event that unstaking has occurred\r\n        emit Unstaked(stakeholder, amount, payout);\r\n    }\r\n    \r\n    /**\r\n     * @notice Withdraws stake by applying the FIFO rule - no staking index needs to be provided\r\n     * @param amount Amount to unstake, zero indicates maximum available\r\n     */\r\n    function unstakeFifo(uint256 amount)\r\n        external nonReentrant\r\n    {\r\n        address stakeholder = msg.sender;\r\n        uint256 userIndex = _stakeMap[stakeholder];\r\n\r\n        Stake[] memory stakes = _stakeholders[userIndex].stakes;\r\n\r\n        require(stakes.length > 0,\r\n            \"ExenoTokenStaking: this account has never made any staking\");\r\n\r\n        // Amount equal to zero indicates that all indexes need to be unstaked\r\n        if (amount == 0) {\r\n            amount = _stakeholders[userIndex].totalAmount;\r\n            require(amount > 0,\r\n                \"ExenoTokenStaking: not enough stake on all indexes for the requested amount\");\r\n        }\r\n        \r\n        // FIFO unstaking loop\r\n        uint256 amountLeft = amount;\r\n        uint256 payout = 0;\r\n        uint256 index = 0;\r\n        while (amountLeft > 0 && index < stakes.length) {\r\n            uint256 bite = Math.min(stakes[index].amount, amountLeft);\r\n            payout += _unstake(userIndex, index, bite);\r\n            amountLeft -= bite;\r\n            index++;\r\n        }\r\n\r\n        require(amountLeft == 0,\r\n            \"ExenoTokenStaking: not enough stake on all indexes for the requested amount\");\r\n\r\n        require(token.balanceOf(wallet) >= payout,\r\n            \"ExenoTokenStaking: not enough balance for payout\");\r\n\r\n        require(token.allowance(wallet, address(this)) >= payout,\r\n            \"ExenoTokenStaking: not enough allowance for payout\");\r\n\r\n        assert(_checkBalanceIntegrity(totalTokensStaked));\r\n\r\n        // Apply purging after the entire unstaking loop\r\n        _purge(userIndex);\r\n\r\n        // Return staked tokens to the stakeholder\r\n        token.safeTransfer(stakeholder, amount);\r\n\r\n        // Send payout to the stakeholder\r\n        token.safeTransferFrom(wallet, stakeholder, payout);\r\n\r\n        assert(_checkBalanceIntegrity(totalTokensStaked));\r\n\r\n        // Emit an event that unstaking has occurred\r\n        emit Unstaked(stakeholder, amount, payout);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC1363\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annualizedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebasePeriodInHours\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakeStartMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousEndDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEndDate\",\"type\":\"uint256\"}],\"name\":\"ExtendEndDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TokensApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\"}],\"name\":\"UpdateAnnualizedInterestRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ExenoTokenStaking.StakeStartMode\",\"name\":\"previousMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ExenoTokenStaking.StakeStartMode\",\"name\":\"currentMode\",\"type\":\"uint8\"}],\"name\":\"UpdateStakeStartMode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC1363\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annualizedInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAvailableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"extendEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfStakeholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"getStakingStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRebaseClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRebaseTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ExenoTokenStaking.Record[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ExenoTokenStaking.StakingStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onApprovalReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTransferReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePeriodInHours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStartMode\",\"outputs\":[{\"internalType\":\"enum ExenoTokenStaking.StakeStartMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC1363\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"skipPayout\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFifo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAnnualizedInterestRate\",\"type\":\"uint256\"}],\"name\":\"updateAnnualizedInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newStakeStartValue\",\"type\":\"uint8\"}],\"name\":\"updateStakeStartMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExenoTokenStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000c9b3ab1bd0cf0745625381f5c3aa1cd9bbc7abb000000000000000000000000000000000000000000000000000000000000041a00000000000000000000000000000000000000000000000000000000000008700000000000000000000000000000000000000000000000000000000000000003000000000000000000000000463ec71b1e1faf554ef9d5b7852635bcf6d6e7360000000000000000000000000000000000000000000000000000000062be38ff", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75166ec2a69d8856ae4b4a750e21de5a2b72763deb5401c94cac6bba658b614b"}]}