{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\r\n\r\nTelegram Link : https://t.me/TSUKABLYAT\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract ERC20 is IERC20, Auth {\r\n  using SafeMath for uint256;\r\n\r\n  string constant _name = \"TSUKA BLYAT\";\r\n  string constant _symbol = \"TSKAB\";\r\n  uint8 constant _decimals = 18;\r\n\r\n  uint256 _totalSupply = 1000000000 * (10**_decimals);\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  mapping (address => bool) private _isExcludeFee;\r\n  mapping (address => bool) private _isExcludeMaxHold;\r\n\r\n  IDEXRouter public router;\r\n  address NATIVETOKEN;\r\n  address DEAD;\r\n  address public pair;\r\n  address public factory;\r\n  address public currentRouter;\r\n  \r\n  address public marketingwallet;\r\n  \r\n  uint256 public totalfee;\r\n  uint256 public marketingfee;\r\n  uint256 public liquidityfee;\r\n  uint256 public burnfee;\r\n  uint256 public feeDenominator;\r\n  uint256 public ratioDenominator;\r\n\r\n  uint256 public maxHold;\r\n  bool public maxOff;\r\n\r\n  uint256 public swapthreshold;\r\n\r\n  bool public inSwap;\r\n  bool public inAddLP;\r\n  bool public autoswap;\r\n  bool public autoLP;\r\n\r\n  bool public baseERC20;\r\n\r\n  constructor() Auth(msg.sender) {\r\n\r\n    currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    NATIVETOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    marketingwallet = 0x309A45efDB305Adb4f78B3976e2a9b053676F13d;\r\n\r\n    _isExcludeFee[msg.sender] = true;\r\n    _isExcludeFee[address(this)] = true;\r\n    _isExcludeFee[currentRouter] = true;\r\n    _isExcludeFee[factory] = true;\r\n    _isExcludeFee[marketingwallet] = true;\r\n    _isExcludeFee[DEAD] = true;\r\n\r\n    _isExcludeMaxHold[msg.sender] = true;\r\n    _isExcludeMaxHold[address(this)] = true;\r\n    _isExcludeMaxHold[currentRouter] = true;\r\n    _isExcludeMaxHold[factory] = true;\r\n    _isExcludeMaxHold[marketingwallet] = true;\r\n    _isExcludeMaxHold[DEAD] = true;\r\n\r\n    router = IDEXRouter(currentRouter);\r\n    pair = IDEXFactory(router.factory()).createPair(NATIVETOKEN, address(this));\r\n    \r\n    _allowances[address(this)][address(router)] = type(uint256).max;\r\n    _allowances[address(this)][address(factory)] = type(uint256).max;\r\n    _allowances[address(this)][address(pair)] = type(uint256).max;\r\n    IERC20(NATIVETOKEN).approve(address(router),type(uint256).max);\r\n    IERC20(NATIVETOKEN).approve(address(factory),type(uint256).max);\r\n    IERC20(NATIVETOKEN).approve(address(pair),type(uint256).max);\r\n\r\n    _isExcludeMaxHold[pair] = true;\r\n\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    maxHold = _totalSupply.mul(75).div(1000);\r\n\r\n    marketingfee = 50;\r\n    liquidityfee = 25;\r\n    burnfee = 15;\r\n    totalfee = 100;\r\n    ratioDenominator = 75;\r\n    feeDenominator = 1000;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n  }\r\n\r\n  function setFee(uint256 _marketing,uint256 _liquidity,uint256 _burn,uint256 _denominator) external authorized() returns (bool) {\r\n    require( _marketing.add(_liquidity) <= _denominator.mul(25).div(100) );\r\n    marketingfee = _marketing;\r\n    liquidityfee = _liquidity;\r\n    burnfee = _burn;\r\n    totalfee = _marketing.add(_liquidity).add(_burn);\r\n    ratioDenominator = _marketing.add(_liquidity);\r\n    feeDenominator = _denominator;\r\n    return true;\r\n  }\r\n\r\n  function updateNativeToken() external authorized() returns (bool) {\r\n    NATIVETOKEN = router.WETH();\r\n    return true;\r\n  }\r\n\r\n  function returnERC20(bool flag) external authorized() returns (bool) {\r\n    baseERC20 = flag;\r\n    return true;\r\n  }\r\n\r\n  function setFeeExempt(address account,bool flag) external authorized() returns (bool) {\r\n    _isExcludeFee[account] = flag;\r\n    return true;\r\n  }\r\n\r\n  function setMaxHoldExempt(address account,bool flag) external authorized() returns (bool) {\r\n    _isExcludeMaxHold[account] = flag;\r\n    return true;\r\n  }\r\n\r\n  function setMaxOff(bool flag) external authorized() returns (bool) {\r\n    maxOff = flag;\r\n    return true;\r\n  }\r\n\r\n  function updateMarketingwallet(address _marketing) external authorized() returns (bool) {\r\n    marketingwallet = _marketing;\r\n    return true;\r\n  }\r\n\r\n  function updateTxLimit(uint256 _maxHold) external authorized() returns (bool) {\r\n    maxHold = _maxHold;\r\n    return true;\r\n  }\r\n\r\n  function updateTxLimitPercentage(uint256 _maxHold,uint256 _denominator) external authorized() returns (bool) {\r\n    maxHold = _totalSupply.mul(_maxHold).div(_denominator);\r\n    return true;\r\n  }\r\n\r\n  function setAutoSwap(uint256 amount,bool flag,bool lp) external authorized() returns (bool) {\r\n    swapthreshold = amount;\r\n    autoswap = flag;\r\n    autoLP = lp;\r\n    return true;\r\n  }\r\n\r\n  function AddLiquidityETH(uint256 _tokenamount) external authorized() payable {\r\n    _basictransfer(msg.sender,address(this),_tokenamount.mul(10**_decimals));\r\n    swapthreshold = _balances[address(this)].mul(6).div(1000);\r\n    inAddLP = true;\r\n    router.addLiquidityETH{value: address(this).balance }(\r\n    address(this),\r\n    _balances[address(this)],\r\n    0,\r\n    0,\r\n    marketingwallet,\r\n    block.timestamp\r\n    );\r\n    inAddLP = false;\r\n    autoswap = true;\r\n    autoLP = true;\r\n  }\r\n\r\n  function getOwner() external view override returns (address) { return owner; }\r\n  function decimals() external pure override returns (uint8) { return _decimals; }\r\n  function symbol() external pure override returns (string memory) { return _symbol; }\r\n  function name() external pure override returns (string memory) { return _name; }\r\n  function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n  function balanceOf(address account) external view override returns (uint256) { return _balances[account]; }\r\n\r\n  function isExcludeFee(address account) external view returns (bool) { return _isExcludeFee[account]; }\r\n  function isExcludeMaxHold(address account) external view returns (bool) { return _isExcludeMaxHold[account]; }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    if(inAddLP || inSwap || baseERC20 || msg.sender == factory){\r\n    _basictransfer(msg.sender, recipient, amount);\r\n    } else {\r\n\r\n    if(_balances[address(this)]>swapthreshold && autoswap && msg.sender != pair){\r\n\r\n    inSwap = true;\r\n    uint256 amountToMarketing = swapthreshold.mul(marketingfee).div(ratioDenominator);\r\n    uint256 currentthreshold = swapthreshold.sub(amountToMarketing);\r\n    uint256 amountToLiquify = currentthreshold.div(2);\r\n    uint256 amountToSwap = amountToMarketing.add(amountToLiquify);\r\n    \r\n    uint256 balanceBefore = address(this).balance;\r\n    swap2ETH(amountToSwap);\r\n    uint256 balanceAfter = address(this).balance.sub(balanceBefore);\r\n\r\n    uint256 amountpaid = balanceAfter.mul(amountToMarketing).div(amountToSwap);\r\n    uint256 amountLP = balanceAfter.sub(amountpaid);\r\n\r\n    payable(marketingwallet).transfer(amountpaid);\r\n    \r\n    if(autoLP){\r\n    autoAddLP(amountToLiquify,amountLP);\r\n    }\r\n    inSwap = false;\r\n\r\n    }\r\n\r\n    _transfer(msg.sender, recipient, amount);\r\n\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n\r\n  function swap2ETH(uint256 amount) internal {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = NATIVETOKEN;\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    amount,\r\n    0,\r\n    path,\r\n    address(this),\r\n    block.timestamp\r\n    );\r\n  }\r\n\r\n  function autoAddLP(uint256 amountToLiquify,uint256 amountBNB) internal {\r\n    router.addLiquidityETH{value: amountBNB }(\r\n    address(this),\r\n    amountToLiquify,\r\n    0,\r\n    0,\r\n    marketingwallet,\r\n    block.timestamp\r\n    );\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    if(inAddLP || inSwap || baseERC20 || msg.sender == factory){\r\n    _basictransfer(sender, recipient, amount);\r\n    } else {\r\n\r\n    if(_allowances[sender][msg.sender] != type(uint256).max){\r\n    _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n    }\r\n\r\n    if(_balances[address(this)]>swapthreshold && autoswap && msg.sender != pair){\r\n\r\n    inSwap = true;\r\n    uint256 amountToMarketing = swapthreshold.mul(marketingfee).div(ratioDenominator);\r\n    uint256 currentthreshold = swapthreshold.sub(amountToMarketing);\r\n    uint256 amountToLiquify = currentthreshold.div(2);\r\n    uint256 amountToSwap = amountToMarketing.add(amountToLiquify);\r\n    \r\n    uint256 balanceBefore = address(this).balance;\r\n    swap2ETH(amountToSwap);\r\n    uint256 balanceAfter = address(this).balance.sub(balanceBefore);\r\n\r\n    uint256 amountpaid = balanceAfter.mul(amountToMarketing).div(amountToSwap);\r\n    uint256 amountLP = balanceAfter.sub(amountpaid);\r\n\r\n    payable(marketingwallet).transfer(amountpaid);\r\n    \r\n    if(autoLP){\r\n    autoAddLP(amountToLiquify,amountLP);\r\n    }\r\n    inSwap = false;\r\n\r\n    }\r\n\r\n    _transfer(sender, recipient, amount);\r\n\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0));\r\n    require(recipient != address(0));\r\n\r\n    if(!_isExcludeMaxHold[recipient] && !maxOff){\r\n    require(_balances[recipient].add(amount) <= maxHold);\r\n    }\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n    uint256 tempfee;\r\n\r\n    if (!_isExcludeFee[sender]) {\r\n    tempfee = amount.mul(totalfee).div(feeDenominator);\r\n    _basictransfer(recipient,address(this),tempfee.mul(ratioDenominator).div(totalfee));\r\n    _basictransfer(recipient,DEAD,tempfee.mul(burnfee).div(totalfee));\r\n    }\r\n    \r\n    emit Transfer(sender, recipient, amount.sub(tempfee));\r\n\r\n  }\r\n\r\n  function _basictransfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0));\r\n    require(recipient != address(0));\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0));\r\n    require(spender != address(0));\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function rescue() external authorized() {\r\n    payable(owner).transfer(address(this).balance);\r\n  }\r\n\r\n  receive() external payable { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inAddLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeMaxHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"returnERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lp\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setMaxHoldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setMaxOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapthreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"updateMarketingwallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHold\",\"type\":\"uint256\"}],\"name\":\"updateTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"updateTxLimitPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5331e220a82c7eab06c2835b89893b207966cda1ba2bc7f8400560b49b6685dd"}]}