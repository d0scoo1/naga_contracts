{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/RETRO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\nimport \\\"./interfaces/IReflectable.sol\\\";\\n\\ncontract RETRO is ERC20, Ownable, IReflectable {\\n    using SafeMath for uint256;\\n\\n    modifier lockSwap() {\\n        _inSwap = true;\\n        _;\\n        _inSwap = false;\\n    }\\n\\n    modifier liquidityAdd() {\\n        _inLiquidityAdd = true;\\n        _;\\n        _inLiquidityAdd = false;\\n    }\\n\\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 ether;\\n    uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n    /// @notice Max buy amount in wei\\n    uint256 public buyLimit;\\n    /// @notice Cooldown in seconds\\n    uint256 public cooldown = 60;\\n\\n    /// @notice Buy tax0 in BPS\\n    uint256 public buyTax0 = 1300;\\n    /// @notice Sell tax0 in BPS\\n    uint256 public sellTax0 = 2300;\\n    /// @notice Buy tax1 in BPS\\n    uint256 public buyTax1 = 100;\\n    /// @notice Sell tax1 in BPS\\n    uint256 public sellTax1 = 100;\\n    /// @notice Buy tax2 in BPS\\n    uint256 public buyTax2 = 100;\\n    /// @notice Sell tax2 in BPS\\n    uint256 public sellTax2 = 100;\\n    /// @notice Buy reflection tax in BPS\\n    uint256 public buyReflectionTax = 0;\\n    /// @notice Sell reflection tax in BPS\\n    uint256 public sellReflectionTax = 0;\\n\\n    /// @notice Contract RETRO balance threshold before `_swap` is invoked\\n    uint256 public minTokenBalance = 1000 ether;\\n    bool public swapFees = true;\\n\\n    /// @notice tokens that are allocated for tax0 tax\\n    uint256 public totalTax0;\\n    /// @notice tokens that are allocated for tax1 tax\\n    uint256 public totalTax1;\\n    /// @notice tokens that are allocated for tax2 tax\\n    uint256 public totalTax2;\\n\\n    /// @notice Counter for all reflections collected\\n    uint256 public reflectionBasis;\\n    /// @notice Mapping of each user's last reflection basis\\n    mapping(address => uint256) public lastReflectionBasis;\\n    /// @notice Mapping of each user's owed reflections\\n    mapping(address => uint256) public override reflectionOwed;\\n\\n    /// @notice address that tax0 is sent to\\n    address payable public tax0Wallet;\\n    /// @notice address that tax1 is sent to\\n    address payable public tax1Wallet;\\n    /// @notice address that tax2 is sent to\\n    address payable public tax2Wallet;\\n\\n    uint256 internal _totalSupply = 0;\\n    IUniswapV2Router02 internal _router = IUniswapV2Router02(address(0));\\n    address internal _pair;\\n    bool internal _inSwap = false;\\n    bool internal _inLiquidityAdd = false;\\n    bool public tradingActive = false;\\n\\n    IWhitelist public whitelist;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => bool) public taxExcluded;\\n    mapping(address => uint256) public lastBuy;\\n\\n    event Tax0WalletChanged(address previousWallet, address nextWallet);\\n    event Tax1WalletChanged(address previousWallet, address nextWallet);\\n    event Tax2WalletChanged(address previousWallet, address nextWallet);\\n    event BuyTax0Changed(uint256 previousTax, uint256 nextTax);\\n    event SellTax0Changed(uint256 previousTax, uint256 nextTax);\\n    event BuyTax1Changed(uint256 previousTax, uint256 nextTax);\\n    event SellTax1Changed(uint256 previousTax, uint256 nextTax);\\n    event BuyTax2Changed(uint256 previousTax, uint256 nextTax);\\n    event SellTax2Changed(uint256 previousTax, uint256 nextTax);\\n    event BuyReflectionTaxChanged(uint256 previousTax, uint256 nextTax);\\n    event SellReflectionTaxChanged(uint256 previousTax, uint256 nextTax);\\n    event MinTokenBalanceChanged(uint256 previousMin, uint256 nextMin);\\n    event Tax0Rescued(uint256 amount);\\n    event Tax1Rescued(uint256 amount);\\n    event Tax2Rescued(uint256 amount);\\n    event TradingActiveChanged(bool enabled);\\n    event TaxExclusionChanged(address user, bool taxExcluded);\\n    event BuyLimitChanged(uint256 previousMax, uint256 nextMax);\\n    event SwapFeesChanged(bool enabled);\\n    event CooldownChanged(uint256 previousCooldown, uint256 nextCooldown);\\n    event WhitelistChanged(address previousWhitelist, address nextWhitelist);\\n\\n    constructor(\\n        address _uniswapFactory,\\n        address _uniswapRouter,\\n        uint256 _buyLimit,\\n        address payable _tax0Wallet,\\n        address payable _tax1Wallet,\\n        address payable _tax2Wallet\\n    ) ERC20(\\\"Retroverse\\\", \\\"RETRO\\\") Ownable() {\\n        taxExcluded[owner()] = true;\\n        taxExcluded[address(0)] = true;\\n        taxExcluded[_tax0Wallet] = true;\\n        taxExcluded[_tax1Wallet] = true;\\n        taxExcluded[_tax2Wallet] = true;\\n        taxExcluded[address(this)] = true;\\n\\n        buyLimit = _buyLimit;\\n        tax0Wallet = _tax0Wallet;\\n        tax1Wallet = _tax1Wallet;\\n        tax2Wallet = _tax2Wallet;\\n\\n        _router = IUniswapV2Router02(_uniswapRouter);\\n        IUniswapV2Factory uniswapContract = IUniswapV2Factory(_uniswapFactory);\\n        _pair = uniswapContract.createPair(address(this), _router.WETH());\\n    }\\n\\n    /// @notice Change the address of the tax0 wallet\\n    /// @param _tax0Wallet The new address of the tax0 wallet\\n    function setTax0Wallet(address payable _tax0Wallet) external onlyOwner {\\n        emit Tax0WalletChanged(tax0Wallet, _tax0Wallet);\\n        tax0Wallet = _tax0Wallet;\\n    }\\n\\n    /// @notice Change the address of the tax1 wallet\\n    /// @param _tax1Wallet The new address of the tax1 wallet\\n    function setTax1Wallet(address payable _tax1Wallet) external onlyOwner {\\n        emit Tax1WalletChanged(tax1Wallet, _tax1Wallet);\\n        tax1Wallet = _tax1Wallet;\\n    }\\n\\n    /// @notice Change the address of the tax2 wallet\\n    /// @param _tax2Wallet The new address of the tax2 wallet\\n    function setTax2Wallet(address payable _tax2Wallet) external onlyOwner {\\n        emit Tax2WalletChanged(tax2Wallet, _tax2Wallet);\\n        tax2Wallet = _tax2Wallet;\\n    }\\n\\n    /// @notice Change the buy tax0 rate\\n    /// @param _buyTax0 The new buy tax0 rate\\n    function setBuyTax0(uint256 _buyTax0) external onlyOwner {\\n        require(\\n            _buyTax0 <= BPS_DENOMINATOR,\\n            \\\"_buyTax0 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit BuyTax0Changed(buyTax0, _buyTax0);\\n        buyTax0 = _buyTax0;\\n    }\\n\\n    /// @notice Change the sell tax0 rate\\n    /// @param _sellTax0 The new sell tax0 rate\\n    function setSellTax0(uint256 _sellTax0) external onlyOwner {\\n        require(\\n            _sellTax0 <= BPS_DENOMINATOR,\\n            \\\"_sellTax0 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit SellTax0Changed(sellTax0, _sellTax0);\\n        sellTax0 = _sellTax0;\\n    }\\n\\n    /// @notice Change the buy tax1 rate\\n    /// @param _buyTax1 The new buy tax1 rate\\n    function setBuyTax1(uint256 _buyTax1) external onlyOwner {\\n        require(\\n            _buyTax1 <= BPS_DENOMINATOR,\\n            \\\"_buyTax1 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit BuyTax1Changed(buyTax1, _buyTax1);\\n        buyTax1 = _buyTax1;\\n    }\\n\\n    /// @notice Change the sell tax1 rate\\n    /// @param _sellTax1 The new sell tax1 rate\\n    function setSellTax1(uint256 _sellTax1) external onlyOwner {\\n        require(\\n            _sellTax1 <= BPS_DENOMINATOR,\\n            \\\"_sellTax1 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit SellTax1Changed(sellTax1, _sellTax1);\\n        sellTax1 = _sellTax1;\\n    }\\n\\n    /// @notice Change the buy tax2 rate\\n    /// @param _buyTax2 The new buy tax2 rate\\n    function setBuyTax2(uint256 _buyTax2) external onlyOwner {\\n        require(\\n            _buyTax2 <= BPS_DENOMINATOR,\\n            \\\"_buyTax2 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit BuyTax2Changed(buyTax2, _buyTax2);\\n        buyTax2 = _buyTax2;\\n    }\\n\\n    /// @notice Change the sell tax2 rate\\n    /// @param _sellTax2 The new sell tax2 rate\\n    function setSellTax2(uint256 _sellTax2) external onlyOwner {\\n        require(\\n            _sellTax2 <= BPS_DENOMINATOR,\\n            \\\"_sellTax2 cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit SellTax2Changed(sellTax2, _sellTax2);\\n        sellTax2 = _sellTax2;\\n    }\\n\\n    /// @notice Change the buy reflection rate\\n    /// @param _buyReflectionTax The new buy reflection tax rate\\n    function setBuyReflectionTax(uint256 _buyReflectionTax) external onlyOwner {\\n        require(\\n            _buyReflectionTax <= BPS_DENOMINATOR,\\n            \\\"_buyReflectionTax cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit BuyReflectionTaxChanged(buyReflectionTax, _buyReflectionTax);\\n        buyReflectionTax = _buyReflectionTax;\\n    }\\n\\n    /// @notice Change the sell reflection rate\\n    /// @param _sellReflectionTax The new sell reflection tax rate\\n    function setSellReflectionTax(uint256 _sellReflectionTax)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _sellReflectionTax <= BPS_DENOMINATOR,\\n            \\\"_sellReflectionTax cannot exceed BPS_DENOMINATOR\\\"\\n        );\\n        emit SellReflectionTaxChanged(sellReflectionTax, _sellReflectionTax);\\n        sellReflectionTax = _sellReflectionTax;\\n    }\\n\\n    /// @notice Change the minimum contract RETRO balance before `_swap` gets invoked\\n    /// @param _minTokenBalance The new minimum balance\\n    function setMinTokenBalance(uint256 _minTokenBalance) external onlyOwner {\\n        emit MinTokenBalanceChanged(minTokenBalance, _minTokenBalance);\\n        minTokenBalance = _minTokenBalance;\\n    }\\n\\n    /// @notice Change the cooldown for buys\\n    /// @param _cooldown The new cooldown in seconds\\n    function setCooldown(uint256 _cooldown) external onlyOwner {\\n        emit CooldownChanged(cooldown, _cooldown);\\n        cooldown = _cooldown;\\n    }\\n\\n    /// @notice Change the whitelist\\n    /// @param _whitelist The new whitelist contract\\n    function setWhitelist(IWhitelist _whitelist) external onlyOwner {\\n        emit WhitelistChanged(address(whitelist), address(_whitelist));\\n        whitelist = _whitelist;\\n    }\\n\\n    /// @notice Rescue RETRO from the tax0 amount\\n    /// @dev Should only be used in an emergency\\n    /// @param _amount The amount of RETRO to rescue\\n    /// @param _recipient The recipient of the rescued RETRO\\n    function rescueTax0Tokens(uint256 _amount, address _recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _amount <= totalTax0,\\n            \\\"Amount cannot be greater than totalTax0\\\"\\n        );\\n        _rawTransfer(address(this), _recipient, _amount);\\n        emit Tax0Rescued(_amount);\\n        totalTax0 -= _amount;\\n    }\\n\\n    /// @notice Rescue RETRO from the tax1 amount\\n    /// @dev Should only be used in an emergency\\n    /// @param _amount The amount of RETRO to rescue\\n    /// @param _recipient The recipient of the rescued RETRO\\n    function rescueTax1Tokens(uint256 _amount, address _recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _amount <= totalTax1,\\n            \\\"Amount cannot be greater than totalTax1\\\"\\n        );\\n        _rawTransfer(address(this), _recipient, _amount);\\n        emit Tax1Rescued(_amount);\\n        totalTax1 -= _amount;\\n    }\\n\\n    /// @notice Rescue RETRO from the tax2 amount\\n    /// @dev Should only be used in an emergency\\n    /// @param _amount The amount of RETRO to rescue\\n    /// @param _recipient The recipient of the rescued RETRO\\n    function rescueTax2Tokens(uint256 _amount, address _recipient)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _amount <= totalTax2,\\n            \\\"Amount cannot be greater than totalTax2\\\"\\n        );\\n        _rawTransfer(address(this), _recipient, _amount);\\n        emit Tax2Rescued(_amount);\\n        totalTax2 -= _amount;\\n    }\\n\\n    function addLiquidity(uint256 tokens)\\n        external\\n        payable\\n        onlyOwner\\n        liquidityAdd\\n    {\\n        _mint(address(this), tokens);\\n        _approve(address(this), address(_router), tokens);\\n\\n        _router.addLiquidityETH{value: msg.value}(\\n            address(this),\\n            tokens,\\n            0,\\n            0,\\n            owner(),\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Enables or disables trading on Uniswap\\n    function setTradingActive(bool _tradingActive) external onlyOwner {\\n        tradingActive = _tradingActive;\\n        emit TradingActiveChanged(_tradingActive);\\n    }\\n\\n    /// @notice Updates tax exclusion status\\n    /// @param _account Account to update the tax exclusion status of\\n    /// @param _taxExcluded If true, exclude taxes for this user\\n    function setTaxExcluded(address _account, bool _taxExcluded)\\n        public\\n        onlyOwner\\n    {\\n        taxExcluded[_account] = _taxExcluded;\\n        emit TaxExclusionChanged(_account, _taxExcluded);\\n    }\\n\\n    /// @notice Updates the max amount allowed to buy\\n    /// @param _buyLimit The new buy limit\\n    function setBuyLimit(uint256 _buyLimit) external onlyOwner {\\n        emit BuyLimitChanged(buyLimit, _buyLimit);\\n        buyLimit = _buyLimit;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function _addBalance(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account] + amount;\\n    }\\n\\n    function _subtractBalance(address account, uint256 amount) internal {\\n        _balances[account] = _balances[account] - amount;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        if (taxExcluded[sender] || taxExcluded[recipient]) {\\n            _rawTransfer(sender, recipient, amount);\\n            return;\\n        }\\n\\n        uint256 swapAmount = totalTax0.add(totalTax1).add(totalTax2);\\n        bool overMinTokenBalance = swapAmount >= minTokenBalance;\\n\\n        if (overMinTokenBalance && !_inSwap && sender != _pair && swapFees) {\\n            _swap(swapAmount);\\n        }\\n\\n        updateReflection(sender);\\n        updateReflection(recipient);\\n\\n        uint256 send = amount;\\n        uint256 tax0;\\n        uint256 tax1;\\n        uint256 tax2;\\n        uint256 reflectionTax;\\n        if (sender == _pair) {\\n            if (address(whitelist) != address(0)) {\\n                require(\\n                    whitelist.isWhitelisted(recipient),\\n                    \\\"User is not whitelisted to buy\\\"\\n                );\\n            }\\n            require(tradingActive, \\\"Trading is not yet active\\\");\\n            require(amount <= buyLimit, \\\"Buy limit exceeded\\\");\\n            if (cooldown > 0) {\\n                require(\\n                    lastBuy[recipient] + cooldown <= block.timestamp,\\n                    \\\"Cooldown still active\\\"\\n                );\\n                lastBuy[recipient] = block.timestamp;\\n            }\\n            (send, tax0, tax1, tax2, reflectionTax) = _getTaxAmounts(\\n                amount,\\n                true\\n            );\\n        } else if (recipient == _pair) {\\n            require(tradingActive, \\\"Trading is not yet active\\\");\\n            if (address(whitelist) != address(0)) {\\n                require(\\n                    whitelist.isWhitelisted(sender),\\n                    \\\"User is not whitelisted to sell\\\"\\n                );\\n            }\\n            (send, tax0, tax1, tax2, reflectionTax) = _getTaxAmounts(\\n                amount,\\n                false\\n            );\\n        }\\n        _rawTransfer(sender, recipient, send);\\n        _takeTaxes(sender, tax0, tax1, tax2, reflectionTax);\\n    }\\n\\n    /// @notice Perform a Uniswap v2 swap from RETRO to ETH and handle tax distribution\\n    /// @param amount The amount of RETRO to swap in wei\\n    /// @dev `amount` is always <= this contract's ETH balance. Calculate and distribute taxes\\n    function _swap(uint256 amount) internal lockSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _router.WETH();\\n\\n        _approve(address(this), address(_router), amount);\\n\\n        uint256 contractEthBalance = address(this).balance;\\n\\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 tradeValue = address(this).balance - contractEthBalance;\\n\\n        uint256 totalTaxes = totalTax0.add(totalTax1).add(totalTax2);\\n        uint256 tax0Amount = amount.mul(totalTax0).div(totalTaxes);\\n        uint256 tax1Amount = amount.mul(totalTax1).div(totalTaxes);\\n        uint256 tax2Amount = amount.mul(totalTax2).div(totalTaxes);\\n\\n        uint256 tax0Eth = tradeValue.mul(totalTax0).div(totalTaxes);\\n        uint256 tax1Eth = tradeValue.mul(totalTax1).div(totalTaxes);\\n        uint256 tax2Eth = tradeValue.mul(totalTax2).div(totalTaxes);\\n\\n        totalTax0 = totalTax0.sub(tax0Amount);\\n        totalTax1 = totalTax1.sub(tax1Amount);\\n        totalTax2 = totalTax2.sub(tax2Amount);\\n        if (tax0Eth > 0) {\\n            tax0Wallet.transfer(tax0Eth);\\n        }\\n        if (tax1Eth > 0) {\\n            tax1Wallet.transfer(tax1Eth);\\n        }\\n        if (tax2Eth > 0) {\\n            tax2Wallet.transfer(tax2Eth);\\n        }\\n    }\\n\\n    function swapAll() external {\\n        uint256 swapAmount = totalTax0.add(totalTax1).add(totalTax2);\\n\\n        if (!_inSwap) {\\n            _swap(swapAmount);\\n        }\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    /// @notice Transfers RETRO from an account to this contract for taxes\\n    /// @param _account The account to transfer RETRO from\\n    /// @param _tax0Amount The amount of tax0 tax to transfer\\n    /// @param _tax1Amount The amount of tax1 tax to transfer\\n    /// @param _reflectionTaxAmount The amount of reflection tax to transfer\\n    function _takeTaxes(\\n        address _account,\\n        uint256 _tax0Amount,\\n        uint256 _tax1Amount,\\n        uint256 _tax2Amount,\\n        uint256 _reflectionTaxAmount\\n    ) internal {\\n        require(_account != address(0), \\\"taxation from the zero address\\\");\\n\\n        uint256 totalAmount = _tax0Amount.add(_tax1Amount).add(_tax2Amount).add(\\n            _reflectionTaxAmount\\n        );\\n        _rawTransfer(_account, address(this), totalAmount);\\n        totalTax0 += _tax0Amount;\\n        totalTax1 += _tax1Amount;\\n        totalTax2 += _tax2Amount;\\n        reflectionBasis += _reflectionTaxAmount;\\n    }\\n\\n    /// @notice Get a breakdown of send and tax amounts\\n    /// @param amount The amount to tax in wei\\n    /// @return send The raw amount to send\\n    /// @return tax0 The raw tax0 tax amount\\n    /// @return tax1 The raw tax1 tax amount\\n    /// @return tax2 The raw tax1 tax amount\\n    /// @return reflectionTax The raw tax1 tax amount\\n    function _getTaxAmounts(uint256 amount, bool buying)\\n        internal\\n        view\\n        returns (\\n            uint256 send,\\n            uint256 tax0,\\n            uint256 tax1,\\n            uint256 tax2,\\n            uint256 reflectionTax\\n        )\\n    {\\n        if (buying) {\\n            tax0 = amount.mul(buyTax0).div(BPS_DENOMINATOR);\\n            tax1 = amount.mul(buyTax1).div(BPS_DENOMINATOR);\\n            tax2 = amount.mul(buyTax2).div(BPS_DENOMINATOR);\\n            reflectionTax = amount.mul(buyReflectionTax).div(BPS_DENOMINATOR);\\n        } else {\\n            tax0 = amount.mul(sellTax0).div(BPS_DENOMINATOR);\\n            tax1 = amount.mul(sellTax1).div(BPS_DENOMINATOR);\\n            tax2 = amount.mul(sellTax2).div(BPS_DENOMINATOR);\\n            reflectionTax = amount.mul(sellReflectionTax).div(BPS_DENOMINATOR);\\n        }\\n        send = amount.sub(tax0).sub(tax1).sub(tax2).sub(reflectionTax);\\n    }\\n\\n    // modified from OpenZeppelin ERC20\\n    function _rawTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"transfer to the zero address\\\");\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"transfer amount exceeds balance\\\");\\n        unchecked {\\n            _subtractBalance(sender, amount);\\n        }\\n        _addBalance(recipient, amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /// @notice Enable or disable whether swap occurs during `_transfer`\\n    /// @param _swapFees If true, enables swap during `_transfer`\\n    function setSwapFees(bool _swapFees) external onlyOwner {\\n        swapFees = _swapFees;\\n        emit SwapFeesChanged(_swapFees);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal override {\\n        require(_totalSupply.add(amount) <= MAX_SUPPLY, \\\"Max supply exceeded\\\");\\n        _totalSupply += amount;\\n        _addBalance(account, amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function airdrop(address[] memory accounts, uint256[] memory amounts)\\n        external\\n        onlyOwner\\n    {\\n        require(accounts.length == amounts.length, \\\"array lengths must match\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _mint(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Update the amount of owed reflections for a user\\n    /// @param addr The address to update the reflections for\\n    function updateReflection(address addr) public override {\\n        if (addr == _pair || addr == address(_router)) return;\\n\\n        uint256 basisDifference = reflectionBasis.sub(\\n            lastReflectionBasis[addr]\\n        );\\n        reflectionOwed[addr] += basisDifference.mul(balanceOf(addr)).div(\\n            _totalSupply\\n        );\\n\\n        lastReflectionBasis[addr] = reflectionBasis;\\n    }\\n\\n    /// @notice Claim all owed reflections\\n    function claimReflection() public override {\\n        updateReflection(msg.sender);\\n        _rawTransfer(address(this), msg.sender, reflectionOwed[msg.sender]);\\n        reflectionOwed[msg.sender] = 0;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReflectable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReflectable {\\n    function reflectionOwed(address user) external view returns (uint256);\\n\\n    function updateReflection(address user) external;\\n\\n    function claimReflection() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelist {\\n    function isWhitelisted(address user) external view returns (bool);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_tax0Wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tax1Wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tax2Wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextMax\",\"type\":\"uint256\"}],\"name\":\"BuyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyReflectionTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyTax0Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyTax1Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyTax2Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextCooldown\",\"type\":\"uint256\"}],\"name\":\"CooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextMin\",\"type\":\"uint256\"}],\"name\":\"MinTokenBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellReflectionTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellTax0Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellTax1Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellTax2Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tax0Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"Tax0WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tax1Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"Tax1WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tax2Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"Tax2WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"taxExcluded\",\"type\":\"bool\"}],\"name\":\"TaxExclusionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWhitelist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWhitelist\",\"type\":\"address\"}],\"name\":\"WhitelistChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReflectionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflectionOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueTax0Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueTax1Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueTax2Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyReflectionTax\",\"type\":\"uint256\"}],\"name\":\"setBuyReflectionTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax0\",\"type\":\"uint256\"}],\"name\":\"setBuyTax0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax1\",\"type\":\"uint256\"}],\"name\":\"setBuyTax1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax2\",\"type\":\"uint256\"}],\"name\":\"setBuyTax2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenBalance\",\"type\":\"uint256\"}],\"name\":\"setMinTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellReflectionTax\",\"type\":\"uint256\"}],\"name\":\"setSellReflectionTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax0\",\"type\":\"uint256\"}],\"name\":\"setSellTax0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax1\",\"type\":\"uint256\"}],\"name\":\"setSellTax1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTax2\",\"type\":\"uint256\"}],\"name\":\"setSellTax2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapFees\",\"type\":\"bool\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tax0Wallet\",\"type\":\"address\"}],\"name\":\"setTax0Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tax1Wallet\",\"type\":\"address\"}],\"name\":\"setTax1Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tax2Wallet\",\"type\":\"address\"}],\"name\":\"setTax2Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_taxExcluded\",\"type\":\"bool\"}],\"name\":\"setTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingActive\",\"type\":\"bool\"}],\"name\":\"setTradingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax0Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax1Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax2Wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RETRO", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000001a784379d99db4200000000000000000000000000000022fc6d729668ded26e6a63339becbaed96286fe9000000000000000000000000f914bbdff49fd4ba1a1cbfc740e0d60a8674f4380000000000000000000000001f58c7ae4c0cd8c91b64d0dc5b88a8ea121b3c4e", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}