{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/token/Decentralists.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n                                                                                               \\n                                       THE DECENTRALISTS                                       \\n                                                                                               \\n                                \u00b7.::::iiiiiiiiiiiiiiiiiii::::.\u00b7                                \\n                           .:::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii::.\u00b7                          \\n                       .::iiiiiiiii:::::..\u00b7\u00b7\u00b7      \u00b7\u00b7..:::::iiiiiiiiii::\u00b7                      \\n                   .::iiiiiii:::.\u00b7                            .:::iiiiiii::.                   \\n                .:iiiiiii::                                         .:iiiiiii:.                \\n             \u00b7:iiiiii::\u00b7                                                ::iiiiii:\u00b7             \\n            :iiiiii:\u00b7                 \u00b7.::::::::::::::..                   :iiiiii:\u00b7           \\n          :iiiii::               .:::iiiii:::::::::::iiiii:::.               .:iiiii:\u00b7         \\n        :iiiii:\u00b7            \u00b7::iii:::\u00b7                   .:::iii::\u00b7             :iiiii:\u00b7       \\n      \u00b7iiiii:\u00b7            ::iii:\u00b7                             .::ii::            \u00b7:iiiii:      \\n     :iiiii:           \u00b7:ii::\u00b7                                   \u00b7:iii:\u00b7           .iiiii:     \\n    :iiiii\u00b7          \u00b7:ii:.                                         \u00b7:ii:           \u00b7:iiii:    \\n   :iiii:          \u00b7:ii:              \u00b7.:::::::i:::::::.\u00b7             \u00b7:ii:           :iiiii   \\n  :iiii:          \u00b7iii:            .::iiiiiiiiiiiiiiiiii:::\u00b7            .ii:           .iiii:  \\n \u00b7iiiii          \u00b7iii            .:ii:::::::iiiiiiiiiiiiiii::.           \u00b7:i:\u00b7          :iiii: \\n :iiii:         \u00b7:i:\u00b7          .:iii:      .:iiiiiiiiiiiiiiiii:.           iii           iiiii \\n:iiii:          :ii           :iiiii:\u00b7     ::iiiiiiiiiiiiiiiiiii:          \u00b7ii:          :iiii:\\niiiii\u00b7         \u00b7ii:          ::iiiiii::::::iiiiiiiiiiiiiiiiiiiiii.          :ii.         \u00b7iiiii\\niiiii          :ii           :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7         .ii:          :iiii\\niiiii          :ii          .iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii.          ii:          :iiii\\niiiii          :ii          .iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:.          ii:          :iiii\\niiiii          :ii           :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7         .ii:          :iiii\\niiiii\u00b7         \u00b7ii:          ::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:.          :ii.         \u00b7iiiii\\n:iiii:          :ii           .:iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:          \u00b7ii:          :iiii:\\n :iiii:         \u00b7:i:\u00b7          \u00b7::iiiiiiiiiiiiiiiiiiiiiiiiiiii:\u00b7           ii:           iiiii \\n \u00b7iiiii           iii\u00b7           \u00b7::iiiiiiiiiiiiiiiiiiiiiii::.           .ii:\u00b7          :iiii: \\n  :iiii:           iii:            \u00b7:::iiiiiiiiiiiiiiiii:::\u00b7            :ii:           .iiii:  \\n   :iiii:           :ii:\u00b7              .::::::::::::::..              .:ii:           :iiii:   \\n    :iiiii\u00b7           :iii:                                         .:ii:           \u00b7:iiii:    \\n     :iiiii:            :iii:\u00b7                                   .:iii:\u00b7           .iiiii:     \\n      \u00b7iiiii:\u00b7            .:iii:.\u00b7                            ::iii::            \u00b7:iiiii:      \\n        :iiiii:\u00b7             .:iiii::.\u00b7                 \u00b7:::iiii:.              :iiiii:\u00b7       \\n          :iiiii::               \u00b7:::iiiiiii:::::::iiiiiii:::\u00b7               .:iiiii:\u00b7         \\n            :iiiiii:\u00b7                   ..:::::::::::..\u00b7                   :iiiiii:\u00b7           \\n             \u00b7:iiiiii::\u00b7                                                ::iiiiii:\u00b7             \\n                .:iiiiiii::                                         .:iiiiiii:.                \\n                   .::iiiiiii:::.\u00b7                            .:::iiiiiii::.                   \\n                       .::iiiiiiiii:::::..\u00b7\u00b7\u00b7      \u00b7\u00b7..:::::iiiiiiiiii::\u00b7                      \\n                           .:::iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii::.\u00b7                          \\n                                \u00b7.::::iiiiiiiiiiiiiiiiiii::::.\u00b7                                \\n\\n\\nA Decentralist is represented by a set of eight traits:\\n  0 - Base\\n    [0] Human Male Black       [8] Vampire Male       [10] Metahuman Male       [12] Ape Male\\n    [1] Human Female Black     [9] Vampire Female     [11] Metahuman Female\\n    [2] Human Male Dark\\n    [3] Human Female Dark\\n    [4] Human Male Pale\\n    [5] Human Female Pale\\n    [6] Human Male White\\n    [7] Human Female White\\n  1 - Necklace\\n    [0] None        [2] Golden\\n    [1] Diamond     [3] Silver\\n  2 - Facial Male\\n    [0] None             [10] Long Gray           [20] Sideburns Blonde\\n    [1] Chivo Black      [11] Long Red            [21] Sideburns Brown\\n    [2] Chivo Blonde     [12] Long White          [22] Sideburns Gray\\n    [3] Chivo Brown      [13] Regular Black       [23] Sideburns Red\\n    [4] Chivo Gray       [14] Regular Blonde      [24] Sideburns White\\n    [5] Chivo Red        [15] Regular Brown\\n    [6] Chivo White      [16] Regular Gray\\n    [7] Long Black       [17] Regular Red\\n    [8] Long Blonde      [18] Regular White\\n    [9] Long Brown       [19] Sideburns Black\\n  2 - Facial Female\\n    [0]  None\\n  3 - Earring\\n    [0]  None      [2]  Diamond     [4]  Silver\\n    [1]  Cross     [3]  Golden\\n  4 - Head Male\\n    [0] None                [10] CapFront Red     [20] Punky Brown      [30] Short White\\n    [1] Afro                [11] Hat Black        [21] Punky Gray       [31] Trapper\\n    [2] CapUp Green         [12] Long Black       [22] Punky Purple     [32] Wool Blue\\n    [3] CapUp Red           [13] Long Blonde      [23] Punky Red        [33] Wool Green\\n    [4] Kangaroo Black      [14] Long Brown       [24] Punky White      [34] Wool Red\\n    [5] CapBack Blue        [15] Long Gray        [25] Short Black\\n    [6] CapBack Orange      [16] Long Red         [26] Short Blonde\\n    [7] Conspiracist        [17] Long White       [27] Short Brown\\n    [8] Cop                 [18] Punky Black      [28] Short Gray\\n    [9] CapFront Purple     [19] Punky Blonde     [29] Short Red\\n  4 - Head Female\\n    [0] None                [10] CapFront Red     [20] Punky Brown      [30] Short White           [40] Trapper\\n    [1] Afro                [11] Hat Black        [21] Punky Gray       [31] Straight Black        [41] Wool Blue\\n    [2] CapUp Green         [12] Long Black       [22] Punky Purple     [32] Straight Blonde       [42] Wool Green\\n    [3] CapUp Red           [13] Long Blonde      [23] Punky Red        [33] Straight Brown        [43] Wool Red\\n    [4] Kangaroo Black      [14] Long Brown       [24] Punky White      [34] Straight Gray\\n    [5] CapBack Blue        [15] Long Gray        [25] Short Black      [35] Straight Orange\\n    [6] CapBack Orange      [16] Long Red         [26] Short Blonde     [36] Straight Platinum\\n    [7] Conspiracist        [17] Long White       [27] Short Brown      [37] Straight Purple\\n    [8] Cop                 [18] Punky Black      [28] Short Gray       [38] Straight Red\\n    [9] CapFront Purple     [19] Punky Blonde     [29] Short Red        [39] Straight White\\n  5 - Glasses\\n    [0] None       [2] Nerd      [4] Pilot     [6] VR\\n    [1] Beetle     [3] Patch     [5] Surf\\n  6 - Lipstick Male\\n    [0] None\\n  6 - Lipstick Female\\n    [0] None      [2] Orange     [4] Purple\\n    [1] Green     [3] Pink       [5] Red\\n  7 - Smoking\\n    [0] None      [2] Cigarette\\n    [1] Cigar     [3] E-Cigarette\\n\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport {ERC721Enumerable} from '../openzeppelin/ERC721Enumerable.sol';\\nimport {ERC721} from '../openzeppelin/ERC721.sol';\\nimport {IERC20} from '../openzeppelin/IERC20.sol';\\nimport {IERC2981} from '../openzeppelin/IERC2981.sol';\\nimport {IERC165} from '../openzeppelin/IERC165.sol';\\nimport {SafeERC20} from '../openzeppelin/SafeERC20.sol';\\nimport {IDescriptor} from './IDescriptor.sol';\\n\\ncontract Decentralists is IERC2981, ERC721Enumerable {\\n  using SafeERC20 for IERC20;\\n\\n  // Minting price of each breed\\n  uint256 public constant MINT_PRICE_HUMAN = 0 ether;\\n  uint256 public constant MINT_PRICE_VAMPIRE = 0.15 ether;\\n  uint256 public constant MINT_PRICE_METAHUMAN = 0.05 ether;\\n  uint256 public constant MINT_PRICE_APE = 0.25 ether;\\n\\n  // Minting price of each breed during presale\\n  uint256 private constant MINT_PRICE_PRESALE_VAMPIRE = 0.12 ether;\\n  uint256 private constant MINT_PRICE_PRESALE_METAHUMAN = 0.04 ether;\\n  uint256 private constant MINT_PRICE_PRESALE_APE = 0.2 ether;\\n\\n  // Maximum total supply during presale\\n  uint24 private constant MAXIMUM_PRESALE_SUPPLY_VAMPIRE = 31;\\n  uint24 private constant MAXIMUM_PRESALE_SUPPLY_METAHUMAN = 21;\\n  uint24 private constant MAXIMUM_PRESALE_SUPPLY_APE = 53;\\n\\n  // Maximum total supply of the collection\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY = 1000000;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_MALE_HUMAN = 495000;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_HUMAN = 495000;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_MALE_VAMPIRE = 1500;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_VAMPIRE = 1500;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_MALE_METAHUMAN = 3000;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_METAHUMAN = 3000;\\n  uint24 public constant MAXIMUM_TOTAL_SUPPLY_OF_APE = 1000;\\n\\n  // Trait sizes\\n  uint256 private constant TRAIT_BASE_SIZE = 13;\\n  uint256 private constant TRAIT_NECKLACE_SIZE = 4;\\n  uint256 private constant TRAIT_FACIAL_MALE_SIZE = 25;\\n  uint256 private constant TRAIT_FACIAL_FEMALE_SIZE = 1;\\n  uint256 private constant TRAIT_EARRING_SIZE = 5;\\n  uint256 private constant TRAIT_HEAD_MALE_SIZE = 35;\\n  uint256 private constant TRAIT_HEAD_FEMALE_SIZE = 44;\\n  uint256 private constant TRAIT_GLASSES_SIZE = 7;\\n  uint256 private constant TRAIT_LIPSTICK_MALE_SIZE = 1;\\n  uint256 private constant TRAIT_LIPSTICK_FEMALE_SIZE = 6;\\n  uint256 private constant TRAIT_SMOKING_SIZE = 4;\\n\\n  // Base trait separator for each breed\\n  uint256 private constant TRAIT_BASE_HUMAN_SEPARATOR = 8;\\n  uint256 private constant TRAIT_BASE_VAMPIRE_SEPARATOR = 10;\\n  uint256 private constant TRAIT_BASE_METAHUMAN_SEPARATOR = 12;\\n  uint256 private constant TRAIT_BASE_APE_SEPARATOR = 13;\\n\\n  // Governance\\n  address public governance;\\n  address public emergencyAdmin;\\n\\n  // Descriptor\\n  IDescriptor public descriptor;\\n  bool public isDescriptorLocked;\\n\\n  // Royalties\\n  uint256 public royaltyBps;\\n  address public royaltyReceiver;\\n\\n  struct Data {\\n    // Presale ends after 1 week\\n    uint40 presaleStartTime;\\n    // Emergency stop of the claiming process\\n    bool isStopped;\\n    // Decremental counters, from maximum total supply to zero\\n    uint24 count;\\n    uint24 femaleHumans;\\n    uint24 maleHumans;\\n    uint24 femaleVampires;\\n    uint24 maleVampires;\\n    uint24 femaleMetahumans;\\n    uint24 maleMetahumans;\\n    uint24 apes;\\n  }\\n  Data private data;\\n\\n  // Combination of traits\\n  struct Combination {\\n    uint8 base;\\n    uint8 necklace;\\n    uint8 facial;\\n    uint8 earring;\\n    uint8 head;\\n    uint8 glasses;\\n    uint8 lipstick;\\n    uint8 smoking;\\n  }\\n  // Combinations: keccak256(combination) => tokenId\\n  mapping(bytes32 => uint256) private _combinationToId;\\n  // Combinations: tokenId => Combination\\n  mapping(uint256 => Combination) private _idToCombination;\\n\\n  // Mapping of human minters\\n  mapping(address => bool) private _hasMintedHuman;\\n\\n  /**\\n   * @dev Constructor\\n   * @param governance_ address of the governance\\n   * @param emergencyAdmin_ address of the emergency admin\\n   * @param descriptor_ address of the token descriptor\\n   * @param royaltyBps_ value of bps for royalties (e.g. 150 corresponds to 1.50%)\\n   * @param royaltyReceiver_ address of the royalties receiver\\n   * @param initialMintingRecipients_ array of recipients for the initial minting\\n   * @param initialMintingCombinations_ array of combinations for the initial minting\\n   */\\n  constructor(\\n    address governance_,\\n    address emergencyAdmin_,\\n    address descriptor_,\\n    uint256 royaltyBps_,\\n    address royaltyReceiver_,\\n    address[] memory initialMintingRecipients_,\\n    uint256[8][] memory initialMintingCombinations_\\n  ) ERC721('Decentralists', 'DCN') {\\n    governance = governance_;\\n    emergencyAdmin = emergencyAdmin_;\\n    descriptor = IDescriptor(descriptor_);\\n    royaltyBps = royaltyBps_;\\n    royaltyReceiver = royaltyReceiver_;\\n\\n    // Decremental counters\\n    data.count = MAXIMUM_TOTAL_SUPPLY;\\n    data.femaleHumans = MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_HUMAN;\\n    data.maleHumans = MAXIMUM_TOTAL_SUPPLY_OF_MALE_HUMAN;\\n    data.femaleVampires = MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_VAMPIRE;\\n    data.maleVampires = MAXIMUM_TOTAL_SUPPLY_OF_MALE_VAMPIRE;\\n    data.femaleMetahumans = MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_METAHUMAN;\\n    data.maleMetahumans = MAXIMUM_TOTAL_SUPPLY_OF_MALE_METAHUMAN;\\n    data.apes = MAXIMUM_TOTAL_SUPPLY_OF_APE;\\n\\n    // Initial minting\\n    unchecked {\\n      uint256 size = initialMintingRecipients_.length;\\n      for (uint256 i = 0; i < size; i++) {\\n        _claim(initialMintingCombinations_[i], initialMintingRecipients_[i]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Mint a token with given traits (array of 8 values)\\n   * @param traits set of traits of the token\\n   */\\n  function claim(uint256[8] calldata traits) external payable {\\n    require(!data.isStopped, 'CLAIM_STOPPED');\\n    require(!isPresale() && data.presaleStartTime != 0, 'SALE_NOT_ACTIVE');\\n    require(_validateCombination(traits), 'INVALID_COMBINATION');\\n    require(_checkValue(traits[0], false), 'INCORRECT_VALUE');\\n\\n    _claim(traits, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Mint a token with given traits (array of 8 values) during presale\\n   * @param traits set of traits of the token\\n   */\\n  function presaleClaim(uint256[8] calldata traits) external payable {\\n    require(!data.isStopped, 'CLAIM_STOPPED');\\n    require(isPresale() && data.presaleStartTime != 0, 'PRESALE_NOT_ACTIVE');\\n    require(_validateCombination(traits), 'INVALID_COMBINATION');\\n    require(!_humanBase(traits[0]), 'HUMANS_NOT_AVAILABLE');\\n    require(_checkValue(traits[0], true), 'INCORRECT_VALUE');\\n\\n    // Check breed counter during presale\\n    if (_vampireBase(traits[0])) {\\n      require(\\n        totalFemaleVampiresSupply() + totalMaleVampiresSupply() < MAXIMUM_PRESALE_SUPPLY_VAMPIRE,\\n        'NO_CLAIMS_AVAILABLE'\\n      );\\n    } else if (_metahumanBase(traits[0])) {\\n      require(\\n        totalFemaleMetahumansSupply() + totalMaleMetahumansSupply() <\\n          MAXIMUM_PRESALE_SUPPLY_METAHUMAN,\\n        'NO_CLAIMS_AVAILABLE'\\n      );\\n    } else {\\n      require(totalApesSupply() < MAXIMUM_PRESALE_SUPPLY_APE, 'NO_CLAIMS_AVAILABLE');\\n    }\\n\\n    _claim(traits, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Returns whether the combination given is available or not\\n   * @param traits set of traits of the combination\\n   * @return true if the combination is available, false otherwise\\n   */\\n  function isCombinationAvailable(uint256[8] calldata traits) external view returns (bool) {\\n    require(_validateCombination(traits), 'INVALID_COMBINATION');\\n    bytes32 hashedCombination = keccak256(\\n      abi.encodePacked(\\n        traits[0], // base\\n        traits[1], // necklace\\n        traits[2], // facial\\n        traits[3], // earring\\n        traits[4], // head\\n        traits[5], // glasses\\n        traits[6], // lipstick\\n        traits[7] // smoking\\n      )\\n    );\\n    return _combinationToId[hashedCombination] == 0;\\n  }\\n\\n  /**\\n   * @notice Returns whether the combination given is valid or not\\n   * @param traits set of traits of the combination to validate\\n   * @return true if the combination is valid, false otherwise\\n   */\\n  function isCombinationValid(uint256[8] calldata traits) external pure returns (bool) {\\n    return _validateCombination(traits);\\n  }\\n\\n  /**\\n   * @notice Returns whether the presale is active or not (1 week duration)\\n   * @return true if the presale is active, false otherwise\\n   */\\n  function isPresale() public view returns (bool) {\\n    return block.timestamp <= data.presaleStartTime + 1 weeks;\\n  }\\n\\n  /**\\n   * @notice Returns whether the claiming process is stopped or not\\n   * @return true if the claiming process is stop, false otherwise\\n   */\\n  function isEmergencyStopped() external view returns (bool) {\\n    return data.isStopped;\\n  }\\n\\n  /**\\n   * @notice Returns the token id of a given set of traits\\n   * @param traits set of traits of the token\\n   * @return token id\\n   */\\n  function getTokenId(uint256[8] calldata traits) external view returns (uint256) {\\n    bytes32 hashedCombination = keccak256(\\n      abi.encodePacked(\\n        traits[0], // base\\n        traits[1], // necklace\\n        traits[2], // facial\\n        traits[3], // earring\\n        traits[4], // head\\n        traits[5], // glasses\\n        traits[6], // lipstick\\n        traits[7] // smoking\\n      )\\n    );\\n    require(_combinationToId[hashedCombination] != 0, 'NOT_EXISTS');\\n    return _combinationToId[hashedCombination];\\n  }\\n\\n  /**\\n   * @notice Returns the set of traits given a token id\\n   * @param tokenId the id of the token\\n   * @return traits array\\n   */\\n  function getTraits(uint256 tokenId) external view returns (uint256[8] memory) {\\n    require(_exists(tokenId), 'NOT_EXISTS');\\n    return _getTraits(tokenId);\\n  }\\n\\n  /**\\n   * @notice Returns the set of traits given a token id\\n   * @param tokenId the id of the token\\n   * @return traits array\\n   */\\n  function _getTraits(uint256 tokenId) internal view returns (uint256[8] memory traits) {\\n    Combination memory c = _idToCombination[tokenId];\\n    traits[0] = c.base;\\n    traits[1] = c.necklace;\\n    traits[2] = c.facial;\\n    traits[3] = c.earring;\\n    traits[4] = c.head;\\n    traits[5] = c.glasses;\\n    traits[6] = c.lipstick;\\n    traits[7] = c.smoking;\\n  }\\n\\n  /**\\n   * @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token\\n   * @param tokenId token id\\n   * @return uri of the given `tokenId`\\n   */\\n  function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n    require(_exists(tokenId), 'NOT_EXISTS');\\n    return descriptor.tokenURI(_getTraits(tokenId));\\n  }\\n\\n  /**\\n   * @notice Returns whether the given address of the user has already minted a human or not\\n   * @param user address of the user\\n   * @return true if `user` has minted a human, false otherwise\\n   */\\n  function hasMintedHuman(address user) external view returns (bool) {\\n    return _hasMintedHuman[user];\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of female human tokens\\n   * @return total supply of female humans\\n   */\\n  function totalFemaleHumansSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_HUMAN - data.femaleHumans;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of male human tokens\\n   * @return total supply of male humans\\n   */\\n  function totalMaleHumansSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_MALE_HUMAN - data.maleHumans;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of female vampire tokens\\n   * @return total supply of female vampires\\n   */\\n  function totalFemaleVampiresSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_VAMPIRE - data.femaleVampires;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of male vampire tokens\\n   * @return total supply of male vampires\\n   */\\n  function totalMaleVampiresSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_MALE_VAMPIRE - data.maleVampires;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of female metahuman tokens\\n   * @return total supply of female metahumans\\n   */\\n  function totalFemaleMetahumansSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_METAHUMAN - data.femaleMetahumans;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of male metahuman tokens\\n   * @return total supply of male metahumans\\n   */\\n  function totalMaleMetahumansSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_MALE_METAHUMAN - data.maleMetahumans;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of ape tokens\\n   * @return total supply of apes\\n   */\\n  function totalApesSupply() public view returns (uint256) {\\n    return MAXIMUM_TOTAL_SUPPLY_OF_APE - data.apes;\\n  }\\n\\n  /**\\n   * @notice Returns the starting time of the presale (0 if it did not start yet)\\n   * @return starting time of the presale\\n   */\\n  function presaleStartTime() external view returns (uint256) {\\n    return uint256(data.presaleStartTime);\\n  }\\n\\n  /**\\n   * @notice Returns how much royalty is owed and to whom, based on the sale price\\n   * @param tokenId token id of the NFT asset queried for royalty information\\n   * @param salePrice sale price of the NFT asset specified by `tokenId`\\n   * @return receiver address of the royalty payment\\n   * @return amount of the royalty payment for `salePrice`\\n   */\\n  function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n    external\\n    view\\n    override(IERC2981)\\n    returns (address, uint256)\\n  {\\n    require(_exists(tokenId), 'NOT_EXISTS');\\n    return (royaltyReceiver, (salePrice * royaltyBps) / 10000);\\n  }\\n\\n  /**\\n   * @dev Checks if the contract supports the given interface\\n   * @param interfaceId The identifier of the interface\\n   * @return True if the interface is supported, false otherwise\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721Enumerable, IERC165)\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @notice Activate the presale\\n   * @dev Only callable by governance\\n   */\\n  function startPresale() external onlyGovernance {\\n    require(data.presaleStartTime == 0, 'PRESALE_ALREADY_STARTED');\\n    data.presaleStartTime = uint40(block.timestamp);\\n    emit PresaleStart();\\n  }\\n\\n  /**\\n   * @notice Pull ETH funds from the contract to the given recipient\\n   * @dev Only callable by governance\\n   * @param recipient address to transfer the funds to\\n   * @param amount amount of funds to transfer\\n   */\\n  function pullFunds(address recipient, uint256 amount) external onlyGovernance {\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'UNABLE_TO_PULL');\\n    emit FundsWithdrawal(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Pull ERC20 token funds from the contract to the given recipient\\n   * @dev Only callable by governance\\n   * @param asset address of the ERC20 token to transfer\\n   * @param recipient address to transfer the funds to\\n   * @param amount amount of funds to transfer\\n   */\\n  function pullTokens(\\n    address asset,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyGovernance {\\n    IERC20(asset).safeTransfer(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Update the governance address\\n   * @dev Only callable by governance\\n   * @param newGovernance address of the new governance\\n   */\\n  function setGovernance(address newGovernance) external onlyGovernance {\\n    address oldGovernance = governance;\\n    governance = newGovernance;\\n\\n    emit GovernanceUpdate(oldGovernance, newGovernance);\\n  }\\n\\n  /**\\n   * @notice Update the descriptor address\\n   * @dev Only callable by governance when descriptor is not locked\\n   * @param newDescriptor address of the new descriptor\\n   */\\n  function setDescriptor(address newDescriptor) external onlyGovernance whenDescriptorNotLocked {\\n    address oldDescriptor = address(descriptor);\\n    descriptor = IDescriptor(newDescriptor);\\n\\n    emit DescriptorUpdate(oldDescriptor, newDescriptor);\\n  }\\n\\n  /**\\n   * @notice Lock the ability to update the descriptor address\\n   * @dev Only callable by governance when descriptor is not locked\\n   */\\n  function lockDescriptor() external onlyGovernance whenDescriptorNotLocked {\\n    isDescriptorLocked = true;\\n\\n    emit DescriptorLock(address(descriptor));\\n  }\\n\\n  /**\\n   * @notice Update the royalty basis points (e.g. a value of 150 corresponds to 1.50%)\\n   * @dev Only callable by governance\\n   * @param newRoyaltyBps value of the new royalty bps\\n   */\\n  function setRoyaltyBps(uint256 newRoyaltyBps) external onlyGovernance {\\n    uint256 oldRoyaltyBps = royaltyBps;\\n    royaltyBps = newRoyaltyBps;\\n\\n    emit RoyaltyBpsUpdate(oldRoyaltyBps, newRoyaltyBps);\\n  }\\n\\n  /**\\n   * @notice Update the royalty receiver\\n   * @dev Only callable by governance\\n   * @param newRoyaltyReceiver address of the new royalty receiver\\n   */\\n  function setRoyaltyReceiver(address newRoyaltyReceiver) external onlyGovernance {\\n    address oldRoyaltyReceiver = royaltyReceiver;\\n    royaltyReceiver = newRoyaltyReceiver;\\n\\n    emit RoyaltyReceiverUpdate(oldRoyaltyReceiver, newRoyaltyReceiver);\\n  }\\n\\n  /**\\n   * @notice Stops the claiming process of the contract in case of emergency\\n   * @dev Only callable by emergency admin\\n   * @param isStopped true to stop the claiming process, false otherwise\\n   */\\n  function emergencyStop(bool isStopped) external {\\n    require(msg.sender == emergencyAdmin, 'ONLY_BY_EMERGENCY_ADMIN');\\n    data.isStopped = isStopped;\\n\\n    emit EmergencyStop(isStopped);\\n  }\\n\\n  /**\\n   * @notice Update the emergency admin address\\n   * @dev Only callable by emergency admin\\n   * @param newEmergencyAdmin address of the new emergency admin\\n   */\\n  function setEmergencyAdmin(address newEmergencyAdmin) external {\\n    require(msg.sender == emergencyAdmin, 'ONLY_BY_EMERGENCY_ADMIN');\\n\\n    address oldEmergencyAdmin = emergencyAdmin;\\n    emergencyAdmin = newEmergencyAdmin;\\n\\n    emit EmergencyAdminUpdate(oldEmergencyAdmin, newEmergencyAdmin);\\n  }\\n\\n  /**\\n   * @notice Mint a token to the receiver\\n   * @param traits set of traits of the token\\n   * @param receiver receiver address\\n   */\\n  function _claim(uint256[8] memory traits, address receiver) internal {\\n    require(msg.sender == tx.origin, 'ONLY_EOA');\\n    require(data.count > 0, 'NO_CLAIMS_AVAILABLE');\\n\\n    uint256 base = traits[0];\\n    bytes32 hashedCombination = keccak256(\\n      abi.encodePacked(\\n        base, // base\\n        traits[1], // necklace\\n        traits[2], // facial\\n        traits[3], // earring\\n        traits[4], // head\\n        traits[5], // glasses\\n        traits[6], // lipstick\\n        traits[7] // smoking\\n      )\\n    );\\n    require(_combinationToId[hashedCombination] == 0, 'ALREADY_EXISTS');\\n    if (_humanBase(base)) {\\n      require(!_hasMintedHuman[msg.sender], 'INVALID_HUMAN_MINTER');\\n      _hasMintedHuman[msg.sender] = true;\\n    }\\n\\n    // TokenId (0 is reserved)\\n    uint256 tokenId = MAXIMUM_TOTAL_SUPPLY - data.count + 1;\\n\\n    // Update breed counter\\n    if (_humanBase(base)) {\\n      if (_isMale(base)) {\\n        data.maleHumans--;\\n      } else {\\n        data.femaleHumans--;\\n      }\\n    } else if (_vampireBase(base)) {\\n      if (_isMale(base)) {\\n        data.maleVampires--;\\n      } else {\\n        data.femaleVampires--;\\n      }\\n    } else if (_metahumanBase(base)) {\\n      if (_isMale(base)) {\\n        data.maleMetahumans--;\\n      } else {\\n        data.femaleMetahumans--;\\n      }\\n    } else {\\n      data.apes--;\\n    }\\n    data.count--;\\n\\n    // Traits\\n    _combinationToId[hashedCombination] = tokenId;\\n    _idToCombination[tokenId] = Combination({\\n      base: uint8(base),\\n      necklace: uint8(traits[1]),\\n      facial: uint8(traits[2]),\\n      earring: uint8(traits[3]),\\n      head: uint8(traits[4]),\\n      glasses: uint8(traits[5]),\\n      lipstick: uint8(traits[6]),\\n      smoking: uint8(traits[7])\\n    });\\n\\n    _mint(receiver, tokenId);\\n\\n    emit DecentralistMint(tokenId, receiver, traits);\\n  }\\n\\n  /**\\n   * @notice Check the transaction value is correct given a base and whether the presale is active\\n   * @param base value of the base trait\\n   * @param inPresale true if presale is active, false otherwise\\n   * @return true if the transaction value is correct, false otherwise\\n   */\\n  function _checkValue(uint256 base, bool inPresale) internal view returns (bool) {\\n    if (_humanBase(base)) {\\n      return msg.value == MINT_PRICE_HUMAN;\\n    } else if (_vampireBase(base)) {\\n      return inPresale ? msg.value == MINT_PRICE_PRESALE_VAMPIRE : msg.value == MINT_PRICE_VAMPIRE;\\n    } else if (_metahumanBase(base)) {\\n      return\\n        inPresale ? msg.value == MINT_PRICE_PRESALE_METAHUMAN : msg.value == MINT_PRICE_METAHUMAN;\\n    } else if (_apeBase(base)) {\\n      return inPresale ? msg.value == MINT_PRICE_PRESALE_APE : msg.value == MINT_PRICE_APE;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Check whether a set of traits is a valid combination or not\\n   * @dev Even numbers of base trait corresponds to male\\n   * @param traits set of traits of the token\\n   * @return true if it is a valid combination, false otherwise\\n   */\\n  function _validateCombination(uint256[8] calldata traits) internal pure returns (bool) {\\n    bool isMale = _isMale(traits[0]);\\n    if (\\n      isMale &&\\n      traits[0] < TRAIT_BASE_SIZE &&\\n      traits[1] < TRAIT_NECKLACE_SIZE &&\\n      traits[2] < TRAIT_FACIAL_MALE_SIZE &&\\n      traits[3] < TRAIT_EARRING_SIZE &&\\n      traits[4] < TRAIT_HEAD_MALE_SIZE &&\\n      traits[5] < TRAIT_GLASSES_SIZE &&\\n      traits[6] < TRAIT_LIPSTICK_MALE_SIZE &&\\n      traits[7] < TRAIT_SMOKING_SIZE\\n    ) {\\n      return true;\\n    } else if (\\n      !isMale &&\\n      traits[0] < TRAIT_BASE_SIZE &&\\n      traits[1] < TRAIT_NECKLACE_SIZE &&\\n      traits[2] < TRAIT_FACIAL_FEMALE_SIZE &&\\n      traits[3] < TRAIT_EARRING_SIZE &&\\n      traits[4] < TRAIT_HEAD_FEMALE_SIZE &&\\n      traits[5] < TRAIT_GLASSES_SIZE &&\\n      traits[6] < TRAIT_LIPSTICK_FEMALE_SIZE &&\\n      traits[7] < TRAIT_SMOKING_SIZE\\n    ) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns true if the base trait corresponds to human breed\\n   * @param base value of the base trait\\n   * @return True if the base corresponds to human breed, false otherwise\\n   */\\n  function _humanBase(uint256 base) internal pure returns (bool) {\\n    return base < TRAIT_BASE_HUMAN_SEPARATOR;\\n  }\\n\\n  /**\\n   * @notice Returns true if the base trait corresponds to vampire breed\\n   * @param base value of the base trait\\n   * @return True if the base corresponds to vampire breed, false otherwise\\n   */\\n  function _vampireBase(uint256 base) internal pure returns (bool) {\\n    return base >= TRAIT_BASE_HUMAN_SEPARATOR && base < TRAIT_BASE_VAMPIRE_SEPARATOR;\\n  }\\n\\n  /**\\n   * @notice Returns true if the base trait corresponds to metahuman breed\\n   * @param base value of the base trait\\n   * @return True if the base corresponds to metahuman breed, false otherwise\\n   */\\n  function _metahumanBase(uint256 base) internal pure returns (bool) {\\n    return base >= TRAIT_BASE_VAMPIRE_SEPARATOR && base < TRAIT_BASE_METAHUMAN_SEPARATOR;\\n  }\\n\\n  /**\\n   * @notice Returns true if the base trait corresponds to ape breed\\n   * @param base value of the base trait\\n   * @return True if the base corresponds to ape breed, false otherwise\\n   */\\n  function _apeBase(uint256 base) internal pure returns (bool) {\\n    return base >= TRAIT_BASE_METAHUMAN_SEPARATOR && base < TRAIT_BASE_APE_SEPARATOR;\\n  }\\n\\n  /**\\n   * @notice Returns true if the base trait corresponds to male sex\\n   * @param base value of the base trait\\n   * @return True if the base corresponds to male sex, false otherwise\\n   */\\n  function _isMale(uint256 base) internal pure returns (bool) {\\n    return base % 2 == 0;\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens\\n   * @param from origin address of the transfer\\n   * @param to recipient address of the transfer\\n   * @param tokenId id of the token to transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721Enumerable) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Functions marked by this modifier can only be called when descriptor is not locked\\n   **/\\n  modifier whenDescriptorNotLocked() {\\n    require(!isDescriptorLocked, 'DESCRIPTOR_LOCKED');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Functions marked by this modifier can only be called by governance\\n   **/\\n  modifier onlyGovernance() {\\n    require(msg.sender == governance, 'ONLY_BY_GOVERNANCE');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Emitted when a new token is minted\\n   * @param tokenId token id\\n   * @param recipient address of the recipient of the token\\n   * @param traits set of traits of the token\\n   */\\n  event DecentralistMint(uint256 indexed tokenId, address indexed recipient, uint256[8] traits);\\n\\n  /**\\n   * @dev Emitted when the presale starts\\n   */\\n  event PresaleStart();\\n\\n  /**\\n   * @dev Emitted when funds are withdraw\\n   * @param recipient address of the recipient of the funds\\n   * @param amount amount of the funds withdraw\\n   */\\n  event FundsWithdrawal(address indexed recipient, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when the governance address is updated\\n   * @param oldGovernance address of the old governance\\n   * @param newGovernance address of the new governance\\n   */\\n  event GovernanceUpdate(address indexed oldGovernance, address indexed newGovernance);\\n\\n  /**\\n   * @dev Emitted when the emergency admin stops the claiming process\\n   * @param isStopped true if it is stopped, false otherwise\\n   */\\n  event EmergencyStop(bool isStopped);\\n\\n  /**\\n   * @dev Emitted when the emergency admin address is updated\\n   * @param oldEmergencyAdmin address of the old emergency admin\\n   * @param newEmergencyAdmin address of the new emergency admin\\n   */\\n  event EmergencyAdminUpdate(address indexed oldEmergencyAdmin, address indexed newEmergencyAdmin);\\n\\n  /**\\n   * @dev Emitted when the descriptor address is updated\\n   * @param oldDescriptor address of the old descriptor\\n   * @param newDescriptor address of the new descriptor\\n   */\\n  event DescriptorUpdate(address indexed oldDescriptor, address indexed newDescriptor);\\n\\n  /**\\n   * @dev Emitted when the descriptor is locked\\n   * @param descriptor address of the descriptor\\n   */\\n  event DescriptorLock(address indexed descriptor);\\n\\n  /**\\n   * @dev Emitted when the royalty bps value is updated\\n   * @param oldRoyaltyBps old value of the royalty bps\\n   * @param newRoyaltyBps new value of the royalty bps\\n   */\\n  event RoyaltyBpsUpdate(uint256 oldRoyaltyBps, uint256 newRoyaltyBps);\\n\\n  /**\\n   * @dev Emitted when the royalty receiver is updated\\n   * @param oldRoyaltyReceiver address of the old royalty receiver\\n   * @param newRoyaltyReceiver address of the new royalty receiver\\n   */\\n  event RoyaltyReceiverUpdate(\\n    address indexed oldRoyaltyReceiver,\\n    address indexed newRoyaltyReceiver\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/token/IDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IDescriptor {\\n  function tokenURI(uint256[8] calldata) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emergencyAdmin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"descriptor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBps_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialMintingRecipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[8][]\",\"name\":\"initialMintingCombinations_\",\"type\":\"uint256[8][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"DecentralistMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"descriptor\",\"type\":\"address\"}],\"name\":\"DescriptorLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDescriptor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDescriptor\",\"type\":\"address\"}],\"name\":\"DescriptorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldEmergencyAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmergencyAdmin\",\"type\":\"address\"}],\"name\":\"EmergencyAdminUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStopped\",\"type\":\"bool\"}],\"name\":\"EmergencyStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRoyaltyBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyBpsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRoyaltyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyReceiver\",\"type\":\"address\"}],\"name\":\"RoyaltyReceiverUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_APE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_HUMAN\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_METAHUMAN\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_FEMALE_VAMPIRE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_MALE_HUMAN\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_MALE_METAHUMAN\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TOTAL_SUPPLY_OF_MALE_VAMPIRE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_APE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_HUMAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_METAHUMAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_VAMPIRE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract IDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isStopped\",\"type\":\"bool\"}],\"name\":\"emergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasMintedHuman\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"isCombinationAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"isCombinationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDescriptorLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"traits\",\"type\":\"uint256[8]\"}],\"name\":\"presaleClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDescriptor\",\"type\":\"address\"}],\"name\":\"setDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEmergencyAdmin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyReceiver\",\"type\":\"address\"}],\"name\":\"setRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalApesSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFemaleHumansSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFemaleMetahumansSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFemaleVampiresSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaleHumansSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaleMetahumansSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaleVampiresSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Decentralists", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b731cdfee9ce9e9bacffec2c13aafc647231678bbf2ccecbdc7480fe212835d"}]}