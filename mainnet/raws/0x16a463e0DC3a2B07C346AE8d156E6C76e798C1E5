{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/game/MetadataHandlerMigrated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./lib/Base64.sol\\\";\\nimport \\\"./interfaces/InterfacesMigrated.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// solhint-disable quotes\\n\\ncontract MetadataHandlerMigrated is Ownable {\\n  using Strings for uint256;\\n\\n  InventoryCelestialsLike public inventoryCelestials;\\n\\n  InventoryFreaksLike public inventoryFreaks;\\n\\n  constructor(address newInventoryCelestials, address newInventoryFreaks) {\\n    inventoryCelestials = InventoryCelestialsLike(newInventoryCelestials);\\n    inventoryFreaks = InventoryFreaksLike(newInventoryFreaks);\\n  }\\n\\n  function setInventories(address newInventoryCelestials, address newInventoryFreaks) external onlyOwner {\\n    inventoryCelestials = InventoryCelestialsLike(newInventoryCelestials);\\n    inventoryFreaks = InventoryFreaksLike(newInventoryFreaks);\\n  }\\n\\n  function getCelestialTokenURI(uint256 id, CelestialV2 memory character) external view returns (string memory) {\\n    bytes memory name = abi.encodePacked(\\\"Celestial #\\\", id.toString());\\n    bytes memory attributes = inventoryCelestials.getAttributes(character, id);\\n    bytes memory svg = _buildSVG(inventoryCelestials.getImage(id));\\n    return string(_buildJSON(name, attributes, svg));\\n  }\\n\\n  function getFreakTokenURI(uint256 id, Freak memory character) external view returns (string memory) {\\n    bytes memory name = abi.encodePacked(\\\"Freak #\\\", id.toString());\\n    bytes memory attributes = inventoryFreaks.getAttributes(character, id);\\n    bytes memory svg = _buildSVG(inventoryFreaks.getImage(character));\\n    return string(_buildJSON(name, attributes, svg));\\n  }\\n\\n  function _buildSVG(bytes memory data) internal pure returns (bytes memory) {\\n    bytes memory output = abi.encodePacked(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" id=\\\"character\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 64 64\\\">',\\n      data,\\n      \\\"<style>#character{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>\\\"\\n    );\\n\\n    return abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(bytes(output)));\\n  }\\n\\n  function _buildJSON(\\n    bytes memory name,\\n    bytes memory attributes,\\n    bytes memory image\\n  ) internal pure returns (bytes memory) {\\n    bytes memory output = abi.encodePacked(\\n      '{\\\"name\\\":\\\"',\\n      name,\\n      '\\\",\\\"description\\\":\\\"Build your guild, battle your foes with the first on-chain PvP. Hunt for fortune and glory shall be yours!\\\",\\\"attributes\\\":[',\\n      attributes,\\n      '],\\\"image\\\":\\\"',\\n      image,\\n      '\\\"}'\\n    );\\n\\n    return abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(output));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/game/lib/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n  string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n        // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n        // write 4 characters\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/game/interfaces/InterfacesMigrated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.11;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ninterface MetadataHandlerLike {\\n  function getCelestialTokenURI(uint256 id, CelestialV2 memory character) external view returns (string memory);\\n\\n  function getFreakTokenURI(uint256 id, Freak memory character) external view returns (string memory);\\n}\\n\\ninterface InventoryCelestialsLike {\\n  function getAttributes(CelestialV2 memory character, uint256 id) external pure returns (bytes memory);\\n\\n  function getImage(uint256 id) external view returns (bytes memory);\\n}\\n\\ninterface InventoryFreaksLike {\\n  function getAttributes(Freak memory character, uint256 id) external view returns (bytes memory);\\n\\n  function getImage(Freak memory character) external view returns (bytes memory);\\n}\\n\\ninterface IFnG {\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 id\\n  ) external;\\n\\n  function ownerOf(uint256 id) external returns (address owner);\\n\\n  function isFreak(uint256 tokenId) external view returns (bool);\\n\\n  function getSpecies(uint256 tokenId) external view returns (uint8);\\n\\n  function getFreakAttributes(uint256 tokenId) external view returns (Freak memory);\\n\\n  function setFreakAttributes(uint256 tokenId, Freak memory attributes) external;\\n\\n  function getCelestialAttributes(uint256 tokenId) external view returns (Celestial memory);\\n\\n  function setCelestialAttributes(uint256 tokenId, Celestial memory attributes) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\\ninterface IFBX {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(address from, uint256 amount) external;\\n}\\n\\ninterface ICKEY {\\n  function ownerOf(uint256 tokenId) external returns (address);\\n}\\n\\ninterface IVAULT {\\n  function depositsOf(address account) external view returns (uint256[] memory);\\n  function _depositedBlocks(address account, uint256 tokenId) external returns(uint256);\\n}\\n\\ninterface ERC20Like {\\n  function balanceOf(address from) external view returns (uint256 balance);\\n\\n  function burn(address from, uint256 amount) external;\\n\\n  function mint(address from, uint256 amount) external;\\n\\n  function transfer(address to, uint256 amount) external;\\n}\\n\\ninterface ERC1155Like {\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n\\n  function burn(\\n    address from,\\n    uint256 id,\\n    uint256 amount\\n  ) external;\\n}\\n\\ninterface ERC721Like {\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 id\\n  ) external;\\n\\n  function transfer(address to, uint256 id) external;\\n\\n  function ownerOf(uint256 id) external returns (address owner);\\n\\n  function mint(address to, uint256 tokenid) external;\\n}\\n\\ninterface PortalLike {\\n  function sendMessage(bytes calldata) external;\\n}\\n\\ninterface IHUNTING {\\n  function huntFromMigration(address owner, uint256[] calldata tokenIds, uint256 pool) external;\\n  function observeFromMigration(address owner, uint256[] calldata tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/game/interfaces/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nstruct Freak {\\n  uint8 species;\\n  uint8 body;\\n  uint8 armor;\\n  uint8 mainHand;\\n  uint8 offHand;\\n  uint8 power;\\n  uint8 health;\\n  uint8 criticalStrikeMod;\\n\\n}\\nstruct Celestial {\\n  uint8 healthMod;\\n  uint8 powMod;\\n  uint8 cPP;\\n  uint8 cLevel;\\n}\\n\\nstruct CelestialV2 {\\n  uint8 healthMod;\\n  uint8 powMod;\\n  uint8 cPP;\\n  uint8 cLevel;\\n  uint8 forging;\\n  uint8 skill1;\\n  uint8 skill2;\\n}\\n\\nstruct Layer {\\n  string name;\\n  string data;\\n}\\n\\nstruct LayerInput {\\n  string name;\\n  string data;\\n  uint8 layerIndex;\\n  uint8 itemIndex;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInventoryCelestials\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newInventoryFreaks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"healthMod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"powMod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cPP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"forging\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"}],\"internalType\":\"struct CelestialV2\",\"name\":\"character\",\"type\":\"tuple\"}],\"name\":\"getCelestialTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"species\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mainHand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"offHand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"power\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"health\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"criticalStrikeMod\",\"type\":\"uint8\"}],\"internalType\":\"struct Freak\",\"name\":\"character\",\"type\":\"tuple\"}],\"name\":\"getFreakTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryCelestials\",\"outputs\":[{\"internalType\":\"contract InventoryCelestialsLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryFreaks\",\"outputs\":[{\"internalType\":\"contract InventoryFreaksLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInventoryCelestials\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newInventoryFreaks\",\"type\":\"address\"}],\"name\":\"setInventories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetadataHandlerMigrated", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000336a4e56e0662511047991497320f09b15117b4b0000000000000000000000007a2cf50997619379776034b3e9e68a68cce1ee90", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}