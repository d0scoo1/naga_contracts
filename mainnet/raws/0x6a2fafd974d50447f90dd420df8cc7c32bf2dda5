{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Realesae {\r\n\r\n    address public manager;         // manager\r\n    IERC20 public token;            // token contract\r\n    \r\n    uint256 total;                  // total release amount\r\n    uint[] times;                   // release time\r\n    uint[] radios;                  // release radio\r\n    uint[] amounts;                 // release amounts\r\n    uint256 wTime = 0;              // withdraw times\r\n    \r\n    /*\r\n     * constructor\r\n     */\r\n    constructor(IERC20 _token, uint256 _total) {\r\n\r\n        token = IERC20(_token);\r\n        total = _total * 10**token.decimals();\r\n\r\n        times = [1684339200, 1684339200, 1747497600, 1779033600, 1810569600, 1842192000];\r\n        radios = [5, 15, 20, 20, 20, 20];\r\n        for ( uint i = 0; i < radios.length; i++ ) {\r\n            amounts.push(total * radios[i] / 100);\r\n        }\r\n        \r\n        manager = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * release times\r\n     */\r\n    function releaseTimes() public view returns(uint[] memory) {\r\n        return times;\r\n    }\r\n\r\n    /*\r\n     * release radios\r\n     */\r\n    function releaseRadios() public view returns(uint[] memory) {\r\n        return radios;\r\n    }\r\n\r\n    /*\r\n     * release amounts\r\n     */\r\n    function releaseAmounts() public view returns(uint[] memory) {\r\n        return amounts;\r\n    }\r\n\r\n    /**\r\n     * withdraw\r\n     */\r\n    function withdraw(address _receiver) public onlyManager {\r\n\r\n        uint _now = block.timestamp;\r\n        require(_now >= times[0], \"it is not time to release !\");\r\n        require(token.balanceOf(address(this)) > 0, \"the balanceOf contract is zero !\");\r\n        \r\n        uint256 _total;\r\n        for ( uint i = 0; i < amounts.length; i++ ) {\r\n            _total = _total + amounts[i];\r\n        }\r\n        require(_total > 0, \"the amount has been released in full!\");\r\n\r\n        uint256 released = 0; \r\n        if (times[0] < _now && _now < times[1]) {\r\n            released = amounts[0];\r\n            amounts[0] = 0;\r\n        } else if (times[1] < _now && _now < times[2]) {\r\n            released = amounts[0] + amounts[1];\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n        } else if (times[2] < _now && _now < times[3]) {\r\n            released = amounts[0] + amounts[1] + amounts[2];\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            amounts[2] = 0;\r\n        } else if (times[3] < _now && _now < times[4]) {\r\n            released = amounts[0] + amounts[1] + amounts[2] + amounts[3];\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            amounts[2] = 0;\r\n            amounts[3] = 0;\r\n        } else if (times[4] < _now && _now < times[5]) {\r\n            released = amounts[0] + amounts[1] + amounts[2] + amounts[3] + amounts[4];\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            amounts[2] = 0;\r\n            amounts[3] = 0;\r\n            amounts[4] = 0;\r\n        } else if (_now > times[5] ) {\r\n            released = amounts[0] + amounts[1] + amounts[2] + amounts[3] + amounts[4] + amounts[5];\r\n            amounts[0] = 0;\r\n            amounts[1] = 0;\r\n            amounts[2] = 0;\r\n            amounts[3] = 0;\r\n            amounts[4] = 0;\r\n            amounts[5] = 0;\r\n        }\r\n        require(released > 0, \"no amount need released !\");\r\n        require(released <= token.balanceOf(address(this)), \"the balanceOf contract is not enough !\");\r\n\r\n        token.transfer(_receiver, released);\r\n    }\r\n\r\n    /*\r\n     * set manager\r\n     */\r\n    function setManager(address _manager) public onlyManager returns(address) {\r\n        manager = _manager;\r\n        return manager;\r\n    }\r\n\r\n    /*\r\n     * only manager\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseRadios\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTimes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Realesae", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009376495f279ef7c99b91a24ee373d784cc74b09e00000000000000000000000000000000000000000000000000000000004c4b40", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47e1aa689df9722a2865f79903547a9667dd09df2dd55a70f29ebf7b00f384b9"}]}