{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IDelegatedMintable {\r\n  function mint(address recipient, uint256 tokenId) external;\r\n  function mintMany(address recipient, uint256 tokenIdStart, uint256 count) external;\r\n  function totalSupply() external view returns(uint256);\r\n}\r\n\r\ncontract FCFSMinter is Ownable {\r\n  /**\r\n   * @notice Thrown when the price sent is incorrect.\r\n   */\r\n  error IncorrectPrice();\r\n\r\n  /**\r\n   * @notice Thrown when minting is paused.\r\n   */\r\n  error Paused();\r\n\r\n  /**\r\n   * @notice Thrown when there are no more tokens left.\r\n   */\r\n  error SupplyExhausted();\r\n\r\n  /**\r\n   * @notice The token we are minting.\r\n   */\r\n  IDelegatedMintable public token;\r\n\r\n  /**\r\n   * @notice The price per token.\r\n   */\r\n  uint256 public price;\r\n\r\n  /**\r\n   * @notice Amount of tokens remaining.\r\n   */\r\n  uint256 public remainingSupply;\r\n\r\n  /**\r\n   * @notice Whether or not minting is paused.\r\n   */\r\n  bool public paused;\r\n\r\n  /**\r\n   * @notice The beneficiary of minting proceeds.\r\n   */\r\n  address public beneficiary;\r\n\r\n  constructor(\r\n    address _token,\r\n    uint256 _price,\r\n    address _beneficiary,\r\n    uint256 _supply\r\n  ) {\r\n    token = IDelegatedMintable(_token);\r\n    remainingSupply = _supply;\r\n    price = _price;\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  function mint(uint256 amount) external payable {\r\n    if (paused) {\r\n      revert Paused();\r\n    }\r\n\r\n    if (amount > remainingSupply) {\r\n      revert SupplyExhausted();\r\n    }\r\n\r\n    if (msg.value != price * amount) {\r\n      revert IncorrectPrice();\r\n    }\r\n\r\n    remainingSupply -= amount;\r\n    token.mintMany(msg.sender, token.totalSupply(), amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Pause or unpause the contract.\r\n   */\r\n  function setPaused(bool pause) external onlyOwner {\r\n    paused = pause;\r\n  }\r\n\r\n  /**\r\n   * @notice Set the mint price.\r\n   */\r\n  function setPrice(uint256 _price) external onlyOwner {\r\n    price = _price;\r\n  }\r\n\r\n  /**\r\n   * @notice Set the remaining supply. The new remaining supply must be lower than\r\n   * the current remaining supply.\r\n   */\r\n  function setRemainingSupply(uint256 _remaingSupply) external onlyOwner {\r\n    require(_remaingSupply < remainingSupply);\r\n    remainingSupply = _remaingSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice Withdraw funds to the beneficiary address.\r\n   */\r\n  function withdraw() external onlyOwner {\r\n    (bool success,) = beneficiary.call{value: address(this).balance}(\"\");\r\n    require(success);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyExhausted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_remaingSupply\",\"type\":\"uint256\"}],\"name\":\"setRemainingSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IDelegatedMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FCFSMinter", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "0000000000000000000000009caa88cd430eabf401bbfcd611d0305205228b0500000000000000000000000000000000000000000000000000c3663566a58000000000000000000000000000dafd368df40b8c0a8c117c02fc9c863bc6082ab50000000000000000000000000000000000000000000000000000000000000bb8", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://04949bd871b699fe811296725eb81b88f2a159cfa0984a1e49e4a151401310b0"}]}