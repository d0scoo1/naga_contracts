{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/RiseTokenFactory.sol\n// SPDX-License-Identifier: MIT AND GPL-3.0-or-later\npragma solidity =0.8.11 >=0.8.0 <0.9.0 >=0.8.1 <0.9.0;\npragma experimental ABIEncoderV2;\n\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../utils/Context.sol\"; */\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../IERC20.sol\"; */\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"./IERC20.sol\"; */\n/* import \"./extensions/IERC20Metadata.sol\"; */\n/* import \"../../utils/Context.sol\"; */\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/* pragma solidity ^0.8.1; */\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../IERC20.sol\"; */\n/* import \"../../../utils/Address.sol\"; */\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n////// src/interfaces/IRariFusePriceOracle.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Rari Fuse Price Oracle Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IRariFusePriceOracle {\n    /**\n     * @notice Gets the price in ETH of `_token`\n     * @param _token ERC20 token address\n     * @return _price Price in 1e18 precision\n     */\n    function price(address _token) external view returns (uint256 _price);\n}\n\n////// src/interfaces/IRariFusePriceOracleAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IRariFusePriceOracle } from \"./IRariFusePriceOracle.sol\"; */\n\n/**\n * @title Rari Fuse Price Oracle Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Adapter for Rari Fuse Price Oracle\n */\ninterface IRariFusePriceOracleAdapter {\n    /// \u2588\u2588\u2588 Types \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Oracle metadata\n     * @param oracle The Rari Fuse oracle\n     * @param decimals The token decimals\n     */\n    struct OracleMetadata {\n        IRariFusePriceOracle oracle;\n        uint8 decimals;\n    }\n\n\n    /// \u2588\u2588\u2588 Events \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Event emitted when oracle data is updated\n     * @param token The ERC20 address\n     * @param metadata The oracle metadata\n     */\n    event OracleConfigured(\n        address token,\n        OracleMetadata metadata\n    );\n\n\n    /// \u2588\u2588\u2588 Errors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Error is raised when base or quote token oracle is not exists\n    error OracleNotExists(address token);\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Configure oracle for token\n     * @param _token The ERC20 token\n     * @param _rariFusePriceOracle Contract that conform IRariFusePriceOracle interface\n     */\n    function configure(\n        address _token,\n        address _rariFusePriceOracle\n    ) external;\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Returns true if oracle for the `_token` is configured\n     * @param _token The token address\n     */\n    function isConfigured(address _token) external view returns (bool);\n\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Gets the price of `_token` in terms of ETH (1e18 precision)\n     * @param _token Token address (e.g. gOHM)\n     * @return _price Price in ETH (1e18 precision)\n     */\n    function price(address _token) external view returns (uint256 _price);\n\n    /**\n     * @notice Gets the price of `_base` in terms of `_quote`.\n     *         For example gOHM/USDC will return current price of gOHM in USDC.\n     *         (1e6 precision)\n     * @param _base Base token address (e.g. gOHM/XXX)\n     * @param _quote Quote token address (e.g. XXX/USDC)\n     * @return _price Price in quote decimals precision (e.g. USDC is 1e6)\n     */\n    function price(\n        address _base,\n        address _quote\n    ) external view returns (uint256 _price);\n\n}\n\n////// src/adapters/RariFusePriceOracleAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import { IERC20Metadata } from \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\"; */\n\n/* import { IRariFusePriceOracleAdapter } from \"../interfaces/IRariFusePriceOracleAdapter.sol\"; */\n/* import { IRariFusePriceOracle } from \"../interfaces/IRariFusePriceOracle.sol\"; */\n\n/**\n * @title Rari Fuse Price Oracle Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Adapter for Rari Fuse Price Oracle\n */\ncontract RariFusePriceOracleAdapter is IRariFusePriceOracleAdapter, Ownable {\n    /// \u2588\u2588\u2588 Storages \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Map token to Rari Fuse Price oracle contract\n    mapping(address => OracleMetadata) public oracles;\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRariFusePriceOracleAdapter\n    function configure(address _token, address _rariFusePriceOracle) external onlyOwner {\n        oracles[_token] = OracleMetadata({\n            oracle: IRariFusePriceOracle(_rariFusePriceOracle),\n            decimals: IERC20Metadata(_token).decimals()\n        });\n        emit OracleConfigured(_token, oracles[_token]);\n    }\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRariFusePriceOracleAdapter\n    function isConfigured(address _token) external view returns (bool) {\n        if (oracles[_token].decimals == 0) return false;\n        return true;\n    }\n\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRariFusePriceOracleAdapter\n    function price(address _token) public view returns (uint256 _price) {\n        if (oracles[_token].decimals == 0) revert OracleNotExists(_token);\n        _price = oracles[_token].oracle.price(_token);\n    }\n\n    /// @inheritdoc IRariFusePriceOracleAdapter\n    function price(address _base, address _quote) external view returns (uint256 _price) {\n        uint256 basePriceInETH = price(_base);\n        uint256 quotePriceInETH = price(_quote);\n        uint256 priceInETH = (basePriceInETH * 1e18) / quotePriceInETH;\n        _price = (priceInETH * (10**oracles[_quote].decimals)) / 1e18;\n    }\n}\n\n////// src/interfaces/IUniswapAdapterCaller.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap Adapter Caller Interface\n * @author bayu (github.com/pyk)\n * @notice Contract that interact with Uniswap Adapter should implement this interface.\n */\ninterface IUniswapAdapterCaller {\n    /**\n     * @notice Function that will be executed by Uniswap Adapter to finish the flash swap.\n     *         The caller will receive _amountOut of the specified tokenOut.\n     * @param _wethAmount The amount of WETH that the caller need to send back to the Uniswap Adapter\n     * @param _amountOut The amount of of tokenOut transfered to the caller.\n     * @param _data Data passed by the caller.\n     */\n    function onFlashSwapWETHForExactTokens(uint256 _wethAmount, uint256 _amountOut, bytes calldata _data) external;\n}\n\n////// src/interfaces/IUniswapV2Pair.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V2 Pair Interface\n * @author bayu (github.com/pyk)\n */\ninterface IUniswapV2Pair {\n    function token1() external view returns (address);\n    function token0() external view returns (address);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}\n\n////// src/interfaces/IUniswapV3Pool.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V3 Pool Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IUniswapV3Pool {\n    /// @notice Docs: https://docs.uniswap.org/protocol/reference/core/UniswapV3Pool#swap\n    function swap(address _recipient, bool _zeroForOne, int256 _amountSpecified, uint160 _sqrtPriceLimitX96, bytes memory _data) external returns (int256 amount0, int256 amount1);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function fee() external view returns (uint24);\n}\n\n////// src/interfaces/IUniswapAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n\n/* import { IUniswapV2Pair } from \"../interfaces/IUniswapV2Pair.sol\"; */\n/* import { IUniswapV3Pool } from \"../interfaces/IUniswapV3Pool.sol\"; */\n/* import { IUniswapAdapterCaller } from \"../interfaces/IUniswapAdapterCaller.sol\"; */\n\n/**\n * @title Uniswap Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Utility contract to interact with Uniswap V2 & V3\n */\ninterface IUniswapAdapter {\n    /// \u2588\u2588\u2588 Types \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice The supported Uniswap version\n     */\n    enum UniswapVersion {\n        UniswapV2,\n        UniswapV3\n    }\n\n    /**\n     * @notice Liquidity data for specified token\n     * @param version The address of Rise Token\n     * @param pair The Uniswap V2 pair address\n     * @param pool The Uniswap V3 pool address\n     * @param router The Uniswap router address\n     */\n    struct LiquidityData {\n        UniswapVersion version;\n        IUniswapV2Pair pair;\n        IUniswapV3Pool pool;\n        address router;\n    }\n\n    /**\n     * @notice Parameters to do flash swap WETH->tokenOut\n     * @param tokenOut The output token\n     * @param caller The flash swap caller\n     * @param liquidityData Liquidi\n     * @param amountOut The amount of tokenOut that will be received by\n     *        this contract\n     * @param wethAmount The amount of WETH required to finish the flash swap\n     */\n    struct FlashSwapWETHForExactTokensParams {\n        IERC20 tokenOut;\n        IUniswapAdapterCaller caller;\n        LiquidityData liquidityData;\n        uint256 amountOut;\n        uint256 wethAmount;\n    }\n\n    /// @notice Flash swap types\n    enum FlashSwapType {\n        FlashSwapWETHForExactTokens\n    }\n\n\n    /// \u2588\u2588\u2588 Events \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Event emitted when token is configured\n     * @param liquidityData The liquidity data of the token\n     */\n    event TokenConfigured(LiquidityData liquidityData);\n\n    /**\n     * @notice Event emitted when flash swap succeeded\n     * @param params The flash swap params\n     */\n    event FlashSwapped(FlashSwapWETHForExactTokensParams params);\n\n\n    /// \u2588\u2588\u2588 Errors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Error is raised when owner use invalid uniswap version\n    error InvalidUniswapVersion(uint8 version);\n\n    /// @notice Error is raised when invalid amount\n    error InvalidAmount(uint256 amount);\n\n    /// @notice Error is raised when token is not configured\n    error TokenNotConfigured(address token);\n\n    /// @notice Error is raised when the callback is called by unkown pair/pool\n    error CallerNotAuthorized();\n\n    /// @notice Error is raised when the caller not repay the token\n    error CallerNotRepay();\n\n    /// @notice Error is raised when this contract receive invalid amount when flashswap\n    error FlashSwapReceivedAmountInvalid(uint256 expected, uint256 got);\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Configure the token\n     * @param _token The ERC20 token\n     * @param _version The Uniswap version (2 or 3)\n     * @param _pairOrPool The contract address of the TOKEN/ETH pair or pool\n     * @param _router The Uniswap V2 or V3 router address\n     */\n    function configure(\n        address _token,\n        UniswapVersion _version,\n        address _pairOrPool,\n        address _router\n    ) external;\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Returns true if token is configured\n     * @param _token The token address\n     */\n    function isConfigured(address _token) external view returns (bool);\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Borrow exact amount of tokenOut and repay it with WETH.\n     *         The Uniswap Adapter will call msg.sender#onFlashSwapWETHForExactTokens.\n     * @param _tokenOut The address of ERC20 that swapped\n     * @param _amountOut The exact amount of tokenOut that will be received by the caller\n     */\n    function flashSwapWETHForExactTokens(\n        address _tokenOut,\n        uint256 _amountOut,\n        bytes memory _data\n    ) external;\n\n    /**\n     * @notice Swaps an exact amount of input tokenIn for as many WETH as possible\n     * @param _tokenIn tokenIn address\n     * @param _amountIn The amount of tokenIn\n     * @param _amountOutMin The minimum amount of WETH to be received\n     * @return _amountOut The WETH amount received\n     */\n    function swapExactTokensForWETH(\n        address _tokenIn,\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Swaps an exact amount of WETH for as few tokenIn as possible.\n     * @param _tokenIn tokenIn address\n     * @param _wethAmount The amount of tokenIn\n     * @param _amountInMax The minimum amount of WETH to be received\n     * @return _amountIn The WETH amount received\n     */\n    function swapTokensForExactWETH(\n        address _tokenIn,\n        uint256 _wethAmount,\n        uint256 _amountInMax\n    ) external returns (uint256 _amountIn);\n\n    /**\n     * @notice Swaps an exact amount of WETH for tokenOut\n     * @param _tokenOut tokenOut address\n     * @param _wethAmount The amount of WETH\n     * @param _amountOutMin The minimum amount of WETH to be received\n     * @return _amountOut The WETH amount received\n     */\n    function swapExactWETHForTokens(\n        address _tokenOut,\n        uint256 _wethAmount,\n        uint256 _amountOutMin\n    ) external returns (uint256 _amountOut);\n\n}\n\n////// src/interfaces/IUniswapV2Router02.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V2 Router Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint[] memory amounts);\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n\n////// src/interfaces/IUniswapV3SwapRouter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Uniswap V3 Swap Router Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\n\ninterface IUniswapV3SwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n    function exactInputSingle(ExactInputSingleParams memory params) external returns (uint256 amountOut);\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n    function exactOutputSingle(ExactOutputSingleParams memory params) external returns (uint256 amountIn);\n}\n\n////// src/interfaces/IWETH9.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n\n/**\n * @title WETH Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n */\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n\n////// src/adapters/UniswapAdapter.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n/* import { SafeERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\"; */\n\n/* import { IUniswapAdapter } from \"../interfaces/IUniswapAdapter.sol\"; */\n/* import { IUniswapV2Router02 } from \"../interfaces/IUniswapV2Router02.sol\"; */\n/* import { IUniswapV2Pair } from \"../interfaces/IUniswapV2Pair.sol\"; */\n/* import { IUniswapV3Pool } from \"../interfaces/IUniswapV3Pool.sol\"; */\n/* import { IUniswapV3SwapRouter } from \"../interfaces/IUniswapV3SwapRouter.sol\"; */\n/* import { IUniswapAdapterCaller } from \"../interfaces/IUniswapAdapterCaller.sol\"; */\n\n/* import { IWETH9 } from \"../interfaces/IWETH9.sol\"; */\n\n/**\n * @title Uniswap Adapter\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Utility contract to interact with Uniswap V2 & V3\n */\ncontract UniswapAdapter is IUniswapAdapter, Ownable {\n    /// \u2588\u2588\u2588 Libraries \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IWETH9;\n\n    /// \u2588\u2588\u2588 Storages \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice WETH address\n    IWETH9 public weth;\n\n    /// @notice Mapping token to their liquidity metadata\n    mapping(address => LiquidityData) public liquidities;\n\n    /// @notice Whitelisted pair/pool that can call the callback\n    mapping(address => bool) private isValidCallbackCaller;\n\n\n    /// \u2588\u2588\u2588 Constuctors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    constructor(address _weth) {\n        weth = IWETH9(_weth);\n    }\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function configure(address _token, UniswapVersion _version, address _pairOrPool, address _router) external onlyOwner {\n        isValidCallbackCaller[_pairOrPool] = true;\n        liquidities[_token] = LiquidityData({\n            version: _version,\n            pool: IUniswapV3Pool(_pairOrPool),\n            pair: IUniswapV2Pair(_pairOrPool),\n            router: _router\n        });\n        emit TokenConfigured(liquidities[_token]);\n    }\n\n\n    /// \u2588\u2588\u2588 Internal functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Executed when flashSwapWETHForExactTokens is triggered\n    function onFlashSwapWETHForExactTokens(FlashSwapWETHForExactTokensParams memory _params, bytes memory _data) internal {\n        // Transfer the tokenOut to caller\n        _params.tokenOut.safeTransfer(address(_params.caller), _params.amountOut);\n\n        // Execute the callback\n        uint256 prevBalance = weth.balanceOf(address(this));\n        _params.caller.onFlashSwapWETHForExactTokens(_params.wethAmount, _params.amountOut, _data);\n        uint256 balance = weth.balanceOf(address(this));\n\n        // Check the balance\n        if (balance < prevBalance + _params.wethAmount) revert CallerNotRepay();\n\n        // Transfer the WETH to the Uniswap V2 pair or pool\n        if (_params.liquidityData.version == UniswapVersion.UniswapV2) {\n            weth.safeTransfer(address(_params.liquidityData.pair), _params.wethAmount);\n        } else {\n            weth.safeTransfer(address(_params.liquidityData.pool), _params.wethAmount);\n        }\n\n        emit FlashSwapped(_params);\n    }\n\n\n    /// \u2588\u2588\u2588 Callbacks \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    function uniswapV2Call(address _sender, uint256 _amount0, uint256 _amount1, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n\n        // Check caller\n        if (!isValidCallbackCaller[msg.sender]) revert CallerNotAuthorized();\n        if (_sender != address(this)) revert CallerNotAuthorized();\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Get the data\n        (FlashSwapType flashSwapType, bytes memory data) = abi.decode(_data, (FlashSwapType, bytes));\n\n        // Continue execute the function based on the flash swap type\n        if (flashSwapType == FlashSwapType.FlashSwapWETHForExactTokens) {\n            (FlashSwapWETHForExactTokensParams memory params, bytes memory callData) = abi.decode(data, (FlashSwapWETHForExactTokensParams,bytes));\n            // Check the amount out\n            uint256 amountOut = _amount0 == 0 ? _amount1 : _amount0;\n            if (params.amountOut != amountOut) revert FlashSwapReceivedAmountInvalid(params.amountOut, amountOut);\n\n            // Calculate the WETH amount\n            address[] memory path = new address[](2);\n            path[0] = address(weth);\n            path[1] = address(params.tokenOut);\n            params.wethAmount = IUniswapV2Router02(params.liquidityData.router).getAmountsIn(params.amountOut, path)[0];\n\n            onFlashSwapWETHForExactTokens(params, callData);\n            return;\n        }\n    }\n\n    function uniswapV3SwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n\n        // Check caller\n        if (!isValidCallbackCaller[msg.sender]) revert CallerNotAuthorized();\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Get the data\n        (FlashSwapType flashSwapType, bytes memory data) = abi.decode(_data, (FlashSwapType, bytes));\n\n        // Continue execute the function based on the flash swap type\n        if (flashSwapType == FlashSwapType.FlashSwapWETHForExactTokens) {\n            (FlashSwapWETHForExactTokensParams memory params, bytes memory callData) = abi.decode(data, (FlashSwapWETHForExactTokensParams,bytes));\n\n            // if amount negative then it must be the amountOut, otherwise it's weth amount\n            uint256 amountOut = _amount0Delta < 0 ?  uint256(-1 * _amount0Delta) : uint256(-1 * _amount1Delta);\n            params.wethAmount = _amount0Delta > 0 ? uint256(_amount0Delta) : uint256(_amount1Delta);\n\n            // Check the amount out\n            if (params.amountOut != amountOut) revert FlashSwapReceivedAmountInvalid(params.amountOut, amountOut);\n\n            onFlashSwapWETHForExactTokens(params, callData);\n            return;\n        }\n    }\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function isConfigured(address _token) public view returns (bool) {\n        if (liquidities[_token].router == address(0)) return false;\n        return true;\n    }\n\n    /// \u2588\u2588\u2588 Adapters \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IUniswapAdapter\n    function flashSwapWETHForExactTokens(address _tokenOut, uint256 _amountOut, bytes memory _data) external {\n        /// \u2588\u2588\u2588 Checks\n        if (_amountOut == 0) revert InvalidAmount(0);\n        if (!isConfigured(_tokenOut)) revert TokenNotConfigured(_tokenOut);\n\n        // Check the metadata\n        LiquidityData memory metadata = liquidities[_tokenOut];\n\n        /// \u2588\u2588\u2588 Interactions\n\n        // Initialize the params\n        FlashSwapWETHForExactTokensParams memory params = FlashSwapWETHForExactTokensParams({\n            tokenOut: IERC20(_tokenOut),\n            amountOut: _amountOut,\n            caller: IUniswapAdapterCaller(msg.sender),\n            liquidityData: metadata,\n            wethAmount: 0 // Initialize as zero; It will be updated in the callback\n        });\n        bytes memory data = abi.encode(FlashSwapType.FlashSwapWETHForExactTokens, abi.encode(params, _data));\n\n        // Flash swap Uniswap V2; The pair address will call uniswapV2Callback function\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Get amountOut for token and weth\n            uint256 amount0Out = _tokenOut == metadata.pair.token0() ? _amountOut : 0;\n            uint256 amount1Out = _tokenOut == metadata.pair.token1() ? _amountOut : 0;\n\n            // Do the flash swap\n            metadata.pair.swap(amount0Out, amount1Out, address(this), data);\n            return;\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // zeroForOne (true: token0 -> token1) (false: token1 -> token0)\n            bool zeroForOne = _tokenOut == metadata.pool.token1() ? true : false;\n\n            // amountSpecified (Exact input: positive) (Exact output: negative)\n            int256 amountSpecified = -1 * int256(_amountOut);\n            uint160 sqrtPriceLimitX96 = (zeroForOne ? 4295128740 : 1461446703485210103287273052203988822378723970341);\n\n            // Perform swap\n            metadata.pool.swap(address(this), zeroForOne, amountSpecified, sqrtPriceLimitX96, data);\n            return;\n        }\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapExactTokensForWETH(address _tokenIn, uint256 _amountIn, uint256 _amountOutMin) external returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenIn)) revert TokenNotConfigured(_tokenIn);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenIn];\n        IERC20(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountIn);\n        IERC20(_tokenIn).safeIncreaseAllowance(metadata.router, _amountIn);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = _tokenIn;\n            path[1] = address(weth);\n            _amountOut = IUniswapV2Router02(metadata.router).swapExactTokensForTokens(_amountIn, _amountOutMin, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactInputSingleParams memory params = IUniswapV3SwapRouter.ExactInputSingleParams({\n                tokenIn: _tokenIn,\n                tokenOut: address(weth),\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: _amountIn,\n                amountOutMinimum: _amountOutMin,\n                sqrtPriceLimitX96: 0\n            });\n            _amountOut = IUniswapV3SwapRouter(metadata.router).exactInputSingle(params);\n        }\n\n        return _amountOut;\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapTokensForExactWETH(address _tokenIn, uint256 _wethAmount, uint256 _amountInMax) external returns (uint256 _amountIn) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenIn)) revert TokenNotConfigured(_tokenIn);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenIn];\n        IERC20(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountInMax);\n        IERC20(_tokenIn).safeIncreaseAllowance(metadata.router, _amountInMax);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = _tokenIn;\n            path[1] = address(weth);\n            _amountIn = IUniswapV2Router02(metadata.router).swapTokensForExactTokens(_wethAmount, _amountInMax, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactOutputSingleParams memory params = IUniswapV3SwapRouter.ExactOutputSingleParams({\n                tokenIn: _tokenIn,\n                tokenOut: address(weth),\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountOut: _wethAmount,\n                amountInMaximum: _amountInMax,\n                sqrtPriceLimitX96: 0\n            });\n            _amountIn = IUniswapV3SwapRouter(metadata.router).exactOutputSingle(params);\n        }\n\n        if (_amountInMax > _amountIn) {\n            // Transfer back excess token\n            IERC20(_tokenIn).safeTransfer(msg.sender, _amountInMax - _amountIn);\n        }\n        return _amountIn;\n    }\n\n    /// @inheritdoc IUniswapAdapter\n    function swapExactWETHForTokens(address _tokenOut, uint256 _wethAmount, uint256 _amountOutMin) external returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (!isConfigured(_tokenOut)) revert TokenNotConfigured(_tokenOut);\n\n        /// \u2588\u2588\u2588 Interactions\n        LiquidityData memory metadata = liquidities[_tokenOut];\n        IERC20(address(weth)).safeTransferFrom(msg.sender, address(this), _wethAmount);\n        weth.safeIncreaseAllowance(metadata.router, _wethAmount);\n\n        if (metadata.version == UniswapVersion.UniswapV2) {\n            // Do the swap\n            address[] memory path = new address[](2);\n            path[0] = address(weth);\n            path[1] = _tokenOut;\n            _amountOut = IUniswapV2Router02(metadata.router).swapExactTokensForTokens(_wethAmount, _amountOutMin, path, msg.sender, block.timestamp)[1];\n        }\n\n        if (metadata.version == UniswapVersion.UniswapV3) {\n            // Do the swap\n            IUniswapV3SwapRouter.ExactInputSingleParams memory params = IUniswapV3SwapRouter.ExactInputSingleParams({\n                tokenIn: address(weth),\n                tokenOut: _tokenOut,\n                fee: metadata.pool.fee(),\n                recipient: msg.sender,\n                deadline: block.timestamp,\n                amountIn: _wethAmount,\n                amountOutMinimum: _amountOutMin,\n                sqrtPriceLimitX96: 0\n            });\n            _amountOut = IUniswapV3SwapRouter(metadata.router).exactInputSingle(params);\n        }\n\n        return _amountOut;\n    }\n}\n\n////// src/interfaces/IRiseTokenFactory.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { UniswapAdapter } from \"../adapters/UniswapAdapter.sol\"; */\n/* import { RariFusePriceOracleAdapter } from \"../adapters/RariFusePriceOracleAdapter.sol\"; */\n\n/**\n * @title Rise Token Factory Interface\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Factory contract for creating Rise Token\n */\ninterface IRiseTokenFactory {\n    /// \u2588\u2588\u2588 Events \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Event emitted when new Rise Token is created\n     * @param token The address of Rise Token\n     * @param fCollateral The address of Rari Fuse token that used as collateral\n     * @param fDebt The address of Rari Fuse token that used as debt\n     * @param totalTokens The total tokens created by this factory\n     */\n    event TokenCreated(\n        address token,\n        address fCollateral,\n        address fDebt,\n        uint256 totalTokens\n    );\n\n    /**\n     * @notice Event emitted when feeRecipient is updated\n     * @param newRecipient The new fee recipient address\n     */\n    event FeeRecipientUpdated(address newRecipient);\n\n\n    /// \u2588\u2588\u2588 Errors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Error is raised when Rise Token already exists\n     * @param token The Rise Token that already exists with the same collateral\n     *               and debt pair\n     */\n    error TokenExists(address token);\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Sets fee recipient\n     * @param _newRecipient New fee recipient\n     */\n    function setFeeRecipient(address _newRecipient) external;\n\n    /**\n     * @notice Creates new Rise Token\n     * @param _fCollateral fToken from Rari Fuse that used as collateral asset\n     * @param _fDebt fToken from Rari Fuse that used as debt asset\n     * @return _token The Rise Token address\n     */\n    function create(\n        address _fCollateral,\n        address _fDebt,\n        address _uniswapAdapter,\n        address _oracleAdapter\n    ) external returns (address _token);\n\n}\n\n////// src/interfaces/IfERC20.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Rari Fuse ERC20 Interface\n * @author bayu (github.com/pyk)\n * @dev docs: https://docs.rari.capital/fuse/#ftoken-s\n */\ninterface IfERC20 {\n    function mint(uint256 mintAmount) external returns (uint256);\n    function redeem(uint256 redeemTokens) external returns (uint256);\n    function redeemUnderlying(uint redeemAmount) external returns (uint256);\n    function borrow(uint256 borrowAmount) external returns (uint256);\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n    function accrualBlockNumber() external returns (uint256);\n    function borrowBalanceCurrent(address account) external returns (uint256);\n    function comptroller() external returns (address);\n    function underlying() external returns (address);\n    function balanceOfUnderlying(address account) external returns (uint256);\n    function totalBorrowsCurrent() external returns (uint256);\n}\n\n////// src/RiseTokenFactory.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import { IERC20Metadata } from \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\"; */\n\n/* import { IfERC20 } from \"./interfaces/IfERC20.sol\"; */\n/* import { IRiseTokenFactory } from \"./interfaces/IRiseTokenFactory.sol\"; */\n\n/* import { RiseToken } from \"./RiseToken.sol\"; */\n/* import { UniswapAdapter } from \"./adapters/UniswapAdapter.sol\"; */\n/* import { RariFusePriceOracleAdapter } from \"./adapters/RariFusePriceOracleAdapter.sol\"; */\n\n/**\n * @title Rise Token Factory\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice Factory contract to create new Rise Token\n */\ncontract RiseTokenFactory is IRiseTokenFactory, Ownable {\n    /// \u2588\u2588\u2588 Storages \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    address[] public tokens;\n    mapping(address => mapping(address => address)) public getToken;\n    address public feeRecipient;\n\n\n    /// \u2588\u2588\u2588 Constructors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    constructor(address _feeRecipient) {\n        feeRecipient = _feeRecipient;\n    }\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRiseTokenFactory\n    function setFeeRecipient(address _newRecipient) external onlyOwner {\n        feeRecipient = _newRecipient;\n        emit FeeRecipientUpdated(_newRecipient);\n    }\n\n    /// @inheritdoc IRiseTokenFactory\n    function create(address _fCollateral, address _fDebt, address _uniswapAdapter, address _oracleAdapter) external onlyOwner returns (address _token) {\n        address collateral = IfERC20(_fCollateral).underlying();\n        address debt = IfERC20(_fDebt).underlying();\n        if (getToken[collateral][debt] != address(0)) revert TokenExists(getToken[collateral][debt]);\n\n        /// \u2588\u2588\u2588 Contract deployment\n        bytes memory creationCode = type(RiseToken).creationCode;\n        string memory tokenName = string(abi.encodePacked(IERC20Metadata(collateral).symbol(), \" 2x Long Risedle\"));\n        string memory tokenSymbol = string(abi.encodePacked(IERC20Metadata(collateral).symbol(), \"RISE\"));\n        bytes memory constructorArgs = abi.encode(tokenName, tokenSymbol, address(this), _fCollateral, _fDebt, _uniswapAdapter, _oracleAdapter);\n        bytes memory bytecode = abi.encodePacked(creationCode, constructorArgs);\n        bytes32 salt = keccak256(abi.encodePacked(_fCollateral, _fDebt));\n        assembly {\n            _token := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        getToken[_fCollateral][_fDebt] = _token;\n        getToken[_fDebt][_fCollateral] = _token; // populate mapping in the reverse direction\n        tokens.push(_token);\n\n        emit TokenCreated(_token, _fCollateral, _fDebt, tokens.length);\n    }\n}\n\n////// src/interfaces/IFuseComptroller.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/**\n * @title Rari Fuse Comptroller Interface\n * @author bayu (github.com/pyk)\n * @dev docs: https://docs.rari.capital/fuse/#comptroller\n */\ninterface IFuseComptroller {\n    function getAccountLiquidity(address account) external returns (uint256 error, uint256 liquidity, uint256 shortfall);\n    function enterMarkets(address[] calldata fTokens) external returns (uint256[] memory);\n}\n\n////// src/interfaces/IRiseToken.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { IERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n/* import { ERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"; */\n\n/**\n * @title Rise Token\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice 2x Long Token powered by Rari Fuse\n */\ninterface IRiseToken is IERC20 {\n\n    /// \u2588\u2588\u2588 Types \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Flashswap types\n    enum FlashSwapType {\n        Initialize,\n        Buy,\n        Sell\n    }\n\n    /**\n     * @notice Parameters that used to initialize the Rise Token\n     * @param borrowAmount The target borrow amount\n     * @param collateralAmount The target collateral amount\n     * @param shares The target initial supply of the Rise Token\n     * @param leverageRatio The target leverage ratio of the Rise Token\n     * @param nav The net-asset value of the Rise Token\n     * @param ethAmount The maximum amount of ETH that used to initialize the\n     *                  total collateral and total debt\n     * @param initialize The initialize() executor\n     */\n    struct InitializeParams {\n        uint256 borrowAmount;\n        uint256 collateralAmount;\n        uint256 shares;\n        uint256 leverageRatio;\n        uint256 nav;\n        uint256 ethAmount;\n        address initializer;\n    }\n\n    /**\n     * @notice Parameters that used to buy the Rise Token\n     * @param buyer The msg.sender\n     * @param recipient The address that will receive the Rise Token\n     * @param tokenIn The ERC20 that used to buy the Rise Token\n     * @param collateralAmount The amount of token that will supplied to Rari Fuse\n     * @param debtAmount The amount of token that will borrowed from Rari Fuse\n     * @param shares The amount of Rise Token to be minted\n     * @param fee The amount of Rise Token as fee\n     * @param amountInMax The maximum amount of tokenIn, useful for setting the\n     *                    slippage tolerance.\n     * @param nav The net-asset value of the Rise Token\n     */\n    struct BuyParams {\n        address buyer;\n        address recipient;\n        ERC20 tokenIn;\n        uint256 collateralAmount;\n        uint256 debtAmount;\n        uint256 shares;\n        uint256 fee;\n        uint256 amountInMax;\n        uint256 nav;\n    }\n\n    /**\n     * @notice Parameters that used to buy the Rise Token\n     * @param seller The msg.sender\n     * @param recipient The address that will receive the tokenOut\n     * @param tokenOut The ERC20 that will received by recipient\n     * @param collateralAmount The amount of token that will redeemed from Rari Fuse\n     * @param debtAmount The amount of token that will repay to Rari Fuse\n     * @param shares The amount of Rise Token to be burned\n     * @param fee The amount of Rise Token as fee\n     * @param amountOutMin The minimum amount of tokenOut, useful for setting the\n     *                    slippage tolerance.\n     * @param nav The net-asset value of the Rise Token\n     */\n    struct SellParams {\n        address seller;\n        address recipient;\n        ERC20 tokenOut;\n        uint256 collateralAmount;\n        uint256 debtAmount;\n        uint256 shares;\n        uint256 fee;\n        uint256 amountOutMin;\n        uint256 nav;\n    }\n\n\n    /// \u2588\u2588\u2588 Events \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Event emitted when the Rise Token is initialized\n     * @param params The initialization parameters\n     */\n    event Initialized(InitializeParams params);\n\n    /// @notice Event emitted when user buy the token\n    event Buy(BuyParams params);\n\n    /// @notice Event emitted when user sell the token\n    event Sell(SellParams params);\n\n    /**\n     * @notice Event emitted when params updated\n     * @param maxLeverageRatio The maximum leverage ratio\n     * @param minLeverageRatio The minimum leverage ratio\n     * @param step The rebalancing step\n     * @param discount The incentives for the market makers\n     * @param maxBuy The maximum amount to buy in one transaction\n     */\n    event ParamsUpdated(\n        uint256 maxLeverageRatio,\n        uint256 minLeverageRatio,\n        uint256 step,\n        uint256 discount,\n        uint256 maxBuy\n    );\n\n    /// \u2588\u2588\u2588 Errors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @notice Error is raised if the caller of onFlashSwapWETHForExactTokens is\n    ///         not Uniswap Adapter contract\n    error NotUniswapAdapter();\n\n    /// @notice Error is raised if mint amount is invalid\n    error InputAmountInvalid();\n\n    /// @notice Error is raised if the owner run the initialize() twice\n    error AlreadyInitialized();\n\n    /// @notice Error is raised if buy & sell is executed before the FLT is initialized\n    error NotInitialized();\n\n    /// @notice Error is raised if slippage too high\n    error SlippageTooHigh();\n\n    /// @notice Error is raised if contract failed to send ETH\n    error FailedToSendETH(address to, uint256 amount);\n\n    /// @notice Error is raised if rebalance is executed but leverage ratio is invalid\n    // error NoNeedToRebalance(uint256 leverageRatio);\n    error NoNeedToRebalance();\n\n    /// @notice Error is raised if liqudity to buy or sell collateral is not enough\n    error LiquidityIsNotEnough();\n\n    /// @notice Error is raised if something happen when interacting with Rari Fuse\n    error FuseError(uint256 code);\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Update the Rise Token parameters\n     * @param _minLeverageRatio Minimum leverage ratio\n     * @param _maxLeverageRatio Maximum leverage ratio\n     * @param _step Rebalancing step\n     * @param _discount Discount for market makers to incentivize the rebalance\n     */\n    function setParams(\n        uint256 _minLeverageRatio,\n        uint256 _maxLeverageRatio,\n        uint256 _step,\n        uint256 _discount,\n        uint256 _maxBuy\n    ) external;\n\n    /**\n     * @notice Initialize the Rise Token using ETH\n     * @param _params The initialization parameters\n     */\n    function initialize(InitializeParams memory _params) external payable;\n\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Gets the total collateral per share\n     * @return _cps Collateral per share in collateral token decimals precision\n     *         (ex: gOHM is 1e18 precision)\n     */\n    function collateralPerShare() external view returns (uint256 _cps);\n\n    /**\n     * @notice Gets the total debt per share\n     * @return _dps Debt per share in debt token decimals precision\n     *         (ex: USDC is 1e6 precision)\n     */\n    function debtPerShare() external view returns (uint256 _dps);\n\n    /**\n     * @notice Gets the value of the Rise Token in ETH\n     * @param _shares The amount of Rise Token\n     * @return _value The value of the Rise Token in 1e18 precision\n     */\n    function value(uint256 _shares) external view returns (uint256 _value);\n\n    /**\n     * @notice Gets the net-asset value of the Rise Token in specified token\n     * @dev This function may revert if _quote token is not configured in Rari\n     *      Fuse Price Oracle\n     * @param _shares The amount of Rise Token\n     * @param _quote The token address used as quote\n     * @return _value The net-asset value of the Rise Token in token decimals\n     *                precision (ex: USDC is 1e6)\n     */\n    function value(\n        uint256 _shares,\n        address _quote\n    ) external view returns (uint256 _value);\n\n    /**\n     * @notice Gets the net-asset value of the Rise Token in ETH\n     * @return _nav The net-asset value of the Rise Token in 1e18 precision\n     */\n    function nav() external view returns (uint256 _nav);\n\n    /**\n     * @notice Gets the leverage ratio of the Rise Token\n     * @return _lr Leverage ratio in 1e18 precision\n     */\n    function leverageRatio() external view returns (uint256 _lr);\n\n\n    /// \u2588\u2588\u2588 User actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * @notice Buy Rise Token with tokenIn. New Rise Token supply will be minted.\n     * @param _shares The amount of Rise Token to buy\n     * @param _recipient The recipient of the transaction.\n     * @param _tokenIn ERC20 used to buy the Rise Token\n     */\n    function buy(\n        uint256 _shares,\n        address _recipient,\n        address _tokenIn,\n        uint256 _amountInMax\n    ) external payable;\n\n    /**\n     * @notice Sell Rise Token for tokenOut. The _shares amount of Rise Token will be burned.\n     * @param _shares The amount of Rise Token to sell\n     * @param _recipient The recipient of the transaction\n     * @param _tokenOut The output token\n     * @param _amountOutMin The minimum amount of output token\n     */\n    function sell(\n        uint256 _shares,\n        address _recipient,\n        address _tokenOut,\n        uint256 _amountOutMin\n    ) external;\n\n\n    /// \u2588\u2588\u2588 Market makers \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /**\n     * Rise Token is designed in such way that users get protection against\n     * liquidation, while market makers are well-incentivized to execute the\n     * rebalancing process.\n     *\n     * ===== Leveraging Up\n     * When collateral (ex: gOHM) price is going up, the net-asset value of\n     * Rise Token (ex: gOHMRISE) will going up and the leverage ratio of\n     * the Rise Token will going down.\n     *\n     * If leverage ratio is below specified minimum leverage ratio (ex: 1.7x),\n     * Rise Token need to borrow more asset from Rari Fuse (ex: USDC), in order\n     * to buy more collateral then supply the collateral to Rari Fuse.\n     *\n     * If leverageRatio < minLeverageRatio:\n     *     Rise Token want collateral (ex: gOHM)\n     *     Rise Token have liquid asset (ex: USDC)\n     *\n     * Market makers can swap collateral to ETH if leverage ratio below minimal\n     * Leverage ratio.\n     *\n     * ===== Leveraging Down\n     * When collateral (ex: gOHM) price is going down, the net-asset value of\n     * Rise Token (ex: gOHMRISE) will going down and the leverage ratio of\n     * the Rise Token will going up.\n     *\n     * If leverage ratio is above specified maximum leverage ratio (ex: 2.3x),\n     * Rise Token need to sell collateral in order to repay debt to Rari Fuse.\n     *\n     * If leverageRatio > maxLeverageRatio:\n     *     Rise Token want liquid asset (ex: USDC)\n     *     Rise Token have collateral (ex: gOHM)\n     *\n     * Market makers can swap ETH to collateral if leverage ratio above maximum\n     * Leverage ratio.\n     *\n     * -----------\n     *\n     * In order to incentives the swap process, Rise Token will give specified\n     * discount price 0.6%.\n     *\n     * swapColleteralForETH -> Market Makers can sell collateral +0.6% above the\n     *                         market price\n     *\n     * swapETHForCollateral -> Market Makers can buy collateral -0.6% below the\n     *                         market price\n     *\n     * In this case, market price is determined using Rari Fuse Oracle Adapter.\n     *\n     */\n\n     /**\n      * @notice Swaps collateral for ETH\n      * @dev Anyone can execute this if leverage ratio is below minimum.\n      * @param _amountIn The amount of collateral\n      * @param _amountOutMin The minimum amount of ETH to be received\n      * @return _amountOut The amount of ETH that received by msg.sender\n      */\n    function swapExactCollateralForETH(\n        uint256 _amountIn,\n        uint256 _amountOutMin\n    ) external returns (uint256 _amountOut);\n\n     /**\n      * @notice Swaps ETH for collateral\n      * @dev Anyone can execute this if leverage ratio is below minimum.\n      * @param _amountOutMin The minimum amount of collateral\n      * @return _amountOut The amount of collateral\n      */\n    function swapExactETHForCollateral(\n        uint256 _amountOutMin\n    ) external payable returns (uint256 _amountOut);\n\n}\n\n////// src/RiseToken.sol\n/* pragma solidity 0.8.11; */\n/* pragma experimental ABIEncoderV2; */\n\n/* import { ERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"; */\n/* import { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import { SafeERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\"; */\n\n/* import { IRiseToken } from \"./interfaces/IRiseToken.sol\"; */\n/* import { IfERC20 } from \"./interfaces/IfERC20.sol\"; */\n/* import { IFuseComptroller } from \"./interfaces/IFuseComptroller.sol\"; */\n/* import { IWETH9 } from \"./interfaces/IWETH9.sol\"; */\n\n/* import { RiseTokenFactory } from \"./RiseTokenFactory.sol\"; */\n/* import { UniswapAdapter } from \"./adapters/UniswapAdapter.sol\"; */\n/* import { RariFusePriceOracleAdapter } from \"./adapters/RariFusePriceOracleAdapter.sol\"; */\n\n/**\n * @title Rise Token (2x Long Token)\n * @author bayu <bayu@risedle.com> <https://github.com/pyk>\n * @notice 2x Long Token powered by Rari Fuse\n */\ncontract RiseToken is IRiseToken, ERC20, Ownable {\n    /// \u2588\u2588\u2588 Libraries \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    using SafeERC20 for ERC20;\n    using SafeERC20 for IWETH9;\n\n    /// \u2588\u2588\u2588 Storages \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    IWETH9                     public weth;\n    RiseTokenFactory           public factory;\n    UniswapAdapter             public uniswapAdapter;\n    RariFusePriceOracleAdapter public oracleAdapter;\n\n    ERC20   public collateral;\n    ERC20   public debt;\n    IfERC20 public fCollateral;\n    IfERC20 public fDebt;\n\n    uint256 public totalCollateral;\n    uint256 public totalDebt;\n    uint256 public maxBuy = type(uint256).max;\n    uint256 public fees = 0.001 ether;\n    uint256 public minLeverageRatio = 1.7 ether;\n    uint256 public maxLeverageRatio = 2.3 ether;\n    uint256 public step = 0.2 ether;\n    uint256 public discount = 0.006 ether; // 0.6%\n    bool    public isInitialized;\n\n    uint8 private cdecimals;\n    uint8 private ddecimals;\n\n\n    /// \u2588\u2588\u2588 Constructors \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _factory,\n        address _fCollateral,\n        address _fDebt,\n        address _uniswapAdapter,\n        address _oracleAdapter\n    ) ERC20(_name, _symbol) {\n        factory = RiseTokenFactory(_factory);\n        uniswapAdapter = UniswapAdapter(_uniswapAdapter);\n        oracleAdapter = RariFusePriceOracleAdapter(_oracleAdapter);\n        fCollateral = IfERC20(_fCollateral);\n        fDebt = IfERC20(_fDebt);\n        collateral = ERC20(fCollateral.underlying());\n        debt = ERC20(fDebt.underlying());\n        weth = IWETH9(uniswapAdapter.weth());\n\n        cdecimals = collateral.decimals();\n        ddecimals = debt.decimals();\n\n        transferOwnership(factory.owner());\n    }\n\n\n    /// \u2588\u2588\u2588 Internal functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    function supplyThenBorrow(uint256 _collateralAmount, uint256 _borrowAmount) internal {\n        // Deposit to Rari Fuse\n        collateral.safeIncreaseAllowance(address(fCollateral), _collateralAmount);\n        uint256 fuseResponse;\n        fuseResponse = fCollateral.mint(_collateralAmount);\n        if (fuseResponse != 0) revert FuseError(fuseResponse);\n\n        // Borrow from Rari Fuse\n        fuseResponse = fDebt.borrow(_borrowAmount);\n        if (fuseResponse != 0) revert FuseError(fuseResponse);\n\n        // Cache the value\n        totalCollateral = fCollateral.balanceOfUnderlying(address(this));\n        totalDebt = fDebt.borrowBalanceCurrent(address(this));\n    }\n\n    function repayThenRedeem(uint256 _repayAmount, uint256 _collateralAmount) internal {\n        // Repay debt to Rari Fuse\n        debt.safeIncreaseAllowance(address(fDebt), _repayAmount);\n        uint256 repayResponse = fDebt.repayBorrow(_repayAmount);\n        if (repayResponse != 0) revert FuseError(repayResponse);\n\n        // Redeem from Rari Fuse\n        uint256 redeemResponse = fCollateral.redeemUnderlying(_collateralAmount);\n        if (redeemResponse != 0) revert FuseError(redeemResponse);\n\n        // Cache the value\n        totalCollateral = fCollateral.balanceOfUnderlying(address(this));\n        totalDebt = fDebt.borrowBalanceCurrent(address(this));\n    }\n\n    function onInitialize(uint256 _wethAmount, uint256 _collateralAmount, bytes memory _data) internal {\n        isInitialized = true;\n        (InitializeParams memory params) = abi.decode(_data, (InitializeParams));\n\n        // Enter Rari Fuse Markets\n        address[] memory markets = new address[](2);\n        markets[0] = address(fCollateral);\n        markets[1] = address(fDebt);\n        uint256[] memory marketStatus = IFuseComptroller(fCollateral.comptroller()).enterMarkets(markets);\n        if (marketStatus[0] != 0 && marketStatus[1] != 0) revert FuseError(marketStatus[0]);\n\n        supplyThenBorrow(_collateralAmount, params.borrowAmount);\n\n        // Swap debt asset to WETH\n        debt.safeIncreaseAllowance(address(uniswapAdapter), params.borrowAmount);\n        uint256 wethAmountFromBorrow = uniswapAdapter.swapExactTokensForWETH(address(debt)  , params.borrowAmount, 0);\n\n        // Get owed WETH\n        uint256 owedWETH = _wethAmount - wethAmountFromBorrow;\n        if (owedWETH > params.ethAmount) revert SlippageTooHigh();\n\n        // Transfer excess ETH back to the initializer\n        uint256 excessETH = params.ethAmount - owedWETH;\n        (bool sent, ) = params.initializer.call{value: excessETH}(\"\");\n        if (!sent) revert FailedToSendETH(params.initializer, excessETH);\n\n        // Send back WETH to uniswap adapter\n        weth.deposit{ value: owedWETH }(); // Wrap the ETH to WETH\n        weth.safeTransfer(address(uniswapAdapter), _wethAmount);\n\n        // Mint the Rise Token to the initializer\n        _mint(params.initializer, params.shares);\n\n        emit Initialized(params);\n    }\n\n    function onBuy(uint256 _wethAmount, uint256 _collateralAmount, bytes memory _data) internal {\n        // Parse the data from buy function\n        (BuyParams memory params) = abi.decode(_data, (BuyParams));\n\n        // Supply then borrow in Rari Fuse\n        supplyThenBorrow(_collateralAmount, params.debtAmount);\n\n        // Swap debt asset to WETH\n        debt.safeIncreaseAllowance(address(uniswapAdapter), params.debtAmount);\n        uint256 wethAmountFromBorrow = uniswapAdapter.swapExactTokensForWETH(address(debt), params.debtAmount, 0);\n\n        // Get owed WETH\n        uint256 owedWETH = _wethAmount - wethAmountFromBorrow;\n\n        if (address(params.tokenIn) == address(0)) {\n            if (owedWETH > params.amountInMax) revert SlippageTooHigh();\n            // Transfer excess ETH back to the buyer\n            uint256 excessETH = params.amountInMax - owedWETH;\n            (bool sent, ) = params.buyer.call{value: excessETH}(\"\");\n            if (!sent) revert FailedToSendETH(params.buyer, excessETH);\n            weth.deposit{ value: owedWETH }();\n        } else {\n            params.tokenIn.safeTransferFrom(params.buyer, address(this), params.amountInMax);\n            params.tokenIn.safeIncreaseAllowance(address(uniswapAdapter), params.amountInMax);\n            uint256 amountIn = uniswapAdapter.swapTokensForExactWETH(address(params.tokenIn), owedWETH, params.amountInMax);\n            if (amountIn < params.amountInMax) {\n                params.tokenIn.safeTransfer(params.buyer, params.amountInMax - amountIn);\n            }\n        }\n\n        // Transfer WETH to Uniswap Adapter to repay the flash swap\n        weth.safeTransfer(address(uniswapAdapter), _wethAmount);\n\n        // Mint the Rise Token to the buyer\n        _mint(params.recipient, params.shares);\n        _mint(factory.feeRecipient(), params.fee);\n\n        emit Buy(params);\n    }\n\n    // Need this to handle debt token as output token; We can't re-enter the pool\n    uint256 private wethLeftFromFlashSwap;\n\n    function onSell(uint256 _wethAmount, uint256 _debtAmount, bytes memory _data) internal {\n        // Parse the data from sell function\n        (SellParams memory params) = abi.decode(_data, (SellParams));\n\n        // Repay then redeem\n        repayThenRedeem(_debtAmount, params.collateralAmount);\n\n        // If tokenOut is collateral then don't swap all collateral to WETH\n        if (address(params.tokenOut) == address(collateral)) {\n            // Swap collateral to repay WETH\n            collateral.safeIncreaseAllowance(address(uniswapAdapter), params.collateralAmount);\n            uint256 collateralToBuyWETH = uniswapAdapter.swapTokensForExactWETH(address(collateral), _wethAmount, params.collateralAmount);\n            uint256 collateralLeft = params.collateralAmount - collateralToBuyWETH;\n            if (collateralLeft < params.amountOutMin) revert SlippageTooHigh();\n            collateral.safeTransfer(params.recipient, collateralLeft);\n        } else {\n            // Swap all collateral to WETH\n            collateral.safeIncreaseAllowance(address(uniswapAdapter), params.collateralAmount);\n            uint256 wethAmountFromCollateral = uniswapAdapter.swapExactTokensForWETH(address(collateral), params.collateralAmount, 0);\n            uint256 wethLeft = wethAmountFromCollateral - _wethAmount;\n\n            if (address(params.tokenOut) == address(0)) {\n                if (wethLeft < params.amountOutMin) revert SlippageTooHigh();\n                weth.safeIncreaseAllowance(address(weth), wethLeft);\n                weth.withdraw(wethLeft);\n                (bool sent, ) = params.recipient.call{value: wethLeft}(\"\");\n                if (!sent) revert FailedToSendETH(params.recipient, wethLeft);\n            }\n\n            // Cannot enter the pool again\n            if (address(params.tokenOut) == address(debt)) {\n                wethLeftFromFlashSwap = wethLeft;\n            }\n\n            if (address(params.tokenOut) != address(0) && (address(params.tokenOut) != address(debt))) {\n                weth.safeIncreaseAllowance(address(uniswapAdapter), wethLeft);\n                uint256 amountOut = uniswapAdapter.swapExactWETHForTokens(address(params.tokenOut), wethLeft, params.amountOutMin);\n                params.tokenOut.safeTransfer(params.recipient, amountOut);\n            }\n        }\n\n        // Transfer WETH to uniswap adapter\n        weth.safeTransfer(address(uniswapAdapter), _wethAmount);\n\n        // Burn the Rise Token\n        ERC20(address(this)).safeTransferFrom(params.seller, factory.feeRecipient(), params.fee);\n        _burn(params.seller, params.shares - params.fee);\n        emit Sell(params);\n    }\n\n\n    /// \u2588\u2588\u2588 Owner actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRiseToken\n    function setParams(uint256 _minLeverageRatio, uint256 _maxLeverageRatio, uint256 _step, uint256 _discount, uint256 _newMaxBuy) external onlyOwner {\n        minLeverageRatio = _minLeverageRatio;\n        maxLeverageRatio = _maxLeverageRatio;\n        step = _step;\n        discount = _discount;\n        maxBuy = _newMaxBuy;\n        emit ParamsUpdated(minLeverageRatio, maxLeverageRatio, step, discount, maxBuy);\n    }\n\n    /// @inheritdoc IRiseToken\n    function initialize(InitializeParams memory _params) external payable onlyOwner {\n        if (isInitialized == true) revert AlreadyInitialized();\n        if (msg.value == 0) revert InputAmountInvalid();\n        _params.ethAmount = msg.value;\n        bytes memory data = abi.encode(FlashSwapType.Initialize, abi.encode(_params));\n        uniswapAdapter.flashSwapWETHForExactTokens(address(collateral), _params.collateralAmount, data);\n    }\n\n\n    /// \u2588\u2588\u2588 External functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    function onFlashSwapWETHForExactTokens(uint256 _wethAmount, uint256 _amountOut, bytes calldata _data) external {\n        if (msg.sender != address(uniswapAdapter)) revert NotUniswapAdapter();\n\n        // Continue execution based on the type\n        (FlashSwapType flashSwapType, bytes memory data) = abi.decode(_data, (FlashSwapType,bytes));\n        if (flashSwapType == FlashSwapType.Initialize) {\n            onInitialize(_wethAmount, _amountOut, data);\n            return;\n        }\n\n        if (flashSwapType == FlashSwapType.Buy) {\n            onBuy(_wethAmount, _amountOut, data);\n            return;\n        }\n\n        if (flashSwapType == FlashSwapType.Sell) {\n            onSell(_wethAmount, _amountOut, data);\n            return;\n        }\n    }\n\n    /// \u2588\u2588\u2588 Read-only functions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    function decimals() public view virtual override returns (uint8) {\n        return cdecimals;\n    }\n\n    /// @inheritdoc IRiseToken\n    function collateralPerShare() public view returns (uint256 _cps) {\n        if (!isInitialized) return 0;\n        _cps = (totalCollateral * (10**cdecimals)) / totalSupply();\n    }\n\n    /// @inheritdoc IRiseToken\n    function debtPerShare() public view returns (uint256 _dps) {\n        if (!isInitialized) return 0;\n        _dps = (totalDebt * (10**cdecimals)) / totalSupply();\n    }\n\n    /// @inheritdoc IRiseToken\n    function value(uint256 _shares) public view returns (uint256 _value) {\n        if (!isInitialized) return 0;\n        if (_shares == 0) return 0;\n        // Get the collateral & debt amount\n        uint256 collateralAmount = (_shares * collateralPerShare()) / (10**cdecimals);\n        uint256 debtAmount = (_shares * debtPerShare()) / (10**cdecimals);\n\n        // Get the price in ETH\n        uint256 cPrice = oracleAdapter.price(address(collateral));\n        uint256 dPrice = oracleAdapter.price(address(debt));\n\n        // Get total value in ETH\n        uint256 collateralValue = (collateralAmount * cPrice) / (10**cdecimals);\n        uint256 debtValue = (debtAmount * dPrice) / (10**ddecimals);\n\n        // Get Rise Token value in ETH\n        _value = collateralValue - debtValue;\n    }\n\n    /// @inheritdoc IRiseToken\n    function value(uint256 _shares, address _quote) public view returns (uint256 _value) {\n        uint256 valueInETH = value(_shares);\n        if (valueInETH == 0) return 0;\n        uint256 quoteDecimals = ERC20(_quote).decimals();\n        uint256 quotePrice = oracleAdapter.price(_quote);\n        uint256 amountInETH = (valueInETH * 1e18) / quotePrice;\n\n        // Get Rise Token value in _quote token\n        _value = (amountInETH * (10**quoteDecimals)) / 1e18;\n    }\n\n    /// @inheritdoc IRiseToken\n    function nav() public view returns (uint256 _nav) {\n        if (!isInitialized) return 0;\n        _nav = value(10**cdecimals);\n    }\n\n    /// @inheritdoc IRiseToken\n    function leverageRatio() public view returns (uint256 _lr) {\n        if (!isInitialized) return 0;\n        uint256 collateralPrice = oracleAdapter.price(address(collateral));\n        uint256 collateralValue = (collateralPerShare() * collateralPrice) / (10**cdecimals);\n        _lr = (collateralValue * 1e18) / nav();\n    }\n\n\n    /// \u2588\u2588\u2588 User actions \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRiseToken\n    function buy(uint256 _shares, address _recipient, address _tokenIn, uint256 _amountInMax) external payable {\n        if (!isInitialized) revert NotInitialized();\n        if (_shares > maxBuy) revert InputAmountInvalid();\n\n        uint256 fee = ((fees * _shares) / 1e18);\n        uint256 newShares = _shares + fee;\n        BuyParams memory params = BuyParams({\n            buyer: msg.sender,\n            recipient: _recipient,\n            tokenIn: ERC20(_tokenIn),\n            amountInMax: _tokenIn == address(0) ? msg.value : _amountInMax,\n            shares: _shares,\n            collateralAmount: (newShares * collateralPerShare()) / (10**cdecimals),\n            debtAmount: (newShares * debtPerShare()) / (10**cdecimals),\n            fee: fee,\n            nav: nav()\n        });\n\n        // Perform the flash swap\n        bytes memory data = abi.encode(FlashSwapType.Buy, abi.encode(params));\n        uniswapAdapter.flashSwapWETHForExactTokens(address(collateral), params.collateralAmount, data);\n    }\n\n    /// @inheritdoc IRiseToken\n    function sell(uint256 _shares, address _recipient, address _tokenOut, uint256 _amountOutMin) external {\n        if (!isInitialized) revert NotInitialized();\n\n        uint256 fee = ((fees * _shares) / 1e18);\n        uint256 newShares = _shares - fee;\n        SellParams memory params = SellParams({\n            seller: msg.sender,\n            recipient: _recipient,\n            tokenOut: ERC20(_tokenOut),\n            amountOutMin: _amountOutMin,\n            shares: _shares,\n            collateralAmount: (newShares * collateralPerShare()) / (10**cdecimals),\n            debtAmount: (newShares * debtPerShare()) / (10**cdecimals),\n            fee: fee,\n            nav: nav()\n        });\n\n        // Perform the flash swap\n        bytes memory data = abi.encode(FlashSwapType.Sell, abi.encode(params));\n        uniswapAdapter.flashSwapWETHForExactTokens(address(debt), params.debtAmount, data);\n\n        if (address(params.tokenOut) == address(debt)) {\n            weth.safeIncreaseAllowance(address(uniswapAdapter), wethLeftFromFlashSwap);\n            uint256 amountOut = uniswapAdapter.swapExactWETHForTokens(address(params.tokenOut), wethLeftFromFlashSwap, params.amountOutMin);\n            params.tokenOut.safeTransfer(params.recipient, amountOut);\n            wethLeftFromFlashSwap = 0;\n        }\n    }\n\n\n    /// \u2588\u2588\u2588 Market makers \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n    /// @inheritdoc IRiseToken\n    function swapExactCollateralForETH(uint256 _amountIn, uint256 _amountOutMin) external returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (leverageRatio() > minLeverageRatio) revert NoNeedToRebalance();\n        if (_amountIn == 0) return 0;\n\n        // Discount the price\n        uint256 price = oracleAdapter.price(address(collateral));\n        price += (discount * price) / 1e18;\n        _amountOut = (_amountIn * price) / (1e18);\n        if (_amountOut < _amountOutMin) revert SlippageTooHigh();\n\n        /// \u2588\u2588\u2588 Effects\n\n        // Transfer collateral to the contract\n        collateral.safeTransferFrom(msg.sender, address(this), _amountIn);\n\n        // This is our buying power; can't buy collateral more than this\n        uint256 borrowAmount = ((step * value((10**cdecimals), address(debt)) / 1e18) * totalSupply()) / (10**cdecimals);\n        supplyThenBorrow(_amountIn, borrowAmount);\n\n        // This will revert if _amountOut is too large; we can't buy the _amountIn\n        debt.safeIncreaseAllowance(address(uniswapAdapter), borrowAmount);\n        uint256 amountIn = uniswapAdapter.swapTokensForExactWETH(address(debt), _amountOut, borrowAmount);\n\n        // If amountIn < borrow; then send back debt token to Rari Fuse\n        if (amountIn < borrowAmount) {\n            uint256 repayAmount = borrowAmount - amountIn;\n            debt.safeIncreaseAllowance(address(fDebt), repayAmount);\n            uint256 repayResponse = fDebt.repayBorrow(repayAmount);\n            if (repayResponse != 0) revert FuseError(repayResponse);\n            totalDebt = fDebt.borrowBalanceCurrent(address(this));\n        }\n\n        // Convert WETH to ETH\n        weth.safeIncreaseAllowance(address(weth), _amountOut);\n        weth.withdraw(_amountOut);\n\n        /// \u2588\u2588\u2588 Interactions\n        (bool sent, ) = msg.sender.call{value: _amountOut}(\"\");\n        if (!sent) revert FailedToSendETH(msg.sender, _amountOut);\n    }\n\n    /// @inheritdoc IRiseToken\n    function swapExactETHForCollateral(uint256 _amountOutMin) external payable returns (uint256 _amountOut) {\n        /// \u2588\u2588\u2588 Checks\n        if (leverageRatio() < maxLeverageRatio) revert NoNeedToRebalance();\n        if (msg.value == 0) return 0;\n\n        // Discount the price\n        uint256 price = oracleAdapter.price(address(collateral));\n        price -= (discount * price) / 1e18;\n        _amountOut = (msg.value * (10**cdecimals)) / price;\n        if (_amountOut < _amountOutMin) revert SlippageTooHigh();\n\n        // Convert ETH to WETH\n        weth.deposit{value: msg.value}();\n\n        // This is our selling power, can't sell more than this\n        uint256 repayAmount = ((step * value((10**cdecimals), address(debt)) / 1e18) * totalSupply()) / (10**cdecimals);\n        weth.safeIncreaseAllowance(address(uniswapAdapter), msg.value);\n        uint256 repayAmountFromETH = uniswapAdapter.swapExactWETHForTokens(address(debt), msg.value, 0);\n        if (repayAmountFromETH > repayAmount) revert LiquidityIsNotEnough();\n\n        /// \u2588\u2588\u2588 Effects\n        repayThenRedeem(repayAmountFromETH, _amountOut);\n\n        /// \u2588\u2588\u2588 Interactions\n        collateral.safeTransfer(msg.sender, _amountOut);\n    }\n\n    receive() external payable {}\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fDebt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fDebt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAdapter\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RiseTokenFactory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000024b44e5ffc797a10c5a4d17d2867f7d7ad256b0c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}