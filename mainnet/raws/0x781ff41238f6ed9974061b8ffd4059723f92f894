{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TMTGOwnable\r\n *\r\n * @dev zeppelin\uc758 ownable\uc758 \ubcc0\ud615\uc73c\ub85c TMTGOwnable\uc5d0\uc11c \uad8c\ud55c\uc740 hiddenOwner, superOwner, owner, centralBanker, operator\uac00 \uc788\uc2b5\ub2c8\ub2e4.\r\n * \uac01 \uad8c\ud55c\ub9c8\ub2e4 \uc5ed\ud560\uc774 \ub2e4\ub985\ub2c8\ub2e4.\r\n */\r\ncontract TMTGOwnable {\r\n    address public owner;\r\n    address public centralBanker;\r\n    address public superOwner;\r\n    address public hiddenOwner;\r\n    \r\n    enum Role { owner, centralBanker, superOwner, hiddenOwner }\r\n\r\n    mapping(address => bool) public operators;\r\n    \r\n    \r\n    event TMTG_RoleTransferred(\r\n        Role indexed ownerType,\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    event TMTG_SetOperator(address indexed operator); \r\n    event TMTG_DeletedOperator(address indexed operator);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrOperator() {\r\n        require(msg.sender == owner || operators[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNotBankOwner(){\r\n        require(msg.sender != centralBanker);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBankOwner(){\r\n        require(msg.sender == centralBanker);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySuperOwner() {\r\n        require(msg.sender == superOwner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyhiddenOwner(){\r\n        require(msg.sender == hiddenOwner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;     \r\n        centralBanker = msg.sender;\r\n        superOwner = msg.sender; \r\n        hiddenOwner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev \ud574\ub2f9 \uc8fc\uc18c\ub97c operator\ub85c \uc124\uc815\ud55c\ub2e4.\r\n    * @param _operator has the ability to pause transaction, has the ability to blacklisting & unblacklisting. \r\n    */\r\n    function setOperator(address _operator) external onlySuperOwner {\r\n        operators[_operator] = true;\r\n        emit TMTG_SetOperator(_operator);\r\n    }\r\n\r\n    /**\r\n    * @dev \ud574\ub2f9 \uc8fc\uc18c\ub97c operator\uc5d0\uc11c \ud574\uc81c\ud55c\ub2e4.\r\n    * @param _operator has the ability to pause transaction, has the ability to blacklisting & unblacklisting. \r\n    */\r\n    function delOperator(address _operator) external onlySuperOwner {\r\n        operators[_operator] = false;\r\n        emit TMTG_DeletedOperator(_operator);\r\n    }\r\n\r\n    /**\r\n    * @dev owner\uc758 \uad8c\ud55c\uc744 \ub118\uaca8 \uc904 \uc218 \uc788\ub2e4. \ub2e8, superowner\ub9cc \uc2e4\ud589\ud560 \uc218 \uc788\ub2e4.\r\n    * @param newOwner  \r\n    */\r\n    function transferOwnership(address newOwner) public onlySuperOwner {\r\n        emit TMTG_RoleTransferred(Role.owner, owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev centralBanker\uc758 \uad8c\ud55c\uc744 \ub118\uaca8 \uc904 \uc218 \uc788\ub2e4. \ub2e8, superOwner\ub9cc \uc2e4\ud589\ud560 \uc218 \uc788\ub2e4.\r\n    * @param newBanker centralBanker\ub294 \uc77c\uc885\uc758 \uc911\uc559\uc740\ud589\uc73c\ub85c \uac70\ub798\uac00 \ubd88\uac00\ub2a5\ud558\ub2e4. \r\n    * \uc9c0\uae09 \uc900\ube44\uc728\uacfc \ud1b5\ud654\ub7c9\uc5d0 \ub530\ub77c \ubb36\uc5ec\uc788\ub294 \uae08\uc561\uc774 \uacb0\uc815\ub418\uc5b4\uc9c4\ub2e4.\r\n    * \ub3c8\uc744 \uaebc\ub0b4\uae30 \uc704\ud574\uc11c\ub294 \uac10\uc0ac\ub97c \uac70\uccd0\uc11c owner\ucabd\uc73c\ub85c \uc778\ucd9c\uc774 \uac00\ub2a5\ud558\ub2e4. \r\n    */\r\n    function transferBankOwnership(address newBanker) public onlySuperOwner {\r\n        emit TMTG_RoleTransferred(Role.centralBanker, centralBanker, newBanker);\r\n        centralBanker = newBanker;\r\n    }\r\n\r\n    /**\r\n    * @dev superOwner\uc758 \uad8c\ud55c\uc744 \ub118\uaca8 \uc904 \uc218 \uc788\ub2e4. \ub2e8, hiddenOwner\ub9cc \uc2e4\ud589 \ud560 \uc218 \uc788\ub2e4.\r\n    * @param newSuperOwner  superOwner\ub294 hiddenOwner\uc640 superOwner\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \uad8c\ud55c \uc5ec\ubd80\ub97c \uad00\ub9ac\ud55c\ub2e4.\r\n    */\r\n    function transferSuperOwnership(address newSuperOwner) public onlyhiddenOwner {\r\n        emit TMTG_RoleTransferred(Role.superOwner, superOwner, newSuperOwner);\r\n        superOwner = newSuperOwner;\r\n    }\r\n    \r\n    /**\r\n    * @dev hiddenOwner\uc758 \uad8c\ud55c \uc744 \ub118\uaca8 \uc904 \uc218 \uc788\ub2e4. \ub2e8, hiddenOwner\ub9cc \uc2e4\ud589 \ud560 \uc218 \uc788\ub2e4.\r\n    * @param newhiddenOwner hiddenOwner\ub294 \ubcc4 \ub2e4\ub978 \uae30\ub2a5\uc740 \uc5c6\uc9c0\ub9cc \r\n    * superOwner\uc640 hiddenOwner\uc758 \uad8c\ud55c\uc5d0 \ub300\ud574 \uc124\uc815 \ubc0f \ud574\uc81c\uac00 \uac00\ub2a5\ud558\ub2e4.   \r\n    */\r\n    function changeHiddenOwner(address newhiddenOwner) public onlyhiddenOwner {\r\n        emit TMTG_RoleTransferred(Role.hiddenOwner, hiddenOwner, newhiddenOwner);\r\n        hiddenOwner = newhiddenOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TMTGPausable\r\n *\r\n * @dev \uae34\uae09\ud55c \uc0c1\ud669\uc5d0\uc11c \uac70\ub798\ub97c \uc911\uc9c0\uc2dc\ud0ac\ub54c \uc0ac\uc6a9\ud55c\ub2e4.\r\n */\r\ncontract TMTGPausable is TMTGOwnable {\r\n    event TMTG_Pause();\r\n    event TMTG_Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    /**\r\n    * @dev \uac70\ub798\ub97c \ud560 \uc218 \uc5c6\uac8c \ub9c9\ub294\ub2e4. \ub2e8, owner \ub610\ub294 operator\ub9cc \uc2e4\ud589 \ud560 \uc218 \uc788\ub2e4.\r\n    */\r\n    function pause() onlyOwnerOrOperator whenNotPaused public {\r\n        paused = true;\r\n        emit TMTG_Pause();\r\n    }\r\n  \r\n    /**\r\n    * @dev \uac70\ub798\ub97c \ud560 \uc218 \uc788\uac8c \ud480\uc5b4\uc900\ub2e4. \ub2e8, owner \ub610\ub294 operator\ub9cc \uc2e4\ud589 \ud560 \uc218 \uc788\uc73c\uba70 paused \uc0c1\ud0dc\uc77c \ub54c\ub9cc \uc774\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4.\r\n    */\r\n    function unpause() onlyOwnerOrOperator whenPaused public {\r\n        paused = false;\r\n        emit TMTG_Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title TMTGBlacklist\r\n *\r\n * @dev \uc774\uc0c1 \uc9d5\ud6c4\uac00 \uc788\ub294 \uacc4\uc815\uc758 \uc8fc\uc18c\uc5d0 \ub300\ud574 \uac70\ub798\ub97c \ud560 \uc218 \uc5c6\uac8c \ub9c9\ub294\ub2e4.\r\n */\r\ncontract TMTGBlacklist is TMTGOwnable {\r\n    mapping(address => bool) blacklisted;\r\n    \r\n    event TMTG_Blacklisted(address indexed blacklist);\r\n    event TMTG_Whitelisted(address indexed whitelist);\r\n\r\n    modifier whenPermitted(address node) {\r\n        require(!blacklisted[node]);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev \ube14\ub799\ub9ac\uc2a4\ud305 \uc5ec\ubd80\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    * @param node  \ud574\ub2f9 \uc0ac\uc6a9\uc790\uac00 \ube14\ub799\ub9ac\uc2a4\ud2b8\uc5d0 \ub4f1\ub85d\ub418\uc5c8\ub294\uac00\uc5d0 \ub300\ud55c \uc720\ubb34\ub97c  \ud655\uc778\ud55c\ub2e4.   \r\n    */\r\n    function isPermitted(address node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n\r\n    /**\r\n    * @dev \ube14\ub799\ub9ac\uc2a4\ud305 \ucc98\ub9ac\ud55c\ub2e4.\r\n    * @param node  \ud574\ub2f9 \uc0ac\uc6a9\uc790\ub97c \ube14\ub799\ub9ac\uc2a4\ud2b8\uc5d0 \ub4f1\ub85d\ud55c\ub2e4.   \r\n    */\r\n    function blacklist(address node) public onlyOwnerOrOperator {\r\n        blacklisted[node] = true;\r\n        emit TMTG_Blacklisted(node);\r\n    }\r\n\r\n    /**\r\n    * @dev \ube14\ub799\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud574\uc81c\ud55c\ub2e4.\r\n    * @param node  \ud574\ub2f9 \uc0ac\uc6a9\uc790\ub97c \ube14\ub799\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.   \r\n    */\r\n    function unblacklist(address node) public onlyOwnerOrOperator {\r\n        blacklisted[node] = false;\r\n        emit TMTG_Whitelisted(node);\r\n    }\r\n}\r\n\r\n/**\r\n * @title HasNoEther\r\n *\r\n * @dev \uc774\uc0c1 \uc9d5\ud6c4\uac00 \uc788\ub294 \uacc4\uc815\uc758 \uc8fc\uc18c\uc5d0 \ub300\ud574 \uac70\ub798\ub97c \ud560 \uc218 \uc5c6\uac8c \ub9c9\ub294\ub2e4.\r\n */\r\ncontract HasNoEther is TMTGOwnable {\r\n    \r\n    /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n    \r\n    /**\r\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n   */\r\n    function() external {\r\n    }\r\n    \r\n    /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n    function reclaimEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TMTGBaseToken \ud1a0\ud070\ub77d\uacfc \uad8c\ud55c \uc124\uc815 \ub4f1 \uc8fc\uc694\ud568\uc218\uac00 \ub4f1\ub85d\ub418\uc5b4 \uc788\ub2e4.\r\n */\r\ncontract TMTGBaseToken is StandardToken, TMTGPausable, TMTGBlacklist, HasNoEther {\r\n    uint256 public openingTime;\r\n    \r\n    struct investor {\r\n        uint256 _sentAmount;\r\n        uint256 _initialAmount;\r\n        uint256 _limit;\r\n    }\r\n\r\n    mapping(address => investor) public searchInvestor;\r\n    mapping(address => bool) public superInvestor;\r\n    mapping(address => bool) public CEx;\r\n    mapping(address => bool) public investorList;\r\n    \r\n    event TMTG_SetCEx(address indexed CEx); \r\n    event TMTG_DeleteCEx(address indexed CEx);\r\n    \r\n    event TMTG_SetSuperInvestor(address indexed SuperInvestor); \r\n    event TMTG_DeleteSuperInvestor(address indexed SuperInvestor);\r\n    \r\n    event TMTG_SetInvestor(address indexed investor); \r\n    event TMTG_DeleteInvestor(address indexed investor);\r\n    \r\n    event TMTG_Stash(uint256 _value);\r\n    event TMTG_Unstash(uint256 _value);\r\n\r\n    event TMTG_TransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value);\r\n    event TMTG_Burn(address indexed burner, uint256 value);\r\n    \r\n    /**\r\n    * @dev \uac70\ub798\uc18c \uc8fc\uc18c\ub97c \ub4f1\ub85d\ud55c\ub2e4.\r\n    * @param _CEx  \ud574\ub2f9 \uc8fc\uc18c\ub97c \uac70\ub798\uc18c \uc8fc\uc18c\ub85c \ub4f1\ub85d\ud55c\ub2e4.   \r\n    */\r\n    function setCEx(address _CEx) external onlySuperOwner {   \r\n        CEx[_CEx] = true;\r\n        \r\n        emit TMTG_SetCEx(_CEx);\r\n    }\r\n\r\n    /**\r\n    * @dev \uac70\ub798\uc18c \uc8fc\uc18c\ub97c \ud574\uc81c\ud55c\ub2e4.\r\n    * @param _CEx  \ud574\ub2f9 \uc8fc\uc18c\uc758 \uac70\ub798\uc18c \uad8c\ud55c\uc744 \ud574\uc81c\ud55c\ub2e4.   \r\n    */\r\n    function delCEx(address _CEx) external onlySuperOwner {   \r\n        CEx[_CEx] = false;\r\n        \r\n        emit TMTG_DeleteCEx(_CEx);\r\n    }\r\n\r\n    /**\r\n    * @dev \uc218\ud37c\ud22c\uc790\uc790 \uc8fc\uc18c\ub97c \ub4f1\ub85d\ud55c\ub2e4.\r\n    * @param _super  \ud574\ub2f9 \uc8fc\uc18c\ub97c \uc218\ud37c\ud22c\uc790\uc790 \uc8fc\uc18c\ub85c \ub4f1\ub85d\ud55c\ub2e4.   \r\n    */\r\n    function setSuperInvestor(address _super) external onlySuperOwner {\r\n        superInvestor[_super] = true;\r\n        \r\n        emit TMTG_SetSuperInvestor(_super);\r\n    }\r\n\r\n    /**\r\n    * @dev \uc218\ud37c\ud22c\uc790\uc790 \uc8fc\uc18c\ub97c \ud574\uc81c\ud55c\ub2e4.\r\n    * @param _super  \ud574\ub2f9 \uc8fc\uc18c\uc758 \uc218\ud37c\ud22c\uc790\uc790 \uad8c\ud55c\uc744 \ud574\uc81c\ud55c\ub2e4.   \r\n    */\r\n    function delSuperInvestor(address _super) external onlySuperOwner {\r\n        superInvestor[_super] = false;\r\n        \r\n        emit TMTG_DeleteSuperInvestor(_super);\r\n    }\r\n\r\n    /**\r\n    * @dev \ud22c\uc790\uc790 \uc8fc\uc18c\ub97c \ud574\uc81c\ud55c\ub2e4.\r\n    * @param _addr  \ud574\ub2f9 \uc8fc\uc18c\ub97c \ud22c\uc790\uc790 \uc8fc\uc18c\ub85c \ud574\uc81c\ud55c\ub2e4.   \r\n    */\r\n    function delInvestor(address _addr) onlySuperOwner public {\r\n        investorList[_addr] = false;\r\n        searchInvestor[_addr] = investor(0,0,0);\r\n        emit TMTG_DeleteInvestor(_addr);\r\n    }\r\n\r\n    /**\r\n    * @dev \ud22c\uc790\uc790\uc758 \ud1a0\ud070\ub77d \uc2dc\uc791 \uc2dc\uc810\uc744 \uc9c0\uc815\ud55c\ub2e4.   \r\n    */\r\n    function setOpeningTime() onlyOwner public returns(bool) {\r\n        openingTime = block.timestamp;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev \ud604\uc7ac \ud22c\uc790\uc790\uc758 \ud1a0\ud070\ub77d\uc5d0 \ub300\ud574 \ucd08\uae30 \uc218\ud37c\ud22c\uc790\uc790\ub85c\ubd80\ud130 \ubc1b\uc740 \uc591\uc758 \uba87 %\ub97c \ubc1b\uc744 \uc218 \uc788\ub294\uac00\ub97c \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\r\n    * 1\ub2ec\uc774 \ub418\uc5c8\uc744\ub54c 1\uc774 \ub418\uba70 10%\ub97c \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\uace0, 7\uc77c \uacbd\uc6b0 70%\uc758 \uac12\uc5d0 \ud574\ub2f9\ud558\ub294 \ucf54\uc778\uc744 \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4.   \r\n    */\r\n    function getLimitPeriod() public view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(openingTime);\r\n        uint256 result = timeValue.div(31 days);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev \ucd5c\uc2e0 \ub9ac\ubc0b\uc744 \ud655\uc778\ud55c\ub2e4.\r\n    * @param who \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc758 \ud604 \uc2dc\uc810\uc5d0\uc11c\uc758 \ub9ac\ubc0b \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4. 3\ub2ec\uc774 \uc9c0\ub0ac\uc744 \uacbd\uc6b0, \r\n    * _result \uc758 \uac12\uc740 \uc218\ud37c\ud22c\uc790\uc790\ub85c\ubd80\ud130 \ucd5c\ucd08\uc5d0 \ubc1b\uc740 30%\uac00 \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4. \r\n    */\r\n    function _timelimitCal(address who) internal view returns (uint256) {\r\n        uint256 presentTime = block.timestamp;\r\n        uint256 timeValue = presentTime.sub(openingTime);\r\n        uint256 _result = timeValue.div(31 days);\r\n\r\n        return _result.mul(searchInvestor[who]._limit);\r\n    }\r\n\r\n    /**\r\n    * @dev \uc778\ubca0\uc2a4\ud130\uac00 transfer\ud558\ub294 \uacbd\uc6b0, \ud0c0\uc784\ub77d\uc5d0 \ub530\ub77c \uac12\uc744 \uc81c\ud55c\ud55c\ub2e4.\r\n    * @param _to address to send\r\n    * @param _value tmtg's amount\r\n    */\r\n    function _transferInvestor(address _to, uint256 _value) internal returns (bool ret) {\r\n        uint256 addedValue = searchInvestor[msg.sender]._sentAmount.add(_value);\r\n\r\n        require(_timelimitCal(msg.sender) >= addedValue);\r\n        \r\n        searchInvestor[msg.sender]._sentAmount = addedValue;        \r\n        ret = super.transfer(_to, _value);\r\n        if (!ret) {\r\n        searchInvestor[msg.sender]._sentAmount = searchInvestor[msg.sender]._sentAmount.sub(_value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transfer \ud568\uc218\ub97c \uc2e4\ud589\ud560 \ub54c, \uc218\ud37c\uc778\ubca0\uc2a4\ud130\uac00 \uc778\ubca0\uc2a4\ud130\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uacbd\uc6b0\uc640 \uc778\ubca0\uc2a4\ud130\uac00 \uc544\ub2cc \uc0ac\ub78c\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uacbd\uc6b0\ub85c \ub098\ub258\uc5b4\uc9c0\uba70,\r\n    * \uc778\ubca0\uc2a4\ud130\uac00 \uc544\ub2cc \uc0ac\ub78c\uc5d0\uac8c \ubcf4\ub0b4\ub294 \uacbd\uc6b0, \ud574\ub2f9 \uc0ac\uc6a9\uc790\ub97c \uc778\ubca0\uc2a4\ud130\ub85c \ub9cc\ub4e4\uba70, \ucd5c\ucd08 \ubcf4\ub0b8 \uae08\uc561\uc758 10%\uac00 limit\uc73c\ub85c \ud560\ub2f9\ub41c\ub2e4.\r\n    * \ub610\ud55c \uc778\ubca0\uc2a4\ud130\uac00 transfer \ud568\uc218\ub97c \uc2e4\ud589\ud558\ub294 \uacbd\uc6b0, \ud0c0\uc784\ub77d\uc5d0 \ub530\ub77c \ubcf4\ub0b4\ub294 \uac12\uc774 \uc81c\ud55c\ub41c\ub2e4.\r\n    * @param _to address to send\r\n    * @param _value tmtg's amount\r\n    */\r\n    function transfer(address _to, uint256 _value) public\r\n    whenPermitted(msg.sender) whenPermitted(_to) whenNotPaused onlyNotBankOwner\r\n    returns (bool) {   \r\n        \r\n        if(investorList[msg.sender]) {\r\n            return _transferInvestor(_to, _value);\r\n        \r\n        } else {\r\n            if (superInvestor[msg.sender]) {\r\n                require(_to != owner);\r\n                require(!superInvestor[_to]);\r\n                require(!CEx[_to]);\r\n\r\n                if(!investorList[_to]){\r\n                    investorList[_to] = true;\r\n                    searchInvestor[_to] = investor(0, _value, _value.div(10));\r\n                    emit TMTG_SetInvestor(_to); \r\n                }\r\n            }\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n    /**\r\n    * @dev \uc778\ubca0\uc2a4\ud130\uac00 transferFrom\uc5d0\uc11c from \uc778 \uacbd\uc6b0, \ud0c0\uc784\ub77d\uc5d0 \ub530\ub77c \uac12\uc744 \uc81c\ud55c\ud55c\ub2e4.\r\n    * @param _from send amount from this address \r\n    * @param _to address to send\r\n    * @param _value tmtg's amount\r\n    */\r\n    function _transferFromInvestor(address _from, address _to, uint256 _value)\r\n    public returns(bool ret) {\r\n        uint256 addedValue = searchInvestor[_from]._sentAmount.add(_value);\r\n        require(_timelimitCal(_from) >= addedValue);\r\n        searchInvestor[_from]._sentAmount = addedValue;\r\n        ret = super.transferFrom(_from, _to, _value);\r\n\r\n        if (!ret) {\r\n            searchInvestor[_from]._sentAmount = searchInvestor[_from]._sentAmount.sub(_value);\r\n        }else {\r\n            emit TMTG_TransferFrom(_from, msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev transferFrom\uc5d0\uc11c superInvestor\uc778 \uacbd\uc6b0 approve\uc5d0\uc11c \uc81c\ud55c\ub418\ubbc0\ub85c \ud574\ub2f9 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud55c\ub2e4. \ub610\ud55c \uc778\ubca0\uc2a4\ud130\uc778 \uacbd\uc6b0,\r\n    * \ud0c0\uc784\ub77d\uc5d0 \ub530\ub77c \uc591\uc774 \uc81c\ud55c\ub41c\ub2e4.\r\n    * @param _from send amount from this address \r\n    * @param _to address to send\r\n    * @param _value tmtg's amount\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public whenNotPaused whenPermitted(msg.sender) whenPermitted(_to) returns (bool ret)\r\n    {   \r\n        if(investorList[_from]) {\r\n            return _transferFromInvestor(_from, _to, _value);\r\n        } else {\r\n            ret = super.transferFrom(_from, _to, _value);\r\n            emit TMTG_TransferFrom(_from, msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    whenPermitted(msg.sender) whenPermitted(_spender)\r\n    whenNotPaused onlyNotBankOwner\r\n    returns (bool) {\r\n        require(!superInvestor[msg.sender]);\r\n        return super.approve(_spender,_value);     \r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint256 _addedValue) public \r\n    whenNotPaused onlyNotBankOwner\r\n    whenPermitted(msg.sender) whenPermitted(_spender)\r\n    returns (bool) {\r\n        require(!superInvestor[msg.sender]);\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public\r\n    whenNotPaused onlyNotBankOwner\r\n    whenPermitted(msg.sender) whenPermitted(_spender)\r\n    returns (bool) {\r\n        require(!superInvestor[msg.sender]);\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n\r\n        emit Transfer(_who, address(0), _value);\r\n        emit TMTG_Burn(_who, _value);\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner public returns (bool) {\r\n        _burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev owner\ub9cc \uc2e4\ud589\uc774 \uac00\ub2a5\ud558\uace0, \ud574\ub2f9 \ucf54\uc778\uc758 \uc591\ub9cc\ud07c centralBanker\uc5d0 \uc785\uae08\uc774 \uac00\ub2a5\ud558\ub2e4.\r\n    * @param _value tmtg's amount\r\n    */\r\n    function stash(uint256 _value) public onlyOwner {\r\n        require(balances[owner] >= _value);\r\n        \r\n        balances[owner] = balances[owner].sub(_value);\r\n        \r\n        balances[centralBanker] = balances[centralBanker].add(_value);\r\n        \r\n        emit TMTG_Stash(_value);        \r\n    }\r\n    /**\r\n    * @dev centralBanker\ub9cc \uc2e4\ud589\uc774 \uac00\ub2a5\ud558\uace0, \ud574\ub2f9 \ucf54\uc778\uc758 \uc591\ub9cc\ud07c owner\uc5d0\uac8c \ucd9c\uae08\uc774 \uac00\ub2a5\ud558\ub2e4.\r\n    * \ub2e8, \uac80\uc218\ub97c \uac70\uccd0\uc11c \uc2e4\ud589\ub41c\ub2e4.\r\n    * @param _value tmtg's amount\r\n    */\r\n    function unstash(uint256 _value) public onlyBankOwner {\r\n        require(balances[centralBanker] >= _value);\r\n        \r\n        balances[centralBanker] = balances[centralBanker].sub(_value);\r\n        \r\n        balances[owner] = balances[owner].add(_value);\r\n        \r\n        emit TMTG_Unstash(_value);\r\n    }\r\n    \r\n    function reclaimToken() external onlyOwner {\r\n        transfer(owner, balanceOf(this));\r\n    }\r\n    \r\n    function destory() onlyhiddenOwner public {\r\n        selfdestruct(superOwner);\r\n    } \r\n\r\n    /**\r\n    * @dev \ud22c\uc790\uc790\uac00 \uac70\ub798\uc18c\uc5d0\uc11c \ucd94\uac00 \uae08\uc561\uc744 \uc0c0\uc744 \uacbd\uc6b0, \ucd94\uac00\uc5ec\ubd84\uc740 10\uac1c\uc6d4\uac04 \ud1a0\ud070\ub77d\uc774 \uac78\ub9b0\ub2e4. \uc774 \ub54c, \uad00\ub9ac\uc790\uc758 \uc785\ud68c \ud558\uc5d0 \ud574\ub2f9 \uae08\uc561\uc744 \uc62e\uae30\uac8c \ud574\uc90c\r\n    * @param _investor \r\n    * @param _to \r\n    * @param _amount \r\n    */\r\n    function refreshInvestor(address _investor, address _to, uint _amount) onlyOwner public  {\r\n       require(investorList[_investor]);\r\n       require(_to != address(0));\r\n       require(_amount <= balances[_investor]);\r\n       balances[_investor] = balances[_investor].sub(_amount);\r\n       balances[_to] = balances[_to].add(_amount); \r\n    }\r\n}\r\n\r\ncontract TMTG is TMTGBaseToken {\r\n    string public constant name = \"The Midas Touch Gold\";\r\n    string public constant symbol = \"TMTG\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals));\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        openingTime = block.timestamp;\r\n\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"superInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newhiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CEx\",\"type\":\"address\"}],\"name\":\"delCEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unstash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"delOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CEx\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centralBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CEx\",\"type\":\"address\"}],\"name\":\"setCEx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"transferSuperOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBanker\",\"type\":\"address\"}],\"name\":\"transferBankOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"searchInvestor\",\"outputs\":[{\"name\":\"_sentAmount\",\"type\":\"uint256\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"delSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_transferFromInvestor\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"setSuperInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refreshInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CEx\",\"type\":\"address\"}],\"name\":\"TMTG_SetCEx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"CEx\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteCEx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SuperInvestor\",\"type\":\"address\"}],\"name\":\"TMTG_SetSuperInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SuperInvestor\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteSuperInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"TMTG_SetInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"TMTG_DeleteInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Stash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Unstash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TMTG_TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TMTG_Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"TMTG_Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"TMTG_Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TMTG_Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TMTG_Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerType\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TMTG_RoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TMTG_SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TMTG_DeletedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "TMTG", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b45b7722b8ad66fea601df027a03de79e6b371294cf9458ac8cc138fc9213a37"}]}