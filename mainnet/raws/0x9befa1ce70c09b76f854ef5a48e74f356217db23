{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ninterface METAPACK721 {\r\n    function setServiceValue(uint256 _serviceValue, uint256 sellerfee) external;\r\n\r\n    function addTokenType(string[] memory _type, address[] memory tokenAddress)\r\n        external;\r\n}\r\ninterface METAPACK1155 {\r\n    function setServiceValue(uint256 _serviceValue, uint256 sellerfee) external;\r\n\r\n    function addTokenType(string[] memory _type, address[] memory tokenAddress)\r\n        external;\r\n}\r\ncontract METAPACKTrade is Initializable, OwnableUpgradeable {\r\n    event SetPack(string indexed packName, uint256 indexed pPrice);\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n        serviceValue = 2500000000000000000;\r\n        sellervalue = 2500000000000000000;\r\n        tokenhold = 50000000000000000000;\r\n        mccTokenAddress = 0xcf50941a6875E6BCaB3859DB392013C543cdaDe7;\r\n    }\r\n    struct packInfo {\r\n        string packName;\r\n        uint256 packPrice; \r\n        uint256 multiples;\r\n    }\r\n    mapping(string => address) private tokentype;\r\n    mapping(address => uint256) public aPack;\r\n    uint256 private serviceValue;\r\n    uint256 private sellervalue;\r\n    packInfo[] public _pName;\r\n    premiumpackInfo[] public _premiumpName;\r\n    mapping(address => uint256) public aPremiumPack;\r\n    uint256 private tokenhold;\r\n    struct premiumpackInfo {\r\n        string packName;\r\n        uint256 packPrice;\r\n        uint256 multiples;\r\n    }\r\n    address public mccTokenAddress;\r\n    function getServiceFee() public view returns (uint256, uint256) {\r\n        return (serviceValue, sellervalue);\r\n    }\r\n    function setServiceValue(\r\n        uint256 _serviceValue,\r\n        uint256 sellerfee,\r\n        address[] memory _conAddress\r\n    ) public onlyOwner {\r\n        serviceValue = _serviceValue;\r\n        sellervalue = sellerfee;\r\n        METAPACK721(_conAddress[0]).setServiceValue(_serviceValue, sellerfee);\r\n        METAPACK1155(_conAddress[1]).setServiceValue(_serviceValue, sellerfee);\r\n    }\r\n    function getTokenAddress(string memory _type)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return tokentype[_type];\r\n    }\r\n\r\n    function addTokenType(\r\n        string[] memory _type,\r\n        address[] memory tokenAddress,\r\n        address[] memory _conAddress\r\n    ) public onlyOwner {\r\n        require(\r\n            _type.length == tokenAddress.length,\r\n            \"Not equal for type and tokenAddress\"\r\n        );\r\n        for (uint256 i = 0; i < _type.length; i++) {\r\n            tokentype[_type[i]] = tokenAddress[i];\r\n        }\r\n        METAPACK721(_conAddress[0]).addTokenType(_type, tokenAddress);\r\n        METAPACK1155(_conAddress[1]).addTokenType(_type, tokenAddress);\r\n    }\r\n    function addMccToken(address _conAddress) public onlyOwner{\r\n        mccTokenAddress = _conAddress;\r\n    }\r\n    function addNewPreminumPack(string memory _pname, uint256 _pfee, uint _multiples)\r\n        public\r\n        onlyOwner\r\n    {\r\n        premiumpackInfo memory _premiumpackInfo;\r\n        _premiumpackInfo.packName = _pname;\r\n        _premiumpackInfo.packPrice = _pfee;\r\n        _premiumpackInfo.multiples = _multiples;\r\n        _premiumpName.push(_premiumpackInfo);\r\n        emit SetPack(\r\n            _premiumpName[_premiumpName.length - 1].packName,\r\n            _premiumpName[_premiumpName.length - 1].packPrice\r\n        );\r\n    }\r\n\r\n    function addNewPack(string memory _pname, uint256 _pfee, uint _multiples) public onlyOwner {\r\n        packInfo memory _packInfo;\r\n        _packInfo.packName = _pname;\r\n        _packInfo.packPrice = _pfee;\r\n        _packInfo.multiples = _multiples;\r\n        _pName.push(_packInfo);\r\n        emit SetPack(\r\n            _pName[_pName.length - 1].packName,\r\n            _pName[_pName.length - 1].packPrice\r\n        );\r\n    }\r\n\r\n    function getPacks()\r\n        public\r\n        view\r\n        returns (packInfo[] memory, premiumpackInfo[] memory)\r\n    {\r\n        return (_pName, _premiumpName);\r\n    }\r\n\r\n    function editPremiumPackFee(\r\n        string memory _pname,\r\n        uint256 _pfee,\r\n        uint256 _pid,\r\n        uint _multiples\r\n        \r\n    ) public onlyOwner {\r\n        _premiumpName[_pid].packName = _pname;\r\n        _premiumpName[_pid].packPrice = _pfee;\r\n        _premiumpName[_pid].multiples = _multiples;\r\n        emit SetPack(_premiumpName[_pid].packName, _premiumpName[_pid].packPrice);\r\n    }\r\n\r\n    function editPackFee(\r\n        string memory _pname,\r\n        uint256 _pfee,\r\n        uint256 _pid,\r\n        uint _multiples\r\n    ) public onlyOwner {\r\n        _pName[_pid].packName = _pname;\r\n        _pName[_pid].packPrice = _pfee;\r\n        _pName[_pid].multiples = _multiples;\r\n        emit SetPack(_pName[_pid].packName, _pName[_pid].packPrice);\r\n    }\r\n\r\n    function buyPack(\r\n        uint256 _pid,\r\n        uint256 _nPack,\r\n        string memory _type\r\n    ) public payable {\r\n        if (\r\n            keccak256(abi.encodePacked((_type))) ==\r\n            keccak256(abi.encodePacked((\"Premium\")))\r\n        ) {\r\n            require(IERC20Upgradeable(mccTokenAddress).balanceOf(msg.sender) >= tokenhold, \"Not Eligible to Mint Premium Pack\");\r\n            require(\r\n                _premiumpName[_pid].packPrice.mul(_nPack) == msg.value,\r\n                \"Invalid Pack Price\"\r\n            );\r\n            aPremiumPack[msg.sender] = aPremiumPack[msg.sender].add(_nPack.mul(_premiumpName[_pid].multiples));\r\n            payable(owner()).transfer(msg.value);\r\n        } else {\r\n            require(\r\n                _pName[_pid].packPrice.mul(_nPack) == msg.value,\r\n                \"Invalid Pack Price\"\r\n            );\r\n            aPack[msg.sender] = aPack[msg.sender].add(_nPack.mul(_pName[_pid].multiples));\r\n            payable(owner()).transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    function availablePack(address from) public view returns (uint256, uint256) {\r\n        return (aPack[from],aPremiumPack[from]);\r\n    }\r\n    function getHoldTokenValue() public view returns (uint256) {\r\n        return tokenhold;\r\n    }\r\n    function editHoldTokenValue(uint256 value) public onlyOwner {\r\n        tokenhold = value;   \r\n    }\r\n\r\n    function decreasePack(address from,string memory _type) external {\r\n         if (\r\n            keccak256(abi.encodePacked((_type))) ==\r\n            keccak256(abi.encodePacked((\"Premium\")))\r\n        ){\r\n            aPremiumPack[from] = aPremiumPack[from].sub(1);\r\n        }\r\n        else{\r\n            aPack[from] = aPack[from].sub(1);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pPrice\",\"type\":\"uint256\"}],\"name\":\"SetPack\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"packPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiples\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_premiumpName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"packPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiples\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aPremiumPack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_conAddress\",\"type\":\"address\"}],\"name\":\"addMccToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiples\",\"type\":\"uint256\"}],\"name\":\"addNewPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiples\",\"type\":\"uint256\"}],\"name\":\"addNewPreminumPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_type\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_conAddress\",\"type\":\"address[]\"}],\"name\":\"addTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"availablePack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nPack\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"buyPack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"decreasePack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"editHoldTokenValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiples\",\"type\":\"uint256\"}],\"name\":\"editPackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pname\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiples\",\"type\":\"uint256\"}],\"name\":\"editPremiumPackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPacks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"packPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiples\",\"type\":\"uint256\"}],\"internalType\":\"struct METAPACKTrade.packInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"packName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"packPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiples\",\"type\":\"uint256\"}],\"internalType\":\"struct METAPACKTrade.premiumpackInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mccTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerfee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_conAddress\",\"type\":\"address[]\"}],\"name\":\"setServiceValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "METAPACKTrade", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://97c5ce2bc55411379ec2ee9e56ea972526d712d0aa5a0aadb77af6109196695b"}]}