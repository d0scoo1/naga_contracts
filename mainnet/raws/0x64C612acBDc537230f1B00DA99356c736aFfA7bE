{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/elements.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n//  \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n//  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n//  \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n//  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n// Created By: https://elements.blue\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n\\nimport {NFTDetails,Element,Meta} from \\\"./meta.sol\\\";\\n\\n\\ncontract Elements is ERC721Enumerable, Ownable {\\n    using Strings for uint256;\\n    event Mint(address indexed owner, uint256 indexed tokenId);\\n\\n    receive() external payable {}\\n\\n    mapping(bytes1 => Element) public elements;\\n    bytes1[] elementIds=[bytes1('1'),bytes1('2'),bytes1('3'),bytes1('4') ];\\n\\n    uint randNonce = 1;\\n    uint32[] raritykeys=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,5];\\n    uint32 basicElementSupplyCap = 37500;\\n    uint32 basicElementPreMintCap = 24;\\n    uint32 artLevelWeight = 4;\\n    uint32 maxLevelWeight = 20;\\n    mapping(bytes1 => uint32) public basicElementMintedCount;\\n\\n    // ----- Minting -----\\n    uint256 public mintPrice = 0.003 ether;\\n    uint256 private lastTokenId=1000;\\n    // Minting Stage:\\n    // 0 - Not open\\n    // 1 - freeMint\\n    // 2 - preMint\\n    // 3 - publicMint\\n    uint8 public mintingStage=0; \\n    mapping(address => uint256) public preMintAddresses;\\n\\n\\n    mapping(uint256 => NFTDetails) public tokenInfo;\\n    string public baseURI = \\\"\\\";\\n    string public externalURI = \\\"https://elements.blue\\\";\\n\\n    constructor() ERC721(\\\"Elements\\\", \\\"Elements\\\") {\\n         // Adding basic Elements\\n         bytes1[] memory _parents;\\n         elements[\\\"1\\\"] = Element({name: \\\"Fire\\\", parents:  _parents,supply: 0,supplyMass:0, tier:0 });\\n         elements[\\\"2\\\"] = Element({name: \\\"Water\\\", parents:  _parents,supply: 0, supplyMass:0, tier:0 });\\n         elements[\\\"3\\\"] = Element({name: \\\"Air\\\", parents:  _parents,supply: 0,supplyMass:0, tier:0 });\\n         elements[\\\"4\\\"] = Element({name: \\\"Earth\\\", parents:  _parents,supply: 0,supplyMass:0, tier:0 });\\n          \\n \\n        // Initial Creatures before mint\\n        bytes1[] memory _parents2=new bytes1[](2);\\n        _parents2[0]=bytes1('1');\\n        _parents2[1]=bytes1('4');\\n        elements[\\\"M\\\"] = Element({name: \\\"Roc\\\", parents: _parents2,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('M'));\\n\\n        bytes1[] memory _parents3=new bytes1[](2);\\n        _parents3[0]=bytes1('2');\\n        _parents3[1]=bytes1('3');\\n        elements[\\\"L\\\"] = Element({name: \\\"Erawan\\\", parents: _parents3,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('l'));\\n\\n        bytes1[] memory _parents4=new bytes1[](2);\\n        _parents4[0]=bytes1('2');\\n        _parents4[1]=bytes1('4');\\n        elements[\\\"E\\\"] = Element({name: \\\"Mandrake\\\", parents: _parents4,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('E'));\\n\\n\\n        bytes1[] memory _parents5=new bytes1[](2);\\n        _parents5[0]=bytes1('1');\\n        _parents5[1]=bytes1('3');\\n        elements[\\\"D\\\"] = Element({name: \\\"Vethal\\\", parents: _parents5,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('D'));\\n\\n\\n        bytes1[] memory _parents7=new bytes1[](2);\\n        _parents7[0]=bytes1('M');\\n        _parents7[1]=bytes1('3');\\n        elements[\\\"F\\\"] = Element({name: \\\"Anga\\\", parents: _parents7,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('F'));\\n\\n\\n        bytes1[] memory _parents8=new bytes1[](2);\\n        _parents8[0]=bytes1('L');\\n        _parents8[1]=bytes1('4');\\n        elements[\\\"O\\\"] = Element({name: \\\"Titan\\\", parents: _parents8,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('O'));\\n\\n        bytes1[] memory _parents9=new bytes1[](2);\\n        _parents9[0]=bytes1('D');\\n        _parents9[1]=bytes1('2');\\n        elements[\\\"J\\\"] = Element({name: \\\"Wukong\\\", parents: _parents9,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('J'));\\n\\n        bytes1[] memory _parents10=new bytes1[](2);\\n        _parents10[0]=bytes1('E');\\n        _parents10[1]=bytes1('1');\\n        elements[\\\"H\\\"] = Element({name: \\\"Herbant\\\", parents: _parents10,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('H'));\\n\\n        bytes1[] memory _parents11=new bytes1[](2);\\n        _parents11[0]=bytes1('E');\\n        _parents11[1]=bytes1('D');\\n        elements[\\\"C\\\"] = Element({name: \\\"Flus\\\", parents: _parents11,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('C'));\\n\\n        bytes1[] memory _parents12=new bytes1[](2);\\n        _parents12[0]=bytes1('M');\\n        _parents12[1]=bytes1('L');\\n        elements[\\\"G\\\"] = Element({name: \\\"Lado\\\", parents: _parents12,supply: 0,supplyMass:0, tier:2});\\n        elementIds.push(bytes1('G'));\\n\\n        bytes1[] memory _parents13=new bytes1[](2);\\n        _parents13[0]=bytes1('C');\\n        _parents13[1]=bytes1('G');\\n        elements[\\\"N\\\"] = Element({name: \\\"Demon\\\", parents: _parents13,supply: 0,supplyMass:0, tier:3});\\n        elementIds.push(bytes1('N'));\\n\\n        bytes1[] memory _parents14=new bytes1[](2);\\n        _parents14[0]=bytes1('O');\\n        _parents14[1]=bytes1('H');\\n        elements[\\\"K\\\"] = Element({name: \\\"Deacon\\\", parents: _parents14,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('K'));\\n\\n        bytes1[] memory _parents15=new bytes1[](2);\\n        _parents15[0]=bytes1('F');\\n        _parents15[1]=bytes1('J');\\n        elements[\\\"I\\\"] = Element({name: \\\"Makara\\\", parents: _parents15,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('I'));\\n\\n        bytes1[] memory _parents16=new bytes1[](2);\\n        _parents16[0]=bytes1('N');\\n        _parents16[1]=bytes1('K');\\n        elements[\\\"A\\\"] = Element({name: \\\"Vamp\\\", parents: _parents16,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('A'));\\n\\n        bytes1[] memory _parents17=new bytes1[](2);\\n        _parents17[0]=bytes1('N');\\n        _parents17[1]=bytes1('I');\\n        elements[\\\"B\\\"] = Element({name: \\\"Dragon\\\", parents: _parents17,supply: 0,supplyMass:0, tier:1});\\n        elementIds.push(bytes1('B')); \\n    }\\n\\n    function addToWhitelist(address[] memory toAdd) external onlyOwner {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            preMintAddresses[toAdd[i]] = basicElementPreMintCap;\\n            \\n        }\\n    }\\n   \\n    \\n    // Spit higher mass to one mass\\n    function split (uint256    _tokenId) external payable {\\n        require( _exists(_tokenId), \\\"nonexistent token\\\" );\\n        require(ownerOf(_tokenId)==msg.sender,\\\"  token not owned\\\");\\n        NFTDetails memory tokenDetails= tokenInfo[_tokenId];\\n        require(  tokenDetails.mass>= 2 , \\\"low mass\\\" );\\n        uint32 newImmunity=tokenDetails.immunity+1;  \\n        tokenInfo[_tokenId]=NFTDetails({elementId:tokenDetails.elementId, mass: 1, power:tokenDetails.power, immunity:newImmunity, experience:tokenDetails.experience});\\n        for (uint256 i = 1; i < tokenDetails.mass; i++) {\\n            _mintWithoutValidation(msg.sender, tokenDetails.elementId, 1,tokenDetails.power,newImmunity,tokenDetails.experience);\\n        }  \\n        addElementSupply(tokenDetails.elementId,(tokenDetails.mass-1),0,false,false);\\n        // No Change in Supply Mass\\n    }\\n    // Split NFT into parent NFTs\\n    function fision (uint256 _tokenId ) external payable {\\n        require( _exists(_tokenId), \\\"nonexistent token\\\" );\\n        require(ownerOf(_tokenId)==msg.sender,\\\"  token not owned\\\");\\n        NFTDetails memory tokenDetails= tokenInfo[_tokenId];\\n        require( elements[tokenDetails.elementId].parents.length>0, \\\"should not be a base element\\\" );\\n        //Adjust Mass\\n        addElementSupply(tokenDetails.elementId,1, tokenDetails.mass,true,true );\\n        addElementSupply(elements[tokenDetails.elementId].parents[0],1, tokenDetails.mass,false,false);\\n        tokenInfo[_tokenId]=NFTDetails({elementId:elements[tokenDetails.elementId].parents[0], mass: tokenDetails.mass, power:tokenDetails.power, immunity:tokenDetails.immunity+1, experience:tokenDetails.experience});\\n        for (uint256 i = 1; i < elements[tokenDetails.elementId].parents.length; i++) {\\n            addElementSupply(elements[tokenDetails.elementId].parents[i],1, tokenDetails.mass,false,false);\\n            _mintWithoutValidation(msg.sender, elements[tokenDetails.elementId].parents[i] , tokenDetails.mass,tokenDetails.power, tokenDetails.immunity+1, tokenDetails.experience);\\n        }\\n    }\\n    // Adjust Supply on every action\\n    function addElementSupply(bytes1 elementId, uint32 supply, uint32 supplyMass ,bool subSupply, bool subMass ) private {\\n        if(supply!=0){\\n            if(subSupply){\\n                require(elements[elementId].supply>=supply,\\\"wrong supply\\\");\\n                elements[elementId].supply-=supply;\\n            }else{\\n                elements[elementId].supply+=supply;\\n            }\\n        }\\n         if(supplyMass!=0){\\n            if(subMass){\\n                require(elements[elementId].supplyMass>=supplyMass,\\\"wrong supplyMass\\\");\\n                elements[elementId].supplyMass-=supplyMass;\\n            }else{\\n                elements[elementId].supplyMass+=supplyMass;\\n            } \\n        }\\n    }\\n    // Combine Same Elements to increase mass\\n    function combine (uint256[]  memory  _tokenIds, uint256    _burnTokenId) external payable {\\n        require(_tokenIds.length>1,\\\"atleast 2 elements required\\\");\\n        require(_tokenIds.length<=10,\\\"can't combine more than 10 elements\\\");\\n        require(!hasDuplicates(_tokenIds,_burnTokenId),\\\"duplicates tokens\\\");\\n        if(_burnTokenId>0){\\n            require(_exists(_burnTokenId),\\\"burn token not exist\\\");\\n            require(ownerOf(_burnTokenId)==msg.sender,\\\"burn token not owned\\\");\\n        }\\n        bytes1 _resultElementId=tokenInfo[_tokenIds[0]].elementId;\\n        uint32 newMass=0;\\n        uint32 newPower=0;  \\n        uint32 newImmunity=0;  \\n        uint32 newExperience=0;\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(_exists(_tokenIds[i]),\\\"token not exist\\\");\\n            require(ownerOf(_tokenIds[i])==msg.sender,\\\"token not owned\\\");\\n            NFTDetails memory tokenDetails= tokenInfo[_tokenIds[i]];\\n            require(tokenDetails.elementId==_resultElementId,\\\"all should be same element\\\"); \\n            newMass+=tokenDetails.mass;\\n            newPower+=(tokenDetails.power*tokenDetails.mass);\\n            newImmunity+=(tokenDetails.immunity*tokenDetails.mass);\\n            newExperience+=(tokenDetails.experience*tokenDetails.mass);\\n        }\\n        newPower=(newPower/newMass)+1;  \\n        newImmunity=newImmunity/newMass;  \\n        newExperience=newExperience/newMass;\\n        // Burn all tokens\\n        if(_burnTokenId>0){\\n            //mass of burn id is greater than one\\n            if(tokenInfo[_burnTokenId].mass>1){\\n                tokenInfo[_burnTokenId].mass-=1;\\n                addElementSupply(tokenInfo[_burnTokenId].elementId,0,1,false,true);\\n            }else{ // burn token id mass is one\\n                addElementSupply(tokenInfo[_burnTokenId].elementId,1,1, true, true);\\n                _burnToken(_burnTokenId);\\n            }\\n            addElementSupply(_resultElementId,uint32(_tokenIds.length-1),0, true, false);\\n        }else{\\n            newMass-=1;\\n            require(newMass<=1,\\\"add more elements to combine\\\");\\n            addElementSupply(_resultElementId,uint32(_tokenIds.length-1),1, true, true);\\n        }\\n        for (uint256 i = 1; i < _tokenIds.length; i++) {\\n             _burnToken(_tokenIds[i]);\\n        }\\n        tokenInfo[_tokenIds[0]]=NFTDetails({elementId:_resultElementId, mass: newMass, power:newPower, immunity:newImmunity, experience:newExperience});\\n    }\\n\\n \\n    // Check duplicates\\n     function hasDuplicates(uint256[] memory _tokenIds,uint256 _burnTokenId) internal pure returns (bool) {\\n          for (uint256 i = 0; i < _tokenIds.length; i++) {\\n              for (uint256 j = i+1; j < _tokenIds.length; j++) {\\n                  if(_tokenIds[i]==_tokenIds[j]){\\n                      return true;\\n                  }\\n              }\\n              if(_burnTokenId>0 && _tokenIds[i]==_burnTokenId){\\n                      return true;\\n              }\\n          }\\n          return false;\\n     }\\n    \\n    \\n    // Combine nfts to create higher tier NFts\\n    function fusion (uint256[] memory _tokenIds, string memory __resultId, uint32 _resultMass, uint256 _burnTokenId) external payable {\\n        require(_tokenIds.length>1 \\n                && bytes(__resultId).length==1\\n                && _resultMass>0\\n                && _burnTokenId>0 , \\\"tokens requiremnt not met\\\" );\\n        bytes1 _resultId= bytes1( bytes(__resultId) );\\n        require(elements[_resultId].parents.length>1,\\\"result token should not be a base element\\\");\\n        require(ownerOf(_burnTokenId)==msg.sender,\\\"burn token not owned\\\");\\n        require(!hasDuplicates(_tokenIds,_burnTokenId),\\\"duplicate tokens\\\");\\n        uint32[] memory massToBurn  =new uint32[](_tokenIds.length) ; // Mass to burn for each token\\n        uint32[] memory massRequired =new uint32[](elements[_resultId].parents.length) ; // To Check enough elements added\\n        \\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n             require(_exists(_tokenIds[i]),\\\"token not exist\\\");\\n             require(ownerOf(_tokenIds[i])==msg.sender,\\\"token not owned\\\");\\n             NFTDetails memory tokenDetails= tokenInfo[_tokenIds[i]];\\n            for (uint256 j = 0; j < elements[_resultId].parents.length; j++) {\\n                 \\n                if(elements[_resultId].parents[j]==tokenDetails.elementId  // incoming token contains required element \\n                    && massRequired[j]<_resultMass){ // required mass not meet\\n                       \\n                        uint32 newMassRequirement=_resultMass-massRequired[j];\\n                        \\n                        if(tokenDetails.mass<=newMassRequirement){ // dont have enough mass or equal\\n                            massRequired[j]+=tokenDetails.mass;\\n                            massToBurn[i]+=tokenDetails.mass;\\n                        }else{\\n                            massRequired[j]+=newMassRequirement;\\n                            massToBurn[i]+=newMassRequirement;\\n                        }\\n                    }\\n             }\\n        }\\n         \\n        //Check input tokens have enough mass\\n        for (uint256 j = 0; j < elements[_resultId].parents.length; j++) {\\n             require(massRequired[j]==_resultMass, \\\"mass requirement not met\\\"); \\n        }\\n        \\n        uint32 massBurned=0; \\n        uint32 powerBurned=0;  \\n        uint32 immunityBurned=0;  \\n        uint32 experienceBurned=0;\\n        // Burn Parents and Mint if there is additional mass\\n         for (uint256 i = 0; i < _tokenIds.length; i++) {\\n             NFTDetails memory tokenDetails= tokenInfo[_tokenIds[i]];\\n             if(massToBurn[i]>0 ){\\n                 if(tokenDetails.mass>massToBurn[i]){\\n                     \\n                     tokenInfo[_tokenIds[i]].mass=tokenDetails.mass-massToBurn[i];\\n                     addElementSupply(tokenDetails.elementId,0,  massToBurn[i], false, true);\\n                      \\n                 }else{\\n                     addElementSupply(tokenDetails.elementId, 1,  massToBurn[i], true, true);\\n                     _burnToken(_tokenIds[i]);\\n                 }\\n                 massBurned+=massToBurn[i];\\n                 powerBurned+=(tokenDetails.power*massToBurn[i]);\\n                 immunityBurned+=(tokenDetails.immunity*massToBurn[i]);\\n                 experienceBurned+=(tokenDetails.experience*massToBurn[i]);\\n\\n             }\\n         }\\n         // Burn Burn Element\\n          NFTDetails memory burnTokenDetails= tokenInfo[_burnTokenId];\\n          if(burnTokenDetails.mass>1){\\n                tokenInfo[_burnTokenId].mass-=1;\\n                addElementSupply(burnTokenDetails.elementId,0, 1, false, true);\\n          }else{\\n                addElementSupply(burnTokenDetails.elementId, 1, 1, true, true);\\n                _burnToken(_burnTokenId);\\n                \\n          }\\n\\n          powerBurned =(powerBurned/massBurned)+1;\\n          immunityBurned=immunityBurned/massBurned;\\n          experienceBurned=experienceBurned/massBurned;\\n\\n          // Mint result NFT\\n          _mintWithoutValidation(msg.sender, _resultId, _resultMass,powerBurned, immunityBurned, experienceBurned);\\n          addElementSupply(_resultId,1,_resultMass, false, false);\\n    }  \\n    \\n    function stringToBytes1(string memory source) public pure returns (bytes1  result) {\\n    bytes memory tempEmptyStringTest = bytes(source);\\n    if (tempEmptyStringTest.length == 0) {\\n        return 0x0;\\n    }\\n\\n    assembly {\\n        result := mload(add(source, 1))\\n    }\\n}\\n\\n    function mint (string[] memory _elements, uint8[] memory _mass) external payable {\\n        require(mintingStage>0, \\\"premint/public mint not active\\\" );\\n        require(_elements.length == _mass.length, \\\"wrong elements/mass\\\" );\\n        uint32 totalWeight=0;\\n        // Additional Validation\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n             bytes1   elementId= bytes1( bytes(_elements[i]) );\\n            // Can Mint only Basic Elements\\n            require(elements[elementId].parents.length==0,   \\\" Not a basic Element\\\" );\\n            // Check Basic Elements Supply Cap : [ if parents is null, its a basic element]\\n             require(basicElementMintedCount[elementId]  + _mass[i] <= basicElementSupplyCap, \\\"supply cap\\\" );\\n            //changed to \\n           // require(basicElementMintedCount[elementId]  + _mass[i] <= elements[elementId].totalSupply, \\\"supply cap\\\" );\\n            totalWeight+=_mass[i];\\n        }\\n        require( totalWeight >0, \\\"No elements selected\\\" );\\n        if(mintingStage==1){ // Is freemint\\n            //Check Whitelist\\n            require( totalWeight <= preMintAddresses[msg.sender], \\\"WL Alloc Cap\\\" );\\n        }else {\\n            if(mintingStage==2){ //Is Pre Mint\\n                \\n                require( totalWeight <= preMintAddresses[msg.sender], \\\"WL Alloc Cap\\\" );\\n            \\n            }else if(mintingStage==3){ //Is public Mint\\n                // do nothing\\n            }\\n            // Check payable amount\\n            require( totalWeight * mintPrice <= msg.value, \\\"amount low\\\" );\\n        }\\n\\n        // Check max mint per transaction\\n        require(totalWeight<=basicElementPreMintCap, \\\"user mint cap\\\" );\\n\\n        // --------- START MINTING -------------------\\n        if(mintingStage<=2){ // Is premint\\n            preMintAddresses[msg.sender] -= totalWeight;\\n        }else if(mintingStage==3){ // Is public Mint\\n            \\n        }\\n        for (uint256 i = 0; i < _elements.length; i++) {\\n            bytes1   elementId= bytes1( bytes(_elements[i]) );\\n            // For basic element mint Count\\n            basicElementMintedCount[elementId]+=_mass[i];\\n             addElementSupply(elementId,1,_mass[i], false, false);\\n            _mintWithoutValidation(msg.sender,elementId,_mass[i],_randomRarity(uint(_mass[i])),_randomRarity(uint(_mass[i])),0);\\n        }\\n       \\n     }\\n\\n    \\n    function _randomRarity(uint checks) private returns (uint32){\\n        uint totalR=0;\\n        for(uint i=0;i<checks;i++){\\n            totalR+=uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, randNonce++))) %  (raritykeys.length);\\n        }\\n        if(checks>1){\\n            totalR=totalR/checks;\\n        }\\n        return raritykeys[totalR]  ;\\n    }\\n    \\n    function _getArtWeight(  uint32 mass, uint32 power,  uint32 immunity) private view  returns (uint256){\\n       uint256 totalWeight= (mass+power+immunity)/artLevelWeight;\\n       if(totalWeight<maxLevelWeight){\\n           return totalWeight;\\n       }else{\\n           return maxLevelWeight;\\n       }\\n    }\\n\\n    function _burnToken(uint256 tokenId  ) internal {\\n        delete tokenInfo[tokenId] ;\\n        _burn(tokenId );\\n    }\\n\\n    function _mintWithoutValidation(address to, bytes1 elementId, uint32 mass, uint32 power,  uint32 immunity,  uint32 experience) internal {\\n        // Element Should Exist\\n        require(elementExists(elementId), \\\"Element Not Exists\\\");\\n        // Add token Count\\n        lastTokenId++;\\n        // Add token metadata\\n        tokenInfo[lastTokenId]=NFTDetails({elementId:elementId, mass: mass, power:power, immunity:immunity, experience:experience});\\n        // Mint\\n        _safeMint(to, lastTokenId);\\n        emit Mint(to, lastTokenId);\\n    }\\n \\n\\n    function tokenURI(uint256 tokenId) public view  virtual  override  returns (string memory)\\n    {\\n        require( _exists(tokenId), \\\"nonexistent token\\\" );\\n        require( bytes(baseURI).length >0,\\\"baseuri error\\\");\\n        return  Meta.getMeta(tokenId,_getArtWeight( tokenInfo[tokenId].mass, tokenInfo[tokenId].power, tokenInfo[tokenId].immunity) , tokenInfo[tokenId],elements[tokenInfo[tokenId].elementId],externalURI,baseURI);\\n    }\\n\\n\\n  \\n\\n    // Update Elements Master error\\n    function addNftElement(\\n        string memory _elementId,\\n        string memory _elementName,\\n        string[] memory _parents,\\n        uint8 tier\\n    ) external onlyOwner {\\n        bytes1   elementId= bytes1( bytes(_elementId) );\\n        require( !elementExists(elementId), \\\"Exist\\\" );\\n        bytes1[]  memory parents =new  bytes1[](_parents.length);\\n        for(uint i=0;i<_parents.length;i++){\\n            parents[0]= (bytes1( bytes(_parents[i]) ));\\n        }\\n        elements[elementId] = Element({name: bytes(_elementName), parents: parents, supply:0, supplyMass:0, tier:tier});\\n        elementIds.push(elementId);\\n    }\\n    function updateNftElement(\\n        string memory _elementId,\\n        string memory _elementName,\\n        string[] memory _parents,\\n        uint8 tier\\n    ) external onlyOwner {\\n         bytes1   elementId= bytes1( bytes(_elementId) );\\n        require( elementExists(elementId), \\\"Not Exist\\\" );\\n        bytes1[] memory parents=new  bytes1[](_parents.length);\\n        for(uint i=0;i<_parents.length;i++){\\n            bytes1   parentId=bytes1( bytes(_parents[i]) );\\n            require( elementExists(parentId), \\\"Not Exist\\\" );\\n            parents[i]=parentId;\\n        }\\n        elements[elementId].name =bytes(_elementName);\\n        elements[elementId].parents =parents; \\n        elements[elementId].tier =tier; \\n    }\\n    // Other basic Utilities\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n    function setBaseURI(string memory _newURI,bool  isExternal) public onlyOwner {\\n        if(isExternal){\\n            externalURI=_newURI;\\n        }else{\\n            baseURI = _newURI;\\n        }\\n        \\n    }\\n    function setCost(uint256   _newCost) public onlyOwner {\\n        mintPrice = _newCost;\\n    }\\n    function setLevelWeight( uint32 _artLevelWeight,uint32 _maxLevelWeight) public onlyOwner {\\n        if(_artLevelWeight>0){\\n            artLevelWeight = _artLevelWeight;\\n        }\\n        if(_maxLevelWeight>0){\\n            maxLevelWeight = _maxLevelWeight;\\n        }\\n    }\\n    function setSupplyCap(uint32 _basicElementSupplyCap ) public onlyOwner {\\n          basicElementSupplyCap =_basicElementSupplyCap;\\n    }\\n    function setMintCap(  uint32 _basicElementPreMintCap) public onlyOwner {  \\n      basicElementPreMintCap = _basicElementPreMintCap;\\n    }\\n    function setMintingStage(uint8   _stage) public onlyOwner {\\n        mintingStage = _stage;\\n    }\\n    function elementExists(bytes1  _elementId) internal view returns (bool ){\\n        bool doesListContainElement = false;\\n        for (uint i=0; i < elementIds.length; i++) {\\n            if (_elementId == elementIds[i]) {\\n                doesListContainElement = true;\\n            }\\n        }\\n        return doesListContainElement;\\n    }\\n\\n \\n\\n    function withdraw() public payable onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override{\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        if(to!=address(0) && from!=address(0)){\\n             tokenInfo[tokenId].experience+=1;\\n        }\\n    }\\n \\n}\\n\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/meta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Base64} from \\\"./base64.sol\\\";\\nstruct NFTDetails {\\n        bytes1 elementId;\\n        uint32 mass;\\n        uint32 immunity;\\n        uint32 power;\\n        uint32 experience;\\n    }\\n\\nstruct Element {\\n        bytes name;\\n     \\n        bytes1[] parents;\\n        uint32 supply;\\n        uint32 supplyMass;\\n        uint8 tier;\\n    }\\n\\nlibrary Meta {\\n\\n    string public constant description= \\\"The Game of Building, Fighting and Owning Powerful Creatures on 'Planet EO'.\\\";\\n\\n    function getMeta(uint256 tokenId,uint256 artWeight, NFTDetails memory metadata, Element memory element, string memory external_url, string memory meta_url) public pure returns (string memory) {\\n        bytes memory byteString  = abi.encodePacked(\\\"{\\\");\\n        \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonStringAttribute(\\\"name\\\", string(abi.encodePacked(string(element.name),' [',toString(metadata.mass),'] #', toString(tokenId)))  , true));\\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonStringAttribute(\\\"description\\\",string( description)  , true));\\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonStringAttribute(\\\"external_url\\\",string(external_url)  , true));\\n\\n        // Image URls\\n        bytes memory elementFileName=isLowerCase(metadata.elementId)?abi.encodePacked(\\\"_\\\",metadata.elementId):abi.encodePacked(metadata.elementId);\\n        string memory parameters=string(abi.encodePacked(\\n                \\\"element=\\\",elementFileName,\\n                \\\"&experience=\\\",toString(metadata.experience),\\n                \\\"&mass=\\\",toString(metadata.mass),\\n                \\\"&immunity=\\\",toString(metadata.immunity),\\n                \\\"&power=\\\",toString(metadata.power),\\n                \\\"&level=\\\",toString(artWeight),\\n                \\\"&tier=\\\",toString(element.tier)));\\n          byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonStringAttribute(\\\"animation_url\\\",string(abi.encodePacked(meta_url,\\\"html/\\\",elementFileName,\\\".html?\\\",  parameters))  , true));\\n\\n         \\n       // elementFileName=abi.encodePacked( elementFileName,\\\"-\\\", toString(artWeight));\\n         \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonStringAttribute(\\\"image\\\",string(abi.encodePacked(meta_url,\\\"images/\\\",elementFileName,\\\"-\\\", toString(artWeight),\\\".png\\\"))  , true));\\n              \\n        // Attributes\\n        byteString = abi.encodePacked(byteString,'\\\"attributes\\\": [' );\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonTraitNumber(\\\"Mass\\\", toString(metadata.mass) , true));\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonTraitNumber(\\\"Immunity\\\", toString(metadata.immunity) , true));\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonTraitNumber(\\\"Power\\\", toString(metadata.power) , true));\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonTraitNumber(\\\"Experience\\\", toString(metadata.experience) , true));\\n        byteString = abi.encodePacked(\\n            byteString,\\n            '{\\\"trait_type\\\":\\\"Tier\\\", \\\"value\\\":', toString(element.tier),  ', \\\"display_type\\\":\\\"number\\\"},');\\n        byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonTraitString(\\\"Tier Name\\\",string( abi.encodePacked(\\\"Tier \\\",toString(element.tier)) ), false));\\n         byteString = abi.encodePacked(byteString,']}' );\\n\\n         string memory base64Json = Base64.encode(byteString);\\n        return string(abi.encodePacked('data:application/json;base64,', base64Json));\\n        // return string(byteString);\\n    }\\n\\n     \\n\\n    function _getString(string memory _str) private pure returns (string memory){\\n        return string(abi.encodePacked(_str));\\n    }\\n    function _getField(string memory _str) private pure returns (string memory){\\n        return string(abi.encodePacked(_str));\\n    }\\n    function _pushJsonStringAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": \\\"', value, '\\\"', insertComma ? ',' : ''));\\n    }\\n    function _pushJsonTraitNumber(string memory trait_type, string memory trait_value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"', trait_type, '\\\", \\\"value\\\":', trait_value,   insertComma ? '},' : '}'\\n            ));\\n    }\\n    function _pushJsonTraitString(string memory trait_type, string memory trait_value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"trait_type\\\":\\\"', trait_type, '\\\", \\\"value\\\":\\\"', trait_value, '\\\"' , insertComma ? '},' : '}'\\n            ));\\n    }\\n\\n    function isLowerCase(bytes1 _id) public pure returns(bool){\\n        bytes memory allowed = bytes(\\\"abcdefghijklmnopqrstuvwxyz\\\"); \\n        for(uint j=0; j<allowed.length; j++){\\n            if(_id==allowed[j] ){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n \\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\n \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/meta.sol\": {\r\n        \"Meta\": \"0x0666b387167fec46b2efbad730c0a14dfd6f052f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_elementId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_elementName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_parents\",\"type\":\"string[]\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"addNftElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"name\":\"basicElementMintedCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_burnTokenId\",\"type\":\"uint256\"}],\"name\":\"combine\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"name\":\"elements\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"supply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"supplyMass\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fision\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"__resultId\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"_resultMass\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_burnTokenId\",\"type\":\"uint256\"}],\"name\":\"fusion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_elements\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_mass\",\"type\":\"uint8[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingStage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preMintAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isExternal\",\"type\":\"bool\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_artLevelWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxLevelWeight\",\"type\":\"uint32\"}],\"name\":\"setLevelWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_basicElementPreMintCap\",\"type\":\"uint32\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"setMintingStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_basicElementSupplyCap\",\"type\":\"uint32\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes1\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"result\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"elementId\",\"type\":\"bytes1\"},{\"internalType\":\"uint32\",\"name\":\"mass\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"immunity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"power\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"experience\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_elementId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_elementName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_parents\",\"type\":\"string[]\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"updateNftElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Elements", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}