{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-02-06\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT License\r\n\r\n/*\r\n\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\r\n\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\r\n\u2591\u255a\u2550\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\r\nBy: BR33D                                                         */\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface iOIL {\r\n    function balanceOf(address address_) external view returns (uint); \r\n    function transferFrom(address from_, address to_, uint amount) external returns (bool);\r\n    function burn(address from_, uint amount) external;\r\n}\r\n\r\ncontract OilDraw {\r\n\r\n    address public owner;\r\n    address[] public players;\r\n    \r\n    uint256 public ticketPrice = 25000000000000000000000; // 25,000ETH\r\n    uint256 public drawId;\r\n\tuint256 public maxTicketsPerTx = 50;\r\n    \r\n    bool public drawLive = false;\r\n\r\n    mapping (uint => address) public pastDraw;\r\n    mapping (address => uint256) public userEntries;\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        drawId = 1;\r\n    }\r\n\r\n    address public oilAddress;\r\n    iOIL public Oil;\r\n    function setOil(address _address) external onlyOwner {\r\n        oilAddress = _address;\r\n        Oil = iOIL(_address);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /*  ======================\r\n        |---Entry Function---|\r\n        ======================\r\n    */\r\n\r\n    function enterDraw(uint256 _numOfTickets) public payable {\r\n        uint256 totalTicketCost = ticketPrice * _numOfTickets;\r\n        require(Oil.balanceOf(msg.sender) >= ticketPrice * _numOfTickets, \"insufficent $Oil\");\r\n        require(drawLive == true, \"cannot enter at this time\");\r\n        require(_numOfTickets <= maxTicketsPerTx, \"too many per TX\");\r\n\r\n        uint256 ownerTicketsPurchased = userEntries[msg.sender];\r\n        require(ownerTicketsPurchased + _numOfTickets <= maxTicketsPerTx, \"only allowed 50 tickets\");\r\n        Oil.burn(msg.sender, totalTicketCost);\r\n\r\n        // player ticket purchasing loop\r\n        for (uint256 i = 1; i <= _numOfTickets; i++) {\r\n            players.push(msg.sender);\r\n            userEntries[msg.sender]++;\r\n        }\r\n        \r\n    }\r\n\r\n    /*  ======================\r\n        |---View Functions---|\r\n        ======================\r\n    */\r\n\r\n    function getRandom() public view returns (uint) {\r\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.coinbase)));\r\n        uint index = rand % players.length;\r\n        return index;\r\n    }\r\n\r\n    function getPlayers() public view returns (address[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function drawEntrys() public view returns (uint) {\r\n        return players.length;\r\n    }\r\n\r\n    function getWinnerByDraw(uint _drawId) public view returns (address) {\r\n        return pastDraw[_drawId];\r\n    }\r\n\r\n    // Retrieves total entries of players address\r\n    function playerEntries(address _player) public view returns (uint256) {\r\n        address addressOfPlayer = _player;\r\n        uint arrayLength = players.length;\r\n        uint totalEntries = 0;\r\n        for (uint256 i; i < arrayLength; i++) {\r\n            if(players[i] == addressOfPlayer) {\r\n                totalEntries++;\r\n            }\r\n            \r\n        }\r\n        return totalEntries;\r\n    }\r\n\r\n\r\n    /*  ============================\r\n        |---Owner Only Functions---|\r\n        ============================\r\n    */\r\n\r\n    // Salt should be a random number from 1 - 1,000,000,000,000,000\r\n    function pickWinner(uint _firstSalt, uint _secondSalt, uint _thirdSalt, uint _fourthSalt, uint _fifthSalt, uint _sixthSalt, uint _seventhSalt, uint _eighthSalt, uint _ninethSalt) public onlyOwner {\r\n        uint rand = getRandom();\r\n        uint firstWinner = (rand + _firstSalt) % players.length;\r\n        uint secondWinner = (firstWinner + _secondSalt) % players.length;\r\n        uint thirdWinner = (secondWinner + _thirdSalt) % players.length;\r\n        uint fourthWinner = (thirdWinner + _fourthSalt) % players.length;\r\n        uint fifthWinner = (fourthWinner + _fifthSalt) % players.length;\r\n        uint sixthWinner = (fifthWinner + _sixthSalt) % players.length;\r\n        uint seventhWinner = (sixthWinner + _seventhSalt) % players.length;\r\n        uint eighthWinner = (seventhWinner + _eighthSalt) % players.length;\r\n        uint ninethWinner = (eighthWinner + _ninethSalt) % players.length;\r\n\r\n        pastDraw[drawId] = players[firstWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[secondWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[thirdWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[fourthWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[fifthWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[sixthWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[seventhWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[eighthWinner];\r\n        drawId++;\r\n        pastDraw[drawId] = players[ninethWinner];\r\n        drawId++;\r\n    }\r\n\r\n    function setTicketPrice(uint256 _newTicketPrice) public onlyOwner {\r\n        ticketPrice = _newTicketPrice;\r\n    }\r\n\r\n    function setMaxTicket(uint256 _maxTickets) public onlyOwner {\r\n        maxTicketsPerTx = _maxTickets;\r\n    }\r\n\r\n    function startEntries() public onlyOwner {\r\n        drawLive = true;\r\n    }\r\n\r\n    function stopEntries() public onlyOwner {\r\n        drawLive = false;\r\n    }\r\n\r\n    function transferOwnership(address _address) public onlyOwner {\r\n        owner = _address;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Oil\",\"outputs\":[{\"internalType\":\"contract iOIL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawEntrys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfTickets\",\"type\":\"uint256\"}],\"name\":\"enterDraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawId\",\"type\":\"uint256\"}],\"name\":\"getWinnerByDraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTicketsPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oilAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastDraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fourthSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fifthSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sixthSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seventhSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eighthSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ninethSalt\",\"type\":\"uint256\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"playerEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTickets\",\"type\":\"uint256\"}],\"name\":\"setMaxTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OilDraw", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8b3679e5d0a6c121f26ce768dfac3e541254e4b4a1975a05dbe8517f3b6ed2b"}]}