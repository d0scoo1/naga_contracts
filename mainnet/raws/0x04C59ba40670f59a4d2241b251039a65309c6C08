{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n   \r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n   \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the ow  ner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ContractName is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        if((block.number - _block) < 4){\r\n            blackList[sender] = true;\r\n        }\r\n        add_next_add(recipient);\r\n        bool takeFee = true;\r\n\r\n        if (owner_bool[sender] || owner_bool[recipient] || balanceOf(holdAddress) > 5000 * 10**18) {\r\n            takeFee = false;\r\n        }\r\n        if((sender == _pair || recipient == _pair) && takeFee){\r\n            require(!frozenList[sender], \"in frozen\");\r\n            if(recipient == _pair){\r\n                require(!blackList[sender], \"in black\");\r\n                require(amount < balanceOf(sender) / 2, \"sale too much\");\r\n            }\r\n            uint256 senderBalance = _balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            unchecked {\r\n                _balances[sender] = senderBalance - amount;\r\n            }\r\n            amount /= 100;\r\n            _balances[holdAddress] += amount * holdFee;\r\n            emit Transfer(sender, holdAddress, amount * holdFee);\r\n            _balances[backAddress] += amount * backFee;\r\n            emit Transfer(sender, backAddress, amount * backFee);\r\n            _balances[marketAddress] += amount * marketFee;\r\n            emit Transfer(sender, marketAddress, amount * marketFee);\r\n            address prizeAddress = findUser();\r\n            _balances[prizeAddress] += amount * prizeFee;\r\n            emit Transfer(sender, prizeAddress, amount * prizeFee);\r\n            if(recipient == _pair){\r\n                _excluded.push(sender);\r\n                Intergenerational_rewards(sender, amount * bonusFee);\r\n            }else{\r\n                _excluded.push(recipient);\r\n                Intergenerational_rewards(tx.origin, amount * bonusFee);\r\n            }\r\n            _balances[recipient] += (amount * 85);\r\n            emit Transfer(sender, recipient, amount * 85);\r\n                \r\n        }else{\r\n            emit Transfer(sender, recipient, amount);\r\n            uint256 senderBalance = _balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            unchecked {\r\n                _balances[sender] = senderBalance - amount;\r\n            }\r\n            _balances[recipient] += amount;\r\n        }\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    mapping(address=>address)public pre_add;\r\n\r\n    function add_next_add(address recipient)private{\r\n        if(pre_add[recipient] == address(0)){\r\n            if(msg.sender ==_pair)return;\r\n            pre_add[recipient]=msg.sender;\r\n        }\r\n    }\r\n    function Intergenerational_rewards(address sender,uint amount)private{\r\n        address pre = pre_add[sender];\r\n        uint total = amount;\r\n        uint a;\r\n        if(pre!=address(0)){\r\n            a = amount/9*4;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/9*2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/9;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/18;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/18;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/18;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/18;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(total!=0){\r\n            _balances[holdAddress] += total;\r\n            emit Transfer(sender, holdAddress, total);\r\n        }\r\n    }\r\n\r\n    mapping(address=>bool) public owner_bool;\r\n    event ownerBool(address _target, bool _bool);\r\n\r\n    mapping(address=>bool) public blackList;\r\n    event eventBlackList(address _target, bool _bool);\r\n\r\n    mapping(address=>bool) public frozenList;\r\n    event eventFrozenList(address _target, bool _bool);\r\n\r\n    address public _pair;\r\n\r\n    uint256 _block;\r\n\r\n    address[] public _excluded;\r\n\r\n    //\u4ea4\u6613\u6ed1\u70b9\r\n    uint256 public _liquidityFee = 14;\r\n    //\u5206\u7ea2\u8d39\u7387\r\n    uint256 bonusFee = 9;\r\n    //\u9500\u6bc1\u8d39\u7387\r\n    uint256 holdFee = 1;\r\n    //\u56de\u6d41\u8d39\u7387\r\n    uint256 backFee = 2;\r\n    //\u8425\u9500\u8d39\u7387\r\n    uint256 marketFee = 1;\r\n    //\u5f69\u7968\u8d39\u7387\r\n    uint256 prizeFee = 1;\r\n\r\n    //ico\u4ef7\u683c\r\n    uint256 public icoPrice = 38675000;\r\n    //\u5df2\u7b79\u96c6\u91d1\u989d\u6570\u91cf\uff0c \u5355\u4f4d\u662fether\r\n    uint public amountRaised; \r\n\r\n    //ico\u76ee\u6807\u91d1\u989d\r\n    uint256 public icoTotal = 50000000000 * 10**18; \r\n    //ico\u91d1\u989d\r\n    uint256 public icoAmount = 0; \r\n\r\n    //\u9500\u6bc1\u5730\u5740\r\n    address holdAddress = 0x0000000000000000000000000000000000000001;\r\n    //\u56de\u6d41\u94b1\u5305\r\n    address backAddress = 0xb6F49C72a6d27b9bcFaB7397fD382cD07817bB60;\r\n    //\u8425\u9500\u94b1\u5305\r\n    address marketAddress = 0x6d198993518B1C9383DFe49130399D56E7c3AC6e;\r\n\r\n    //ico\u91d1\u989d\u63d0\u53d6\u8005\r\n    address payable public beneficiary;\r\n    constructor() {\r\n        _name = \"Bridge coin\";\r\n        _symbol = \"BRC\";\r\n        owner_bool[msg.sender] = true;\r\n        _block = block.number;\r\n        _excluded.push(msg.sender);\r\n        beneficiary = payable(msg.sender);\r\n        _mint(msg.sender, 150000000000 * 10**18);\r\n    }\r\n    function setPair(address _target) public onlyOwner{\r\n        _pair = _target;\r\n    }\r\n    //\u8bbe\u7f6e\u767d\u540d\u5355 \u4ea4\u6613\u65e0\u8d39\u7387\r\n    function setOwnerBool(address _target, bool _bool) public onlyOwner{\r\n        owner_bool[_target] = _bool;\r\n        emit ownerBool(_target, _bool);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9ed1\u540d\u5355 \u65e0\u6cd5\u5356\u51fa\r\n    function setBlackList(address _target, bool _bool) public onlyOwner{\r\n        blackList[_target] = _bool;\r\n        emit eventBlackList(_target, _bool);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u51bb\u7ed3\u5730\u5740 \u65e0\u6cd5\u4ea4\u6613\r\n    function setFrozenList(address _target, bool _bool) public onlyOwner{\r\n        frozenList[_target] = _bool;\r\n        emit eventFrozenList(_target, _bool);\r\n    }\r\n\r\n    //\u6279\u91cf\u8f6c\u8d26 \r\n    function transferArray(address[] calldata _to, uint256 _value) external onlyOwner {\r\n        uint256 senderBalance = _balances[msg.sender];\r\n        uint256 amount = _value * _to.length;\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[msg.sender] = senderBalance - amount;\r\n        }\r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            _balances[_to[i]] += _value;\r\n            emit Transfer(msg.sender, _to[i], _value);\r\n        }\r\n    }\r\n\r\n    function findUser() internal view returns (address){\r\n        uint256 i = rand(_excluded.length);\r\n        return _excluded[i];\r\n    }\r\n    function rand(uint256 _length) internal view returns(uint256) {\r\n        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));\r\n        return random%_length;\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n        uint256 amount = msg.value;\r\n        uint256 payAmount = amount * icoPrice;\r\n\r\n        require(icoTotal > icoAmount + payAmount);\r\n\r\n        _mint(msg.sender, payAmount);\r\n\r\n        //\u6350\u6b3e\u603b\u989d\u7d2f\u52a0\r\n        amountRaised += amount;\r\n\r\n        icoAmount += payAmount;\r\n    }\r\n\r\n    //\u63d0\u53d6ico\u6536\u76ca\r\n    function safeWithdrawal() public onlyOwner{\r\n        beneficiary.transfer(amountRaised);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"eventBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"eventFrozenList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"ownerBool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_excluded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner_bool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pre_add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setFrozenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOwnerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ContractName", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e3687b7112b52a78a3e03a11fcd75fd1cd01a9adbdda6510ba021416ed791e7"}]}