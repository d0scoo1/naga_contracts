{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface KeeperCompatibleInterface {\r\n  /**\r\n   * @notice method that is simulated by the keepers to see if any work actually\r\n   * needs to be performed. This method does does not actually need to be\r\n   * executable, and since it is only ever simulated it can consume lots of gas.\r\n   * @dev To ensure that it is never called, you may want to add the\r\n   * cannotExecute modifier from KeeperBase to your implementation of this\r\n   * method.\r\n   * @param checkData specified in the upkeep registration so it is always the\r\n   * same for a registered upkeep. This can easily be broken down into specific\r\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\r\n   * same contract and easily differentiated by the contract.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with, if\r\n   * upkeep is needed. If you would like to encode data to decode later, try\r\n   * `abi.encode`.\r\n   */\r\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n\r\n  /**\r\n   * @notice method that is actually executed by the keepers, via the registry.\r\n   * The data returned by the checkUpkeep simulation will be passed into\r\n   * this method to actually be executed.\r\n   * @dev The input to this method should not be trusted, and the caller of the\r\n   * method should not even be restricted to any single registry. Anyone should\r\n   * be able call it, and the input should be validated, there is no guarantee\r\n   * that the data passed in is the performData returned from checkUpkeep. This\r\n   * could happen due to malicious keepers, racing keepers, or simply a state\r\n   * change while the performUpkeep transaction is waiting for confirmation.\r\n   * Always validate the data passed in.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation. If it is encoded, it can easily be decoded into other types by\r\n   * calling `abi.decode`. This data should not be trusted, and should be\r\n   * validated against the contract's current state.\r\n   */\r\n  function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IVault {\r\n    function earn() external;\r\n    function token() external view returns (IERC20 _token);\r\n}\r\n\r\ncontract BaseVaultUpKeep is KeeperCompatibleInterface {\r\n    /// @notice Threshold for the vaults for earn to be called\r\n    mapping(IVault => uint256) public threshold;\r\n\r\n    uint256 public gasThreshold;\r\n    address public governance;\r\n    event VaultUpkeepPerformed(address indexed vault);\r\n    event GasThresholdSet(uint256 threshold);\r\n    event GovernanceChanged(address indexed newGovernor);\r\n\r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier checkGasThreshold() {\r\n        require(block.basefee <= gasThreshold, \"Gas price above threshold!\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Sets threshold for a vault\r\n    /// @param vault_ vault for which threshold is to be set\r\n    /// @param threshold_ threshold for the vault\r\n    function setThreshold(IVault vault_, uint256 threshold_)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        threshold[vault_] = threshold_;\r\n    }\r\n\r\n    /// @notice Set thresholds for vaults\r\n    /// @param vaults_ vaults for which threshold is to be set\r\n    /// @param thresholds_ thresholds for the related vaults\r\n    function setThresholds(IVault[] memory vaults_, uint256[] memory thresholds_)\r\n        external\r\n        onlyGovernance\r\n    {\r\n        require(vaults_.length == thresholds_.length, \"different length\");\r\n        for (uint256 i; i < vaults_.length;) {\r\n            threshold[vaults_[i]] = thresholds_[i];\r\n            ++i;\r\n        }\r\n        \r\n    }\r\n\r\n    /// @notice Set gas threshold\r\n    /// @param threshold_ gas price\r\n    function setGasThreshold(uint256 threshold_) external onlyGovernance {\r\n        gasThreshold = threshold_;\r\n        emit GasThresholdSet(threshold_);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {}\r\n\r\n    function performUpkeep(\r\n        bytes calldata /* performData */\r\n    ) external virtual override checkGasThreshold {}\r\n\r\n    function setGovernance(address newGovernor) external onlyGovernance {\r\n        require(newGovernor != address(0), \"!0\");\r\n        require(newGovernor != governance, \"Same governor!\");\r\n        governance = newGovernor;\r\n        emit GovernanceChanged(newGovernor);\r\n    }\r\n}\r\n\r\n/// @title A chainlink upkeep contract to call earn on ethereum vaults\r\n/// @author StakeDAO\r\ncontract EthereumVaultUpkeep is BaseVaultUpKeep {\r\n    /// @notice Function which returns whether upKeep needs to be done or not\r\n    /// @dev The checkdata will contain the address of the vault to be called\r\n    /// @return upkeepNeeded Returns whether the upkeep needs to be executed\r\n    function checkUpkeep(bytes calldata checkData)\r\n        external\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory performData)\r\n    {\r\n        // Decoding the received data to an address\r\n        IVault vault = IVault(abi.decode(checkData, (address)));\r\n\r\n        // Check if the balance of the vault is greater than the required threshold\r\n        if (\r\n            IERC20(vault.token()).balanceOf(address(vault)) > threshold[vault]\r\n        ) {\r\n            upkeepNeeded = true;\r\n            performData = checkData;\r\n        }\r\n    }\r\n\r\n    /// @notice Called by chainlink keeper to perform upkeep & updates the data\r\n    /// @dev The performData will contain the address of the vault\r\n    function performUpkeep(bytes calldata performData)\r\n        external\r\n        override\r\n        checkGasThreshold\r\n    {\r\n        IVault vault = IVault(abi.decode(performData, (address)));\r\n\r\n        // Check if the balance of the vault is greater than the required threshold\r\n        if (\r\n            IERC20(vault.token()).balanceOf(address(vault)) > threshold[vault]\r\n        ) {\r\n            vault.earn();\r\n            emit VaultUpkeepPerformed(address(vault));\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"GasThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpkeepPerformed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold_\",\"type\":\"uint256\"}],\"name\":\"setGasThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold_\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault[]\",\"name\":\"vaults_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"thresholds_\",\"type\":\"uint256[]\"}],\"name\":\"setThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EthereumVaultUpkeep", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a4e62bdac41670319178be358fc2ff00bbc4a3ae56cf350defdf0b3d27061de1"}]}