{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/XinvVester.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface Ixinv {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function syncDelegate(address user) external;\\n    function exchangeRateStored() external view returns (uint);\\n}\\n\\ninterface Iinv {\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address dst, uint rawAmount) external returns (bool);\\n    function delegate(address delegatee) external;\\n    function approve(address spender, uint rawAmount) external returns (bool);\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\\n}\\n\\ncontract XinvVesterFactory {\\n\\n    address public governance;\\n    Iinv public inv;\\n    Ixinv public xinv;\\n    XinvVester[] public vesters;\\n\\n    constructor (Ixinv _xinv, Iinv _inv, address _governance) public {\\n        governance = _governance;\\n        inv = _inv;\\n        xinv = _xinv;\\n    }\\n\\n    function deployVester(address _recipient, uint _invAmount, uint _vestingStartTimestamp, uint _vestingDurationSeconds, bool _isCancellable) public {\\n        require(msg.sender == governance, \\\"ONLY GOVERNANCE\\\");\\n        XinvVester vester = new XinvVester(xinv, inv, governance, _recipient, _vestingStartTimestamp, _vestingDurationSeconds, _isCancellable);\\n        inv.transferFrom(governance, address(vester), _invAmount);\\n        vester.initialize();\\n        vesters.push(vester);\\n    }\\n}\\n\\n// Should only be deployed via factory\\n// Assumes xINV withdrawal delay is permanently set to 0\\ncontract XinvVester {\\n    using SafeMath for uint;\\n\\n    address public governance;\\n    address public factory;\\n    address public recipient;\\n    Iinv public inv;\\n    Ixinv public xinv;\\n\\n    uint public vestingXinvAmount;\\n    uint public vestingBegin;\\n    uint public vestingEnd;\\n    bool public isCancellable;\\n    bool public isCancelled;\\n    uint public lastUpdate;\\n\\n    constructor(Ixinv _xinv, Iinv _inv, address _governance, address _recipient, uint _vestingStartTimestamp, uint _vestingDurationSeconds, bool _isCancellable) public {\\n        require(_vestingDurationSeconds > 0, \\\"DURATION IS 0\\\");\\n        inv = _inv;\\n        xinv = _xinv;\\n        vestingBegin = _vestingStartTimestamp;\\n        vestingEnd = vestingBegin + _vestingDurationSeconds;\\n        recipient = _recipient;\\n        isCancellable = _isCancellable;\\n        governance = _governance;\\n        factory = msg.sender;\\n\\n        lastUpdate = _vestingStartTimestamp;\\n\\n        inv.delegate(_recipient);\\n        xinv.syncDelegate(address(this));\\n    }\\n\\n    function initialize() public {\\n        uint _invAmount = inv.balanceOf(address(this));\\n        require(_invAmount > 0, \\\"INV AMOUNT IS 0\\\");\\n        require(msg.sender == factory, \\\"ONLY FACTORY\\\");\\n        inv.approve(address(xinv), _invAmount);\\n        require(xinv.mint(_invAmount) == 0, \\\"MINT FAILED\\\");\\n        vestingXinvAmount = xinv.balanceOf(address(this));\\n    }\\n\\n    function delegate(address delegate_) public {\\n        require(msg.sender == recipient, 'ONLY RECIPIENT');\\n        inv.delegate(delegate_);\\n        xinv.syncDelegate(address(this));\\n    }\\n\\n    function setRecipient(address recipient_) public {\\n        require(msg.sender == recipient, 'ONLY RECIPIENT');\\n        recipient = recipient_;\\n    }\\n\\n    function claimableXINV() public view returns (uint xinvAmount) {\\n        if (isCancelled) return 0;\\n        if (block.timestamp >= vestingEnd) {\\n            xinvAmount = xinv.balanceOf(address(this));\\n        } else {\\n            xinvAmount = vestingXinvAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\\n        }\\n    }\\n\\n    function claimableINV() public view returns (uint invAmount) {\\n        return claimableXINV().mul(xinv.exchangeRateStored()).div(1 ether);\\n    }\\n\\n    function claim() public {\\n        require(msg.sender == recipient, \\\"ONLY RECIPIENT\\\");\\n        _claim();\\n    }\\n\\n    function _claim() private {\\n        require(xinv.redeem(claimableXINV()) == 0, \\\"REDEEM FAILED\\\");\\n        inv.transfer(recipient, inv.balanceOf(address(this)));\\n        lastUpdate = block.timestamp;\\n    }\\n\\n    function cancel() public {\\n        require(msg.sender == governance || msg.sender == recipient, \\\"ONLY GOVERNANCE OR RECIPIENT\\\");\\n        require(isCancellable || msg.sender == recipient, \\\"NOT CANCELLABLE\\\");\\n        require(!isCancelled, \\\"ALREADY CANCELLED\\\");\\n        _claim();\\n        require(xinv.redeem(xinv.balanceOf(address(this))) == 0, \\\"REDEEM FAILED\\\");\\n        inv.transfer(governance, inv.balanceOf(address(this)));\\n        isCancelled = true;\\n    }\\n\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Ixinv\",\"name\":\"_xinv\",\"type\":\"address\"},{\"internalType\":\"contract Iinv\",\"name\":\"_inv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_invAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDurationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCancellable\",\"type\":\"bool\"}],\"name\":\"deployVester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inv\",\"outputs\":[{\"internalType\":\"contract Iinv\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vesters\",\"outputs\":[{\"internalType\":\"contract XinvVester\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xinv\",\"outputs\":[{\"internalType\":\"contract Ixinv\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XinvVesterFactory", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001637e4e9941d55703a7a5e7807d6ada3f7dcd61b00000000000000000000000041d5d79431a913c4ae7d69a668ecdfe5ff9dfb68000000000000000000000000926df14a23be491164dcf93f4c468a50ef659d5b", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}