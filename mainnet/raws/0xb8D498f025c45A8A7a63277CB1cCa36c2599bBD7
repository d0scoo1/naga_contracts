{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TokensApprover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@plasma-fi/contracts/interfaces/ITokensApprover.sol\\\";\\n\\ncontract TokensApprover is ITokensApprover, Ownable {\\n    // Contains data for issuing permissions for the token\\n    mapping(uint256 => ApproveConfig) private _configs;\\n    uint256 private _configsLength = 0;\\n    // Contains methods for issuing permissions for tokens\\n    mapping(address => uint256) private _tokens;\\n\\n    constructor(ApproveConfig[] memory configs) {\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            _addConfig(configs[i]);\\n        }\\n    }\\n\\n    function addConfig(ApproveConfig calldata config) external onlyOwner returns (uint256) {\\n        return _addConfig(config);\\n    }\\n\\n    function setConfig(uint256 id, ApproveConfig calldata config) external onlyOwner returns (uint256) {\\n        return _setConfig(id, config);\\n    }\\n\\n    function setToken(uint256 id, address token) external onlyOwner {\\n        _setToken(id, token);\\n    }\\n\\n    function getConfig(address token) view external returns (ApproveConfig memory) {\\n        return _getConfig(token);\\n    }\\n\\n    function getConfigById(uint256 id) view external returns (ApproveConfig memory) {\\n        require(id < _configsLength, \\\"Approve config not found\\\");\\n        return _configs[id];\\n    }\\n\\n    function configsLength() view external returns (uint256) {\\n        return _configsLength;\\n    }\\n\\n    function hasConfigured(address token) view external returns (bool) {\\n        return _tokens[token] > 0;\\n    }\\n\\n    function callPermit(address token, bytes calldata permitCallData) external returns (bool, bytes memory) {\\n        ApproveConfig storage config = _getConfig(token);\\n        bytes4 selector = _getSelector(permitCallData);\\n\\n        require(config.permitMethodSelector == selector, \\\"Wrong permit method\\\");\\n\\n        return token.call(permitCallData);\\n    }\\n\\n    function _addConfig(ApproveConfig memory config) internal returns (uint256) {\\n        _configs[_configsLength++] = config;\\n        return _configsLength;\\n    }\\n\\n    function _setConfig(uint256 id, ApproveConfig memory config) internal returns (uint256) {\\n        require(id <= _configsLength, \\\"Approve config not found\\\");\\n        _configs[id] = config;\\n        return _configsLength;\\n    }\\n\\n    function _setToken(uint256 id, address token) internal {\\n        require(token != address(0), \\\"Invalid token address\\\");\\n        require(id <= _configsLength, \\\"Approve config not found\\\");\\n\\n        _tokens[token] = id + 1;\\n    }\\n\\n    function _getConfig(address token) view internal returns (ApproveConfig storage) {\\n        require(_tokens[token] > 0, \\\"Approve config not found\\\");\\n        return _configs[_tokens[token] - 1];\\n    }\\n\\n    function _getSelector(bytes memory data) pure private returns (bytes4 selector) {\\n        require(data.length >= 4, \\\"Data to short\\\");\\n\\n        assembly {\\n            selector := mload(add(data, add(0, 32)))\\n            // Clean the trailing bytes.\\n            selector := and(selector, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@plasma-fi/contracts/interfaces/ITokensApprover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokensApprover {\\n    /**\\n     * @notice Data for issuing permissions for the token\\n     */\\n    struct ApproveConfig {\\n        string name;\\n        string version;\\n        string domainType;\\n        string primaryType;\\n        string noncesMethod;\\n        string permitMethod;\\n        bytes4 permitMethodSelector;\\n    }\\n\\n    function addConfig(ApproveConfig calldata config) external returns (uint256);\\n\\n    function setConfig(uint256 id, ApproveConfig calldata config) external returns (uint256);\\n\\n    function setToken(uint256 id, address token) external;\\n\\n    function getConfig(address token) view external returns (ApproveConfig memory);\\n\\n    function getConfigById(uint256 id) view external returns (ApproveConfig memory);\\n\\n    function configsLength() view external returns (uint256);\\n\\n    function hasConfigured(address token) view external returns (bool);\\n\\n    function callPermit(address token, bytes calldata permitCallData) external returns (bool, bytes memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"noncesMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permitMethod\",\"type\":\"string\"},{\"internalType\":\"bytes4\",\"name\":\"permitMethodSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct ITokensApprover.ApproveConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"noncesMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permitMethod\",\"type\":\"string\"},{\"internalType\":\"bytes4\",\"name\":\"permitMethodSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct ITokensApprover.ApproveConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitCallData\",\"type\":\"bytes\"}],\"name\":\"callPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"noncesMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permitMethod\",\"type\":\"string\"},{\"internalType\":\"bytes4\",\"name\":\"permitMethodSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct ITokensApprover.ApproveConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getConfigById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"noncesMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permitMethod\",\"type\":\"string\"},{\"internalType\":\"bytes4\",\"name\":\"permitMethodSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct ITokensApprover.ApproveConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasConfigured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primaryType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"noncesMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permitMethod\",\"type\":\"string\"},{\"internalType\":\"bytes4\",\"name\":\"permitMethodSelector\",\"type\":\"bytes4\"}],\"internalType\":\"struct ITokensApprover.ApproveConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokensApprover", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}