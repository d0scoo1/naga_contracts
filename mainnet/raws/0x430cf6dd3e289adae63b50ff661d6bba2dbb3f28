{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n library SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IStafiStorage {\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n    function deleteBytes32(bytes32 _key) external;\r\n\r\n}\r\n\r\n\r\nabstract contract StafiBase {\r\n\r\n    // Version of the contract\r\n    uint8 public version;\r\n\r\n    // The main storage contract where primary persistant storage is maintained\r\n    IStafiStorage stafiStorage = IStafiStorage(0);\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that doesn't match a network contract\r\n    */\r\n    modifier onlyLatestNetworkContract() {\r\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\r\n    */\r\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\r\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that isn't a trusted node\r\n    */\r\n    modifier onlyTrustedNode(address _nodeAddress) {\r\n        require(getBool(keccak256(abi.encodePacked(\"node.trusted\", _nodeAddress))), \"Invalid trusted node\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any sender that isn't a registered staking pool\r\n    */\r\n    modifier onlyRegisteredStakingPool(address _stakingPoolAddress) {\r\n        require(getBool(keccak256(abi.encodePacked(\"stakingpool.exists\", _stakingPoolAddress))), \"Invalid staking pool\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(roleHas(\"owner\", msg.sender), \"Account is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlyAdmin() {\r\n        require(roleHas(\"admin\", msg.sender), \"Account is not an admin\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Modifier to scope access to admins\r\n    */\r\n    modifier onlySuperUser() {\r\n        require(roleHas(\"owner\", msg.sender) || roleHas(\"admin\", msg.sender), \"Account is not a super user\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Reverts if the address doesn't have this role\r\n    */\r\n    modifier onlyRole(string memory _role) {\r\n        require(roleHas(_role, msg.sender), \"Account does not match the specified role\");\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev Set the main Storage address\r\n    constructor(address _stafiStorageAddress) public {\r\n        // Update the contract address\r\n        stafiStorage = IStafiStorage(_stafiStorageAddress);\r\n    }\r\n\r\n\r\n    /// @dev Get the address of a network contract by name\r\n    function getContractAddress(string memory _contractName) internal view returns (address) {\r\n        // Get the current contract address\r\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\r\n        // Check it\r\n        require(contractAddress != address(0x0), \"Contract not found\");\r\n        // Return\r\n        return contractAddress;\r\n    }\r\n\r\n\r\n    /// @dev Get the name of a network contract by address\r\n    function getContractName(address _contractAddress) internal view returns (string memory) {\r\n        // Get the contract name\r\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\r\n        // Check it\r\n        require(keccak256(abi.encodePacked(contractName)) != keccak256(abi.encodePacked(\"\")), \"Contract not found\");\r\n        // Return\r\n        return contractName;\r\n    }\r\n\r\n\r\n    /// @dev Storage get methods\r\n    function getAddress(bytes32 _key) internal view returns (address) { return stafiStorage.getAddress(_key); }\r\n    function getUint(bytes32 _key) internal view returns (uint256) { return stafiStorage.getUint(_key); }\r\n    function getString(bytes32 _key) internal view returns (string memory) { return stafiStorage.getString(_key); }\r\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return stafiStorage.getBytes(_key); }\r\n    function getBool(bytes32 _key) internal view returns (bool) { return stafiStorage.getBool(_key); }\r\n    function getInt(bytes32 _key) internal view returns (int256) { return stafiStorage.getInt(_key); }\r\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return stafiStorage.getBytes32(_key); }\r\n    function getAddressS(string memory _key) internal view returns (address) { return stafiStorage.getAddress(keccak256(abi.encodePacked(_key))); }\r\n    function getUintS(string memory _key) internal view returns (uint256) { return stafiStorage.getUint(keccak256(abi.encodePacked(_key))); }\r\n    function getStringS(string memory _key) internal view returns (string memory) { return stafiStorage.getString(keccak256(abi.encodePacked(_key))); }\r\n    function getBytesS(string memory _key) internal view returns (bytes memory) { return stafiStorage.getBytes(keccak256(abi.encodePacked(_key))); }\r\n    function getBoolS(string memory _key) internal view returns (bool) { return stafiStorage.getBool(keccak256(abi.encodePacked(_key))); }\r\n    function getIntS(string memory _key) internal view returns (int256) { return stafiStorage.getInt(keccak256(abi.encodePacked(_key))); }\r\n    function getBytes32S(string memory _key) internal view returns (bytes32) { return stafiStorage.getBytes32(keccak256(abi.encodePacked(_key))); }\r\n\r\n    /// @dev Storage set methods\r\n    function setAddress(bytes32 _key, address _value) internal { stafiStorage.setAddress(_key, _value); }\r\n    function setUint(bytes32 _key, uint256 _value) internal { stafiStorage.setUint(_key, _value); }\r\n    function setString(bytes32 _key, string memory _value) internal { stafiStorage.setString(_key, _value); }\r\n    function setBytes(bytes32 _key, bytes memory _value) internal { stafiStorage.setBytes(_key, _value); }\r\n    function setBool(bytes32 _key, bool _value) internal { stafiStorage.setBool(_key, _value); }\r\n    function setInt(bytes32 _key, int256 _value) internal { stafiStorage.setInt(_key, _value); }\r\n    function setBytes32(bytes32 _key, bytes32 _value) internal { stafiStorage.setBytes32(_key, _value); }\r\n    function setAddressS(string memory _key, address _value) internal { stafiStorage.setAddress(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setUintS(string memory _key, uint256 _value) internal { stafiStorage.setUint(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setStringS(string memory _key, string memory _value) internal { stafiStorage.setString(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBytesS(string memory _key, bytes memory _value) internal { stafiStorage.setBytes(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBoolS(string memory _key, bool _value) internal { stafiStorage.setBool(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setIntS(string memory _key, int256 _value) internal { stafiStorage.setInt(keccak256(abi.encodePacked(_key)), _value); }\r\n    function setBytes32S(string memory _key, bytes32 _value) internal { stafiStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value); }\r\n\r\n    /// @dev Storage delete methods\r\n    function deleteAddress(bytes32 _key) internal { stafiStorage.deleteAddress(_key); }\r\n    function deleteUint(bytes32 _key) internal { stafiStorage.deleteUint(_key); }\r\n    function deleteString(bytes32 _key) internal { stafiStorage.deleteString(_key); }\r\n    function deleteBytes(bytes32 _key) internal { stafiStorage.deleteBytes(_key); }\r\n    function deleteBool(bytes32 _key) internal { stafiStorage.deleteBool(_key); }\r\n    function deleteInt(bytes32 _key) internal { stafiStorage.deleteInt(_key); }\r\n    function deleteBytes32(bytes32 _key) internal { stafiStorage.deleteBytes32(_key); }\r\n    function deleteAddressS(string memory _key) internal { stafiStorage.deleteAddress(keccak256(abi.encodePacked(_key))); }\r\n    function deleteUintS(string memory _key) internal { stafiStorage.deleteUint(keccak256(abi.encodePacked(_key))); }\r\n    function deleteStringS(string memory _key) internal { stafiStorage.deleteString(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBytesS(string memory _key) internal { stafiStorage.deleteBytes(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBoolS(string memory _key) internal { stafiStorage.deleteBool(keccak256(abi.encodePacked(_key))); }\r\n    function deleteIntS(string memory _key) internal { stafiStorage.deleteInt(keccak256(abi.encodePacked(_key))); }\r\n    function deleteBytes32S(string memory _key) internal { stafiStorage.deleteBytes32(keccak256(abi.encodePacked(_key))); }\r\n\r\n\r\n    /**\r\n    * @dev Check if an address has this role\r\n    */\r\n    function roleHas(string memory _role, address _address) internal view returns (bool) {\r\n        return getBool(keccak256(abi.encodePacked(\"access.role\", _role, _address)));\r\n    }\r\n\r\n}\r\n\r\n// Represents the type of deposits\r\nenum DepositType {\r\n    None,    // Marks an invalid deposit type\r\n    FOUR,    // Require 4 ETH from the node operator to be matched with 28 ETH from user deposits\r\n    EIGHT,   // Require 8 ETH from the node operator to be matched with 24 ETH from user deposits\r\n    TWELVE,  // Require 12 ETH from the node operator to be matched with 20 ETH from user deposits\r\n    SIXTEEN,  // Require 16 ETH from the node operator to be matched with 16 ETH from user deposits\r\n    Empty    // Require 0 ETH from the node operator to be matched with 32 ETH from user deposits (trusted nodes only)\r\n}\r\n\r\n// Represents a stakingpool's status within the network\r\nenum StakingPoolStatus {\r\n    Initialized,    // The stakingpool has been initialized and is awaiting a deposit of user ETH\r\n    Prelaunch,      // The stakingpool has enough ETH to begin staking and is awaiting launch by the node\r\n    Staking,        // The stakingpool is currently staking\r\n    Withdrawn,   // The stakingpool has been withdrawn from by the node\r\n    Dissolved       // The stakingpool has been dissolved and its user deposited ETH has been returned to the deposit pool\r\n}\r\n\r\ninterface IStafiStakingPool {\r\n    function getStatus() external view returns (StakingPoolStatus);\r\n    function getStatusBlock() external view returns (uint256);\r\n    function getStatusTime() external view returns (uint256);\r\n    function getDepositType() external view returns (DepositType);\r\n    function getNodeAddress() external view returns (address);\r\n    function getNodeFee() external view returns (uint256);\r\n    function getNodeDepositBalance() external view returns (uint256);\r\n    function getNodeRefundBalance() external view returns (uint256);\r\n    function getNodeDepositAssigned() external view returns (bool);\r\n    function getNodeCommonlyRefunded() external view returns (bool);\r\n    function getNodeTrustedRefunded() external view returns (bool);\r\n    function getUserDepositBalance() external view returns (uint256);\r\n    function getUserDepositAssigned() external view returns (bool);\r\n    function getUserDepositAssignedTime() external view returns (uint256);\r\n    function getPlatformDepositBalance() external view returns (uint256);\r\n    function nodeDeposit() external payable;\r\n    function userDeposit() external payable;\r\n    function stake(bytes calldata _validatorPubkey, bytes calldata _validatorSignature, bytes32 _depositDataRoot) external;\r\n    function refund() external;\r\n    function dissolve() external;\r\n    function close() external;\r\n}\r\n\r\ninterface IStafiStakingPoolQueue {\r\n    function getTotalLength() external view returns (uint256);\r\n    function getLength(DepositType _depositType) external view returns (uint256);\r\n    function getTotalCapacity() external view returns (uint256);\r\n    function getEffectiveCapacity() external view returns (uint256);\r\n    function getNextCapacity() external view returns (uint256);\r\n    function enqueueStakingPool(DepositType _depositType, address _stakingPool) external;\r\n    function dequeueStakingPool() external returns (address);\r\n    function removeStakingPool() external;\r\n}\r\n\r\ninterface IRETHToken {\r\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\r\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\r\n    function getExchangeRate() external view returns (uint256);\r\n    function getTotalCollateral() external view returns (uint256);\r\n    function getCollateralRate() external view returns (uint256);\r\n    function depositRewards() external payable;\r\n    function depositExcess() external payable;\r\n    function userMint(uint256 _ethAmount, address _to) external;\r\n    function userBurn(uint256 _rethAmount) external;\r\n}\r\n\r\n\r\ninterface IStafiEther {\r\n    function balanceOf(address _contractAddress) external view returns (uint256);\r\n    function depositEther() external payable;\r\n    function withdrawEther(uint256 _amount) external;\r\n}\r\n\r\ninterface IStafiEtherWithdrawer {\r\n    function receiveEtherWithdrawal() external payable;\r\n}\r\n\r\ninterface IStafiUserDeposit {\r\n    function getBalance() external view returns (uint256);\r\n    function getExcessBalance() external view returns (uint256);\r\n    function deposit() external payable;\r\n    function recycleDissolvedDeposit() external payable;\r\n    function recycleWithdrawnDeposit() external payable;\r\n    function assignDeposits() external;\r\n    function withdrawExcessBalance(uint256 _amount) external;\r\n}\r\n\r\n\r\n// Accepts user deposits and mints rETH; handles assignment of deposited ETH to pools\r\ncontract StafiUserDeposit is StafiBase, IStafiUserDeposit, IStafiEtherWithdrawer {\r\n\r\n    // Libs\r\n    using SafeMath for uint256;\r\n\r\n    // Events\r\n    event DepositReceived(address indexed from, uint256 amount, uint256 time);\r\n    event DepositRecycled(address indexed from, uint256 amount, uint256 time);\r\n    event DepositAssigned(address indexed stakingPool, uint256 amount, uint256 time);\r\n    event ExcessWithdrawn(address indexed to, uint256 amount, uint256 time);\r\n\r\n    // Construct\r\n    constructor(address _stafiStorageAddress) StafiBase(_stafiStorageAddress) public {\r\n        version = 1;\r\n        // Initialize settings on deployment\r\n        if (!getBoolS(\"settings.user.deposit.init\")) {\r\n            // Apply settings\r\n            setDepositEnabled(true);\r\n            setAssignDepositsEnabled(true);\r\n            setMinimumDeposit(0.01 ether);\r\n            // setMaximumDepositPoolSize(100000 ether);\r\n            setMaximumDepositAssignments(2);\r\n            // Settings initialized\r\n            setBoolS(\"settings.user.deposit.init\", true);\r\n        }\r\n    }\r\n\r\n    // Current deposit pool balance\r\n    function getBalance() override public view returns (uint256) {\r\n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\r\n        return stafiEther.balanceOf(address(this));\r\n    }\r\n\r\n    // Excess deposit pool balance (in excess of stakingPool queue capacity)\r\n    function getExcessBalance() override public view returns (uint256) {\r\n        // Get stakingPool queue capacity\r\n        IStafiStakingPoolQueue stafiStakingPoolQueue = IStafiStakingPoolQueue(getContractAddress(\"stafiStakingPoolQueue\"));\r\n        uint256 stakingPoolCapacity = stafiStakingPoolQueue.getEffectiveCapacity();\r\n        // Calculate and return\r\n        uint256 balance = getBalance();\r\n        if (stakingPoolCapacity >= balance) { return 0; }\r\n        else { return balance.sub(stakingPoolCapacity); }\r\n    }\r\n\r\n    // Receive a ether withdrawal\r\n    // Only accepts calls from the StafiEther contract\r\n    function receiveEtherWithdrawal() override external payable onlyLatestContract(\"stafiUserDeposit\", address(this)) onlyLatestContract(\"stafiEther\", msg.sender) {}\r\n\r\n    // Accept a deposit from a user\r\n    function deposit() override external payable onlyLatestContract(\"stafiUserDeposit\", address(this)) {\r\n        // Check deposit settings\r\n        require(getDepositEnabled(), \"Deposits into Stafi are currently disabled\");\r\n        require(msg.value >= getMinimumDeposit(), \"The deposited amount is less than the minimum deposit size\");\r\n        // require(getBalance().add(msg.value) <= getMaximumDepositPoolSize(), \"The deposit pool size after depositing exceeds the maximum size\");\r\n        // Load contracts\r\n        IRETHToken rETHToken = IRETHToken(getContractAddress(\"rETHToken\"));\r\n        // Mint rETH to user account\r\n        rETHToken.userMint(msg.value, msg.sender);\r\n        // Emit deposit received event\r\n        emit DepositReceived(msg.sender, msg.value, now);\r\n        // Process deposit\r\n        processDeposit();\r\n    }\r\n\r\n    // Recycle a deposit from a dissolved stakingPool\r\n    // Only accepts calls from registered stakingPools\r\n    function recycleDissolvedDeposit() override external payable onlyLatestContract(\"stafiUserDeposit\", address(this)) onlyRegisteredStakingPool(msg.sender) {\r\n        // Emit deposit recycled event\r\n        emit DepositRecycled(msg.sender, msg.value, now);\r\n        // Process deposit\r\n        processDeposit();\r\n    }\r\n\r\n    // Recycle a deposit from a withdrawn stakingPool\r\n    function recycleWithdrawnDeposit() override external payable onlyLatestContract(\"stafiUserDeposit\", address(this)) onlyLatestContract(\"stafiNetworkWithdrawal\", msg.sender) {\r\n        // Emit deposit recycled event\r\n        emit DepositRecycled(msg.sender, msg.value, now);\r\n        // Process deposit\r\n        processDeposit();\r\n    }\r\n\r\n    // Process a deposit\r\n    function processDeposit() private {\r\n        // Load contracts\r\n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\r\n        // Transfer ETH to stafiEther\r\n        stafiEther.depositEther{value: msg.value}();\r\n        // Assign deposits if enabled\r\n        assignDeposits();\r\n    }\r\n\r\n    // Assign deposits to available stakingPools\r\n    function assignDeposits() override public onlyLatestContract(\"stafiUserDeposit\", address(this)) {\r\n        // Check deposit settings\r\n        require(getAssignDepositsEnabled(), \"Deposit assignments are currently disabled\");\r\n        // Load contracts\r\n        IStafiStakingPoolQueue stafiStakingPoolQueue = IStafiStakingPoolQueue(getContractAddress(\"stafiStakingPoolQueue\"));\r\n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\r\n        // Assign deposits\r\n        uint256 maximumDepositAssignments = getMaximumDepositAssignments();\r\n        for (uint256 i = 0; i < maximumDepositAssignments; ++i) {\r\n            // Get & check next available staking pool capacity\r\n            uint256 stakingPoolCapacity = stafiStakingPoolQueue.getNextCapacity();\r\n            if (stakingPoolCapacity == 0 || getBalance() < stakingPoolCapacity) { break; }\r\n            // Dequeue next available staking pool\r\n            address stakingPoolAddress = stafiStakingPoolQueue.dequeueStakingPool();\r\n            IStafiStakingPool stakingPool = IStafiStakingPool(stakingPoolAddress);\r\n            // Withdraw ETH from stafiEther\r\n            stafiEther.withdrawEther(stakingPoolCapacity);\r\n            // Assign deposit to staking pool\r\n            stakingPool.userDeposit{value: stakingPoolCapacity}();\r\n            // Emit deposit assigned event\r\n            emit DepositAssigned(stakingPoolAddress, stakingPoolCapacity, now);\r\n        }\r\n    }\r\n\r\n    // Withdraw excess deposit pool balance for rETH collateral\r\n    function withdrawExcessBalance(uint256 _amount) override external onlyLatestContract(\"stafiUserDeposit\", address(this)) onlyLatestContract(\"rETHToken\", msg.sender) {\r\n        // Load contracts\r\n        IRETHToken rETHToken = IRETHToken(getContractAddress(\"rETHToken\"));\r\n        IStafiEther stafiEther = IStafiEther(getContractAddress(\"stafiEther\"));\r\n        // Check amount\r\n        require(_amount <= getExcessBalance(), \"Insufficient excess balance for withdrawal\");\r\n        // Withdraw ETH from vault\r\n        stafiEther.withdrawEther(_amount);\r\n        // Transfer to rETH contract\r\n        rETHToken.depositExcess{value: _amount}();\r\n        // Emit excess withdrawn event\r\n        emit ExcessWithdrawn(msg.sender, _amount, now);\r\n    }\r\n\r\n    // Deposits currently enabled\r\n    function getDepositEnabled() public view returns (bool) {\r\n        return getBoolS(\"settings.deposit.enabled\");\r\n    }\r\n    function setDepositEnabled(bool _value) public onlySuperUser {\r\n        setBoolS(\"settings.deposit.enabled\", _value);\r\n    }\r\n\r\n    // Deposit assignments currently enabled\r\n    function getAssignDepositsEnabled() public view returns (bool) {\r\n        return getBoolS(\"settings.deposit.assign.enabled\");\r\n    }\r\n    function setAssignDepositsEnabled(bool _value) public onlySuperUser {\r\n        setBoolS(\"settings.deposit.assign.enabled\", _value);\r\n    }\r\n\r\n    // Minimum deposit size\r\n    function getMinimumDeposit() public view returns (uint256) {\r\n        return getUintS(\"settings.deposit.minimum\");\r\n    }\r\n    function setMinimumDeposit(uint256 _value) public onlySuperUser {\r\n        setUintS(\"settings.deposit.minimum\", _value);\r\n    }\r\n\r\n    // The maximum size of the deposit pool\r\n    // function getMaximumDepositPoolSize() public view returns (uint256) {\r\n    //     return getUintS(\"settings.deposit.pool.maximum\");\r\n    // }\r\n    // function setMaximumDepositPoolSize(uint256 _value) public onlySuperUser {\r\n    //     setUintS(\"settings.deposit.pool.maximum\", _value);\r\n    // }\r\n\r\n    // The maximum number of deposit assignments to perform at once\r\n    function getMaximumDepositAssignments() public view returns (uint256) {\r\n        return getUintS(\"settings.deposit.assign.maximum\");\r\n    }\r\n    function setMaximumDepositAssignments(uint256 _value) public onlySuperUser {\r\n        setUintS(\"settings.deposit.assign.maximum\", _value);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stafiStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositRecycled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExcessWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assignDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssignDepositsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumDepositAssignments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEtherWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recycleDissolvedDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recycleWithdrawnDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAssignDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDepositEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaximumDepositAssignments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawExcessBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StafiUserDeposit", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c2f7b6110a37b3b0fbdd811876be368df02e8b0", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1e6961b4be6c1ee32e1a18cd2a9c605efc4d6751eb50149dd74a8ee6184572f"}]}