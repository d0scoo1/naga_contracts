{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Season2.sol\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\ninterface IBoneheadz {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract TombRaid is Ownable {\r\n    IBoneheadz public Boneheadz; \r\n\r\n    bool public raidActive = false;\r\n\r\n    mapping(uint256 => uint256) public tokenTiers;\r\n    mapping(uint256 => bool) public isLocked;\r\n\r\n    uint256 public raidPrice = 0.01 ether;\r\n\r\n    uint256 public constant SEASON = 2;\r\n    uint256 public constant MAX_TIER = 3;\r\n\r\n    // raid 1: 90% chance of success\r\n    // raid 2: 50% chance of success\r\n    // raid 3: 30% chance of success\r\n    uint256[3] public CUTOFFS = [9, 5, 3];\r\n\r\n    event Locked(uint256 indexed tokenId);\r\n    event TierUpdated(uint256 indexed tokenId, uint256 tier);\r\n\r\n    constructor(address boneheadz) {\r\n        Boneheadz = IBoneheadz(boneheadz);\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    modifier onlyTokenOwner(uint256 tokenId) {\r\n        require(msg.sender == Boneheadz.ownerOf(tokenId), \"Caller is not the token owner\");\r\n        _;\r\n    }\r\n\r\n    // OWNER FUNCTIONS\r\n\r\n    function flipRaidStatus() external onlyOwner {\r\n        raidActive = !raidActive;\r\n    }\r\n\r\n    function setRaidPrice(uint256 price) external onlyOwner {\r\n        raidPrice = price;\r\n    }\r\n\r\n    function flipLockStatuses(uint256[] calldata tokenIds) public onlyOwner {\r\n        uint256 numIds = tokenIds.length;\r\n        for (uint256 i; i < numIds; i++) {\r\n            isLocked[tokenIds[i]] = !isLocked[tokenIds[i]];\r\n        }\r\n    }\r\n\r\n    function withdraw(address recipient) external onlyOwner {\r\n        (bool success, ) = recipient.call{value: address(this).balance}(\"\");\r\n        require(success, \"Withdraw failed\");\r\n    }\r\n\r\n    // RAID FUNCTIONS\r\n\r\n    function raid(uint256 tokenId) public payable onlyTokenOwner(tokenId) {\r\n        require(msg.sender == tx.origin, \"Caller not allowed\");\r\n        require(raidActive, \"Raiding not active\");\r\n        require(!isLocked[tokenId], \"Bonehead is locked\");\r\n        require(tokenTiers[tokenId] < MAX_TIER, \"Already max tier\");\r\n        require(msg.value == raidPrice, \"Not enough ETH sent\");\r\n\r\n        uint256 pseudoRandomNumber = _genPseudoRandomNumber(tokenId);\r\n        uint256 currentTier = tokenTiers[tokenId];\r\n        if (pseudoRandomNumber < CUTOFFS[currentTier]) {\r\n            tokenTiers[tokenId]++;\r\n            emit TierUpdated(tokenId, tokenTiers[tokenId]);\r\n        } else {\r\n            isLocked[tokenId] = true;\r\n            emit Locked(tokenId);\r\n        }\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n\r\n    function numPerTier() public view returns (uint256[] memory) {\r\n        uint256[] memory counts = new uint256[](MAX_TIER + 1);\r\n        for (uint256 tier; tier <= MAX_TIER; tier++) {\r\n            uint256 numAtTier = 0;\r\n            uint256 totalSupply = Boneheadz.totalSupply();\r\n            for (uint256 id; id < totalSupply; id++) {\r\n                if (tokenTiers[id] == tier) {\r\n                    numAtTier++;\r\n                }\r\n            }\r\n            counts[tier] = numAtTier;\r\n        }\r\n        return counts;\r\n    }\r\n\r\n    function numLockedPerTier() public view returns (uint256[] memory) {\r\n        uint256[] memory counts = new uint256[](MAX_TIER + 1);\r\n        for (uint256 tier; tier <= MAX_TIER; tier++) {\r\n            uint256 numLockedAtTier = 0;\r\n            uint256 totalSupply = Boneheadz.totalSupply();\r\n            for (uint256 id; id < totalSupply; id++) {\r\n                if (tokenTiers[id] == tier && isLocked[id]) {\r\n                    numLockedAtTier++;\r\n                }\r\n            }\r\n            counts[tier] = numLockedAtTier;\r\n        }\r\n        return counts;\r\n    }\r\n\r\n    function _genPseudoRandomNumber(uint256 tokenId) private view returns (uint256) {\r\n        uint256 pseudoRandomHash = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, tokenId)));\r\n        return pseudoRandomHash % 10;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"boneheadz\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"TierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Boneheadz\",\"outputs\":[{\"internalType\":\"contract IBoneheadz\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CUTOFFS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEASON\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"flipLockStatuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipRaidStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLockedPerTier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPerTier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"raid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setRaidPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TombRaid", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000010a45801ee731e016aaaa68ee570b9950be0e37", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e37908e9b2ec817e8bc2661ae53ec866124ebc4f7a0abfb646c8d90cdc681d19"}]}