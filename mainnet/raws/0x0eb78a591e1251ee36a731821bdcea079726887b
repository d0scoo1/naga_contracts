{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract TinyPredator is IERC20, Auth {\r\n\tstring _name = \"Tiny Predator\";\r\n\tstring _symbol = \"TINYP\";\r\n\tuint8 constant _decimals = 18;\r\n\tuint256 constant _totalSupply = 696_969_969_969_969 * 1e18;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\tmapping (address => bool) public noFees;\r\n\tmapping (address => bool) public noLimits;\r\n    mapping (address => bool) private _isLiqPool;\r\n\tmapping (address => address) private _liqPoolRouterCA;\r\n\tmapping (address => address) private _liqPoolPairedCA;\r\n    address constant _burnWallet = address(0);\r\n\tbool public tradingOpen;\r\n    uint256 private openBlock;\r\n\tuint256 public maxTxAmount; \r\n    uint256 public maxWalletAmount;\r\n\tuint256 private taxSwapMin; \r\n    uint256 private taxSwapMax; \r\n\tuint8 private constant _maxTaxRate = 3; \r\n    uint8 public taxRateSell = _maxTaxRate;\r\n    uint8 public taxRateTX = _maxTaxRate;\r\n\tuint16 private _autoLPShares = 300; // 3% TAX TO LP \r\n\tuint16 private _totalTaxShares = _autoLPShares;\r\n\r\n\tbool private _inTaxSwap = false;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tconstructor () Auth(msg.sender) {      \r\n\t\ttradingOpen = false;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\ttaxSwapMin = _totalSupply * 10 / 10000;\r\n\t\ttaxSwapMax = _totalSupply * 50 / 10000;\r\n\t\tnoFees[owner] = true;\r\n\t\tnoFees[address(this)] = true;\r\n\t\tnoLimits[owner] = true;\r\n\t\tnoLimits[address(this)] = true;\r\n\t\tnoLimits[_burnWallet] = true;\r\n\r\n\t\t_balances[address(owner)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(owner), _totalSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external view override returns (string memory) { return _symbol; }\r\n\tfunction name() external view override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\trequire(balanceOf(msg.sender) > 0);\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\t\trequire(_checkTradingOpen(sender), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max) { _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount; }\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\r\n\r\n\tfunction setLiquidityPair(address liqPoolAddress, address swapRouterCA, address wethPairedCA, bool enabled) external onlyOwner {\r\n\t\tif (tradingOpen) { require(block.number < openBlock, \"The token is live and the liquidity pair has already been set\"); } \r\n        require(liqPoolAddress!=address(this) && swapRouterCA!=address(this) && wethPairedCA!=address(this));\r\n        _isLiqPool[liqPoolAddress] = enabled;\r\n\t\t_liqPoolRouterCA[liqPoolAddress] = swapRouterCA;\r\n\t\t_liqPoolPairedCA[liqPoolAddress] = wethPairedCA;\r\n\t\tnoLimits[liqPoolAddress] = false;\r\n\t\tnoFees[liqPoolAddress] = false;\r\n\r\n\t}\r\n\r\n\tfunction _approveRouter(address routerAddress, uint256 _tokenAmount) internal {\r\n\t\tif ( _allowances[address(this)][routerAddress] < _tokenAmount ) {\r\n\t\t\t_allowances[address(this)][routerAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), routerAddress, type(uint256).max);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _addLiquidity(address routerAddress, uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n\t\taddress lpTokenRecipient = address(0);\r\n\t\tIUniswapV2Router02 dexRouter = IUniswapV2Router02(routerAddress);\r\n\t\tdexRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n\t}\r\n\r\n\tfunction LFG() external onlyOwner {\r\n\t\trequire(!tradingOpen, \"Trading is already open\");\r\n\t\topenBlock =  block.number;\r\n\t\tmaxTxAmount = 6_969_699_699_699 * 1e18;\r\n\t\tmaxWalletAmount = maxTxAmount * 2;\r\n\t\ttradingOpen = true;\r\n\t}\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\trequire(sender != address(0), \"No transfers from zero wallet\");\r\n\r\n\t\tif (!tradingOpen) { require(noFees[sender] && noLimits[sender], \"Trading not open\"); }\r\n\r\n\t\tif ( !_inTaxSwap && _isLiqPool[recipient] ) {\r\n\t\t\t_swapTaxAndLiquify(recipient);\r\n\t\t}\r\n\t\tif ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(recipient, amount), \"Transaction exceeds limits\"); }\r\n\t\tuint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t\tuint256 _transferAmount = amount - _taxAmount;\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tif ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n\t\t_balances[recipient] = _balances[recipient] + _transferAmount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n\t\tbool limitCheckPassed = true;\r\n\t\tif ( tradingOpen && !noLimits[recipient] ) {\r\n\t\t\tif ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n\t\t\telse if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > maxWalletAmount) ) { limitCheckPassed = false; }\r\n\t\t}\r\n\t\treturn limitCheckPassed;\r\n\t}\r\n\r\n\tfunction _checkTradingOpen(address sender) private view returns (bool){\r\n\t\tbool checkResult = false;\r\n\t\tif ( tradingOpen ) { checkResult = true; } \r\n\t\telse if ( tx.origin == owner ) { checkResult = true; } \r\n\t\telse if (noFees[sender] && noLimits[sender]) { checkResult = true; } \r\n\r\n\t\treturn checkResult;\r\n\t}\r\n\r\n\tfunction _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\t\tuint256 taxAmount;\r\n\t\tif ( !tradingOpen || noFees[sender] || noFees[recipient] ) { taxAmount = 0; }\r\n\t\telse if ( _isLiqPool[recipient] ) { taxAmount = amount * taxRateSell / 100; }\r\n\t\telse { taxAmount = amount * taxRateTX / 100; }\r\n\t\treturn taxAmount;\r\n\t}\r\n\r\n\tfunction setExemptFromTax(address wallet, bool toggle) external onlyOwner {\r\n\t\tnoFees[ wallet ] = toggle;\r\n\t}\r\n\r\n\tfunction setExemptFromLimits(address wallet, bool setting) external onlyOwner {\r\n\t\tnoLimits[ wallet ] = setting;\r\n\t}\r\n\r\n\tfunction removeLimits() external onlyOwner {\r\n\t\tuint256 newTxAmt = _totalSupply;\r\n        uint256 newWalletAmt = _totalSupply;\r\n\t\tmaxTxAmount = newTxAmt;\r\n\t\tmaxWalletAmount = newWalletAmt;\r\n\t}\r\n\r\n\tfunction setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n\t\ttaxSwapMin = _totalSupply * minValue / minDivider;\r\n\t\ttaxSwapMax = _totalSupply * maxValue / maxDivider;\r\n\t\trequire(taxSwapMax>=taxSwapMin, \"MinMax error\");\r\n\t\trequire(taxSwapMax>_totalSupply / 100000, \"Upper threshold too low\");\r\n\t\trequire(taxSwapMax<_totalSupply / 100, \"Upper threshold too high\");\r\n\t}\r\n\r\n\tfunction _swapTaxAndLiquify(address _liqPoolAddress) private lockTaxSwap {\r\n\t\tuint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n\t\tif ( _taxTokensAvailable >= taxSwapMin && tradingOpen ) {\r\n\t\t\tif ( _taxTokensAvailable >= taxSwapMax ) { _taxTokensAvailable = taxSwapMax; }\r\n\t\t\tuint256 _tokensForLP = _taxTokensAvailable * _autoLPShares / _totalTaxShares / 2;\r\n\t\t\tuint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n\t\t\tif( _tokensToSwap > 10**_decimals ) {\r\n\t\t\t\tuint256 _ethPreSwap = address(this).balance;\r\n\t\t\t\t_swapTaxTokensForEth(_liqPoolRouterCA[_liqPoolAddress], _liqPoolPairedCA[_liqPoolAddress], _tokensToSwap);\r\n\t\t\t\tuint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n\t\t\t\tif ( _autoLPShares > 0 ) {\r\n\t\t\t\t\tuint256 _ethWeiAmount = _ethSwapped * _autoLPShares / _totalTaxShares ;\r\n\t\t\t\t\t_approveRouter(_liqPoolRouterCA[_liqPoolAddress], _tokensForLP);\r\n\t\t\t\t\t_addLiquidity(_liqPoolRouterCA[_liqPoolAddress], _tokensForLP, _ethWeiAmount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(address routerAddress, address pairedCA, uint256 _tokenAmount) private {\r\n\t\t_approveRouter(routerAddress, _tokenAmount);\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = pairedCA;\r\n\t\tIUniswapV2Router02 dexRouter = IUniswapV2Router02(routerAddress);\r\n\t\tdexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n\t}\r\n\r\n\tfunction taxTokensSwap(address liqPoolAddress) external onlyOwner {\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n\t\trequire(taxTokenBalance > 0, \"No tokens\");\r\n\t\trequire(_isLiqPool[liqPoolAddress], \"Invalid liquidity pool\");\r\n\t\t_swapTaxTokensForEth(_liqPoolRouterCA[liqPoolAddress], _liqPoolPairedCA[liqPoolAddress], taxTokenBalance);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LFG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setExemptFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setExemptFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethPairedCA\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateTX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqPoolAddress\",\"type\":\"address\"}],\"name\":\"taxTokensSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TinyPredator", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dbcf810f99e2524751ebbeaf87ef14f86ecc48efa3fc0d533c52a638495516fd"}]}