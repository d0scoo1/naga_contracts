{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/IERC721BulkTransfer.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n/// @title ERC721 bulk transfer interface\r\n/// @author https://github.com/gnkz\r\ninterface IERC721BulkTransfer {\r\n    struct ToRecipient {\r\n        address recipient;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    struct FromCollection {\r\n        address collection;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    struct FromCollectionToRecipient {\r\n        address collection;\r\n        address recipient;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    /// @notice Transfer multiple tokens from a single ERC721 collection to a single recipient\r\n    /// @param collection The address of the ERC721 contract\r\n    /// @param recipient The recipient of the tokens\r\n    /// @param tokenIds The array of token ids to be transferred\r\n    function transfer(\r\n        address collection,\r\n        address recipient,\r\n        uint256[] calldata tokenIds\r\n    ) external;\r\n\r\n    /// @notice Transfer multiple tokens from a single ERC721 collection to multiple recipients\r\n    /// @param collection The address of the ERC721 contract\r\n    /// @param recipientsData An array of { address recipient, uint256 tokenId }\r\n    function transfer(address collection, ToRecipient[] calldata recipientsData)\r\n        external;\r\n\r\n    /// @notice Transfer multiple tokens from multiple ERC721 collections to a single recipient\r\n    /// @param collectionsData An array of { address collection, uint256 tokenId }\r\n    /// @param recipient The recipient of the tokens\r\n    function transfer(\r\n        FromCollection[] calldata collectionsData,\r\n        address recipient\r\n    ) external;\r\n\r\n    /// @notice Transfer multiple tokens from multiple ERC721 collections to multiple recipients\r\n    /// @param transferData An array of { address collection, address recipient, uint256 tokenId }\r\n    function transfer(FromCollectionToRecipient[] calldata transferData)\r\n        external;\r\n}\r\n\r\n\r\n// File contracts/ERC721BulkTransfer.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/// @title ERC721 tokens bulk transfer\r\n/// @author https://github.com/gnkz\r\n/// @notice This smart contract allows to transfer multiple ERC721 tokens at once\r\n/// @dev The contract needs approvals for the tokens that are going to be transferred\r\ncontract ERC721BulkTransfer is IERC721BulkTransfer {\r\n    /// @inheritdoc     IERC721BulkTransfer\r\n    function transfer(\r\n        address collection,\r\n        address recipient,\r\n        uint256[] calldata tokenIds\r\n    ) external {\r\n        require(tokenIds.length > 0, \"Invalid token ids amount\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            IERC721(collection).transferFrom(msg.sender, recipient, tokenId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc     IERC721BulkTransfer\r\n    function transfer(address collection, ToRecipient[] calldata recipientsData)\r\n        external\r\n    {\r\n        require(recipientsData.length > 0, \"Empty recipients data\");\r\n\r\n        for (uint256 i = 0; i < recipientsData.length; i++) {\r\n            uint256 tokenId = recipientsData[i].tokenId;\r\n            address recipient = recipientsData[i].recipient;\r\n\r\n            IERC721(collection).transferFrom(msg.sender, recipient, tokenId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc     IERC721BulkTransfer\r\n    function transfer(\r\n        FromCollection[] calldata collectionsData,\r\n        address recipient\r\n    ) external {\r\n        require(collectionsData.length > 0, \"Empty collections data\");\r\n\r\n        for (uint256 i = 0; i < collectionsData.length; i++) {\r\n            uint256 tokenId = collectionsData[i].tokenId;\r\n            address collection = collectionsData[i].collection;\r\n\r\n            IERC721(collection).transferFrom(msg.sender, recipient, tokenId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc     IERC721BulkTransfer\r\n    function transfer(FromCollectionToRecipient[] calldata transferData)\r\n        external\r\n    {\r\n        require(transferData.length > 0, \"Empty transfer data\");\r\n\r\n        for (uint256 i = 0; i < transferData.length; i++) {\r\n            uint256 tokenId = transferData[i].tokenId;\r\n            address collection = transferData[i].collection;\r\n            address recipient = transferData[i].recipient;\r\n\r\n            IERC721(collection).transferFrom(msg.sender, recipient, tokenId);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721BulkTransfer.FromCollectionToRecipient[]\",\"name\":\"transferData\",\"type\":\"tuple[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721BulkTransfer.ToRecipient[]\",\"name\":\"recipientsData\",\"type\":\"tuple[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721BulkTransfer.FromCollection[]\",\"name\":\"collectionsData\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721BulkTransfer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e92d1bd4db1b15515745aacfba251594a9c8ee9751cdd2b2e2c514cc0c7120b1"}]}