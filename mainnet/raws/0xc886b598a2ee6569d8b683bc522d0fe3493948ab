{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ninterface IDDFERC721Factory {\r\n    function getPair(address token) external view returns (address pair);\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function totalSupply() external view returns (uint256);\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IDDFERC721PoolPair is IERC721{\r\n    function mint(address owner, uint256 tokenId) external;\r\n    function burn(address owner, uint256 lpTokenId) external;\r\n    function updateTokenTime(address owner, uint256 lpTokenId) external;\r\n    function tokenInfo(uint256 lpTokenId) external view returns (uint32, uint32, uint32);\r\n}\r\n\r\ninterface IDDFERC721Router {\r\n    function deposit(address token, uint256 tokenId) external;\r\n    function withdraw(address token, uint256 lpTokenId) external;\r\n    function withdrawAll(address token) external;\r\n    function receiveInterest(address token,uint256 lpTokenId) external;\r\n    function receiveAllInterest(address token) external;\r\n    function findAllDeposit(address token)\r\n        external\r\n\t\tview\r\n        returns (uint256 amount);\r\n    function findInterest(address token, uint256 lpTokenId)\r\n        external\r\n\t\tview\r\n\t\treturns (uint256 amount);\r\n    function findLPTokens(address token, address account) \r\n        external\r\n        view\r\n\t\treturns (uint256[] memory _lpTokens, string[] memory _URIs, uint256[] memory _amounts, bool[] memory approvals);\r\n    function findTokens(address token, address account)\r\n        external \r\n        view \r\n        returns (uint256[] memory tokens, string[] memory tokenURIs, bool[] memory approvals);\r\n}\r\n\r\ncontract DDFERC721Router is IDDFERC721Router {\r\n    address public factory;\r\n    address public ddfAddress;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'DDF: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(address _factory, address _ddfAddress) {\r\n        factory = _factory;\r\n        ddfAddress = _ddfAddress;\r\n    }\r\n\r\n    function deposit(address token, uint256 tokenId) external lock override {\r\n        address pair = IDDFERC721Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n        require(IERC721(token).ownerOf(tokenId) == msg.sender, \"DDFRouter: transfer of token that is not owner\");\r\n\r\n        IERC721(token).transferFrom(msg.sender,address(this),tokenId);\r\n        IERC721(token).approve(pair,tokenId);\r\n        IDDFERC721PoolPair(pair).mint(msg.sender, tokenId);\r\n    }\r\n\r\n    function withdraw(address token, uint256 lpTokenId) external lock override {\r\n        address pair = IDDFERC721Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n        require(IDDFERC721PoolPair(pair).ownerOf(lpTokenId) == msg.sender, \"DDFRouter: withdraw  of lpTokenId that is not owner\"); \r\n\r\n        (uint32 blockStartTime, uint32 startTime, uint32 reward) = IDDFERC721PoolPair(pair).tokenInfo(lpTokenId);\r\n        uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n        uint256 ddfAmount = CalProfitMath.calStepProfitAmount(blockStartTime,startTime,endTime,reward);\r\n        if(ddfAmount > 0 ){\r\n            IERC20(ddfAddress).transferFrom(ddfAddress, msg.sender,ddfAmount);\r\n        }\r\n\r\n        IDDFERC721PoolPair(pair).burn(msg.sender, lpTokenId);\r\n    }\r\n\r\n    function withdrawAll(address token) external lock override {\r\n        address pair = IDDFERC721Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n        require(IDDFERC721PoolPair(pair).isApprovedForAll(msg.sender,address(this)), \"DDFRouter: approve caller is not owner nor approved for all\"); \r\n\r\n        uint len = IDDFERC721PoolPair(pair).balanceOf(msg.sender);\r\n        if(len > 0){\r\n            uint256 lpTokenId;\r\n            uint256 ddfAmount;\r\n            uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n            (uint32 blockStartTime, uint32 startTime, uint32 interestRate) = (0,0,0);\r\n            for(uint i=0;i<len;i++){\r\n                lpTokenId = IDDFERC721PoolPair(pair).tokenOfOwnerByIndex(msg.sender, 0); \r\n                (blockStartTime, startTime, interestRate) = IDDFERC721PoolPair(pair).tokenInfo(lpTokenId);\r\n                ddfAmount = CalProfitMath.calStepProfitAmount(blockStartTime,startTime,endTime,interestRate);\r\n                if(ddfAmount > 0 ){\r\n                    IERC20(ddfAddress).transferFrom(ddfAddress, msg.sender,ddfAmount);\r\n                }\r\n                IDDFERC721PoolPair(pair).burn(msg.sender, lpTokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function receiveInterest(address token,uint256 lpTokenId) external lock override {\r\n        address pair = IDDFERC721Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n        require(IDDFERC721PoolPair(pair).ownerOf(lpTokenId) == msg.sender, \"DDFRouter: retrieve  of token that is not owner\"); \r\n\r\n        (uint32 blockStartTime, uint32 startTime, uint32 interestRate) = IDDFERC721PoolPair(pair).tokenInfo(lpTokenId);\r\n        uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n        uint256 ddfAmount = CalProfitMath.calStepProfitAmount(blockStartTime,startTime,endTime,interestRate);\r\n        if(ddfAmount > 0 ){\r\n            IERC20(ddfAddress).transferFrom(ddfAddress, msg.sender,ddfAmount);\r\n        }\r\n        IDDFERC721PoolPair(pair).updateTokenTime(msg.sender, lpTokenId);\r\n    }\r\n\r\n    function receiveAllInterest(address token) external lock override {\r\n        address pair = IDDFERC721Factory(factory).getPair(token);\r\n        require(pair != address(0),\"DDFRouter: pair nonexistent\");\r\n        require(IDDFERC721PoolPair(pair).isApprovedForAll(msg.sender,address(this)), \"DDFRouter: approve caller is not owner nor approved for all\"); \r\n\r\n        uint len = IDDFERC721PoolPair(pair).balanceOf(msg.sender);\r\n        if(len > 0){\r\n            uint256 lpTokenId;\r\n            uint256 ddfAmount;\r\n            uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n            (uint32 blockStartTime, uint32 startTime, uint32 interestRate) = (0,0,0);\r\n            for(uint i=0;i<len;i++){\r\n                lpTokenId = IDDFERC721PoolPair(pair).tokenOfOwnerByIndex(msg.sender, i);\r\n                (blockStartTime, startTime, interestRate) = IDDFERC721PoolPair(pair).tokenInfo(lpTokenId);\r\n                ddfAmount = CalProfitMath.calStepProfitAmount(blockStartTime,startTime,endTime,interestRate);\r\n                if(ddfAmount > 0 ){\r\n                    IERC20(ddfAddress).transferFrom(ddfAddress, msg.sender,ddfAmount);\r\n                }\r\n                IDDFERC721PoolPair(pair).updateTokenTime(msg.sender, lpTokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function findAllDeposit(address token)\r\n        public\r\n\t\tview\r\n        override\r\n        returns (uint256 amount) {\r\n            address pair = IDDFERC721Factory(factory).getPair(token);\r\n            require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n            amount = IDDFERC721PoolPair(pair).totalSupply();\r\n    }\r\n\r\n    function findInterest(address token, uint256 lpTokenId)\r\n        public\r\n\t\tview\r\n        virtual\r\n        override\r\n\t\treturns (uint256 amount){\r\n            address pair = IDDFERC721Factory(factory).getPair(token);\r\n            require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n\r\n            (uint32 blockStartTime, uint32 startTime, uint32 interestRate) = IDDFERC721PoolPair(pair).tokenInfo(lpTokenId);\r\n\r\n            if(startTime > 0){\r\n                uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n                amount = CalProfitMath.calStepProfitAmount(blockStartTime,startTime,endTime,interestRate);\r\n            }\r\n    }\r\n\r\n    function findLPTokens(address token, address account) \r\n        public\r\n        view\r\n\t\tvirtual\r\n        override\r\n\t\treturns (uint256[] memory _lpTokens, string[] memory _URIs, uint256[] memory _amounts, bool[] memory approvals){\r\n            address pair = IDDFERC721Factory(factory).getPair(token);\r\n            require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n\r\n            uint256 len = IDDFERC721PoolPair(pair).balanceOf(account);\r\n            if(len > 0){\r\n                _lpTokens = new uint256[](len); \r\n                _URIs = new string[](len);\r\n                _amounts = new uint256[](len); \r\n                approvals = new bool[](len);\r\n\r\n                uint32 startTime;\r\n                uint32 blockStartTime;\r\n                uint32 interestRate;\r\n                uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n                uint256 _lpTokenId;\r\n                for(uint32 i=0;i<len;i++){\r\n                    _lpTokenId = IDDFERC721PoolPair(pair).tokenOfOwnerByIndex(account, i);\r\n                    (blockStartTime, startTime, interestRate) = IDDFERC721PoolPair(pair).tokenInfo(_lpTokenId); \r\n                    _lpTokens[i] = _lpTokenId;\r\n                    _URIs[i] = IDDFERC721PoolPair(pair).tokenURI(_lpTokenId);\r\n                    _amounts[i] = CalProfitMath.calStepProfitAmount(blockStartTime, startTime, endTime, interestRate);\r\n                    if(IDDFERC721PoolPair(pair).getApproved(_lpTokenId) == address(this)){\r\n                        approvals[i] = true;\r\n                    }else{\r\n                        approvals[i] = false;\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    function findTokens(address token, address account)\r\n        public \r\n        view \r\n        virtual \r\n        override\r\n        returns (uint256[] memory tokens, string[] memory tokenURIs, bool[] memory approvals) {\r\n            uint256 len = IERC721(token).balanceOf(account);\r\n\r\n            if(len >0){\r\n                tokens = new uint256[](len); \r\n                tokenURIs  = new string[](len);\r\n                approvals = new bool[](len);\r\n                for(uint i=0;i<len;i++){\r\n                    tokens[i] = IERC721(token).tokenOfOwnerByIndex(account, i);\r\n                    tokenURIs[i] = IERC721(token).tokenURI(tokens[i]);\r\n                    if(IERC721(token).getApproved(tokens[i]) == address(this)){\r\n                        approvals[i] = true;\r\n                    }else{\r\n                        approvals[i] = false;\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n}\r\n\r\nlibrary CalProfitMath {\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function calStepProfit(uint256 amount, uint8 p, uint8 d) internal pure returns (uint256 z) {\r\n        z = mul(amount,p);\r\n        z = div(z,d);\r\n    }\r\n    function calProfit(uint256 dayProfit, uint second) internal pure returns (uint256 z) {\r\n        z = mul(dayProfit,second);\r\n        z = div(z,SECONDS_PER_DAY);\r\n    }\r\n\r\n    function calStepProfitAmount(uint32 blockStartTime, uint32 startime, uint32 endtime,uint32 DAY_PROFIT) internal pure returns (uint256 totalAmount) {\r\n        totalAmount = 0;\r\n        uint32 stepTime = blockStartTime;\r\n        uint256 stepAmount = DAY_PROFIT;\r\n        uint8 step = 0;\r\n        while(true){\r\n            stepTime = uint32(DateUtil.addMonths(stepTime,1) % 2 ** 32);\r\n            if(stepTime > startime){\r\n                if(endtime < stepTime){\r\n                    totalAmount = add(totalAmount,calProfit(stepAmount,sub(endtime,startime)));\r\n                    break;\r\n                }else{\r\n                    totalAmount = add(totalAmount,calProfit(stepAmount,sub(stepTime,startime)));\r\n                    startime = stepTime;\r\n                } \r\n            }\r\n            if(step < 12){\r\n                stepAmount = calStepProfit(stepAmount,95,100);\r\n                step++;\r\n            }\r\n        }\r\n        return totalAmount;\r\n    }\r\n}\r\n\r\nlibrary DateUtil {\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n\r\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\r\n        require(year >= 1970);\r\n        int _year = int(year);\r\n        int _month = int(month);\r\n        int _day = int(day);\r\n \r\n        int __days = _day\r\n          - 32075\r\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\r\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\r\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\r\n          - OFFSET19700101;\r\n \r\n        _days = uint(__days);\r\n    }\r\n \r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n \r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n \r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n\r\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\r\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n\r\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n\r\n \r\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\r\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = (month - 1) % 12 + 1;\r\n        uint daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ddfAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ddfAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"findAllDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"}],\"name\":\"findInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"findLPTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lpTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_URIs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"approvals\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"findTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"approvals\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"receiveAllInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"}],\"name\":\"receiveInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DDFERC721Router", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000042b806932dbfb8cedd00b61efcef1d18b8db49b60000000000000000000000007227ef719eb6b0624c1c6202af169c5394a4557c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e6e86adf6b3bf2f520b33ac1b571d571d0fae54d9a437e3bb440ed36ff7cfe2"}]}