{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TheHumanoidsStakingReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\n                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n                    \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n                       \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\\n                       \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\\n                       \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n                       \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\\n\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\\n\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n\\nThe Humanoids Staking Reward Contract, earning $10 ION per day\\n\\n*/\\n\\npragma solidity =0.8.11;\\n\\nimport \\\"./OwnableTokenAccessControl.sol\\\";\\nimport \\\"./IStakingReward.sol\\\";\\nimport \\\"./IERC20Mint.sol\\\";\\n\\ncontract TheHumanoidsStakingReward is OwnableTokenAccessControl, IStakingReward {\\n    uint256 public constant REWARD_RATE_PER_DAY = 10 ether;\\n    uint256 public stakingRewardEndTimestamp = 1736152962;\\n\\n    mapping(address => uint256) private _stakeData; // packed bits balance:208 timestamp:34 stakedCount:14\\n\\n    address private constant STAKING_ADDRESS = address(0x3d6a1F739e471c61328Eb8a8D8d998E591C0FD42);\\n    address private constant TOKEN_ADDRESS = address(0x831dAA3B72576867cD66319259bf022AFB1D9211);\\n\\n\\n    /// @dev Emitted when `account` claims `amount` of reward.\\n    event Claim(address indexed account, uint256 amount);\\n\\n\\n    function setStakingRewardEndTimestamp(uint256 timestamp) external onlyOwner {\\n        require(stakingRewardEndTimestamp > block.timestamp, \\\"Staking has already ended\\\");\\n        require(timestamp > block.timestamp, \\\"Must be a time in the future\\\");\\n        stakingRewardEndTimestamp = timestamp;\\n    }\\n\\n\\n    modifier onlyStaking() {\\n        require(STAKING_ADDRESS == _msgSender(), \\\"Not allowed\\\");\\n        _;\\n    }\\n\\n\\n    function _reward(uint256 timestampFrom, uint256 timestampTo) internal pure returns (uint256) {\\n        unchecked {\\n            return ((timestampTo - timestampFrom) * REWARD_RATE_PER_DAY) / 1 days;\\n        }\\n    }\\n\\n    function reward(uint256 timestampFrom, uint256 timestampTo) external view returns (uint256) {\\n        if (timestampTo > stakingRewardEndTimestamp) {\\n            timestampTo = stakingRewardEndTimestamp;\\n        }\\n        if (timestampFrom < timestampTo) {\\n            return _reward(timestampFrom, timestampTo);\\n        }\\n        return 0;\\n    }\\n\\n    function timestampUntilRewardAmount(uint256 targetRewardAmount, uint256 stakedCount, uint256 timestampFrom) public view returns (uint256) {\\n        require(stakedCount > 0, \\\"stakedCount cannot be zero\\\");\\n        uint256 div = REWARD_RATE_PER_DAY * stakedCount;\\n        uint256 duration = ((targetRewardAmount * 1 days) + div - 1) / div; // ceil\\n        uint256 timestampTo = timestampFrom + duration;\\n        require(timestampTo <= stakingRewardEndTimestamp, \\\"Cannot get reward amount before staking ends\\\");\\n        return timestampTo;\\n    }\\n\\n\\n    function stakedTokensBalanceOf(address account) external view returns (uint256 stakedCount) {\\n        stakedCount = _stakeData[account] & 0x3fff;\\n    }\\n\\n    function lastClaimTimestampOf(address account) external view returns (uint256 lastClaimTimestamp) {\\n        lastClaimTimestamp = (_stakeData[account] >> 14) & 0x3ffffffff;\\n    }\\n\\n    function rawStakeDataOf(address account) external view returns (uint256 stakeData) {\\n        stakeData = _stakeData[account];\\n    }\\n\\n    function _calculateRewards(uint256 stakeData, uint256 unclaimedBalance) internal view returns (uint256, uint256, uint256) {\\n        uint256 timestamp = 0;\\n        uint256 stakedCount = stakeData & 0x3fff;\\n        if (stakedCount > 0) {\\n            timestamp = block.timestamp;\\n            if (timestamp > stakingRewardEndTimestamp) {\\n                timestamp = stakingRewardEndTimestamp;\\n            }\\n            uint256 lastClaimTimestamp = (stakeData >> 14) & 0x3ffffffff;\\n            if (lastClaimTimestamp < timestamp) {\\n                unchecked {\\n                    unclaimedBalance += _reward(lastClaimTimestamp, timestamp) * stakedCount;\\n                }\\n            }\\n        }\\n        return (unclaimedBalance, timestamp, stakedCount);\\n    }\\n\\n\\n    function willStakeTokens(address account, uint16[] calldata tokenIds) external override onlyStaking {\\n        uint256 stakeData = _stakeData[account];\\n        (uint256 unclaimedBalance, , uint256 stakedCount) = _calculateRewards(stakeData, stakeData >> 48);\\n        unchecked {\\n            _stakeData[account] = (unclaimedBalance << 48) | (block.timestamp << 14) | (stakedCount + tokenIds.length);\\n        }\\n    }\\n\\n    function willUnstakeTokens(address account, uint16[] calldata tokenIds) external override onlyStaking {\\n        uint256 stakeData = _stakeData[account];\\n        (uint256 unclaimedBalance, uint256 timestamp, uint256 stakedCount) = _calculateRewards(stakeData, stakeData >> 48);\\n\\n        uint256 unstakeCount = tokenIds.length;\\n        if (unstakeCount < stakedCount) {\\n            unchecked {\\n                stakedCount -= unstakeCount;\\n            }\\n        }\\n        else {\\n            stakedCount = 0;\\n            if (unclaimedBalance == 0) {\\n                timestamp = 0;\\n            }\\n        }\\n\\n        _stakeData[account] = (unclaimedBalance << 48) | (timestamp << 14) | stakedCount;\\n    }\\n\\n    function willBeReplacedByContract(address /*stakingRewardContract*/) external override onlyStaking {\\n        uint256 timestamp = block.timestamp;\\n        if (stakingRewardEndTimestamp > timestamp) {\\n            stakingRewardEndTimestamp = timestamp;\\n        }\\n    }\\n\\n    function didReplaceContract(address /*stakingRewardContract*/) external override onlyStaking {\\n\\n    }\\n\\n\\n    function stakeDataOf(address account) external view returns (uint256) {\\n        uint256 stakeData = _stakeData[account];\\n        if (stakeData != 0) {\\n            (uint256 unclaimedBalance, uint256 timestamp, uint256 stakedCount) = _calculateRewards(stakeData, stakeData >> 48);\\n            stakeData = (unclaimedBalance << 48) | (timestamp << 14) | (stakedCount);\\n        }\\n        return stakeData;\\n    }\\n\\n    function claimStakeDataFor(address account) external returns (uint256) {\\n        uint256 stakeData = _stakeData[account];\\n        if (stakeData != 0) {\\n            require(_hasAccess(Access.Claim, _msgSender()), \\\"Not allowed to claim\\\");\\n\\n            (uint256 unclaimedBalance, uint256 timestamp, uint256 stakedCount) = _calculateRewards(stakeData, stakeData >> 48);\\n            stakeData = (unclaimedBalance << 48) | (timestamp << 14) | (stakedCount);\\n\\n            delete _stakeData[account];\\n        }\\n        return stakeData;\\n    }\\n\\n\\n    function _claim(address account, uint256 amount) private {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 stakeData = _stakeData[account];\\n\\n        uint256 balance = stakeData >> 48;\\n        if (balance > amount) {\\n            unchecked {\\n                _stakeData[account] = ((balance - amount) << 48) | (stakeData & 0xffffffffffff);\\n            }\\n            emit Claim(account, amount);\\n            return;\\n        }\\n\\n        (uint256 unclaimedBalance, uint256 timestamp, uint256 stakedCount) = _calculateRewards(stakeData, balance);\\n\\n        require(unclaimedBalance >= amount, \\\"Not enough rewards to claim\\\");\\n        unchecked {\\n            _stakeData[account] = ((unclaimedBalance - amount) << 48) | (timestamp << 14) | stakedCount;\\n        }\\n\\n        emit Claim(account, amount);\\n    }\\n\\n    function _transfer(address account, address to, uint256 amount) internal {\\n        _claim(account, amount);\\n        IERC20Mint(TOKEN_ADDRESS).mint(to, amount);\\n    }\\n\\n\\n    function claimRewardsAmount(uint256 amount) external {\\n        address account = _msgSender();\\n        _transfer(account, account, amount);\\n    }\\n\\n    function claimRewards() external {\\n        address account = _msgSender();\\n        uint256 stakeData = _stakeData[account];\\n        (uint256 unclaimedBalance, uint256 timestamp, uint256 stakedCount) = _calculateRewards(stakeData, stakeData >> 48);\\n\\n        require(unclaimedBalance > 0, \\\"Nothing to claim\\\");\\n        _stakeData[account] = (timestamp << 14) | stakedCount;\\n\\n        emit Claim(account, unclaimedBalance);\\n        IERC20Mint(TOKEN_ADDRESS).mint(account, unclaimedBalance);\\n    }\\n\\n    // ERC20 compatible functions\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        uint256 stakeData = _stakeData[account];\\n        (uint256 unclaimedBalance, , ) = _calculateRewards(stakeData, stakeData >> 48);\\n        return unclaimedBalance;\\n    }\\n\\n    function transfer(address to, uint256 amount) external returns (bool) {\\n        _transfer(_msgSender(), to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address account, address to, uint256 amount) external returns (bool) {\\n        require(_hasAccess(Access.Transfer, _msgSender()), \\\"Not allowed to transfer\\\");\\n        _transfer(account, to, amount);\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _claim(_msgSender(), amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external {\\n        require(_hasAccess(Access.Burn, _msgSender()), \\\"Not allowed to burn\\\");\\n        _claim(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableTokenAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title OwnableTokenAccessControl\\n/// @notice Basic access control for utility tokens \\n/// @author ponky\\ncontract OwnableTokenAccessControl is Ownable {\\n    /// @dev Keeps track of how many accounts have been granted each type of access\\n    uint96 private _accessCounts;\\n\\n    mapping (address => uint256) private _accessFlags;\\n\\n    /// @dev Access types\\n    enum Access { Mint, Burn, Transfer, Claim }\\n\\n    /// @dev Emitted when `account` is granted `access`.\\n    event AccessGranted(bytes32 indexed access, address indexed account);\\n\\n    /// @dev Emitted when `account` is revoked `access`.\\n    event AccessRevoked(bytes32 indexed access, address indexed account);\\n\\n    /// @dev Helper constants for fitting each access index into _accessCounts\\n    uint constant private _AC_BASE          = 4;\\n    uint constant private _AC_MASK_BITSIZE  = 1 << _AC_BASE;\\n    uint constant private _AC_DISABLED      = (1 << (_AC_MASK_BITSIZE - 1));\\n    uint constant private _AC_MASK_COUNT    = _AC_DISABLED - 1;\\n\\n    /// @dev Convert the string `access` to an uint\\n    function _accessToIndex(bytes32 access) internal pure virtual returns (uint index) {\\n        if (access == 'MINT')       {return uint(Access.Mint);}\\n        if (access == 'BURN')       {return uint(Access.Burn);}\\n        if (access == 'TRANSFER')   {return uint(Access.Transfer);}\\n        if (access == 'CLAIM')      {return uint(Access.Claim);}\\n        revert(\\\"Access type does not exist\\\");\\n    }\\n\\n    function _hasAccess(Access access, address account) internal view returns (bool) {\\n        return (_accessFlags[account] & (1 << uint(access))) != 0;\\n    }\\n\\n    function hasAccess(bytes32 access, address account) public view returns (bool) {\\n        uint256 flag = 1 << _accessToIndex(access);        \\n        return (_accessFlags[account] & flag) != 0;\\n    }\\n\\n    function grantAccess(bytes32 access, address account) external onlyOwner {\\n        require(account.code.length > 0, \\\"Can only grant access to a contract\\\");\\n\\n        uint index = _accessToIndex(access);\\n        uint256 flags = _accessFlags[account];\\n        uint256 newFlags = flags | (1 << index);\\n        require(flags != newFlags, \\\"Account already has access\\\");\\n        _accessFlags[account] = newFlags;\\n\\n        uint shift = index << _AC_BASE;\\n        uint256 accessCount = _accessCounts >> shift;\\n        require((accessCount & _AC_DISABLED) == 0, \\\"Granting this access is permanently disabled\\\");\\n        require((accessCount & _AC_MASK_COUNT) < _AC_MASK_COUNT, \\\"Access limit reached\\\");\\n        unchecked {\\n            _accessCounts += uint96(1 << shift);\\n        }\\n        emit AccessGranted(access, account);\\n    }\\n\\n    function revokeAccess(bytes32 access, address account) external onlyOwner {\\n        uint index = _accessToIndex(access);\\n        uint256 flags = _accessFlags[account];\\n        uint256 newFlags = flags & ~(1 << index);\\n        require(flags != newFlags, \\\"Account does not have access\\\");\\n        _accessFlags[account] = newFlags;\\n\\n        uint shift = index << _AC_BASE;\\n        unchecked {\\n            _accessCounts -= uint96(1 << shift);\\n        }\\n\\n        emit AccessRevoked(access, account);\\n    }\\n\\n    /// @dev Returns the number of contracts that have `access`.\\n    function countOfAccess(bytes32 access) external view returns (uint256 accessCount) {\\n        uint index = _accessToIndex(access);\\n\\n        uint shift = index << _AC_BASE;\\n        accessCount = (_accessCounts >> shift) & _AC_MASK_COUNT;\\n    }\\n\\n    /// @dev `access` can still be revoked but not granted\\n    function permanentlyDisableGrantingAccess(bytes32 access) external onlyOwner {\\n        uint index = _accessToIndex(access);\\n        \\n        uint shift = index << _AC_BASE;\\n        uint256 flag = _AC_DISABLED << shift;\\n        uint256 accessCounts = _accessCounts;\\n        require((accessCounts & flag) == 0, \\\"Granting this access is already disabled\\\");\\n        _accessCounts = uint96(accessCounts | flag);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStakingReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingReward {\\n    function willStakeTokens(address account, uint16[] calldata tokenIds) external;\\n    function willUnstakeTokens(address account, uint16[] calldata tokenIds) external;\\n\\n    function willBeReplacedByContract(address stakingRewardContract) external;\\n    function didReplaceContract(address stakingRewardContract) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20Mint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mint is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_RATE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimStakeDataFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"}],\"name\":\"countOfAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accessCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"didReplaceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastClaimTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"}],\"name\":\"permanentlyDisableGrantingAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rawStakeDataOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeData\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"access\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestampFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampTo\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStakingRewardEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeDataOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedTokensBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampFrom\",\"type\":\"uint256\"}],\"name\":\"timestampUntilRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"willBeReplacedByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"willStakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"willUnstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheHumanoidsStakingReward", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}