{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Jungle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./erc/165/IERC165.sol\\\";\\nimport \\\"./erc/173/ERC173.sol\\\";\\nimport \\\"./erc/1155/ERC1155.sol\\\";\\n\\n/**\\n * @title Jungle by ESCAPEPLAN smart contract\\n */\\ncontract Jungle is ERC1155, ERC173, IERC165 {\\n\\n    address BigNightRecords = 0x590AfC242d692d6B4b9BD8d69783BFb099E8BCf5;\\n\\n    constructor() ERC1155(\\\"Jungle by ESCAPEPLAN\\\", \\\"JNGL\\\") ERC173(BigNightRecords) {\\n        _mint(BigNightRecords);\\n    }\\n\\n    /**\\n     * @dev ERC165 supports interface\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC173).interfaceId ||\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155Metadata).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/165/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 Interface\\n *\\n * @dev Interface of the ERC165 standard according to the EIP\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev ERC165 standard functions\\n     */\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/erc/173/ERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC173.sol\\\";\\n\\n/**\\n * @title ERC173 Contract\\n *\\n * @dev Implementation of the ERC173 standard\\n */\\ncontract ERC173 is IERC173 {\\n    /**\\n     * @dev ERC173 definitions\\n     */\\n\\n    address private _owner;\\n\\n    /**\\n     * @dev Prevents function called by non-owner from executing\\n     */\\n\\n    modifier ownership() {\\n        require(owner() == msg.sender, \\\"ERC173: caller is not the owner\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the deployer as the initial owner\\n     */\\n\\n    constructor(address owner_) {\\n        _transferOwnership(owner_);\\n    }\\n\\n    /**\\n     * @dev ERC173 functions\\n     */\\n\\n    function owner() public view virtual override returns (address) {\\n\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address _newOwner) public virtual override ownership {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev ERC173 internal function\\n     */\\n    \\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address previousOwner = _owner;\\n        _owner = _newOwner;\\n    \\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./extensions/IERC1155Metadata.sol\\\";\\nimport \\\"./receiver/IERC1155Receiver.sol\\\";\\n\\n/**\\n * @title ERC1155 Contract\\n *\\n * @dev Implementation of the ERC1155 standard\\n */\\ncontract ERC1155 is IERC1155, IERC1155Metadata {\\n    /**\\n     * @dev ERC1155 definitions\\n     */\\n    mapping(uint256 => mapping(address => uint256)) private _ownerBalance;\\n    mapping(address => mapping(address => bool)) private _operatorApproval;\\n    mapping(uint256 => string) private _tokenCid;\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n    uint256 private _currentId = 0;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    string private cream = \\\"bafybeib2nmrybv2kdntx643gy7npsillmv73jbubjc22vqr5l66slumk64/cream.json\\\";\\n    string private solidGold = \\\"bafybeihauguddtujyitk6z4hkrtufw3m3g3xewoq3ubh4udxy4nz4giiyu/solid-gold.json\\\";\\n    string private diamond = \\\"bafybeigweeemhmvj73fcxmxgx6xniuuban4c426m57vbjsndwylsi2yvwu/diamond.json\\\";\\n    string private trippy = \\\"bafybeiczjwxmqef43bxjhwamyb2icqa2gtau6f63w6wbhjnwqqndebkslq/trippy.json\\\";\\n    string private deathBot = \\\"bafybeieqmpzipdaih2otzqoq7tcvkecsnaqokghbujmi4ctrkjp3cdoey4/death-bot.json\\\";\\n    string private dmt = \\\"bafybeiejp5w6ue377vlj33gqttw4qcjxsduycxj3xwnxqztjxkgxc55r2m/dmt.json\\\";\\n    string private zombie = \\\"bafybeifyzdqglp23mg32cxb7ygzu7v7abv3g2aafmacs7cdt4uacmp4jke/zombie.json\\\";\\n    string private cheetah = \\\"bafybeifesyui6z7em5acpfy7jddnhkiuk24d6ocsraxfuwlbr5dchirwii/cheetah.json\\\";\\n\\n    /**\\n     * @dev Contract name and symbol\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Minting functions\\n     */\\n    function _mint(address _to) internal virtual {\\n        _mintTrippy(_to);\\n        _mintDeathBot(_to);\\n        _mintDmt(_to);\\n        _mintZombie(_to);\\n        _mintCheetah(_to);\\n        _mintDiamond(_to);\\n        _mintSolidGold(_to);\\n        _mintCream(_to);\\n    }\\n\\n    function _mintTrippy(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 1;\\n        _ownerBalance[_currentId][_to] += 1;\\n        _tokenCid[_currentId] = trippy;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintDeathBot(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 1;\\n        _ownerBalance[_currentId][_to] += 1;\\n        _tokenCid[_currentId] = deathBot;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintDmt(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 1;\\n        _ownerBalance[_currentId][_to] += 1;\\n        _tokenCid[_currentId] = dmt;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintZombie(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 1;\\n        _ownerBalance[_currentId][_to] += 1;\\n        _tokenCid[_currentId] = zombie;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintCheetah(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 1;\\n        _ownerBalance[_currentId][_to] += 1;\\n        _tokenCid[_currentId] = cheetah;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintDiamond(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 15;\\n        _ownerBalance[_currentId][_to] += 15;\\n        _tokenCid[_currentId] = diamond;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintSolidGold(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 35;\\n        _ownerBalance[_currentId][_to] += 35;\\n        _tokenCid[_currentId] = solidGold;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    function _mintCream(address _to) internal virtual {\\n        _currentId += 1;\\n        _totalSupply[_currentId] += 150;\\n        _ownerBalance[_currentId][_to] += 150;\\n        _tokenCid[_currentId] = cream;\\n\\n        emit TransferSingle(msg.sender, address(0), _to, _currentId, _ownerBalance[_currentId][_to]);\\n    }\\n\\n    /**\\n     * @dev ERC1155Metadata functions\\n     */\\n    function _currentTokenId() internal virtual returns (uint256) {\\n\\n        return _currentId;\\n    }\\n\\n    function _baseUri() internal view virtual returns (string memory) {\\n\\n        return \\\"ipfs://\\\";\\n    }\\n\\n    function uri(uint256 _id) public view virtual override returns (string memory) {\\n        string memory tokenCid = _tokenCid[_id];\\n\\n        return string(abi.encodePacked(_baseUri(), tokenCid));\\n    }\\n\\n    function tokenTotalSupply(uint256 _id) public view virtual returns (uint256) {\\n\\n        return _totalSupply[_id];\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n\\n        return 205;\\n    }\\n\\n    /**\\n     * @dev ERC1155 functions\\n     */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public virtual override {\\n        require(_from == msg.sender || isApprovedForAll(_from, msg.sender), \\\"ERC1155: unauthorized transfer\\\");\\n        require(_ownerBalance[_id][_from] >= _value, \\\"ERC1155: value exceeds balance\\\");\\n        require(_to != address(0), \\\"ERC1155: cannot transfer to the zero address\\\");\\n\\n        _ownerBalance[_id][_from] -= _value;\\n        _ownerBalance[_id][_to] += _value;\\n\\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\\n\\n        _safeTransferCheck(msg.sender, _from, _to, _id, _value, _data);\\n    }\\n\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public virtual override {\\n        require(_from == msg.sender || isApprovedForAll(_from, msg.sender), \\\"ERC1155: unauthorized transfer\\\");\\n        require(_ids.length == _values.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(_to != address(0), \\\"ERC1155: cannot transfer to the zero address\\\");\\n\\n        for (uint256 i = 0; i < _ids.length; ++i) {\\n            uint256 id = _ids[i];\\n            uint256 value = _values[i];\\n            require(_ownerBalance[id][_from] >= value, \\\"ERC1155: insufficient balance for transfer\\\");\\n\\n            _ownerBalance[id][_from] -= value;\\n            _ownerBalance[id][_to] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\\n\\n        _safeBatchTransferCheck(msg.sender, _from, _to, _ids, _values, _data);\\n    }\\n    \\n    function balanceOf(address _owner, uint256 _id) public view virtual override returns (uint256) {\\n        require(_owner != address(0), \\\"ERC1155: cannot get balance for the zero address\\\");\\n\\n        return _ownerBalance[_id][_owner];\\n    }\\n\\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view virtual override returns (uint256[] memory) {\\n        require(_owners.length == _ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](_owners.length);\\n\\n        for (uint256 i = 0; i < _owners.length; ++i) {\\n            batchBalances[i] = balanceOf(_owners[i], _ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved) public virtual override {\\n        require(msg.sender != _operator, \\\"ERC1155: cannot set approval for self\\\");\\n\\n        _operatorApproval[msg.sender][_operator] = _approved;\\n\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) public view virtual override returns (bool) {\\n\\n        return _operatorApproval[_owner][_operator];\\n    }\\n\\n    /**\\n     * @dev ERC1155Receiver functions\\n     */\\n    function _safeTransferCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) private {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            try IERC1155Receiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _safeBatchTransferCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) private {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            try IERC1155Receiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/173/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC173 Interface\\n *\\n * @dev Interface of the ERC173 standard according to the EIP\\n */\\ninterface IERC173 {\\n    /**\\n     * @dev ERC173 standard events\\n     */\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev ERC173 standard functions\\n     */\\n\\n    function owner() view external returns (address);\\n\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc/1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1155 standard as defined in the EIP\\n */\\ninterface IERC1155 {\\n    /**\\n     * @dev ERC1155 standard events\\n     */\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\n\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    event URI(string _value, uint256 indexed _id);\\n\\n    /**\\n     * @dev ERC1155 standard functions\\n     */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/erc/1155/extensions/IERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for ERC1155Metadata as defined in the EIP\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev ERC1155 token metadata functions\\n     */\\n    function uri(uint256 _id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/erc/1155/receiver/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for ERC1155TokenReceiver as defined in the EIP\\n */\\ninterface IERC1155Receiver {\\n    /**\\n     * @dev ERC1155Receiver standard functions\\n     */\\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\\n\\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Jungle", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}