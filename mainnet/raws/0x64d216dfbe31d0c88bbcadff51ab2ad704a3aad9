{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity ^0.8.4;\r\n\r\n/// @title a PCV Deposit interface for only balance getters\r\n/// @author Fei Protocol\r\ninterface IPCVDepositBalances {\r\n    // ----------- Getters -----------\r\n\r\n    /// @notice gets the effective balance of \"balanceReportedIn\" token if the deposit were fully withdrawn\r\n    function balance() external view returns (uint256);\r\n\r\n    /// @notice gets the token address in which this deposit returns its balance\r\n    function balanceReportedIn() external view returns (address);\r\n\r\n    /// @notice gets the resistant token balance and protocol owned fei of this deposit\r\n    function resistantBalanceAndFei() external view returns (uint256, uint256);\r\n}\r\n\r\n/// @title a PCV Deposit interface\r\n/// @author Fei Protocol\r\ninterface IPCVDeposit is IPCVDepositBalances {\r\n    // ----------- Events -----------\r\n    event Deposit(address indexed _from, uint256 _amount);\r\n\r\n    event Withdrawal(address indexed _caller, address indexed _to, uint256 _amount);\r\n\r\n    event WithdrawERC20(address indexed _caller, address indexed _token, address indexed _to, uint256 _amount);\r\n\r\n    event WithdrawETH(address indexed _caller, address indexed _to, uint256 _amount);\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function deposit() external;\r\n\r\n    // ----------- PCV Controller only state changing api -----------\r\n\r\n    function withdraw(address to, uint256 amount) external;\r\n\r\n    function withdrawERC20(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function withdrawETH(address payable to, uint256 amount) external;\r\n}\r\n\r\n/// @title a PCV dripping controller interface\r\n/// @author Fei Protocol\r\ninterface IPCVDripController {\r\n    // ----------- Events -----------\r\n\r\n    event SourceUpdate(address indexed oldSource, address indexed newSource);\r\n    event TargetUpdate(address indexed oldTarget, address indexed newTarget);\r\n    event DripAmountUpdate(uint256 oldDripAmount, uint256 newDripAmount);\r\n    event Dripped(address indexed source, address indexed target, uint256 amount);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setSource(IPCVDeposit newSource) external;\r\n\r\n    function setTarget(IPCVDeposit newTarget) external;\r\n\r\n    function setDripAmount(uint256 newDripAmount) external;\r\n\r\n    // ----------- Public state changing api -----------\r\n\r\n    function drip() external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function source() external view returns (IPCVDeposit);\r\n\r\n    function target() external view returns (IPCVDeposit);\r\n\r\n    function dripAmount() external view returns (uint256);\r\n\r\n    function dripEligible() external view returns (bool);\r\n}\r\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n/// @title Permissions Read interface\r\n/// @author Fei Protocol\r\ninterface IPermissionsRead {\r\n    // ----------- Getters -----------\r\n\r\n    function isBurner(address _address) external view returns (bool);\r\n\r\n    function isMinter(address _address) external view returns (bool);\r\n\r\n    function isGovernor(address _address) external view returns (bool);\r\n\r\n    function isGuardian(address _address) external view returns (bool);\r\n\r\n    function isPCVController(address _address) external view returns (bool);\r\n}\r\n\r\n/// @title Permissions interface\r\n/// @author Fei Protocol\r\ninterface IPermissions is IAccessControl, IPermissionsRead {\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function createRole(bytes32 role, bytes32 adminRole) external;\r\n\r\n    function grantMinter(address minter) external;\r\n\r\n    function grantBurner(address burner) external;\r\n\r\n    function grantPCVController(address pcvController) external;\r\n\r\n    function grantGovernor(address governor) external;\r\n\r\n    function grantGuardian(address guardian) external;\r\n\r\n    function revokeMinter(address minter) external;\r\n\r\n    function revokeBurner(address burner) external;\r\n\r\n    function revokePCVController(address pcvController) external;\r\n\r\n    function revokeGovernor(address governor) external;\r\n\r\n    function revokeGuardian(address guardian) external;\r\n\r\n    // ----------- Revoker only state changing api -----------\r\n\r\n    function revokeOverride(bytes32 role, address account) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function GUARDIAN_ROLE() external view returns (bytes32);\r\n\r\n    function GOVERN_ROLE() external view returns (bytes32);\r\n\r\n    function BURNER_ROLE() external view returns (bytes32);\r\n\r\n    function MINTER_ROLE() external view returns (bytes32);\r\n\r\n    function PCV_CONTROLLER_ROLE() external view returns (bytes32);\r\n}\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/// @title FEI stablecoin interface\r\n/// @author Fei Protocol\r\ninterface IFei is IERC20 {\r\n    // ----------- Events -----------\r\n\r\n    event Minting(address indexed _to, address indexed _minter, uint256 _amount);\r\n\r\n    event Burning(address indexed _to, address indexed _burner, uint256 _amount);\r\n\r\n    event IncentiveContractUpdate(address indexed _incentivized, address indexed _incentiveContract);\r\n\r\n    // ----------- State changing api -----------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    // ----------- Burner only state changing api -----------\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // ----------- Minter only state changing api -----------\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setIncentiveContract(address account, address incentive) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function incentiveContract(address account) external view returns (address);\r\n}\r\n\r\n/// @title Core Interface\r\n/// @author Fei Protocol\r\ninterface ICore is IPermissions {\r\n    // ----------- Events -----------\r\n\r\n    event FeiUpdate(address indexed _fei);\r\n    event TribeUpdate(address indexed _tribe);\r\n    event GenesisGroupUpdate(address indexed _genesisGroup);\r\n    event TribeAllocation(address indexed _to, uint256 _amount);\r\n    event GenesisPeriodComplete(uint256 _timestamp);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function init() external;\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setFei(address token) external;\r\n\r\n    function setTribe(address token) external;\r\n\r\n    function allocateTribe(address to, uint256 amount) external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n}\r\n\r\n/// @title CoreRef interface\r\n/// @author Fei Protocol\r\ninterface ICoreRef {\r\n    // ----------- Events -----------\r\n\r\n    event CoreUpdate(address indexed oldCore, address indexed newCore);\r\n\r\n    event ContractAdminRoleUpdate(bytes32 indexed oldContractAdminRole, bytes32 indexed newContractAdminRole);\r\n\r\n    // ----------- Governor only state changing api -----------\r\n\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external;\r\n\r\n    // ----------- Governor or Guardian only state changing api -----------\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    // ----------- Getters -----------\r\n\r\n    function core() external view returns (ICore);\r\n\r\n    function fei() external view returns (IFei);\r\n\r\n    function tribe() external view returns (IERC20);\r\n\r\n    function feiBalance() external view returns (uint256);\r\n\r\n    function tribeBalance() external view returns (uint256);\r\n\r\n    function CONTRACT_ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function isContractAdmin(address admin) external view returns (bool);\r\n}\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/// @title A Reference to Core\r\n/// @author Fei Protocol\r\n/// @notice defines some modifiers and utilities around interacting with Core\r\nabstract contract CoreRef is ICoreRef, Pausable {\r\n    ICore private immutable _core;\r\n    IFei private immutable _fei;\r\n    IERC20 private immutable _tribe;\r\n\r\n    /// @notice a role used with a subset of governor permissions for this contract only\r\n    bytes32 public override CONTRACT_ADMIN_ROLE;\r\n\r\n    constructor(address coreAddress) {\r\n        _core = ICore(coreAddress);\r\n\r\n        _fei = ICore(coreAddress).fei();\r\n        _tribe = ICore(coreAddress).tribe();\r\n\r\n        _setContractAdminRole(ICore(coreAddress).GOVERN_ROLE());\r\n    }\r\n\r\n    function _initialize(address) internal {} // no-op for backward compatibility\r\n\r\n    modifier ifMinterSelf() {\r\n        if (_core.isMinter(address(this))) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_core.isMinter(msg.sender), \"CoreRef: Caller is not a minter\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(_core.isBurner(msg.sender), \"CoreRef: Caller is not a burner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPCVController() {\r\n        require(_core.isPCVController(msg.sender), \"CoreRef: Caller is not a PCV controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernorOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not a governor or contract admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(_core.isGovernor(msg.sender), \"CoreRef: Caller is not a governor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardianOrGovernor() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\r\n            \"CoreRef: Caller is not a guardian or governor\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isGovernorOrGuardianOrAdmin() {\r\n        require(\r\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender) || isContractAdmin(msg.sender),\r\n            \"CoreRef: Caller is not governor or guardian or admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Named onlyTribeRole to prevent collision with OZ onlyRole modifier\r\n    modifier onlyTribeRole(bytes32 role) {\r\n        require(_core.hasRole(role, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    // Modifiers to allow any combination of roles\r\n    modifier hasAnyOfTwoRoles(bytes32 role1, bytes32 role2) {\r\n        require(_core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfThreeRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) || _core.hasRole(role2, msg.sender) || _core.hasRole(role3, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFourRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfFiveRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4,\r\n        bytes32 role5\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender) ||\r\n                _core.hasRole(role5, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier hasAnyOfSixRoles(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        bytes32 role4,\r\n        bytes32 role5,\r\n        bytes32 role6\r\n    ) {\r\n        require(\r\n            _core.hasRole(role1, msg.sender) ||\r\n                _core.hasRole(role2, msg.sender) ||\r\n                _core.hasRole(role3, msg.sender) ||\r\n                _core.hasRole(role4, msg.sender) ||\r\n                _core.hasRole(role5, msg.sender) ||\r\n                _core.hasRole(role6, msg.sender),\r\n            \"UNAUTHORIZED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyFei() {\r\n        require(msg.sender == address(_fei), \"CoreRef: Caller is not FEI\");\r\n        _;\r\n    }\r\n\r\n    /// @notice sets a new admin role for this contract\r\n    function setContractAdminRole(bytes32 newContractAdminRole) external override onlyGovernor {\r\n        _setContractAdminRole(newContractAdminRole);\r\n    }\r\n\r\n    /// @notice returns whether a given address has the admin role for this contract\r\n    function isContractAdmin(address _admin) public view override returns (bool) {\r\n        return _core.hasRole(CONTRACT_ADMIN_ROLE, _admin);\r\n    }\r\n\r\n    /// @notice set pausable methods to paused\r\n    function pause() public override onlyGuardianOrGovernor {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice set pausable methods to unpaused\r\n    function unpause() public override onlyGuardianOrGovernor {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice address of the Core contract referenced\r\n    /// @return ICore implementation address\r\n    function core() public view override returns (ICore) {\r\n        return _core;\r\n    }\r\n\r\n    /// @notice address of the Fei contract referenced by Core\r\n    /// @return IFei implementation address\r\n    function fei() public view override returns (IFei) {\r\n        return _fei;\r\n    }\r\n\r\n    /// @notice address of the Tribe contract referenced by Core\r\n    /// @return IERC20 implementation address\r\n    function tribe() public view override returns (IERC20) {\r\n        return _tribe;\r\n    }\r\n\r\n    /// @notice fei balance of contract\r\n    /// @return fei amount held\r\n    function feiBalance() public view override returns (uint256) {\r\n        return _fei.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice tribe balance of contract\r\n    /// @return tribe amount held\r\n    function tribeBalance() public view override returns (uint256) {\r\n        return _tribe.balanceOf(address(this));\r\n    }\r\n\r\n    function _burnFeiHeld() internal {\r\n        _fei.burn(feiBalance());\r\n    }\r\n\r\n    function _mintFei(address to, uint256 amount) internal virtual {\r\n        if (amount != 0) {\r\n            _fei.mint(to, amount);\r\n        }\r\n    }\r\n\r\n    function _setContractAdminRole(bytes32 newContractAdminRole) internal {\r\n        bytes32 oldContractAdminRole = CONTRACT_ADMIN_ROLE;\r\n        CONTRACT_ADMIN_ROLE = newContractAdminRole;\r\n        emit ContractAdminRoleUpdate(oldContractAdminRole, newContractAdminRole);\r\n    }\r\n}\r\n\r\n/// @title abstract contract for incentivizing keepers\r\n/// @author Fei Protocol\r\nabstract contract Incentivized is CoreRef {\r\n    /// @notice FEI incentive for calling keeper functions\r\n    uint256 public incentiveAmount;\r\n\r\n    event IncentiveUpdate(uint256 oldIncentiveAmount, uint256 newIncentiveAmount);\r\n\r\n    constructor(uint256 _incentiveAmount) {\r\n        incentiveAmount = _incentiveAmount;\r\n        emit IncentiveUpdate(0, _incentiveAmount);\r\n    }\r\n\r\n    /// @notice set the incentiveAmount\r\n    function setIncentiveAmount(uint256 newIncentiveAmount) public onlyGovernor {\r\n        uint256 oldIncentiveAmount = incentiveAmount;\r\n        incentiveAmount = newIncentiveAmount;\r\n        emit IncentiveUpdate(oldIncentiveAmount, newIncentiveAmount);\r\n    }\r\n\r\n    /// @notice incentivize a call with incentiveAmount FEI rewards\r\n    /// @dev no-op if the contract does not have Minter role\r\n    function _incentivize() internal ifMinterSelf {\r\n        _mintFei(msg.sender, incentiveAmount);\r\n    }\r\n}\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n/// @title abstract contract for putting a rate limit on how fast a contract can perform an action e.g. Minting\r\n/// @author Fei Protocol\r\nabstract contract RateLimited is CoreRef {\r\n    /// @notice maximum rate limit per second governance can set for this contract\r\n    uint256 public immutable MAX_RATE_LIMIT_PER_SECOND;\r\n\r\n    /// @notice the rate per second for this contract\r\n    uint256 public rateLimitPerSecond;\r\n\r\n    /// @notice the last time the buffer was used by the contract\r\n    uint256 public lastBufferUsedTime;\r\n\r\n    /// @notice the cap of the buffer that can be used at once\r\n    uint256 public bufferCap;\r\n\r\n    /// @notice a flag for whether to allow partial actions to complete if the buffer is less than amount\r\n    bool public doPartialAction;\r\n\r\n    /// @notice the buffer at the timestamp of lastBufferUsedTime\r\n    uint256 public bufferStored;\r\n\r\n    event BufferUsed(uint256 amountUsed, uint256 bufferRemaining);\r\n    event BufferCapUpdate(uint256 oldBufferCap, uint256 newBufferCap);\r\n    event RateLimitPerSecondUpdate(uint256 oldRateLimitPerSecond, uint256 newRateLimitPerSecond);\r\n\r\n    constructor(\r\n        uint256 _maxRateLimitPerSecond,\r\n        uint256 _rateLimitPerSecond,\r\n        uint256 _bufferCap,\r\n        bool _doPartialAction\r\n    ) {\r\n        lastBufferUsedTime = block.timestamp;\r\n\r\n        _setBufferCap(_bufferCap);\r\n        bufferStored = _bufferCap;\r\n\r\n        require(_rateLimitPerSecond <= _maxRateLimitPerSecond, \"RateLimited: rateLimitPerSecond too high\");\r\n        _setRateLimitPerSecond(_rateLimitPerSecond);\r\n\r\n        MAX_RATE_LIMIT_PER_SECOND = _maxRateLimitPerSecond;\r\n        doPartialAction = _doPartialAction;\r\n    }\r\n\r\n    /// @notice set the rate limit per second\r\n    function setRateLimitPerSecond(uint256 newRateLimitPerSecond) external virtual onlyGovernorOrAdmin {\r\n        require(newRateLimitPerSecond <= MAX_RATE_LIMIT_PER_SECOND, \"RateLimited: rateLimitPerSecond too high\");\r\n        _updateBufferStored();\r\n\r\n        _setRateLimitPerSecond(newRateLimitPerSecond);\r\n    }\r\n\r\n    /// @notice set the buffer cap\r\n    function setBufferCap(uint256 newBufferCap) external virtual onlyGovernorOrAdmin {\r\n        _setBufferCap(newBufferCap);\r\n    }\r\n\r\n    /// @notice the amount of action used before hitting limit\r\n    /// @dev replenishes at rateLimitPerSecond per second up to bufferCap\r\n    function buffer() public view returns (uint256) {\r\n        uint256 elapsed = block.timestamp - lastBufferUsedTime;\r\n        return Math.min(bufferStored + (rateLimitPerSecond * elapsed), bufferCap);\r\n    }\r\n\r\n    /** \r\n        @notice the method that enforces the rate limit. Decreases buffer by \"amount\". \r\n        If buffer is <= amount either\r\n        1. Does a partial mint by the amount remaining in the buffer or\r\n        2. Reverts\r\n        Depending on whether doPartialAction is true or false\r\n    */\r\n    function _depleteBuffer(uint256 amount) internal virtual returns (uint256) {\r\n        uint256 newBuffer = buffer();\r\n\r\n        uint256 usedAmount = amount;\r\n        if (doPartialAction && usedAmount > newBuffer) {\r\n            usedAmount = newBuffer;\r\n        }\r\n\r\n        require(newBuffer != 0, \"RateLimited: no rate limit buffer\");\r\n        require(usedAmount <= newBuffer, \"RateLimited: rate limit hit\");\r\n\r\n        bufferStored = newBuffer - usedAmount;\r\n\r\n        lastBufferUsedTime = block.timestamp;\r\n\r\n        emit BufferUsed(usedAmount, bufferStored);\r\n\r\n        return usedAmount;\r\n    }\r\n\r\n    /// @notice function to replenish buffer\r\n    /// @param amount to increase buffer by if under buffer cap\r\n    function _replenishBuffer(uint256 amount) internal {\r\n        uint256 newBuffer = buffer();\r\n\r\n        uint256 _bufferCap = bufferCap; /// gas opti, save an SLOAD\r\n\r\n        /// cannot replenish any further if already at buffer cap\r\n        if (newBuffer == _bufferCap) {\r\n            return;\r\n        }\r\n\r\n        lastBufferUsedTime = block.timestamp;\r\n\r\n        /// ensure that bufferStored cannot be gt buffer cap\r\n        bufferStored = Math.min(newBuffer + amount, _bufferCap);\r\n    }\r\n\r\n    function _setRateLimitPerSecond(uint256 newRateLimitPerSecond) internal {\r\n        uint256 oldRateLimitPerSecond = rateLimitPerSecond;\r\n        rateLimitPerSecond = newRateLimitPerSecond;\r\n\r\n        emit RateLimitPerSecondUpdate(oldRateLimitPerSecond, newRateLimitPerSecond);\r\n    }\r\n\r\n    function _setBufferCap(uint256 newBufferCap) internal {\r\n        _updateBufferStored();\r\n\r\n        uint256 oldBufferCap = bufferCap;\r\n        bufferCap = newBufferCap;\r\n\r\n        emit BufferCapUpdate(oldBufferCap, newBufferCap);\r\n    }\r\n\r\n    function _resetBuffer() internal {\r\n        bufferStored = bufferCap;\r\n    }\r\n\r\n    function _updateBufferStored() internal {\r\n        bufferStored = buffer();\r\n        lastBufferUsedTime = block.timestamp;\r\n    }\r\n}\r\n\r\n/// @title abstract contract for putting a rate limit on how fast a contract can mint FEI\r\n/// @author Fei Protocol\r\nabstract contract RateLimitedMinter is RateLimited {\r\n    uint256 private constant MAX_FEI_LIMIT_PER_SECOND = 10_000e18; // 10000 FEI/s or ~860m FEI/day\r\n\r\n    constructor(\r\n        uint256 _feiLimitPerSecond,\r\n        uint256 _mintingBufferCap,\r\n        bool _doPartialMint\r\n    ) RateLimited(MAX_FEI_LIMIT_PER_SECOND, _feiLimitPerSecond, _mintingBufferCap, _doPartialMint) {}\r\n\r\n    /// @notice override the FEI minting behavior to enforce a rate limit\r\n    function _mintFei(address to, uint256 amount) internal virtual override {\r\n        uint256 mintAmount = _depleteBuffer(amount);\r\n        super._mintFei(to, mintAmount);\r\n    }\r\n}\r\n/// @title an abstract contract for timed events\r\n/// @author Fei Protocol\r\nabstract contract Timed {\r\n    /// @notice the start timestamp of the timed period\r\n    uint256 public startTime;\r\n\r\n    /// @notice the duration of the timed period\r\n    uint256 public duration;\r\n\r\n    event DurationUpdate(uint256 oldDuration, uint256 newDuration);\r\n\r\n    event TimerReset(uint256 startTime);\r\n\r\n    constructor(uint256 _duration) {\r\n        _setDuration(_duration);\r\n    }\r\n\r\n    modifier duringTime() {\r\n        require(isTimeStarted(), \"Timed: time not started\");\r\n        require(!isTimeEnded(), \"Timed: time ended\");\r\n        _;\r\n    }\r\n\r\n    modifier afterTime() {\r\n        require(isTimeEnded(), \"Timed: time not ended\");\r\n        _;\r\n    }\r\n\r\n    /// @notice return true if time period has ended\r\n    function isTimeEnded() public view returns (bool) {\r\n        return remainingTime() == 0;\r\n    }\r\n\r\n    /// @notice number of seconds remaining until time is up\r\n    /// @return remaining\r\n    function remainingTime() public view returns (uint256) {\r\n        return duration - timeSinceStart(); // duration always >= timeSinceStart which is on [0,d]\r\n    }\r\n\r\n    /// @notice number of seconds since contract was initialized\r\n    /// @return timestamp\r\n    /// @dev will be less than or equal to duration\r\n    function timeSinceStart() public view returns (uint256) {\r\n        if (!isTimeStarted()) {\r\n            return 0; // uninitialized\r\n        }\r\n        uint256 _duration = duration;\r\n        uint256 timePassed = block.timestamp - startTime; // block timestamp always >= startTime\r\n        return timePassed > _duration ? _duration : timePassed;\r\n    }\r\n\r\n    function isTimeStarted() public view returns (bool) {\r\n        return startTime != 0;\r\n    }\r\n\r\n    function _initTimed() internal {\r\n        startTime = block.timestamp;\r\n\r\n        emit TimerReset(block.timestamp);\r\n    }\r\n\r\n    function _setDuration(uint256 newDuration) internal {\r\n        require(newDuration != 0, \"Timed: zero duration\");\r\n\r\n        uint256 oldDuration = duration;\r\n        duration = newDuration;\r\n        emit DurationUpdate(oldDuration, newDuration);\r\n    }\r\n}\r\n\r\n/// @title a PCV dripping controller\r\n/// @author Fei Protocol\r\ncontract PCVDripController is IPCVDripController, Timed, RateLimitedMinter, Incentivized {\r\n    /// @notice source PCV deposit to withdraw from\r\n    IPCVDeposit public override source;\r\n\r\n    /// @notice target address to drip to\r\n    IPCVDeposit public override target;\r\n\r\n    /// @notice amount to drip after each window\r\n    uint256 public override dripAmount;\r\n\r\n    /// @notice PCV Drip Controller constructor\r\n    /// @param _core Fei Core for reference\r\n    /// @param _source the PCV deposit to drip from\r\n    /// @param _target the PCV deposit to drip to\r\n    /// @param _frequency frequency of dripping\r\n    /// @param _dripAmount amount to drip on each drip\r\n    /// @param _incentiveAmount the FEI incentive for calling drip\r\n    constructor(\r\n        address _core,\r\n        IPCVDeposit _source,\r\n        IPCVDeposit _target,\r\n        uint256 _frequency,\r\n        uint256 _dripAmount,\r\n        uint256 _incentiveAmount\r\n    )\r\n        CoreRef(_core)\r\n        Timed(_frequency)\r\n        Incentivized(_incentiveAmount)\r\n        RateLimitedMinter(_incentiveAmount / _frequency, _incentiveAmount, false)\r\n    {\r\n        target = _target;\r\n        emit TargetUpdate(address(0), address(_target));\r\n\r\n        source = _source;\r\n        emit SourceUpdate(address(0), address(_source));\r\n\r\n        dripAmount = _dripAmount;\r\n        emit DripAmountUpdate(0, _dripAmount);\r\n\r\n        // start timer\r\n        _initTimed();\r\n    }\r\n\r\n    /// @notice drip PCV to target by withdrawing from source\r\n    function drip() external override afterTime whenNotPaused {\r\n        require(dripEligible(), \"PCVDripController: not eligible\");\r\n\r\n        // reset timer\r\n        _initTimed();\r\n\r\n        // incentivize caller\r\n        _incentivize();\r\n\r\n        // drip\r\n        source.withdraw(address(target), dripAmount);\r\n        target.deposit(); // trigger any deposit logic on the target\r\n        emit Dripped(address(source), address(target), dripAmount);\r\n    }\r\n\r\n    /// @notice set the new PCV Deposit source\r\n    function setSource(IPCVDeposit newSource) external override onlyGovernor {\r\n        require(address(newSource) != address(0), \"PCVDripController: zero address\");\r\n\r\n        address oldSource = address(source);\r\n        source = newSource;\r\n        emit SourceUpdate(oldSource, address(newSource));\r\n    }\r\n\r\n    /// @notice set the new PCV Deposit target\r\n    function setTarget(IPCVDeposit newTarget) external override onlyGovernor {\r\n        require(address(newTarget) != address(0), \"PCVDripController: zero address\");\r\n\r\n        address oldTarget = address(target);\r\n        target = newTarget;\r\n        emit TargetUpdate(oldTarget, address(newTarget));\r\n    }\r\n\r\n    /// @notice set the new drip amount\r\n    function setDripAmount(uint256 newDripAmount) external override onlyGovernorOrAdmin {\r\n        require(newDripAmount != 0, \"PCVDripController: zero drip amount\");\r\n\r\n        uint256 oldDripAmount = dripAmount;\r\n        dripAmount = newDripAmount;\r\n        emit DripAmountUpdate(oldDripAmount, newDripAmount);\r\n    }\r\n\r\n    /// @notice checks whether the target balance is less than the drip amount\r\n    function dripEligible() public view virtual override returns (bool) {\r\n        return target.balance() < dripAmount;\r\n    }\r\n\r\n    function _mintFei(address to, uint256 amountIn) internal override(CoreRef, RateLimitedMinter) {\r\n        RateLimitedMinter._mintFei(to, amountIn);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IPCVDeposit\",\"name\":\"_source\",\"type\":\"address\"},{\"internalType\":\"contract IPCVDeposit\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dripAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBufferCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"BufferCapUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferRemaining\",\"type\":\"uint256\"}],\"name\":\"BufferUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"oldContractAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"ContractAdminRoleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCore\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCore\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDripAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDripAmount\",\"type\":\"uint256\"}],\"name\":\"DripAmountUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIncentiveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIncentiveAmount\",\"type\":\"uint256\"}],\"name\":\"IncentiveUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateLimitPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"RateLimitPerSecondUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSource\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"SourceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTarget\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"TimerReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE_LIMIT_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doPartialAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fei\",\"outputs\":[{\"internalType\":\"contract IFei\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isContractAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBufferUsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimitPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBufferCap\",\"type\":\"uint256\"}],\"name\":\"setBufferCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newContractAdminRole\",\"type\":\"bytes32\"}],\"name\":\"setContractAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDripAmount\",\"type\":\"uint256\"}],\"name\":\"setDripAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIncentiveAmount\",\"type\":\"uint256\"}],\"name\":\"setIncentiveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRateLimitPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRateLimitPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPCVDeposit\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"setSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPCVDeposit\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"contract IPCVDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract IPCVDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribe\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tribeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PCVDripController", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b9000000000000000000000000d2174d78637a40448112aa6b30f9b19e6cf9d1f90000000000000000000000005dde9b4b14edf59cb23c1d4579b279846998205e000000000000000000000000000000000000000000000000000000000000070800000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0f796aaff87d1f42e8795383365aed79c896bf35927a37483ef89a8295d937d"}]}