{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenStaking/TokenDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport {IScarDustToken} from \\\"../interfaces/IScarDustToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TokenDistributor\\r\\n * @notice It handles the distribution of DUST token.\\r\\n * It auto-adjusts block rewards over a set number of periods.\\r\\n */\\r\\ncontract TokenDistributor is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for IScarDustToken;\\r\\n\\r\\n    struct StakingPeriod {\\r\\n        uint256 rewardPerBlockForStaking;\\r\\n        uint256 rewardPerBlockForOthers;\\r\\n        uint256 periodLengthInBlock;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // Amount of staked tokens provided by user\\r\\n        uint256 rewardDebt; // Reward debt\\r\\n    }\\r\\n\\r\\n    // Precision factor for calculating rewards\\r\\n    uint256 public constant PRECISION_FACTOR = 10**12;\\r\\n\\r\\n    IScarDustToken public immutable ScarDustToken;\\r\\n\\r\\n\\r\\n    // Number of reward periods\\r\\n    uint256 public immutable NUMBER_PERIODS;\\r\\n\\r\\n    // Block number when rewards start\\r\\n    uint256 public immutable START_BLOCK;\\r\\n\\r\\n    // Accumulated tokens per share\\r\\n    uint256 public accTokenPerShare;\\r\\n\\r\\n    // Current phase for rewards\\r\\n    uint256 public currentPhase;\\r\\n\\r\\n    // Block number when rewards end\\r\\n    uint256 public endBlock;\\r\\n\\r\\n    // Block number of the last update\\r\\n    uint256 public lastRewardBlock;\\r\\n\\r\\n    // Tokens distributed per block for other purposes (team + treasury + trading rewards)\\r\\n    uint256 public rewardPerBlockForOthers;\\r\\n\\r\\n    // Tokens distributed per block for staking\\r\\n    uint256 public rewardPerBlockForStaking;\\r\\n\\r\\n    // Total amount staked\\r\\n    uint256 public totalAmountStaked;\\r\\n\\r\\n    mapping(uint256 => StakingPeriod) public stakingPeriod;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event Compound(address indexed user, uint256 harvestedAmount);\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\\r\\n    event NewRewardsPerBlock(\\r\\n        uint256 indexed currentPhase,\\r\\n        uint256 startBlock,\\r\\n        uint256 rewardPerBlockForStaking,\\r\\n        uint256 rewardPerBlockForOthers\\r\\n    );\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor\\r\\n     * @param _ScarDustToken DUST token address\\r\\n     * @param _startBlock start block for reward program\\r\\n     * @param _rewardsPerBlockForStaking array of rewards per block for staking\\r\\n     * @param _rewardsPerBlockForOthers array of rewards per block for other purposes (team + treasury + trading rewards)\\r\\n     * @param _periodLengthesInBlocks array of period lengthes\\r\\n     * @param _numberPeriods number of periods with different rewards/lengthes (e.g., if 3 changes --> 4 periods)\\r\\n     */\\r\\n    constructor(\\r\\n        address _ScarDustToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256[] memory _rewardsPerBlockForStaking,\\r\\n        uint256[] memory _rewardsPerBlockForOthers,\\r\\n        uint256[] memory _periodLengthesInBlocks,\\r\\n        uint256 _numberPeriods\\r\\n    ) {\\r\\n        require(\\r\\n            (_periodLengthesInBlocks.length == _numberPeriods) &&\\r\\n                (_rewardsPerBlockForStaking.length == _numberPeriods) &&\\r\\n                (_rewardsPerBlockForStaking.length == _numberPeriods),\\r\\n            \\\"Distributor: Lengthes must match numberPeriods\\\"\\r\\n        );\\r\\n\\r\\n        // 1. Operational checks for supply\\r\\n        // uint256 nonCirculatingSupply = IScarDustToken(_ScarDustToken).SUPPLY_CAP() -\\r\\n        //     IScarDustToken(_ScarDustToken).totalSupply();\\r\\n\\r\\n        uint256 amountTokensToBeMinted;\\r\\n\\r\\n        for (uint256 i = 0; i < _numberPeriods; i++) {\\r\\n            amountTokensToBeMinted +=\\r\\n                (_rewardsPerBlockForStaking[i] * _periodLengthesInBlocks[i]) +\\r\\n                (_rewardsPerBlockForOthers[i] * _periodLengthesInBlocks[i]);\\r\\n\\r\\n            stakingPeriod[i] = StakingPeriod({\\r\\n                rewardPerBlockForStaking: _rewardsPerBlockForStaking[i],\\r\\n                rewardPerBlockForOthers: _rewardsPerBlockForOthers[i],\\r\\n                periodLengthInBlock: _periodLengthesInBlocks[i]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        // require(amountTokensToBeMinted == nonCirculatingSupply, \\\"Distributor: Wrong reward parameters\\\");\\r\\n\\r\\n        // 2. Store values\\r\\n        ScarDustToken = IScarDustToken(_ScarDustToken);\\r\\n        rewardPerBlockForStaking = _rewardsPerBlockForStaking[0];\\r\\n        rewardPerBlockForOthers = _rewardsPerBlockForOthers[0];\\r\\n\\r\\n        START_BLOCK = _startBlock;\\r\\n        endBlock = _startBlock + _periodLengthesInBlocks[0];\\r\\n\\r\\n        NUMBER_PERIODS = _numberPeriods;\\r\\n\\r\\n        // Set the lastRewardBlock as the startBlock\\r\\n        lastRewardBlock = _startBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staked tokens and compounds pending rewards\\r\\n     * @param amount amount to deposit (in DUST)\\r\\n     */\\r\\n    function deposit(uint256 amount) external nonReentrant {\\r\\n        require(amount > 0, \\\"Deposit: Amount must be > 0\\\");\\r\\n\\r\\n        \\r\\n\\r\\n        // Update pool information\\r\\n        _updatePool();\\r\\n        // ScarDustToken.approve(0x08D129735738746A471801F365C4837CE97f801c, amount+1);\\r\\n\\r\\n        // Transfer DUST tokens to this contract\\r\\n        ScarDustToken.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        uint256 pendingRewards;\\r\\n\\r\\n        // If not new deposit, calculate pending rewards (for auto-compounding)\\r\\n        if (userInfo[msg.sender].amount > 0) {\\r\\n            pendingRewards =\\r\\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\r\\n                userInfo[msg.sender].rewardDebt;\\r\\n        }\\r\\n\\r\\n        // Adjust user information\\r\\n        userInfo[msg.sender].amount += (amount + pendingRewards);\\r\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        // Increase totalAmountStaked\\r\\n        totalAmountStaked += (amount + pendingRewards);\\r\\n\\r\\n        emit Deposit(msg.sender, amount, pendingRewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Compound based on pending rewards\\r\\n     */\\r\\n    function harvestAndCompound() external nonReentrant {\\r\\n        // Update pool information\\r\\n        _updatePool();\\r\\n\\r\\n        // Calculate pending rewards\\r\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\r\\n            userInfo[msg.sender].rewardDebt;\\r\\n\\r\\n        // Return if no pending rewards\\r\\n        if (pendingRewards == 0) {\\r\\n            // It doesn't throw revertion (to help with the fee-sharing auto-compounding contract)\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Adjust user amount for pending rewards\\r\\n        userInfo[msg.sender].amount += pendingRewards;\\r\\n\\r\\n        // Adjust totalAmountStaked\\r\\n        totalAmountStaked += pendingRewards;\\r\\n\\r\\n        // Recalculate reward debt based on new user amount\\r\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        emit Compound(msg.sender, pendingRewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update pool rewards\\r\\n     */\\r\\n    function updatePool() external nonReentrant {\\r\\n        _updatePool();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staked tokens and compound pending rewards\\r\\n     * @param amount amount to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 amount) external nonReentrant {\\r\\n        require(\\r\\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\\r\\n            \\\"Withdraw: Amount must be > 0 or lower than user balance\\\"\\r\\n        );\\r\\n\\r\\n        // Update pool\\r\\n        _updatePool();\\r\\n\\r\\n        // Calculate pending rewards\\r\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\r\\n            userInfo[msg.sender].rewardDebt;\\r\\n\\r\\n        // Adjust user information\\r\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + pendingRewards - amount;\\r\\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        // Adjust total amount staked\\r\\n        totalAmountStaked = totalAmountStaked + pendingRewards - amount;\\r\\n\\r\\n        // Transfer DUST tokens to the sender\\r\\n        ScarDustToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, amount, pendingRewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw all staked tokens and collect tokens\\r\\n     */\\r\\n    function withdrawAll() external nonReentrant {\\r\\n        require(userInfo[msg.sender].amount > 0, \\\"Withdraw: Amount must be > 0\\\");\\r\\n\\r\\n        // Update pool\\r\\n        _updatePool();\\r\\n\\r\\n        // Calculate pending rewards and amount to transfer (to the sender)\\r\\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\\r\\n            userInfo[msg.sender].rewardDebt;\\r\\n\\r\\n        uint256 amountToTransfer = userInfo[msg.sender].amount + pendingRewards;\\r\\n\\r\\n        // Adjust total amount staked\\r\\n        totalAmountStaked = totalAmountStaked - userInfo[msg.sender].amount;\\r\\n\\r\\n        // Adjust user information\\r\\n        userInfo[msg.sender].amount = 0;\\r\\n        userInfo[msg.sender].rewardDebt = 0;\\r\\n\\r\\n        // Transfer DUST tokens to the sender\\r\\n        ScarDustToken.safeTransfer(msg.sender, amountToTransfer);\\r\\n\\r\\n        emit Withdraw(msg.sender, amountToTransfer, pendingRewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate pending rewards for a user\\r\\n     * @param user address of the user\\r\\n     * @return Pending rewards\\r\\n     */\\r\\n    function calculatePendingRewards(address user) external view returns (uint256) {\\r\\n        if ((block.number > lastRewardBlock) && (totalAmountStaked != 0)) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n\\r\\n            uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\r\\n\\r\\n            uint256 adjustedEndBlock = endBlock;\\r\\n            uint256 adjustedCurrentPhase = currentPhase;\\r\\n\\r\\n            // Check whether to adjust multipliers and reward per block\\r\\n            while ((block.number > adjustedEndBlock) && (adjustedCurrentPhase < (NUMBER_PERIODS - 1))) {\\r\\n                // Update current phase\\r\\n                adjustedCurrentPhase++;\\r\\n\\r\\n                // Update rewards per block\\r\\n                uint256 adjustedRewardPerBlockForStaking = stakingPeriod[adjustedCurrentPhase].rewardPerBlockForStaking;\\r\\n\\r\\n                // Calculate adjusted block number\\r\\n                uint256 previousEndBlock = adjustedEndBlock;\\r\\n\\r\\n                // Update end block\\r\\n                adjustedEndBlock = previousEndBlock + stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\r\\n\\r\\n                // Calculate new multiplier\\r\\n                uint256 newMultiplier = (block.number <= adjustedEndBlock)\\r\\n                    ? (block.number - previousEndBlock)\\r\\n                    : stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\\r\\n\\r\\n                // Adjust token rewards for staking\\r\\n                tokenRewardForStaking += (newMultiplier * adjustedRewardPerBlockForStaking);\\r\\n            }\\r\\n\\r\\n            uint256 adjustedTokenPerShare = accTokenPerShare +\\r\\n                (tokenRewardForStaking * PRECISION_FACTOR) /\\r\\n                totalAmountStaked;\\r\\n\\r\\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\r\\n        } else {\\r\\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the pool\\r\\n     */\\r\\n    function _updatePool() internal {\\r\\n        if (block.number <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (totalAmountStaked == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Calculate multiplier\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n\\r\\n        // Calculate rewards for staking and others\\r\\n        uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\\r\\n        uint256 tokenRewardForOthers = multiplier * rewardPerBlockForOthers;\\r\\n\\r\\n        // Check whether to adjust multipliers and reward per block\\r\\n        while ((block.number > endBlock) && (currentPhase < (NUMBER_PERIODS - 1))) {\\r\\n            // Update rewards per block\\r\\n            _updateRewardsPerBlock(endBlock);\\r\\n\\r\\n            uint256 previousEndBlock = endBlock;\\r\\n\\r\\n            // Adjust the end block\\r\\n            endBlock += stakingPeriod[currentPhase].periodLengthInBlock;\\r\\n\\r\\n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\\r\\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, block.number);\\r\\n\\r\\n            // Adjust token rewards\\r\\n            tokenRewardForStaking += (newMultiplier * rewardPerBlockForStaking);\\r\\n            tokenRewardForOthers += (newMultiplier * rewardPerBlockForOthers);\\r\\n        }\\r\\n\\r\\n        // Mint tokens only if token rewards for staking are not null\\r\\n        if (tokenRewardForStaking > 0) {\\r\\n            // It allows protection against potential issues to prevent funds from being locked\\r\\n            bool mintStatus = ScarDustToken.mint(address(this), tokenRewardForStaking);\\r\\n            if (mintStatus) {\\r\\n                accTokenPerShare = accTokenPerShare + ((tokenRewardForStaking * PRECISION_FACTOR) / totalAmountStaked);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        // Update last reward block only if it wasn't updated after or at the end block\\r\\n        if (lastRewardBlock <= endBlock) {\\r\\n            lastRewardBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update rewards per block\\r\\n     * @dev Rewards are halved by 2 (for staking + others)\\r\\n     */\\r\\n    function _updateRewardsPerBlock(uint256 _newStartBlock) internal {\\r\\n        // Update current phase\\r\\n        currentPhase++;\\r\\n\\r\\n        // Update rewards per block\\r\\n        rewardPerBlockForStaking = stakingPeriod[currentPhase].rewardPerBlockForStaking;\\r\\n        rewardPerBlockForOthers = stakingPeriod[currentPhase].rewardPerBlockForOthers;\\r\\n\\r\\n        emit NewRewardsPerBlock(currentPhase, _newStartBlock, rewardPerBlockForStaking, rewardPerBlockForOthers);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return reward multiplier over the given \\\"from\\\" to \\\"to\\\" block.\\r\\n     * @param from block to start calculating reward\\r\\n     * @param to block to finish calculating reward\\r\\n     * @return the multiplier for the period\\r\\n     */\\r\\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\\r\\n        if (to <= endBlock) {\\r\\n            return to - from;\\r\\n        } else if (from >= endBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return endBlock - from;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScarDustToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IScarDustToken is IERC20 {\\r\\n    function SUPPLY_CAP() external view returns (uint256);\\r\\n\\r\\n    function mint(address account, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ScarDustToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerBlockForStaking\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerBlockForOthers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_periodLengthesInBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_numberPeriods\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlockForStaking\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlockForOthers\",\"type\":\"uint256\"}],\"name\":\"NewRewardsPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_PERIODS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ScarDustToken\",\"outputs\":[{\"internalType\":\"contract IScarDustToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockForOthers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockForStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlockForStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlockForOthers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLengthInBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenDistributor", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "888888", "ConstructorArguments": "0000000000000000000000008b561b023580fbe6eee234c8d1079d5c7e8283930000000000000000000000000000000000000000000000000000000000df428500000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000179c6d572fae76b00000000000000000000000000000000000000000000000000b1e98b596074af3c00000000000000000000000000000000000000000000000045f72eb99de17cac00000000000000000000000000000000000000000000000025c715584c4a5780000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000179c6d572fae76b00000000000000000000000000000000000000000000000000b1e98b596074af3c00000000000000000000000000000000000000000000000045f72eb99de17cac00000000000000000000000000000000000000000000000025c715584c4a578000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000002f9b8000000000000000000000000000000000000000000000000000000000008ed28000000000000000000000000000000000000000000000000000000000017cdc0000000000000000000000000000000000000000000000000000000000023cd0a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}