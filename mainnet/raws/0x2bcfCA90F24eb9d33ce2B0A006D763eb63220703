{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ryokoAirdrop.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IERC20{\\n    function balanceOf(address _owner) external view returns (uint256);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n}\\n\\ninterface IERC721{\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IERC1155{\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, uint256 _value, bytes calldata data) external;\\n}\\n\\ncontract ryokoAirdrop {\\n    constructor(){}\\n\\n    function airdropERC20(IERC20 _token, address[] calldata _to, uint256[] calldata _value) public {\\n      require(_to.length == _value.length, \\\"Length of _to and _value must be equal\\\");\\n      for (uint256 i = 0; i < _to.length; i++) {\\n        _token.transferFrom(msg.sender, _to[i], _value[i]);\\n      }\\n    }\\n\\n    function airdropERC721(IERC721 _token, address[] calldata _to, uint256[] calldata _tokenId) public {\\n      require(_to.length == _tokenId.length, \\\"Length of _to and _tokenId must be equal\\\");\\n      for (uint256 i = 0; i < _to.length; i++) {\\n        _token.safeTransferFrom(msg.sender, _to[i], _tokenId[i]);\\n      }\\n    }\\n\\n    function airdropERC1155(IERC1155 _token, address[] calldata _to, uint256[] calldata _tokenId, uint256[] calldata _value) public {\\n      require(_to.length == _tokenId.length, \\\"Length of _to, _tokenId\\\");\\n      for (uint256 i = 0; i < _to.length; i++) {\\n        _token.safeTransferFrom(msg.sender, _to[i], _tokenId[i], _value[i], \\\"\\\");\\n      }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"airdropERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ryokoAirdrop", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}