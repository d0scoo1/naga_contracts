{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Bridge_for_verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/access/AccessControl.sol\\\";\\r\\n\\r\\n// import \\\"../utils/EnumerableSet.sol\\\";\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n//import \\\"../utils/Address.sol\\\";\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n//import \\\"../utils/Context.sol\\\";\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Address for address;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // //Litentry: Enable the ability of transfer role\\r\\n    // function transferRole(bytes32 role, address originAccount, address newAccount) public virtual {\\r\\n    //     require(originAccount == _msgSender(), \\\"AccessControl: can only transfer roles for self\\\");\\r\\n    //     if (_roles[role].members.remove(originAccount)) {\\r\\n    //         emit RoleRevoked(role, originAccount, _msgSender());\\r\\n    //         if (_roles[role].members.add(newAccount)) {\\r\\n    //             emit RoleGranted(role, newAccount, _msgSender());\\r\\n    //         }\\r\\n    //     }\\r\\n    // }\\r\\n}\\r\\n\\r\\n//import \\\"./utils/Pausable.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This is a stripped down version of Open zeppelin\\u0027s Pausable contract.\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\\r\\n *\\r\\n */\\r\\ncontract Pausable {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _whenNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _whenNotPaused() private view {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _whenPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _whenPaused() private view {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n}\\r\\n\\r\\n//import \\\"./utils/SafeMath.sol\\\";\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * note that this is a stripped down version of open zeppelin\\u0027s safemath\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\r\\n */\\r\\n\\r\\ncontract SafeMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return _sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n//import \\\"./interfaces/IDepositExecute.sol\\\";\\r\\n/**\\r\\n    @title Interface for handler contracts that support deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IDepositExecute {\\r\\n    /**\\r\\n        @notice It is intended that deposit are made using the Bridge contract.\\r\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\r\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\r\\n        @param depositer Address of account making the deposit in the Bridge contract.\\r\\n        @param data Consists of additional data needed for a specific deposit.\\r\\n     */\\r\\n    function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n        @notice It is intended that proposals are executed by the Bridge contract.\\r\\n        @param data Consists of additional data needed for a specific deposit execution.\\r\\n     */\\r\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\\r\\n}\\r\\n\\r\\n// import \\\"./interfaces/IBridge.sol\\\";\\r\\n/**\\r\\n    @title Interface for Bridge contract.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IBridge {\\r\\n    /**\\r\\n        @notice Exposing getter for {_chainID} instead of forcing the use of call.\\r\\n        @return uint8 The {_chainID} that is currently set for the Bridge contract.\\r\\n     */\\r\\n    function _chainID() external returns (uint8);\\r\\n}\\r\\n\\r\\n// import \\\"./interfaces/IERCHandler.sol\\\";\\r\\n/**\\r\\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IERCHandler {\\r\\n    /**\\r\\n        @notice Correlates {resourceID} with {contractAddress}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function setResource(bytes32 resourceID, address contractAddress) external;\\r\\n    /**\\r\\n        @notice Marks {contractAddress} as mintable/burnable.\\r\\n        @param contractAddress Address of contract to be used when making or executing deposits.\\r\\n     */\\r\\n    function setBurnable(address contractAddress) external;\\r\\n    /**\\r\\n        @notice Used to manually release funds from ERC safes.\\r\\n        @param tokenAddress Address of token contract to release.\\r\\n        @param recipient Address to release tokens to.\\r\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\\r\\n     */\\r\\n    function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;\\r\\n}\\r\\n\\r\\n// import \\\"./interfaces/IGenericHandler.sol\\\";\\r\\n/**\\r\\n    @title Interface for handler that handles generic deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IGenericHandler {\\r\\n    /**\\r\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\r\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\r\\n     */\\r\\n    function setResource(bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) external;\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n    @title Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ncontract Bridge is Pausable, AccessControl, SafeMath {\\r\\n\\r\\n    uint8   public _chainID;\\r\\n    uint256 public _relayerThreshold;\\r\\n    uint256 public _totalRelayers;\\r\\n    uint256 public _totalProposals;\\r\\n    uint256 public _fee;\\r\\n    uint256 public _expiry;\\r\\n\\r\\n    enum Vote {No, Yes}\\r\\n\\r\\n    enum ProposalStatus {Inactive, Active, Passed, Executed, Cancelled}\\r\\n\\r\\n    struct Proposal {\\r\\n        bytes32 _resourceID;\\r\\n        bytes32 _dataHash;\\r\\n        address[] _yesVotes;\\r\\n        address[] _noVotes;\\r\\n        ProposalStatus _status;\\r\\n        uint256 _proposedBlock;\\r\\n    }\\r\\n\\r\\n    // destinationChainID =\\u003e number of deposits\\r\\n    mapping(uint8 =\\u003e uint64) public _depositCounts;\\r\\n    // resourceID =\\u003e handler address\\r\\n    mapping(bytes32 =\\u003e address) public _resourceIDToHandlerAddress;\\r\\n    // depositNonce =\\u003e destinationChainID =\\u003e bytes\\r\\n    mapping(uint64 =\\u003e mapping(uint8 =\\u003e bytes)) public _depositRecords;\\r\\n    // destinationChainID + depositNonce =\\u003e dataHash =\\u003e Proposal\\r\\n    mapping(uint72 =\\u003e mapping(bytes32 =\\u003e Proposal)) public _proposals;\\r\\n    // destinationChainID + depositNonce =\\u003e dataHash =\\u003e relayerAddress =\\u003e bool\\r\\n    mapping(uint72 =\\u003e mapping(bytes32 =\\u003e mapping(address =\\u003e bool))) public _hasVotedOnProposal;\\r\\n\\r\\n    event RelayerThresholdChanged(uint indexed newThreshold);\\r\\n    event RelayerAdded(address indexed relayer);\\r\\n    event RelayerRemoved(address indexed relayer);\\r\\n    event Deposit(\\r\\n        uint8   indexed destinationChainID,\\r\\n        bytes32 indexed resourceID,\\r\\n        uint64  indexed depositNonce\\r\\n    );\\r\\n    event ProposalEvent(\\r\\n        uint8           indexed originChainID,\\r\\n        uint64          indexed depositNonce,\\r\\n        ProposalStatus  indexed status,\\r\\n        bytes32 resourceID,\\r\\n        bytes32 dataHash\\r\\n    );\\r\\n\\r\\n    event ProposalVote(\\r\\n        uint8   indexed originChainID,\\r\\n        uint64  indexed depositNonce,\\r\\n        ProposalStatus indexed status,\\r\\n        bytes32 resourceID\\r\\n    );\\r\\n\\r\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        _onlyAdmin();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdminOrRelayer() {\\r\\n        _onlyAdminOrRelayer();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRelayers() {\\r\\n        _onlyRelayers();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyAdminOrRelayer() private view {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(RELAYER_ROLE, msg.sender),\\r\\n            \\\"sender is not relayer or admin\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyAdmin() private view {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"sender doesn\\u0027t have admin role\\\");\\r\\n    }\\r\\n\\r\\n    function _onlyRelayers() private view {\\r\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"sender doesn\\u0027t have relayer role\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Initializes Bridge, creates and grants {msg.sender} the admin role,\\r\\n        creates and grants {initialRelayers} the relayer role.\\r\\n        @param chainID ID of chain the Bridge contract exists on.\\r\\n        @param initialRelayers Addresses that should be initially granted the relayer role.\\r\\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\\r\\n     */\\r\\n    constructor (uint8 chainID, address[] memory initialRelayers, uint initialRelayerThreshold, uint256 fee, uint256 expiry) {\\r\\n        _chainID = chainID;\\r\\n        _relayerThreshold = initialRelayerThreshold;\\r\\n        _fee = fee;\\r\\n        _expiry = expiry;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setRoleAdmin(RELAYER_ROLE, DEFAULT_ADMIN_ROLE);\\r\\n\\r\\n        uint initialRelayerCount = initialRelayers.length;\\r\\n        for (uint i; i \\u003c initialRelayerCount; i++) {\\r\\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\\r\\n            _totalRelayers++;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Returns true if {relayer} has the relayer role.\\r\\n        @param relayer Address to check.\\r\\n     */\\r\\n    function isRelayer(address relayer) external view returns (bool) {\\r\\n        return hasRole(RELAYER_ROLE, relayer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param newAdmin Address that admin role will be granted to.\\r\\n     */\\r\\n    function renounceAdmin(address newAdmin) external onlyAdmin {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\r\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n     */\\r\\n    function adminPauseTransfers() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n     */\\r\\n    function adminUnpauseTransfers() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Modifies the number of votes required for a proposal to be considered passed.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param newThreshold Value {_relayerThreshold} will be changed to.\\r\\n        @notice Emits {RelayerThresholdChanged} event.\\r\\n     */\\r\\n    function adminChangeRelayerThreshold(uint newThreshold) external onlyAdmin {\\r\\n        _relayerThreshold = newThreshold;\\r\\n        emit RelayerThresholdChanged(newThreshold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param relayerAddress Address of relayer to be added.\\r\\n        @notice Emits {RelayerAdded} event.\\r\\n     */\\r\\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\\r\\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \\\"addr already has relayer role!\\\");\\r\\n        grantRole(RELAYER_ROLE, relayerAddress);\\r\\n        emit RelayerAdded(relayerAddress);\\r\\n        _totalRelayers++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param relayerAddress Address of relayer to be removed.\\r\\n        @notice Emits {RelayerRemoved} event.\\r\\n     */\\r\\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\\r\\n        require(hasRole(RELAYER_ROLE, relayerAddress), \\\"addr doesn\\u0027t have relayer role!\\\");\\r\\n        revokeRole(RELAYER_ROLE, relayerAddress);\\r\\n        emit RelayerRemoved(relayerAddress);\\r\\n        _totalRelayers--;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\\r\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param handlerAddress Address of handler resource will be set for.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) external onlyAdmin {\\r\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\r\\n        IERCHandler handler = IERCHandler(handlerAddress);\\r\\n        handler.setResource(resourceID, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\\r\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param handlerAddress Address of handler resource will be set for.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function adminSetGenericResource(\\r\\n        address handlerAddress,\\r\\n        bytes32 resourceID,\\r\\n        address contractAddress,\\r\\n        bytes4 depositFunctionSig,\\r\\n        bytes4 executeFunctionSig\\r\\n    ) external onlyAdmin {\\r\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\r\\n        IGenericHandler handler = IGenericHandler(handlerAddress);\\r\\n        handler.setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\\r\\n        @notice Only callable by an address that currently has the admin role.\\r\\n        @param handlerAddress Address of handler resource will be set for.\\r\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin {\\r\\n        IERCHandler handler = IERCHandler(handlerAddress);\\r\\n        handler.setBurnable(tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Returns a proposal.\\r\\n        @param originChainID Chain ID deposit originated from.\\r\\n        @param depositNonce ID of proposal generated by proposal\\u0027s origin Bridge contract.\\r\\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\\r\\n        @return Proposal which consists of:\\r\\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\\r\\n        - _yesVotes Number of votes in favor of proposal.\\r\\n        - _noVotes Number of votes against proposal.\\r\\n        - _status Current status of proposal.\\r\\n     */\\r\\n    function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) external view returns (Proposal memory) {\\r\\n        uint72 nonceAndID = (uint72(depositNonce) \\u003c\\u003c 8) | uint72(originChainID);\\r\\n        return _proposals[nonceAndID][dataHash];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Changes deposit fee.\\r\\n        @notice Only callable by admin.\\r\\n        @param newFee Value {_fee} will be updated to.\\r\\n     */\\r\\n    function adminChangeFee(uint newFee) external onlyAdmin {\\r\\n        require(_fee != newFee, \\\"Current fee is equal to new fee\\\");\\r\\n        _fee = newFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to manually withdraw funds from ERC safes.\\r\\n        @param handlerAddress Address of handler to withdraw from.\\r\\n        @param tokenAddress Address of token to withdraw.\\r\\n        @param recipient Address to withdraw tokens to.\\r\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\\r\\n     */\\r\\n    function adminWithdraw(\\r\\n        address handlerAddress,\\r\\n        address tokenAddress,\\r\\n        address recipient,\\r\\n        uint256 amountOrTokenID\\r\\n    ) external onlyAdmin {\\r\\n        IERCHandler handler = IERCHandler(handlerAddress);\\r\\n        handler.withdraw(tokenAddress, recipient, amountOrTokenID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Initiates a transfer using a specified handler contract.\\r\\n        @notice Only callable when Bridge is not paused.\\r\\n        @param destinationChainID ID of chain deposit will be bridged to.\\r\\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\\r\\n        @param data Additional data to be passed to specified handler.\\r\\n        @notice Emits {Deposit} event.\\r\\n     */\\r\\n    function deposit(uint8 destinationChainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused {\\r\\n        require(msg.value == _fee, \\\"Incorrect fee supplied\\\");\\r\\n\\r\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\r\\n        require(handler != address(0), \\\"resourceID not mapped to handler\\\");\\r\\n\\r\\n        uint64 depositNonce = ++_depositCounts[destinationChainID];\\r\\n        _depositRecords[depositNonce][destinationChainID] = data;\\r\\n\\r\\n        IDepositExecute depositHandler = IDepositExecute(handler);\\r\\n        depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data);\\r\\n\\r\\n        emit Deposit(destinationChainID, resourceID, depositNonce);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice When called, {msg.sender} will be marked as voting in favor of proposal.\\r\\n        @notice Only callable by relayers when Bridge is not paused.\\r\\n        @param chainID ID of chain deposit originated from.\\r\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\r\\n        @param dataHash Hash of data provided when deposit was made.\\r\\n        @notice Proposal must not have already been passed or executed.\\r\\n        @notice {msg.sender} must not have already voted on proposal.\\r\\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\\r\\n        @notice Emits {ProposalVote} event.\\r\\n     */\\r\\n    function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) external onlyRelayers whenNotPaused {\\r\\n\\r\\n        uint72 nonceAndID = (uint72(depositNonce) \\u003c\\u003c 8) | uint72(chainID);\\r\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\r\\n\\r\\n        require(_resourceIDToHandlerAddress[resourceID] != address(0), \\\"no handler for resourceID\\\");\\r\\n        require(uint(proposal._status) \\u003c= 1, \\\"proposal already passed/executed/cancelled\\\");\\r\\n        require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \\\"relayer already voted\\\");\\r\\n\\r\\n        if (uint(proposal._status) == 0) {\\r\\n            ++_totalProposals;\\r\\n            _proposals[nonceAndID][dataHash] = Proposal({\\r\\n                _resourceID : resourceID,\\r\\n                _dataHash : dataHash,\\r\\n                _yesVotes : new address[](1),\\r\\n                _noVotes : new address[](0),\\r\\n                _status : ProposalStatus.Active,\\r\\n                _proposedBlock : block.number\\r\\n                });\\r\\n\\r\\n            proposal._yesVotes[0] = msg.sender;\\r\\n            emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);\\r\\n        } else {\\r\\n            if (sub(block.number, proposal._proposedBlock) \\u003e _expiry) {\\r\\n                // if the number of blocks that has passed since this proposal was\\r\\n                // submitted exceeds the expiry threshold set, cancel the proposal\\r\\n                proposal._status = ProposalStatus.Cancelled;\\r\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, resourceID, dataHash);\\r\\n            } else {\\r\\n                require(dataHash == proposal._dataHash, \\\"datahash mismatch\\\");\\r\\n                proposal._yesVotes.push(msg.sender);\\r\\n\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n        if (proposal._status != ProposalStatus.Cancelled) {\\r\\n            _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true;\\r\\n            emit ProposalVote(chainID, depositNonce, proposal._status, resourceID);\\r\\n\\r\\n            // If _depositThreshold is set to 1, then auto finalize\\r\\n            // or if _relayerThreshold has been exceeded\\r\\n            if (_relayerThreshold \\u003c= 1 || proposal._yesVotes.length \\u003e= _relayerThreshold) {\\r\\n                proposal._status = ProposalStatus.Passed;\\r\\n\\r\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Passed, resourceID, dataHash);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\r\\n        @notice Only callable by relayers when Bridge is not paused.\\r\\n        @param chainID ID of chain deposit originated from.\\r\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\r\\n        @param dataHash Hash of data originally provided when deposit was made.\\r\\n        @notice Proposal must be past expiry threshold.\\r\\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\\r\\n     */\\r\\n    function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) public onlyAdminOrRelayer {\\r\\n        uint72 nonceAndID = (uint72(depositNonce) \\u003c\\u003c 8) | uint72(chainID);\\r\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\r\\n\\r\\n        require(proposal._status != ProposalStatus.Cancelled, \\\"Proposal already cancelled\\\");\\r\\n        require(sub(block.number, proposal._proposedBlock) \\u003e _expiry, \\\"Proposal not at expiry threshold\\\");\\r\\n\\r\\n        proposal._status = ProposalStatus.Cancelled;\\r\\n        emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, proposal._resourceID, proposal._dataHash);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\r\\n        @notice Only callable by relayers when Bridge is not paused.\\r\\n        @param chainID ID of chain deposit originated from.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\r\\n        @param data Data originally provided when deposit was made.\\r\\n        @notice Proposal must have Passed status.\\r\\n        @notice Hash of {data} must equal proposal\\u0027s {dataHash}.\\r\\n        @notice Emits {ProposalEvent} event with status {Executed}.\\r\\n     */\\r\\n    function executeProposal(uint8 chainID, uint64 depositNonce, bytes calldata data, bytes32 resourceID) external onlyRelayers whenNotPaused {\\r\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\r\\n        uint72 nonceAndID = (uint72(depositNonce) \\u003c\\u003c 8) | uint72(chainID);\\r\\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\\r\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\r\\n\\r\\n        require(proposal._status == ProposalStatus.Passed, \\\"proposal already transferred\\\");\\r\\n        require(dataHash == proposal._dataHash, \\\"data doesn\\u0027t match datahash\\\");\\r\\n\\r\\n        proposal._status = ProposalStatus.Executed;\\r\\n\\r\\n        IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]);\\r\\n        depositHandler.executeProposal(proposal._resourceID, data);\\r\\n\\r\\n        emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\\r\\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\\r\\n        @param addrs Array of addresses to transfer {amounts} to.\\r\\n        @param amounts Array of amonuts to transfer to {addrs}.\\r\\n     */\\r\\n    function transferFunds(address payable[] calldata addrs, uint[] calldata amounts) external onlyAdmin {\\r\\n        require(addrs.length == amounts.length, \\\"length of address and amounts dismatch\\\");\\r\\n        uint addrCount = addrs.length;\\r\\n        for (uint i = 0; i \\u003c addrCount; i++) {\\r\\n            addrs[i].transfer(amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"},\"ERC20Handler_for_verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n//import \\\"../interfaces/IDepositExecute.sol\\\";\\r\\n/**\\r\\n    @title Interface for handler contracts that support deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IDepositExecute {\\r\\n    /**\\r\\n        @notice It is intended that deposit are made using the Bridge contract.\\r\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\r\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\r\\n        @param depositer Address of account making the deposit in the Bridge contract.\\r\\n        @param data Consists of additional data needed for a specific deposit.\\r\\n     */\\r\\n    function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n        @notice It is intended that proposals are executed by the Bridge contract.\\r\\n        @param data Consists of additional data needed for a specific deposit execution.\\r\\n     */\\r\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\\r\\n}\\r\\n\\r\\n//import \\\"./HandlerHelpers.sol\\\";\\r\\n// import \\\"../interfaces/IERCHandler.sol\\\";\\r\\n/**\\r\\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IERCHandler {\\r\\n    /**\\r\\n        @notice Correlates {resourceID} with {contractAddress}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function setResource(bytes32 resourceID, address contractAddress) external;\\r\\n    /**\\r\\n        @notice Marks {contractAddress} as mintable/burnable.\\r\\n        @param contractAddress Address of contract to be used when making or executing deposits.\\r\\n     */\\r\\n    function setBurnable(address contractAddress) external;\\r\\n    /**\\r\\n        @notice Used to manually release funds from ERC safes.\\r\\n        @param tokenAddress Address of token contract to release.\\r\\n        @param recipient Address to release tokens to.\\r\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\\r\\n     */\\r\\n    function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n    @title Function used across handler contracts.\\r\\n    @author ChainSafe Systems.\\r\\n    @notice This contract is intended to be used with the Bridge contract.\\r\\n */\\r\\ncontract HandlerHelpers is IERCHandler {\\r\\n    address public _bridgeAddress;\\r\\n\\r\\n    // resourceID =\\u003e token contract address\\r\\n    mapping (bytes32 =\\u003e address) public _resourceIDToTokenContractAddress;\\r\\n\\r\\n    // token contract address =\\u003e resourceID\\r\\n    mapping (address =\\u003e bytes32) public _tokenContractAddressToResourceID;\\r\\n\\r\\n    // token contract address =\\u003e is whitelisted\\r\\n    mapping (address =\\u003e bool) public _contractWhitelist;\\r\\n\\r\\n    // token contract address =\\u003e is burnable\\r\\n    mapping (address =\\u003e bool) public _burnList;\\r\\n\\r\\n    modifier onlyBridge() {\\r\\n        _onlyBridge();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyBridge() private view {\\r\\n        require(msg.sender == _bridgeAddress, \\\"sender must be bridge contract\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\\r\\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\\r\\n        then sets {_resourceIDToContractAddress} with {contractAddress},\\r\\n        {_contractAddressToResourceID} with {resourceID},\\r\\n        and {_contractWhitelist} to true for {contractAddress}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n     */\\r\\n    function setResource(bytes32 resourceID, address contractAddress) external override onlyBridge {\\r\\n\\r\\n        _setResource(resourceID, contractAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}]\\r\\n        to true.\\r\\n        @param contractAddress Address of contract to be used when making or executing deposits.\\r\\n     */\\r\\n    function setBurnable(address contractAddress) external override onlyBridge{\\r\\n        _setBurnable(contractAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to manually release funds from ERC safes.\\r\\n        @param tokenAddress Address of token contract to release.\\r\\n        @param recipient Address to release tokens to.\\r\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\\r\\n     */\\r\\n    function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external virtual override {}\\r\\n\\r\\n    function _setResource(bytes32 resourceID, address contractAddress) internal {\\r\\n        _resourceIDToTokenContractAddress[resourceID] = contractAddress;\\r\\n        _tokenContractAddressToResourceID[contractAddress] = resourceID;\\r\\n\\r\\n        _contractWhitelist[contractAddress] = true;\\r\\n    }\\r\\n\\r\\n    function _setBurnable(address contractAddress) internal {\\r\\n        require(_contractWhitelist[contractAddress], \\\"provided contract is not whitelisted\\\");\\r\\n        _burnList[contractAddress] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\n// import \\\"../ERC20Safe.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/math/SafeMath.sol\\\";\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b \\u003e a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/token/ERC20/IERC20.sol\\\";\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n// import \\\"../utils/Context.sol\\\";\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/presets/ERC20PresetMinterPauser.sol\\\";\\r\\n// import \\\"../access/AccessControl.sol\\\";\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Address for address;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// import \\\"../token/ERC20/ERC20.sol\\\";\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/token/ERC20/ERC20Burnable.sol\\\";\\r\\n// import \\\"../token/ERC20/ERC20Burnable.sol\\\";\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual {\\r\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\r\\n\\r\\n        _approve(account, _msgSender(), decreasedAllowance);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n// import \\\"../token/ERC20/ERC20Pausable.sol\\\";\\r\\n// import \\\"../../utils/Pausable.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\r\\n *\\r\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\r\\n * period, or having an emergency switch for freezing all token transfers in the\\r\\n * event of a large bug.\\r\\n */\\r\\nabstract contract ERC20Pausable is ERC20, Pausable {\\r\\n    /**\\r\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// import \\\"@openzeppelin/contracts@3.4.0/presets/ERC20PresetMinterPauser.sol\\\";\\r\\n/**\\r\\n * @dev {ERC20} token, including:\\r\\n *\\r\\n *  - ability for holders to burn (destroy) their tokens\\r\\n *  - a minter role that allows for token minting (creation)\\r\\n *  - a pauser role that allows to stop all token transfers\\r\\n *\\r\\n * This contract uses {AccessControl} to lock permissioned functions using the\\r\\n * different roles - head to its documentation for details.\\r\\n *\\r\\n * The account that deploys the contract will be granted the minter and pauser\\r\\n * roles, as well as the default admin role, which will let it grant both minter\\r\\n * and pauser roles to other accounts.\\r\\n */\\r\\ncontract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\r\\n     * account that deploys the contract.\\r\\n     *\\r\\n     * See {ERC20-constructor}.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n        _setupRole(MINTER_ROLE, _msgSender());\\r\\n        _setupRole(PAUSER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` new tokens for `to`.\\r\\n     *\\r\\n     * See {ERC20-_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `MINTER_ROLE`.\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public virtual {\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function pause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function unpause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n    @title Manages deposited ERC20s.\\r\\n    @author ChainSafe Systems.\\r\\n    @notice This contract is intended to be used with ERC20Handler contract.\\r\\n */\\r\\ncontract ERC20Safe {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n        @notice Used to transfer tokens into the safe to fund proposals.\\r\\n        @param tokenAddress Address of ERC20 to transfer.\\r\\n        @param owner Address of current token owner.\\r\\n        @param amount Amount of tokens to transfer.\\r\\n     */\\r\\n    function fundERC20(address tokenAddress, address owner, uint256 amount) public {\\r\\n        IERC20 erc20 = IERC20(tokenAddress);\\r\\n        _safeTransferFrom(erc20, owner, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to gain custody of deposited token.\\r\\n        @param tokenAddress Address of ERC20 to transfer.\\r\\n        @param owner Address of current token owner.\\r\\n        @param recipient Address to transfer tokens to.\\r\\n        @param amount Amount of tokens to transfer.\\r\\n     */\\r\\n    function lockERC20(address tokenAddress, address owner, address recipient, uint256 amount) internal {\\r\\n        IERC20 erc20 = IERC20(tokenAddress);\\r\\n        _safeTransferFrom(erc20, owner, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Transfers custody of token to recipient.\\r\\n        @param tokenAddress Address of ERC20 to transfer.\\r\\n        @param recipient Address to transfer tokens to.\\r\\n        @param amount Amount of tokens to transfer.\\r\\n     */\\r\\n    function releaseERC20(address tokenAddress, address recipient, uint256 amount) internal {\\r\\n        IERC20 erc20 = IERC20(tokenAddress);\\r\\n        _safeTransfer(erc20, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to create new ERC20s.\\r\\n        @param tokenAddress Address of ERC20 to transfer.\\r\\n        @param recipient Address to mint token to.\\r\\n        @param amount Amount of token to mint.\\r\\n     */\\r\\n    function mintERC20(address tokenAddress, address recipient, uint256 amount) internal {\\r\\n        ERC20PresetMinterPauser erc20 = ERC20PresetMinterPauser(tokenAddress);\\r\\n        erc20.mint(recipient, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to burn ERC20s.\\r\\n        @param tokenAddress Address of ERC20 to burn.\\r\\n        @param owner Current owner of tokens.\\r\\n        @param amount Amount of tokens to burn.\\r\\n     */\\r\\n    function burnERC20(address tokenAddress, address owner, uint256 amount) internal {\\r\\n        ERC20Burnable erc20 = ERC20Burnable(tokenAddress);\\r\\n        erc20.burnFrom(owner, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice used to transfer ERC20s safely\\r\\n        @param token Token instance to transfer\\r\\n        @param to Address to transfer token to\\r\\n        @param value Amount of token to transfer\\r\\n     */\\r\\n    function _safeTransfer(IERC20 token, address to, uint256 value) private {\\r\\n        _safeCall(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        @notice used to transfer ERC20s safely\\r\\n        @param token Token instance to transfer\\r\\n        @param from Address to transfer token from\\r\\n        @param to Address to transfer token to\\r\\n        @param value Amount of token to transfer\\r\\n     */\\r\\n    function _safeTransferFrom(IERC20 token, address from, address to, uint256 value) private {\\r\\n        _safeCall(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice used to make calls to ERC20s safely\\r\\n        @param token Token instance call targets\\r\\n        @param data encoded call data\\r\\n     */\\r\\n    function _safeCall(IERC20 token, bytes memory data) private {        \\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"ERC20: call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) {\\r\\n\\r\\n            require(abi.decode(returndata, (bool)), \\\"ERC20: operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n    @title Handles ERC20 deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n    @notice This contract is intended to be used with the Bridge contract.\\r\\n */\\r\\ncontract ERC20Handler is IDepositExecute, HandlerHelpers, ERC20Safe {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct DepositRecord {\\r\\n        address _tokenAddress;\\r\\n        uint8    _lenDestinationRecipientAddress;\\r\\n        uint8   _destinationChainID;\\r\\n        bytes32 _resourceID;\\r\\n        bytes   _destinationRecipientAddress;\\r\\n        address _depositer;\\r\\n        uint    _amount;\\r\\n    }\\r\\n\\r\\n    // depositNonce =\\u003e Deposit Record\\r\\n    mapping (uint8 =\\u003e mapping(uint64 =\\u003e DepositRecord)) public _depositRecords;\\r\\n\\r\\n    /**\\r\\n        @param bridgeAddress Contract address of previously deployed Bridge.\\r\\n        @param initialResourceIDs Resource IDs are used to identify a specific contract address.\\r\\n        These are the Resource IDs this contract will initially support.\\r\\n        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be\\r\\n        called to perform various deposit calls.\\r\\n        @param burnableContractAddresses These addresses will be set as burnable and when {deposit} is called, the deposited token will be burned.\\r\\n        When {executeProposal} is called, new tokens will be minted.\\r\\n\\r\\n        @dev {initialResourceIDs} and {initialContractAddresses} must have the same length (one resourceID for every address).\\r\\n        Also, these arrays must be ordered in the way that {initialResourceIDs}[0] is the intended resourceID for {initialContractAddresses}[0].\\r\\n     */\\r\\n    constructor(\\r\\n        address          bridgeAddress,\\r\\n        bytes32[] memory initialResourceIDs,\\r\\n        address[] memory initialContractAddresses,\\r\\n        address[] memory burnableContractAddresses\\r\\n    ) {\\r\\n        require(initialResourceIDs.length == initialContractAddresses.length,\\r\\n            \\\"initialResourceIDs and initialContractAddresses len mismatch\\\");\\r\\n\\r\\n        _bridgeAddress = bridgeAddress;\\r\\n\\r\\n        uint256 initialCount = initialResourceIDs.length;\\r\\n        for (uint256 i = 0; i \\u003c initialCount; i++) {\\r\\n            _setResource(initialResourceIDs[i], initialContractAddresses[i]);\\r\\n        }\\r\\n\\r\\n        uint256 burnableCount = burnableContractAddresses.length;\\r\\n        for (uint256 i = 0; i \\u003c burnableCount; i++) {\\r\\n            _setBurnable(burnableContractAddresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @param depositNonce This ID will have been generated by the Bridge contract.\\r\\n        @param destId ID of chain deposit will be bridged to.\\r\\n        @return DepositRecord which consists of:\\r\\n        - _tokenAddress Address used when {deposit} was executed.\\r\\n        - _destinationChainID ChainID deposited tokens are intended to end up on.\\r\\n        - _resourceID ResourceID used when {deposit} was executed.\\r\\n        - _lenDestinationRecipientAddress Used to parse recipient\\u0027s address from {_destinationRecipientAddress}\\r\\n        - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain.\\r\\n        - _depositer Address that initially called {deposit} in the Bridge contract.\\r\\n        - _amount Amount of tokens that were deposited.\\r\\n    */\\r\\n    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {\\r\\n        return _depositRecords[destId][depositNonce];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice A deposit is initiatied by making a deposit in the Bridge contract.\\r\\n        @param destinationChainID Chain ID of chain tokens are expected to be bridged to.\\r\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\r\\n        @param depositer Address of account making the deposit in the Bridge contract.\\r\\n        @param data Consists of: {resourceID}, {amount}, {lenRecipientAddress}, and {recipientAddress}\\r\\n        all padded to 32 bytes.\\r\\n        @notice Data passed into the function should be constructed as follows:\\r\\n        amount                      uint256     bytes   0 - 32\\r\\n        recipientAddress length     uint256     bytes  32 - 64\\r\\n        recipientAddress            bytes       bytes  64 - END\\r\\n        @dev Depending if the corresponding {tokenAddress} for the parsed {resourceID} is\\r\\n        marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.\\r\\n     */\\r\\n    function deposit(\\r\\n        bytes32 resourceID,\\r\\n        uint8   destinationChainID,\\r\\n        uint64  depositNonce,\\r\\n        address depositer,\\r\\n        bytes   calldata data\\r\\n    ) external override onlyBridge {\\r\\n        bytes   memory recipientAddress;\\r\\n        uint256        amount;\\r\\n        uint256        lenRecipientAddress;\\r\\n\\r\\n        assembly {\\r\\n\\r\\n            amount := calldataload(0xC4)\\r\\n\\r\\n            recipientAddress := mload(0x40)\\r\\n            lenRecipientAddress := calldataload(0xE4)\\r\\n            mstore(0x40, add(0x20, add(recipientAddress, lenRecipientAddress)))\\r\\n\\r\\n            calldatacopy(\\r\\n                recipientAddress, // copy to destinationRecipientAddress\\r\\n                0xE4, // copy from calldata @ 0x104\\r\\n                sub(calldatasize(), 0xE4) // copy size (calldatasize - 0x104)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\\r\\n        require(_contractWhitelist[tokenAddress], \\\"provided tokenAddress is not whitelisted\\\");\\r\\n\\r\\n        if (_burnList[tokenAddress]) {\\r\\n            burnERC20(tokenAddress, depositer, amount);\\r\\n        } else {\\r\\n            lockERC20(tokenAddress, depositer, address(this), amount);\\r\\n        }\\r\\n\\r\\n        _depositRecords[destinationChainID][depositNonce] = DepositRecord(\\r\\n            tokenAddress,\\r\\n            uint8(lenRecipientAddress),\\r\\n            destinationChainID,\\r\\n            resourceID,\\r\\n            recipientAddress,\\r\\n            depositer,\\r\\n            amount.div(1e6) // Make it compatible with substrate token decimal\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\\r\\n        by a relayer on the deposit\\u0027s destination chain.\\r\\n        @param data Consists of {resourceID}, {amount}, {lenDestinationRecipientAddress},\\r\\n        and {destinationRecipientAddress} all padded to 32 bytes.\\r\\n        @notice Data passed into the function should be constructed as follows:\\r\\n        amount                                 uint256     bytes  0 - 32\\r\\n        destinationRecipientAddress length     uint256     bytes  32 - 64\\r\\n        destinationRecipientAddress            bytes       bytes  64 - END\\r\\n     */\\r\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge {\\r\\n        uint256       amount;\\r\\n        bytes  memory destinationRecipientAddress;\\r\\n\\r\\n        assembly {\\r\\n            amount := calldataload(0x64)\\r\\n\\r\\n            destinationRecipientAddress := mload(0x40)\\r\\n            let lenDestinationRecipientAddress := calldataload(0x84)\\r\\n            mstore(0x40, add(0x20, add(destinationRecipientAddress, lenDestinationRecipientAddress)))\\r\\n\\r\\n            // in the calldata the destinationRecipientAddress is stored at 0xC4 after accounting for the function signature and length declaration\\r\\n            calldatacopy(\\r\\n                destinationRecipientAddress, // copy to destinationRecipientAddress\\r\\n                0x84, // copy from calldata @ 0x84\\r\\n                sub(calldatasize(), 0x84) // copy size to the end of calldata\\r\\n            )\\r\\n        }\\r\\n\\r\\n        bytes20 recipientAddress;\\r\\n        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];\\r\\n\\r\\n        assembly {\\r\\n            recipientAddress := mload(add(destinationRecipientAddress, 0x20))\\r\\n        }\\r\\n\\r\\n        require(_contractWhitelist[tokenAddress], \\\"provided tokenAddress is not whitelisted\\\");\\r\\n\\r\\n        if (_burnList[tokenAddress]) {\\r\\n            // amount.mul(1e6): Make it compatible with substrate token decimal\\r\\n            mintERC20(tokenAddress, address(recipientAddress), amount.mul(1e6));\\r\\n        } else {\\r\\n            // amount.mul(1e6): Make it compatible with substrate token decimal\\r\\n            releaseERC20(tokenAddress, address(recipientAddress), amount.mul(1e6));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Used to manually release ERC20 tokens from ERC20Safe.\\r\\n        @param tokenAddress Address of token contract to release.\\r\\n        @param recipient Address to release tokens to.\\r\\n        @param amount The amount of ERC20 tokens to release.\\r\\n     */\\r\\n    function withdraw(address tokenAddress, address recipient, uint amount) external override onlyBridge {\\r\\n        releaseERC20(tokenAddress, recipient, amount);\\r\\n    }\\r\\n}\"},\"GenericHandler_for_verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"../interfaces/IGenericHandler.sol\\\";\\r\\n/**\\r\\n    @title Interface for handler that handles generic deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n */\\r\\ninterface IGenericHandler {\\r\\n    /**\\r\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\r\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\r\\n     */\\r\\n    function setResource(bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n    @title Handles generic deposits and deposit executions.\\r\\n    @author ChainSafe Systems.\\r\\n    @notice This contract is intended to be used with the Bridge contract.\\r\\n */\\r\\ncontract GenericHandler is IGenericHandler {\\r\\n    address public _bridgeAddress;\\r\\n\\r\\n    struct DepositRecord {\\r\\n        uint8   _destinationChainID;\\r\\n        address _depositer;\\r\\n        bytes32 _resourceID;\\r\\n        bytes   _metaData;\\r\\n    }\\r\\n\\r\\n    // depositNonce =\\u003e Deposit Record\\r\\n    mapping (uint8 =\\u003e mapping(uint64 =\\u003e DepositRecord)) public _depositRecords;\\r\\n\\r\\n    // resourceID =\\u003e contract address\\r\\n    mapping (bytes32 =\\u003e address) public _resourceIDToContractAddress;\\r\\n\\r\\n    // contract address =\\u003e resourceID\\r\\n    mapping (address =\\u003e bytes32) public _contractAddressToResourceID;\\r\\n\\r\\n    // contract address =\\u003e deposit function signature\\r\\n    mapping (address =\\u003e bytes4) public _contractAddressToDepositFunctionSignature;\\r\\n\\r\\n    // contract address =\\u003e execute proposal function signature\\r\\n    mapping (address =\\u003e bytes4) public _contractAddressToExecuteFunctionSignature;\\r\\n\\r\\n    // token contract address =\\u003e is whitelisted\\r\\n    mapping (address =\\u003e bool) public _contractWhitelist;\\r\\n\\r\\n    modifier onlyBridge() {\\r\\n        _onlyBridge();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyBridge() private view {\\r\\n         require(msg.sender == _bridgeAddress, \\\"sender must be bridge contract\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @param bridgeAddress Contract address of previously deployed Bridge.\\r\\n        @param initialResourceIDs Resource IDs used to identify a specific contract address.\\r\\n        These are the Resource IDs this contract will initially support.\\r\\n        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be\\r\\n        called to perform deposit and execution calls.\\r\\n        @param initialDepositFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\r\\n        and are the function that will be called when executing {deposit}\\r\\n        @param initialExecuteFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\r\\n        and are the function that will be called when executing {executeProposal}\\r\\n\\r\\n        @dev {initialResourceIDs}, {initialContractAddresses}, {initialDepositFunctionSignatures},\\r\\n        and {initialExecuteFunctionSignatures} must all have the same length. Also,\\r\\n        values must be ordered in the way that that index x of any mentioned array\\r\\n        must be intended for value x of any other array, e.g. {initialContractAddresses}[0]\\r\\n        is the intended address for {initialDepositFunctionSignatures}[0].\\r\\n     */\\r\\n    constructor(\\r\\n        address          bridgeAddress,\\r\\n        bytes32[] memory initialResourceIDs,\\r\\n        address[] memory initialContractAddresses,\\r\\n        bytes4[]  memory initialDepositFunctionSignatures,\\r\\n        bytes4[]  memory initialExecuteFunctionSignatures\\r\\n    ) {\\r\\n        require(initialResourceIDs.length == initialContractAddresses.length,\\r\\n            \\\"initialResourceIDs and initialContractAddresses len mismatch\\\");\\r\\n\\r\\n        require(initialContractAddresses.length == initialDepositFunctionSignatures.length,\\r\\n            \\\"provided contract addresses and function signatures len mismatch\\\");\\r\\n\\r\\n        require(initialDepositFunctionSignatures.length == initialExecuteFunctionSignatures.length,\\r\\n            \\\"provided deposit and execute function signatures len mismatch\\\");\\r\\n\\r\\n        _bridgeAddress = bridgeAddress;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c initialResourceIDs.length; i++) {\\r\\n            _setResource(\\r\\n                initialResourceIDs[i],\\r\\n                initialContractAddresses[i],\\r\\n                initialDepositFunctionSignatures[i],\\r\\n                initialExecuteFunctionSignatures[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @param depositNonce This ID will have been generated by the Bridge contract.\\r\\n        @param destId ID of chain deposit will be bridged to.\\r\\n        @return DepositRecord which consists of:\\r\\n        - _destinationChainID ChainID deposited tokens are intended to end up on.\\r\\n        - _resourceID ResourceID used when {deposit} was executed.\\r\\n        - _depositer Address that initially called {deposit} in the Bridge contract.\\r\\n        - _metaData Data to be passed to method executed in corresponding {resourceID} contract.\\r\\n    */\\r\\n    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {\\r\\n        return _depositRecords[destId][depositNonce];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\\r\\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\\r\\n        then sets {_resourceIDToContractAddress} with {contractAddress},\\r\\n        {_contractAddressToResourceID} with {resourceID},\\r\\n        {_contractAddressToDepositFunctionSignature} with {depositFunctionSig},\\r\\n        {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig},\\r\\n        and {_contractWhitelist} to true for {contractAddress}.\\r\\n        @param resourceID ResourceID to be used when making deposits.\\r\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\r\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\r\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\r\\n     */\\r\\n    function setResource(\\r\\n        bytes32 resourceID,\\r\\n        address contractAddress,\\r\\n        bytes4 depositFunctionSig,\\r\\n        bytes4 executeFunctionSig\\r\\n    ) external onlyBridge override {\\r\\n\\r\\n        _setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice A deposit is initiatied by making a deposit in the Bridge contract.\\r\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\r\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\r\\n        @param depositer Address of account making the deposit in the Bridge contract.\\r\\n        @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\\r\\n        @notice Data passed into the function should be constructed as follows:\\r\\n        len(data)                              uint256     bytes  0  - 32\\r\\n        data                                   bytes       bytes  64 - END\\r\\n        @notice {contractAddress} is required to be whitelisted\\r\\n        @notice If {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set,\\r\\n        {metaData} is expected to consist of needed function arguments.\\r\\n     */\\r\\n    function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external onlyBridge {\\r\\n        uint256      lenMetadata;\\r\\n        bytes memory metadata;\\r\\n\\r\\n        lenMetadata = abi.decode(data, (uint256));\\r\\n        metadata = bytes(data[32:32 + lenMetadata]);\\r\\n\\r\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\r\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\r\\n\\r\\n        bytes4 sig = _contractAddressToDepositFunctionSignature[contractAddress];\\r\\n        if (sig != bytes4(0)) {\\r\\n            bytes memory callData = abi.encodeWithSelector(sig, metadata);\\r\\n            (bool success,) = contractAddress.call(callData);\\r\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\r\\n        }\\r\\n\\r\\n        _depositRecords[destinationChainID][depositNonce] = DepositRecord(\\r\\n            destinationChainID,\\r\\n            depositer,\\r\\n            resourceID,\\r\\n            metadata\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\\r\\n        @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\\r\\n        @notice Data passed into the function should be constructed as follows:\\r\\n        len(data)                              uint256     bytes  0  - 32\\r\\n        data                                   bytes       bytes  32 - END\\r\\n        @notice {contractAddress} is required to be whitelisted\\r\\n        @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\\r\\n        {metaData} is expected to consist of needed function arguments.\\r\\n     */\\r\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external onlyBridge {\\r\\n        uint256      lenMetadata;\\r\\n        bytes memory metaData;\\r\\n\\r\\n        lenMetadata = abi.decode(data, (uint256));\\r\\n        metaData = bytes(data[32:32 + lenMetadata]);\\r\\n\\r\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\r\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\r\\n\\r\\n        bytes4 sig = _contractAddressToExecuteFunctionSignature[contractAddress];\\r\\n        if (sig != bytes4(0)) {\\r\\n            bytes memory callData = abi.encodeWithSelector(sig, metaData);\\r\\n            (bool success,) = contractAddress.call(callData);\\r\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setResource(\\r\\n        bytes32 resourceID,\\r\\n        address contractAddress,\\r\\n        bytes4 depositFunctionSig,\\r\\n        bytes4 executeFunctionSig\\r\\n    ) internal {\\r\\n        _resourceIDToContractAddress[resourceID] = contractAddress;\\r\\n        _contractAddressToResourceID[contractAddress] = resourceID;\\r\\n        _contractAddressToDepositFunctionSignature[contractAddress] = depositFunctionSig;\\r\\n        _contractAddressToExecuteFunctionSignature[contractAddress] = executeFunctionSig;\\r\\n\\r\\n        _contractWhitelist[contractAddress] = true;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9ee05cd4f30bab753e21a60f9a2a490321f29c3ba8b8cb3ea821c097383cbf9"}]}