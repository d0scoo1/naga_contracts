{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vaults/NFTVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IAggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IStableCoin.sol\\\";\\nimport \\\"../interfaces/IJPEGLock.sol\\\";\\nimport \\\"../interfaces/IJPEGCardsCigStaking.sol\\\";\\n\\n/// @title NFT lending vault\\n/// @notice This contracts allows users to borrow PUSD using NFTs as collateral.\\n/// The floor price of the NFT collection is fetched using a chainlink oracle, while some other more valuable traits\\n/// can have an higher price set by the DAO. Users can also increase the price (and thus the borrow limit) of their\\n/// NFT by submitting a governance proposal. If the proposal is approved the user can lock a percentage of the new price\\n/// worth of JPEG to make it effective\\ncontract NFTVault is AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IStableCoin;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    event PositionOpened(address indexed owner, uint256 indexed index);\\n    event Borrowed(\\n        address indexed owner,\\n        uint256 indexed index,\\n        uint256 amount\\n    );\\n    event Repaid(address indexed owner, uint256 indexed index, uint256 amount);\\n    event PositionClosed(address indexed owner, uint256 indexed index);\\n    event Liquidated(\\n        address indexed liquidator,\\n        address indexed owner,\\n        uint256 indexed index,\\n        bool insured\\n    );\\n    event Repurchased(address indexed owner, uint256 indexed index);\\n    event InsuranceExpired(address indexed owner, uint256 indexed index);\\n\\n    enum BorrowType {\\n        NOT_CONFIRMED,\\n        NON_INSURANCE,\\n        USE_INSURANCE\\n    }\\n\\n    struct Position {\\n        BorrowType borrowType;\\n        uint256 debtPrincipal;\\n        uint256 debtPortion;\\n        uint256 debtAmountForRepurchase;\\n        uint256 liquidatedAt;\\n        address liquidator;\\n    }\\n\\n    struct Rate {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    struct VaultSettings {\\n        Rate debtInterestApr;\\n        Rate creditLimitRate;\\n        Rate liquidationLimitRate;\\n        Rate cigStakedCreditLimitRate;\\n        Rate cigStakedLiquidationLimitRate;\\n        Rate valueIncreaseLockRate;\\n        Rate organizationFeeRate;\\n        Rate insurancePurchaseRate;\\n        Rate insuranceLiquidationPenaltyRate;\\n        uint256 insuranceRepurchaseTimeLimit;\\n        uint256 borrowAmountCap;\\n    }\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n    bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n    bytes32 public constant CUSTOM_NFT_HASH = keccak256(\\\"CUSTOM\\\");\\n\\n    IStableCoin public stablecoin;\\n    /// @notice Chainlink ETH/USD price feed\\n    IAggregatorV3Interface public ethAggregator;\\n    /// @notice Chainlink JPEG/USD price feed\\n    IAggregatorV3Interface public jpegAggregator;\\n    /// @notice Chainlink NFT floor oracle\\n    IAggregatorV3Interface public floorOracle;\\n    /// @notice Chainlink NFT fallback floor oracle\\n    IAggregatorV3Interface public fallbackOracle;\\n    /// @notice JPEGLocker, used by this contract to lock JPEG and increase the value of an NFT\\n    IJPEGLock public jpegLocker;\\n    /// @notice JPEGCardsCigStaking, cig stakers get an higher credit limit rate and liquidation limit rate.\\n    /// Immediately reverts to normal rates if the cig is unstaked.\\n    IJPEGCardsCigStaking public cigStaking;\\n    IERC721Upgradeable public nftContract;\\n\\n    /// @notice If true, the floor price won't be fetched using the Chainlink oracle but\\n    /// a value set by the DAO will be used instead\\n    bool public daoFloorOverride;\\n    // @notice If true, the floor price will be fetched using the fallback oracle\\n    bool public useFallbackOracle;\\n    /// @notice Total outstanding debt\\n    uint256 public totalDebtAmount;\\n    /// @dev Last time debt was accrued. See {accrue} for more info\\n    uint256 public totalDebtAccruedAt;\\n    uint256 public totalFeeCollected;\\n    uint256 internal totalDebtPortion;\\n\\n    VaultSettings public settings;\\n\\n    /// @dev Keeps track of all the NFTs used as collateral for positions\\n    EnumerableSetUpgradeable.UintSet private positionIndexes;\\n\\n    mapping(uint256 => Position) private positions;\\n    mapping(uint256 => address) public positionOwner;\\n    mapping(bytes32 => uint256) public nftTypeValueETH;\\n    mapping(uint256 => uint256) public nftValueETH;\\n    //bytes32(0) is floor\\n    mapping(uint256 => bytes32) public nftTypes;\\n    mapping(uint256 => uint256) public pendingNFTValueETH;\\n\\n    /// @dev Checks if the provided NFT index is valid\\n    /// @param nftIndex The index to check\\n    modifier validNFTIndex(uint256 nftIndex) {\\n        //The standard OZ ERC721 implementation of ownerOf reverts on a non existing nft isntead of returning address(0)\\n        require(nftContract.ownerOf(nftIndex) != address(0), \\\"invalid_nft\\\");\\n        _;\\n    }\\n\\n    struct NFTCategoryInitializer {\\n        bytes32 hash;\\n        uint256 valueETH;\\n        uint256[] nfts;\\n    }\\n\\n    /// @param _stablecoin PUSD address\\n    /// @param _nftContract The NFT contrat address. It could also be the address of an helper contract\\n    /// if the target NFT isn't an ERC721 (CryptoPunks as an example)\\n    /// @param _ethAggregator Chainlink ETH/USD price feed address\\n    /// @param _floorOracle Chainlink floor oracle address\\n    /// @param _typeInitializers Used to initialize NFT categories with their value and NFT indexes.\\n    /// Floor NFT shouldn't be initialized this way\\n    /// @param _settings Initial settings used by the contract\\n    function initialize(\\n        IStableCoin _stablecoin,\\n        IERC721Upgradeable _nftContract,\\n        IAggregatorV3Interface _ethAggregator,\\n        IAggregatorV3Interface _floorOracle,\\n        NFTCategoryInitializer[] calldata _typeInitializers,\\n        IJPEGCardsCigStaking _cigStaking,\\n        VaultSettings calldata _settings\\n    ) external initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _setupRole(DAO_ROLE, msg.sender);\\n        _setRoleAdmin(LIQUIDATOR_ROLE, DAO_ROLE);\\n        _setRoleAdmin(DAO_ROLE, DAO_ROLE);\\n\\n        _validateRate(_settings.debtInterestApr);\\n        _validateRate(_settings.creditLimitRate);\\n        _validateRate(_settings.liquidationLimitRate);\\n        _validateRate(_settings.cigStakedCreditLimitRate);\\n        _validateRate(_settings.cigStakedLiquidationLimitRate);\\n        _validateRate(_settings.valueIncreaseLockRate);\\n        _validateRate(_settings.organizationFeeRate);\\n        _validateRate(_settings.insurancePurchaseRate);\\n        _validateRate(_settings.insuranceLiquidationPenaltyRate);\\n\\n        require(\\n            _greaterThan(\\n                _settings.liquidationLimitRate,\\n                _settings.creditLimitRate\\n            ),\\n            \\\"invalid_liquidation_limit\\\"\\n        );\\n        require(\\n            _greaterThan(\\n                _settings.cigStakedLiquidationLimitRate,\\n                _settings.cigStakedCreditLimitRate\\n            ),\\n            \\\"invalid_cig_liquidation_limit\\\"\\n        );\\n\\n        require(\\n            _greaterThan(\\n                _settings.cigStakedCreditLimitRate,\\n                _settings.creditLimitRate\\n            ),\\n            \\\"invalid_cig_credit_limit\\\"\\n        );\\n        require(\\n            _greaterThan(\\n                _settings.cigStakedLiquidationLimitRate,\\n                _settings.liquidationLimitRate\\n            ),\\n            \\\"invalid_cig_liquidation_limit\\\"\\n        );\\n\\n        stablecoin = _stablecoin;\\n        ethAggregator = _ethAggregator;\\n        floorOracle = _floorOracle;\\n        cigStaking = _cigStaking;\\n        nftContract = _nftContract;\\n\\n        settings = _settings;\\n\\n        //initializing the categories\\n        for (uint256 i; i < _typeInitializers.length; ++i) {\\n            NFTCategoryInitializer memory initializer = _typeInitializers[i];\\n            nftTypeValueETH[initializer.hash] = initializer.valueETH;\\n            for (uint256 j; j < initializer.nfts.length; j++) {\\n                nftTypes[initializer.nfts[j]] = initializer.hash;\\n            }\\n        }\\n    }\\n\\n    /// @dev The {accrue} function updates the contract's state by calculating\\n    /// the additional interest accrued since the last state update\\n    function accrue() public {\\n        uint256 additionalInterest = _calculateAdditionalInterest();\\n\\n        totalDebtAccruedAt = block.timestamp;\\n\\n        totalDebtAmount += additionalInterest;\\n        totalFeeCollected += additionalInterest;\\n    }\\n\\n    /// @notice Allows the DAO to change the total debt cap\\n    /// @param _borrowAmountCap New total debt cap\\n    function setBorrowAmountCap(uint256 _borrowAmountCap)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        settings.borrowAmountCap = _borrowAmountCap;\\n    }\\n\\n    /// @notice Allows the DAO to change the interest APR on borrows\\n    /// @param _debtInterestApr The new interest rate\\n    function setDebtInterestApr(Rate calldata _debtInterestApr)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_debtInterestApr);\\n\\n        accrue();\\n\\n        settings.debtInterestApr = _debtInterestApr;\\n    }\\n\\n    /// @notice Allows the DAO to change the amount of JPEG needed to increase the value of an NFT relative to the desired value\\n    /// @param _valueIncreaseLockRate The new rate\\n    function setValueIncreaseLockRate(Rate calldata _valueIncreaseLockRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_valueIncreaseLockRate);\\n        settings.valueIncreaseLockRate = _valueIncreaseLockRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the max debt to collateral rate for a position\\n    /// @param _creditLimitRate The new rate\\n    function setCreditLimitRate(Rate calldata _creditLimitRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_creditLimitRate);\\n        require(\\n            _greaterThan(settings.liquidationLimitRate, _creditLimitRate),\\n            \\\"invalid_credit_limit\\\"\\n        );\\n        require(\\n            _greaterThan(settings.cigStakedCreditLimitRate, _creditLimitRate),\\n            \\\"invalid_credit_limit\\\"\\n        );\\n\\n        settings.creditLimitRate = _creditLimitRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the minimum debt to collateral rate for a position to be market as liquidatable\\n    /// @param _liquidationLimitRate The new rate\\n    function setLiquidationLimitRate(Rate calldata _liquidationLimitRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_liquidationLimitRate);\\n        require(\\n            _greaterThan(_liquidationLimitRate, settings.creditLimitRate),\\n            \\\"invalid_liquidation_limit\\\"\\n        );\\n        require(\\n            _greaterThan(\\n                settings.cigStakedLiquidationLimitRate,\\n                _liquidationLimitRate\\n            ),\\n            \\\"invalid_liquidation_limit\\\"\\n        );\\n\\n        settings.liquidationLimitRate = _liquidationLimitRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the minimum debt to collateral rate for a position staking a cig to be market as liquidatable\\n    /// @param _cigLiquidationLimitRate The new rate\\n    function setStakedCigLiquidationLimitRate(\\n        Rate calldata _cigLiquidationLimitRate\\n    ) external onlyRole(DAO_ROLE) {\\n        _validateRate(_cigLiquidationLimitRate);\\n        require(\\n            _greaterThan(\\n                _cigLiquidationLimitRate,\\n                settings.cigStakedCreditLimitRate\\n            ),\\n            \\\"invalid_cig_liquidation_limit\\\"\\n        );\\n        require(\\n            _greaterThan(\\n                _cigLiquidationLimitRate,\\n                settings.liquidationLimitRate\\n            ),\\n            \\\"invalid_cig_liquidation_limit\\\"\\n        );\\n\\n        settings.cigStakedLiquidationLimitRate = _cigLiquidationLimitRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the max debt to collateral rate for a position staking a cig\\n    /// @param _cigCreditLimitRate The new rate\\n    function setStakedCigCreditLimitRate(Rate calldata _cigCreditLimitRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_cigCreditLimitRate);\\n        require(\\n            _greaterThan(\\n                settings.cigStakedLiquidationLimitRate,\\n                _cigCreditLimitRate\\n            ),\\n            \\\"invalid_cig_credit_limit\\\"\\n        );\\n        require(\\n            _greaterThan(_cigCreditLimitRate, settings.creditLimitRate),\\n            \\\"invalid_cig_credit_limit\\\"\\n        );\\n\\n        settings.cigStakedCreditLimitRate = _cigCreditLimitRate;\\n    }\\n    \\n    /// @notice Allows the DAO to set the JPEG oracle\\n    /// @param _aggregator new oracle address\\n    function setJPEGAggregator(IAggregatorV3Interface _aggregator) external onlyRole(DAO_ROLE) {\\n        require(address(_aggregator) != address(0), \\\"invalid_address\\\");\\n        require(address(jpegAggregator) == address(0), \\\"already_set\\\");\\n\\n        jpegAggregator = _aggregator;\\n    }\\n\\n    /// @notice Allows the DAO to change fallback oracle\\n    /// @param _fallback new fallback address\\n    function setFallbackOracle(IAggregatorV3Interface _fallback)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        require(address(_fallback) != address(0), \\\"invalid_address\\\");\\n\\n        fallbackOracle = _fallback;\\n    }\\n\\n    /// @notice Allows the DAO to toggle the fallback oracle\\n    /// @param _useFallback Whether to use the fallback oracle\\n    function toggleFallbackOracle(bool _useFallback)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        require(address(fallbackOracle) != address(0), \\\"fallback_not_set\\\");\\n        useFallbackOracle = _useFallback;\\n    }\\n\\n    /// @notice Allows the DAO to set jpeg locker\\n    /// @param _jpegLocker The jpeg locker address\\n    function setJPEGLocker(IJPEGLock _jpegLocker) external onlyRole(DAO_ROLE) {\\n        require(address(_jpegLocker) != address(0), \\\"invalid_address\\\");\\n        jpegLocker = _jpegLocker;\\n    }\\n\\n    /// @notice Allows the DAO to change the amount of time JPEG tokens need to be locked to change the value of an NFT\\n    /// @param _newLockTime The amount new lock time amount\\n    function setJPEGLockTime(uint256 _newLockTime) external onlyRole(DAO_ROLE) {\\n        require(address(jpegLocker) != address(0), \\\"no_jpeg_locker\\\");\\n        jpegLocker.setLockTime(_newLockTime);\\n    }\\n\\n    /// @notice Allows the DAO to change the amount of time insurance remains valid after liquidation\\n    /// @param _newLimit New time limit \\n    function setInsuranceRepurchaseTimeLimit(uint256 _newLimit) external onlyRole(DAO_ROLE) {\\n        require(_newLimit != 0, \\\"invalid_limit\\\");\\n        settings.insuranceRepurchaseTimeLimit = _newLimit;\\n    }\\n\\n    /// @notice Allows the DAO to bypass the floor oracle and override the NFT floor value\\n    /// @param _newFloor The new floor\\n    function overrideFloor(uint256 _newFloor) external onlyRole(DAO_ROLE) {\\n        require(_newFloor != 0, \\\"invalid_floor\\\");\\n        nftTypeValueETH[bytes32(0)] = _newFloor;\\n        daoFloorOverride = true;\\n    }\\n\\n    /// @notice Allows the DAO to stop overriding floor\\n    function disableFloorOverride() external onlyRole(DAO_ROLE) {\\n        daoFloorOverride = false;\\n    }\\n\\n    /// @notice Allows the DAO to change the static borrow fee\\n    /// @param _organizationFeeRate The new fee rate\\n    function setOrganizationFeeRate(Rate calldata _organizationFeeRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_organizationFeeRate);\\n        settings.organizationFeeRate = _organizationFeeRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the cost of insurance\\n    /// @param _insurancePurchaseRate The new insurance fee rate\\n    function setInsurancePurchaseRate(Rate calldata _insurancePurchaseRate)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        _validateRate(_insurancePurchaseRate);\\n        settings.insurancePurchaseRate = _insurancePurchaseRate;\\n    }\\n\\n    /// @notice Allows the DAO to change the repurchase penalty rate in case of liquidation of an insured NFT\\n    /// @param _insuranceLiquidationPenaltyRate The new rate\\n    function setInsuranceLiquidationPenaltyRate(\\n        Rate calldata _insuranceLiquidationPenaltyRate\\n    ) external onlyRole(DAO_ROLE) {\\n        _validateRate(_insuranceLiquidationPenaltyRate);\\n        settings\\n            .insuranceLiquidationPenaltyRate = _insuranceLiquidationPenaltyRate;\\n    }\\n\\n    /// @notice Allows the DAO to add an NFT to a specific price category\\n    /// @param _nftIndex The index to add to the category\\n    /// @param _type The category hash\\n    function setNFTType(uint256 _nftIndex, bytes32 _type)\\n        external\\n        validNFTIndex(_nftIndex)\\n        onlyRole(DAO_ROLE)\\n    {\\n        require(\\n            _type == bytes32(0) || nftTypeValueETH[_type] != 0,\\n            \\\"invalid_nftType\\\"\\n        );\\n        nftTypes[_nftIndex] = _type;\\n    }\\n\\n    /// @notice Allows the DAO to change the value of an NFT category\\n    /// @param _type The category hash\\n    /// @param _amountETH The new value, in ETH\\n    function setNFTTypeValueETH(bytes32 _type, uint256 _amountETH)\\n        external\\n        onlyRole(DAO_ROLE)\\n    {\\n        nftTypeValueETH[_type] = _amountETH;\\n    }\\n\\n    /// @notice Allows the DAO to set the value in ETH of the NFT at index `_nftIndex`.\\n    /// A JPEG deposit by a user is required afterwards. See {finalizePendingNFTValueETH} for more details\\n    /// @param _nftIndex The index of the NFT to change the value of\\n    /// @param _amountETH The new desired ETH value\\n    function setPendingNFTValueETH(uint256 _nftIndex, uint256 _amountETH)\\n        external\\n        validNFTIndex(_nftIndex)\\n        onlyRole(DAO_ROLE)\\n    {\\n        require(address(jpegLocker) != address(0), \\\"no_jpeg_locker\\\");\\n        \\n        pendingNFTValueETH[_nftIndex] = _amountETH;\\n    }\\n\\n    /// @notice Allows a user to lock up JPEG to make the change in value of an NFT effective.\\n    /// Can only be called after {setPendingNFTValueETH}, which requires a governance vote.\\n    /// @dev The amount of JPEG that needs to be locked is calculated by applying `valueIncreaseLockRate`\\n    /// to the new credit limit of the NFT\\n    /// @param _nftIndex The index of the NFT\\n    function finalizePendingNFTValueETH(uint256 _nftIndex)\\n        external\\n        validNFTIndex(_nftIndex)\\n    {\\n        require(address(jpegLocker) != address(0), \\\"no_jpeg_locker\\\");\\n\\n        uint256 pendingValue = pendingNFTValueETH[_nftIndex];\\n        require(pendingValue != 0, \\\"no_pending_value\\\");\\n        uint256 toLockJpeg = (((pendingValue *\\n            1 ether *\\n            settings.creditLimitRate.numerator) /\\n            settings.creditLimitRate.denominator) *\\n            settings.valueIncreaseLockRate.numerator) /\\n            settings.valueIncreaseLockRate.denominator /\\n            _jpegPriceETH();\\n\\n        //lock JPEG using JPEGLock\\n        jpegLocker.lockFor(msg.sender, _nftIndex, toLockJpeg);\\n\\n        nftTypes[_nftIndex] = CUSTOM_NFT_HASH;\\n        nftValueETH[_nftIndex] = pendingValue;\\n        //clear pending value\\n        pendingNFTValueETH[_nftIndex] = 0;\\n    }\\n\\n    /// @dev Checks if `r1` is greater than `r2`.\\n    function _greaterThan(Rate memory _r1, Rate memory _r2)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            _r1.numerator * _r2.denominator > _r2.numerator * _r1.denominator;\\n    }\\n\\n    /// @dev Validates a rate. The denominator must be greater than zero and greater than or equal to the numerator.\\n    /// @param rate The rate to validate\\n    function _validateRate(Rate calldata rate) internal pure {\\n        require(\\n            rate.denominator != 0 && rate.denominator >= rate.numerator,\\n            \\\"invalid_rate\\\"\\n        );\\n    }\\n\\n    /// @dev Returns the value in ETH of the NFT at index `_nftIndex`\\n    /// @param _nftIndex The NFT to return the value of\\n    /// @return The value of the NFT, 18 decimals\\n    function _getNFTValueETH(uint256 _nftIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        bytes32 nftType = nftTypes[_nftIndex];\\n\\n        if (nftType == bytes32(0) && !daoFloorOverride) {\\n            return\\n                _normalizeAggregatorAnswer(\\n                    useFallbackOracle ? fallbackOracle : floorOracle\\n                );\\n        } else if (nftType == CUSTOM_NFT_HASH) return nftValueETH[_nftIndex];\\n\\n        return nftTypeValueETH[nftType];\\n    }\\n\\n    /// @dev Returns the value in USD of the NFT at index `_nftIndex`\\n    /// @param _nftIndex The NFT to return the value of\\n    /// @return The value of the NFT in USD, 18 decimals\\n    function _getNFTValueUSD(uint256 _nftIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 nft_value = _getNFTValueETH(_nftIndex);\\n        return (nft_value * _ethPriceUSD()) / 1 ether;\\n    }\\n\\n    /// @dev Returns the current ETH price in USD\\n    /// @return The current ETH price, 18 decimals\\n    function _ethPriceUSD() internal view returns (uint256) {\\n        return _normalizeAggregatorAnswer(ethAggregator);\\n    }\\n\\n    /// @dev Returns the current JPEG price in ETH\\n    /// @return The current JPEG price, 18 decimals\\n    function _jpegPriceETH() internal view returns (uint256) {\\n        IAggregatorV3Interface aggregator = jpegAggregator;\\n\\n        require(address(aggregator) != address(0), \\\"jpeg_oracle_not_set\\\");\\n        return _normalizeAggregatorAnswer(aggregator);\\n    }\\n\\n    /// @dev Fetches and converts to 18 decimals precision the latest answer of a Chainlink aggregator\\n    /// @param aggregator The aggregator to fetch the answer from\\n    /// @return The latest aggregator answer, normalized\\n    function _normalizeAggregatorAnswer(IAggregatorV3Interface aggregator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , uint256 timestamp, ) = aggregator.latestRoundData();\\n\\n        require(answer > 0, \\\"invalid_oracle_answer\\\");\\n        require(timestamp != 0, \\\"round_incomplete\\\");\\n\\n        uint8 decimals = aggregator.decimals();\\n\\n        unchecked {\\n            //converts the answer to have 18 decimals\\n            return\\n                decimals > 18\\n                    ? uint256(answer) / 10**(decimals - 18)\\n                    : uint256(answer) * 10**(18 - decimals);\\n        }\\n    }\\n\\n    struct NFTInfo {\\n        uint256 index;\\n        bytes32 nftType;\\n        address owner;\\n        uint256 nftValueETH;\\n        uint256 nftValueUSD;\\n    }\\n\\n    /// @notice Returns data relative to the NFT at index `_nftIndex`\\n    /// @param _nftIndex The NFT index\\n    /// @return nftInfo The data relative to the NFT\\n    function getNFTInfo(uint256 _nftIndex)\\n        external\\n        view\\n        returns (NFTInfo memory nftInfo)\\n    {\\n        nftInfo = NFTInfo(\\n            _nftIndex,\\n            nftTypes[_nftIndex],\\n            nftContract.ownerOf(_nftIndex),\\n            _getNFTValueETH(_nftIndex),\\n            _getNFTValueUSD(_nftIndex)\\n        );\\n    }\\n\\n    /// @dev Returns the credit limit of an NFT\\n    /// @param _nftIndex The NFT to return credit limit of\\n    /// @return The NFT credit limit\\n    function _getCreditLimit(address user, uint256 _nftIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value = _getNFTValueUSD(_nftIndex);\\n        if (cigStaking.isUserStaking(user)) {\\n            return\\n                (value * settings.cigStakedCreditLimitRate.numerator) /\\n                settings.cigStakedCreditLimitRate.denominator;\\n        }\\n        return\\n            (value * settings.creditLimitRate.numerator) /\\n            settings.creditLimitRate.denominator;\\n    }\\n\\n    /// @dev Returns the minimum amount of debt necessary to liquidate an NFT\\n    /// @param _nftIndex The index of the NFT\\n    /// @return The minimum amount of debt to liquidate the NFT\\n    function _getLiquidationLimit(address user, uint256 _nftIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 value = _getNFTValueUSD(_nftIndex);\\n        if (cigStaking.isUserStaking(user)) {\\n            return\\n                (value * settings.cigStakedLiquidationLimitRate.numerator) /\\n                settings.cigStakedLiquidationLimitRate.denominator;\\n        }\\n        return\\n            (value * settings.liquidationLimitRate.numerator) /\\n            settings.liquidationLimitRate.denominator;\\n    }\\n\\n    /// @dev Calculates current outstanding debt of an NFT\\n    /// @param _nftIndex The NFT to calculate the outstanding debt of\\n    /// @return The outstanding debt value\\n    function _getDebtAmount(uint256 _nftIndex) internal view returns (uint256) {\\n        uint256 calculatedDebt = _calculateDebt(\\n            totalDebtAmount,\\n            positions[_nftIndex].debtPortion,\\n            totalDebtPortion\\n        );\\n\\n        uint256 principal = positions[_nftIndex].debtPrincipal;\\n\\n        //_calculateDebt is prone to rounding errors that may cause\\n        //the calculated debt amount to be 1 or 2 units less than\\n        //the debt principal when the accrue() function isn't called\\n        //in between the first borrow and the _calculateDebt call.\\n        return principal > calculatedDebt ? principal : calculatedDebt;\\n    }\\n\\n    /// @dev Calculates the total debt of a position given the global debt, the user's portion of the debt and the total user portions\\n    /// @param total The global outstanding debt\\n    /// @param userPortion The user's portion of debt\\n    /// @param totalPortion The total user portions of debt\\n    /// @return The outstanding debt of the position\\n    function _calculateDebt(\\n        uint256 total,\\n        uint256 userPortion,\\n        uint256 totalPortion\\n    ) internal pure returns (uint256) {\\n        return totalPortion == 0 ? 0 : (total * userPortion) / totalPortion;\\n    }\\n\\n    /// @dev Opens a position\\n    /// Emits a {PositionOpened} event\\n    /// @param _owner The owner of the position to open\\n    /// @param _nftIndex The NFT used as collateral for the position\\n    function _openPosition(address _owner, uint256 _nftIndex) internal {\\n        positionOwner[_nftIndex] = _owner;\\n        positionIndexes.add(_nftIndex);\\n\\n        nftContract.transferFrom(_owner, address(this), _nftIndex);\\n\\n        emit PositionOpened(_owner, _nftIndex);\\n    }\\n\\n    /// @dev Calculates the additional global interest since last time the contract's state was updated by calling {accrue}\\n    /// @return The additional interest value\\n    function _calculateAdditionalInterest() internal view returns (uint256) {\\n        // Number of seconds since {accrue} was called\\n        uint256 elapsedTime = block.timestamp - totalDebtAccruedAt;\\n        if (elapsedTime == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalDebt = totalDebtAmount;\\n        if (totalDebt == 0) {\\n            return 0;\\n        }\\n\\n        // Accrue interest\\n        return\\n            (elapsedTime * totalDebt * settings.debtInterestApr.numerator) /\\n            settings.debtInterestApr.denominator /\\n            365 days;\\n    }\\n\\n    /// @notice Returns the number of open positions\\n    /// @return The number of open positions\\n    function totalPositions() external view returns (uint256) {\\n        return positionIndexes.length();\\n    }\\n\\n    /// @notice Returns all open position NFT indexes\\n    /// @return The open position NFT indexes\\n    function openPositionsIndexes() external view returns (uint256[] memory) {\\n        return positionIndexes.values();\\n    }\\n\\n    struct PositionPreview {\\n        address owner;\\n        uint256 nftIndex;\\n        bytes32 nftType;\\n        uint256 nftValueUSD;\\n        VaultSettings vaultSettings;\\n        uint256 creditLimit;\\n        uint256 debtPrincipal;\\n        uint256 debtInterest;\\n        uint256 liquidatedAt;\\n        BorrowType borrowType;\\n        bool liquidatable;\\n        address liquidator;\\n    }\\n\\n    /// @notice Returns data relative to a postition, existing or not\\n    /// @param _nftIndex The index of the NFT used as collateral for the position\\n    /// @return preview See assignment below\\n    function showPosition(uint256 _nftIndex)\\n        external\\n        view\\n        validNFTIndex(_nftIndex)\\n        returns (PositionPreview memory preview)\\n    {\\n        address posOwner = positionOwner[_nftIndex];\\n\\n        Position storage position = positions[_nftIndex];\\n        uint256 debtPrincipal = position.debtPrincipal;\\n        uint256 liquidatedAt = position.liquidatedAt;\\n        uint256 debtAmount = liquidatedAt != 0\\n            ? position.debtAmountForRepurchase //calculate updated debt\\n            : _calculateDebt(\\n                totalDebtAmount + _calculateAdditionalInterest(),\\n                position.debtPortion,\\n                totalDebtPortion\\n            );\\n\\n        //_calculateDebt is prone to rounding errors that may cause\\n        //the calculated debt amount to be 1 or 2 units less than\\n        //the debt principal if no time has elapsed in between the first borrow\\n        //and the _calculateDebt call.\\n        if (debtPrincipal > debtAmount) debtAmount = debtPrincipal;\\n\\n        unchecked {\\n            preview = PositionPreview({\\n                owner: posOwner, //the owner of the position, `address(0)` if the position doesn't exists\\n                nftIndex: _nftIndex, //the NFT used as collateral for the position\\n                nftType: nftTypes[_nftIndex], //the type of the NFT\\n                nftValueUSD: _getNFTValueUSD(_nftIndex), //the value in USD of the NFT\\n                vaultSettings: settings, //the current vault's settings\\n                creditLimit: _getCreditLimit(posOwner, _nftIndex), //the NFT's credit limit\\n                debtPrincipal: debtPrincipal, //the debt principal for the position, `0` if the position doesn't exists\\n                debtInterest: debtAmount - debtPrincipal, //the interest of the position\\n                borrowType: position.borrowType, //the insurance type of the position, `NOT_CONFIRMED` if it doesn't exist\\n                liquidatable: liquidatedAt == 0 &&\\n                    debtAmount >= _getLiquidationLimit(posOwner, _nftIndex), //if the position can be liquidated\\n                liquidatedAt: liquidatedAt, //if the position has been liquidated and it had insurance, the timestamp at which the liquidation happened\\n                liquidator: position.liquidator //if the position has been liquidated and it had insurance, the address of the liquidator\\n            });\\n        }\\n    }\\n\\n    /// @notice Allows users to open positions and borrow using an NFT\\n    /// @dev emits a {Borrowed} event\\n    /// @param _nftIndex The index of the NFT to be used as collateral\\n    /// @param _amount The amount of PUSD to be borrowed. Note that the user will receive less than the amount requested,\\n    /// the borrow fee and insurance automatically get removed from the amount borrowed\\n    /// @param _useInsurance Whereter to open an insured position. In case the position has already been opened previously,\\n    /// this parameter needs to match the previous insurance mode. To change insurance mode, a user needs to close and reopen the position\\n    function borrow(\\n        uint256 _nftIndex,\\n        uint256 _amount,\\n        bool _useInsurance\\n    ) external validNFTIndex(_nftIndex) nonReentrant {\\n        accrue();\\n\\n        require(\\n            msg.sender == positionOwner[_nftIndex] ||\\n                address(0) == positionOwner[_nftIndex],\\n            \\\"unauthorized\\\"\\n        );\\n        require(_amount != 0, \\\"invalid_amount\\\");\\n        require(\\n            totalDebtAmount + _amount <= settings.borrowAmountCap,\\n            \\\"debt_cap\\\"\\n        );\\n\\n        Position storage position = positions[_nftIndex];\\n        require(position.liquidatedAt == 0, \\\"liquidated\\\");\\n        require(\\n            position.borrowType == BorrowType.NOT_CONFIRMED ||\\n                (position.borrowType == BorrowType.USE_INSURANCE &&\\n                    _useInsurance) ||\\n                (position.borrowType == BorrowType.NON_INSURANCE &&\\n                    !_useInsurance),\\n            \\\"invalid_insurance_mode\\\"\\n        );\\n\\n        uint256 creditLimit = _getCreditLimit(msg.sender, _nftIndex);\\n        uint256 debtAmount = _getDebtAmount(_nftIndex);\\n        require(debtAmount + _amount <= creditLimit, \\\"insufficient_credit\\\");\\n\\n        //calculate the borrow fee\\n        uint256 organizationFee = (_amount *\\n            settings.organizationFeeRate.numerator) /\\n            settings.organizationFeeRate.denominator;\\n\\n        uint256 feeAmount = organizationFee;\\n        //if the position is insured, calculate the insurance fee\\n        if (position.borrowType == BorrowType.USE_INSURANCE || _useInsurance) {\\n            feeAmount +=\\n                (_amount * settings.insurancePurchaseRate.numerator) /\\n                settings.insurancePurchaseRate.denominator;\\n        }\\n        totalFeeCollected += feeAmount;\\n\\n        if (position.borrowType == BorrowType.NOT_CONFIRMED) {\\n            position.borrowType = _useInsurance\\n                ? BorrowType.USE_INSURANCE\\n                : BorrowType.NON_INSURANCE;\\n        }\\n\\n        uint256 debtPortion = totalDebtPortion;\\n        // update debt portion\\n        if (debtPortion == 0) {\\n            totalDebtPortion = _amount;\\n            position.debtPortion = _amount;\\n        } else {\\n            uint256 plusPortion = (debtPortion * _amount) / totalDebtAmount;\\n            totalDebtPortion = debtPortion + plusPortion;\\n            position.debtPortion += plusPortion;\\n        }\\n        position.debtPrincipal += _amount;\\n        totalDebtAmount += _amount;\\n\\n        if (positionOwner[_nftIndex] == address(0)) {\\n            _openPosition(msg.sender, _nftIndex);\\n        }\\n\\n        //subtract the fee from the amount borrowed\\n        stablecoin.mint(msg.sender, _amount - feeAmount);\\n\\n        emit Borrowed(msg.sender, _nftIndex, _amount);\\n    }\\n\\n    /// @notice Allows users to repay a portion/all of their debt. Note that since interest increases every second,\\n    /// a user wanting to repay all of their debt should repay for an amount greater than their current debt to account for the\\n    /// additional interest while the repay transaction is pending, the contract will only take what's necessary to repay all the debt\\n    /// @dev Emits a {Repaid} event\\n    /// @param _nftIndex The NFT used as collateral for the position\\n    /// @param _amount The amount of debt to repay. If greater than the position's outstanding debt, only the amount necessary to repay all the debt will be taken\\n    function repay(uint256 _nftIndex, uint256 _amount)\\n        external\\n        validNFTIndex(_nftIndex)\\n        nonReentrant\\n    {\\n        accrue();\\n\\n        require(msg.sender == positionOwner[_nftIndex], \\\"unauthorized\\\");\\n        require(_amount != 0, \\\"invalid_amount\\\");\\n\\n        Position storage position = positions[_nftIndex];\\n        require(position.liquidatedAt == 0, \\\"liquidated\\\");\\n\\n        uint256 debtAmount = _getDebtAmount(_nftIndex);\\n        require(debtAmount != 0, \\\"position_not_borrowed\\\");\\n\\n        uint256 debtPrincipal = position.debtPrincipal;\\n        uint256 debtInterest = debtAmount - debtPrincipal;\\n\\n        _amount = _amount > debtAmount ? debtAmount : _amount;\\n\\n        // burn all payment, the interest is sent to the DAO using the {collect} function\\n        stablecoin.burnFrom(msg.sender, _amount);\\n\\n        uint256 paidPrincipal;\\n\\n        unchecked {\\n            paidPrincipal = _amount > debtInterest ? _amount - debtInterest : 0;\\n        }\\n\\n        uint256 totalPortion = totalDebtPortion;\\n        uint256 totalDebt = totalDebtAmount;\\n        uint256 minusPortion = paidPrincipal == debtPrincipal\\n            ? position.debtPortion\\n            : (totalPortion * _amount) / totalDebt;\\n\\n        totalDebtPortion = totalPortion - minusPortion;\\n        position.debtPortion -= minusPortion;\\n        position.debtPrincipal -= paidPrincipal;\\n        totalDebtAmount = totalDebt - _amount;\\n\\n        emit Repaid(msg.sender, _nftIndex, _amount);\\n    }\\n\\n    /// @notice Allows a user to close a position and get their collateral back, if the position's outstanding debt is 0\\n    /// @dev Emits a {PositionClosed} event\\n    /// @param _nftIndex The index of the NFT used as collateral\\n    function closePosition(uint256 _nftIndex)\\n        external\\n        validNFTIndex(_nftIndex)\\n        nonReentrant\\n    {\\n        accrue();\\n\\n        require(msg.sender == positionOwner[_nftIndex], \\\"unauthorized\\\");\\n        require(positions[_nftIndex].liquidatedAt == 0, \\\"liquidated\\\");\\n        require(_getDebtAmount(_nftIndex) == 0, \\\"position_not_repaid\\\");\\n\\n        positionOwner[_nftIndex] = address(0);\\n        delete positions[_nftIndex];\\n        positionIndexes.remove(_nftIndex);\\n\\n        // transfer nft back to owner if nft was deposited\\n        if (nftContract.ownerOf(_nftIndex) == address(this)) {\\n            nftContract.safeTransferFrom(address(this), msg.sender, _nftIndex);\\n        }\\n\\n        emit PositionClosed(msg.sender, _nftIndex);\\n    }\\n\\n    /// @notice Allows members of the `LIQUIDATOR_ROLE` to liquidate a position. Positions can only be liquidated\\n    /// once their debt amount exceeds the minimum liquidation debt to collateral value rate.\\n    /// In order to liquidate a position, the liquidator needs to repay the user's outstanding debt.\\n    /// If the position is not insured, it's closed immediately and the collateral is sent to the liquidator.\\n    /// If the position is insured, the position remains open (interest doesn't increase) and the owner of the position has a certain amount of time\\n    /// (`insuranceRepurchaseTimeLimit`) to fully repay the liquidator and pay an additional liquidation fee (`insuranceLiquidationPenaltyRate`), if this\\n    /// is done in time the user gets back their collateral and their position is automatically closed. If the user doesn't repurchase their collateral\\n    /// before the time limit passes, the liquidator can claim the liquidated NFT and the position is closed\\n    /// @dev Emits a {Liquidated} event\\n    /// @param _nftIndex The NFT to liquidate\\n    function liquidate(uint256 _nftIndex)\\n        external\\n        onlyRole(LIQUIDATOR_ROLE)\\n        validNFTIndex(_nftIndex)\\n        nonReentrant\\n    {\\n        accrue();\\n\\n        address posOwner = positionOwner[_nftIndex];\\n        require(posOwner != address(0), \\\"position_not_exist\\\");\\n\\n        Position storage position = positions[_nftIndex];\\n        require(position.liquidatedAt == 0, \\\"liquidated\\\");\\n\\n        uint256 debtAmount = _getDebtAmount(_nftIndex);\\n        require(\\n            debtAmount >= _getLiquidationLimit(posOwner, _nftIndex),\\n            \\\"position_not_liquidatable\\\"\\n        );\\n\\n        // burn all payment\\n        stablecoin.burnFrom(msg.sender, debtAmount);\\n\\n        // update debt portion\\n        totalDebtPortion -= position.debtPortion;\\n        totalDebtAmount -= debtAmount;\\n        position.debtPortion = 0;\\n\\n        bool insured = position.borrowType == BorrowType.USE_INSURANCE;\\n        if (insured) {\\n            position.debtAmountForRepurchase = debtAmount;\\n            position.liquidatedAt = block.timestamp;\\n            position.liquidator = msg.sender;\\n        } else {\\n            // transfer nft to liquidator\\n            positionOwner[_nftIndex] = address(0);\\n            delete positions[_nftIndex];\\n            positionIndexes.remove(_nftIndex);\\n            nftContract.safeTransferFrom(address(this), msg.sender, _nftIndex);\\n        }\\n\\n        emit Liquidated(msg.sender, posOwner, _nftIndex, insured);\\n    }\\n\\n    /// @notice Allows liquidated users who purchased insurance to repurchase their collateral within the time limit\\n    /// defined with the `insuranceRepurchaseTimeLimit`. The user needs to pay the liquidator the total amount of debt\\n    /// the position had at the time of liquidation, plus an insurance liquidation fee defined with `insuranceLiquidationPenaltyRate`\\n    /// @dev Emits a {Repurchased} event\\n    /// @param _nftIndex The NFT to repurchase\\n    function repurchase(uint256 _nftIndex)\\n        external\\n        validNFTIndex(_nftIndex)\\n        nonReentrant\\n    {\\n        Position memory position = positions[_nftIndex];\\n        require(msg.sender == positionOwner[_nftIndex], \\\"unauthorized\\\");\\n        require(position.liquidatedAt != 0, \\\"not_liquidated\\\");\\n        require(\\n            position.borrowType == BorrowType.USE_INSURANCE,\\n            \\\"non_insurance\\\"\\n        );\\n        require(\\n            position.liquidatedAt + settings.insuranceRepurchaseTimeLimit >=\\n                block.timestamp,\\n            \\\"insurance_expired\\\"\\n        );\\n\\n        uint256 debtAmount = position.debtAmountForRepurchase;\\n        uint256 penalty = (debtAmount *\\n            settings.insuranceLiquidationPenaltyRate.numerator) /\\n            settings.insuranceLiquidationPenaltyRate.denominator;\\n\\n        // transfer nft to user\\n        positionOwner[_nftIndex] = address(0);\\n        delete positions[_nftIndex];\\n        positionIndexes.remove(_nftIndex);\\n\\n        // transfer payment to liquidator\\n        stablecoin.safeTransferFrom(\\n            msg.sender,\\n            position.liquidator,\\n            debtAmount + penalty\\n        );\\n\\n        nftContract.safeTransferFrom(address(this), msg.sender, _nftIndex);\\n\\n        emit Repurchased(msg.sender, _nftIndex);\\n    }\\n\\n    /// @notice Allows the liquidator who liquidated the insured position with NFT at index `_nftIndex` to claim the position's collateral\\n    /// after the time period defined with `insuranceRepurchaseTimeLimit` has expired and the position owner has not repurchased the collateral.\\n    /// @dev Emits an {InsuranceExpired} event\\n    /// @param _nftIndex The NFT to claim\\n    function claimExpiredInsuranceNFT(uint256 _nftIndex)\\n        external\\n        validNFTIndex(_nftIndex)\\n        nonReentrant\\n    {\\n        Position memory position = positions[_nftIndex];\\n        address owner = positionOwner[_nftIndex];\\n        require(address(0) != owner, \\\"no_position\\\");\\n        require(position.liquidatedAt != 0, \\\"not_liquidated\\\");\\n        require(\\n            position.liquidatedAt + settings.insuranceRepurchaseTimeLimit <\\n                block.timestamp,\\n            \\\"insurance_not_expired\\\"\\n        );\\n        require(position.liquidator == msg.sender, \\\"unauthorized\\\");\\n\\n        positionOwner[_nftIndex] = address(0);\\n        delete positions[_nftIndex];\\n        positionIndexes.remove(_nftIndex);\\n\\n        nftContract.safeTransferFrom(address(this), msg.sender, _nftIndex);\\n\\n        emit InsuranceExpired(owner, _nftIndex);\\n    }\\n\\n    /// @notice Allows the DAO to collect interest and fees before they are repaid\\n    function collect() external nonReentrant onlyRole(DAO_ROLE) {\\n        accrue();\\n        stablecoin.mint(msg.sender, totalFeeCollected);\\n        totalFeeCollected = 0;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IAggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IStableCoin is IERC20Upgradeable {\\n    function mint(address _to, uint256 _value) external;\\n\\n    function burn(uint256 _value) external;\\n\\n    function burnFrom(address _from, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJPEGLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IJPEGLock {\\n    function lockFor(\\n        address _account,\\n        uint256 _punkIndex,\\n        uint256 _lockAmount\\n    ) external;\\n\\n    function setLockTime(uint256 lockTime) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJPEGCardsCigStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IJPEGCardsCigStaking {\\n    function isUserStaking(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 900\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InsuranceExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"insured\",\"type\":\"bool\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Repurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CUSTOM_NFT_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useInsurance\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cigStaking\",\"outputs\":[{\"internalType\":\"contract IJPEGCardsCigStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"claimExpiredInsuranceNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFloorOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFloorOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAggregator\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackOracle\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"finalizePendingNFTValueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorOracle\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"getNFTInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nftType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftValueETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftValueUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTVault.NFTInfo\",\"name\":\"nftInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStableCoin\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"_ethAggregator\",\"type\":\"address\"},{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"_floorOracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"valueETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nfts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct NFTVault.NFTCategoryInitializer[]\",\"name\":\"_typeInitializers\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJPEGCardsCigStaking\",\"name\":\"_cigStaking\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"debtInterestApr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"creditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"liquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedCreditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedLiquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"valueIncreaseLockRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"organizationFeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insurancePurchaseRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insuranceLiquidationPenaltyRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"insuranceRepurchaseTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountCap\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTVault.VaultSettings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jpegAggregator\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jpegLocker\",\"outputs\":[{\"internalType\":\"contract IJPEGLock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nftTypeValueETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTypes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftValueETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionsIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFloor\",\"type\":\"uint256\"}],\"name\":\"overrideFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNFTValueETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"repurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmountCap\",\"type\":\"uint256\"}],\"name\":\"setBorrowAmountCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_creditLimitRate\",\"type\":\"tuple\"}],\"name\":\"setCreditLimitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_debtInterestApr\",\"type\":\"tuple\"}],\"name\":\"setDebtInterestApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"setFallbackOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_insuranceLiquidationPenaltyRate\",\"type\":\"tuple\"}],\"name\":\"setInsuranceLiquidationPenaltyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_insurancePurchaseRate\",\"type\":\"tuple\"}],\"name\":\"setInsurancePurchaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setInsuranceRepurchaseTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setJPEGAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockTime\",\"type\":\"uint256\"}],\"name\":\"setJPEGLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJPEGLock\",\"name\":\"_jpegLocker\",\"type\":\"address\"}],\"name\":\"setJPEGLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_liquidationLimitRate\",\"type\":\"tuple\"}],\"name\":\"setLiquidationLimitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"}],\"name\":\"setNFTType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_type\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"setNFTTypeValueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_organizationFeeRate\",\"type\":\"tuple\"}],\"name\":\"setOrganizationFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"setPendingNFTValueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_cigCreditLimitRate\",\"type\":\"tuple\"}],\"name\":\"setStakedCigCreditLimitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_cigLiquidationLimitRate\",\"type\":\"tuple\"}],\"name\":\"setStakedCigLiquidationLimitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"_valueIncreaseLockRate\",\"type\":\"tuple\"}],\"name\":\"setValueIncreaseLockRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"debtInterestApr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"creditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"liquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedCreditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedLiquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"valueIncreaseLockRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"organizationFeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insurancePurchaseRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insuranceLiquidationPenaltyRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"insuranceRepurchaseTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"showPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nftType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nftValueUSD\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"debtInterestApr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"creditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"liquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedCreditLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"cigStakedLiquidationLimitRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"valueIncreaseLockRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"organizationFeeRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insurancePurchaseRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"internalType\":\"struct NFTVault.Rate\",\"name\":\"insuranceLiquidationPenaltyRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"insuranceRepurchaseTimeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountCap\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTVault.VaultSettings\",\"name\":\"vaultSettings\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedAt\",\"type\":\"uint256\"},{\"internalType\":\"enum NFTVault.BorrowType\",\"name\":\"borrowType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"internalType\":\"struct NFTVault.PositionPreview\",\"name\":\"preview\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IStableCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useFallback\",\"type\":\"bool\"}],\"name\":\"toggleFallbackOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useFallbackOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTVault", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "900", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}