{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IERC777 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function granularity() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function send(address recipient, uint256 amount, bytes memory data) external;\r\n    function burn(uint256 amount, bytes memory data) external;\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n    function authorizeOperator(address operator) external;\r\n    function revokeOperator(address operator) external;\r\n    function defaultOperators() external view returns (address[] memory);\r\n    function operatorSend(address sender, address recipient, uint256 amount, bytes memory data, bytes memory operatorData) external;\r\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) external;\r\n    event Sent( address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface ILockable {\r\n    function lock(address to, uint256 amount, bytes32 hash) external;\r\n    function operatorLock(address from, address to, uint256 amount, bytes32 hash, bytes memory data, bytes memory operatorData) external;\r\n    function unlock(string memory unlockerPhrase) external;\r\n    function operatorUnlock(address to, string memory unlockerPhrase, bytes memory data, bytes memory operatorData) external;\r\n    function reclaim(address to, string memory unlockerPhrase) external;\r\n    function operatorReclaim(address from, address to, string memory unlockerPhrase, bytes memory data, bytes memory operatorData) external;\r\n    function unlockByLockedCoinContract(address to, bytes32 hash) external;\r\n    function reclaimByLockedCoinContract(address from, address to, bytes32 hash) external;\r\n    function lockedSupply() external view returns (uint256 locked_supply);\r\n    function lockedAmount(address from, bytes32 hash) external view returns (uint256 amount);\r\n    function lockedBalanceOf(address account) external view returns (uint256);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IPigeonFactory {\r\n    function createCryptoPigeon(address to) external returns (ICryptoPigeon pigeonAddress);    \r\n    function iAmFactory() external pure returns (bool);\r\n    function amIEpigeon() external returns (bool);\r\n    function factoryId() external view returns (uint256 id);\r\n    function getMetaDataForPigeon(address pigeon) external view returns (string memory metadata);\r\n    function mintingPrice() external view returns (uint256 price);\r\n    function totalSupply() external view returns (uint256 supply);\r\n    function maxSupply() external view returns (uint256 supply);\r\n    function getFactoryTokenPrice(address ERC20Token) external view returns (uint256 price);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface ICryptoPigeon {\r\n    function burnPigeon() external;    \r\n    function iAmPigeon() external pure returns (bool); \r\n    function transferPigeon(address newOwner) external; \r\n    function hasFlown() external view returns (bool);\r\n    function toAddress() external view returns (address addressee);   \r\n    function owner() external view returns (address ownerAddress);\r\n    function manager() external view returns (address managerAddress);\r\n    function factoryId() external view returns (uint256 id);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IEpigeon {\r\n    function pigeonDestinations() external view returns (IPigeonDestinationDirectory destinations);\r\n    function nameAndKeyDirectory() external view returns (INameAndPublicKeyDirectory directory);\r\n    function getLastFactoryId() external view returns (uint256 id);\r\n    function getFactoryAddresstoId(uint256 id) external view returns (address factoryAddress);\r\n    function getPigeonPriceForFactory(uint256 factoryId) external view returns (uint256 price);\r\n    function getPigeonTokenPriceForFactory(address ERC20Token, uint256 factoryId) external view returns (uint256 price);\r\n    function createCryptoPigeonNFT(address to, uint256 factoryId) external returns (address pigeonaddress);\r\n    function transferPigeon(address from, address to, address pigeon) external;\r\n    function burnPigeon(address pigeon) external;\r\n    function nftContractAddress() external view returns (address nftContract);\r\n    function validPigeon(address pigeon, address pigeonOwner) external view returns (bool);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IEpigeonNFT {\r\n    function isTokenizedPigeon(address pigeon) external view returns (bool);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface INameAndPublicKeyDirectory {\r\n    function getPublicKeyForAddress (address owner) external view returns (string memory key); \r\n    function getUserNameForAddress (address owner) external view returns (string memory name);\r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IPigeonDestinationDirectory{\r\n    function changeToAddress(address newToAddress, address oldToAddress) external;\r\n    function setToAddress(address newToAddress) external;\r\n    function deleteToAddress(address oldToAddress) external;\r\n    function deleteToAddressByEpigeon(address pigeon) external;\r\n    function pigeonsSentToAddressLenght(address toAddress) external view returns (uint256 length);\r\n    function pigeonSentToAddressByIndex(address toAddress, uint index) external view returns (address pigeonAddress);   \r\n}\r\n//----------------------------------------------------------------------------------------------------\r\ninterface IPigeonManagerDirectory{\r\n    function changeManager(address newManager, address oldManager) external;\r\n    function deleteManager(address oldManager) external;\r\n    function setManager(address newManager) external;\r\n    function pigeonsOfManagerLenght(address toAddress) external view returns (uint256 length);\r\n    function pigeonOfManagerByIndex(address toAddress, uint index) external view returns (address pigeonAddress);   \r\n}\r\n//----------------------------------------------------------------------------------------------------\r\n\r\n\r\npragma solidity ^0.8.12;\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------\r\ncontract SimplePigeonFactory is IPigeonFactory{\r\n\r\n    address public _owner;\r\n    uint256 private _factoryId = 1;\r\n    uint256 private _mintingPrice;\r\n    uint256 private _maxSupply;\r\n    uint256 private _totalSupply;\r\n    address public epigeon;\r\n    string private _metadata = \"https://www.epigeon.org/Meta/SimplePigeonMetadata.json\";\r\n    mapping (address => uint256) internal ApprovedTokenPrice;\r\n    \r\n    event PigeonCreated(ICryptoPigeon pigeon);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    function factoryId() external view returns (uint256 id){return _factoryId;}\r\n    function mintingPrice() external view returns (uint256 price){return _mintingPrice;}\r\n    function totalSupply() external view returns (uint256 supply){return _totalSupply;}\r\n    function maxSupply() external view returns (uint256 supply){return _maxSupply;}\r\n\r\n    constructor (address epigeonAddress, uint256 price){\r\n        _owner = msg.sender;\r\n        epigeon = epigeonAddress;\r\n        _mintingPrice = price;\r\n        _maxSupply = 500;\r\n    }\r\n    \r\n    function amIEpigeon() public view returns (bool ami){\r\n        return epigeon == msg.sender;\r\n    }\r\n    \r\n    function createCryptoPigeon(address to) public returns (ICryptoPigeon pigeonaddress) {\r\n        require(epigeon == msg.sender);\r\n        require(_totalSupply < _maxSupply);\r\n        \r\n        ICryptoPigeon pigeon = new SimpleCryptoPigeon(to, msg.sender, _factoryId);\r\n        _totalSupply += 1;\r\n        emit PigeonCreated(pigeon);\r\n        return pigeon;\r\n    }\r\n    \r\n    function getFactoryTokenPrice(address ERC20Token) public view returns (uint256 price){\r\n        return ApprovedTokenPrice[ERC20Token];\r\n    }\r\n    \r\n    function getMetaDataForPigeon(address pigeon) public view returns (string memory metadata){\r\n        if (pigeon == address(0)){\r\n            return _metadata;\r\n        }\r\n        else{\r\n            return _metadata;\r\n        }\r\n    }\r\n    \r\n    function iAmFactory() public pure returns (bool isIndeed) {\r\n        return true;\r\n    }\r\n    \r\n    function setMintingPrice(uint256 price) public {\r\n        require(msg.sender == _owner);\r\n        _mintingPrice = price;\r\n    }\r\n    \r\n    function setBasicMetaDataForPigeon(string memory metadata) public {\r\n        require(msg.sender == _owner);\r\n        _metadata = metadata;\r\n    }\r\n    \r\n    function setMintingPrice(address ERC20Token, uint256 price) public {\r\n        require(msg.sender == _owner);\r\n        ApprovedTokenPrice[ERC20Token] = price;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public {    \r\n        require(_owner == msg.sender, \"Only _owner\");\r\n        require(newOwner != address(0), \"Zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        payable(_owner).transfer(address(this).balance);\r\n        _owner = newOwner;\r\n    }\r\n} \r\n//----------------------------------------------------------------------------------------------------\r\n\r\ncontract SimpleCryptoPigeon is ICryptoPigeon{\r\n\r\n    uint256 private _factoryId;  \r\n    address private _owner;\r\n    string public message;\r\n    string public answer;\r\n    uint256 public messageTimestamp;\r\n    uint256 public answerTimestamp;\r\n    address private _toAddress;\r\n    bool private _hasFlown;\r\n    address public epigeonContractAddress;\r\n    bool public sentByManager;\r\n\r\n    event AnswerSent(address sender, string message, uint256 messageTimestamp);  \r\n    event MessageSent(address sender, string rmessage, address toAddress, uint256 messageTimestamp);\r\n    \r\n    function hasFlown() external view returns (bool HasFlown){return _hasFlown;}\r\n    function toAddress() external view returns (address addressee){return _toAddress;} \r\n    function owner() external view returns (address owned){return _owner;}\r\n    function manager() external view returns (address managed){return _owner;}\r\n    function factoryId() external view returns (uint256 id){return _factoryId;}\r\n    \r\n    constructor (address _mintedto, address epigeonAddress, uint256 fid){\r\n        _owner = _mintedto;\r\n        epigeonContractAddress = epigeonAddress;\r\n        _factoryId = fid;\r\n        _hasFlown = false;\r\n    }\r\n    \r\n    function burnPigeon() public {\r\n        require(msg.sender == epigeonContractAddress);\r\n        address wallet = _owner;\r\n        selfdestruct(payable(wallet));\r\n    }  \r\n    \r\n    function iAmPigeon() public pure returns (bool isIndeed) {\r\n        return true;\r\n    }\r\n    \r\n    function sendAnswer(string memory textMessage) public {\r\n        require(msg.sender == _toAddress);\r\n        answer = textMessage;\r\n        answerTimestamp = block.timestamp;\r\n        emit AnswerSent(msg.sender, answer, answerTimestamp);\r\n    }\r\n    \r\n    function sendMessage(string memory textMessage, address addressee) public {\r\n        require(msg.sender == _owner);      \r\n        if (addressee != _toAddress){\r\n            //Need to tell for the mailboxes\r\n            if (_hasFlown){\r\n                IEpigeon(epigeonContractAddress).pigeonDestinations().changeToAddress(addressee, _toAddress);\r\n            }\r\n            else{\r\n                _hasFlown = true;\r\n                IEpigeon(epigeonContractAddress).pigeonDestinations().setToAddress(addressee);\r\n            }\r\n            _toAddress = addressee;\r\n            delete answer;\r\n            delete answerTimestamp;\r\n        }\r\n        \r\n        message = textMessage;\r\n        messageTimestamp = block.timestamp;\r\n        \r\n        emit MessageSent(msg.sender, message, _toAddress, messageTimestamp);\r\n    }\r\n    \r\n    function transferPigeon(address newOwner) public {\r\n        require(msg.sender == epigeonContractAddress);\r\n        delete message;\r\n        delete answer;\r\n        delete messageTimestamp;\r\n        delete answerTimestamp;\r\n        payable(_owner).transfer(address(this).balance);\r\n        _owner = newOwner;\r\n        _hasFlown = false;\r\n        delete _toAddress;\r\n    }\r\n}\r\n//----------------------------------------------------------------------------------------------------", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintedto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"epigeonAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnswerSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rmessage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"answer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"answerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPigeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epigeonContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasFlown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"HasFlown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iAmPigeon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"managed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owned\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"textMessage\",\"type\":\"string\"}],\"name\":\"sendAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"textMessage\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addressee\",\"type\":\"address\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentByManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addressee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferPigeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleCryptoPigeon", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007308ca82a74d94e9ffb1ae96c872e2e89c625ce20000000000000000000000007308ca82a74d94e9ffb1ae96c872e2e89c625ce20000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31f39e3d64f01f3b3370b75de9519651f6ca5c8852642cf7e59bbb965cb599c0"}]}