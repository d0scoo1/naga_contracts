{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\r\ncontract BrickAccessControl {\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n        nodeToId[admin] = 1;\r\n    }\r\n\r\n    address public admin;\r\n    address[] public nodes;\r\n    mapping (address => uint) nodeToId;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Not authorized admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyNode() {\r\n        require(nodeToId[msg.sender] != 0, \"Not authorized node\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) public onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function getNodes() public view returns (address[]) {\r\n        return nodes;\r\n    }\r\n\r\n    function addNode(address _newNode) public onlyAdmin {\r\n        require(_newNode != address(0), \"Cannot set to empty address\");\r\n\r\n        nodeToId[_newNode] = nodes.push(_newNode);\r\n    }\r\n\r\n    function removeNode(address _node) public onlyAdmin {\r\n        require(_node != address(0), \"Cannot set to empty address\");\r\n\r\n        uint index = nodeToId[_node] - 1;\r\n        delete nodes[index];\r\n        delete nodeToId[_node];\r\n    }\r\n\r\n}\r\n\r\ncontract BrickBase is BrickAccessControl {\r\n\r\n    /**************\r\n       Events\r\n    ***************/\r\n\r\n    // S201. \ub300\ucd9c \uacc4\uc57d \uc0dd\uc131\r\n    event ContractCreated(bytes32 loanId);\r\n\r\n    // S201. \ub300\ucd9c\uc911\r\n    event ContractStarted(bytes32 loanId);\r\n\r\n    // S301. \uc0c1\ud658 \uc644\ub8cc\r\n    event RedeemCompleted(bytes32 loanId);\r\n\r\n    // S302. \uccad\uc0b0 \uc644\ub8cc\r\n    event LiquidationCompleted(bytes32 loanId);\r\n\r\n\r\n    /**************\r\n       Data Types\r\n    ***************/\r\n\r\n    struct Contract {\r\n        bytes32 loanId;         // \uacc4\uc57d \ubc88\ud638\r\n        uint16 productId;       // \uc0c1\ud488 \ubc88\ud638\r\n        bytes8 coinName;        // \ub2f4\ubcf4 \ucf54\uc778 \uc885\ub958\r\n        uint256 coinAmount;     // \ub2f4\ubcf4 \ucf54\uc778\uc591\r\n        uint32 coinUnitPrice;   // 1 \ucf54\uc778\ub2f9 \uae08\uc561\r\n        string collateralAddress;  // \ub2f4\ubcf4 \uc785\uae08 \uc554\ud638\ud654\ud3d0 \uc8fc\uc18c\r\n        uint32 loanAmount;      // \ub300\ucd9c\uc6d0\uae08\r\n        uint64 createAt;        // \uacc4\uc57d\uc77c\r\n        uint64 openAt;          // \uc6d0\ud654\uc9c0\uae09\uc77c(\uac1c\uc2dc\uc77c)\r\n        uint64 expireAt;        // \ub9cc\uae30\uc77c\r\n        bytes8 feeRate;         // \uc774\uc790\uc728\r\n        bytes8 overdueRate;     // \uc5f0\uccb4\uc774\uc790\uc728\r\n        bytes8 liquidationRate; // \uccad\uc0b0 \uc870\uac74(\ub2f4\ubcf4 \uccad\uc0b0\ube44\uc728)\r\n        uint32 prepaymentFee;   // \uc911\ub3c4\uc0c1\ud658\uc218\uc218\ub8cc\r\n        bytes32 extra;          // \uae30\ud0c0 \uc815\ubcf4\r\n    }\r\n\r\n    struct ClosedContract {\r\n        bytes32 loanId;         // \uacc4\uc57d \ubc88\ud638\r\n        bytes8 status;          // \uc885\ub8cc \ud0c0\uc785(S301, S302)\r\n        uint256 returnAmount;   // \ubc18\ud658\ucf54\uc778\ub7c9(\uc720\uc800\uc5d0\uac8c \ub3cc\ub824\uc900 \ucf54\uc778)\r\n        uint32 returnCash;      // \ubc18\ud658 \ud604\uae08(\uc720\uc800\uc5d0\uac8c \ub3cc\ub824\uc900 \uc6d0\ud654)\r\n        string returnAddress;   // \ub2f4\ubcf4 \ubc18\ud658 \uc554\ud638\ud654\ud3d0 \uc8fc\uc18c\r\n        uint32 feeAmount;       // \ucd1d\uc774\uc790(\uc774\uc790 + \uc5f0\uccb4\uc774\uc790 + \uc6b4\uc601\uc218\uc218\ub8cc + \uc870\uae30\uc0c1\ud658\uc218\uc218\ub8cc)\r\n        uint32 evalUnitPrice;   // \uccad\uc0b0\uc2dc\uc810 \ud3c9\uac00\uae08\uc561(1 \ucf54\uc778\ub2f9 \uae08\uc561)\r\n        uint64 evalAt;          // \uccad\uc0b0\uc2dc\uc810 \ud3c9\uac00\uc77c\r\n        uint64 closeAt;         // \uc885\ub8cc\uc77c\uc790\r\n        bytes32 extra;          // \uae30\ud0c0 \uc815\ubcf4\r\n    }\r\n\r\n\r\n    /**************\r\n        Storage\r\n    ***************/\r\n\r\n    // \uacc4\uc57d \ubc88\ud638 => \ub300\ucd9c \uacc4\uc57d\uc11c\r\n    mapping (bytes32 => Contract) loanIdToContract;\r\n    // \uacc4\uc57d \ubc88\ud638 => \uc885\ub8cc\ub41c \ub300\ucd9c \uacc4\uc57d\uc11c\r\n    mapping (bytes32 => ClosedContract) loanIdToClosedContract;\r\n\r\n    bytes32[] contracts;\r\n    bytes32[] closedContracts;\r\n\r\n}\r\n\r\ncontract BrickInterface is BrickBase {\r\n\r\n    function createContract(\r\n        bytes32 _loanId, uint16 _productId, bytes8 _coinName, uint256 _coinAmount, uint32 _coinUnitPrice,\r\n        string _collateralAddress, uint32 _loanAmount, uint64[] _times, bytes8[] _rates, uint32 _prepaymentFee, bytes32 _extra)\r\n        public;\r\n\r\n    function closeContract(\r\n        bytes32 _loanId, bytes8 _status, uint256 _returnAmount, uint32 _returnCash, string _returnAddress,\r\n        uint32 _feeAmount, uint32 _evalUnitPrice, uint64 _evalAt, uint64 _closeAt, bytes32 _extra)\r\n        public;\r\n\r\n    function getContract(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        uint16 productId,\r\n        bytes8 coinName,\r\n        uint256 coinAmount,\r\n        uint32 coinUnitPrice,\r\n        string collateralAddress,\r\n        uint32 loanAmount,\r\n        uint32 prepaymentFee,\r\n        bytes32 extra);\r\n\r\n    function getContractTimestamps(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        uint64 createAt,\r\n        uint64 openAt,\r\n        uint64 expireAt);\r\n\r\n    function getContractRates(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        bytes8 feeRate,\r\n        bytes8 overdueRate,\r\n        bytes8 liquidationRate);\r\n\r\n    function getClosedContract(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        bytes8 status,\r\n        uint256 returnAmount,\r\n        uint32 returnCash,\r\n        string returnAddress,\r\n        uint32 feeAmount,\r\n        uint32 evalUnitPrice,\r\n        uint64 evalAt,\r\n        uint64 closeAt,\r\n        bytes32 extra);\r\n\r\n    function totalContracts() public view returns (uint);\r\n\r\n    function totalClosedContracts() public view returns (uint);\r\n\r\n}\r\n\r\n\r\n\r\ncontract Brick is BrickInterface {\r\n\r\n    /// @dev \ub300\ucd9c \uacc4\uc57d\uc11c \uc0dd\uc131\ud558\uae30\r\n    /// @param _loanId \uacc4\uc57d \ubc88\ud638\r\n    /// @param _productId \uc0c1\ud488 \ubc88\ud638\r\n    /// @param _coinName \ub2f4\ubcf4 \ucf54\uc778 \uc885\ub958\r\n    /// @param _coinAmount \ub2f4\ubcf4 \ucf54\uc778\uc591\r\n    /// @param _coinUnitPrice 1 \ucf54\uc778\ub2f9 \uae08\uc561\r\n    /// @param _collateralAddress \ub2f4\ubcf4 \uc785\uae08 \uc554\ud638\ud654\ud3d0 \uc8fc\uc18c\r\n    /// @param _loanAmount \ub300\ucd9c\uc6d0\uae08\r\n    /// @param _times \uacc4\uc57d \uc2dc\uac04 \uc815\ubcf4[createAt, openAt, expireAt]\r\n    /// @param _rates \uc774\uc790\uc728[feeRate, overdueRate, liquidationRate]\r\n    /// @param _prepaymentFee \uc911\ub3c4\uc0c1\ud658\uc218\uc218\ub8cc\r\n    /// @param _extra \uae30\ud0c0 \uc815\ubcf4\r\n    function createContract(\r\n        bytes32 _loanId, uint16 _productId, bytes8 _coinName, uint256 _coinAmount, uint32 _coinUnitPrice,\r\n        string _collateralAddress, uint32 _loanAmount, uint64[] _times, bytes8[] _rates, uint32 _prepaymentFee, bytes32 _extra)\r\n        public\r\n        onlyNode\r\n    {\r\n        require(loanIdToContract[_loanId].loanId == 0, \"Already exists in Contract.\");\r\n        require(loanIdToClosedContract[_loanId].loanId == 0, \"Already exists in ClosedContract.\");\r\n\r\n        Contract memory _contract = Contract({\r\n            loanId: _loanId,\r\n            productId: _productId,\r\n            coinName: _coinName,\r\n            coinAmount: _coinAmount,\r\n            coinUnitPrice: _coinUnitPrice,\r\n            collateralAddress: _collateralAddress,\r\n            loanAmount: _loanAmount,\r\n            createAt: _times[0],\r\n            openAt: _times[1],\r\n            expireAt: _times[2],\r\n            feeRate: _rates[0],\r\n            overdueRate: _rates[1],\r\n            liquidationRate: _rates[2],\r\n            prepaymentFee: _prepaymentFee,\r\n            extra: _extra\r\n        });\r\n        loanIdToContract[_loanId] = _contract;\r\n        contracts.push(_loanId);\r\n\r\n        emit ContractCreated(_loanId);\r\n    }\r\n\r\n    /// @dev \ub300\ucd9c \uacc4\uc57d \uc885\ub8cc\ud558\uae30\r\n    /// @param _loanId \uacc4\uc57d \ubc88\ud638\r\n    /// @param _status \uc885\ub8cc \ud0c0\uc785(S301, S302)\r\n    /// @param _returnAmount \ubc18\ud658\ucf54\uc778\ub7c9(\uc720\uc800\uc5d0\uac8c \ub3cc\ub824\uc900 \ucf54\uc778)\r\n    /// @param _returnCash \ubc18\ud658 \ud604\uae08(\uc720\uc800\uc5d0\uac8c \ub3cc\ub824\uc900 \uc6d0\ud654)\r\n    /// @param _returnAddress \ub2f4\ubcf4 \ubc18\ud658 \uc554\ud638\ud654\ud3d0 \uc8fc\uc18c\r\n    /// @param _feeAmount \ucd1d\uc774\uc790(\uc774\uc790 + \uc5f0\uccb4\uc774\uc790 + \uc6b4\uc601\uc218\uc218\ub8cc + \uc870\uae30\uc0c1\ud658\uc218\uc218\ub8cc)\r\n    /// @param _evalUnitPrice \uccad\uc0b0\uc2dc\uc810 \ud3c9\uac00\uae08\uc561(1 \ucf54\uc778\ub2f9 \uae08\uc561)\r\n    /// @param _evalAt \uccad\uc0b0\uc2dc\uc810 \ud3c9\uac00\uc77c\r\n    /// @param _closeAt \uc885\ub8cc\uc77c\uc790\r\n    /// @param _extra \uae30\ud0c0 \uc815\ubcf4\r\n    function closeContract(\r\n        bytes32 _loanId, bytes8 _status, uint256 _returnAmount, uint32 _returnCash, string _returnAddress,\r\n        uint32 _feeAmount, uint32 _evalUnitPrice, uint64 _evalAt, uint64 _closeAt, bytes32 _extra)\r\n        public\r\n        onlyNode\r\n    {\r\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\r\n        require(loanIdToClosedContract[_loanId].loanId == 0, \"Already exists in ClosedContract.\");\r\n\r\n        ClosedContract memory closedContract = ClosedContract({\r\n            loanId: _loanId,\r\n            status: _status,\r\n            returnAmount: _returnAmount,\r\n            returnCash: _returnCash,\r\n            returnAddress: _returnAddress,\r\n            feeAmount: _feeAmount,\r\n            evalUnitPrice: _evalUnitPrice,\r\n            evalAt: _evalAt,\r\n            closeAt: _closeAt,\r\n            extra: _extra\r\n        });\r\n        loanIdToClosedContract[_loanId] = closedContract;\r\n        closedContracts.push(_loanId);\r\n\r\n        if (_status == bytes16(\"S301\")) {\r\n            emit RedeemCompleted(_loanId);\r\n        } else if (_status == bytes16(\"S302\")) {\r\n            emit LiquidationCompleted(_loanId);\r\n        }\r\n    }\r\n\r\n    /// @dev \uc9c4\ud589\uc911\uc778 \ub300\ucd9c \uacc4\uc57d\uc11c \uc870\ud68c\ud558\uae30\r\n    /// @param _loanId \uacc4\uc57d \ubc88\ud638\r\n    /// @return The contract of given loanId\r\n    function getContract(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        uint16 productId,\r\n        bytes8 coinName,\r\n        uint256 coinAmount,\r\n        uint32 coinUnitPrice,\r\n        string collateralAddress,\r\n        uint32 loanAmount,\r\n        uint32 prepaymentFee,\r\n        bytes32 extra)\r\n    {\r\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\r\n\r\n        Contract storage c = loanIdToContract[_loanId];\r\n        loanId = c.loanId;\r\n        productId = uint16(c.productId);\r\n        coinName = c.coinName;\r\n        coinAmount = uint256(c.coinAmount);\r\n        coinUnitPrice = uint32(c.coinUnitPrice);\r\n        collateralAddress = c.collateralAddress;\r\n        loanAmount = uint32(c.loanAmount);\r\n        prepaymentFee = uint32(c.prepaymentFee);\r\n        extra = c.extra;\r\n    }\r\n\r\n    function getContractTimestamps(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        uint64 createAt,\r\n        uint64 openAt,\r\n        uint64 expireAt)\r\n    {\r\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\r\n\r\n        Contract storage c = loanIdToContract[_loanId];\r\n        loanId = c.loanId;\r\n        createAt = uint64(c.createAt);\r\n        openAt = uint64(c.openAt);\r\n        expireAt = uint64(c.expireAt);\r\n    }\r\n\r\n    function getContractRates(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        bytes8 feeRate,\r\n        bytes8 overdueRate,\r\n        bytes8 liquidationRate)\r\n    {\r\n        require(loanIdToContract[_loanId].loanId != 0, \"Not exists in Contract.\");\r\n\r\n        Contract storage c = loanIdToContract[_loanId];\r\n        loanId = c.loanId;\r\n        feeRate = c.feeRate;\r\n        overdueRate = c.overdueRate;\r\n        liquidationRate = c.liquidationRate;\r\n    }\r\n\r\n    /// @dev \uc885\ub8cc\ub41c \ub300\ucd9c \uacc4\uc57d\uc11c \uc870\ud68c\ud558\uae30\r\n    /// @param _loanId \uacc4\uc57d \ubc88\ud638\r\n    /// @return The closed contract of given loanId\r\n    function getClosedContract(bytes32 _loanId)\r\n        public\r\n        view\r\n        returns (\r\n        bytes32 loanId,\r\n        bytes8 status,\r\n        uint256 returnAmount,\r\n        uint32 returnCash,\r\n        string returnAddress,\r\n        uint32 feeAmount,\r\n        uint32 evalUnitPrice,\r\n        uint64 evalAt,\r\n        uint64 closeAt,\r\n        bytes32 extra)\r\n    {\r\n        require(loanIdToClosedContract[_loanId].loanId != 0, \"Not exists in ClosedContract.\");\r\n\r\n        ClosedContract storage c = loanIdToClosedContract[_loanId];\r\n\r\n        loanId = c.loanId;\r\n        status = c.status;\r\n        returnAmount = uint256(c.returnAmount);\r\n        returnCash = uint32(c.returnCash);\r\n        returnAddress = c.returnAddress;\r\n        feeAmount = uint32(c.feeAmount);\r\n        evalUnitPrice = uint32(c.evalUnitPrice);\r\n        evalAt = uint64(c.evalAt);\r\n        closeAt = uint64(c.closeAt);\r\n        extra = c.extra;\r\n    }\r\n\r\n    function totalContracts() public view returns (uint) {\r\n        return contracts.length;\r\n    }\r\n\r\n    function totalClosedContracts() public view returns (uint) {\r\n        return closedContracts.length;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"getContractRates\",\"outputs\":[{\"name\":\"loanId\",\"type\":\"bytes32\"},{\"name\":\"feeRate\",\"type\":\"bytes8\"},{\"name\":\"overdueRate\",\"type\":\"bytes8\"},{\"name\":\"liquidationRate\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_status\",\"type\":\"bytes8\"},{\"name\":\"_returnAmount\",\"type\":\"uint256\"},{\"name\":\"_returnCash\",\"type\":\"uint32\"},{\"name\":\"_returnAddress\",\"type\":\"string\"},{\"name\":\"_feeAmount\",\"type\":\"uint32\"},{\"name\":\"_evalUnitPrice\",\"type\":\"uint32\"},{\"name\":\"_evalAt\",\"type\":\"uint64\"},{\"name\":\"_closeAt\",\"type\":\"uint64\"},{\"name\":\"_extra\",\"type\":\"bytes32\"}],\"name\":\"closeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"},{\"name\":\"_productId\",\"type\":\"uint16\"},{\"name\":\"_coinName\",\"type\":\"bytes8\"},{\"name\":\"_coinAmount\",\"type\":\"uint256\"},{\"name\":\"_coinUnitPrice\",\"type\":\"uint32\"},{\"name\":\"_collateralAddress\",\"type\":\"string\"},{\"name\":\"_loanAmount\",\"type\":\"uint32\"},{\"name\":\"_times\",\"type\":\"uint64[]\"},{\"name\":\"_rates\",\"type\":\"bytes8[]\"},{\"name\":\"_prepaymentFee\",\"type\":\"uint32\"},{\"name\":\"_extra\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"getContractTimestamps\",\"outputs\":[{\"name\":\"loanId\",\"type\":\"bytes32\"},{\"name\":\"createAt\",\"type\":\"uint64\"},{\"name\":\"openAt\",\"type\":\"uint64\"},{\"name\":\"expireAt\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClosedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newNode\",\"type\":\"address\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"getClosedContract\",\"outputs\":[{\"name\":\"loanId\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"bytes8\"},{\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"name\":\"returnCash\",\"type\":\"uint32\"},{\"name\":\"returnAddress\",\"type\":\"string\"},{\"name\":\"feeAmount\",\"type\":\"uint32\"},{\"name\":\"evalUnitPrice\",\"type\":\"uint32\"},{\"name\":\"evalAt\",\"type\":\"uint64\"},{\"name\":\"closeAt\",\"type\":\"uint64\"},{\"name\":\"extra\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_loanId\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"loanId\",\"type\":\"bytes32\"},{\"name\":\"productId\",\"type\":\"uint16\"},{\"name\":\"coinName\",\"type\":\"bytes8\"},{\"name\":\"coinAmount\",\"type\":\"uint256\"},{\"name\":\"coinUnitPrice\",\"type\":\"uint32\"},{\"name\":\"collateralAddress\",\"type\":\"string\"},{\"name\":\"loanAmount\",\"type\":\"uint32\"},{\"name\":\"prepaymentFee\",\"type\":\"uint32\"},{\"name\":\"extra\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"ContractStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"RedeemCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"loanId\",\"type\":\"bytes32\"}],\"name\":\"LiquidationCompleted\",\"type\":\"event\"}]", "ContractName": "Brick", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://048a7908767397ab5775e2b695123e1a6d73981e4324a2e5c25afa54b47baec7"}]}