{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v4migration/V4Migration.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../interfaces/IV3Pool.sol';\\n\\ncontract V4Migration is Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n\\n  address public oceanAddress;\\n  address public OPFWallet;\\n\\n  uint256 internal BASE = 1e18;\\n  uint256 public lockWindow = 1814400; // used for quick test, will be 1 month, number of blocks\\n\\n  constructor(\\n    address _oceanAddress,\\n    address _OPFWallet,\\n    uint256 _lockWindow\\n  ) {\\n    require(_oceanAddress != address(0), 'Ocean Address cannot be address(0)');\\n    require(_OPFWallet != address(0), '_OPFWallet cannot be address(0)');\\n    oceanAddress = _oceanAddress;\\n    OPFWallet = _OPFWallet;\\n    lockWindow = _lockWindow;\\n  }\\n\\n  enum migrationStatus {\\n    notStarted,\\n    allowed,\\n    completed\\n  }\\n\\n  struct PoolShares {\\n    address owner;\\n    uint256 shares;\\n  }\\n  struct PoolStatus {\\n    migrationStatus status;\\n    address poolV3Address;\\n    address dtV3Address;\\n    address owner;\\n    PoolShares[] poolShares;\\n    uint256 lps;\\n    uint256 totalSharesLocked;\\n    uint256 totalOcean;\\n    uint256 totalDTBurnt;\\n    uint256 deadline;\\n  }\\n\\n  event SharesAdded(\\n    address poolAddress,\\n    address user,\\n    uint256 lockedShares,\\n    uint256 blockNo\\n  );\\n  event Started(address poolAddress, uint256 blockNo, address caller);\\n  event Completed(address poolAddress, address caller, uint256 blockNo);\\n\\n  mapping(address => PoolStatus) private pool;\\n\\n  /**\\n   * @dev startMigration\\n   *      Starts migration process for a pool\\n   * @param _dtAddress datatoken address\\n   * @param _poolAddress pool address\\n   */\\n  function startMigration(address _dtAddress, address _poolAddress)\\n    external\\n    nonReentrant\\n  {\\n    require(\\n      uint256(pool[_poolAddress].status) == 0,\\n      'Migration process has already been started'\\n    );\\n\\n    require(\\n      IV3Pool(_poolAddress).isBound(_dtAddress),\\n      'Datatoken is not bound'\\n    );\\n    require(\\n      IV3Pool(_poolAddress).isBound(oceanAddress),\\n      'OCEAN token is not bound'\\n    );\\n    // Start the migration process for an asset.\\n    PoolStatus storage newPool = pool[_poolAddress];\\n    newPool.status = migrationStatus.allowed;\\n    newPool.poolV3Address = _poolAddress;\\n    newPool.dtV3Address = _dtAddress;\\n    newPool.owner = IV3Pool(_poolAddress).getController();\\n    newPool.lps = 0;\\n    newPool.totalSharesLocked = 0;\\n    newPool.totalOcean = 0;\\n    newPool.totalDTBurnt = 0;\\n    newPool.deadline = block.timestamp.add(lockWindow);\\n    emit Started(_poolAddress, block.number, msg.sender);\\n  }\\n\\n  /**\\n   * @dev addShares\\n   *      Called by user in order to lock some pool shares.\\n   * @param _poolAddress pool address\\n   * @param noOfShares number of shares\\n   */\\n  function addShares(address _poolAddress, uint256 noOfShares)\\n    external\\n    nonReentrant\\n  {\\n    require(noOfShares > 0, 'Adding zero shares is not allowed');\\n    // Check that the Migration is allowed\\n    require(\\n      canAddShares(_poolAddress) == true,\\n      'Adding shares is not currently allowed'\\n    );\\n    uint256 LPBalance = IERC20(_poolAddress).balanceOf(msg.sender);\\n    require(LPBalance == noOfShares, 'All shares must be locked');\\n    //loop trough poolShareOwners to see if we already have shares from this user\\n    uint256 currentShares = 0;\\n    uint256 i;\\n    for (i = 0; i < pool[_poolAddress].poolShares.length; i++) {\\n      if (pool[_poolAddress].poolShares[i].owner == msg.sender) {\\n        currentShares = pool[_poolAddress].poolShares[i].shares;\\n        break;\\n      }\\n    }\\n    require(currentShares == 0, 'You already have locked shares');\\n    // does a transferFrom for LP's shares. requires prior approval.\\n    require(\\n      IERC20(_poolAddress).transferFrom(msg.sender, address(this), noOfShares),\\n      'Failed to transfer shares'\\n    );\\n\\n    //add new record, user has not transfered any shares so far\\n    PoolShares memory newEntry;\\n    newEntry.owner = msg.sender;\\n    newEntry.shares = noOfShares;\\n    pool[_poolAddress].poolShares.push(newEntry);\\n    pool[_poolAddress].lps++;\\n    pool[_poolAddress].totalSharesLocked += noOfShares;\\n    emit SharesAdded(_poolAddress, msg.sender, noOfShares, block.number);\\n  }\\n\\n  /**\\n   * @dev getPoolStatus\\n   *      Returns pool status\\n   * @param poolAddress pool Address\\n   * @return PoolStatus\\n   */\\n  function getPoolStatus(address poolAddress)\\n    external\\n    view\\n    returns (PoolStatus memory)\\n  {\\n    return (pool[poolAddress]);\\n  }\\n\\n  /**\\n   * @dev getPoolShares\\n   *      Returns a list of users and coresponding locked shares, using pagination\\n   *      Use start = 0 , end = 2^256 for default values, but your RPC provider might complain\\n   * @param _poolAddress pool Address\\n   * @param start start from index\\n   * @param end until index\\n   * @return PoolShares[]\\n   */\\n  function getPoolShares(\\n    address _poolAddress,\\n    uint256 start,\\n    uint256 end\\n  ) external view returns (PoolShares[] memory) {\\n    uint256 counter = 0;\\n    uint256 i;\\n    for (i = start; i < pool[_poolAddress].poolShares.length || i > end; i++) {\\n      if (pool[_poolAddress].poolShares[i].owner != address(0)) counter++;\\n    }\\n    // since it's not possible to return dynamic length array\\n    // we need to count first, create the array using fixed length and then fill it\\n    PoolShares[] memory poolShares = new PoolShares[](counter);\\n    counter = 0;\\n    for (i = start; i < pool[_poolAddress].poolShares.length || i > end; i++) {\\n      if (pool[_poolAddress].poolShares[i].owner != address(0)) {\\n        poolShares[counter].owner = pool[_poolAddress].poolShares[i].owner;\\n        poolShares[counter].shares = pool[_poolAddress].poolShares[i].shares;\\n        counter++;\\n      }\\n    }\\n    return (poolShares);\\n  }\\n\\n  /**\\n   * @dev getPoolSharesforUser\\n   *      Returns amount of pool shares locked by a user for a pool\\n   * @param _owner user address\\n   * @param _poolAddress pool Address\\n   * @return uint256\\n   */\\n  function getPoolSharesforUser(address _poolAddress, address _owner)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    uint256 i;\\n    for (i = 0; i < pool[_poolAddress].poolShares.length; i++) {\\n      if (pool[_poolAddress].poolShares[i].owner == _owner)\\n        return (pool[_poolAddress].poolShares[i].shares);\\n    }\\n    return (0);\\n  }\\n\\n  /**\\n   * @dev canAddShares\\n   *      Checks if user can lock poolshares\\n   * @param _poolAddress pool Address\\n   * @return boolean\\n   */\\n  function canAddShares(address _poolAddress) public view returns (bool) {\\n    if (pool[_poolAddress].status == migrationStatus.allowed) return true;\\n    return false;\\n  }\\n\\n  /**\\n   * @dev thresholdMet\\n   *      Checks if the threshold is met for a pool\\n   * @param poolAddress pool Address\\n   * @return boolean\\n   */\\n  function thresholdMet(address poolAddress) public view returns (bool) {\\n    if (pool[poolAddress].status != migrationStatus.allowed) return false;\\n    uint256 totalLP = IERC20(poolAddress).balanceOf(address(this));\\n    if (totalLP == 0) {\\n      return false;\\n    }\\n    uint256 totalLPSupply = IERC20(poolAddress).totalSupply();\\n\\n    if (totalLPSupply.mul(BASE).div(totalLP) <= 1.25 ether) {\\n      return true;\\n    } else return false;\\n  }\\n\\n  /**\\n     * @dev liquidate\\n     *      Liquidates a pool and sends OCEAN to OPF\\n     * @param poolAddress pool Address\\n     * @param minAmountsOut array of minimum amount of tokens expected \\n          (see https://github.com/oceanprotocol/contracts/blob/main/contracts/balancer/BPool.sol#L519)\\n     */\\n  function liquidate(address poolAddress, uint256[] calldata minAmountsOut)\\n    external\\n    nonReentrant\\n  {\\n    require(\\n      pool[poolAddress].status == migrationStatus.allowed,\\n      'Current pool status does not allow to liquidate Pool'\\n    );\\n    // uint256 totalLPSupply = IERC20(poolAddress).totalSupply();\\n    /*require(\\n      thresholdMet(poolAddress) || pool[poolAddress].deadline < block.timestamp,\\n      'Threshold or deadline not met'\\n    ); // 80% of total LP required\\n    */\\n    require(\\n      pool[poolAddress].deadline < block.timestamp,\\n      'Threshold or deadline not met'\\n    ); // 80% of total LP required\\n    require(\\n      pool[poolAddress].totalSharesLocked > 0,\\n      'Cannot liquidate 0 shares'\\n    );\\n    uint256 oceanBalance = IERC20(oceanAddress).balanceOf(address(this));\\n    // we update the status\\n    pool[poolAddress].status = migrationStatus.completed;\\n    // - Withdraws all pool shares from V3 pool in one call (all shares at once, not per user)\\n    IV3Pool(poolAddress).exitPool(\\n      pool[poolAddress].totalSharesLocked,\\n      minAmountsOut\\n    );\\n    require(\\n      IERC20(poolAddress).balanceOf(address(this)) == 0,\\n      'Failed to redeem all LPTs'\\n    );\\n\\n    // Store values for pool status\\n    pool[poolAddress].totalDTBurnt = IERC20(pool[poolAddress].dtV3Address)\\n      .balanceOf(address(this));\\n    uint256 newOceanBalance = IERC20(oceanAddress).balanceOf(address(this));\\n    pool[poolAddress].totalOcean = newOceanBalance.sub(oceanBalance);\\n\\n    // - Burns all DTs\\n    require(\\n      IERC20(pool[poolAddress].dtV3Address).transfer(\\n        address(1),\\n        pool[poolAddress].totalDTBurnt\\n      ),\\n      'Failed to burn v3 DTs'\\n    );\\n    // send OCEAN to OPF\\n    require(\\n      IERC20(oceanAddress).transfer(OPFWallet, pool[poolAddress].totalOcean),\\n      'Failed to transfer OCEAN to OPF'\\n    );\\n\\n    emit Completed(poolAddress, msg.sender, block.number);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IV3Pool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\ninterface IV3Pool {\\n  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n    external;\\n\\n  function getController() external view returns (address);\\n\\n  function isBound(address t) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oceanAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OPFWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"SharesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPFWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"noOfShares\",\"type\":\"uint256\"}],\"name\":\"addShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"canAddShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPoolShares\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct V4Migration.PoolShares[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPoolSharesforUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum V4Migration.migrationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"poolV3Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dtV3Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct V4Migration.PoolShares[]\",\"name\":\"poolShares\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"lps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOcean\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDTBurnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct V4Migration.PoolStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oceanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"thresholdMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "V4Migration", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000967da4048cd07ab37855c090aaf366e4ce1b9f48000000000000000000000000f7694b88a1f073ccd4850b020a74e60ce80b92b300000000000000000000000000000000000000000000000000000000001baf80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}