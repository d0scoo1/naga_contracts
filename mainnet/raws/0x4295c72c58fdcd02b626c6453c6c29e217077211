{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Lottery is Owned {\r\n    string constant version = \"1.0.0\";\r\n\r\n    address admin;\r\n\r\n    mapping (uint => Game) public games;\r\n\r\n    mapping (uint => mapping (address => Ticket[])) public tickets;\r\n\r\n    mapping (address => uint) public withdrawGameIndex;\r\n\r\n    mapping (address => uint) allowed;\r\n\r\n    uint public gameIndex;\r\n\r\n    uint public goldKeyJackpot;\r\n\r\n    uint public firstPrizeJackpot;\r\n\r\n    uint public bonusJackpot;\r\n\r\n    uint public nextPrice;\r\n\r\n    bool public buyEnable = true;\r\n\r\n    mapping(bytes32 => uint) keys;\r\n\r\n    uint currentMappingVersion;\r\n\r\n    struct Ticket {\r\n        address user;\r\n        uint[] numbers;\r\n        uint buyTime;\r\n    }\r\n\r\n    struct Game {\r\n        uint startTime;\r\n        uint price;\r\n        uint ticketIndex;\r\n        uint[] winNumbers;\r\n        uint goldKey;\r\n        uint blockIndex;\r\n        string blockHash;\r\n        uint averageBonus;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    function depositOwnership(address admin_) public onlyOwner {\r\n        require(admin_ != address(0));\r\n        admin = admin_;\r\n    }\r\n\r\n    constructor() public {\r\n        nextPrice = 0.01 ether;\r\n        games[0].price = nextPrice;\r\n        games[0].startTime = now;\r\n    }\r\n\r\n    function() public payable {\r\n        require(buyEnable);\r\n        require(address(this) != msg.sender);\r\n        require(msg.data.length > 9);\r\n        require(msg.data.length % 9 == 1);\r\n        Game storage game = games[gameIndex];\r\n        uint count = uint(msg.data[0]);\r\n        require(msg.value == count * game.price);\r\n        Ticket[] storage tickets_ = tickets[gameIndex][msg.sender];\r\n        uint goldCount = 0;\r\n        uint i = 1;\r\n        while(i < msg.data.length) {\r\n            uint[] memory number_ = new uint[](9);\r\n            for(uint j = 0; j < 9; j++) {\r\n                number_[j] = uint(msg.data[i++]);\r\n            }\r\n            goldCount += number_[1];\r\n            tickets_.push(Ticket(msg.sender, number_, now));\r\n            game.ticketIndex++;\r\n        }\r\n        if(goldCount > 0) {\r\n            uint goldKey_ = getKeys(msg.sender);\r\n            require(goldKey_ >= goldCount);\r\n            goldKey_ -= goldCount;\r\n            bytes32 key = keccak256(abi.encodePacked(currentMappingVersion, msg.sender));\r\n            keys[key] = goldKey_;\r\n        }\r\n        uint amount = msg.value * 4 / 10;\r\n        firstPrizeJackpot += amount;\r\n        bonusJackpot += amount;\r\n        goldKeyJackpot += amount;\r\n        if(goldKeyJackpot >= 1500 ether) {\r\n            game.goldKey++;\r\n            goldKeyJackpot -= 1500 ether;\r\n        }\r\n        emit LogBuyTicket(gameIndex, msg.sender, msg.data, firstPrizeJackpot, bonusJackpot);\r\n    }\r\n\r\n    function getWinNumbers(string blockHash) public pure returns (uint[]){\r\n        bytes32 random = keccak256(bytes(blockHash));\r\n        uint[] memory allRedNumbers = new uint[](40);\r\n        uint[] memory allBlueNumbers = new uint[](10);\r\n        uint[] memory winNumbers = new uint[](6);\r\n        for (uint i = 0; i < 40; i++) {\r\n            allRedNumbers[i] = i + 1;\r\n            if(i < 10) {\r\n                allBlueNumbers[i] = i;\r\n            }\r\n        }\r\n        for (i = 0; i < 5; i++) {\r\n            uint n = 40 - i;\r\n            uint r = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % (n + 1);\r\n            winNumbers[i] = allRedNumbers[r];\r\n            allRedNumbers[r] = allRedNumbers[n - 1];\r\n        }\r\n        uint t = (uint(random[i * 4]) + (uint(random[i * 4 + 1]) << 8) + (uint(random[i * 4 + 2]) << 16) + (uint(random[i * 4 + 3]) << 24)) % 10;\r\n        winNumbers[5] = allBlueNumbers[t];\r\n        return winNumbers;\r\n    }\r\n\r\n    function getTicketsByGameIndex(uint gameIndex_) public view returns (uint[] tickets_){\r\n        Ticket[] storage ticketArray = tickets[gameIndex_][msg.sender];\r\n        tickets_ = new uint[](ticketArray.length * 12);\r\n        uint k;\r\n        for(uint i = 0; i < ticketArray.length; i++) {\r\n            Ticket storage ticket = ticketArray[i];\r\n            tickets_[k++] = i;\r\n            tickets_[k++] = ticket.buyTime;\r\n            tickets_[k++] = games[gameIndex_].price;\r\n            for (uint j = 0; j < 9; j++)\r\n                tickets_[k++] = ticket.numbers[j];\r\n        }\r\n    }\r\n\r\n    function getGameByIndex(uint _gameIndex, bool lately) public view returns (uint[] res){\r\n        if(lately) _gameIndex = gameIndex;\r\n        if(_gameIndex > gameIndex) return res;\r\n        res = new uint[](15);\r\n        Game storage game = games[_gameIndex];\r\n        uint k;\r\n        res[k++] = _gameIndex;\r\n        res[k++] = game.startTime;\r\n        res[k++] = game.price;\r\n        res[k++] = game.ticketIndex;\r\n        res[k++] = bonusJackpot;\r\n        res[k++] = firstPrizeJackpot;\r\n        res[k++] = game.blockIndex;\r\n        if (game.winNumbers.length == 0) {\r\n            for (uint j = 0; j < 6; j++)\r\n                res[k++] = 0;\r\n        } else {\r\n            for (j = 0; j < 6; j++)\r\n                res[k++] = game.winNumbers[j];\r\n        }\r\n        res[k++] = game.goldKey;\r\n        res[k++] = game.averageBonus;\r\n    }\r\n\r\n//    function getGames(uint offset, uint count) public view returns (uint[] res){\r\n//        if (offset > gameIndex) return res;\r\n//        uint k;\r\n//        uint n = offset + count;\r\n//        if (n > gameIndex + 1) n = gameIndex + 1;\r\n//        res = new uint[]((n - offset) * 15);\r\n//        for(uint i = offset; i < n; i++) {\r\n//            Game storage game = games[i];\r\n//            res[k++] = i;\r\n//            res[k++] = game.startTime;\r\n//            res[k++] = game.price;\r\n//            res[k++] = game.ticketIndex;\r\n//            res[k++] = bonusJackpot;\r\n//            res[k++] = firstPrizeJackpot;\r\n//            res[k++] = game.blockIndex;\r\n//            if (game.winNumbers.length == 0) {\r\n//                for (uint j = 0; j < 6; j++)\r\n//                    res[k++] = 0;\r\n//            } else {\r\n//                for (j = 0; j < 6; j++)\r\n//                    res[k++] = game.winNumbers[j];\r\n//            }\r\n//            res[k++] = game.goldKey;\r\n//            res[k++] = game.averageBonus;\r\n//        }\r\n//    }\r\n\r\n    function stopCurrentGame(uint blockIndex) public onlyOwner {\r\n        Game storage game = games[gameIndex];\r\n        buyEnable = false;\r\n        game.blockIndex = blockIndex;\r\n        emit LogStopCurrentGame(gameIndex, blockIndex);\r\n    }\r\n\r\n    function drawNumber(uint blockIndex, string blockHash) public onlyOwner returns (uint[] res){\r\n        Game storage game = games[gameIndex];\r\n        require(game.blockIndex > 0);\r\n        require(blockIndex > game.blockIndex);\r\n        game.blockIndex = blockIndex;\r\n        game.blockHash = blockHash;\r\n        game.winNumbers = getWinNumbers(blockHash);\r\n        emit LogDrawNumbers(gameIndex, blockIndex, blockHash, game.winNumbers);\r\n        res = game.winNumbers;\r\n    }\r\n\r\n    function drawReuslt(uint goldCount, address[] goldKeys, address[] jackpots, uint _jackpot, uint _bonus, uint _averageBonus) public onlyOwner {\r\n        firstPrizeJackpot -= _jackpot;\r\n        bonusJackpot -= _bonus;\r\n        Game storage game = games[gameIndex];\r\n        if(jackpots.length > 0 && _jackpot > 0) {\r\n            deleteAllReports();\r\n            uint amount = _jackpot / jackpots.length;\r\n            for(uint j = 0; j < jackpots.length; j++) {\r\n                allowed[jackpots[j]] += amount;\r\n            }\r\n        } else {\r\n            for(uint i = 0; i < goldKeys.length; i++) {\r\n                game.goldKey += goldCount;\r\n                rewardKey(goldKeys[i], 1);\r\n            }\r\n        }\r\n        game.averageBonus = _averageBonus;\r\n        emit LogDrawReuslt(gameIndex, goldCount, goldKeys, jackpots, _jackpot, _bonus, _averageBonus);\r\n    }\r\n\r\n    function getAllowed(address _address) public onlyOwner view returns(uint) {\r\n        return allowed[_address];\r\n    }\r\n\r\n    function withdraw() public payable {\r\n        uint amount = allowance();\r\n        require(amount >= 0.05 ether);\r\n        withdrawGameIndex[msg.sender] = gameIndex;\r\n        allowed[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit LogTransfer(gameIndex, msg.sender, amount);\r\n    }\r\n\r\n    function allowance() public view returns (uint amount) {\r\n        uint gameIndex_ = withdrawGameIndex[msg.sender];\r\n        if(gameIndex_ == gameIndex) return amount;\r\n        require(gameIndex_ < gameIndex);\r\n        amount += allowed[msg.sender];\r\n        for(uint i = gameIndex_; i < gameIndex; i++) {\r\n            Game storage game = games[i];\r\n            Ticket[] storage tickets_ = tickets[i][msg.sender];\r\n            for(uint j = 0; j < tickets_.length; j++) {\r\n                Ticket storage ticket = tickets_[j];\r\n                if(game.winNumbers[5] != ticket.numbers[8]) {\r\n                    amount += game.averageBonus * ticket.numbers[2];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function startNextGame() public onlyOwner {\r\n        buyEnable = true;\r\n        gameIndex++;\r\n        games[gameIndex].startTime = now;\r\n        games[gameIndex].price = nextPrice;\r\n        emit LogStartNextGame(gameIndex);\r\n    }\r\n\r\n    function addJackpotGuaranteed(uint addJackpot) public onlyOwner {\r\n        firstPrizeJackpot += addJackpot;\r\n    }\r\n\r\n    function rewardKey(address _user, uint gold) public onlyOwner {\r\n        uint goldKey = getKeys(_user);\r\n        goldKey += gold;\r\n        setKeys(_user, goldKey);\r\n        emit LogRewardKey(_user, gold);\r\n    }\r\n\r\n    function getKeys(address _key) public view returns(uint) {\r\n        bytes32 key = keccak256(abi.encodePacked(currentMappingVersion, _key));\r\n        return keys[key];\r\n    }\r\n\r\n    function setKeys(address _key, uint _value) private onlyOwner {\r\n        bytes32 key = keccak256(abi.encodePacked(currentMappingVersion, _key));\r\n        keys[key] = _value;\r\n    }\r\n\r\n    function deleteAllReports() public onlyOwner {\r\n        Game storage game = games[gameIndex];\r\n        game.goldKey = 0;\r\n        currentMappingVersion++;\r\n        emit LogDeleteAllReports(gameIndex, currentMappingVersion);\r\n    }\r\n\r\n    function killContract() public onlyOwner {\r\n        selfdestruct(msg.sender);\r\n        emit LogKillContract(msg.sender);\r\n    }\r\n\r\n    function setPrice(uint price) public onlyOwner {\r\n        nextPrice = price;\r\n        emit LogSetPrice(price);\r\n    }\r\n\r\n    function setBuyEnable(bool _buyEnable) public onlyOwner {\r\n        buyEnable = _buyEnable;\r\n        emit LogSetBuyEnable(msg.sender, _buyEnable);\r\n    }\r\n\r\n    function adjustPrizePoolAfterWin(uint _jackpot, uint _bonus) public onlyOwner {\r\n        firstPrizeJackpot -= _jackpot;\r\n        bonusJackpot -= _bonus;\r\n        emit LogAdjustPrizePoolAfterWin(gameIndex, _jackpot, _bonus);\r\n    }\r\n\r\n    function transferToOwner(uint bonus) public payable onlyOwner {\r\n        msg.sender.transfer(bonus);\r\n        emit LogTransfer(gameIndex, msg.sender, bonus);\r\n    }\r\n\r\n    event LogBuyTicket(uint indexed _gameIndex, address indexed from, bytes numbers, uint _firstPrizeJackpot, uint _bonusJackpot);\r\n    event LogRewardKey(address indexed _user, uint _gold);\r\n    event LogAwardWinner(address indexed _user, uint[] _winner);\r\n    event LogStopCurrentGame(uint indexed _gameIndex, uint indexed _blockIndex);\r\n    event LogDrawNumbers(uint indexed _gameIndex, uint indexed _blockIndex, string _blockHash, uint[] _winNumbers);\r\n    event LogStartNextGame(uint indexed _gameIndex);\r\n    event LogDeleteAllReports(uint indexed _gameIndex, uint _currentMappingVersion);\r\n    event LogKillContract(address indexed _owner);\r\n    event LogSetPrice(uint indexed _price);\r\n    event LogSetBuyEnable(address indexed _owner, bool _buyEnable);\r\n    event LogTransfer(uint indexed _gameIndex, address indexed from, uint value);\r\n    event LogApproval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event LogAdjustPrizePoolAfterWin(uint indexed _gameIndex, uint _jackpot, uint _bonus);\r\n    event LogDrawReuslt(uint indexed _gameIndex, uint _goldCount, address[] _goldKeys, address[] _jackpots, uint _jackpot, uint _bonus, uint _averageBonus);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ticketIndex\",\"type\":\"uint256\"},{\"name\":\"goldKey\",\"type\":\"uint256\"},{\"name\":\"blockIndex\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"string\"},{\"name\":\"averageBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"adjustPrizePoolAfterWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"getKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPrizeJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteAllReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyEnable\",\"type\":\"bool\"}],\"name\":\"setBuyEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goldKeyJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockIndex\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"drawNumber\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addJackpot\",\"type\":\"uint256\"}],\"name\":\"addJackpotGuaranteed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"buyTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawGameIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"transferToOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"depositOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"gold\",\"type\":\"uint256\"}],\"name\":\"rewardKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIndex_\",\"type\":\"uint256\"}],\"name\":\"getTicketsByGameIndex\",\"outputs\":[{\"name\":\"tickets_\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"string\"}],\"name\":\"getWinNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"goldCount\",\"type\":\"uint256\"},{\"name\":\"goldKeys\",\"type\":\"address[]\"},{\"name\":\"jackpots\",\"type\":\"address[]\"},{\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_averageBonus\",\"type\":\"uint256\"}],\"name\":\"drawReuslt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNextGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockIndex\",\"type\":\"uint256\"}],\"name\":\"stopCurrentGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"name\":\"lately\",\"type\":\"bool\"}],\"name\":\"getGameByIndex\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numbers\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"_firstPrizeJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusJackpot\",\"type\":\"uint256\"}],\"name\":\"LogBuyTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gold\",\"type\":\"uint256\"}],\"name\":\"LogRewardKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_winner\",\"type\":\"uint256[]\"}],\"name\":\"LogAwardWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_blockIndex\",\"type\":\"uint256\"}],\"name\":\"LogStopCurrentGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_blockIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_winNumbers\",\"type\":\"uint256[]\"}],\"name\":\"LogDrawNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"}],\"name\":\"LogStartNextGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentMappingVersion\",\"type\":\"uint256\"}],\"name\":\"LogDeleteAllReports\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"LogKillContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"LogSetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyEnable\",\"type\":\"bool\"}],\"name\":\"LogSetBuyEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"LogAdjustPrizePoolAfterWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_goldCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_goldKeys\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_jackpots\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_averageBonus\",\"type\":\"uint256\"}],\"name\":\"LogDrawReuslt\",\"type\":\"event\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d160450649fc3357bebe23063fef3193f4df3fa1e455bbce5018adcef91e05a1"}]}