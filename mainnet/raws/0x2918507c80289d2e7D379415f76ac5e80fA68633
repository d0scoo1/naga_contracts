{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DexOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./library/TransferHelper.sol\\\";\\nimport \\\"./dependencies/openzeppelin/Ownable.sol\\\";\\nimport \\\"./library/Configure.sol\\\";\\nimport \\\"./interface/IAccountManager.sol\\\";\\nimport \\\"./interface/IAuthCenter.sol\\\";\\nimport \\\"./interface/IAccount.sol\\\";\\nimport \\\"./interface/IFundsProvider.sol\\\";\\nimport \\\"./interface/IOpManager.sol\\\";\\nimport \\\"./FundsBasic.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract DexOperator is Ownable, FundsBasic {\\n    using TransferHelper for address;\\n\\n    event CreateAccount(string id, address account);\\n    event DirectlyWithdraw(string id, string uniqueId, address token, uint256 amount);\\n    event SwapWithdraw(string id, string uniqueId, address srcToken, address dstToken, uint256 srcAmount, uint256 dstAmount);\\n    event Fee(string uniqueId, address feeTo, address token, uint256 amount);\\n\\n    event UpdateOneInchRouter(address pre, address oneInchRouter);\\n    event SetOpManager(address preOpManager, address opManager);\\n    event SetAccountManager(address preAccountManager, address accountManager);\\n    event SetAuthCenter(address preAuthCenter, address authCenter);\\n    event SetFundsProvider(address preFundsProvider, address fundsProvider);\\n    event SetFeeTo(address preFeeTo, address feeTo);\\n\\n    event Swap(\\n        string id,\\n        string uniqueId,\\n        uint8 assetFrom,\\n        uint8 action,\\n        address srcToken,\\n        address dstToken,\\n        address from,\\n        address to,\\n        address feeTo,\\n        uint256 srcTokenAmount,\\n        uint256 srcFeeAmount,\\n        uint256 returnAmount\\n    );\\n\\n    address public opManager;\\n    address public accountManager;\\n    address public authCenter;\\n    address public fundsProvider;\\n    address public feeTo;\\n    address public oneInchRouter;\\n    // address oneInchRouter = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n\\n    bool flag;\\n\\n    enum AssetFrom {\\n        FUNDSPROVIDER,\\n        ACCOUNT\\n    }\\n\\n    enum Action {\\n        SWAP,\\n        PRECROSS\\n    }\\n\\n    modifier onlyRunning() {\\n        bool running = IOpManager(opManager).isRunning(address(this));\\n        require(running, \\\"BYDEFI: op paused!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAccess() {\\n        IAuthCenter(authCenter).ensureOperatorAccess(_msgSender());\\n        _;\\n    }\\n\\n    function init(\\n        address _opManager,\\n        address _accountManager,\\n        address _authCenter,\\n        address _fundsProvider,\\n        address _oneInchRouter,\\n        address _feeTo\\n    ) external {\\n        require(!flag, \\\"BYDEFI: already initialized!\\\");\\n        super.initialize();\\n        opManager = _opManager;\\n        accountManager = _accountManager;\\n        authCenter = _authCenter;\\n        fundsProvider = _fundsProvider;\\n        oneInchRouter = _oneInchRouter;\\n        feeTo = _feeTo;\\n        flag = true;\\n    }\\n\\n    function doSwap(\\n        string memory _id,\\n        string memory _uniqueId,\\n        uint8 _assetFrom,\\n        uint8 _action,\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 _srcAmount,\\n        uint256 _srcFeeAmount,\\n        bytes calldata _data\\n    ) external onlyAccess onlyRunning returns (uint256 returnAmount) {\\n        require(_assetFrom <= 1 && _action <= 1, \\\"BYDEFI: assetFrom or action invalid!\\\");\\n        require(_srcToken != Configure.ZERO_ADDRESS && _dstToken != Configure.ZERO_ADDRESS, \\\"BYDEFI: invalid token input!\\\");\\n        require(_srcAmount > 0, \\\"BYDEFI: src amount should gt 0!\\\");\\n        require(_data.length > 2, \\\"BYDEFI: calldata should not be empty!\\\");\\n\\n        returnAmount = _swapInternal(_id, _uniqueId, _assetFrom, _action, _srcToken, _dstToken, _srcAmount, _srcFeeAmount, _data);\\n    }\\n\\n    struct LocalVars {\\n        address from;\\n        address to;\\n        uint256 amt;\\n        uint256 value;\\n        uint256 initalBal;\\n        uint256 finalBal;\\n        bool success;\\n    }\\n\\n    function _swapInternal(\\n        string memory _id,\\n        string memory _uniqueId,\\n        uint8 _assetFrom,\\n        uint8 _action,\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 _srcAmount,\\n        uint256 _srcFeeAmount,\\n        bytes calldata _data\\n    ) internal returns (uint256 returnAmount) {\\n        LocalVars memory vars;\\n        (vars.from, vars.to) = makeData(_assetFrom, _action, _id, _srcToken, _dstToken);\\n\\n        vars.amt = IAccount(vars.from).pull(_srcToken, _srcAmount, address(this));\\n        require(vars.amt == _srcAmount, \\\"BYDEFI: invalid src amount input!\\\");\\n        vars.initalBal = _getTokenBal(IERC20(_dstToken));\\n\\n        if (Configure.ETH_ADDRESS == _srcToken) {\\n            vars.value = _srcAmount;\\n        } else {\\n            _srcToken.safeApprove(oneInchRouter, vars.amt);\\n        }\\n\\n        (vars.success, ) = oneInchRouter.call{ value: vars.value }(_data);\\n        if (!vars.success) {\\n            revert(\\\"BYDEFI: 1Inch swap failed\\\");\\n        }\\n\\n        vars.finalBal = _getTokenBal(IERC20(_dstToken));\\n\\n        unchecked {\\n            returnAmount = vars.finalBal - vars.initalBal;\\n        }\\n\\n        // double check, in case dstToken mismatch calldata\\n        require(returnAmount > 0, \\\"BYDEFI: swap error!\\\");\\n\\n        if (Configure.ETH_ADDRESS != _dstToken) {\\n            _dstToken.safeApprove(vars.to, returnAmount);\\n            IAccount(vars.to).push(_dstToken, returnAmount);\\n        } else {\\n            IAccount(vars.to).push{ value: returnAmount }(_dstToken, returnAmount);\\n        }\\n\\n        if (_srcFeeAmount > 0 && feeTo != Configure.ZERO_ADDRESS) {\\n            IAccount(vars.from).pull(_srcToken, _srcFeeAmount, feeTo);\\n            emit Fee(_uniqueId, feeTo, _srcToken, _srcFeeAmount);\\n        }\\n\\n        emit Swap(_id, _uniqueId, _assetFrom, _action, _srcToken, _dstToken, vars.from, vars.to, feeTo, vars.amt, _srcFeeAmount, returnAmount);\\n    }\\n\\n    function directlyWithdraw(\\n        string memory _id,\\n        string memory _uniqueId,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _feeAmount\\n    ) external onlyAccess onlyRunning returns (uint256 amt) {\\n        require(IFundsProvider(fundsProvider).isSupported(_token), \\\"BYDEFI: directlyWithdraw unsupported token!\\\");\\n        require(_amount > 0, \\\"BYDEFI: withdraw amount should gt 0!\\\");\\n\\n        address account = _getAccountInternal(_id);\\n        require(account != Configure.ZERO_ADDRESS, \\\"BYDEFI: invalid id\\\");\\n\\n        amt = IAccount(account).pull(_token, _amount, fundsProvider);\\n\\n        if (_feeAmount > 0 && feeTo != Configure.ZERO_ADDRESS) {\\n            IAccount(account).pull(_token, _feeAmount, feeTo);\\n        }\\n\\n        emit DirectlyWithdraw(_id, _uniqueId, _token, amt);\\n        emit Fee(_uniqueId, feeTo, _token, _feeAmount);\\n    }\\n\\n    function swapWithdraw(\\n        string memory _id,\\n        string memory _uniqueId,\\n        address _srcToken,\\n        address _dstToken,\\n        uint256 _srcAmount,\\n        uint256 _srcFeeAmount,\\n        bytes calldata _data\\n    ) external onlyAccess onlyRunning returns (uint256 amt) {\\n        require(_srcToken != Configure.ZERO_ADDRESS && _dstToken != Configure.ZERO_ADDRESS, \\\"BYDEFI: invalid token input!\\\");\\n        require(_srcAmount > 0, \\\"BYDEFI: src amount should gt 0!\\\");\\n        require(_data.length != 0, \\\"BYDEFI: calldata should not be empty!\\\");\\n\\n        amt = _swapInternal(_id, _uniqueId, uint8(AssetFrom.ACCOUNT), uint8(Action.PRECROSS), _srcToken, _dstToken, _srcAmount, _srcFeeAmount, _data);\\n\\n        emit SwapWithdraw(_id, _uniqueId, _srcToken, _dstToken, _srcAmount, amt);\\n        emit Fee(_uniqueId, feeTo, _srcToken, _srcFeeAmount);\\n    }\\n\\n    function createAccount(string memory _id) external onlyAccess returns (address account) {\\n        account = IAccountManager(accountManager).createAccount(_id);\\n\\n        emit CreateAccount(_id, account);\\n    }\\n\\n    function getBalanceById(string memory _id, address[] memory _tokens) external view returns (uint256 balance, uint256[] memory amounts) {\\n        address account = _getAccountInternal(_id);\\n        require(account != Configure.ZERO_ADDRESS, \\\"BYDEFI: invalid id\\\");\\n        (balance, amounts) = IAccount(account).getBalance(_tokens);\\n    }\\n\\n    function makeData(\\n        uint8 _assetFrom,\\n        uint8 _action,\\n        string memory _id,\\n        address _srcToken,\\n        address _dstToken\\n    ) internal returns (address from, address to) {\\n        address account = _getAccountInternal(_id);\\n        if (account == Configure.ZERO_ADDRESS) {\\n            account = IAccountManager(accountManager).createAccount(_id);\\n        }\\n\\n        if (uint8(AssetFrom.FUNDSPROVIDER) == _assetFrom && uint8(Action.SWAP) == _action) {\\n            // by offchain account, usdt provided by funds provider, swap\\n            require(IFundsProvider(fundsProvider).isSupported(_srcToken), \\\"BYDEFI: src token not supported by funds provider!\\\");\\n            from = fundsProvider;\\n            to = account;\\n        } else if (uint8(AssetFrom.ACCOUNT) == _assetFrom && uint8(Action.SWAP) == _action) {\\n            // by onchain account, token provided by sub constract, swap\\n            from = account;\\n            to = account;\\n        } else if (uint8(AssetFrom.ACCOUNT) == _assetFrom && uint8(Action.PRECROSS) == _action) {\\n            // by onchain account, token provided by sub contract, cross chain\\n            require(IFundsProvider(fundsProvider).isSupported(_dstToken), \\\"BYDEFI: dst token not supported by funds provider!\\\");\\n            from = account;\\n            to = fundsProvider;\\n        } else {\\n            revert(\\\"BYDEFI: invalid asset from and action combination!\\\");\\n        }\\n    }\\n\\n    function updateOneInchRouter(address _router) external onlyOwner {\\n        address pre = oneInchRouter;\\n        oneInchRouter = _router;\\n\\n        emit UpdateOneInchRouter(pre, oneInchRouter);\\n    }\\n\\n    function setOpManager(address _opManager) external onlyOwner {\\n        address pre = opManager;\\n        opManager = _opManager;\\n        emit SetOpManager(pre, _opManager);\\n    }\\n\\n    function setAccountManager(address _accManager) external onlyOwner {\\n        address pre = accountManager;\\n        accountManager = _accManager;\\n        emit SetAccountManager(pre, _accManager);\\n    }\\n\\n    function setAuthCenter(address _authCenter) external onlyOwner {\\n        address pre = authCenter;\\n        authCenter = _authCenter;\\n        emit SetAuthCenter(pre, _authCenter);\\n    }\\n\\n    function setFundsProvider(address _fundsProvider) external onlyOwner {\\n        address pre = fundsProvider;\\n        fundsProvider = _fundsProvider;\\n        emit SetFundsProvider(pre, _fundsProvider);\\n    }\\n\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        address pre = feeTo;\\n        feeTo = _feeTo;\\n        emit SetFeeTo(pre, _feeTo);\\n    }\\n\\n    function push(address _token, uint256 _amt) external payable override returns (uint256 amt) {\\n        _token;\\n        _amt;\\n        amt;\\n        revert();\\n    }\\n\\n    function pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) external override returns (uint256 amt) {\\n        IAuthCenter(authCenter).ensureOperatorPullAccess(_msgSender());\\n        amt = _pull(_token, _amt, _to);\\n    }\\n\\n    function getAccount(string memory _id) external view returns (address account) {\\n        return _getAccountInternal(_id);\\n    }\\n\\n    function _getAccountInternal(string memory _id) internal view returns (address account) {\\n        account = IAccountManager(accountManager).getAccount(_id);\\n    }\\n\\n    function _getTokenBal(IERC20 token) internal view returns (uint256 _amt) {\\n        _amt = address(token) == Configure.ETH_ADDRESS ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function useless() public pure returns (uint256 a, string memory s) {\\n        a = 100;\\n        s = \\\"hello world!\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/library/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initialize() internal {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // console.log(\\\"owner():\\\", owner());\\n        // console.log(\\\"msgSender:\\\", _msgSender());\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    // function renounceOwnership() public virtual onlyOwner {\\n    //     _transferOwnership(address(0));\\n    // }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/Configure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Configure {\\n    address public constant ZERO_ADDRESS = address(0);\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\"\r\n    },\r\n    \"contracts/interface/IAccountManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccountManager {\\n    function createAccount(string memory id) external returns (address _account);\\n\\n    function getAccount(string memory id) external view returns (address _account);\\n\\n    function isAccount(address _address) external view returns (bool, string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAuthCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAuthCenter {\\n    function ensureAccountAccess(address _caller) external view;\\n    function ensureFundsProviderPullAccess(address _caller) external view;\\n    function ensureFundsProviderRebalanceAccess(address _caller) external view;\\n    function ensureOperatorAccess(address _caller) external view;\\n    function ensureOperatorPullAccess(address _caller) external view;\\n    function ensureAccountManagerAccess(address _caller) external view;\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccount {\\n    function init(address _authCenter) external;\\n    \\n    function getBalance(address[] memory _tokens) external view returns (uint256, uint256[] memory);\\n\\n    function pull(\\n        address token,\\n        uint256 amt,\\n        address to\\n    ) external returns (uint256 _amt);\\n\\n    function push(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFundsProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFundsProvider {\\n    function init(address _authCenter) external;\\n\\n    function getBalance(address[] memory _tokens)\\n        external\\n        view\\n        returns (uint256, uint256[] memory);\\n\\n    function pull(\\n        address token,\\n        uint256 amt,\\n        address to\\n    ) external returns (uint256 _amt);\\n\\n    function push(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n\\n    function isSupported(address _token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOpManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOpManager {\\n    function isRunning(address _op) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/FundsBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport { IERC20 } from \\\"./dependencies/openzeppelin/IERC20.sol\\\";\\nimport \\\"./library/Configure.sol\\\";\\nimport \\\"./library/TransferHelper.sol\\\";\\n\\nabstract contract FundsBasic {\\n    using TransferHelper for address;\\n    bool internal locked;\\n\\n    modifier noReentrant() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    event Push(address token, uint256 amt);\\n    event Pull(address token, uint256 amt, address to);\\n\\n    function push(address _token, uint256 _amt) external payable virtual returns (uint256 amt) {\\n        amt = _amt;\\n\\n        if (_token != Configure.ETH_ADDRESS) {\\n            _token.safeTransferFrom(msg.sender, address(this), _amt);\\n        } else {\\n            require(msg.value == _amt, \\\"BYDEFI: Invalid Ether Amount\\\");\\n        }\\n        emit Push(_token, _amt);\\n    }\\n\\n    function pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) external virtual returns (uint256 amt);\\n\\n    function _pull(\\n        address _token,\\n        uint256 _amt,\\n        address _to\\n    ) internal noReentrant returns (uint256 amt) {\\n        amt = _amt;\\n        if (_token == Configure.ETH_ADDRESS) {\\n            (bool retCall, ) = _to.call{ value: _amt }(\\\"\\\");\\n            require(retCall != false, \\\"BYDEFI: pull ETH from account fail\\\");\\n        } else {\\n            _token.safeTransfer(_to, _amt);\\n        }\\n        emit Pull(_token, _amt, _to);\\n    }\\n\\n    function getBalance(IERC20[] memory _tokens) external view returns (uint256, uint256[] memory) {\\n        uint256[] memory array = new uint256[](_tokens.length);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            array[i] = _tokens[i].balanceOf(address(this));\\n        }\\n        return (address(this).balance, array);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreateAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uniqueId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectlyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uniqueId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Pull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preAccountManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountManager\",\"type\":\"address\"}],\"name\":\"SetAccountManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preAuthCenter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authCenter\",\"type\":\"address\"}],\"name\":\"SetAuthCenter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preFeeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preFundsProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsProvider\",\"type\":\"address\"}],\"name\":\"SetFundsProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preOpManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"opManager\",\"type\":\"address\"}],\"name\":\"SetOpManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uniqueId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"assetFrom\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uniqueId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"}],\"name\":\"SwapWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pre\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oneInchRouter\",\"type\":\"address\"}],\"name\":\"UpdateOneInchRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uniqueId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"directlyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uniqueId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_assetFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"doSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getBalanceById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundsProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInchRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accManager\",\"type\":\"address\"}],\"name\":\"setAccountManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authCenter\",\"type\":\"address\"}],\"name\":\"setAuthCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundsProvider\",\"type\":\"address\"}],\"name\":\"setFundsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opManager\",\"type\":\"address\"}],\"name\":\"setOpManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uniqueId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"swapWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateOneInchRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useless\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DexOperator", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}