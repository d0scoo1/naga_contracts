{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: Vault.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: AddressUpgradeable.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\\'s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: BadgerGuestlistApi.sol\r\n\r\ninterface BadgerGuestListAPI {\r\n    function authorized(\r\n        address guest,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool);\r\n\r\n    function setGuests(address[] calldata _guests, bool[] calldata _invited) external;\r\n}\r\n\r\n// File: IERC20Detailed.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Detailed {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\\'s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\'s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\\'s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\\'s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: IERC20Upgradeable.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\\'s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\'s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\\'s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\\'s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: IStrategy.sol\r\n\r\ninterface IStrategy {\r\n    // Return value for harvest, tend and balanceOfRewards\r\n    struct TokenAmount {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    function balanceOf() external view returns (uint256 balance);\r\n\r\n    function balanceOfPool() external view returns (uint256 balance);\r\n\r\n    function balanceOfWant() external view returns (uint256 balance);\r\n\r\n    function earn() external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawToVault() external;\r\n\r\n    function withdrawOther(address _asset) external;\r\n\r\n    function harvest() external returns (TokenAmount[] memory harvested);\r\n    function tend() external returns (TokenAmount[] memory tended);\r\n    function balanceOfRewards() external view returns (TokenAmount[] memory rewards);\r\n\r\n    function emitNonProtectedToken(address _token) external;\r\n}\r\n\r\n// File: IVault.sol\r\n\r\ninterface IVault {\r\n    function rewards() external view returns (address);\r\n\r\n    function reportHarvest(\r\n        uint256 _harvestedAmount\r\n    ) external;\r\n\r\n    function reportAdditionalToken(address _token) external;\r\n\r\n    // Fees\r\n    function performanceFeeGovernance() external view returns (uint256);\r\n\r\n    function performanceFeeStrategist() external view returns (uint256);\r\n\r\n    function withdrawalFee() external view returns (uint256);\r\n\r\n    function managementFee() external view returns (uint256);\r\n\r\n    // Actors\r\n    function governance() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    // External\r\n    function deposit(uint256 _amount) external;\r\n}\r\n\r\n// File: SafeMathUpgradeable.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity\\'s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\\'s recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring \\'a\\' not being zero, but the\r\n        // benefit is lost if \\'b\\' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\\'s `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\\'s `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity\\'s `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity\\'s `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity\\'s `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: Initializable.sol\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can\\'t have a constructor, it\\'s common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n// File: SafeERC20Upgradeable.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \\'safeIncreaseAllowance\\' and \\'safeDecreaseAllowance\\'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\\'s return data size checking mechanism, since\r\n        // we\\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: ContextUpgradeable.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: ReentrancyGuardUpgradeable.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\\'s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\\'s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\\'s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: SettAccessControl.sol\r\n\r\n/*\r\n    Common base for permissioned roles throughout Sett ecosystem\r\n*/\r\ncontract SettAccessControl is Initializable {\r\n    address public governance;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    // ===== MODIFIERS =====\r\n    function _onlyGovernance() internal view {\r\n        require(msg.sender == governance, \"onlyGovernance\");\r\n    }\r\n\r\n    function _onlyGovernanceOrStrategist() internal view {\r\n        require(msg.sender == strategist || msg.sender == governance, \"onlyGovernanceOrStrategist\");\r\n    }\r\n\r\n    function _onlyAuthorizedActors() internal view {\r\n        require(msg.sender == keeper || msg.sender == governance, \"onlyAuthorizedActors\");\r\n    }\r\n\r\n    // ===== PERMISSIONED ACTIONS =====\r\n\r\n    /// @notice Change strategist address\r\n    /// @notice Can only be changed by governance itself\r\n    function setStrategist(address _strategist) external {\r\n        _onlyGovernance();\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /// @notice Change keeper address\r\n    /// @notice Can only be changed by governance itself\r\n    function setKeeper(address _keeper) external {\r\n        _onlyGovernance();\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @notice Can only be changed by governance itself\r\n    function setGovernance(address _governance) public {\r\n        _onlyGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: ERC20Upgradeable.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\\'t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``\\'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\\'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: PausableUpgradeable.sol\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: Vault.sol\r\n\r\n/*\r\n    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol\r\n    \r\n    Changelog:\r\n\r\n    V1.1\r\n    * Strategist no longer has special function calling permissions\r\n    * Version function added to contract\r\n    * All write functions, with the exception of transfer, are pausable\r\n    * Keeper or governance can pause\r\n    * Only governance can unpause\r\n\r\n    V1.2\r\n    * Transfer functions are now pausable along with all other non-permissioned write functions\r\n    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well\r\n\r\n    V1.3\r\n    * Add guest list functionality\r\n    * All deposits can be optionally gated by external guestList approval logic on set guestList contract\r\n\r\n    V1.4\r\n    * Add depositFor() to deposit on the half of other users. That user will then be blockLocked.\r\n\r\n    V1.5\r\n    * Removed Controller\r\n        - Removed harvest from vault (only on strategy)\r\n    * Params added to track autocompounded rewards (lifeTimeEarned, lastHarvestedAt, lastHarvestAmount, assetsAtLastHarvest)\r\n      this would work in sync with autoCompoundRatio to help us track harvests better.\r\n    * Fees\r\n        - Strategy would report the autocompounded harvest amount to the vault\r\n        - Calculation performanceFeeGovernance, performanceFeeStrategist, withdrawalFee, managementFee moved to the vault.\r\n        - Vault mints shares for performanceFees and managementFee to the respective recipient (treasury, strategist)\r\n        - withdrawal fees is transferred to the rewards address set\r\n    * Permission:\r\n        - Strategist can now set performance, withdrawal and management fees\r\n        - Governance will determine maxPerformanceFee, maxWithdrawalFee, maxManagementFee that can be set to prevent rug of funds.\r\n    * Strategy would take the actors from the vault it is connected to\r\n    * All governance related fees goes to treasury\r\n*/\r\n\r\ncontract Vault is ERC20Upgradeable, SettAccessControl, PausableUpgradeable, ReentrancyGuardUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    uint256 constant ONE_ETH = 1e18;\r\n\r\n    /// ===== Storage Variables ====\r\n\r\n    IERC20Upgradeable public token; // Token used for deposits\r\n    BadgerGuestListAPI public guestList; // guestlist when vault is in experiment/ guarded state\r\n\r\n    bool public pausedDeposit; // false by default Allows to only block deposits, use pause for the normal pause state\r\n\r\n    address public strategy; // address of the strategy connected to the vault\r\n    address public guardian; // guardian of vault and strategy\r\n    address public treasury; // set by governance ... any fees go there\r\n\r\n    address public badgerTree; // Address we send tokens too via reportAdditionalTokens\r\n\r\n    /// @dev name and symbol prefixes for lpcomponent token of vault\r\n    string internal constant _defaultNamePrefix = \"Badger Sett \";\r\n    string internal constant _symbolSymbolPrefix = \"b\";\r\n\r\n    /// Params to track autocompounded rewards\r\n    uint256 public lifeTimeEarned; // keeps track of total earnings\r\n    uint256 public lastHarvestedAt; // timestamp of the last harvest\r\n    uint256 public lastHarvestAmount; // amount harvested during last harvest\r\n    uint256 public assetsAtLastHarvest; // assets for which the harvest took place.\r\n\r\n    mapping (address => uint256) public additionalTokensEarned;\r\n    mapping (address => uint256) public lastAdditionalTokenAmount;\r\n\r\n    /// Fees ///\r\n    /// @notice all fees will be in bps\r\n    uint256 public performanceFeeGovernance; // Perf fee sent to `treasury`\r\n    uint256 public performanceFeeStrategist; // Perf fee sent to `strategist`\r\n    uint256 public withdrawalFee; // fee issued to `treasury` on withdrawal \r\n    uint256 public managementFee; // fee issued to `treasury` on report (typically on harvest, but only if strat is autocompounding)\r\n\r\n    uint256 public maxPerformanceFee; // maximum allowed performance fees\r\n    uint256 public maxWithdrawalFee; // maximum allowed withdrawal fees\r\n    uint256 public maxManagementFee; // maximum allowed management fees\r\n\r\n    uint256 public toEarnBps; // NOTE: in BPS, minimum amount of token to deposit into strategy when earn is called\r\n\r\n    /// ===== Constants ====\r\n\r\n    uint256 public constant MAX_BPS = 10_000;\r\n    uint256 public constant SECS_PER_YEAR = 31_556_952; // 365.2425 days\r\n\r\n    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; // Never higher than 2%\r\n    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; // Never higher than 30% // 30% maximum performance fee // We usually do 20, so this is insanely high already\r\n    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; // Never higher than 2%\r\n\r\n    /// ===== Events ====\r\n\r\n    // Emitted when a token is sent to the badgerTree for emissions\r\n    event TreeDistribution(\r\n        address indexed token,\r\n        uint256 amount,\r\n        uint256 indexed blockNumber,\r\n        uint256 timestamp\r\n    );\r\n\r\n    // Emitted during a report, when there has been an increase in pricePerFullShare (ppfs)\r\n    event Harvested(address indexed token, uint256 amount, uint256 indexed blockNumber, uint256 timestamp);\r\n\r\n    event SetTreasury(address indexed newTreasury);\r\n    event SetStrategy(address indexed newStrategy);\r\n    event SetToEarnBps(uint256 newEarnToBps);\r\n    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);\r\n    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);\r\n    event SetMaxManagementFee(uint256 newMaxManagementFee);\r\n    event SetGuardian(address indexed newGuardian);\r\n    event SetGuestList(address indexed newGuestList);\r\n    event SetWithdrawalFee(uint256 newWithdrawalFee);\r\n    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);\r\n    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);\r\n    event SetManagementFee(uint256 newManagementFee);\r\n\r\n    event PauseDeposits(address indexed pausedBy);\r\n    event UnpauseDeposits(address indexed pausedBy);\r\n\r\n    /// @notice Initializes the Sett. Can only be called once, ideally when the contract is deployed.\r\n    /// @param _token Address of the token that can be deposited into the sett.\r\n    /// @param _governance Address authorized as governance.\r\n    /// @param _keeper Address authorized as keeper.\r\n    /// @param _guardian Address authorized as guardian.\r\n    /// @param _treasury Address to distribute governance fees/rewards to.\r\n    /// @param _strategist Address authorized as strategist.\r\n    /// @param _badgerTree Address of badgerTree used for emissions.\r\n    /// @param _name Specify a custom sett name. Leave empty for default value.\r\n    /// @param _symbol Specify a custom sett symbol. Leave empty for default value.\r\n    /// @param _feeConfig Values for the 4 different types of fees charges by the sett\r\n    ///         [performanceFeeGovernance, performanceFeeStrategist, withdrawToVault, managementFee]\r\n    ///         Each fee should be less than the constant hard-caps defined above. \r\n    function initialize(\r\n        address _token,\r\n        address _governance,\r\n        address _keeper,\r\n        address _guardian,\r\n        address _treasury,\r\n        address _strategist,\r\n        address _badgerTree,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256[4] memory _feeConfig\r\n    ) public initializer whenNotPaused {\r\n        require(_token != address(0)); // dev: _token address should not be zero\r\n        require(_governance != address(0)); // dev: _governance address should not be zero\r\n        require(_keeper != address(0)); // dev: _keeper address should not be zero\r\n        require(_guardian != address(0)); // dev: _guardian address should not be zero\r\n        require(_treasury != address(0)); // dev: _treasury address should not be zero\r\n        require(_strategist != address(0)); // dev: _strategist address should not be zero\r\n        require(_badgerTree != address(0)); // dev: _badgerTree address should not be zero\r\n\r\n        // Check for fees being reasonable (see below for interpretation)\r\n        require(_feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP, \"performanceFeeGovernance too high\");\r\n        require(_feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP, \"performanceFeeStrategist too high\");\r\n        require(_feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP, \"withdrawalFee too high\");\r\n        require(_feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP, \"managementFee too high\");\r\n\r\n        string memory name;\r\n        string memory symbol;\r\n\r\n        // If they are non empty string we\\'ll use the custom names\r\n        // Else just add the default prefix\r\n        IERC20Detailed namedToken = IERC20Detailed(_token);\r\n\r\n        if(keccak256(abi.encodePacked(_name)) != keccak256(\"\")) {\r\n            name = _name;\r\n        } else {\r\n            name = string(abi.encodePacked(_defaultNamePrefix, namedToken.name()));\r\n        }\r\n\r\n        if (keccak256(abi.encodePacked(_symbol)) != keccak256(\"\")) {\r\n            symbol = _symbol;\r\n        } else {\r\n            symbol = string(abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol()));\r\n        }\r\n\r\n        // Initializing the lpcomponent token\r\n        __ERC20_init(name, symbol);\r\n        // Initialize the other contracts\r\n        __Pausable_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        token = IERC20Upgradeable(_token);\r\n        governance = _governance;\r\n        treasury = _treasury;\r\n        strategist = _strategist;\r\n        keeper = _keeper;\r\n        guardian = _guardian;\r\n        badgerTree = _badgerTree;\r\n\r\n        lastHarvestedAt = block.timestamp; // setting initial value to the time when the vault was deployed\r\n\r\n        performanceFeeGovernance = _feeConfig[0];\r\n        performanceFeeStrategist = _feeConfig[1];\r\n        withdrawalFee = _feeConfig[2];\r\n        managementFee = _feeConfig[3];\r\n        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; // 30% max performance fee\r\n        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; // 2% maximum withdrawal fee\r\n        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; // 2% maximum management fee\r\n\r\n        toEarnBps = 9_500; // initial value of toEarnBps // 95% is invested to the strategy, 5% for cheap withdrawals\r\n    }\r\n\r\n    /// ===== Modifiers ====\r\n\r\n    /// @notice Checks whether a call is from guardian or governance. \r\n    function _onlyAuthorizedPausers() internal view {\r\n        require(msg.sender == guardian || msg.sender == governance, \"onlyPausers\");\r\n    }\r\n\r\n    /// @notice Checks whether a call is from the strategy.\r\n    function _onlyStrategy() internal view {\r\n        require(msg.sender == strategy, \"onlyStrategy\");\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n    \r\n    /// @notice Used to track the deployed version of the contract.\r\n    /// @return Current version of the contract.\r\n    function version() external pure returns (string memory) {\r\n        return \"1.5\";\r\n    }\r\n\r\n    /// @notice Gives the price for a single Sett share.\r\n    /// @dev Sett starts with a price per share of 1.\r\n    /// @return Value of a single share.\r\n    function getPricePerFullShare() public view returns (uint256) {\r\n        if (totalSupply() == 0) {\r\n            return ONE_ETH;\r\n        }\r\n        return balance().mul(ONE_ETH).div(totalSupply());\r\n    }\r\n\r\n    /// @notice Gives the total balance of the underlying token within the sett and strategy system.\r\n    /// @return Balance of token handled by the sett.\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this)).add(IStrategy(strategy).balanceOf());\r\n    }\r\n\r\n    /// @notice Defines how much of the Setts\\' underlying is available for strategy to borrow.\r\n    /// @return Amount of tokens that the sett can provide to the strategy.\r\n    function available() public view returns (uint256) {\r\n        return token.balanceOf(address(this)).mul(toEarnBps).div(MAX_BPS);\r\n    }\r\n\r\n    /// ===== Public Actions =====\r\n\r\n    /// @notice Deposits `_amount` tokens, issuing shares. \r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositFor` for details on how deposit is implemented. \r\n    /// @param _amount Quantity of tokens to deposit. \r\n    function deposit(uint256 _amount) external whenNotPaused {\r\n        _depositWithAuthorization(_amount, new bytes32[](0));\r\n    }\r\n\r\n    /// @notice Deposits `_amount` tokens, issuing shares. \r\n    ///         Checks the guestlist to verify that the calling account is authorized to make a deposit for the specified `_amount`.\r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\r\n    /// @param _amount Quantity of tokens to deposit. \r\n    /// @param proof Merkle proof to validate in the guestlist.\r\n    function deposit(uint256 _amount, bytes32[] memory proof) external whenNotPaused {\r\n        _depositWithAuthorization(_amount, proof);\r\n    }\r\n\r\n    /// @notice Deposits all tokens, issuing shares. \r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositFor` for details on how deposit is implemented. \r\n    function depositAll() external whenNotPaused {\r\n        _depositWithAuthorization(token.balanceOf(msg.sender), new bytes32[](0));\r\n    }\r\n\r\n    /// @notice Deposits all tokens, issuing shares. \r\n    ///         Checks the guestlist to verify that the calling is authorized to make a full deposit.\r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\r\n    /// @param proof Merkle proof to validate in the guestlist.\r\n    function depositAll(bytes32[] memory proof) external whenNotPaused {\r\n        _depositWithAuthorization(token.balanceOf(msg.sender), proof);\r\n    }\r\n\r\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositFor` for details on how deposit is implemented. \r\n    /// @param _recipient Address to issue the Sett shares to.\r\n    /// @param _amount Quantity of tokens to deposit. \r\n    function depositFor(address _recipient, uint256 _amount) external whenNotPaused {\r\n        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));\r\n    }\r\n\r\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \r\n    ///         Checks the guestlist to verify that `recipient` is authorized to make a deposit for the specified `_amount`.\r\n    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true. \r\n    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.\r\n    /// @param _recipient Address to issue the Sett shares to.\r\n    /// @param _amount Quantity of tokens to deposit. \r\n    function depositFor(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes32[] memory proof\r\n    ) external whenNotPaused {\r\n        _depositForWithAuthorization(_recipient, _amount, proof);\r\n    }\r\n\r\n    /// @notice Redeems `_shares` for an appropriate amount of tokens.\r\n    ///         Note that withdrawals are not processed when the Sett is paused. \r\n    /// @dev See `_withdraw` for details on how withdrawals are processed.\r\n    /// @param _shares Quantity of shares to redeem. \r\n    function withdraw(uint256 _shares) external whenNotPaused {\r\n        _withdraw(_shares);\r\n    }\r\n\r\n    /// @notice Redeems all shares, issuing an appropriate amount of tokens. \r\n    ///         Note that withdrawals are not processed when the Sett is paused. \r\n    /// @dev See `_withdraw` for details on how withdrawals are processed.\r\n    function withdrawAll() external whenNotPaused {\r\n        _withdraw(balanceOf(msg.sender));\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Strategy =====\r\n\r\n    /// @notice Used by the strategy to report a harvest to the sett.\r\n    ///         Issues shares for the strategist and treasury based on the performance fees and harvested amount. \r\n    ///         Issues shares for the treasury based on the management fee and the time elapsed since last harvest. \r\n    ///         Updates harvest variables for on-chain APR tracking.\r\n    ///         This can only be called by the strategy.\r\n    /// @dev This implicitly trusts that the strategy reports the correct amount.\r\n    ///      Pausing on this function happens at the strategy level.\r\n    /// @param _harvestedAmount Amount of underlying token harvested by the strategy.\r\n    function reportHarvest(\r\n        uint256 _harvestedAmount\r\n    ) external nonReentrant {\r\n        _onlyStrategy();\r\n\r\n        uint256 harvestTime = block.timestamp;\r\n        uint256 assetsAtHarvest = balance().sub(_harvestedAmount); // Must be less than or equal or revert\r\n\r\n        _handleFees(_harvestedAmount, harvestTime);\r\n\r\n        // Updated lastHarvestAmount\r\n        lastHarvestAmount = _harvestedAmount;\r\n\r\n        // if we withdrawAll\r\n        // we will have some yield left\r\n        // having 0 for assets will inflate APY\r\n        // Instead, have the last harvest report with the previous assets\r\n        // And if you end up harvesting again, that report will have both 0s\r\n        if (assetsAtHarvest != 0) {\r\n            assetsAtLastHarvest = assetsAtHarvest;\r\n        } else if (_harvestedAmount == 0) {\r\n            // If zero\r\n            assetsAtLastHarvest = 0;\r\n        }\r\n\r\n        lifeTimeEarned = lifeTimeEarned.add(_harvestedAmount);\r\n        // Update time either way\r\n        lastHarvestedAt = harvestTime;\r\n\r\n        emit Harvested(address(token), _harvestedAmount, block.number, block.timestamp);\r\n    }\r\n\r\n    /// @notice Used by the strategy to report harvest of additional tokens to the sett.\r\n    ///         Charges performance fees on the additional tokens and transfers fees to treasury and strategist. \r\n    ///         The remaining amount is sent to badgerTree for emissions.\r\n    ///         Updates harvest variables for on-chain APR tracking.\r\n    ///         This can only be called by the strategy.\r\n    /// @dev This function is called after the strategy sends the additional tokens to the sett.\r\n    ///      Pausing on this function happens at the strategy level.\r\n    /// @param _token Address of additional token harvested by the strategy.\r\n    function reportAdditionalToken(address _token) external nonReentrant {\r\n        _onlyStrategy();\r\n        require(address(token) != _token, \"No want\");\r\n        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(address(this));\r\n\r\n        additionalTokensEarned[_token] = additionalTokensEarned[_token].add(tokenBalance);\r\n        lastAdditionalTokenAmount[_token] = tokenBalance;\r\n\r\n        // We may have more, but we still report only what the strat sent\r\n        uint256 governanceRewardsFee = _calculateFee(tokenBalance, performanceFeeGovernance);\r\n        uint256 strategistRewardsFee = _calculateFee(tokenBalance, performanceFeeStrategist);\r\n\r\n        if(governanceRewardsFee != 0) {\r\n            IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);\r\n\r\n        }\r\n\r\n        if(strategistRewardsFee != 0) {\r\n            IERC20Upgradeable(_token).safeTransfer(strategist, strategistRewardsFee);\r\n        }\r\n\r\n        // Send rest to tree\r\n        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));\r\n        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);\r\n        emit TreeDistribution(_token, newBalance, block.number, block.timestamp);\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Governance =====\r\n\r\n    /// @notice Changes the treasury address.\r\n    ///         Treasury is recipient of management and governance performance fees.\r\n    ///         This can only be called by governance.\r\n    ///         Note that this can only be called when sett is not paused.\r\n    /// @param _treasury Address of the new treasury.\r\n    function setTreasury(address _treasury) external whenNotPaused {\r\n        _onlyGovernance();\r\n        require(_treasury != address(0), \"Address 0\");\r\n\r\n        treasury = _treasury;\r\n        emit SetTreasury(_treasury);\r\n    }\r\n\r\n    /// @notice Changes the strategy address.\r\n    ///         This can only be called by governance.\r\n    ///         Note that this can only be called when sett is not paused.\r\n    /// @dev This is a rug vector, pay extremely close attention to the next strategy being set.\r\n    ///      Changing the strategy should happen only via timelock.\r\n    ///      This function must not be callable when the sett is paused as this would force depositors into a strategy they may not want to use.\r\n    /// @param _strategy Address of new strategy.\r\n    function setStrategy(address _strategy) external whenNotPaused {\r\n        _onlyGovernance();\r\n        require(_strategy != address(0), \"Address 0\");\r\n\r\n        /// NOTE: Migrate funds if settings strategy when already existing one\r\n        if (strategy != address(0)) {\r\n            require(IStrategy(strategy).balanceOf() == 0, \"Please withdrawToVault before changing strat\");\r\n        }\r\n        strategy = _strategy;\r\n        emit SetStrategy(_strategy);\r\n    }\r\n\r\n    // === Setters that can be called by governance even when paused ===\r\n\r\n    /// @notice Sets the max withdrawal fee that can be charged by the Sett.\r\n    ///         This can only be called by governance.\r\n    /// @dev The input `_fees` should be less than the `WITHDRAWAL_FEE_HARD_CAP` hard-cap.\r\n    /// @param _fees The new maximum cap for withdrawal fee.\r\n    function setMaxWithdrawalFee(uint256 _fees) external {\r\n        _onlyGovernance();\r\n        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, \"withdrawalFee too high\");\r\n\r\n        maxWithdrawalFee = _fees;\r\n        emit SetMaxWithdrawalFee(_fees);\r\n    }\r\n\r\n    /// @notice Sets the max performance fee that can be charged by the Sett.\r\n    ///         This can only be called by governance.\r\n    /// @dev The input `_fees` should be less than the `PERFORMANCE_FEE_HARD_CAP` hard-cap.\r\n    /// @param _fees The new maximum cap for performance fee.\r\n    function setMaxPerformanceFee(uint256 _fees) external {\r\n        _onlyGovernance();\r\n        require(_fees <= PERFORMANCE_FEE_HARD_CAP, \"performanceFeeStrategist too high\");\r\n\r\n        maxPerformanceFee = _fees;\r\n        emit SetMaxPerformanceFee(_fees);\r\n    }\r\n\r\n    /// @notice Sets the max management fee that can be charged by the Sett.\r\n    ///         This can only be called by governance.\r\n    /// @dev The input `_fees` should be less than the `MANAGEMENT_FEE_HARD_CAP` hard-cap.\r\n    /// @param _fees The new maximum cap for management fee.\r\n    function setMaxManagementFee(uint256 _fees) external {\r\n        _onlyGovernance();\r\n        require(_fees <= MANAGEMENT_FEE_HARD_CAP, \"managementFee too high\");\r\n\r\n        maxManagementFee = _fees;\r\n        emit SetMaxManagementFee(_fees);\r\n    }\r\n\r\n    /// @notice Changes the guardian address.\r\n    ///         Guardian is an authorized actor that can pause the sett in case of an emergency.\r\n    ///         This can only be called by governance.\r\n    /// @param _guardian Address of the new guardian.\r\n    function setGuardian(address _guardian) external {\r\n        _onlyGovernance();\r\n        require(_guardian != address(0), \"Address cannot be 0x0\");\r\n\r\n        guardian = _guardian;\r\n        emit SetGuardian(_guardian);\r\n    }\r\n\r\n    /// ===== Permissioned Functions: Trusted Actors =====\r\n\r\n    /// @notice Sets the fraction of sett balance (in basis points) that the strategy can borrow.\r\n    ///         This can be called by either governance or strategist.\r\n    ///         Note that this can only be called when the sett is not paused.\r\n    /// @param _newToEarnBps The new maximum cap for management fee.\r\n    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        require(_newToEarnBps <= MAX_BPS, \"toEarnBps should be <= MAX_BPS\");\r\n\r\n        toEarnBps = _newToEarnBps;\r\n        emit SetToEarnBps(_newToEarnBps);\r\n    } \r\n\r\n    /// @notice Changes the guestlist address.\r\n    ///         The guestList is used to gate or limit deposits. If no guestlist is set then anyone can deposit any amount.\r\n    ///         This can be called by either governance or strategist.\r\n    ///         Note that this can only be called when the sett is not paused.\r\n    /// @param _guestList Address of the new guestlist.\r\n    function setGuestList(address _guestList) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        guestList = BadgerGuestListAPI(_guestList);\r\n        emit SetGuestList(_guestList);\r\n    }\r\n\r\n    /// @notice Sets the withdrawal fee charged by the Sett.\r\n    ///         The fee is taken at the time of withdrawals in the underlying token which is then used to issue new shares for the treasury.\r\n    ///         The new withdrawal fee should be less than `maxWithdrawalFee`.\r\n    ///         This can be called by either governance or strategist.\r\n    /// @dev See `_withdraw` to see how withdrawal fee is charged.\r\n    /// @param _withdrawalFee The new withdrawal fee.\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        require(_withdrawalFee <= maxWithdrawalFee, \"Excessive withdrawal fee\");\r\n        withdrawalFee = _withdrawalFee;\r\n        emit SetWithdrawalFee(_withdrawalFee);\r\n    }\r\n\r\n    /// @notice Sets the performance fee taken by the strategist on the harvests.\r\n    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.\r\n    ///         For the underlying token, the fee is used to issue new shares for the strategist.\r\n    ///         The new performance fee should be less than `maxPerformanceFee`.\r\n    ///         This can be called by either governance or strategist.\r\n    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.\r\n    /// @param _performanceFeeStrategist The new performance fee.\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        require(_performanceFeeStrategist <= maxPerformanceFee, \"Excessive strategist performance fee\");\r\n        performanceFeeStrategist = _performanceFeeStrategist;\r\n        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);\r\n    }\r\n\r\n    /// @notice Sets the performance fee taken by the treasury on the harvests.\r\n    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.\r\n    ///         For the underlying token, the fee is used to issue new shares for the treasury.\r\n    ///         The new performance fee should be less than `maxPerformanceFee`.\r\n    ///         This can be called by either governance or strategist.\r\n    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.\r\n    /// @param _performanceFeeGovernance The new performance fee.\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        require(_performanceFeeGovernance <= maxPerformanceFee, \"Excessive governance performance fee\");\r\n        performanceFeeGovernance = _performanceFeeGovernance;\r\n        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);\r\n    }\r\n\r\n    /// @notice Sets the management fee taken by the treasury on the AUM in the sett.\r\n    ///         The fee is calculated at the time of `reportHarvest` and is used to issue new shares for the treasury.\r\n    ///         The new management fee should be less than `maxManagementFee`.\r\n    ///         This can be called by either governance or strategist.\r\n    /// @dev See `_handleFees` to see how the management fee is calculated.\r\n    /// @param _fees The new management fee.\r\n    function setManagementFee(uint256 _fees) external whenNotPaused {\r\n        _onlyGovernanceOrStrategist();\r\n        require(_fees <= maxManagementFee, \"Excessive management fee\");\r\n        managementFee = _fees;\r\n        emit SetManagementFee(_fees);\r\n    }\r\n\r\n    /// === Strategist level operations that can be done even when paused ==\r\n\r\n    /// @notice Withdraws all funds from the strategy back to the sett.\r\n    ///         This can be called by either governance or strategist.\r\n    /// @dev This calls `_withdrawAll` on the strategy and transfers the balance to the sett.\r\n    function withdrawToVault() external {\r\n        _onlyGovernanceOrStrategist();\r\n        IStrategy(strategy).withdrawToVault();\r\n    }\r\n\r\n    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.) \r\n    ///         to the badgerTree for emissions.\r\n    ///         The `_token` should be different from any tokens managed by the strategy.\r\n    ///         This can only be called by either strategist or governance.\r\n    /// @dev See `BaseStrategy.emitNonProtectedToken` for details.\r\n    /// @param _token Address of the token to be emitted.\r\n    function emitNonProtectedToken(address _token) external {\r\n        _onlyGovernanceOrStrategist();\r\n\r\n        IStrategy(strategy).emitNonProtectedToken(_token);\r\n    }\r\n\r\n    /// @notice Sweeps the balance of an extra token from the vault and strategy and sends it to governance.\r\n    ///         The `_token` should be different from any tokens managed by the strategy.\r\n    ///         This can only be called by either strategist or governance.\r\n    /// @dev Sweeping doesn\\'t take any fee.\r\n    /// @param _token Address of the token to be swept.\r\n    function sweepExtraToken(address _token) external {\r\n        _onlyGovernanceOrStrategist();\r\n        require(address(token) != _token, \"No want\");\r\n\r\n        IStrategy(strategy).withdrawOther(_token);\r\n        // Send all `_token` we have\r\n        // Safe because `withdrawOther` will revert on protected tokens  \r\n        // Done this way works for both a donation to strategy or to vault\r\n        IERC20Upgradeable(_token).safeTransfer(governance, IERC20Upgradeable(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Deposits the available balance of the underlying token into the strategy.\r\n    ///         The strategy then uses the amount for yield-generating activities.\r\n    ///         This can be called by either the keeper or governance.\r\n    ///         Note that earn cannot be called when deposits are paused.\r\n    /// @dev Pause is enforced at the Strategy level (this allows to still earn yield when the Vault is paused)\r\n    function earn() external {\r\n        require(!pausedDeposit, \"pausedDeposit\"); // dev: deposits are paused, we don\\'t earn as well\r\n        _onlyAuthorizedActors();\r\n\r\n        uint256 _bal = available();\r\n        token.safeTransfer(strategy, _bal);\r\n        IStrategy(strategy).earn();\r\n    }\r\n\r\n    /// @notice Pauses only deposits.\r\n    ///         This can be called by either guardian or governance.\r\n    function pauseDeposits() external {\r\n        _onlyAuthorizedPausers();\r\n        pausedDeposit = true;\r\n        emit PauseDeposits(msg.sender);\r\n    }\r\n    \r\n    /// @notice Unpauses deposits.\r\n    ///         This can only be called by governance.\r\n    function unpauseDeposits() external {\r\n        _onlyGovernance();\r\n        pausedDeposit = false;\r\n        emit UnpauseDeposits(msg.sender);\r\n    }\r\n\r\n    /// @notice Pauses everything.\r\n    ///         This can be called by either guardian or governance.\r\n    function pause() external {\r\n        _onlyAuthorizedPausers();\r\n        _pause();\r\n    }\r\n\r\n    /// @notice Unpauses everything\r\n    ///         This can only be called by governance.\r\n    function unpause() external {\r\n        _onlyGovernance();\r\n        _unpause();\r\n    }\r\n\r\n    /// ===== Internal Implementations =====\r\n\r\n    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`. \r\n    ///         Note that deposits are not accepted when `pausedDeposit` is true. \r\n    /// @dev This is the actual deposit operation.\r\n    ///      Deposits are based on the realized value of underlying assets between Sett & associated Strategy\r\n    /// @param _recipient Address to issue the Sett shares to.\r\n    /// @param _amount Quantity of tokens to deposit. \r\n    function _depositFor(address _recipient, uint256 _amount) internal nonReentrant {\r\n        require(_recipient != address(0), \"Address 0\");\r\n        require(_amount != 0, \"Amount 0\");\r\n        require(!pausedDeposit, \"pausedDeposit\"); // dev: deposits are paused\r\n\r\n        uint256 _pool = balance();\r\n        uint256 _before = token.balanceOf(address(this));\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 _after = token.balanceOf(address(this));\r\n        _mintSharesFor(_recipient, _after.sub(_before), _pool);\r\n    }\r\n\r\n    /// @dev See `_depositWithAuthorization`\r\n    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof) internal {\r\n        _depositForWithAuthorization(msg.sender, _amount, proof);\r\n    }\r\n\r\n    /// @dev Verifies that `_recipient` is authorized to deposit `_amount` based on the guestlist.\r\n    ///      See `_depositFor` for deposit details.\r\n    function _depositForWithAuthorization(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes32[] memory proof\r\n    ) internal {\r\n        if (address(guestList) != address(0)) {\r\n            require(guestList.authorized(_recipient, _amount, proof), \"GuestList: Not Authorized\");\r\n        }\r\n        _depositFor(_recipient, _amount);\r\n    }\r\n\r\n    /// @notice Redeems `_shares` for an appropriate amount of tokens.\r\n    /// @dev This is the actual withdraw operation.\r\n    ///      Withdraws from strategy positions if sett doesn\\'t contain enough tokens to process the withdrawal. \r\n    ///      Calculates withdrawal fees and issues corresponding shares to treasury.\r\n    ///      No rebalance implementation for lower fees and faster swaps\r\n    /// @param _shares Quantity of shares to redeem. \r\n    function _withdraw(uint256 _shares) internal nonReentrant {\r\n        require(_shares != 0, \"0 Shares\");\r\n\r\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\r\n        _burn(msg.sender, _shares);\r\n\r\n        // Check balance\r\n        uint256 b = token.balanceOf(address(this));\r\n        if (b < r) {\r\n            uint256 _toWithdraw = r.sub(b);\r\n            IStrategy(strategy).withdraw(_toWithdraw);\r\n            uint256 _after = token.balanceOf(address(this));\r\n            uint256 _diff = _after.sub(b);\r\n            if (_diff < _toWithdraw) {\r\n                r = b.add(_diff);\r\n            }\r\n        }\r\n        uint256 _fee = _calculateFee(r, withdrawalFee);\r\n\r\n        // Send funds to user\r\n        token.safeTransfer(msg.sender, r.sub(_fee));\r\n\r\n        // After you burned the shares, and you have sent the funds, adding here is equivalent to depositing\r\n        // Process withdrawal fee\r\n        if(_fee > 0) {\r\n            _mintSharesFor(treasury, _fee, balance().sub(_fee));\r\n        }\r\n    }\r\n\r\n    /// @dev Helper function to calculate fees.\r\n    /// @param amount Amount to calculate fee on.\r\n    /// @param feeBps The fee to be charged in basis points.\r\n    /// @return Amount of fees to take.\r\n    function _calculateFee(uint256 amount, uint256 feeBps) internal pure returns (uint256) {\r\n        if (feeBps == 0) {\r\n            return 0;\r\n        }\r\n        uint256 fee = amount.mul(feeBps).div(MAX_BPS);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Helper function to calculate governance and strategist performance fees. Make sure to use it to get paid!\r\n    /// @param _amount Amount to calculate fee on.\r\n    /// @return Tuple containing amount of (governance, strategist) fees to take.\r\n    function _calculatePerformanceFee(uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 governancePerformanceFee = _calculateFee(_amount, performanceFeeGovernance);\r\n\r\n        uint256 strategistPerformanceFee = _calculateFee(_amount, performanceFeeStrategist);\r\n\r\n        return (governancePerformanceFee, strategistPerformanceFee);\r\n    }\r\n\r\n    /// @dev Helper function to issue shares to `recipient` based on an input `_amount` and `_pool` size.\r\n    /// @param recipient Address to issue shares to.\r\n    /// @param _amount Amount to issue shares on.\r\n    /// @param _pool Pool size to use while calculating amount of shares to mint.\r\n    function _mintSharesFor(\r\n        address recipient,\r\n        uint256 _amount,\r\n        uint256 _pool\r\n    ) internal {\r\n        uint256 shares;\r\n        if (totalSupply() == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = (_amount.mul(totalSupply())).div(_pool);\r\n        }\r\n\r\n        if(shares != 0) {\r\n            _mint(recipient, shares);\r\n        }\r\n    }\r\n\r\n    /// @dev Helper function that issues shares based on performance and management fee when a harvest is reported.\r\n    /// @param _harvestedAmount The harvested amount to take fee on.\r\n    /// @param harvestTime Time of harvest (block.timestamp).\r\n    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime) internal {\r\n        (uint256 feeGovernance, uint256 feeStrategist) = _calculatePerformanceFee(_harvestedAmount);\r\n        uint256 duration = harvestTime.sub(lastHarvestedAt);\r\n\r\n        // Management fee is calculated against the assets before harvest, to make it fair to depositors\r\n        uint256 management_fee = managementFee > 0 ? managementFee.mul(balance().sub(_harvestedAmount)).mul(duration).div(SECS_PER_YEAR).div(MAX_BPS) : 0;\r\n        uint256 totalGovernanceFee = feeGovernance.add(management_fee);\r\n\r\n        // Pool size is the size of the pool minus the fees, this way \r\n        // it\\'s equivalent to sending the tokens as rewards after the harvest\r\n        // and depositing them again\r\n        uint256 _pool = balance().sub(totalGovernanceFee).sub(feeStrategist);\r\n\r\n        // uint != is cheaper and equivalent to >\r\n        if (totalGovernanceFee != 0) {\r\n            _mintSharesFor(treasury, totalGovernanceFee, _pool);\r\n        }\r\n\r\n        if (feeStrategist != 0 && strategist != address(0)) {\r\n            /// NOTE: adding feeGovernance backed to _pool as shares would have been issued for it.\r\n            _mintSharesFor(strategist, feeStrategist, _pool.add(totalGovernanceFee));\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pausedBy\",\"type\":\"address\"}],\"name\":\"PauseDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"SetGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuestList\",\"type\":\"address\"}],\"name\":\"SetGuestList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxManagementFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"SetStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEarnToBps\",\"type\":\"uint256\"}],\"name\":\"SetToEarnBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TreeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pausedBy\",\"type\":\"address\"}],\"name\":\"UnpauseDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MANAGEMENT_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"additionalTokensEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsAtLastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgerTree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emitNonProtectedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guestList\",\"outputs\":[{\"internalType\":\"contract BadgerGuestListAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_badgerTree\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[4]\",\"name\":\"_feeConfig\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAdditionalTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lifeTimeEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reportAdditionalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestedAmount\",\"type\":\"uint256\"}],\"name\":\"reportHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guestList\",\"type\":\"address\"}],\"name\":\"setGuestList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newToEarnBps\",\"type\":\"uint256\"}],\"name\":\"setToEarnBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepExtraToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEarnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d82cbe744b59332b954c4437bcfab0022cb95982b43428b043aadd1e96930b6"}]}