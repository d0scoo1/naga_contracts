{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GenerateLendingPoolsV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./convex/IConvexBoosterV2.sol\\\";\\nimport \\\"./supply/ISupplyBooster.sol\\\";\\n\\ninterface ISupplyRewardFactory {\\n    function createReward(\\n        address _rewardToken,\\n        address _virtualBalance,\\n        address _owner\\n    ) external returns (address);\\n}\\n\\ninterface ILendingMarket {\\n    function addMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds,\\n        uint256 _lendingThreshold,\\n        uint256 _liquidateThreshold\\n    ) external;\\n}\\n\\ninterface ISupplyRewardFactoryExtra is ISupplyRewardFactory {\\n    function addOwner(address _newOwner) external;\\n}\\n\\ncontract GenerateLendingPoolsV3 {\\n    address public convexBooster;\\n    address public lendingMarket;\\n    address public supplyBooster;\\n    address public supplyRewardFactory;\\n    address public deployer;\\n\\n    constructor(address _deployer) public {\\n        deployer = _deployer;\\n    }\\n\\n    function setLendingContract(\\n        address _supplyBooster,\\n        address _convexBooster,\\n        address _lendingMarket,\\n        address _supplyRewardFactory\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        supplyBooster = _supplyBooster;\\n        convexBooster = _convexBooster;\\n        lendingMarket = _lendingMarket;\\n        supplyRewardFactory = _supplyRewardFactory;\\n    }\\n\\n    function addConvexBoosterPool(uint256 _originConvexPid) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        IConvexBoosterV2(convexBooster).addConvexPool(_originConvexPid);\\n    }\\n\\n    function addConvexBoosterPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        IConvexBoosterV2(convexBooster).addConvexPool(\\n            _originConvexPid,\\n            _curveSwapAddress,\\n            _curveZapAddress,\\n            _basePoolAddress,\\n            _isMeta,\\n            _isMetaFactory\\n        );\\n    }\\n\\n    function addLendingMarketPool(\\n        uint256 _convexBoosterPid,\\n        uint256[] calldata _supplyBoosterPids,\\n        int128[] calldata _curveCoinIds\\n    ) public {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        ILendingMarket(lendingMarket).addMarketPool(\\n            _convexBoosterPid,\\n            _supplyBoosterPids,\\n            _curveCoinIds,\\n            100,\\n            50\\n        );\\n    }\\n\\n    function addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        public\\n    {\\n        _addSupplyPool(_underlyToken, _supplyTreasuryFund);\\n    }\\n\\n    function _addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        internal\\n    {\\n        require(deployer == msg.sender, \\\"!authorized auth\\\");\\n\\n        require(supplyBooster != address(0), \\\"!supplyBooster\\\");\\n        require(convexBooster != address(0), \\\"!convexBooster\\\");\\n        require(lendingMarket != address(0), \\\"!lendingMarket\\\");\\n        require(supplyRewardFactory != address(0), \\\"!supplyRewardFactory\\\");\\n\\n        ISupplyRewardFactoryExtra(supplyRewardFactory).addOwner(\\n            _supplyTreasuryFund\\n        );\\n\\n        ISupplyBooster(supplyBooster).addSupplyPool(\\n            _underlyToken,\\n            _supplyTreasuryFund\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBoosterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./IConvexBooster.sol\\\";\\n\\ninterface IConvexBoosterV2 is IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external override returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external override returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external override returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external override;\\n\\n    function addConvexPool(\\n        uint256 _originConvexPid,\\n        address _curveSwapAddress,\\n        address _curveZapAddress,\\n        address _basePoolAddress,\\n        bool _isMeta,\\n        bool _isMetaFactory\\n    ) external;\\n\\n    function getPoolZapAddress(address _lpToken)\\n        external\\n        view\\n        returns (address);\\n\\n    function getPoolToken(uint256 _pid) external view returns (address);\\n\\n    function calculateTokenAmount(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external view returns (uint256);\\n\\n    function updateMovingLeverage(\\n        uint256 _pid,\\n        uint256 _tokens,\\n        int128 _curveCoinId\\n    ) external returns (uint256);\\n}\\n\\ninterface IMovingLeverageBase {\\n    function get(uint256 _pid, int128 _coinId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/supply/ISupplyBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface ISupplyBooster {\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address underlyToken,\\n            address rewardInterestPool,\\n            address supplyTreasuryFund,\\n            address virtualBalance,\\n            bool isErc20,\\n            bool shutdown\\n        );\\n\\n    function liquidate(bytes32 _lendingId, uint256 _lendingInterest)\\n        external\\n        payable\\n        returns (address);\\n\\n    function getLendingUnderlyToken(bytes32 _lendingId)\\n        external\\n        view\\n        returns (address);\\n\\n    function borrow(\\n        uint256 _pid,\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest,\\n        uint256 _borrowNumbers\\n    ) external;\\n\\n    // ether\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingInterest\\n    ) external payable;\\n\\n    // erc20\\n    function repayBorrow(\\n        bytes32 _lendingId,\\n        address _user,\\n        uint256 _lendingAmount,\\n        uint256 _lendingInterest\\n    ) external;\\n\\n    function addSupplyPool(address _underlyToken, address _supplyTreasuryFund)\\n        external\\n        returns (bool);\\n\\n    function getBorrowRatePerBlock(uint256 _pid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUtilizationRate(uint256 _pid) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/convex/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/* \\n\\n  _                          _   _____   _                       \\n | |       ___   _ __     __| | |  ___| | |   __ _   _ __    ___ \\n | |      / _ \\\\ | '_ \\\\   / _` | | |_    | |  / _` | | '__|  / _ \\\\\\n | |___  |  __/ | | | | | (_| | |  _|   | | | (_| | | |    |  __/\\n |_____|  \\\\___| |_| |_|  \\\\__,_| |_|     |_|  \\\\__,_| |_|     \\\\___|\\n                                                                 \\nLendFlare.finance\\n*/\\n\\npragma solidity =0.6.12;\\n\\ninterface IConvexBooster {\\n    function liquidate(\\n        uint256 _convexPid,\\n        int128 _curveCoinId,\\n        address _user,\\n        uint256 _amount\\n    ) external returns (address, uint256);\\n\\n    function depositFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user\\n    ) external returns (bool);\\n\\n    function withdrawFor(\\n        uint256 _convexPid,\\n        uint256 _amount,\\n        address _user,\\n        bool _freezeTokens\\n    ) external returns (bool);\\n\\n    function poolInfo(uint256 _convexPid)\\n        external\\n        view\\n        returns (\\n            uint256 originConvexPid,\\n            address curveSwapAddress,\\n            address lpToken,\\n            address originCrvRewards,\\n            address originStash,\\n            address virtualBalance,\\n            address rewardCrvPool,\\n            address rewardCvxPool,\\n            bool shutdown\\n        );\\n\\n    function addConvexPool(uint256 _originConvexPid) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originConvexPid\",\"type\":\"uint256\"}],\"name\":\"addConvexBoosterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originConvexPid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_curveSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveZapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_basePoolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMeta\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isMetaFactory\",\"type\":\"bool\"}],\"name\":\"addConvexBoosterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_convexBoosterPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplyBoosterPids\",\"type\":\"uint256[]\"},{\"internalType\":\"int128[]\",\"name\":\"_curveCoinIds\",\"type\":\"int128[]\"}],\"name\":\"addLendingMarketPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyTreasuryFund\",\"type\":\"address\"}],\"name\":\"addSupplyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supplyBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplyRewardFactory\",\"type\":\"address\"}],\"name\":\"setLendingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenerateLendingPoolsV3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000063b8c91dd55626db091da26ba96bd8dd3f36820b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}