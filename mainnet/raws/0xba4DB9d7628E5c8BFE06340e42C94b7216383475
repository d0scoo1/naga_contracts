{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract DRAGOINU is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    modifier lockSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    modifier liquidityAdd() {\r\n        _inLiquidityAdd = true;\r\n        _;\r\n        _inLiquidityAdd = false;\r\n    }\r\n\r\n    // == CONSTANTS ==\r\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 ether;\r\n    uint256 public constant BPS_DENOMINATOR = 10_000;\r\n    uint256 public constant SNIPE_BLOCKS = 2;\r\n\r\n    // == LIMITS ==\r\n    /// @notice Wallet limit in wei.\r\n    uint256 public walletLimit;\r\n    /// @notice Buy limit in wei.\r\n    uint256 public buyLimit;\r\n    /// @notice Cooldown in seconds\r\n    uint256 public cooldown = 20;\r\n\r\n    // == TAXES ==\r\n    /// @notice Buy marketingTax in BPS\r\n    uint256 public buyMarketingTax = 300;\r\n    /// @notice Buy devTax in BPS\r\n    uint256 public buyDevTax = 400;\r\n    /// @notice Buy autoLiquidityTax in BPS\r\n    uint256 public buyAutoLiquidityTax = 200;\r\n    /// @notice Buy treasuryTax in BPS\r\n    uint256 public buyTreasuryTax = 100;\r\n    /// @notice Sell marketingTax in BPS\r\n    uint256 public sellMarketingTax = 900;\r\n    /// @notice Sell devTax in BPS\r\n    uint256 public sellDevTax = 1000;\r\n    /// @notice Sell autoLiquidityTax in BPS\r\n    uint256 public sellAutoLiquidityTax = 400;\r\n    /// @notice Sell treasuryTax in BPS\r\n    uint256 public sellTreasuryTax = 200;\r\n    /// @notice address that marketingTax is sent to\r\n    address payable public marketingTaxWallet;\r\n    /// @notice address that devTax is sent to\r\n    address payable public devTaxWallet;\r\n    /// @notice address that treasuryTax is sent to\r\n    address payable public treasuryTaxWallet;\r\n    /// @notice tokens that are allocated for marketingTax tax\r\n    uint256 public totalMarketingTax;\r\n    /// @notice tokens that are allocated for devTax tax\r\n    uint256 public totalDevTax;\r\n    /// @notice tokens that are allocated for auto liquidity tax\r\n    uint256 public totalAutoLiquidityTax;\r\n    /// @notice tokens that are allocated for treasury tax\r\n    uint256 public totalTreasuryTax;\r\n\r\n    // == FLAGS ==\r\n    /// @notice flag indicating Uniswap trading status\r\n    bool public tradingActive = false;\r\n    /// @notice flag indicating swapAll enabled\r\n    bool public swapFees = true;\r\n\r\n    // == UNISWAP ==\r\n    IUniswapV2Router02 public router = IUniswapV2Router02(address(0));\r\n    address public pair;\r\n\r\n    // == WALLET STATUSES ==\r\n    /// @notice Maps each wallet to their tax exlcusion status\r\n    mapping(address => bool) public taxExcluded;\r\n    /// @notice Maps each wallet to the last timestamp they bought\r\n    mapping(address => uint256) public lastBuy;\r\n    /// @notice Maps each wallet to their blacklist status\r\n    mapping(address => bool) public blacklist;\r\n    /// @notice Maps each wallet to their whitelist status on buy limit\r\n    mapping(address => bool) public walletLimitWhitelist;\r\n\r\n    // == MISC ==\r\n    /// @notice Block when trading is first enabled\r\n    uint256 public tradingBlock;\r\n\r\n    // == INTERNAL ==\r\n    uint256 internal _totalSupply = 0;\r\n    bool internal _inSwap = false;\r\n    bool internal _inLiquidityAdd = false;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    event MarketingTaxWalletChanged(address previousWallet, address nextWallet);\r\n    event DevTaxWalletChanged(address previousWallet, address nextWallet);\r\n    event TreasuryTaxWalletChanged(address previousWallet, address nextWallet);\r\n    event BuyMarketingTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event SellMarketingTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event BuyDevTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event SellDevTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event BuyAutoLiquidityTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event SellAutoLiquidityTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event BuyTreasuryTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event SellTreasuryTaxChanged(uint256 previousTax, uint256 nextTax);\r\n    event MarketingTaxRescued(uint256 amount);\r\n    event DevTaxRescued(uint256 amount);\r\n    event AutoLiquidityTaxRescued(uint256 amount);\r\n    event TreasuryTaxRescued(uint256 amount);\r\n    event TradingActiveChanged(bool enabled);\r\n    event TaxExclusionChanged(address user, bool taxExcluded);\r\n    event MaxTransferChanged(uint256 previousMax, uint256 nextMax);\r\n    event BuyLimitChanged(uint256 previousMax, uint256 nextMax);\r\n    event WalletLimitChanged(uint256 previousMax, uint256 nextMax);\r\n    event CooldownChanged(uint256 previousCooldown, uint256 nextCooldown);\r\n    event BlacklistUpdated(address user, bool previousStatus, bool nextStatus);\r\n    event SwapFeesChanged(bool previousStatus, bool nextStatus);\r\n    event WalletLimitWhitelistUpdated(\r\n        address user,\r\n        bool previousStatus,\r\n        bool nextStatus\r\n    );\r\n\r\n    constructor(\r\n        address _factory,\r\n        address _router,\r\n        uint256 _buyLimit,\r\n        uint256 _walletLimit,\r\n        address payable _marketingTaxWallet,\r\n        address payable _devTaxWallet,\r\n        address payable _treasuryTaxWallet\r\n    ) ERC20(\"Drago Inu\", \"DGI\") Ownable() {\r\n        taxExcluded[owner()] = true;\r\n        taxExcluded[address(0)] = true;\r\n        taxExcluded[_marketingTaxWallet] = true;\r\n        taxExcluded[_devTaxWallet] = true;\r\n        taxExcluded[address(this)] = true;\r\n\r\n        buyLimit = _buyLimit;\r\n        walletLimit = _walletLimit;\r\n        marketingTaxWallet = _marketingTaxWallet;\r\n        devTaxWallet = _devTaxWallet;\r\n        treasuryTaxWallet = _treasuryTaxWallet;\r\n\r\n        router = IUniswapV2Router02(_router);\r\n        IUniswapV2Factory uniswapContract = IUniswapV2Factory(_factory);\r\n        pair = uniswapContract.createPair(address(this), router.WETH());\r\n\r\n        _updateWalletLimitWhitelist(address(this), true);\r\n        _updateWalletLimitWhitelist(pair, true);\r\n    }\r\n\r\n    /// @notice Change the address of the buyback wallet\r\n    /// @param _marketingTaxWallet The new address of the buyback wallet\r\n    function setMarketingTaxWallet(address payable _marketingTaxWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit MarketingTaxWalletChanged(marketingTaxWallet, _marketingTaxWallet);\r\n        marketingTaxWallet = _marketingTaxWallet;\r\n    }\r\n\r\n    /// @notice Change the address of the devTax wallet\r\n    /// @param _devTaxWallet The new address of the devTax wallet\r\n    function setDevTaxWallet(address payable _devTaxWallet) external onlyOwner {\r\n        emit DevTaxWalletChanged(devTaxWallet, _devTaxWallet);\r\n        devTaxWallet = _devTaxWallet;\r\n    }\r\n\r\n    /// @notice Change the address of the treasuryTax wallet\r\n    /// @param _treasuryTaxWallet The new address of the treasuryTax wallet\r\n    function setTreasuryTaxWallet(address payable _treasuryTaxWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emit TreasuryTaxWalletChanged(treasuryTaxWallet, _treasuryTaxWallet);\r\n        treasuryTaxWallet = _treasuryTaxWallet;\r\n    }\r\n\r\n    /// @notice Change the buy marketingTax rate\r\n    /// @param _buyMarketingTax The new buy marketingTax rate\r\n    function setBuyMarketingTax(uint256 _buyMarketingTax) external onlyOwner {\r\n        require(\r\n            _buyMarketingTax <= BPS_DENOMINATOR,\r\n            \"_buyMarketingTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit BuyMarketingTaxChanged(buyMarketingTax, _buyMarketingTax);\r\n        buyMarketingTax = _buyMarketingTax;\r\n    }\r\n\r\n    /// @notice Change the sell marketingTax rate\r\n    /// @param _sellMarketingTax The new sell marketingTax rate\r\n    function setSellMarketingTax(uint256 _sellMarketingTax) external onlyOwner {\r\n        require(\r\n            _sellMarketingTax <= BPS_DENOMINATOR,\r\n            \"_sellMarketingTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit SellMarketingTaxChanged(sellMarketingTax, _sellMarketingTax);\r\n        sellMarketingTax = _sellMarketingTax;\r\n    }\r\n\r\n    /// @notice Change the buy devTax rate\r\n    /// @param _buyDevTax The new devTax rate\r\n    function setBuyDevTax(uint256 _buyDevTax) external onlyOwner {\r\n        require(\r\n            _buyDevTax <= BPS_DENOMINATOR,\r\n            \"_buyDevTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit BuyDevTaxChanged(buyDevTax, _buyDevTax);\r\n        buyDevTax = _buyDevTax;\r\n    }\r\n\r\n    /// @notice Change the buy devTax rate\r\n    /// @param _sellDevTax The new devTax rate\r\n    function setSellDevTax(uint256 _sellDevTax) external onlyOwner {\r\n        require(\r\n            _sellDevTax <= BPS_DENOMINATOR,\r\n            \"_sellDevTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit SellDevTaxChanged(sellDevTax, _sellDevTax);\r\n        sellDevTax = _sellDevTax;\r\n    }\r\n\r\n    /// @notice Change the buy autoLiquidityTax rate\r\n    /// @param _buyAutoLiquidityTax The new buy autoLiquidityTax rate\r\n    function setBuyAutoLiquidityTax(uint256 _buyAutoLiquidityTax)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _buyAutoLiquidityTax <= BPS_DENOMINATOR,\r\n            \"_buyAutoLiquidityTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit BuyAutoLiquidityTaxChanged(\r\n            buyAutoLiquidityTax,\r\n            _buyAutoLiquidityTax\r\n        );\r\n        buyAutoLiquidityTax = _buyAutoLiquidityTax;\r\n    }\r\n\r\n    /// @notice Change the sell autoLiquidityTax rate\r\n    /// @param _sellAutoLiquidityTax The new sell autoLiquidityTax rate\r\n    function setSellAutoLiquidityTax(uint256 _sellAutoLiquidityTax)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _sellAutoLiquidityTax <= BPS_DENOMINATOR,\r\n            \"_sellAutoLiquidityTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit SellAutoLiquidityTaxChanged(\r\n            sellAutoLiquidityTax,\r\n            _sellAutoLiquidityTax\r\n        );\r\n        sellAutoLiquidityTax = _sellAutoLiquidityTax;\r\n    }\r\n\r\n    /// @notice Change the buy treasuryTax rate\r\n    /// @param _buyTreasuryTax The new treasuryTax rate\r\n    function setBuyTreasuryTax(uint256 _buyTreasuryTax) external onlyOwner {\r\n        require(\r\n            _buyTreasuryTax <= BPS_DENOMINATOR,\r\n            \"_buyTreasuryTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit BuyTreasuryTaxChanged(buyTreasuryTax, _buyTreasuryTax);\r\n        buyTreasuryTax = _buyTreasuryTax;\r\n    }\r\n\r\n    /// @notice Change the buy treasuryTax rate\r\n    /// @param _sellTreasuryTax The new treasuryTax rate\r\n    function setSellTreasuryTax(uint256 _sellTreasuryTax) external onlyOwner {\r\n        require(\r\n            _sellTreasuryTax <= BPS_DENOMINATOR,\r\n            \"_sellTreasuryTax cannot exceed BPS_DENOMINATOR\"\r\n        );\r\n        emit SellTreasuryTaxChanged(sellTreasuryTax, _sellTreasuryTax);\r\n        sellTreasuryTax = _sellTreasuryTax;\r\n    }\r\n\r\n    /// @notice Change the cooldown for buys\r\n    /// @param _cooldown The new cooldown in seconds\r\n    function setCooldown(uint256 _cooldown) external onlyOwner {\r\n        emit CooldownChanged(cooldown, _cooldown);\r\n        cooldown = _cooldown;\r\n    }\r\n\r\n    /// @notice Rescue BBI from the marketingTax amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of BBI to rescue\r\n    /// @param _recipient The recipient of the rescued BBI\r\n    function rescueMarketingTaxTokens(uint256 _amount, address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _amount <= totalMarketingTax,\r\n            \"Amount cannot be greater than totalMarketingTax\"\r\n        );\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        emit MarketingTaxRescued(_amount);\r\n        totalMarketingTax -= _amount;\r\n    }\r\n\r\n    /// @notice Rescue BBI from the devTax amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of BBI to rescue\r\n    /// @param _recipient The recipient of the rescued BBI\r\n    function rescueDevTaxTokens(uint256 _amount, address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _amount <= totalDevTax,\r\n            \"Amount cannot be greater than totalDevTax\"\r\n        );\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        emit DevTaxRescued(_amount);\r\n        totalDevTax -= _amount;\r\n    }\r\n\r\n    /// @notice Rescue BBI from the autoLiquidityTax amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of BBI to rescue\r\n    /// @param _recipient The recipient of the rescued BBI\r\n    function rescueAutoLiquidityTaxTokens(uint256 _amount, address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _amount <= totalAutoLiquidityTax,\r\n            \"Amount cannot be greater than totalAutoLiquidityTax\"\r\n        );\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        emit AutoLiquidityTaxRescued(_amount);\r\n        totalAutoLiquidityTax -= _amount;\r\n    }\r\n\r\n    /// @notice Rescue BBI from the treasuryTax amount\r\n    /// @dev Should only be used in an emergency\r\n    /// @param _amount The amount of BBI to rescue\r\n    /// @param _recipient The recipient of the rescued BBI\r\n    function rescueTreasuryTaxTokens(uint256 _amount, address _recipient)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _amount <= totalTreasuryTax,\r\n            \"Amount cannot be greater than totalTreasuryTax\"\r\n        );\r\n        _rawTransfer(address(this), _recipient, _amount);\r\n        emit TreasuryTaxRescued(_amount);\r\n        totalTreasuryTax -= _amount;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokens)\r\n        external\r\n        payable\r\n        onlyOwner\r\n        liquidityAdd\r\n    {\r\n        _mint(address(this), tokens);\r\n        _approve(address(this), address(router), tokens);\r\n\r\n        router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            tokens,\r\n            0,\r\n            0,\r\n            owner(),\r\n            // solhint-disable-next-line not-rely-on-time\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice Admin function to update a wallet's blacklist status\r\n    /// @param user the wallet\r\n    /// @param status the new status\r\n    function updateBlacklist(address user, bool status)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        _updateBlacklist(user, status);\r\n    }\r\n\r\n    function _updateBlacklist(address user, bool status) internal virtual {\r\n        emit BlacklistUpdated(user, blacklist[user], status);\r\n        blacklist[user] = status;\r\n    }\r\n\r\n    /// @notice Admin function to update a wallet's buy limit status\r\n    /// @param user the wallet\r\n    /// @param status the new status\r\n    function updateWalletLimitWhitelist(address user, bool status)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        _updateWalletLimitWhitelist(user, status);\r\n    }\r\n\r\n    function _updateWalletLimitWhitelist(address user, bool status)\r\n        internal\r\n        virtual\r\n    {\r\n        emit WalletLimitWhitelistUpdated(\r\n            user,\r\n            walletLimitWhitelist[user],\r\n            status\r\n        );\r\n        walletLimitWhitelist[user] = status;\r\n    }\r\n\r\n    /// @notice Enables or disables trading on Uniswap\r\n    function setTradingActive(bool _tradingActive) external onlyOwner {\r\n        if (_tradingActive && tradingBlock == 0) {\r\n            tradingBlock = block.number;\r\n        }\r\n        tradingActive = _tradingActive;\r\n        emit TradingActiveChanged(_tradingActive);\r\n    }\r\n\r\n    /// @notice Updates tax exclusion status\r\n    /// @param _account Account to update the tax exclusion status of\r\n    /// @param _taxExcluded If true, exclude taxes for this user\r\n    function setTaxExcluded(address _account, bool _taxExcluded)\r\n        public\r\n        onlyOwner\r\n    {\r\n        taxExcluded[_account] = _taxExcluded;\r\n        emit TaxExclusionChanged(_account, _taxExcluded);\r\n    }\r\n\r\n    /// @notice Updates the max amount allowed to buy\r\n    /// @param _buyLimit The new buy limit\r\n    function setBuyLimit(uint256 _buyLimit) external onlyOwner {\r\n        emit BuyLimitChanged(buyLimit, _buyLimit);\r\n        buyLimit = _buyLimit;\r\n    }\r\n\r\n    /// @notice Updates the max amount allowed to be held by a single wallet\r\n    /// @param _walletLimit The new max\r\n    function setWalletLimit(uint256 _walletLimit) external onlyOwner {\r\n        emit WalletLimitChanged(walletLimit, _walletLimit);\r\n        walletLimit = _walletLimit;\r\n    }\r\n\r\n    /// @notice Enable or disable whether swap occurs during `_transfer`\r\n    /// @param _swapFees If true, enables swap during `_transfer`\r\n    function setSwapFees(bool _swapFees) external onlyOwner {\r\n        emit SwapFeesChanged(swapFees, _swapFees);\r\n        swapFees = _swapFees;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _addBalance(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account] + amount;\r\n    }\r\n\r\n    function _subtractBalance(address account, uint256 amount) internal {\r\n        _balances[account] = _balances[account] - amount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(!blacklist[recipient], \"Recipient is blacklisted\");\r\n\r\n        if (taxExcluded[sender] || taxExcluded[recipient]) {\r\n            _rawTransfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        // Enforce wallet limits\r\n        if (!walletLimitWhitelist[recipient]) {\r\n            require(\r\n                balanceOf(recipient).add(amount) <= walletLimit,\r\n                \"Wallet limit exceeded\"\r\n            );\r\n        }\r\n\r\n        uint256 send = amount;\r\n        uint256 marketingTax;\r\n        uint256 devTax;\r\n        uint256 autoLiquidityTax;\r\n        uint256 treasuryTax;\r\n        if (sender == pair) {\r\n            require(tradingActive, \"Trading is not yet active\");\r\n            require(\r\n                balanceOf(recipient).add(amount) <= buyLimit,\r\n                \"Buy limit exceeded\"\r\n            );\r\n            if (block.number <= tradingBlock + SNIPE_BLOCKS) {\r\n                _updateBlacklist(recipient, true);\r\n            }\r\n            if (cooldown > 0) {\r\n                require(\r\n                    lastBuy[recipient] + cooldown <= block.timestamp,\r\n                    \"Cooldown still active\"\r\n                );\r\n                lastBuy[recipient] = block.timestamp;\r\n            }\r\n            (\r\n                send,\r\n                marketingTax,\r\n                devTax,\r\n                autoLiquidityTax,\r\n                treasuryTax\r\n            ) = _getTaxAmounts(amount, true);\r\n        } else if (recipient == pair) {\r\n            require(tradingActive, \"Trading is not yet active\");\r\n            if (swapFees) swapAll();\r\n            (\r\n                send,\r\n                marketingTax,\r\n                devTax,\r\n                autoLiquidityTax,\r\n                treasuryTax\r\n            ) = _getTaxAmounts(amount, false);\r\n        }\r\n        _rawTransfer(sender, recipient, send);\r\n        _takeTaxes(sender, marketingTax, devTax, autoLiquidityTax, treasuryTax);\r\n    }\r\n\r\n    /// @notice Peforms auto liquidity and tax distribution\r\n    function swapAll() public lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        // Auto-liquidity\r\n        uint256 autoLiquidityAmount = totalAutoLiquidityTax.div(2);\r\n        uint256 walletTaxes = totalMarketingTax.add(totalDevTax).add(\r\n            totalTreasuryTax\r\n        );\r\n        _approve(\r\n            address(this),\r\n            address(router),\r\n            walletTaxes.add(totalAutoLiquidityTax)\r\n        );\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            autoLiquidityAmount.add(walletTaxes),\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            autoLiquidityAmount,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n        totalAutoLiquidityTax = 0;\r\n\r\n        // Distribute remaining taxes\r\n        uint256 contractEth = address(this).balance;\r\n\r\n        uint256 marketingTaxEth = contractEth.mul(totalMarketingTax).div(\r\n            walletTaxes\r\n        );\r\n        uint256 devTaxEth = contractEth.mul(totalDevTax).div(walletTaxes);\r\n        uint256 treasuryTaxEth = contractEth.mul(totalTreasuryTax).div(\r\n            walletTaxes\r\n        );\r\n\r\n        totalMarketingTax = 0;\r\n        totalDevTax = 0;\r\n        totalTreasuryTax = 0;\r\n        if (marketingTaxEth > 0) {\r\n            marketingTaxWallet.transfer(marketingTaxEth);\r\n        }\r\n        if (devTaxEth > 0) {\r\n            devTaxWallet.transfer(devTaxEth);\r\n        }\r\n        if (treasuryTaxEth > 0) {\r\n            treasuryTaxWallet.transfer(treasuryTaxEth);\r\n        }\r\n    }\r\n\r\n    /// @notice Admin function to rescue ETH from the contract\r\n    function rescueETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice Transfers BBI from an account to this contract for taxes\r\n    /// @param _account The account to transfer BBI from\r\n    /// @param _marketingTaxAmount The amount of marketingTax tax to transfer\r\n    /// @param _devTaxAmount The amount of devTax tax to transfer\r\n    function _takeTaxes(\r\n        address _account,\r\n        uint256 _marketingTaxAmount,\r\n        uint256 _devTaxAmount,\r\n        uint256 _autoLiquidityTaxAmount,\r\n        uint256 _treasuryTaxAmount\r\n    ) internal {\r\n        require(_account != address(0), \"taxation from the zero address\");\r\n\r\n        uint256 totalAmount = _marketingTaxAmount\r\n            .add(_devTaxAmount)\r\n            .add(_autoLiquidityTaxAmount)\r\n            .add(_treasuryTaxAmount);\r\n        _rawTransfer(_account, address(this), totalAmount);\r\n        totalMarketingTax += _marketingTaxAmount;\r\n        totalDevTax += _devTaxAmount;\r\n        totalAutoLiquidityTax += _autoLiquidityTaxAmount;\r\n        totalTreasuryTax += _treasuryTaxAmount;\r\n    }\r\n\r\n    /// @notice Get a breakdown of send and tax amounts\r\n    /// @param amount The amount to tax in wei\r\n    /// @return send The raw amount to send\r\n    /// @return marketingTax The raw marketingTax tax amount\r\n    /// @return devTax The raw devTax tax amount\r\n    function _getTaxAmounts(uint256 amount, bool buying)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 send,\r\n            uint256 marketingTax,\r\n            uint256 devTax,\r\n            uint256 autoLiquidityTax,\r\n            uint256 treasuryTax\r\n        )\r\n    {\r\n        if (buying) {\r\n            marketingTax = amount.mul(buyMarketingTax).div(BPS_DENOMINATOR);\r\n            devTax = amount.mul(buyDevTax).div(BPS_DENOMINATOR);\r\n            autoLiquidityTax = amount.mul(buyAutoLiquidityTax).div(\r\n                BPS_DENOMINATOR\r\n            );\r\n            treasuryTax = amount.mul(buyTreasuryTax).div(BPS_DENOMINATOR);\r\n        } else {\r\n            marketingTax = amount.mul(sellMarketingTax).div(BPS_DENOMINATOR);\r\n            devTax = amount.mul(sellDevTax).div(BPS_DENOMINATOR);\r\n            autoLiquidityTax = amount.mul(sellAutoLiquidityTax).div(\r\n                BPS_DENOMINATOR\r\n            );\r\n            treasuryTax = amount.mul(sellTreasuryTax).div(BPS_DENOMINATOR);\r\n        }\r\n        send = amount.sub(marketingTax).sub(devTax).sub(autoLiquidityTax).sub(\r\n            treasuryTax\r\n        );\r\n    }\r\n\r\n    // modified from OpenZeppelin ERC20\r\n    function _rawTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"transfer from the zero address\");\r\n        require(recipient != address(0), \"transfer to the zero address\");\r\n\r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, \"transfer amount exceeds balance\");\r\n        unchecked {\r\n            _subtractBalance(sender, amount);\r\n        }\r\n        _addBalance(recipient, amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal override {\r\n        require(_totalSupply.add(amount) <= MAX_SUPPLY, \"Max supply exceeded\");\r\n        _totalSupply += amount;\r\n        _addBalance(account, amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external onlyOwner {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function airdrop(address[] memory accounts, uint256[] memory amounts)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(accounts.length == amounts.length, \"array lengths must match\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _mint(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_marketingTaxWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devTaxWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasuryTaxWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidityTaxRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nextStatus\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyAutoLiquidityTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyDevTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextMax\",\"type\":\"uint256\"}],\"name\":\"BuyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyMarketingTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"BuyTreasuryTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextCooldown\",\"type\":\"uint256\"}],\"name\":\"CooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevTaxRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"DevTaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingTaxRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"MarketingTaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextMax\",\"type\":\"uint256\"}],\"name\":\"MaxTransferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellAutoLiquidityTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellDevTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellMarketingTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTax\",\"type\":\"uint256\"}],\"name\":\"SellTreasuryTaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nextStatus\",\"type\":\"bool\"}],\"name\":\"SwapFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"taxExcluded\",\"type\":\"bool\"}],\"name\":\"TaxExclusionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryTaxRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextWallet\",\"type\":\"address\"}],\"name\":\"TreasuryTaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextMax\",\"type\":\"uint256\"}],\"name\":\"WalletLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nextStatus\",\"type\":\"bool\"}],\"name\":\"WalletLimitWhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNIPE_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAutoLiquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devTaxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTaxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueAutoLiquidityTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueDevTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueMarketingTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueTreasuryTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAutoLiquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyAutoLiquidityTax\",\"type\":\"uint256\"}],\"name\":\"setBuyAutoLiquidityTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyDevTax\",\"type\":\"uint256\"}],\"name\":\"setBuyDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketingTax\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTreasuryTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTreasuryTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devTaxWallet\",\"type\":\"address\"}],\"name\":\"setDevTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingTaxWallet\",\"type\":\"address\"}],\"name\":\"setMarketingTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellAutoLiquidityTax\",\"type\":\"uint256\"}],\"name\":\"setSellAutoLiquidityTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellDevTax\",\"type\":\"uint256\"}],\"name\":\"setSellDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellMarketingTax\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellTreasuryTax\",\"type\":\"uint256\"}],\"name\":\"setSellTreasuryTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapFees\",\"type\":\"bool\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_taxExcluded\",\"type\":\"bool\"}],\"name\":\"setTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingActive\",\"type\":\"bool\"}],\"name\":\"setTradingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryTaxWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoLiquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTreasuryTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTaxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWalletLimitWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLimitWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DRAGOINU", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000034f086f3b33b684000000000000000000000000000000000000000000000000108b2a2c280290940000000000000000000000000000004e29e7dedef9fa0e95e801542690fe6845417ed40000000000000000000000002847397ba6038fd419aa4cefa948aa09005d356f00000000000000000000000000dc90bbc8ce4d876add1e5c79e68743b7ebf1e4", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63698229c99a2cd383fc6c64a2b6f4cba98db34e015ec850ceee0bad41e50cb3"}]}