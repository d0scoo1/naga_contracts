{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/VindergoodToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\n/**\\n *Submitted for verification at polygonscan.com on 2021-08-11\\n */\\n\\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\\n\\nimport \\\"./libraries/LibPart.sol\\\";\\nimport \\\"./royalties/RoyaltiesV2Impl.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\npragma solidity 0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            _msgSender() != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        if (fromBalance >= amount) {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            if (fromBalance >= amount) {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(\\n            accountBalance >= amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n        if (accountBalance >= amount) {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(\\n                accountBalance >= amount,\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/security/Pausable.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\n// File: contracts/common/meta-transactions/ContentMixin.sol\\n\\npragma solidity 0.7.5;\\n\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\\n\\n// File: contracts/common/meta-transactions/Initializable.sol\\n\\npragma solidity 0.7.5;\\n\\ncontract Initializable {\\n    bool private inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\\n// File: contracts/common/meta-transactions/EIP712Base.sol\\n\\npragma solidity 0.7.5;\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string public constant ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n            )\\n        );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contracts that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(string memory name) internal initializer {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\\n// File: contracts/common/meta-transactions/NativeMetaTransaction.sol\\n\\npragma solidity 0.7.5;\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n            )\\n        );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] += 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\\n// File: contracts/ERC1155Tradable.sol\\n\\npragma solidity 0.7.5;\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC1155Tradable\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\n  like exists(), name(), symbol(), and totalSupply()\\n */\\ncontract ERC1155Tradable is\\n    ContextMixin,\\n    ERC1155,\\n    NativeMetaTransaction,\\n    Ownable,\\n    Pausable\\n{\\n    using Address for address;\\n\\n    // Proxy registry address\\n    address public proxyRegistryAddress;\\n    // Contract name\\n    string public name;\\n    // Contract symbol\\n    string public symbol;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private balances;\\n\\n    mapping(uint256 => uint256) private _supply;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress\\n    ) ERC1155(\\\"\\\") {\\n        require(_proxyRegistryAddress != address(0), \\\"Invalid Address\\\");\\n\\n        name = _name;\\n        symbol = _symbol;\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n        _initializeEIP712(name);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner or their proxy\\n     */\\n    modifier onlyOwnerOrProxy() {\\n        require(\\n            _isOwnerOrProxy(_msgSender()),\\n            \\\"ERC1155Tradable#onlyOwner: CALLER_IS_NOT_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than _from or their proxy\\n     */\\n    modifier onlyApproved(address _from) {\\n        require(\\n            _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\n            \\\"ERC1155Tradable#onlyApproved: CALLER_NOT_ALLOWED\\\"\\n        );\\n        _;\\n    }\\n\\n    function _isOwnerOrProxy(address _address) internal view returns (bool) {\\n        return owner() == _address || _isProxyForUser(owner(), _address);\\n    }\\n\\n    function pause() external onlyOwnerOrProxy {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwnerOrProxy {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        return balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev Returns the total quantity for a token ID\\n     * @param _id uint256 ID of the token to query\\n     * @return amount of token in existence\\n     */\\n    function totalSupply(uint256 _id) public view returns (uint256) {\\n        return _supply[_id];\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool isOperator)\\n    {\\n        // Whitelist OpenSea proxy contracts for easy trading.\\n        if (_isProxyForUser(_owner, _operator)) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override whenNotPaused onlyApproved(from) {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            asSingletonArray(id),\\n            asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        balances[id][from] = fromBalance - amount;\\n        balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override whenNotPaused onlyApproved(from) {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            balances[id][from] = fromBalance - amount;\\n            balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook to be called right before minting\\n     * @param _id          Token ID to mint\\n     * @param _quantity    Amount of tokens to mint\\n     */\\n    function _beforeMint(uint256 _id, uint256 _quantity) internal virtual {}\\n\\n    /**\\n     * @dev Mints some amount of tokens to an address\\n     * @param _to          Address of the future owner of the token\\n     * @param _id          Token ID to mint\\n     * @param _quantity    Amount of tokens to mint\\n     * @param _data        Data to pass if receiver is contract\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) public virtual onlyOwnerOrProxy {\\n        _mint(_to, _id, _quantity, _data);\\n    }\\n\\n    /**\\n     * @dev Mint tokens for each id in _ids\\n     * @param _to          The address to mint tokens to\\n     * @param _ids         Array of ids to mint\\n     * @param _quantities  Array of amounts of tokens to mint per id\\n     * @param _data        Data to pass if receiver is contract\\n     */\\n    function batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities,\\n        bytes memory _data\\n    ) public virtual onlyOwnerOrProxy {\\n        _batchMint(_to, _ids, _quantities, _data);\\n    }\\n\\n    /**\\n     * @dev Burns amount of a given token id\\n     * @param _from          The address to burn tokens from\\n     * @param _id          Token ID to burn\\n     * @param _quantity    Amount to burn\\n     */\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _quantity\\n    ) public virtual onlyApproved(_from) {\\n        _burn(_from, _id, _quantity);\\n    }\\n\\n    /**\\n     * @dev Burns tokens for each id in _ids\\n     * @param _from          The address to burn tokens from\\n     * @param _ids         Array of token ids to burn\\n     * @param _quantities  Array of the amount to be burned\\n     */\\n    function batchBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities\\n    ) public virtual onlyApproved(_from) {\\n        _burnBatch(_from, _ids, _quantities);\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token is minted\\n     * @param _id uint256 ID of the token to query the existence of\\n     * @return bool whether the token exists\\n     */\\n    function exists(uint256 _id) public view returns (bool) {\\n        return _supply[_id] > 0;\\n    }\\n\\n    // Overrides ERC1155 _mint to allow changing birth events to creator transfers,\\n    // and to set _supply\\n    function _mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal virtual override whenNotPaused {\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            _to,\\n            asSingletonArray(_id),\\n            asSingletonArray(_amount),\\n            _data\\n        );\\n\\n        _beforeMint(_id, _amount);\\n\\n        // Add _amount\\n        balances[_id][_to] += _amount;\\n        _supply[_id] += _amount;\\n\\n        // Origin of token will be the _from parameter\\n        address origin = _origin(_id);\\n\\n        // Emit event\\n        emit TransferSingle(operator, origin, _to, _id, _amount);\\n\\n        // Calling onReceive method if recipient is contract\\n        doSafeTransferAcceptanceCheck(\\n            operator,\\n            origin,\\n            _to,\\n            _id,\\n            _amount,\\n            _data\\n        );\\n    }\\n\\n    // Overrides ERC1155MintBurn to change the batch birth events to creator transfers, and to set _supply\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual whenNotPaused {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"ERC1155Tradable#batchMint: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n\\n        // Number of mints to execute\\n        uint256 nMint = _ids.length;\\n\\n        // Origin of tokens will be the _from parameter\\n        address origin = _origin(_ids[0]);\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), _to, _ids, _amounts, _data);\\n\\n        // Executing all minting\\n        for (uint256 i = 0; i < nMint; i++) {\\n            // Update storage balance\\n            uint256 id = _ids[i];\\n            uint256 amount = _amounts[i];\\n            _beforeMint(id, amount);\\n            require(\\n                _origin(id) == origin,\\n                \\\"ERC1155Tradable#batchMint: MULTIPLE_ORIGINS_NOT_ALLOWED\\\"\\n            );\\n            balances[id][_to] += amount;\\n            _supply[id] += amount;\\n        }\\n\\n        // Emit batch mint event\\n        emit TransferBatch(operator, origin, _to, _ids, _amounts);\\n\\n        // Calling onReceive method if recipient is contract\\n        doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            origin,\\n            _to,\\n            _ids,\\n            _amounts,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal override whenNotPaused {\\n        require(account != address(0), \\\"ERC1155#_burn: BURN_FROM_ZERO_ADDRESS\\\");\\n        require(amount > 0, \\\"ERC1155#_burn: AMOUNT_LESS_THAN_ONE\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            asSingletonArray(id),\\n            asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 accountBalance = balances[id][account];\\n        require(\\n            accountBalance >= amount,\\n            \\\"ERC1155#_burn: AMOUNT_EXCEEDS_BALANCE\\\"\\n        );\\n        balances[id][account] = accountBalance - amount;\\n        _supply[id] -= amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal override whenNotPaused {\\n        require(account != address(0), \\\"ERC1155: BURN_FROM_ZERO_ADDRESS\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = balances[id][account];\\n            require(\\n                accountBalance >= amount,\\n                \\\"ERC1155#_burnBatch: AMOUNT_EXCEEDS_BALANCE\\\"\\n            );\\n            balances[id][account] = accountBalance - amount;\\n            _supply[id] -= amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    // Override this to change birth events' _from address\\n    function _origin(\\n        uint256 /* _id */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    // PROXY HELPER METHODS\\n\\n    function _isProxyForUser(address _user, address _address)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        if (!proxyRegistryAddress.isContract()) {\\n            return false;\\n        }\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        return address(proxyRegistry.proxies(_user)) == _address;\\n    }\\n\\n    // Copied from OpenZeppelin\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L394\\n    function doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    // Copied from OpenZeppelin\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L417\\n    function doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    // Copied from OpenZeppelin\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/c3ae4790c71b7f53cc8fff743536dcb7031fed74/contracts/token/ERC1155/ERC1155.sol#L440\\n    function asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.\\n     */\\n    function _msgSender() internal view override returns (address sender) {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\\n// File: contracts/AssetContract.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @title AssetContract\\n * AssetContract - A contract for easily creating non-fungible assets on OpenSea.\\n */\\ncontract AssetContract is RoyaltiesV2Impl, ERC1155Tradable {\\n    event PermanentURI(string _value, uint256 indexed _id);\\n\\n    uint256 constant TOKEN_SUPPLY_CAP = 1;\\n\\n    string public templateURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURI;\\n\\n    // Mapping for whether a token URI is set permanently\\n    mapping(uint256 => bool) private _isPermanentURI;\\n\\n    modifier onlyTokenAmountOwned(\\n        address _from,\\n        uint256 _id,\\n        uint256 _quantity\\n    ) {\\n        require(\\n            _ownsTokenAmount(_from, _id, _quantity),\\n            \\\"AssetContract#onlyTokenAmountOwned: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Require the URI to be impermanent\\n     */\\n    modifier onlyImpermanentURI(uint256 id) {\\n        require(\\n            !isPermanentURI(id),\\n            \\\"AssetContract#onlyImpermanentURI: URI_CANNOT_BE_CHANGED\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress,\\n        string memory _templateURI\\n    ) ERC1155Tradable(_name, _symbol, _proxyRegistryAddress) {\\n        if (bytes(_templateURI).length > 0) {\\n            setTemplateURI(_templateURI);\\n        }\\n    }\\n\\n    /**\\n     * @dev Require _from to own a specified quantity of the token\\n     */\\n    function _ownsTokenAmount(\\n        address _from,\\n        uint256 _id,\\n        uint256 _quantity\\n    ) internal view returns (bool) {\\n        return balanceOf(_from, _id) >= _quantity;\\n    }\\n\\n    /**\\n     * Compat for factory interfaces on OpenSea\\n     * Indicates that this contract can return balances for\\n     * tokens that haven't been minted yet\\n     */\\n    function supportsFactoryInterface() public pure returns (bool) {\\n        return true;\\n    }\\n\\n    function setTemplateURI(string memory _uri) public onlyOwnerOrProxy {\\n        templateURI = _uri;\\n    }\\n\\n    function setURI(uint256 _id, string memory _uri)\\n        public\\n        virtual\\n        onlyOwnerOrProxy\\n        onlyImpermanentURI(_id)\\n    {\\n        _setURI(_id, _uri);\\n    }\\n\\n    function setPermanentURI(uint256 _id, string memory _uri)\\n        public\\n        virtual\\n        onlyOwnerOrProxy\\n        onlyImpermanentURI(_id)\\n    {\\n        _setPermanentURI(_id, _uri);\\n    }\\n\\n    function isPermanentURI(uint256 _id) public view returns (bool) {\\n        return _isPermanentURI[_id];\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        string memory tokenUri = _tokenURI[_id];\\n        if (bytes(tokenUri).length != 0) {\\n            return tokenUri;\\n        }\\n        return templateURI;\\n    }\\n\\n    function balanceOf(address _owner, uint256 _id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 balance = super.balanceOf(_owner, _id);\\n        return\\n            _isCreatorOrProxy(_id, _owner)\\n                ? balance + _remainingSupply(_id)\\n                : balance;\\n    }\\n\\n    function safeTransferFrom_(\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data,\\n        LibPart.Part memory _royalty\\n    ) public returns (uint256) {\\n        LibPart.Part memory royalty = getVindergoodV2Royalties(_id);\\n        if (royalty.account == address(0)) {\\n            _saveRoyalties(_id, _royalty);\\n        }\\n        uint256 mintedBalance = super.balanceOf(_from, _id);\\n        if (mintedBalance < _amount) {\\n            // Only mint what _from doesn't already have\\n            mint(_to, _id, _amount - mintedBalance, _data);\\n            if (mintedBalance > 0) {\\n                super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\\n            }\\n        } else {\\n            super.safeTransferFrom(_from, _to, _id, _amount, _data);\\n        }\\n        return _id;\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) public override {\\n        require(\\n            _ids.length == _amounts.length,\\n            \\\"AssetContract#safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\"\\n        );\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            safeTransferFrom(_from, _to, _ids[i], _amounts[i], _data);\\n        }\\n    }\\n\\n    function _beforeMint(uint256 _id, uint256 _quantity)\\n        internal\\n        view\\n        override\\n    {\\n        require(\\n            _quantity <= _remainingSupply(_id),\\n            \\\"AssetContract#_beforeMint: QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\\\"\\n        );\\n    }\\n\\n    // Overrides ERC1155Tradable burn to check for quantity owned\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _quantity\\n    ) public override onlyTokenAmountOwned(_from, _id, _quantity) {\\n        super.burn(_from, _id, _quantity);\\n    }\\n\\n    // Overrides ERC1155Tradable batchBurn to check for quantity owned\\n    function batchBurn(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities\\n    ) public override {\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            require(\\n                _ownsTokenAmount(_from, _ids[i], _quantities[i]),\\n                \\\"AssetContract#batchBurn: ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\"\\n            );\\n        }\\n        super.batchBurn(_from, _ids, _quantities);\\n    }\\n\\n    function _mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) internal override {\\n        super._mint(_to, _id, _quantity, _data);\\n        if (_data.length > 1) {\\n            _setURI(_id, string(_data));\\n        }\\n    }\\n\\n    function _isCreatorOrProxy(uint256, address _address)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _isOwnerOrProxy(_address);\\n    }\\n\\n    function _remainingSupply(uint256 _id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return TOKEN_SUPPLY_CAP - totalSupply(_id);\\n    }\\n\\n    // Override ERC1155Tradable for birth events\\n    function _origin(\\n        uint256 /* _id */\\n    ) internal view virtual override returns (address) {\\n        return owner();\\n    }\\n\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities,\\n        bytes memory _data\\n    ) internal virtual override {\\n        super._batchMint(_to, _ids, _quantities, _data);\\n        if (_data.length > 1) {\\n            for (uint256 i = 0; i < _ids.length; i++) {\\n                _setURI(_ids[i], string(_data));\\n            }\\n        }\\n    }\\n\\n    function _setURI(uint256 _id, string memory _uri) internal {\\n        _tokenURI[_id] = _uri;\\n        emit URI(_uri, _id);\\n    }\\n\\n    function _setPermanentURI(uint256 _id, string memory _uri)\\n        internal\\n        virtual\\n    {\\n        require(\\n            bytes(_uri).length > 0,\\n            \\\"AssetContract#setPermanentURI: ONLY_VALID_URI\\\"\\n        );\\n        _isPermanentURI[_id] = true;\\n        _setURI(_id, _uri);\\n        emit PermanentURI(_uri, _id);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Strings.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// File: contracts/TokenIdentifiers.sol\\n\\npragma solidity 0.7.5;\\n\\n/*\\n  DESIGN NOTES:\\n  Token ids are a concatenation of:\\n * creator: hex address of the creator of the token. 160 bits\\n * index: Index for this token (the regular ID), up to 2^56 - 1. 56 bits\\n * supply: Supply cap for this token, up to 2^40 - 1 (1 trillion).  40 bits\\n\\n*/\\n/**\\n * @title TokenIdentifiers\\n * support for authentication and metadata for token ids\\n */\\nlibrary TokenIdentifiers {\\n    uint8 constant ADDRESS_BITS = 160;\\n    uint8 constant INDEX_BITS = 56;\\n    uint8 constant SUPPLY_BITS = 40;\\n\\n    uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\\n    uint256 constant INDEX_MASK =\\n        ((uint256(1) << INDEX_BITS) - 1) ^ SUPPLY_MASK;\\n\\n    function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\\n        return _id & SUPPLY_MASK;\\n    }\\n\\n    function tokenIndex(uint256 _id) internal pure returns (uint256) {\\n        return _id & INDEX_MASK;\\n    }\\n\\n    function tokenCreator(uint256 _id) internal pure returns (address) {\\n        return address(uint160(_id >> (INDEX_BITS + SUPPLY_BITS)));\\n    }\\n}\\n\\n// File: contracts/VindergoodToken.sol\\n\\npragma solidity 0.7.5;\\n\\n/**\\n * @title VindergoodToken\\n * OpenSea shared asset contract - A contract for easily creating custom assets on OpenSea\\n */\\ncontract VindergoodToken is AssetContract, ReentrancyGuard {\\n    // Migration contract address\\n    VindergoodToken public migrationTarget;\\n\\n    mapping(address => bool) public sharedProxyAddresses;\\n\\n    struct Ownership {\\n        uint256 id;\\n        address owner;\\n    }\\n\\n    using TokenIdentifiers for uint256;\\n\\n    event CreatorChanged(uint256 indexed _id, address indexed _creator);\\n\\n    mapping(uint256 => address) internal _creatorOverride;\\n\\n    /**\\n     * @dev Require msg.sender to be the creator of the token id\\n     */\\n    modifier creatorOnly(uint256 _id) {\\n        require(\\n            _isCreatorOrProxy(_id, _msgSender()),\\n            \\\"VindergoodToken#creatorOnly: ONLY_CREATOR_ALLOWED\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Require the caller to own the full supply of the token\\n     */\\n    modifier onlyFullTokenOwner(uint256 _id) {\\n        require(\\n            _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\\n            \\\"VindergoodToken#onlyFullTokenOwner: ONLY_FULL_TOKEN_OWNER_ALLOWED\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress,\\n        string memory _templateURI,\\n        address _migrationAddress\\n    ) AssetContract(_name, _symbol, _proxyRegistryAddress, _templateURI) {\\n        migrationTarget = VindergoodToken(_migrationAddress);\\n    }\\n\\n    /**\\n     * @dev Allows owner to change the proxy registry\\n     */\\n    function setProxyRegistryAddress(address _address) public onlyOwnerOrProxy {\\n        proxyRegistryAddress = _address;\\n    }\\n\\n    /**\\n     * @dev Allows owner to add a shared proxy address\\n     */\\n    function addSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\n        sharedProxyAddresses[_address] = true;\\n    }\\n\\n    /**\\n     * @dev Allows owner to remove a shared proxy address\\n     */\\n    function removeSharedProxyAddress(address _address)\\n        public\\n        onlyOwnerOrProxy\\n    {\\n        delete sharedProxyAddresses[_address];\\n    }\\n\\n    /**\\n     * @dev Allows owner to disable the ability to migrate\\n     */\\n    function disableMigrate() public onlyOwnerOrProxy {\\n        migrationTarget = VindergoodToken(address(0));\\n    }\\n\\n    /**\\n     * @dev Migrate state from previous contract\\n     */\\n    function migrate(Ownership[] memory _ownerships) public onlyOwnerOrProxy {\\n        VindergoodToken _migrationTarget = migrationTarget;\\n        require(\\n            _migrationTarget != VindergoodToken(address(0)),\\n            \\\"VindergoodToken#migrate: MIGRATE_DISABLED\\\"\\n        );\\n\\n        string memory _migrationTargetTemplateURI = _migrationTarget\\n            .templateURI();\\n\\n        for (uint256 i = 0; i < _ownerships.length; ++i) {\\n            uint256 id = _ownerships[i].id;\\n            address owner = _ownerships[i].owner;\\n\\n            require(\\n                owner != address(0),\\n                \\\"VindergoodToken#migrate: ZERO_ADDRESS_NOT_ALLOWED\\\"\\n            );\\n\\n            uint256 previousAmount = _migrationTarget.balanceOf(owner, id);\\n\\n            if (previousAmount == 0) {\\n                continue;\\n            }\\n\\n            _mint(owner, id, previousAmount, \\\"\\\");\\n\\n            if (\\n                keccak256(bytes(_migrationTarget.uri(id))) !=\\n                keccak256(bytes(_migrationTargetTemplateURI))\\n            ) {\\n                _setPermanentURI(id, _migrationTarget.uri(id));\\n            }\\n        }\\n    }\\n\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) public override nonReentrant creatorOnly(_id) {\\n        _mint(_to, _id, _quantity, _data);\\n    }\\n\\n    function batchMint(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities,\\n        bytes memory _data\\n    ) public override nonReentrant {\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            require(\\n                _isCreatorOrProxy(_ids[i], _msgSender()),\\n                \\\"VindergoodToken#_batchMint: ONLY_CREATOR_ALLOWED\\\"\\n            );\\n        }\\n        _batchMint(_to, _ids, _quantities, _data);\\n    }\\n\\n    /////////////////////////////////\\n    // CONVENIENCE CREATOR METHODS //\\n    /////////////////////////////////\\n\\n    /**\\n     * @dev Will update the URI for the token\\n     * @param _id The token ID to update. msg.sender must be its creator, the uri must be impermanent,\\n     *            and the creator must own all of the token supply\\n     * @param _uri New URI for the token.\\n     */\\n    function setURI(uint256 _id, string memory _uri)\\n        public\\n        override\\n        creatorOnly(_id)\\n        onlyImpermanentURI(_id)\\n        onlyFullTokenOwner(_id)\\n    {\\n        _setURI(_id, _uri);\\n    }\\n\\n    /**\\n     * @dev setURI, but permanent\\n     */\\n    function setPermanentURI(uint256 _id, string memory _uri)\\n        public\\n        override\\n        creatorOnly(_id)\\n        onlyImpermanentURI(_id)\\n        onlyFullTokenOwner(_id)\\n    {\\n        _setPermanentURI(_id, _uri);\\n    }\\n\\n    /**\\n     * @dev Change the creator address for given token\\n     * @param _to   Address of the new creator\\n     * @param _id  Token IDs to change creator of\\n     */\\n    function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\\n        require(\\n            _to != address(0),\\n            \\\"VindergoodToken#setCreator: INVALID_ADDRESS.\\\"\\n        );\\n        _creatorOverride[_id] = _to;\\n        emit CreatorChanged(_id, _to);\\n    }\\n\\n    /**\\n     * @dev Get the creator for a token\\n     * @param _id   The token id to look up\\n     */\\n    function creator(uint256 _id) public view returns (address) {\\n        if (_creatorOverride[_id] != address(0)) {\\n            return _creatorOverride[_id];\\n        } else {\\n            return _id.tokenCreator();\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the maximum supply for a token\\n     * @param _id   The token id to look up\\n     */\\n    function maxSupply(uint256 _id) public pure returns (uint256) {\\n        return _id.tokenMaxSupply();\\n    }\\n\\n    // Override ERC1155Tradable for birth events\\n    function _origin(uint256 _id) internal pure override returns (address) {\\n        return _id.tokenCreator();\\n    }\\n\\n    function _requireMintable(address _address, uint256 _id) internal view {\\n        require(\\n            _isCreatorOrProxy(_id, _address),\\n            \\\"VindergoodToken#_requireMintable: ONLY_CREATOR_ALLOWED\\\"\\n        );\\n    }\\n\\n    function _remainingSupply(uint256 _id)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return maxSupply(_id) - totalSupply(_id);\\n    }\\n\\n    function _isCreatorOrProxy(uint256 _id, address _address)\\n        internal\\n        view\\n        override\\n        returns (bool)\\n    {\\n        address creator_ = creator(_id);\\n        return creator_ == _address || _isProxyForUser(creator_, _address);\\n    }\\n\\n    // Overrides ERC1155Tradable to allow a shared proxy address\\n    function _isProxyForUser(address _user, address _address)\\n        internal\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (sharedProxyAddresses[_address]) {\\n            return true;\\n        }\\n        return super._isProxyForUser(_user, _address);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibPart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT pragma\\npragma solidity 0.7.5;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/AbstractRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\nimport \\\"../libraries/LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping(uint256 => LibPart.Part) public royalties;\\n\\n    function _saveRoyalties(uint256 _id, LibPart.Part memory _royalties)\\n        internal\\n    {\\n        require(\\n            _royalties.account != address(0x0),\\n            \\\"Recipient should be present\\\"\\n        );\\n        require(_royalties.value >= 0, \\\"Royalty value should be positive\\\");\\n        royalties[_id] = _royalties;\\n        _onRoyaltiesSet(_id, _royalties);\\n    }\\n\\n    function _updateAccount(\\n        uint256 _id,\\n        address _from,\\n        address _to\\n    ) internal {\\n        if (royalties[_id].account == _from) {\\n            royalties[_id].account = payable(address(uint160(_to)));\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 _id, LibPart.Part memory _royalties)\\n        internal\\n        virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/RoyaltiesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part royalties);\\n\\n    function getVindergoodV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part memory);\\n}\\n\"\r\n    },\r\n    \"contracts/royalties/RoyaltiesV2Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"./RoyaltiesV2.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\\n    function getVindergoodV2Royalties(uint256 id)\\n        public\\n        view\\n        override\\n        returns (LibPart.Part memory)\\n    {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 _id, LibPart.Part memory _royalties)\\n        internal\\n        override\\n    {\\n        emit RoyaltiesSet(_id, _royalties);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_templateURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_migrationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"CreatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part\",\"name\":\"royalties\",\"type\":\"tuple\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSharedProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVindergoodV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPermanentURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct VindergoodToken.Ownership[]\",\"name\":\"_ownerships\",\"type\":\"tuple[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTarget\",\"outputs\":[{\"internalType\":\"contract VindergoodToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSharedProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part\",\"name\":\"_royalty\",\"type\":\"tuple\"}],\"name\":\"safeTransferFrom_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setPermanentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTemplateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharedProxyAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsFactoryInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VindergoodToken", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008dc357f07dec511da92bd1d7ba07ad4a2706f68e000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009587472656d636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035854520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004268747470733a2f2f6d61696e6170692e76696e646572676f6f642e636f6d2f6170692f76312f6e6674732f6d657461646174612f76696e646572676f6f642d657468000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}