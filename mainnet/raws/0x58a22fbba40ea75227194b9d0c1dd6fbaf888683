{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n                              __       Kaiba DeFi V2\r\n                            .d$$b\r\n                          .' TO$;\\\r\n                         /  : TP._;\r\n                        / _.;  :Tb|\r\n                       /   /   ;j$j\r\n                   _.-\"       d$$$$\r\n                 .' ..       d$$$$;\r\n                /  /P'      d$$$$P. |\\\r\n               /   \"      .d$$$P' |\\^\"l\r\n             .'           `T$P^\"\"\"\"\"  :\r\n         ._.'      _.'                ;\r\n      `-.-\".-'-' ._.       _.-\"    .-\"\r\n    `.-\" _____  ._              .-\"\r\n   -(.g$$$$$$$b.              .'\r\n     \"\"^^T$$$P^)            .(:\r\n       _/  -\"  /.'         /:/;\r\n    ._.'-'`-'  \")/         /;/;\r\n `-.-\"..--\"\"   \" /         /  ;\r\n.-\" ..--\"\"        -'          :\r\n..--\"\"--.-\"         (\\      .-(\\\r\n  ..--\"\"              `-\\(\\/;`\r\n    _.                      :\r\n                            ;`-\r\n                           :\\\r\n                           ;\r\n\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract kaibaklaim {\r\n\r\n    address owner;\r\n    mapping(address => bool) banned;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        banned[0x71176C6bea5F2e3786306b5F2a19839EDEf5AfA8] = true;\r\n        banned[0x8914d14c6a4cB2137F97748d548eFCCeFfC7A96b] = true;\r\n        banned[0xC4956097F188f97Cd7fABFe997dd2A0D3cbe6fFf] = true;\r\n        banned[0x963bEB03190FeA4999B7afCd20c88C62FA78A5c3] = true;\r\n        banned[0x1142c53240EA2240f9f22E5462EEE613d429536E] = true;\r\n        banned[0x38dE2236b854A8E06293237AeFaE4FDa94b2a2c3] = true;\r\n        banned[0x045f7a1C3b1D9Fa0A78d6F32FcC36E80D95fE5E8] = true;\r\n        banned[0x172D78dC3d1Af1833fb0F3140BBfAd1C31cC2C78] = true;\r\n        banned[0x352178d20251634d7E2F2839090359321467D915] = true;\r\n        banned[0xb35c13f2fB3B329648A43a70E4DEf79Ff46Fc86B] = true;\r\n        banned[0x8A75fD77bAf415b973f0963B2aA371cFcb695cef] = true;\r\n        banned[0xa31E7c0c2f2f277705f80018e2F1BaDEE08a05de] = true;\r\n        banned[0x28CeDd65366af0b6DABe503673337E8AAca8a041] = true;\r\n        banned[0xAC48E1ad994E948209d981a0411f3EB6A70B3bFF] = true;\r\n        banned[0xCb223292922Eef1749d04dB3C1b7040811a9b635] = true;\r\n        banned[0x87e8B7788a43C550609886813F9ea7B423C7E458] = true;\r\n        banned[0xe5129a0411c667114BF56841881953BAa05A71F9] = true;\r\n        banned[0x8Eb6Fe28233842349dDfd684BEC8abD85351729c] = true;\r\n        banned[0x29948E3565A3e355eDb83ef2A64634162B16a9dB] = true;\r\n        banned[0x3c802411DDE9C6e37AA0815DA53E6aABFf493EAf] = true;\r\n        banned[0x20358ac4F98Fb250EDcF9f1206E2d435ee8b2e39] = true;\r\n        banned[0x7C0B29310183F8887355C3f3E1aC06aDf8DD71F0] = true;\r\n        banned[0xEeB747A9d6DD15e84A75aC2988020EA9a325D0Aa] = true;\r\n        banned[0xcD6E9311caCD5848dCD1A62B0EF28D8A10a09C2b] = true;\r\n        banned[0x4454e43B045DaE19b31aEBe79cD80D39429B80bf] = true;\r\n        banned[0xD58172107b4524842aB51b0Ee8c5d8A6b72bF5fA] = true;\r\n        banned[0xdea42F6FEdc76d1683C9D868615AF1301Af53642] = true;\r\n        banned[0xDA95B67962E153d9A368f5C808C4b6d823eAe82c] = true;\r\n        banned[0xC4aa3D182c1F48F4341e867534518f98bb5cbcF1] = true;\r\n        banned[0x56F89b0f679d26371BeBc60Aa39561e681Fe78Fa] = true;\r\n        banned[0xAD808e43E9df338B8aF0B5cf72732783c26778A8] = true;\r\n        banned[0xE366cBAb8026e60bcEB77A670b6110C599c57719] = true;\r\n        banned[0xF29D777378A812072e715bD6088D4033A23C1d81] = true;\r\n        banned[0x9cfa32dda287f94A4966A99a281d12D7f49FBed0] = true;\r\n        banned[0x670e1B74C1c142Af49A8209c729Cd8CCF1eddC7d] = true;\r\n        banned[0x10d610F38cD32F9ea46c60357108f77df6af9504] = true;\r\n        banned[0x6DA44F425e5d457BA74E1d9415826Fb83E9baf1c] = true;\r\n        banned[0x60220548f753C5Bade57a8c4A3d7dd9D491cd722] = true;\r\n        banned[0x46da17ad16d5d8e1a519CD9C30A3998dc49008fb] = true;\r\n        banned[0xe75886C563a48C49F1c73bEeFEe565ecdDc22B27] = true;\r\n        banned[0x7de2B4Fa470012f0bC063603c30fe1f63A71AcC8] = true;\r\n        banned[0x53fb84aaeD385766Dc1fe7d75024A1B43937f6c9] = true;\r\n\r\n    }\r\n\r\n    IERC20 kaiba = IERC20(0x8BB048845Ee0d75BE8e07954b2e1E5b51B64b442);\r\n    IERC20 newkaiba = IERC20(0x8BB048845Ee0d75BE8e07954b2e1E5b51B64b442);\r\n    bool locked;\r\n    bool open;\r\n\r\n\r\n\r\n    function set_address(address addy) public onlyOwner {\r\n        newkaiba = IERC20(addy);\r\n    }\r\n\r\n    function ban(address addy) public onlyOwner {\r\n        banned[addy] = true;\r\n    }\r\n\r\n    \r\n    function unban(address addy) public onlyOwner {\r\n        banned[addy] = false;\r\n    }\r\n\r\n    function open_claim(bool booly) public onlyOwner {\r\n        open = booly;\r\n    }\r\n\r\n    function claim() public {\r\n        require(open);\r\n        require(!locked);\r\n        locked = true;\r\n        require(!banned[msg.sender], \"Nothing to claim\");\r\n        uint balance = kaiba.balanceOf(msg.sender);\r\n        require(balance > 0, \"Nothing to claim\");\r\n        newkaiba.transfer(msg.sender, balance);\r\n        banned[msg.sender] = true;\r\n        locked = false;\r\n    }\r\n\r\n    function retire(address addy) public onlyOwner {\r\n        IERC20 tkn = IERC20(addy);\r\n        tkn.transfer(msg.sender, tkn.balanceOf(address(this)));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"ban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"open_claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"set_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"unban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "kaibaklaim", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://187aaa8535bb7a22144bea33d00dd501aecfa43ed79f0dc749a8dcd36fa5f97a"}]}