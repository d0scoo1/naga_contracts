{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.4;\r\n\r\n\r\n//import \"./ReentrancyGuard.sol\";\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\r\n\r\n//pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n//pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n//pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//import \"./SafeERC20.sol\";\r\n\r\n//pragma solidity ^0.8.0;\r\n\r\n//import \"./IERC20.sol\";\r\n//import \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n//import \"./ISTAKING.sol\";\r\n/**\r\n* @dev Public interface for the staking functions \r\n*/\r\ninterface ISTAKING{\r\n    /**\r\n    * @dev Stakes a certain amount of tokens, this will attempt to transfer the given amount from the caller.\r\n    * It will count the actual number of tokens trasferred as being staked\r\n    * MUST trigger Staked event.\r\n    **/\r\n    function stake(uint256 amount) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Stakes a certain amount of tokens on behalf of address `user`, \r\n    * this will attempt to transfer the given amount from the caller.\r\n    * caller must have approved this contract, previously. \r\n    * It will count the actual number of tokens trasferred as being staked\r\n    * MUST trigger Staked event.\r\n    * Returns the number of tokens actually staked\r\n    **/\r\n    function stakeFor(address voter, address staker, uint256 amount) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the caller, \r\n    * MUST trigger Unstaked event.\r\n    */\r\n    function unstake(uint256 amount) external;\r\n\r\n    /**\r\n    * @dev Unstakes a certain amount of tokens currently staked on behalf of address `user`, \r\n    * this SHOULD return the given amount of tokens to the caller\r\n    * caller is responsible for returning tokens to `user` if applicable.\r\n    * MUST trigger Unstaked event.\r\n    */\r\n    function unstakeFor(address voter, address staker, uint256 amount) external;\r\n\r\n    /**\r\n    * @dev Returns the current total of tokens staked for address addr.\r\n    */\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the current tokens staked by address `delegate` for address `user`.\r\n    */\r\n    function stakedFor(address user, address delegate) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the number of current total tokens staked.\r\n    */\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    /**\r\n    * @dev address of the token being used by the staking interface\r\n    */\r\n    function token() external view returns (address);\r\n\r\n    /** Event\r\n    * `voter` the address that will cast votes weighted by the number of tokens staked for `voter`\r\n    * `staker` the address staking for `voter` - tokens are transferred from & returned to `staker`\r\n    *  `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer\r\n    * `amount` is the value of tokens to be staked\r\n    **/\r\n    event Staked(address indexed voter, address indexed staker, address proxy, uint256 amount);\r\n    /** Event\r\n    * `voter` the address that will cast votes weighted by the number of tokens staked for `voter`\r\n    * `staker` the address staking for `voter` - tokens are transferred from & returned to `staker`\r\n    *  `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer\r\n    * `amount` is the value of tokens to be staked\r\n    **/\r\n    event Unstaked(address indexed voter, address indexed staker, address proxy, uint256 amount);\r\n}\r\n\r\n\r\n\r\n//import \"./ISTAKINGPROXY.sol\";\r\ninterface ISTAKINGPROXY{\r\n    /**\r\n    * @dev a callback to perform the actual transfer of tokens to the actual staking contract \r\n    * Precondition: the user doing the staking MUST approve this contract or we'll revert\r\n    **/\r\n    function proxyTransfer(address from, uint256 amount) external;\r\n}\r\n\r\n\r\n//import \"./ITOKENLOCK.sol\";\r\n/**\r\n* @dev Inteface for the token lock features in this contract\r\n*/\r\ninterface ITOKENLOCK {\r\n    /**\r\n     * @dev Emitted when the token lock is initialized  \r\n     * `tokenHolder` is the address the lock pertains to\r\n     *  `amountLocked` is the amount of tokens locked \r\n     *  `time` is the (initial) time at which tokens were locked\r\n     *  `unlockPeriod` is the time interval at which tokens become unlockedPerPeriod\r\n     *  `unlockedPerPeriod` is the amount of token unlocked earch unlockPeriod\r\n     */\r\n    event  NewTokenLock(address tokenHolder, uint256 amountLocked, uint256 time, uint256 unlockPeriod, uint256 unlockedPerPeriod);\r\n    /**\r\n     * @dev Emitted when the token lock is updated  to be more strict\r\n     * `tokenHolder` is the address the lock pertains to\r\n     *  `amountLocked` is the amount of tokens locked \r\n     *  `time` is the (initial) time at which tokens were locked\r\n     *  `unlockPeriod` is the time interval at which tokens become unlockedPerPeriod\r\n     *  `unlockedPerPeriod` is the amount of token unlocked earch unlockPeriod\r\n     */\r\n    event  UpdateTokenLock(address tokenHolder, uint256 amountLocked, uint256 time, uint256 unlockPeriod, uint256 unlockedPerPeriod);\r\n    \r\n    /**\r\n     * @dev Lock `baseTokensLocked_` held by the caller with `unlockedPerEpoch_` tokens unlocking each `unlockEpoch_`\r\n     *\r\n     *\r\n     * Emits an {NewTokenLock} event indicating the updated terms of the token lockup.\r\n     *\r\n     * Requires msg.sender to:\r\n     *\r\n     * - Must not be a prevoius lock for this address. If so, it must be first cleared with a call to {clearLock}.\r\n     * - Must have at least a balance of `baseTokensLocked_` to lock\r\n     * - Must provide non-zero `unlockEpoch_`\r\n     * - Must have at least `unlockedPerEpoch_` tokens to unlock \r\n     *  - `unlockedPerEpoch_` must be greater than zero\r\n     */\r\n    \r\n    function newTokenLock(uint256 baseTokensLocked_, uint256 unlockEpoch_, uint256 unlockedPerEpoch_) external;\r\n    \r\n    /**\r\n     * @dev Reset the lock state\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - msg.sender must not have any tokens locked, currently\r\n     */\r\n    function clearLock() external;\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens that are unlocked i.e. transferrable by `who`\r\n     *\r\n     */\r\n    function balanceUnlocked(address who) external view returns (uint256 amount);\r\n    /**\r\n     * @dev Returns the amount of tokens that are locked and not transferrable by `who`\r\n     *\r\n     */\r\n    function balanceLocked(address who) external view returns (uint256 amount);\r\n\r\n    /**\r\n     * @dev Reduce the amount of token unlocked each period by `subtractedValue`\r\n     * \r\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\r\n     * \r\n     * Requires: \r\n     *  - msg.sender must have tokens currently locked\r\n     *  - `subtractedValue` is greater than 0\r\n     *  - cannot reduce the unlockedPerEpoch to 0\r\n     *\r\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \r\n     */\r\n    function decreaseUnlockAmount(uint256 subtractedValue) external;\r\n    /**\r\n     * @dev Increase the duration of the period at which tokens are unlocked by `addedValue`\r\n     * this will have the net effect of slowing the rate at which tokens are unlocked\r\n     * \r\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\r\n     * \r\n     * Requires: \r\n     *  - msg.sender must have tokens currently locked\r\n     *  - `addedValue` is greater than 0\r\n     * \r\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \r\n     */\r\n    function increaseUnlockTime(uint256 addedValue) external;\r\n    /**\r\n     * @dev Increase the number of tokens locked by `addedValue`\r\n     * i.e. locks up more tokens.\r\n     * \r\n     *      \r\n     * Emits an {UpdateTokenLock} event indicating the updated terms of the token lockup.\r\n     * \r\n     * Requires: \r\n     *  - msg.sender must have tokens currently locked\r\n     *  - `addedValue` is greater than zero\r\n     *  - msg.sender must have sufficient unlocked tokens to lock\r\n     * \r\n     *  NOTE: As a side effect resets the baseTokensLocked and lockTime for msg.sender \r\n     *\r\n     */\r\n    function increaseTokensLocked(uint256 addedValue) external;\r\n\r\n}\r\n\r\nstruct Stake{\r\n    uint256 totalStake;\r\n    mapping (address => uint256) stakedAmount;\r\n}\r\n\r\n/** \r\n* @dev Computes voting power based on staked and locked tokens.\r\n* The deployer is responsible for supplying a token_ implementing ERC20 and ILOCKER. \r\n* The deployer is trusted to know & have verified the token code token code is appropriate.\r\n* A scaling factor is specified as a uint8 array of bytes which serves to \r\n* reduce or increase the voting power of a class of token holder (locked tokens). \r\n* The scaling factor changes over time, and is looked up based on the current epoch\r\n*/\r\ncontract VotingPower is ReentrancyGuard, ISTAKING{\r\n    //the token used for staking. Implements ILOCKER. It is trusted & known code.\r\n    IERC20 immutable _token;\r\n    //store the number of tokens staked by each address\r\n    mapping (address => Stake) public stakes;\r\n\r\n    //keep track of the sum of staked tokens\r\n    uint256 private _totalStaked;\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    //locked tokens have their voting power scaled by this percentage.\r\n    bytes voteScalingPercent;\r\n    //the time at which this contract was deployed (unix time)\r\n    uint256 creationTime;\r\n    //the time each voting epoch lasts in seconds\r\n    uint256 epochLength;\r\n\r\n    /**\r\n    * @dev initialize the contract\r\n    * @param token_ is the token that is staked or locked to get voting power\r\n    * @param scaling_ is an array of uint8 (bytes) percent voting power discounts for each epoch\r\n    * @param epoch_ is the duration of one epoch in seconds\r\n    **/\r\n    constructor(address token_, bytes memory scaling_, uint256 epoch_){\r\n        require(epoch_ > 0);\r\n        _token = IERC20(token_);\r\n        creationTime = block.timestamp;\r\n        voteScalingPercent = scaling_;\r\n        epochLength = epoch_;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the voting power for `who`\r\n    * @param who the address whose votingPower to compute\r\n    * @return the voting power for `who`\r\n    **/\r\n    function votingPower(address who) public view returns (uint256) {\r\n        return _votingPowerStaked(who) + _votingPowerLocked(who);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the voting power for `who` due to staked tokens\r\n    * @param who the address whose votingPower to compute\r\n    * @return the voting power for who    \r\n    **/\r\n    function _votingPowerStaked(address who) internal view returns (uint256) {\r\n        return stakes[who].totalStake;\r\n    }\r\n    /**\r\n    * @dev Returns the voting power for `who` due to locked tokens\r\n    * @param who the address whose votingPower to compute\r\n    * @return the voting power for who    \r\n    * Locked tokens scaled discounted voting power as defined by voteScalingPercent\r\n    **/\r\n    function _votingPowerLocked(address who) internal view returns (uint256) {\r\n        uint256 epoch = _currentEpoch();\r\n        if(epoch >= voteScalingPercent.length){\r\n            return ITOKENLOCK(address(_token)).balanceLocked(who);\r\n        }\r\n        return ITOKENLOCK(address(_token)).balanceLocked(who) * (uint8)(voteScalingPercent[epoch])/100.0;\r\n    }\r\n    /**\r\n    * @dev Returns the current epoch used to look up the scaling factor\r\n    * @return the current epoch\r\n    **/\r\n    function _currentEpoch() internal view returns (uint256) {\r\n        return (block.timestamp - creationTime)/epochLength;\r\n    }\r\n\r\n    /**\r\n    * @dev Stakes the specified `amount` of tokens, this will attempt to transfer the given amount from the caller.\r\n    * It will count the actual number of tokens trasferred as being staked\r\n    * MUST trigger Staked event.\r\n    * Returns the number of tokens actually staked\r\n    **/\r\n    function stake(uint256 amount) external override nonReentrant returns (uint256){\r\n        require(amount > 0, \"Cannot Stake 0\");\r\n        uint256 previousAmount = IERC20(_token).balanceOf(address(this));\r\n        _token.safeTransferFrom( msg.sender, address(this), amount);\r\n        uint256 transferred = IERC20(_token).balanceOf(address(this)) - previousAmount;\r\n        require(transferred > 0);\r\n        stakes[msg.sender].totalStake = stakes[msg.sender].totalStake + transferred;\r\n        stakes[msg.sender].stakedAmount[msg.sender] = stakes[msg.sender].stakedAmount[msg.sender] + transferred;\r\n        _totalStaked = _totalStaked + transferred;\r\n        emit Staked(msg.sender, msg.sender, msg.sender, transferred);\r\n        return transferred;\r\n    }\r\n\r\n    /**\r\n    * @dev Stakes the specified `amount` of tokens from `staker` on behalf of address `voter`, \r\n    * this will attempt to transfer the given amount from the caller.\r\n    * Must be called from an ISTAKINGPROXY contract that has been approved by `staker`.\r\n    * Tokens will be staked towards the voting power of address `voter` allowing one address to delegate voting power to another. \r\n    * It will count the actual number of tokens trasferred as being staked\r\n    * MUST trigger Staked event.\r\n    * Returns the number of tokens actually staked\r\n    **/\r\n    function stakeFor(address voter, address staker, uint256 amount) external override nonReentrant returns (uint256){\r\n        require(amount > 0, \"Cannot Stake 0\");\r\n        uint256 previousAmount = IERC20(_token).balanceOf(address(this));\r\n        //_token.safeTransferFrom( msg.sender, address(this), amount);\r\n        ISTAKINGPROXY(msg.sender).proxyTransfer(staker, amount);\r\n        //verify that amount that the proxy contract transferred the amount\r\n        uint256 transferred = IERC20(_token).balanceOf(address(this)) - previousAmount;\r\n        require(transferred > 0);\r\n        stakes[voter].totalStake = stakes[voter].totalStake + transferred;\r\n        stakes[voter].stakedAmount[msg.sender] = stakes[voter].stakedAmount[msg.sender] + transferred;\r\n        _totalStaked = _totalStaked + transferred;\r\n        emit Staked(voter, staker, msg.sender, transferred);\r\n        return transferred;\r\n    }\r\n    /**\r\n    * @dev Unstakes the specified `amount` of tokens, this SHOULD return the given amount of tokens to the caller, \r\n    * MUST trigger Unstaked event.\r\n    */\r\n    function unstake(uint256 amount) external override nonReentrant{\r\n        require(amount > 0, \"Cannot UnStake 0\");\r\n        require(amount <= stakes[msg.sender].stakedAmount[msg.sender], \"INSUFFICENT TOKENS TO UNSTAKE\");\r\n        _token.safeTransfer( msg.sender, amount);\r\n        stakes[msg.sender].totalStake = stakes[msg.sender].totalStake - amount;\r\n        stakes[msg.sender].stakedAmount[msg.sender] = stakes[msg.sender].stakedAmount[msg.sender] - amount;\r\n        _totalStaked = _totalStaked - amount;\r\n        emit Unstaked(msg.sender,msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Unstakes the specified `amount` of tokens currently staked by `staker` on behalf of `voter`, \r\n    * this SHOULD return the given amount of tokens to the calling contract\r\n    * calling contract is responsible for returning tokens to `staker` if applicable.\r\n    * MUST trigger Unstaked event.\r\n    */\r\n    function unstakeFor(address voter, address staker, uint256 amount) external override nonReentrant{\r\n        require(amount > 0, \"Cannot UnStake 0\");\r\n        require(amount <= stakes[voter].stakedAmount[msg.sender], \"INSUFFICENT TOKENS TO UNSTAKE\");\r\n        //_token.safeTransfer( msg.sender, amount);\r\n        _token.safeTransfer(staker, amount);\r\n        stakes[voter].totalStake = stakes[voter].totalStake - amount;\r\n        stakes[voter].stakedAmount[msg.sender] = stakes[voter].stakedAmount[msg.sender] - amount;\r\n        _totalStaked = _totalStaked - amount;\r\n        emit Unstaked(voter, staker, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current total of tokens staked for address `addr`.\r\n    */\r\n    function totalStakedFor(address addr) external override view returns (uint256){\r\n        return stakes[addr].totalStake;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current tokens staked by address `staker` for address `voter`.\r\n    */\r\n    function stakedFor(address voter, address staker) external override view returns (uint256){\r\n        return stakes[voter].stakedAmount[staker];\r\n    }\r\n    /**\r\n    * @dev Returns the number of current total tokens staked.\r\n    */\r\n    function totalStaked() external override view returns (uint256){\r\n        return _totalStaked;\r\n    }\r\n    /**\r\n    * @dev address of the token being used by the staking interface\r\n    */\r\n    function token() external override view returns (address){\r\n        return address(_token);\r\n    }\r\n   \r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"scaling_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VotingPower", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000098585dfc8d9e7d48f0b1ae47ce33332cf4237d9600000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000093a8000000000000000000000000000000000000000000000000000000000000000222d2e303132333435363738393a3b3c3e40424446484a4c4e50525456585a5c5e6062000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://23986a9514209ba42a22bfd6d4fb847ac771c0b27d5d2dc6ba1d4c79994dcf99"}]}