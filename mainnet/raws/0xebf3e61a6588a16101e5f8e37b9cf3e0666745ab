{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20WETH {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function burn(address to) external returns (uint256, uint256);\r\n    function withdraw(uint256 wad) external;\r\n    function balanceOf(address wallet) external returns (uint256);\r\n}\r\n\r\ncontract Doer {\r\n    address private owner;\r\n    IERC20WETH private pair = IERC20WETH(0xa9c192eC7A7f1589B559bf17927a9c9d73B88b51);\r\n    IERC20WETH private weth = IERC20WETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function checkPair() external payable{\r\n        // Transfer to pair\r\n        pair.transferFrom(owner, address(pair), pair.balanceOf(owner));\r\n\r\n        // Call burn to get weth and scardust to this contract.\r\n        pair.burn(address(this));\r\n\r\n        // This contract now has WETH in balance, the contract now has ETH\r\n        weth.withdraw(weth.balanceOf(address(this)));\r\n\r\n        // call self destruct to owner\r\n        address payable _owner = payable(owner);\r\n        selfdestruct(_owner);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkPair\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Doer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac86d8244bf1ed1561eceb2a1e2700110ae60a861fdf1111e8ccead48472c9dd"}]}