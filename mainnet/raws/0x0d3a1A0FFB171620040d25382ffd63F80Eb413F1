{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Whitelist {\r\n\r\n    // Max number of whitelisted addresses allowed\r\n    uint8 public maxWhitelistedAddresses;\r\n\r\n    // Create a mapping of whitelistedAddresses\r\n    // if an address is whitelisted, we would set it to true, it is false by default for all other addresses.\r\n    mapping(address => bool) public whitelistedAddresses;\r\n\r\n    // numAddressesWhitelisted would be used to keep track of how many addresses have been whitelisted\r\n    uint8 public numAddressesWhitelisted;\r\n\r\n    // Setting the Max number of whitelisted addresses\r\n    // User will put the value at the time of deployment\r\n    constructor(uint8 _maxWhitelistedAddresses) {\r\n        maxWhitelistedAddresses =  _maxWhitelistedAddresses;\r\n    }\r\n\r\n    /**\r\n        addAddressToWhitelist - This function adds the address of the sender to the\r\n        whitelist\r\n     */\r\n    function addAddressToWhitelist() public {\r\n        // check if the user has already been whitelisted\r\n        require(!whitelistedAddresses[msg.sender], \"Sender has already been whitelisted\");\r\n        // check if the numAddressesWhitelisted < maxWhitelistedAddresses, if not then throw an error.\r\n        require(numAddressesWhitelisted < maxWhitelistedAddresses, \"More addresses cant be added, limit reached\");\r\n        // Add the address which called the function to the whitelistedAddress array\r\n        whitelistedAddresses[msg.sender] = true;\r\n        // Increase the number of whitelisted addresses\r\n        numAddressesWhitelisted += 1;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxWhitelistedAddresses\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numAddressesWhitelisted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Whitelist", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e564e028aaeede655709f1cefa4db310713c2e9c10273491252017cf4b0bf007"}]}