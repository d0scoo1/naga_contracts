{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: Ethereum/main/libraries/Data.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\nlibrary Data {\r\n\r\nenum State {\r\n        NONE,\r\n        PENDING\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: Ethereum/main/libraries/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: Ethereum/main/libraries/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x95d89b41)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x06fdde03)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x313ce567)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: TransferFrom failed\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Ethereum/main/WithdrawalConfirmation.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice The Implementation of the user's withdrawal proof token {ERC721}.\r\n*/\r\n\r\ncontract WithdrawalConfirmation is ERC721, Ownable { \r\n    struct PendingWithdrawal {\r\n        Data.State state;\r\n        uint256 amount;\r\n        uint256 listPointer;\r\n    }\r\n    uint256 public tolerance = 1e3;\r\n    address public proxyInvestement; \r\n    string public baseURI;\r\n    mapping(address => uint256) private tokenIdPerAddress;\r\n    mapping(address => PendingWithdrawal) public pendingWithdrawPerAddress;\r\n    address[] public usersOnPendingWithdraw;\r\n    event MintWithdrawal(address indexed _address, uint256 _id);\r\n    event BurnWithdrawal(address indexed _address, uint256 _id);\r\n    event UpdateBaseURI( string _baseURI);\r\n\r\n    constructor(string memory _name , string memory _symbol)  \r\n    ERC721 (_name,  _symbol){\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(\r\n            proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(msg.sender == proxyInvestement, \"Formation.Fi: not the proxy\");\r\n         _;\r\n    }\r\n\r\n     /**\r\n     * @dev get the token id of user's address.\r\n     * @param _account The user's address.\r\n     * @return token id.\r\n     */\r\n    function getTokenId(address _account) external view returns (uint256) {\r\n        return tokenIdPerAddress[ _account];\r\n    }\r\n\r\n      /**\r\n     * @dev get the number of users.\r\n     * @return number of users.\r\n     */\r\n     function getUsersSize() external view returns (uint256) {\r\n        return usersOnPendingWithdraw.length;\r\n    }\r\n\r\n    /**\r\n     * @dev get addresses of users on withdrawal pending.\r\n     * @return  addresses of users.\r\n     */\r\n    function getUsers() public view returns (address[] memory) {\r\n        return usersOnPendingWithdraw;\r\n    }\r\n\r\n    /**\r\n     * @dev update the proxy.\r\n     * @param _proxyInvestement the new proxy.\r\n     */\r\n    function setProxy(address _proxyInvestement) public onlyOwner {\r\n        require(\r\n            _proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        proxyInvestement = _proxyInvestement;\r\n    }    \r\n\r\n    /**\r\n     * @dev update the Metadata URI\r\n     * @param _tokenURI the Metadata URI.\r\n     */\r\n    function setBaseURI(string calldata _tokenURI) external onlyOwner {\r\n        baseURI = _tokenURI;\r\n        emit UpdateBaseURI(_tokenURI);\r\n    }\r\n    \r\n    /**\r\n     * @dev mint the withdrawal proof ERC721 token.\r\n     * @notice the user receives this token when he makes \r\n     * a withdrawal request.\r\n     * Each user's address can at most have one withdrawal proof token.\r\n     * @param _account The user's address.\r\n     * @param _tokenId The id of the token.\r\n     * @param _amount The withdrawal amount in the product token.\r\n     * @notice Emits a {MintWithdrawal} event with `_account` and `_tokenId `.\r\n     */\r\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \r\n       external onlyProxy {\r\n       require (balanceOf( _account) == 0, \"Formation.Fi:  has withdrawal token\");\r\n       _safeMint(_account,  _tokenId);\r\n       tokenIdPerAddress[_account] = _tokenId;\r\n       updateWithdrawalData (_account,  _tokenId,  _amount, true);\r\n       emit MintWithdrawal(_account, _tokenId);\r\n    }\r\n\r\n     /**\r\n     * @dev burn the withdrawal proof ERC721 token.\r\n     * @notice the token is burned  when the manager fully validates\r\n     * the user's withdrawal request.\r\n     * @param _tokenId The id of the token.\r\n     * @notice Emits a {BurnWithdrawal} event with `owner` and `_tokenId `.\r\n     */\r\n    function burn(uint256 _tokenId) internal {\r\n        address owner = ownerOf(_tokenId);\r\n        require (pendingWithdrawPerAddress[owner].state != Data.State.PENDING, \r\n        \"Formation.Fi: is on pending\");\r\n        _deleteWithdrawalData(owner);\r\n        _burn(_tokenId);   \r\n        emit BurnWithdrawal(owner, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev update the user's withdrawal data.\r\n     * @notice this function is called after the withdrawal request \r\n     * by the user or after each validation by the manager.\r\n     * @param _account The user's address.\r\n     * @param _tokenId The withdrawal proof token id.\r\n     * @param _amount  The withdrawal amount to be added or removed.\r\n     * @param isAddCase  = 1 when teh user makes a withdrawal request.\r\n     * = 0, when the manager validates the user's withdrawal request.\r\n     */\r\n    function updateWithdrawalData (address _account, uint256 _tokenId, \r\n        uint256 _amount, bool isAddCase) public onlyProxy {\r\n\r\n        require (_exists(_tokenId), \"Formation Fi: no token\");\r\n\r\n        require (ownerOf(_tokenId) == _account , \r\n         \"Formation.Fi: not owner\");\r\n\r\n        if( _amount > 0){\r\n            if (isAddCase){\r\n               pendingWithdrawPerAddress[_account].state = Data.State.PENDING;\r\n               pendingWithdrawPerAddress[_account].amount = _amount;\r\n               pendingWithdrawPerAddress[_account].listPointer = usersOnPendingWithdraw.length;\r\n               usersOnPendingWithdraw.push(_account);\r\n            }\r\n            else {\r\n               require(pendingWithdrawPerAddress[_account].amount >= _amount, \r\n               \"Formation.Fi: not enough amount\");\r\n               uint256 _newAmount = pendingWithdrawPerAddress[_account].amount - _amount;\r\n               pendingWithdrawPerAddress[_account].amount = _newAmount;\r\n               if (_newAmount <= tolerance){\r\n                   pendingWithdrawPerAddress[_account].state = Data.State.NONE;\r\n                   burn(_tokenId);\r\n                }\r\n            }     \r\n       }\r\n    }\r\n\r\n    /**\r\n     * @dev delete the user's withdrawal proof token data.\r\n     * @notice this function is called when the user's withdrawal request is fully \r\n     * validated by the manager.\r\n     * @param _account The user's address.\r\n     */\r\n    function _deleteWithdrawalData(address _account) internal {\r\n        require(\r\n          _account!= address(0),\r\n          \"Formation.Fi: zero address\"\r\n        );\r\n        uint256 _index = pendingWithdrawPerAddress[_account].listPointer;\r\n        address _lastUser = usersOnPendingWithdraw[usersOnPendingWithdraw.length -1];\r\n        usersOnPendingWithdraw[_index] = _lastUser ;\r\n        pendingWithdrawPerAddress[_lastUser].listPointer = _index;\r\n        usersOnPendingWithdraw.pop();\r\n        delete pendingWithdrawPerAddress[_account]; \r\n        delete tokenIdPerAddress[_account];    \r\n    }\r\n\r\n     /**\r\n     * @dev update the withdrawal token proof data of both the sender and the receiver \r\n       when the token is transferred.\r\n     * @param from The sender's address.\r\n     * @param to The receiver's address.\r\n     * @param tokenId The withdrawal token proof id.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n       if ((to != address(0)) && (from != address(0))){\r\n          uint256 indexFrom = pendingWithdrawPerAddress[from].listPointer;\r\n          pendingWithdrawPerAddress[to] = pendingWithdrawPerAddress[from];\r\n          pendingWithdrawPerAddress[from].state = Data.State.NONE;\r\n          pendingWithdrawPerAddress[from].amount =0;\r\n          usersOnPendingWithdraw[indexFrom] = to; \r\n          tokenIdPerAddress[to] = tokenId;\r\n          delete pendingWithdrawPerAddress[from];\r\n          delete tokenIdPerAddress[from];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the Metadata URI\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n   \r\n}\r\n  \r\n// File: Ethereum/main/DepositConfirmation.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice The Implementation of the user's deposit proof token {ERC721}.\r\n*/\r\n\r\ncontract DepositConfirmation is ERC721, Ownable {\r\n    struct PendingDeposit {\r\n        Data.State state;\r\n        uint256 amount;\r\n        uint256 listPointer;\r\n    }\r\n    uint256 public tolerance = 1e3; \r\n    address public proxyInvestement;\r\n    string public baseURI;\r\n    mapping(address => uint256) private tokenIdPerAddress;\r\n    mapping(address => PendingDeposit) public pendingDepositPerAddress;\r\n    address[] public usersOnPendingDeposit;\r\n    event MintDeposit(address indexed _address, uint256 _id);\r\n    event BurnDeposit(address indexed _address, uint256 _id);\r\n    event UpdateBaseURI( string _baseURI);\r\n\r\n    constructor(string memory _name , string memory _symbol)  \r\n    ERC721 (_name,  _symbol){\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(\r\n            proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(msg.sender == proxyInvestement, \"Formation.Fi: not the proxy\");\r\n        _;\r\n    }\r\n    \r\n     /**\r\n     * @dev get the token id of user's address.\r\n     * @param _account The user's address.\r\n     * @return token id.\r\n     */\r\n    function getTokenId(address _account) external view returns (uint256) {\r\n        require(\r\n           _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        return tokenIdPerAddress[_account];\r\n    }\r\n\r\n     /**\r\n     * @dev get the number of users.\r\n     * @return number of users.\r\n     */\r\n    function getUsersSize() external view  returns (uint256) {\r\n        return usersOnPendingDeposit.length;\r\n    }\r\n    \r\n     /**\r\n     * @dev get addresses of users on deposit pending.\r\n     * @return  addresses of users.\r\n     */\r\n    function getUsers() external view returns (address[] memory) {\r\n        return usersOnPendingDeposit;\r\n    }\r\n\r\n     /**\r\n     * @dev update the proxy.\r\n     * @param _proxyInvestement the new proxy.\r\n     */\r\n    function setProxy(address _proxyInvestement) external onlyOwner {\r\n        require(\r\n            _proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        proxyInvestement = _proxyInvestement;\r\n    }    \r\n\r\n    /**\r\n     * @dev update the Metadata URI\r\n     * @param _tokenURI the Metadata URI.\r\n     */\r\n    function setBaseURI(string calldata _tokenURI) external onlyOwner {\r\n        baseURI = _tokenURI;\r\n        emit UpdateBaseURI(_tokenURI);\r\n    }\r\n\r\n     /**\r\n     * @dev mint the deposit proof ERC721 token.\r\n     * @notice the user receives this token when he makes \r\n     * a deposit request.\r\n     * Each user's address can at most have one deposit proof token.\r\n     * @param _account The user's address.\r\n     * @param _tokenId The id of the token.\r\n     * @param _amount The deposit amount in the requested Stablecoin.\r\n     * @notice Emits a {MintDeposit} event with `_account` and `_tokenId `.\r\n     */\r\n    function mint(address _account, uint256 _tokenId, uint256 _amount) \r\n       external onlyProxy {\r\n       require (balanceOf(_account) == 0, \"Formation.Fi: has deposit token\");\r\n       _safeMint(_account,  _tokenId);\r\n       updateDepositData( _account,  _tokenId, _amount, true);\r\n       emit MintDeposit(_account, _tokenId);\r\n    }\r\n\r\n     /**\r\n     * @dev burn the deposit proof ERC721 token.\r\n     * @notice the token is burned  when the manager fully validates\r\n     * the user's deposit request.\r\n     * @param _tokenId The id of the token.\r\n     * @notice Emits a {BurnDeposit} event with `owner` and `_tokenId `.\r\n     */\r\n    function burn(uint256 _tokenId) internal {\r\n        address owner = ownerOf(_tokenId);\r\n        require (pendingDepositPerAddress[owner].state != Data.State.PENDING,\r\n        \"Formation.Fi: is on pending\");\r\n        _deleteDepositData(owner);\r\n        _burn(_tokenId); \r\n        emit BurnDeposit(owner, _tokenId);\r\n    }\r\n     \r\n     /**\r\n     * @dev update the user's deposit data.\r\n     * @notice this function is called after each desposit request \r\n     * by the user or after each validation by the manager.\r\n     * @param _account The user's address.\r\n     * @param _tokenId The depoist proof token id.\r\n     * @param _amount  The deposit amount to be added or removed.\r\n     * @param isAddCase  = 1 when teh user makes a deposit request.\r\n     * = 0, when the manager validates the user's deposit request.\r\n     */\r\n    function updateDepositData(address _account, uint256 _tokenId, \r\n        uint256 _amount, bool isAddCase) public onlyProxy {\r\n        require (_exists(_tokenId), \"Formation.Fi: no token\");\r\n        require (ownerOf(_tokenId) == _account , \"Formation.Fi:  not owner\");\r\n        if( _amount > 0){\r\n           if (isAddCase){\r\n              if(pendingDepositPerAddress[_account].amount == 0){\r\n                  pendingDepositPerAddress[_account].state = Data.State.PENDING;\r\n                  pendingDepositPerAddress[_account].listPointer = usersOnPendingDeposit.length;\r\n                  tokenIdPerAddress[_account] = _tokenId;\r\n                  usersOnPendingDeposit.push(_account);\r\n                }\r\n                pendingDepositPerAddress[_account].amount +=  _amount;\r\n            }\r\n            else {\r\n               require(pendingDepositPerAddress[_account].amount >= _amount, \r\n               \"Formation Fi: not enough amount\");\r\n               uint256 _newAmount = pendingDepositPerAddress[_account].amount - _amount;\r\n               pendingDepositPerAddress[_account].amount = _newAmount;\r\n               if (_newAmount <= tolerance){\r\n                  pendingDepositPerAddress[_account].state = Data.State.NONE;\r\n                  burn(_tokenId);\r\n                }\r\n            }\r\n        }\r\n    }    \r\n\r\n    \r\n     /**\r\n     * @dev delete the user's deposit proof token data.\r\n     * @notice this function is called when the user's deposit request is fully \r\n     * validated by the manager.\r\n     * @param _account The user's address.\r\n     */\r\n    function _deleteDepositData(address _account) internal {\r\n        require(\r\n           _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         uint256 _index = pendingDepositPerAddress[_account].listPointer;\r\n         address _lastUser = usersOnPendingDeposit[usersOnPendingDeposit.length - 1];\r\n         usersOnPendingDeposit[_index] = _lastUser;\r\n         pendingDepositPerAddress[_lastUser].listPointer = _index;\r\n         usersOnPendingDeposit.pop();\r\n         delete pendingDepositPerAddress[_account]; \r\n         delete tokenIdPerAddress[_account];    \r\n    }\r\n\r\n     /**\r\n     * @dev update the deposit token proof data of both the sender and the receiver \r\n       when the token is transferred.\r\n     * @param from The sender's address.\r\n     * @param to The receiver's address.\r\n     * @param tokenId The deposit token proof id.\r\n     */\r\n    function _beforeTokenTransfer(\r\n       address from,\r\n       address to,\r\n       uint256 tokenId\r\n    )   internal virtual override {\r\n        if ((to != address(0)) && (from != address(0))){\r\n            uint256 indexFrom = pendingDepositPerAddress[from].listPointer;\r\n            pendingDepositPerAddress[to] = pendingDepositPerAddress[from];\r\n            pendingDepositPerAddress[from].state = Data.State.NONE;\r\n            pendingDepositPerAddress[from].amount = 0;\r\n            usersOnPendingDeposit[indexFrom] = to; \r\n            tokenIdPerAddress[to] = tokenId;\r\n            delete pendingDepositPerAddress[from];\r\n            delete tokenIdPerAddress[from];\r\n        }\r\n    }\r\n     /**\r\n     * @dev Get the Metadata URI\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n      \r\n}\r\n  \r\n// File: Ethereum/main/Token.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice  A common Implementation for tokens ALPHA, BETA and GAMMA.\r\n*/\r\n\r\ncontract Token is ERC20, Ownable {\r\n    struct Deposit{\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n    address public proxyInvestement;\r\n    address private proxyAdmin;\r\n\r\n    mapping(address => Deposit[]) public depositPerAddress;\r\n    mapping(address => bool) public  whitelist;\r\n    event SetProxyInvestement(address  _address);\r\n    constructor(string memory _name, string memory _symbol) \r\n    ERC20(_name,  _symbol) {\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(\r\n            (proxyInvestement != address(0)) && (proxyAdmin != address(0)),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            (msg.sender == proxyInvestement) || (msg.sender == proxyAdmin),\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyProxyInvestement() {\r\n        require(proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(msg.sender == proxyInvestement,\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Update the proxyInvestement.\r\n     * @param _proxyInvestement.\r\n     * @notice Emits a {SetProxyInvestement} event with `_proxyInvestement`.\r\n     */\r\n    function setProxyInvestement(address _proxyInvestement) external onlyOwner {\r\n        require(\r\n            _proxyInvestement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         proxyInvestement = _proxyInvestement;\r\n\r\n        emit SetProxyInvestement( _proxyInvestement);\r\n\r\n    } \r\n\r\n    /**\r\n     * @dev Add a contract address to the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function addToWhitelist(address _contract) external onlyOwner {\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = true;\r\n    } \r\n\r\n    /**\r\n     * @dev Remove a contract address from the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function removeFromWhitelist(address _contract) external onlyOwner {\r\n         require(\r\n            whitelist[_contract] == true,\r\n            \"Formation.Fi: no whitelist\"\r\n        );\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = false;\r\n    } \r\n\r\n    /**\r\n     * @dev Update the proxyAdmin.\r\n     * @param _proxyAdmin.\r\n     */\r\n    function setAdmin(address _proxyAdmin) external onlyOwner {\r\n        require(\r\n            _proxyAdmin!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n         proxyAdmin = _proxyAdmin;\r\n    } \r\n\r\n\r\n    \r\n    /**\r\n     * @dev add user's deposit.\r\n     * @param _account The user's address.\r\n     * @param _amount The user's deposit amount.\r\n     * @param _time The deposit time.\r\n     */\r\n    function addDeposit(address _account, uint256 _amount, uint256 _time) \r\n        external onlyProxyInvestement {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        require(\r\n            _time!= 0,\r\n            \"Formation.Fi: zero time\"\r\n        );\r\n        Deposit memory _deposit = Deposit(_amount, _time); \r\n        depositPerAddress[_account].push(_deposit);\r\n    } \r\n\r\n     /**\r\n     * @dev mint the token product for the user.\r\n     * @notice To receive the token product, the user has to deposit \r\n     * the required StableCoin in this product. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be minted.\r\n     */\r\n    function mint(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n          _account!= address(0),\r\n           \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n       _mint(_account,  _amount);\r\n   }\r\n\r\n    /**\r\n     * @dev burn the token product of the user.\r\n     * @notice When the user withdraws his Stablecoins, his tokens \r\n     * product are burned. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be burned.\r\n     */\r\n    function burn(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        _burn( _account, _amount);\r\n    }\r\n    \r\n     /**\r\n     * @dev Verify the lock up condition for a user's withdrawal request.\r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be withdrawn.\r\n     * @param _period The lock up period.\r\n     * @return _success  is true if the lock up condition is satisfied.\r\n     */\r\n    function checklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \r\n        external view returns (bool _success){\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountTotal = 0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n             require ((block.timestamp - _deposit[i].time) >= _period, \r\n            \"Formation.Fi:  position locked\");\r\n            if (_amount<= (_amountTotal + _deposit[i].amount)){\r\n                break; \r\n            }\r\n            _amountTotal = _amountTotal + _deposit[i].amount;\r\n        }\r\n        _success= true;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev update the user's token data.\r\n     * @notice this function is called after each desposit request \r\n     * validation by the manager.\r\n     * @param _account The user's address.\r\n     * @param _amount The deposit amount validated by the manager.\r\n     */\r\n    function updateTokenData( address _account,  uint256 _amount) \r\n        external onlyProxyInvestement {\r\n        _updateTokenData(_account,  _amount);\r\n    }\r\n\r\n    function _updateTokenData( address _account,  uint256 _amount) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountlocal = 0;\r\n        uint256 _amountTotal = 0;\r\n        uint256 _newAmount;\r\n        uint256 k =0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n            _amountlocal  = Math.min(_deposit[i].amount, _amount -  _amountTotal);\r\n            _amountTotal = _amountTotal + _amountlocal;\r\n            _newAmount = _deposit[i].amount - _amountlocal;\r\n            depositPerAddress[_account][k].amount = _newAmount;\r\n            if (_newAmount == 0){\r\n               _deleteTokenData(_account, k);\r\n            }\r\n            else {\r\n                k = k+1;\r\n            }\r\n            if (_amountTotal == _amount){\r\n               break; \r\n            }\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev delete the user's token data.\r\n     * @notice This function is called when the user's withdrawal request is  \r\n     * validated by the manager.\r\n     * @param _account The user's address.\r\n     * @param _index The index of the user in 'amountDepositPerAddress'.\r\n     */\r\n    function _deleteTokenData(address _account, uint256 _index) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        uint256 _size = depositPerAddress[_account].length - 1;\r\n        \r\n        require( _index <= _size,\r\n            \"Formation.Fi: index is out\"\r\n        );\r\n        for (uint256 i = _index; i< _size; i++){\r\n            depositPerAddress[ _account][i] = depositPerAddress[ _account][i+1];\r\n        }\r\n        depositPerAddress[ _account].pop();   \r\n    }\r\n   \r\n     /**\r\n     * @dev update the token data of both the sender and the receiver \r\n       when the product token is transferred.\r\n     * @param from The sender's address.\r\n     * @param to The receiver's address.\r\n     * @param amount The transferred amount.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) internal virtual override{\r\n      \r\n       if ((to != address(0)) && (to != proxyInvestement) \r\n       && (to != proxyAdmin) && (from != address(0)) && (!whitelist[to])){\r\n          _updateTokenData(from, amount);\r\n          Deposit memory _deposit = Deposit(amount, block.timestamp);\r\n          depositPerAddress[to].push(_deposit);\r\n         \r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: Ethereum/main/Admin.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Admin.\r\n*/\r\n\r\ncontract Admin is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    uint256 public constant FACTOR_FEES_DECIMALS = 1e4; \r\n    uint256 public constant FACTOR_PRICE_DECIMALS = 1e6;\r\n    uint256 public constant  SECONDES_PER_YEAR = 365 days; \r\n    uint256 public slippageTolerance = 200;\r\n    uint256 public  amountScaleDecimals = 1; \r\n    uint256 public depositFeeRate = 50;  \r\n    uint256 public depositFeeRateParity= 15; \r\n    uint256 public managementFeeRate = 200;\r\n    uint256 public performanceFeeRate = 2000;\r\n    uint256 public performanceFees = 0;\r\n    uint256 public managementFees = 0;\r\n    uint256 public managementFeesTime = 0;\r\n    uint256 public tokenPrice = 1e6;\r\n    uint256 public tokenPriceMean = 1e6;\r\n    uint256 public minAmount= 100 * 1e18;\r\n    uint256 public lockupPeriodUser = 0 days; \r\n    uint256 public timeWithdrawManager = 0;\r\n    uint public netDepositInd= 0;\r\n    uint256 public netAmountEvent =0;\r\n    address public manager;\r\n    address public treasury;\r\n    address public investement;\r\n    address private safeHouse;\r\n    bool public isCancel= true;\r\n    Token public token;\r\n    IERC20 public stableToken;\r\n\r\n\r\n    constructor( address _manager, address _treasury,  address _stableTokenAddress,\r\n     address _tokenAddress) {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _treasury != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n            );\r\n\r\n        require(\r\n            _stableTokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(\r\n           _tokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n        treasury = _treasury; \r\n        stableToken = IERC20(_stableTokenAddress);\r\n        token = Token(_tokenAddress);\r\n        uint8 _stableTokenDecimals = ERC20( _stableTokenAddress).decimals();\r\n        if ( _stableTokenDecimals == 6) {\r\n            amountScaleDecimals= 1e12;\r\n        }\r\n    }\r\n\r\n    modifier onlyInvestement() {\r\n        require(investement != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(msg.sender == investement,\r\n             \"Formation.Fi:  not investement\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \r\n        \"Formation.Fi: not manager\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Setter functions to update the Portfolio Parameters.\r\n     */\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(\r\n            _treasury != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n    }\r\n\r\n    function setInvestement(address _investement) external onlyOwner {\r\n        require(\r\n            _investement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        investement = _investement;\r\n    } \r\n\r\n    function setSafeHouse(address _safeHouse) external onlyOwner {\r\n        require(\r\n            _safeHouse!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        safeHouse = _safeHouse;\r\n    } \r\n\r\n    function setCancel(bool _cancel) external onlyManager {\r\n        isCancel= _cancel;\r\n    }\r\n  \r\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\r\n        lockupPeriodUser = _lockupPeriodUser;\r\n    }\r\n \r\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\r\n        depositFeeRate= _rate;\r\n    }\r\n\r\n    function setDepositFeeRateParity(uint256 _rate) external onlyManager {\r\n        depositFeeRateParity= _rate;\r\n    }\r\n\r\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\r\n        managementFeeRate = _rate;\r\n    }\r\n\r\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\r\n        performanceFeeRate  = _rate;\r\n    }\r\n    function setMinAmount(uint256 _minAmount) external onlyManager {\r\n        minAmount= _minAmount;\r\n     }\r\n\r\n    function updateTokenPrice(uint256 _price) external onlyManager {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    function updateTokenPriceMean(uint256 _price) external onlyInvestement {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n        tokenPriceMean  = _price;\r\n    }\r\n\r\n    function updateManagementFeeTime(uint256 _time) external onlyInvestement {\r\n        managementFeesTime = _time;\r\n    }\r\n    \r\n\r\n     /**\r\n     * @dev Calculate performance Fees.\r\n     */\r\n    function calculatePerformanceFees() external onlyManager {\r\n        require(performanceFees == 0, \"Formation.Fi: fees on pending\");\r\n\r\n        uint256 _deltaPrice = 0;\r\n        if (tokenPrice > tokenPriceMean) {\r\n            _deltaPrice = tokenPrice - tokenPriceMean;\r\n            tokenPriceMean = tokenPrice;\r\n            performanceFees = (token.totalSupply() *\r\n            _deltaPrice * performanceFeeRate) / (tokenPrice * FACTOR_FEES_DECIMALS); \r\n        }\r\n    }\r\n\r\n    \r\n     /**\r\n     * @dev Calculate management Fees.\r\n     */\r\n    function calculateManagementFees() external onlyManager {\r\n        require(managementFees == 0, \"Formation.Fi: fees on pending\");\r\n        if (managementFeesTime!= 0){\r\n           uint256 _deltaTime;\r\n           _deltaTime = block.timestamp -  managementFeesTime; \r\n           managementFees = (token.totalSupply() * managementFeeRate * _deltaTime ) \r\n           /(FACTOR_FEES_DECIMALS * SECONDES_PER_YEAR);\r\n           managementFeesTime = block.timestamp; \r\n        }\r\n    }\r\n     \r\n    /**\r\n     * @dev Mint Fees.\r\n     */\r\n    function mintFees() external onlyManager {\r\n        require ((performanceFees + managementFees) > 0, \"Formation.Fi: zero fees\");\r\n\r\n        token.mint(treasury, performanceFees + managementFees);\r\n        performanceFees = 0;\r\n        managementFees = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net deposit indicator\r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param  _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net Deposit indicator: 1 if net deposit case, 0 otherwise (net withdrawal case).\r\n     */\r\n    function calculateNetDepositInd(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns( uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n        uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        if  ( _depositAmountTotalAfterFees >= \r\n            ((_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS)){\r\n            netDepositInd = 1 ;\r\n        }\r\n        else {\r\n            netDepositInd = 0;\r\n        }\r\n        return netDepositInd;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net amount \r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net amount.\r\n     */\r\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns(uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n         uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        \r\n        if (netDepositInd == 1) {\r\n             netAmountEvent =  _depositAmountTotalAfterFees - _withdrawalAmountTotal;\r\n        }\r\n        else {\r\n             netAmountEvent = _withdrawalAmountTotal - _depositAmountTotalAfterFees;\r\n        \r\n        }\r\n        return netAmountEvent;\r\n    }\r\n\r\n    /**\r\n     * @dev Protect against slippage due to assets sale.\r\n     * @param _withdrawalAmount the value of sold assets in Stablecoin.\r\n     * _withdrawalAmount has to be sent to the contract.\r\n     * treasury has to approve the contract for both Stablecoin and token.\r\n     * @return Missed amount to send to the contract due to slippage.\r\n     */\r\n    function protectAgainstSlippage(uint256 _withdrawalAmount) external onlyManager \r\n        returns (uint256) {\r\n        require(_withdrawalAmount != 0, \"Formation.Fi: zero amount\");\r\n\r\n        require(netDepositInd == 0, \"Formation.Fi: no slippage\");\r\n       \r\n       uint256 _amount = 0; \r\n       uint256 _deltaAmount =0;\r\n       uint256 _slippage = 0;\r\n       uint256  _tokenAmount = 0;\r\n       uint256 _balanceTokenTreasury = token.balanceOf(treasury);\r\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * amountScaleDecimals;\r\n      \r\n        if (_withdrawalAmount< netAmountEvent){\r\n            _amount = netAmountEvent - _withdrawalAmount;   \r\n            _slippage = (_amount * FACTOR_FEES_DECIMALS ) / netAmountEvent;\r\n            if (_slippage >= slippageTolerance) {\r\n                return netAmountEvent;\r\n            }\r\n            else {\r\n                 _deltaAmount = Math.min( _amount, _balanceStableTreasury);\r\n                if ( _deltaAmount  > 0){\r\n                    stableToken.safeTransferFrom(treasury, investement, _deltaAmount/amountScaleDecimals);\r\n                    _tokenAmount = (_deltaAmount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n                    token.mint(treasury, _tokenAmount);\r\n                    return _amount - _deltaAmount;\r\n                }\r\n                else {\r\n                     return _amount; \r\n                }  \r\n            }    \r\n        \r\n        }\r\n        else  {\r\n           _amount = _withdrawalAmount - netAmountEvent;   \r\n          _tokenAmount = (_amount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n          _tokenAmount = Math.min(_tokenAmount, _balanceTokenTreasury);\r\n          if (_tokenAmount >0) {\r\n              _deltaAmount = (_tokenAmount * tokenPrice)/FACTOR_PRICE_DECIMALS;\r\n              stableToken.safeTransfer(treasury, _deltaAmount/amountScaleDecimals);   \r\n              token.burn( treasury, _tokenAmount);\r\n            }\r\n           if ((_amount - _deltaAmount) > 0) {\r\n            \r\n              stableToken.safeTransfer(safeHouse, (_amount - _deltaAmount)/amountScaleDecimals); \r\n            }\r\n        }\r\n        return 0;\r\n\r\n    } \r\n\r\n     /**\r\n     * @dev Send Stablecoin from the manager to the contract.\r\n     * @param _amount  tha amount to send.\r\n     */\r\n    function sendStableTocontract(uint256 _amount) external \r\n     onlyManager {\r\n      require( _amount > 0,  \"Formation.Fi: zero amount\");\r\n\r\n      stableToken.safeTransferFrom(msg.sender, address(this),\r\n       _amount/amountScaleDecimals);\r\n    }\r\n\r\n   \r\n     /**\r\n     * @dev Send Stablecoin from the contract to the contract Investement.\r\n     */\r\n    function sendStableFromcontract() external \r\n        onlyManager {\r\n        require(investement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n         stableToken.safeTransfer(investement, stableToken.balanceOf(address(this)));\r\n    }\r\n  \r\n}\r\n\r\n// File: Ethereum/utils/Pausable.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Transaction is not available\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"Transaction is available\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: Ethereum/main/Assets.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Assets.\r\n*/\r\n\r\ncontract Assets is  Pausable {\r\n    using SafeERC20 for IERC20;\r\n    struct Asset{\r\n        address  token;\r\n        address oracle;\r\n        uint256 price;\r\n        uint256 decimals;   \r\n    }\r\n\r\n    uint256 public index;\r\n    Asset[] public  assets;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) public indexAsset;\r\n    Admin public admin;\r\n    constructor(address _admin) {\r\n         require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n         admin = Admin(_admin);\r\n    }\r\n\r\n\r\n    modifier onlyManager() {\r\n        address _manager = admin.manager();\r\n        require(msg.sender == _manager, \"Formation.Fi: no manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerOrOwner() {\r\n        address _manager = admin.manager();\r\n        require( (msg.sender == _manager) || ( msg.sender == owner()),\r\n        \"Formation.Fi: no manager or owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter functions .\r\n     */\r\n    function isWhitelist( address _token) external view  returns (bool) {\r\n        return whitelist[_token];\r\n    }\r\n    function getIndex( address _token) external view  returns (uint256) {\r\n        return indexAsset[_token];\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Setter functions .\r\n     */\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n        admin = Admin(_admin);\r\n    } \r\n\r\n\r\n    /**\r\n     * @dev Add an asset .\r\n     * @param  _token The address of the asset.\r\n     * @param  _oracle The address of the oracle.\r\n     * @param  _price The price in the case where the oracle doesn't exist.\r\n     */\r\n    function addAsset( address _token, address _oracle, uint256 _price) \r\n        external onlyOwner {\r\n        require ( whitelist[_token] == false, \"Formation.Fi: Token exists\");\r\n        if (_oracle == address(0)){\r\n           require(_price != 0, \"zero price\");\r\n        }\r\n        else {\r\n        require(_price == 0, \"not zero price\");\r\n        }\r\n        uint8 _decimals = 0;\r\n        if (_token!=address(0)){\r\n        _decimals = ERC20(_token).decimals();\r\n        }\r\n        Asset memory _asset = Asset(_token, _oracle, _price, _decimals);\r\n        indexAsset[_token] = index;\r\n        assets.push(_asset);\r\n        index = index +1;\r\n        whitelist[_token] = true;\r\n    }\r\n    \r\n     /**\r\n     * @dev Remove an asset .\r\n     * @param  _token The address of the asset.\r\n     */\r\n    function removeAsset( address _token) external onlyManagerOrOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no Token\");\r\n        whitelist[_token] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev update the asset's oracle .\r\n     * @param  _token The address of the asset.\r\n     * @param  _oracle The new oracle's address.\r\n     */\r\n    function updateOracle( address _token, address _oracle) external onlyOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no token\");\r\n        uint256 _index = indexAsset[_token];\r\n        assets[_index].oracle = _oracle;\r\n    }\r\n\r\n    /**\r\n     * @dev update the asset's price .\r\n     * @param  _token The address of the asset.\r\n     * @param  _price The new price's address.\r\n     */\r\n    function updatePrice( address _token, uint256 _price) external onlyOwner {\r\n        require ( whitelist[_token] == true, \"Formation.Fi: no token\");\r\n        require ( _price != 0, \"Formation.Fi: zero price\");\r\n        uint256 _index = indexAsset[_token];\r\n        require (assets[_index].oracle == address(0), \" no zero address\");\r\n        assets[_index].price = _price;\r\n    }\r\n    \r\n}\r\n\r\n// File: Ethereum/main/SafeHouse.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n//import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract SafeHouse.\r\n*/\r\n\r\ncontract SafeHouse is  Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Math for uint256;\r\n    uint256 public constant  FACTOR_DECIMALS = 8;\r\n    uint256 public constant STABLE_DECIMALS = 1e18;\r\n    uint256 public maxWithdrawalStatic = 1000000 * 1e18;\r\n    uint256 public maxWithdrawalDynamic =  1000000 * 1e18; \r\n    uint256 public  tolerance;\r\n    mapping(address => bool) public vaultsList;\r\n    Assets public assets;\r\n    Admin public admin;\r\n    constructor( address _assets, address _admin) payable {\r\n        require(\r\n            _assets != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        assets = Assets(_assets);\r\n\r\n        admin = Admin(_admin);\r\n    }\r\n   \r\n\r\n    modifier onlyManager() {\r\n        address _manager = admin.manager();\r\n        require(msg.sender == _manager, \"Formation.Fi: no manager\");\r\n        _;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Setter functions.\r\n     */\r\n     function setMaxWithdrawalStatic( uint256 _maxWithdrawalStatic) external onlyOwner {\r\n     maxWithdrawalStatic = _maxWithdrawalStatic;\r\n     }\r\n    \r\n    function setMaxWithdrawalDynamic( uint256 _maxWithdrawalDynamic) external onlyOwner {\r\n     maxWithdrawalDynamic = _maxWithdrawalDynamic;\r\n     }\r\n\r\n    function setTolerance( uint256 _tolerance) external  onlyOwner {\r\n     tolerance = _tolerance;\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n        admin = Admin(_admin);\r\n    } \r\n\r\n    /**\r\n     * @dev Add a vault address the manager.\r\n     * @param  _vault vault'address.\r\n     */\r\n    function addVault( address _vault) external onlyOwner {\r\n        require(\r\n            _vault != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        vaultsList[_vault] = true; \r\n     }\r\n\r\n    /**\r\n     * @dev Remove a vault address the manager.\r\n     * @param  _vault vault'address.\r\n     */\r\n    function removeVault( address _vault) external onlyOwner {\r\n        require(\r\n            vaultsList[_vault]== true,\r\n            \"Formation.Fi: no vault\"\r\n        );\r\n        vaultsList[_vault] = false; \r\n     }\r\n    \r\n     /**\r\n     * @dev Send an asset to the contract by the manager.\r\n     * @param _asset asset'address.\r\n     * @param _amount amount to send.\r\n     */\r\n    function sendAsset( address _asset, uint256 _amount) \r\n        external whenNotPaused onlyManager payable {\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _price;\r\n        uint256 _decimals;\r\n        uint256 _decimalsPrice;\r\n        address _oracle;\r\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\r\n        (_price, _decimalsPrice) = getLatestPrice( _asset, _oracle, _price);\r\n      \r\n        maxWithdrawalDynamic = Math.min(maxWithdrawalDynamic + (_amount * _price) / (10 ** _decimalsPrice),\r\n        maxWithdrawalStatic);\r\n\r\n\r\n        if ( _asset == address(0)) {\r\n          require (_amount == msg.value, \"Formation.Fi: wrong amount\");\r\n        }\r\n        else {\r\n            uint256 _scale;\r\n            _scale = Math.max((STABLE_DECIMALS/ 10 ** _decimals), 1);\r\n            IERC20 asset = IERC20(_asset);\r\n            asset.safeTransferFrom(msg.sender, address(this), _amount/_scale); \r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw an asset from the contract by the manager.\r\n     * @param _asset asset'address.\r\n     * @param _amount amount to send.\r\n     */\r\n    function withdrawAsset( address _asset, uint256 _amount) external whenNotPaused onlyManager {\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _price;\r\n        uint256 _decimals;\r\n        uint256 _decimalsPrice;\r\n        address _oracle;\r\n        ( , _oracle, _price, _decimals ) = assets.assets(_index);\r\n        (_price, _decimalsPrice) = getLatestPrice( _asset, _oracle, _price);\r\n        uint256 _delta = (_amount * _price)  / (10 ** _decimalsPrice);\r\n        require ( Math.min(maxWithdrawalDynamic, maxWithdrawalStatic) >= _delta , \"Formation.Fi: maximum withdrawal\");\r\n        maxWithdrawalDynamic = maxWithdrawalDynamic  - _delta  + (_delta * tolerance)/(10 ** FACTOR_DECIMALS);\r\n         if ( _asset == address(0)) {\r\n         payable(msg.sender).transfer(_amount);\r\n        }\r\n        else {\r\n        uint256 _scale;\r\n        _scale = Math.max((STABLE_DECIMALS/ 10 **_decimals), 1);\r\n        IERC20 asset = IERC20(_asset);\r\n        asset.safeTransfer(msg.sender, _amount/_scale);   \r\n        } \r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Get the asset's price.\r\n     * @param _asset asset'address.\r\n     * @param _oracle oracle'address.\r\n     * @param _price asset'price.\r\n     * @return price\r\n     */\r\n\r\n    function getLatestPrice( address _asset, address _oracle, uint256 _price) public view returns (uint256, uint256) {\r\n        require (assets.isWhitelist(_asset) ==true, \"Formation.Fi: not asset\");\r\n        if (_oracle == address(0)) {\r\n            return (_price, FACTOR_DECIMALS);\r\n        }\r\n        else {\r\n        AggregatorV3Interface  priceFeed = AggregatorV3Interface(_oracle);\r\n        (\r\n            /*uint80 roundID*/,\r\n            int price,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = priceFeed.latestRoundData();\r\n        uint8 _decimals = priceFeed.decimals();\r\n        return (uint256(price), _decimals);\r\n        }   \r\n    }\r\n\r\n     /**\r\n     * @dev Send an asset to the vault.\r\n     * @param _asset asset'address.\r\n     * @param _vault vault'address.\r\n     * @param _amount to send.\r\n     */\r\n    function sendToVault( address _asset, address _vault,  uint256 _amount) external\r\n        whenNotPaused onlyManager {\r\n        require (_vault !=address(0) , \"Formation.Fi: zero address\");\r\n        require (vaultsList[_vault] == true , \"Formation.Fi: no vault\");\r\n        uint256 _index =  assets.getIndex(_asset);\r\n        uint256 _decimals;\r\n        ( , , , _decimals ) = assets.assets(_index);\r\n        if ( _asset == address(0)){\r\n           require (_amount <= address(this).balance , \r\n           \"Formation.Fi: balance limit\");\r\n           payable (_vault).transfer(_amount);\r\n        }\r\n        else{\r\n            uint256 _scale;\r\n            _scale = Math.max((STABLE_DECIMALS/ 10 ** _decimals), 1);\r\n            IERC20 asset = IERC20(_asset);\r\n           require ((_amount/_scale) <= asset.balanceOf(address(this)) , \"Formation.Fi: balance limit\");\r\n           asset.transfer(_vault, _amount/_scale);   \r\n        \r\n        }\r\n    }\r\n\r\n\r\n    fallback() external payable {\r\n     \r\n    }\r\n\r\n     receive() external payable {\r\n       \r\n    }\r\n\r\n\r\n    \r\n       \r\n\r\n}\r\n\r\n// File: Ethereum/main/Investement.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Investement.\r\n*/\r\n\r\ncontract Investement is Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Math for uint256;\r\n\r\n    uint256 public constant COEFF_SCALE_DECIMALS_F = 1e4;\r\n    uint256 public constant COEFF_SCALE_DECIMALS_P = 1e6; \r\n    uint256 public amountScaleDecimals = 1;\r\n    uint256 public maxDepositAmount = 1000000 * 1e18;\r\n    uint256 public maxWithdrawalAmount = 1000000 * 1e18;\r\n     uint256 public maxDeposit = 0;\r\n    uint256 public maxWithdrawal = 0;\r\n    uint256 public depositFeeRate;\r\n    uint256 public depositFeeRateParity;\r\n    uint256 public tokenPrice;\r\n    uint256 public tokenPriceMean;\r\n    uint256 public netDepositInd;\r\n    uint256 public netAmountEvent;\r\n    uint256 public withdrawalAmountTotal;\r\n    uint256 public withdrawalAmountTotalOld;\r\n    uint256 public depositAmountTotal;\r\n    uint256 public validatedDepositParityStableAmount = 0;\r\n    uint256 public validatedWithdrawalParityStableAmount = 0;\r\n    uint256 public validatedDepositParityTokenAmount = 0;\r\n    uint256 public validatedWithdrawalParityTokenAmount = 0;\r\n    uint256 public tokenTotalSupply;\r\n    uint256 public tokenIdDeposit;\r\n    uint256 public tokenIdWithdraw;\r\n    address private treasury;\r\n    address private safeHouse;\r\n    address public parity;\r\n    mapping(address => uint256) public acceptedWithdrawalPerAddress;\r\n    Admin public admin;\r\n    IERC20 public stableToken;\r\n    Token public token;\r\n    DepositConfirmation public deposit;\r\n    WithdrawalConfirmation public withdrawal;\r\n    event DepositRequest(address indexed _address, uint256 _amount);\r\n    event CancelDepositRequest(address indexed _address, uint256 _amount);\r\n    event WithdrawalRequest(address indexed _address, uint256 _amount);\r\n    event CancelWithdrawalRequest(address indexed _address, uint256 _amount);\r\n    event ValidateDeposit(address indexed _address, uint256 _finalizedAmount, uint256 _mintedAmount);\r\n    event ValidateWithdrawal(address indexed _address, uint256 _finalizedAmount, uint256 _SentAmount);\r\n   \r\n    constructor(address _admin, address _safeHouse, address _stableTokenAddress, \r\n        address _token,  address _depositConfirmationAddress, \r\n        address __withdrawalConfirmationAddress) {\r\n        require(\r\n            _admin != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        require(\r\n            _safeHouse != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n        require(\r\n            _stableTokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n        require(\r\n           _token != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n        require(\r\n           _depositConfirmationAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n        require(\r\n            __withdrawalConfirmationAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n        \r\n        admin = Admin(_admin);\r\n        safeHouse = _safeHouse;\r\n        stableToken = IERC20(_stableTokenAddress);\r\n        token = Token(_token);\r\n        deposit = DepositConfirmation(_depositConfirmationAddress);\r\n        withdrawal = WithdrawalConfirmation(__withdrawalConfirmationAddress);\r\n        uint8 _stableTokenDecimals = ERC20(_stableTokenAddress).decimals();\r\n        if (_stableTokenDecimals == 6) {\r\n           amountScaleDecimals = 1e12;\r\n        }\r\n    }\r\n  \r\n    modifier onlyManager() {\r\n        address _manager = admin.manager();\r\n        require(msg.sender == _manager, \"Formation.Fi: no manager\");\r\n        _;\r\n    }\r\n\r\n    modifier cancel() {\r\n        bool  _isCancel = admin.isCancel();\r\n        require( _isCancel == true, \"Formation.Fi: no cancel\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Setter functions to update the Portfolio Parameters.\r\n     */\r\n    function setMaxDepositAmount(uint256 _maxDepositAmount) external \r\n        onlyManager {\r\n        maxDepositAmount = _maxDepositAmount;\r\n\r\n    }\r\n    function setMaxWithdrawalAmount(uint256 _maxWithdrawalAmount) external \r\n        onlyManager{\r\n         maxWithdrawalAmount = _maxWithdrawalAmount;      \r\n    }\r\n\r\n    function setParity(address _parity) external onlyOwner{\r\n        require(\r\n            _parity != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        parity = _parity;      \r\n    }\r\n\r\n    function setSafeHouse(address _safeHouse) external onlyOwner{\r\n          require(\r\n            _safeHouse != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );  \r\n        safeHouse = _safeHouse;\r\n    }\r\n     /**\r\n     * @dev Calculate net deposit indicator\r\n     */\r\n    function calculateNetDepositInd( ) public onlyManager {\r\n        updateAdminData();\r\n        netDepositInd = admin.calculateNetDepositInd(depositAmountTotal, withdrawalAmountTotal,\r\n        maxDepositAmount,  maxWithdrawalAmount);\r\n    }\r\n\r\n     /**\r\n     * @dev Calculate net amount \r\n     */\r\n    function calculateNetAmountEvent( ) public onlyManager {\r\n        netAmountEvent = admin.calculateNetAmountEvent(depositAmountTotal,  withdrawalAmountTotal,\r\n        maxDepositAmount,  maxWithdrawalAmount);\r\n    }\r\n\r\n     /**\r\n     * @dev Calculate the maximum deposit amount to be validated \r\n     * by the manager for the users.\r\n     */\r\n    function calculateMaxDepositAmount( ) public onlyManager {\r\n             maxDeposit = Math.min(depositAmountTotal, maxDepositAmount);\r\n        }\r\n    \r\n     /**\r\n     * @dev Calculate the maximum withdrawal amount to be validated \r\n     * by the manager for the users.\r\n     */\r\n    function calculateMaxWithdrawAmount( ) public onlyManager {\r\n        withdrawalAmountTotalOld = withdrawalAmountTotal;\r\n        maxWithdrawal = (Math.min(withdrawalAmountTotal, maxWithdrawalAmount)\r\n          * COEFF_SCALE_DECIMALS_P);\r\n    }\r\n\r\n     /**\r\n     * @dev Calculate the event parameters by the manager. \r\n     */\r\n    function calculateEventParameters( ) external onlyManager {\r\n        calculateNetDepositInd( );\r\n        calculateNetAmountEvent( );\r\n        calculateMaxDepositAmount( );\r\n        calculateMaxWithdrawAmount( );\r\n    }\r\n\r\n     /**\r\n     * @dev  Validate the deposit requests of users by the manager.\r\n     * @param _users the addresses of users.\r\n     */\r\n    function validateDeposits( address[] memory _users) external \r\n        whenNotPaused onlyManager {\r\n        uint256 _amountStable;\r\n        uint256 _amountStableTotal = 0;\r\n        uint256 _depositToken;\r\n        uint256 _depositTokenTotal = 0;\r\n        uint256 _feeStable;\r\n        uint256 _feeStableTotal = 0;\r\n        uint256 _tokenIdDeposit;\r\n        require (_users.length > 0, \"Formation.Fi: no user\");\r\n        for (uint256 i = 0; i < _users.length  ; i++) {\r\n             address _user =_users[i];\r\n            (  , _amountStable, )= deposit.pendingDepositPerAddress(_user);\r\n           \r\n            if (deposit.balanceOf(_user) == 0) {\r\n                continue;\r\n              }\r\n            if (maxDeposit <= _amountStableTotal) {\r\n                break;\r\n             }\r\n             _tokenIdDeposit = deposit.getTokenId(_user);\r\n             _amountStable = Math.min(maxDeposit  - _amountStableTotal ,  _amountStable);\r\n             depositAmountTotal =  depositAmountTotal - _amountStable;\r\n             if (_user == parity) {\r\n             _feeStable =  (_amountStable * depositFeeRateParity) /\r\n              COEFF_SCALE_DECIMALS_F;\r\n             }\r\n             else {\r\n            _feeStable =  (_amountStable * depositFeeRate) /\r\n              COEFF_SCALE_DECIMALS_F;\r\n\r\n             }\r\n             _feeStableTotal = _feeStableTotal + _feeStable;\r\n             _depositToken = (( _amountStable - _feeStable) *\r\n             COEFF_SCALE_DECIMALS_P) / tokenPrice;\r\n             if (_user == parity) {\r\n                validatedDepositParityStableAmount  = _amountStable;\r\n                validatedDepositParityTokenAmount  = _depositToken;\r\n             }\r\n             _depositTokenTotal = _depositTokenTotal + _depositToken;\r\n             _amountStableTotal = _amountStableTotal + _amountStable;\r\n\r\n             token.mint(_user, _depositToken);\r\n             deposit.updateDepositData( _user,  _tokenIdDeposit, _amountStable, false);\r\n             token.addDeposit(_user,  _depositToken, block.timestamp);\r\n             emit ValidateDeposit( _user, _amountStable, _depositToken);\r\n        }\r\n        maxDeposit = maxDeposit - _amountStableTotal;\r\n        if (_depositTokenTotal > 0){\r\n            tokenPriceMean  = (( tokenTotalSupply * tokenPriceMean) + \r\n            ( _depositTokenTotal * tokenPrice)) /\r\n            ( tokenTotalSupply + _depositTokenTotal);\r\n            admin.updateTokenPriceMean( tokenPriceMean);\r\n        }\r\n        \r\n        if (admin.managementFeesTime() == 0){\r\n            admin.updateManagementFeeTime(block.timestamp);   \r\n        }\r\n        if ( _feeStableTotal > 0){\r\n           stableToken.safeTransfer( treasury, _feeStableTotal/amountScaleDecimals);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Validate the withdrawal requests of users by the manager.\r\n     * @param _users the addresses of users.\r\n     */\r\n    function validateWithdrawals(address[] memory _users) external\r\n        whenNotPaused onlyManager {\r\n        uint256 tokensToBurn = 0;\r\n        uint256 _amountLP;\r\n        uint256 _amountStable;\r\n        uint256 _tokenIdWithdraw;\r\n        calculateAcceptedWithdrawalAmount(_users);\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            address _user =_users[i];\r\n            ( , _amountLP, )= withdrawal.pendingWithdrawPerAddress(_user);\r\n         \r\n            if (withdrawal.balanceOf(_user) == 0) {\r\n                continue;\r\n            }\r\n            _amountLP = acceptedWithdrawalPerAddress[_user];\r\n\r\n            withdrawalAmountTotal = withdrawalAmountTotal - _amountLP ;\r\n            _amountStable = (_amountLP *  tokenPrice) / \r\n            ( COEFF_SCALE_DECIMALS_P * amountScaleDecimals);\r\n\r\n            if (_user == parity) {\r\n               validatedWithdrawalParityStableAmount  =  _amountStable;\r\n               validatedWithdrawalParityTokenAmount = _amountLP;\r\n            }\r\n            stableToken.safeTransfer(_user, _amountStable);\r\n            _tokenIdWithdraw = withdrawal.getTokenId(_user);\r\n            withdrawal.updateWithdrawalData( _user,  _tokenIdWithdraw, _amountLP, false);\r\n            tokensToBurn = tokensToBurn + _amountLP;\r\n            token.updateTokenData(_user, _amountLP);\r\n            delete acceptedWithdrawalPerAddress[_user]; \r\n            emit ValidateWithdrawal(_user,  _amountLP, _amountStable);\r\n        }\r\n        if ((tokensToBurn) > 0){\r\n           token.burn(address(this), tokensToBurn);\r\n        }\r\n        if (withdrawalAmountTotal == 0){\r\n            withdrawalAmountTotalOld = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Make a deposit request.\r\n     * @param _user the addresses of the user.\r\n     * @param _amount the deposit amount in Stablecoin.\r\n     */\r\n    function depositRequest(address _user, uint256 _amount) external whenNotPaused {\r\n        require(_amount >= admin.minAmount(), \r\n        \"Formation.Fi: min Amount\");\r\n        if (deposit.balanceOf( _user)==0){\r\n            tokenIdDeposit = tokenIdDeposit +1;\r\n            deposit.mint( _user, tokenIdDeposit, _amount);\r\n        }\r\n        else {\r\n            uint256 _tokenIdDeposit = deposit.getTokenId(_user);\r\n            deposit.updateDepositData (_user,  _tokenIdDeposit, _amount, true);\r\n        }\r\n        depositAmountTotal = depositAmountTotal + _amount; \r\n        stableToken.safeTransferFrom(msg.sender, address(this), _amount/amountScaleDecimals);\r\n        emit DepositRequest(_user, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev  Cancel the deposit request.\r\n     * @param _amount the deposit amount to cancel in Stablecoin.\r\n     */\r\n    function cancelDepositRequest(uint256 _amount) external whenNotPaused cancel {\r\n        uint256 _tokenIdDeposit = deposit.getTokenId(msg.sender);\r\n        require( _tokenIdDeposit > 0, \r\n        \"Formation.Fi: no deposit request\"); \r\n        deposit.updateDepositData(msg.sender,  _tokenIdDeposit, _amount, false);\r\n        depositAmountTotal = depositAmountTotal - _amount; \r\n        stableToken.safeTransfer(msg.sender, _amount/amountScaleDecimals);\r\n        emit CancelDepositRequest(msg.sender, _amount);      \r\n    }\r\n    \r\n     /**\r\n     * @dev  Make a withdrawal request.\r\n     * @param _amount the withdrawal amount in Token.\r\n     */\r\n    function withdrawRequest(uint256 _amount) external whenNotPaused {\r\n        require ( _amount > 0, \"Formation Fi: zero amount\");\r\n        require(withdrawal.balanceOf(msg.sender) == 0, \"Formation.Fi: request on pending\");\r\n        if (msg.sender != parity) {\r\n        require (token.checklWithdrawalRequest(msg.sender, _amount, admin.lockupPeriodUser()),\r\n         \"Formation.Fi: locked position\");\r\n        }\r\n        tokenIdWithdraw = tokenIdWithdraw +1;\r\n        withdrawal.mint(msg.sender, tokenIdWithdraw, _amount);\r\n        withdrawalAmountTotal = withdrawalAmountTotal + _amount;\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        emit WithdrawalRequest(msg.sender, _amount);\r\n         \r\n    }\r\n\r\n     /**\r\n     * @dev Cancel the withdrawal request.\r\n     * @param _amount the withdrawal amount in Token.\r\n     */\r\n    function cancelWithdrawalRequest( uint256 _amount) external whenNotPaused {\r\n        require ( _amount > 0, \"Formation Fi: zero amount\");\r\n        uint256 _tokenIdWithdraw = withdrawal.getTokenId(msg.sender);\r\n        require( _tokenIdWithdraw > 0, \r\n        \"Formation.Fi: no request\"); \r\n        withdrawal.updateWithdrawalData(msg.sender, _tokenIdWithdraw, _amount, false);\r\n        withdrawalAmountTotal = withdrawalAmountTotal - _amount;\r\n        token.transfer(msg.sender, _amount);\r\n        emit CancelWithdrawalRequest(msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Send Stablecoins to the SafeHouse by the manager.\r\n     * @param _amount the amount to send.\r\n     */\r\n    function sendToSafeHouse(uint256 _amount) external \r\n        whenNotPaused onlyManager {\r\n        require( _amount > 0,  \"Formation.Fi: zero amount\");\r\n        uint256 _scaledAmount = _amount/amountScaleDecimals;\r\n        require(\r\n            stableToken.balanceOf(address(this)) >= _scaledAmount,\r\n            \"Formation.Fi: exceeds balance\"\r\n        );\r\n        stableToken.safeTransfer(safeHouse, _scaledAmount);\r\n    }\r\n    \r\n     /**\r\n     * @dev update data from Admin contract.\r\n     */\r\n    function updateAdminData() internal { \r\n        depositFeeRate = admin.depositFeeRate();\r\n        depositFeeRateParity = admin.depositFeeRateParity();\r\n        tokenPrice = admin.tokenPrice();\r\n        tokenPriceMean = admin.tokenPriceMean();\r\n        tokenTotalSupply = token.totalSupply();\r\n        treasury = admin.treasury();\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculate the accepted withdrawal amounts for users.\r\n     * @param _users the addresses of users.\r\n     */\r\n    function calculateAcceptedWithdrawalAmount(address[] memory _users) \r\n        internal {\r\n        require (_users.length > 0, \"Formation.Fi: no user\");\r\n        uint256 _amountLP;\r\n        address _user;\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            _user = _users[i];\r\n            require( _user!= address(0), \"Formation.Fi: zero address\");\r\n            ( , _amountLP, )= withdrawal.pendingWithdrawPerAddress(_user);\r\n            if (withdrawal.balanceOf(_user) == 0) {\r\n                continue;\r\n            }\r\n           _amountLP = Math.min((maxWithdrawal * _amountLP)/\r\n           (tokenPrice * withdrawalAmountTotalOld), _amountLP); \r\n           acceptedWithdrawalPerAddress[_user] = _amountLP;\r\n        }   \r\n    }\r\n    \r\n}\r\n\r\n// File: Ethereum/Beta/InvestementBeta.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract InvestementBeta.\r\n*/\r\n\r\ncontract InvestementBeta is Investement {\r\n        constructor(address _admin,  address _safeHouse, address _stableToken, address _token,\r\n        address _deposit, address _withdrawal) Investement( _admin, _safeHouse,  _stableToken,  _token,\r\n         _deposit,  _withdrawal) {\r\n        }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"ValidateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SentAmount\",\"type\":\"uint256\"}],\"name\":\"ValidateWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_F\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COEFF_SCALE_DECIMALS_P\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedWithdrawalPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"contract Admin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountScaleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateEventParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateMaxWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetAmountEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateNetDepositInd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"contract DepositConfirmation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRateParity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parity\",\"type\":\"address\"}],\"name\":\"setParity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeHouse\",\"type\":\"address\"}],\"name\":\"setSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceMean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"validateDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"validateWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedDepositParityStableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedDepositParityTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedWithdrawalParityStableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatedWithdrawalParityTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[{\"internalType\":\"contract WithdrawalConfirmation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAmountTotalOld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvestementBeta", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e42f03ec5cf55a1eabe18a7f651e50a0315419770000000000000000000000001f222dfd5160b702e9c1a76d2701c03e3e77a69b000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000001249d72d50b4710589ec672dc21fc8d5e8889937000000000000000000000000059de6c3bb543be7f8a602c7bb3e144dfcc12d9200000000000000000000000006328f87bad0c31c355b2f41c9a7fb81be27bf13", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a29df000de261a4a931868b4cc7a2090859dcfd019469e6a75c18f478c5b22f3"}]}