{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.2;\r\n\r\ncontract Squeue {\r\n  address admin_address;\r\n  uint32 public numOrders; //max order num\r\n  bool public allowTipRemoval;\r\n  bool public paused;\r\n\r\n  event eTip(uint32 oid,uint256 amount);\r\n  \r\n  struct OrderStruct {\r\n    uint32 id; \r\n    address owner;    \r\n    uint256 tipAmount; \r\n  }\r\n  \r\n  mapping(uint32 => OrderStruct) orders;\r\n\r\n  modifier requireAdmin() {\r\n    require(admin_address == msg.sender,\"Requires admin privileges\");\r\n    _;\r\n  }\r\n\r\n  modifier requireOwner(uint32 oid) {\r\n    if (oid >= numOrders) {\r\n      revert(\"Order ID out of range\");\r\n    }\r\n    \r\n    require(msg.sender == orders[oid].owner,\"Not owner of order\");\r\n    _;\r\n  }\r\n\r\n  modifier requireOwnerOrAdmin(uint32 oid) {\r\n    if (oid >= numOrders) {\r\n      revert(\"Order ID out of range\");\r\n    }\r\n    \r\n    require(msg.sender == orders[oid].owner ||\r\n\t    admin_address == msg.sender,\"Not owner or admin\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    numOrders = 0;\r\n    admin_address = msg.sender;    \r\n    paused = true;\r\n    allowTipRemoval = true;\r\n  }\r\n  \r\n  function orderByAddress(address a) public view returns(uint32) {\r\n    uint32 oid = 0;\r\n    \r\n    for (uint32 i = 0;i<numOrders;i++) {\r\n      if (orders[i].owner == a) {\r\n\toid = i;\r\n\tbreak;\r\n      }\r\n    }\r\n    return oid;\r\n  }  \r\n  \r\n  function orderDetails(uint32 oid) public view returns (uint32 id, uint256 tipAmount, address owner) {\r\n    require(oid < numOrders,\"Order id not in range\");\r\n    id = orders[oid].id;\r\n    tipAmount = orders[oid].tipAmount;\r\n    owner = orders[oid].owner;\r\n  }\r\n\r\n  function changeTip(uint32 oid,uint256 amount) public requireOwner(oid) {\r\n    require(!paused,\"Contract is paused\");\r\n    if (!allowTipRemoval && amount < orders[oid].tipAmount) {\r\n      revert(\"Can only increase tip amount\");\r\n    }\r\n    orders[oid].tipAmount = amount;\r\n    emit eTip(oid,amount);\r\n  }\r\n\r\n  function ownerOf(uint32 oid) public view returns(address) {\r\n    return orders[oid].owner;\r\n  }\r\n\r\n  function setPaused(bool p) public requireAdmin {\r\n    paused = p;\r\n  }\r\n\r\n  function setAllowTipRemoval(bool p) public requireAdmin {\r\n    allowTipRemoval = p;\r\n  }\r\n\r\n  //add addresses and positions. Overwrites existing entries\r\n  function addEntries(address[] memory a, uint32[] memory ids) public requireAdmin {\r\n    for (uint32 j=0;j<ids.length;j++) {\r\n      uint32 i = ids[j];\r\n      orders[i].owner = a[j];\r\n      orders[i].id = i;\r\n      if (i >= numOrders) numOrders = i+1;\r\n    }\r\n  }\r\n  \r\n  // won't overwrite existing entries\r\n  function addEntriesNoOverwrite(address[] memory a, uint32[] memory ids) public requireAdmin {\r\n    for (uint32 j=0;j<ids.length;j++) {\r\n      uint32 i = ids[j];\r\n      if (orders[i].id == 0) {\r\n\torders[i].owner = a[j];\r\n\torders[i].id = i;\r\n\tif (i >= numOrders) numOrders = i+1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Allow admin to zero out a tip in case of a mistake\r\n  function zeroTip(uint32 oid) public requireAdmin {\r\n    require(!paused,\"Contract is paused\");    \r\n    orders[oid].tipAmount = 0;\r\n    emit eTip(oid,0);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eTip\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"ids\",\"type\":\"uint32[]\"}],\"name\":\"addEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"ids\",\"type\":\"uint32[]\"}],\"name\":\"addEntriesNoOverwrite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTipRemoval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"oid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOrders\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"orderByAddress\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"oid\",\"type\":\"uint32\"}],\"name\":\"orderDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"oid\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setAllowTipRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"oid\",\"type\":\"uint32\"}],\"name\":\"zeroTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Squeue", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0fdf4eb8a17f4d8b1787c9a22eb06979e3e0c04d81b110dea0c3df5a706681dd"}]}