{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AccessUnitControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../AccessUnitControl/contracts/AbstractAccessUnitControl.sol\\\";\\r\\n\\r\\ncontract AccessUnitControl is AbstractAccessUnitControl {}\\r\\n\"\r\n    },\r\n    \"AccessUnitControl/contracts/AbstractAccessUnitControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract AbstractAccessUnitControl is Ownable {\\r\\n    mapping(address => uint256) private s_mapAccessAllowedAddresses; //holds address and allowed nr of allowed elements to be minted by this address\\r\\n    address[] private s_addedAddresses; //holds all added addresses\\r\\n    address s_handshakeContract; //used for feedback of minted tokens\\r\\n\\r\\n    function linkHandshakeContract(address _handshakeContract)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_handshakeContract != address(0), \\\"invalid address\\\");\\r\\n        s_handshakeContract = _handshakeContract;\\r\\n    }\\r\\n\\r\\n    function addAddressToAccessAllowed(\\r\\n        address _addressToBeAdded,\\r\\n        uint256 _nrOfAllowedElements\\r\\n    ) public virtual onlyOwner {\\r\\n        require(_addressToBeAdded != address(0), \\\"invalid address\\\");\\r\\n        require(_nrOfAllowedElements > 0, \\\"nr of allowed elements <= 0\\\");\\r\\n        require(\\r\\n            s_mapAccessAllowedAddresses[_addressToBeAdded] !=\\r\\n                _nrOfAllowedElements,\\r\\n            \\\"data already added\\\"\\r\\n        );\\r\\n        if (s_mapAccessAllowedAddresses[_addressToBeAdded] == 0) {\\r\\n            //address not yet added\\r\\n            s_addedAddresses.push(_addressToBeAdded);\\r\\n        }\\r\\n        s_mapAccessAllowedAddresses[_addressToBeAdded] = _nrOfAllowedElements; //set nr of allowed elements to be minted by this address\\r\\n    }\\r\\n\\r\\n    function isAccessGranted(address _adressToBeChecked)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(_adressToBeChecked != address(0), \\\"invalid address\\\");\\r\\n        if (s_mapAccessAllowedAddresses[_adressToBeChecked] > 0) {\\r\\n            //so this address would be able to mint tokens, now we check if he already did\\r\\n            require(\\r\\n                s_handshakeContract != address(0),\\r\\n                \\\"handshakeContract not set\\\"\\r\\n            );\\r\\n            //call other contract functions\\r\\n            hadshakeContractImpl handshakeContract = hadshakeContractImpl(\\r\\n                s_handshakeContract\\r\\n            );\\r\\n            if (\\r\\n                handshakeContract.balanceOf(_adressToBeChecked) <\\r\\n                s_mapAccessAllowedAddresses[_adressToBeChecked]\\r\\n            ) {\\r\\n                return (true);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNrOfAllowedElementsPerAddress(address _adressToBeChecked)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (s_mapAccessAllowedAddresses[_adressToBeChecked]);\\r\\n    }\\r\\n\\r\\n    function getRemainingNrOfElementsPerAddress(address _adressToBeChecked)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(_adressToBeChecked != address(0), \\\"null address given\\\");\\r\\n        require(\\r\\n            s_handshakeContract != address(0),\\r\\n            \\\"handshakecontract unlinked\\\"\\r\\n        );\\r\\n        hadshakeContractImpl handshakeContract = hadshakeContractImpl(\\r\\n            s_handshakeContract\\r\\n        );\\r\\n        return (s_mapAccessAllowedAddresses[_adressToBeChecked] -\\r\\n            handshakeContract.balanceOf(_adressToBeChecked));\\r\\n    }\\r\\n\\r\\n    function removeAdressFromMapping(address _adressToBeRemoved)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_adressToBeRemoved != address(0), \\\"null address given\\\");\\r\\n        delete s_mapAccessAllowedAddresses[_adressToBeRemoved];\\r\\n    }\\r\\n\\r\\n    function getCurrentNrOfElementsInMapping()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (s_addedAddresses.length);\\r\\n    }\\r\\n\\r\\n    function removeAllFromAccessAllowed() public virtual onlyOwner {\\r\\n        uint256 nrOfDeletesNeeded = s_addedAddresses.length;\\r\\n        for (uint256 i; i < nrOfDeletesNeeded; i++) {\\r\\n            removeAddressFromAccessAllowed(s_addedAddresses[0]); //refer always deleting first element, because wer reduce array after this call\\r\\n        }\\r\\n        delete s_addedAddresses;\\r\\n    }\\r\\n\\r\\n    function removeAddressFromAccessAllowed(address _addressToRemove)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_addressToRemove != address(0), \\\"null address given\\\");\\r\\n        require(\\r\\n            s_mapAccessAllowedAddresses[_addressToRemove] > 0,\\r\\n            \\\"address not found\\\"\\r\\n        );\\r\\n        for (uint256 i; i < s_addedAddresses.length; i++) {\\r\\n            if (s_addedAddresses[i] == _addressToRemove) {\\r\\n                removeAdressFromMapping(_addressToRemove); //remove from mapping\\r\\n                removeAddressByIndex(i);\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getArrayOfAddresses()\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return s_addedAddresses;\\r\\n    }\\r\\n\\r\\n    function removeAddressByIndex(uint256 _indexToRemove) private {\\r\\n        require(\\r\\n            _indexToRemove <= s_addedAddresses.length ||\\r\\n                s_addedAddresses.length > 0,\\r\\n            \\\"index out of range\\\"\\r\\n        );\\r\\n        if (_indexToRemove == s_addedAddresses.length - 1) {\\r\\n            s_addedAddresses.pop();\\r\\n        } else {\\r\\n            s_addedAddresses[_indexToRemove] = s_addedAddresses[\\r\\n                s_addedAddresses.length - 1\\r\\n            ];\\r\\n            s_addedAddresses.pop();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract hadshakeContractImpl {\\r\\n    function balanceOf(address owner) public view virtual returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToBeAdded\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nrOfAllowedElements\",\"type\":\"uint256\"}],\"name\":\"addAddressToAccessAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayOfAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNrOfElementsInMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adressToBeChecked\",\"type\":\"address\"}],\"name\":\"getNrOfAllowedElementsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adressToBeChecked\",\"type\":\"address\"}],\"name\":\"getRemainingNrOfElementsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adressToBeChecked\",\"type\":\"address\"}],\"name\":\"isAccessGranted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handshakeContract\",\"type\":\"address\"}],\"name\":\"linkHandshakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeAddressFromAccessAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adressToBeRemoved\",\"type\":\"address\"}],\"name\":\"removeAdressFromMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFromAccessAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccessUnitControl", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}