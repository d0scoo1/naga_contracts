{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProxyForBulkTokenSending.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\nimport \\\"./proxy/EternalStorage.sol\\\";\\r\\nimport \\\"./proxy/OwnedUpgradeabilityProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EternalStorageProxy\\r\\n * @dev This proxy holds the storage of the token contract and delegates every call to the current implementation set.\\r\\n * Besides, it allows to upgrade the token's behaviour towards further implementations, and provides basic\\r\\n * authorization control functionalities\\r\\n */\\r\\ncontract ProxyForBulkTokenSending is OwnedUpgradeabilityProxy, EternalStorage {\\r\\n    constructor(address _owner) public OwnedUpgradeabilityProxy(_owner) {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/EternalStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title EternalStorage\\r\\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\\r\\n */\\r\\ncontract EternalStorage {\\r\\n\\r\\n    mapping(bytes32 => uint256) internal uintStorage;\\r\\n    mapping(bytes32 => string) internal stringStorage;\\r\\n    mapping(bytes32 => address) internal addressStorage;\\r\\n    mapping(bytes32 => bytes) internal bytesStorage;\\r\\n    mapping(bytes32 => bool) internal boolStorage;\\r\\n    mapping(bytes32 => int256) internal intStorage;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/OwnedUpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\nimport \\\"./UpgradeabilityProxy.sol\\\";\\r\\nimport \\\"./UpgradeabilityOwnerStorage.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OwnedUpgradeabilityProxy\\r\\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\\r\\n */\\r\\ncontract OwnedUpgradeabilityProxy is UpgradeabilityOwnerStorage, UpgradeabilityProxy {\\r\\n    /**\\r\\n    * @dev Event to show ownership has been transferred\\r\\n    * @param previousOwner representing the address of the previous owner\\r\\n    * @param newOwner representing the address of the new owner\\r\\n    */\\r\\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\r\\n\\r\\n    /**\\r\\n    * @dev the constructor sets the original owner of the contract to the sender account.\\r\\n    */\\r\\n    constructor(address _owner) public {\\r\\n        setUpgradeabilityOwner(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Throws if called by any account other than the owner.\\r\\n    */\\r\\n    modifier onlyProxyOwner() {\\r\\n        require(msg.sender == proxyOwner());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Tells the address of the proxy owner\\r\\n    * @return the address of the proxy owner\\r\\n    */\\r\\n    function proxyOwner() public view returns (address) {\\r\\n        return upgradeabilityOwner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    * @param newOwner The address to transfer ownership to.\\r\\n    */\\r\\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\r\\n        setUpgradeabilityOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy.\\r\\n    * @param version representing the version name of the new implementation to be set.\\r\\n    * @param implementation representing the address of the new implementation to be set.\\r\\n    */\\r\\n    function upgradeTo(string version, address implementation) public onlyProxyOwner {\\r\\n        _upgradeTo(version, implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation\\r\\n    * to initialize whatever is needed through a low level call.\\r\\n    * @param version representing the version name of the new implementation to be set.\\r\\n    * @param implementation representing the address of the new implementation to be set.\\r\\n    * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\\r\\n    * signature of the implementation to be called with the needed payload\\r\\n    */\\r\\n    function upgradeToAndCall(string version, address implementation, bytes data) payable public onlyProxyOwner {\\r\\n        upgradeTo(version, implementation);\\r\\n        require(address(this).call.value(msg.value)(data));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/UpgradeabilityProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\nimport \\\"./UpgradeabilityStorage.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UpgradeabilityProxy\\r\\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\\r\\n */\\r\\ncontract UpgradeabilityProxy is Proxy, UpgradeabilityStorage {\\r\\n  /**\\r\\n  * @dev This event will be emitted every time the implementation gets upgraded\\r\\n  * @param version representing the version name of the upgraded implementation\\r\\n  * @param implementation representing the address of the upgraded implementation\\r\\n  */\\r\\n    event Upgraded(string version, address indexed implementation);\\r\\n\\r\\n    /**\\r\\n    * @dev Upgrades the implementation address\\r\\n    * @param version representing the version name of the new implementation to be set\\r\\n    * @param implementation representing the address of the new implementation to be set\\r\\n    */\\r\\n    function _upgradeTo(string version, address implementation) internal {\\r\\n        require(_implementation != implementation);\\r\\n        _version = version;\\r\\n        _implementation = implementation;\\r\\n        emit Upgraded(version, implementation);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/UpgradeabilityOwnerStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\n/**\\r\\n * @title UpgradeabilityOwnerStorage\\r\\n * @dev This contract keeps track of the upgradeability owner\\r\\n */\\r\\ncontract UpgradeabilityOwnerStorage {\\r\\n    // Owner of the contract\\r\\n    address private _upgradeabilityOwner;\\r\\n\\r\\n    /**\\r\\n    * @dev Tells the address of the owner\\r\\n    * @return the address of the owner\\r\\n    */\\r\\n    function upgradeabilityOwner() public view returns (address) {\\r\\n        return _upgradeabilityOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the address of the owner\\r\\n    */\\r\\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\\r\\n        _upgradeabilityOwner = newUpgradeabilityOwner;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\n/**\\r\\n * @title Proxy\\r\\n * @dev Gives the possibility to delegate any call to a foreign implementation.\\r\\n */\\r\\ncontract Proxy {\\r\\n\\r\\n    /**\\r\\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\\r\\n    * This function will return whatever the implementation call returns\\r\\n    */\\r\\n    function () public payable {\\r\\n        address _impl = implementation();\\r\\n        require(_impl != address(0));\\r\\n\\r\\n        bool success = _impl.delegatecall(msg.data);\\r\\n        assembly {\\r\\n            let freememstart := mload(0x40)\\r\\n            returndatacopy(freememstart, 0, returndatasize())\\r\\n            switch success\\r\\n            case 0 { revert(freememstart, returndatasize()) }\\r\\n            default { return(freememstart, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Tells the address of the implementation where every call will be delegated.\\r\\n    * @return address of the implementation to which it will be delegated\\r\\n    */\\r\\n    function implementation() public view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxy/UpgradeabilityStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.23;\\r\\n\\r\\n/**\\r\\n * @title UpgradeabilityStorage\\r\\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\\r\\n */\\r\\ncontract UpgradeabilityStorage {\\r\\n  // Version name of the current implementation\\r\\n    string internal _version;\\r\\n\\r\\n    // Address of the current implementation\\r\\n    address internal _implementation;\\r\\n\\r\\n    /**\\r\\n    * @dev Tells the version name of the current implementation\\r\\n    * @return string representing the name of the current version\\r\\n    */\\r\\n    function version() public view returns (string) {\\r\\n        return _version;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Tells the address of the current implementation\\r\\n    * @return address of the current implementation\\r\\n    */\\r\\n    function implementation() public view returns (address) {\\r\\n        return _implementation;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeabilityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]", "ContractName": "ProxyForBulkTokenSending", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000064f2cdcb681c1dc9bcc9257623ea8c04e0ad9aa5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xf9465b7b8ea62ad589e7268d0dd2b263919b8845", "SwarmSource": ""}]}