{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IImbuedNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/** @title NFT contract for imbued works of art\\n    @author 0xsublime.eth\\n    @notice This contract is the persistent center of the Imbued Art project,\\n    and allows unstoppable ownership of the NFTs. The minting is controlled by a\\n    separate contract, which is upgradeable. This contract enforces a 700 token\\n    limit: 7 editions of 100 tokens.\\n\\n    The dataContract is intended to serve as a store for metadata, animations,\\n    code, etc.\\n\\n    The owner of a token can imbue it with meaning. The imbuement is a string,\\n    up to 32 bytes long. The history of a tokens owenrship and its imbuements\\n    are stored and are retrievable via view functions.\\n\\n    Token transfers are initially turned off for all editions. Once a transfers\\n    are activated on an edition of tokens, it cannot be disallowed again.\\n */\\ninterface IImbuedNFT is IERC721Enumerable {\\n\\n    /// @dev The contract controlling minting\\n    function mintContract() external view returns (address);\\n    /// @dev For storing metadata, animations, code.\\n    function dataContract() external view returns (address); \\n\\n    function NUM_EDITIONS() external pure returns (uint256);\\n    function EDITION_SIZE() external pure returns (uint256);\\n\\n    /// Tokens are marked transferable at the edition level.\\n    function editionTransferable(uint256) external pure returns (bool);\\n\\n    function baseURI() external pure returns (string memory);\\n\\n    /// Maps a token to its history of owners.\\n    function id2provenance(uint256) external view returns (address[] memory);\\n    /// Maps a (token, owner) pair to its imbuement.\\n    function idAndOwner2imbuement(uint256, address) external view returns (string memory);\\n\\n    event Imbued(uint256 indexed tokenId, address indexed owner, string imbuement);\\n    event EditionTransferable(uint256 indexed edition);\\n\\n    // ===================================\\n    // Mint contract privileged functions.\\n    // ===================================\\n\\n    /** @dev The mint function can only be called by the minter address.\\n        @param recipient The recipient of the minted token, needs to be an EAO or a contract which accepts ERC721s.\\n        @param tokenId The token ID to mint.\\n     */\\n    function mint(address recipient, uint256 tokenId) external;\\n    // ==============\\n    // NFT functions.\\n    // ==============\\n\\n    /** Saves an imbuement for a token and owner.\\n        An imbuement is a string, up to 32 bytes (equivalent to 32 ASCII\\n        characters).  Once set, it is immuatble.  Only the owner, or an address\\n        which has permission to control the token, can imbue it.\\n        @param tokenId The token to imbue.\\n        @param imbuement The string that should be saved\\n     */\\n    function imbue(uint256 tokenId, string calldata imbuement) external;\\n\\n    // ===============\\n    // View functions.\\n    // ===============\\n\\n    /// Get the complete list of imbuements for a token.\\n    /// @param id ID of the token to get imbuements for\\n    /// @param start start of the range to return (inclusive)\\n    /// @param end end of the range to return (non-inclusive), or 0 for max length.\\n    /// @return A string array, each string at most 32 bytes.\\n    function imbuements(uint256 id, uint256 start, uint256 end) external view returns (string[] memory);\\n\\n    /// Get the chronological list of owners of a token.\\n    /// @param id The token ID to get the provenance for.\\n    /// @param start start of the range to return (inclusive)\\n    /// @param end end of the range to return (non-inclusive), or 0 for max length.\\n    /// @return An address array of all owners, listed chornologically.\\n    function provenance(uint256 id, uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    // =====================\\n    // Only owner functions.\\n    // =====================\\n\\n    function setMintContract(address _mintContract) external;\\n    function setDataContract(address _dataContract) external;\\n\\n    function setBaseURI(string memory newBaseURI) external;\\n\\n    /// @dev Edition transfers can only be allowed, there is no way to disallow them later.\\n    function setEditionTransferable(uint256 edition) external;\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external;\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\"},\"ImbuedMinterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IImbuedNFT.sol\\\";\\n\\n/// Minter contract of Imbued Art tokens.\\n/// This contract allows any holder of an Imbued Art token (address\\n/// `0x000001e1b2b5f9825f4d50bd4906aff2f298af4e`) to mint one new Imbued NFT for\\n/// each they already own. The contract allows tokens of ID up to\\n/// `maxWhitelistId` to mint new tokens.\\n/// The price per token is `whitelistPrice`.\\n/// The owner of the minter account may mint tokens at no cost (they also are\\n/// priviliged to withdraw any funds deposited into the account, so this only\\n/// cuts out an extra transaction).\\n/// However, note that the Imbued Art contract restricts even the admin on what can be minted:\\n/// The highest tokenId that can ever be minted is 699, and an admin can\\u0027t mint\\n/// a token with an id that already exists.\\ncontract ImbuedMintV2 is Ownable {\\n    IImbuedNFT immutable public NFT;\\n\\n    uint16 public maxWhiteListId = 99;\\n    uint16 public nextId = 101;\\n    uint16 public maxId = 199;\\n    uint256 public whitelistPrice = 0.05 ether;\\n\\n    mapping (uint256 =\\u003e bool) public tokenid2claimed; // token ids that are claimed.\\n\\n    constructor(uint16 _maxWhiteListId, uint16 _startId, uint16 _maxId, uint256 _whitelistPrice, IImbuedNFT nft) {\\n        maxWhiteListId = _maxWhiteListId;\\n        nextId = _startId;\\n        maxId = _maxId;\\n        whitelistPrice = _whitelistPrice;\\n        NFT = nft;\\n    }\\n\\n    /// Minting using whitelisted tokens.  You pass a list of token ids under\\n    /// your own, pay `whitelistPrice` * `tokenIds.length`, and receive\\n    /// `tokenIds.length` newly minted tokens.\\n    /// @param tokenIds a list of tokens\\n    function mint(uint16[] calldata tokenIds) external payable {\\n        uint8 amount = uint8(tokenIds.length);\\n        require(msg.value == amount * whitelistPrice, \\\"wrong amount of ether sent\\\");\\n\\n        unchecked {\\n            for (uint256 i = 0; i \\u003c amount; i++) {\\n                uint256 id = tokenIds[i];\\n                require(id \\u003c= maxWhiteListId, \\\"not a whitelisted token id\\\");\\n                require(!tokenid2claimed[id], \\\"token already used for claim\\\");\\n                address tokenOwner = NFT.ownerOf(id);\\n                require(msg.sender == tokenOwner , \\\"sender is not token owner\\\");\\n                tokenid2claimed[id] = true;\\n            }\\n        }\\n        _mint(msg.sender, amount);\\n    }\\n\\n    // only owner\\n\\n    /// (Admin only) Admin can mint without paying fee, because they are allowed to withdraw anyway.\\n    /// @param recipient what address should be sent the new token, must be an\\n    ///        EOA or contract able to receive ERC721s.\\n    /// @param amount the number of tokens to mint, starting with id `nextId()`.\\n    function adminMintAmount(address recipient, uint8 amount) external payable onlyOwner() {\\n        _mint(recipient, amount);\\n    }\\n\\n    /// (Admin only) Can mint *any* token ID. Intended foremost for minting\\n    /// major versions for the artworks.\\n    /// @param recipient what address should be sent the new token, must be an\\n    ///        EOA or contract able to receive ERC721s.\\n    /// @param tokenId which id to mint, may not be a previously minted one.\\n    function adminMintSpecific(address recipient, uint256 tokenId) external payable onlyOwner() {\\n        NFT.mint(recipient, tokenId);\\n    }\\n\\n    /// (Admin only) Set the highest token id which may be used for a whitelist mint.\\n    /// @param newMaxWhitelistId the new maximum token id that is whitelisted.\\n    function setMaxWhitelistId(uint16 newMaxWhitelistId) external payable onlyOwner() {\\n        maxWhiteListId = newMaxWhitelistId;\\n    }\\n\\n    /// (Admin only) Set the next id that will be minted by whitelisters or\\n    /// `adminMintAmount`.  If this id has already been minted, all minting\\n    /// except `adminMintSpecific` will be impossible.\\n    /// @param newNextId the next id that will be minted.\\n    function setNextId(uint16 newNextId) external payable onlyOwner() {\\n        nextId = newNextId;\\n    }\\n\\n    /// (Admin only) Set the maximum mintable ID (for whitelist minters).\\n    /// @param newMaxId the new maximum id that can be whitelist minted (inclusive).\\n    function setMaxId(uint16 newMaxId) external payable onlyOwner() {\\n        maxId = newMaxId;\\n    }\\n    \\n    /// (Admin only) Set the price per token for whitelisted minters\\n    /// @param newPrice the new price in wei.\\n    function setWhitelistPrice(uint256 newPrice) external payable onlyOwner() {\\n        whitelistPrice = newPrice;\\n    }\\n\\n    /// (Admin only) Withdraw the entire contract balance to the recipient address.\\n    /// @param recipient where to send the ether balance.\\n    function withdrawAll(address payable recipient) external payable onlyOwner() {\\n        recipient.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    /// (Admin only) self-destruct the minting contract.\\n    /// @param recipient where to send the ether balance.\\n    function kill(address payable recipient) external payable onlyOwner() {\\n        selfdestruct(recipient);\\n    }\\n\\n    // internal\\n\\n    // Reentrancy protection: not needed. The only variable that has not yet\\n    // been updated is nextId.  If you try to mint again using re-entrancy, the\\n    // mint itself will fail.\\n    function _mint(address recipient, uint8 amount) internal {\\n        uint256 nextCache = nextId;\\n        unchecked {\\n            uint256 newNext = nextCache + amount;\\n            require(newNext - 1 \\u003c= maxId, \\\"can\\u0027t mint that many\\\");\\n            for (uint256 i = 0; i \\u003c amount; i++) {\\n                require((nextCache + i) % 100 != 0, \\\"minting a major token\\\");\\n                NFT.mint(recipient, nextCache + i); // reentrancy danger. Handled by fact that same ID can\\u0027t be minted twice.\\n            }\\n            nextId = uint16(newNext);\\n        }\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxWhiteListId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_startId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract IImbuedNFT\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contract IImbuedNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"adminMintAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminMintSpecific\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhiteListId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxId\",\"type\":\"uint16\"}],\"name\":\"setMaxId\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxWhitelistId\",\"type\":\"uint16\"}],\"name\":\"setMaxWhitelistId\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newNextId\",\"type\":\"uint16\"}],\"name\":\"setNextId\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setWhitelistPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenid2claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ImbuedMintV2", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000063000000000000000000000000000000000000000000000000000000000000006500000000000000000000000000000000000000000000000000000000000000c700000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000001e1b2b5f9825f4d50bd4906aff2f298af4e", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ad146431bde1c2415db774d71a34bc265580c484678261ccd8de765149e8d0f"}]}