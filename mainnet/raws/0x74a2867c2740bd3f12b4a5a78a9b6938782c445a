{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n// Contract by: @backseats_eth\r\n\r\n\r\n// This is an experimental implementation of an allow list game for NounCats (NounCats.com / @NounCats on Twitter).\r\n// Periodically, this contract will open up and anyone can add themselves to the allow list before we mint on February 14, 2022.\r\n\r\n// DISCLAIMER: This costs gas to add yourself to the allow list via this method. Yes, there are better and gasless ways to run an allow list (like a Google Form, lol). \r\n// This is not our only way of taking addresses before mint. It's just a fun one. \r\ncontract NounCaterpillarV1 {\r\n    \r\n    // How many open slots are currently available in this contract\r\n    uint8 public openSlots;\r\n    \r\n    // Using a bytes32 array rather than an array of addresses to save space and save the user on gas costs. These will eventually be used in a Merkle tree which the bytes32[] also lends itself to.\r\n    bytes32[] public addresses;\r\n\r\n    // A mapping to make sure you haven't been here before\r\n    mapping(bytes32 => bool) private addressMapping;\r\n\r\n    // A simplified implementation of Ownable \r\n    address private owner = 0x3a6372B2013f9876a84761187d933DEe0653E377;\r\n\r\n    modifier onlyOwner { \r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    // A function that only costs gas to add yourself to the allow list\r\n    function addMeToAllowList() external {\r\n        require(openSlots > 0, \"Wait for spots to open up\");\r\n        bytes32 encoded = keccak256(abi.encodePacked(msg.sender));\r\n        require(!addressMapping[encoded], \"Already on list\");\r\n        addressMapping[encoded] = true;\r\n        openSlots -= 1;\r\n        addresses.push(encoded);\r\n        delete encoded;\r\n    }\r\n\r\n    // A function that allows the owner to open up new spots\r\n    function extendCaterpillar(uint8 _newSlots) external onlyOwner { \r\n        openSlots += _newSlots;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"addMeToAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newSlots\",\"type\":\"uint8\"}],\"name\":\"extendCaterpillar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSlots\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NounCaterpillarV1", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b386c94214f15ac31f596c4052489332ece931554db25fb68f63732461c4f9fd"}]}