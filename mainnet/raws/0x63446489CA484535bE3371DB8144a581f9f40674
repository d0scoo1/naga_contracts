{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/VotingForERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/*\\n * This smart contract implements voting for tokenholders of ERC20 tokens based on the principle\\n * \\\"one token - one vote\\\"\\n * It requires external script to count votes.\\n *\\n * Rules:\\n * Voting can be started for any contract with ERC20 tokens, to start a voting an address have to own at lest one token.\\n * To start a voting, voting creator must provide:\\n * 1) address of a contract with tokens (ERC20),\\n * 2) text of the proposal,\\n * 3) number of block on witch voting will be finished and results have to be calculated.\\n *\\n * Every proposal for a contract receives a sequence number that serves as a proposal ID for this contract.\\n * Each smart contract with tokens has its own numbering.\\n * So proposal can be identified by contract address with tokens + number (ID) of the proposal.\\n *\\n * To vote 'for' or 'against' voter has to provide an address of a contract with tokens + proposal ID.\\n *\\n * In most scenarios only votes 'for' can be used, who did not voted 'for' can be considered as voted 'against'.\\n * But our dApp also supports votes 'against'\\n *\\n * To calculate results we collect all voted addresses by an external script, which is also open sourced.\\n * Than we check their balances in tokens on resulting block, and and sum up the voices.\\n * Thus, for the results, the number of tokens of the voter at the moment of voting does not matter\\n * (it should just has at least one).\\n * What matters is the number of tokens on the voter's address on the block where the results should calculated.\\n *\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract ERC20TokensContract {\\n    /*\\n     * These are functions that smart contract needs to have to work with our dApp\\n     */\\n\\n    function balanceOf(address _owner) external view virtual returns (uint256 balance);\\n\\n    function totalSupply() external view virtual returns (uint256);\\n\\n    function decimals() external view virtual returns (uint8);\\n\\n    string public name;\\n\\n    string public symbol;\\n}\\n\\ncontract VotingForERC20 is Ownable {\\n    mapping(address => uint256) public votingCreationTresholdForContract;\\n    mapping(address => uint256) public votingCounterForContract;\\n    mapping(address => mapping(uint256 => string)) public proposalText;\\n    mapping(address => mapping(uint256 => uint256)) public numberOfVotersFor;\\n    mapping(address => mapping(uint256 => uint256)) public numberOfVotersAgainst;\\n    mapping(address => mapping(uint256 => mapping(uint256 => address))) public votedFor;\\n    mapping(address => mapping(uint256 => mapping(uint256 => address))) public votedAgainst;\\n    mapping(address => mapping(uint256 => mapping(address => bool))) public boolVotedFor;\\n    mapping(address => mapping(uint256 => mapping(address => bool))) public boolVotedAgainst;\\n    mapping(address => mapping(uint256 => uint256)) public startTimestamp;\\n    mapping(address => mapping(uint256 => uint256)) public endTimestamp;\\n\\n    event Proposal(\\n        address indexed forContract,\\n        uint256 indexed proposalId,\\n        address indexed by,\\n        string proposalText,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    function setVotingCreationTresholdForContract(\\n        address _erc20ContractAddress,\\n        uint256 _treshold\\n    ) public onlyOwner {\\n        ERC20TokensContract erc20TokensContract = ERC20TokensContract(_erc20ContractAddress);\\n        \\n        require(_treshold >= 0, \\\"Treshold must be positive or zero.\\\");\\n        require(_treshold < erc20TokensContract.totalSupply(), \\\"Treshold must less than totalSupply.\\\");\\n\\n        votingCreationTresholdForContract[_erc20ContractAddress] = _treshold * (10 ** uint256(erc20TokensContract.decimals()));\\n    }\\n\\n    function create(\\n        address _erc20ContractAddress,\\n        string calldata _proposalText,\\n        uint256 _endTimestamp\\n    ) public returns (uint256 proposalId) {\\n        proposalId = _create(\\n            _erc20ContractAddress,\\n            _proposalText,\\n            _endTimestamp,\\n            block.timestamp\\n        );\\n        return proposalId;\\n    }\\n\\n    function create(\\n        address _erc20ContractAddress,\\n        string calldata _proposalText,\\n        uint256 _endTimestamp,\\n        uint256 _startTimestamp\\n    ) public returns (uint256 proposalId) {\\n        proposalId = _create(\\n            _erc20ContractAddress,\\n            _proposalText,\\n            _endTimestamp,\\n            _startTimestamp\\n        );\\n        return proposalId;\\n    }\\n\\n    function _create(\\n        address _erc20ContractAddress,\\n        string calldata _proposalText,\\n        uint256 _endTimestamp,\\n        uint256 _startTimestamp\\n    ) internal returns (uint256 proposalId) {\\n        ERC20TokensContract erc20TokensContract = ERC20TokensContract(_erc20ContractAddress);\\n\\n        require(\\n            erc20TokensContract.balanceOf(msg.sender) > votingCreationTresholdForContract[_erc20ContractAddress],\\n            \\\"Only tokenholder that has more than <treshold> can start voting\\\"\\n        );\\n\\n        require(\\n            _endTimestamp > block.timestamp && _endTimestamp > _startTimestamp,\\n            \\\"Voting end timestamp should be later than the current moment and the voting start timestamp\\\"\\n        );\\n\\n        // votingCounterForContract[_erc20ContractAddress]++; // < does not work\\n        votingCounterForContract[_erc20ContractAddress] = votingCounterForContract[_erc20ContractAddress] + 1;\\n        proposalId = votingCounterForContract[_erc20ContractAddress];\\n\\n        proposalText[_erc20ContractAddress][proposalId] = _proposalText;\\n        startTimestamp[_erc20ContractAddress][proposalId] = _startTimestamp;\\n        endTimestamp[_erc20ContractAddress][proposalId] = _endTimestamp;\\n\\n        emit Proposal(\\n            _erc20ContractAddress,\\n            proposalId,\\n            msg.sender,\\n            _proposalText,\\n            _startTimestamp,\\n            _endTimestamp\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    event VoteFor(\\n        address indexed forContract,\\n        uint256 indexed proposalId,\\n        address indexed by\\n    );\\n\\n    event VoteAgainst(\\n        address indexed forContract,\\n        uint256 indexed proposalId,\\n        address indexed by\\n    );\\n\\n    function voteFor(\\n        address _erc20ContractAddress, //..1\\n        uint256 _proposalId //.............2\\n    ) public returns (bool success) {\\n        ERC20TokensContract erc20TokensContract = ERC20TokensContract(_erc20ContractAddress);\\n\\n        require(\\n            erc20TokensContract.balanceOf(msg.sender) > 0,\\n            \\\"Only tokenholder can vote\\\"\\n        );\\n\\n        require(\\n            startTimestamp[_erc20ContractAddress][_proposalId] <= block.timestamp,\\n            \\\"Voting has not started yet.\\\"\\n        );\\n\\n        require(\\n            endTimestamp[_erc20ContractAddress][_proposalId] > block.timestamp,\\n            \\\"Voting has finished!\\\"\\n        );\\n\\n        require(\\n            !boolVotedFor[_erc20ContractAddress][_proposalId][msg.sender],\\n            \\\"Already voted\\\"\\n        );\\n        require(\\n            !boolVotedAgainst[_erc20ContractAddress][_proposalId][msg.sender],\\n            \\\"Already voted\\\"\\n        );\\n\\n        numberOfVotersFor[_erc20ContractAddress][_proposalId] = numberOfVotersFor[_erc20ContractAddress][_proposalId] + 1;\\n        uint256 voterId = numberOfVotersFor[_erc20ContractAddress][_proposalId];\\n\\n        votedFor[_erc20ContractAddress][_proposalId][voterId] = msg.sender;\\n        boolVotedFor[_erc20ContractAddress][_proposalId][msg.sender] = true;\\n\\n        emit VoteFor(_erc20ContractAddress, _proposalId, msg.sender);\\n\\n        return true;\\n    }\\n\\n    function voteAgainst(\\n        address _erc20ContractAddress, //..1\\n        uint256 _proposalId //.............2\\n    ) public returns (bool success) {\\n        ERC20TokensContract erc20TokensContract = ERC20TokensContract(_erc20ContractAddress);\\n\\n        require(\\n            erc20TokensContract.balanceOf(msg.sender) > 0,\\n            \\\"Only tokenholder can vote\\\"\\n        );\\n\\n        require(\\n            startTimestamp[_erc20ContractAddress][_proposalId] <= block.timestamp,\\n            \\\"Voting has not started yet.\\\"\\n        );\\n\\n        require(\\n            endTimestamp[_erc20ContractAddress][_proposalId] > block.timestamp,\\n            \\\"Voting has finished!\\\"\\n        );\\n\\n        require(\\n            !boolVotedFor[_erc20ContractAddress][_proposalId][msg.sender],\\n            \\\"Already voted\\\"\\n        );\\n        require(\\n            !boolVotedAgainst[_erc20ContractAddress][_proposalId][msg.sender],\\n            \\\"Already voted\\\"\\n        );\\n\\n        numberOfVotersAgainst[_erc20ContractAddress][_proposalId] = numberOfVotersAgainst[_erc20ContractAddress][_proposalId] + 1;\\n        uint256 voterId = numberOfVotersAgainst[_erc20ContractAddress][_proposalId];\\n\\n        votedAgainst[_erc20ContractAddress][_proposalId][voterId] = msg.sender;\\n        boolVotedAgainst[_erc20ContractAddress][_proposalId][msg.sender] = true;\\n\\n        emit VoteAgainst(_erc20ContractAddress, _proposalId, msg.sender);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"Proposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"VoteAgainst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"VoteFor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boolVotedAgainst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boolVotedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_proposalText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_proposalText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfVotersAgainst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfVotersFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treshold\",\"type\":\"uint256\"}],\"name\":\"setVotingCreationTresholdForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"voteAgainst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedAgainst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingCounterForContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingCreationTresholdForContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VotingForERC20", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}