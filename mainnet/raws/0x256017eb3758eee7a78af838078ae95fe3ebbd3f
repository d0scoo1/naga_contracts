{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/IERC721.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/StiltonGamingPlatform.sol\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\nstruct BalanceChange {\r\n    address account;\r\n    int256 change;\r\n}\r\n\r\ncontract StiltonGamingPlatform is Ownable {\r\n    IERC20 public erc20;\r\n    IERC721 public nft;\r\n    address public caasbank;\r\n    bool public enabled;\r\n    mapping(address => uint256) erc20Balances;\r\n    mapping(address => bool) public admins;\r\n    uint256 public balanceTotal;\r\n\r\n    event Jackpot(address indexed account, uint256 count, uint256 nftId);\r\n\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender], \"only for admin\");\r\n        _;\r\n    }\r\n\r\n    constructor(address erc20Address, address nftAddress) {\r\n        erc20 = IERC20(erc20Address);\r\n        nft = IERC721(nftAddress);\r\n    }\r\n\r\n    function SetEnable(bool newEnabled) external onlyOwner {\r\n        enabled = newEnabled;\r\n    }\r\n\r\n    function topUpBalance(uint256 count) external {\r\n        require(enabled, \"not enabled\");\r\n        erc20.transferFrom(msg.sender, address(this), count);\r\n        addBalanceInternal(msg.sender, count);\r\n    }\r\n\r\n    function topUpJackpot(uint256 count) external {\r\n        erc20.transferFrom(msg.sender, address(this), count);\r\n        addBalanceInternal(address(0), count);\r\n    }\r\n\r\n    function AddToJackpot(uint256 count) external {\r\n        erc20.transferFrom(msg.sender, address(this), count);\r\n        addBalanceInternal(address(0), count);\r\n    }\r\n\r\n    function setAdmin(address account, bool isAdmin) public onlyOwner {\r\n        admins[account] = isAdmin;\r\n    }\r\n\r\n    function setCaasbank(address caasbankAddress) external onlyOwner {\r\n        caasbank = caasbankAddress;\r\n    }\r\n\r\n    function setErc20(address erc20Address) external onlyOwner {\r\n        erc20 = IERC20(erc20Address);\r\n    }\r\n\r\n    function setNft(address nftAddress) external onlyOwner {\r\n        nft = IERC721(nftAddress);\r\n    }\r\n\r\n    function removeCaasbank() external onlyOwner {\r\n        caasbank = address(0);\r\n    }\r\n\r\n    function jackpot() public view returns (uint256) {\r\n        return (balanceOf(address(0)) * 6) / 10;\r\n    }\r\n\r\n    function giveJackpot(address account, uint256 bid) external onlyAdmin {\r\n        require(enabled, \"not enabled\");\r\n        // give erc20\r\n        uint256 count = bid * 50;\r\n        uint256 jp = jackpot();\r\n        if (count > jp) count = jp;\r\n        subBalanceInternal(address(0), count);\r\n        addBalance(account, count);\r\n\r\n        // give nft\r\n        uint256 nftId;\r\n        uint256 nftBalance = nft.balanceOf(address(this));\r\n        if (nftBalance > 0) {\r\n            nftId = nft.tokenOfOwnerByIndex(address(this), 0);\r\n            nft.safeTransferFrom(address(this), account, nftId);\r\n        }\r\n\r\n        // event\r\n        emit Jackpot(account, count, nftId);\r\n    }\r\n\r\n    function withdrawJackpot(address account, uint256 count)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        require(erc20Balances[address(0)] >= count, \"not enough jackpot\");\r\n        erc20.transfer(account, count);\r\n        subBalanceInternal(address(0), count);\r\n    }\r\n\r\n    function addBalance(address account, uint256 count) public onlyAdmin {\r\n        addBalanceInternal(account, count);\r\n    }\r\n\r\n    function addBalanceInternal(address account, uint256 count) internal {\r\n        erc20Balances[account] += count;\r\n        balanceTotal += count;\r\n    }\r\n\r\n    function subBalance(address account, uint256 count) public onlyAdmin {\r\n        subBalanceInternal(account, count);\r\n    }\r\n\r\n    function subBalanceInternal(address account, uint256 count) internal {\r\n        erc20Balances[account] -= count;\r\n        balanceTotal -= count;\r\n    }\r\n\r\n    function applyChanges(BalanceChange[] calldata changes) external onlyAdmin {\r\n        require(enabled, \"not enabled\");\r\n        for (uint256 i = 0; i < changes.length; ++i) {\r\n            int256 change = changes[i].change;\r\n            if (change > 0)\r\n                addBalanceInternal(changes[i].account, uint256(change));\r\n            else subBalanceInternal(changes[i].account, uint256(-change));\r\n        }\r\n    }\r\n\r\n    function withdrawErc20(address account, uint256 count) external onlyAdmin {\r\n        require(enabled, \"not enabled\");\r\n        require(balanceOf(account) >= count, \"not enough balance\");\r\n\r\n        uint256 jp = (count * 25) / 1000;\r\n        uint256 caas = (count * 25) / 1000;\r\n        if (caasbank == address(0)) caas = 0;\r\n        uint256 user = count - caas - jp;\r\n\r\n        if (caas > 0) erc20.transfer(caasbank, caas);\r\n        erc20.transfer(account, user);\r\n        addBalanceInternal(address(0), jp);\r\n\r\n        erc20Balances[account] -= caas + user + jp;\r\n        balanceTotal -= caas + user;\r\n    }\r\n\r\n    function withdrawErc20Admin(address account, uint256 count) external onlyAdmin{\r\n         erc20.transfer(account, count);\r\n    }\r\n\r\n    function withdrawNft(address account, uint256 id) public onlyAdmin {\r\n        nft.safeTransferFrom(address(this), account, id);\r\n    }\r\n\r\n    function withdrawNft(address account) external onlyOwner {\r\n        uint256 nftBalance = nft.balanceOf(address(this));\r\n        require(nftBalance > 0, \"has no nft\");\r\n        nft.safeTransferFrom(\r\n            address(this),\r\n            account,\r\n            nft.tokenOfOwnerByIndex(address(this), 0)\r\n        );\r\n    }\r\n\r\n    function withdrawErc20Owner() external onlyOwner {\r\n        uint256 balance = erc20.balanceOf(address(this));\r\n        require(balance > 0);\r\n        erc20.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawNftOwner() external onlyOwner {\r\n        uint256 balance = nft.balanceOf(address(this));\r\n        require(balance > 0);\r\n        while (balance > 0) {\r\n            nft.safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                nft.tokenOfOwnerByIndex(address(this), 0)\r\n            );\r\n            --balance;\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return erc20Balances[account];\r\n    }\r\n\r\n    function withdrawEth() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"AddToJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newEnabled\",\"type\":\"bool\"}],\"name\":\"SetEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"change\",\"type\":\"int256\"}],\"internalType\":\"struct BalanceChange[]\",\"name\":\"changes\",\"type\":\"tuple[]\"}],\"name\":\"applyChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caasbank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"giveJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCaasbank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caasbankAddress\",\"type\":\"address\"}],\"name\":\"setCaasbank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"setErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"subBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"topUpBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"topUpJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20Admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawErc20Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"withdrawJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNftOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StiltonGamingPlatform", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b5f1457d6fba1956fb8d31b0b7caca14bde0be4b000000000000000000000000495f947276749ce646f68ac8c248420045cb7b5e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77d8dc46ab4f828434e1ce4d6736e4b94ad9836bf41688811707558208ca7571"}]}