{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/4_DelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ncontract DelegateRegistry {\\r\\n    \\r\\n    mapping (address => mapping (bytes32 => address)) public delegation;\\r\\n\\r\\n    event SetDelegate(address indexed delegator, bytes32 indexed id, address indexed delegate);\\r\\n    event ClearDelegate(address indexed delegator, bytes32 indexed id, address indexed delegate);\\r\\n    \\r\\n    function setDelegate(bytes32 id, address delegate) public {\\r\\n        require (delegate != msg.sender, \\\"Can't delegate to self\\\");\\r\\n        require (delegate != address(0), \\\"Can't delegate to 0x0\\\");\\r\\n        address currentDelegate = delegation[msg.sender][id];\\r\\n        require (delegate != currentDelegate, \\\"Already delegated to this address\\\");\\r\\n        \\r\\n        delegation[msg.sender][id] = delegate;\\r\\n        \\r\\n        if (currentDelegate != address(0)) {\\r\\n            emit ClearDelegate(msg.sender, id, currentDelegate);\\r\\n        }\\r\\n\\r\\n        emit SetDelegate(msg.sender, id, delegate);\\r\\n    }\\r\\n    \\r\\n    function clearDelegate(bytes32 id) public {\\r\\n        address currentDelegate = delegation[msg.sender][id];\\r\\n        require (currentDelegate != address(0), \\\"No delegate set\\\");\\r\\n        \\r\\n        delegation[msg.sender][id] = address(0);\\r\\n        \\r\\n        emit ClearDelegate(msg.sender, id, currentDelegate);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"ClearDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"SetDelegate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"clearDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DelegateRegistry", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}