{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface ILssController {\r\n    function beforeTransfer(address _sender, address _recipient, uint256 _amount) external;\r\n    function beforeTransferFrom(address _msgSender, address _sender, address _recipient, uint256 _amount) external;\r\n    function beforeApprove(address _sender, address _spender, uint256 _amount) external;\r\n    function beforeIncreaseAllowance(address _msgSender, address _spender, uint256 _addedValue) external;\r\n    function beforeDecreaseAllowance(address _msgSender, address _spender, uint256 _subtractedValue) external;\r\n    function beforeMint(address _to, uint256 _amount) external;\r\n    function beforeBurn(address _account, uint256 _amount) external;\r\n}\r\n\r\ninterface ILERC20 {\r\n    function name() external view returns (string memory);\r\n    function admin() external view returns (address);\r\n    function getAdmin() external view returns (address);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\r\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\r\n    \r\n    function transferOutBlacklistedFunds(address[] calldata _from) external;\r\n    function setLosslessAdmin(address _newAdmin) external;\r\n    function transferRecoveryAdminOwnership(address _candidate, bytes32 _keyHash) external;\r\n    function acceptRecoveryAdminOwnership(bytes memory _key) external;\r\n    function proposeLosslessTurnOff() external;\r\n    function executeLosslessTurnOff() external;\r\n    function executeLosslessTurnOn() external;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event NewAdmin(address indexed _newAdmin);\r\n    event NewRecoveryAdminProposal(address indexed _candidate);\r\n    event NewRecoveryAdmin(address indexed _newAdmin);\r\n    event LosslessTurnOffProposal(uint256 _turnOffDate);\r\n    event LosslessOff();\r\n    event LosslessOn();\r\n}\r\n\r\ncontract LERC20 is Context, ILERC20 {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address public recoveryAdmin;\r\n    address private recoveryAdminCandidate;\r\n    bytes32 private recoveryAdminKeyHash;\r\n    address public override admin;\r\n    uint256 public timelockPeriod;\r\n    uint256 public losslessTurnOffTimestamp;\r\n    bool public isLosslessOn = true;\r\n    ILssController public lossless;\r\n    mapping (address => bool) public confirmedBlacklist;\r\n\r\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\r\n        _mint(_msgSender(), totalSupply_);\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        admin = admin_;\r\n        recoveryAdmin = recoveryAdmin_;\r\n        recoveryAdminCandidate = address(0);\r\n        recoveryAdminKeyHash = \"\";\r\n        timelockPeriod = timelockPeriod_;\r\n        losslessTurnOffTimestamp = 0;\r\n        lossless = ILssController(lossless_);\r\n    }\r\n\r\n    // --- LOSSLESS modifiers ---\r\n\r\n    event ConfirmBlacklisted(address blacklisted);\r\n\r\n    modifier lssAprove(address spender, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeApprove(_msgSender(), spender, amount);\r\n        } \r\n        _;\r\n    }\r\n\r\n    modifier lssTransfer(address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n        } \r\n        _;\r\n    }\r\n\r\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyRecoveryAdmin() {\r\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_msgSender() == admin, \"LERC20: Must be admin\");\r\n        _;\r\n    }\r\n\r\n    modifier lssBurn(address account, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeBurn(account, amount);\r\n        } \r\n        _;\r\n    }\r\n\r\n    modifier lssMint(address account, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeMint(account, amount);\r\n        } \r\n        _;\r\n    }\r\n\r\n    // --- LOSSLESS management ---\r\n    function transferOutBlacklistedFunds(address[] calldata from) external override {\r\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\r\n\r\n        uint256 fromLength = from.length;\r\n        uint256 totalAmount = 0;\r\n        \r\n        for(uint256 i = 0; i < fromLength;) {\r\n            address fromAddress = from[i];\r\n            require(confirmedBlacklist[fromAddress], \"LERC20: Blacklist is not confirmed\");\r\n            uint256 fromBalance = _balances[fromAddress];\r\n            _balances[fromAddress] = 0;\r\n            totalAmount += fromBalance;\r\n            emit Transfer(fromAddress, address(lossless), fromBalance);\r\n            unchecked{i++;}\r\n        }\r\n\r\n        _balances[address(lossless)] += totalAmount;\r\n    }\r\n\r\n    function confirmBlacklist(address[] calldata blacklist) external onlyAdmin {\r\n        uint256 blacklistLenght = blacklist.length;\r\n        for(uint256 i = 0; i < blacklistLenght;) {\r\n            confirmedBlacklist[blacklist[i]] = true;\r\n            emit ConfirmBlacklisted(blacklist[i]);\r\n            unchecked{i++;}\r\n        }\r\n    }\r\n\r\n    function setLosslessAdmin(address newAdmin) external override onlyRecoveryAdmin {\r\n        require(newAdmin != admin, \"LERC20: Cannot set same address\");\r\n        emit NewAdmin(newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) override  external onlyRecoveryAdmin {\r\n        recoveryAdminCandidate = candidate;\r\n        recoveryAdminKeyHash = keyHash;\r\n        emit NewRecoveryAdminProposal(candidate);\r\n    }\r\n\r\n    function acceptRecoveryAdminOwnership(bytes memory key) external override {\r\n        require(_msgSender() == recoveryAdminCandidate, \"LERC20: Must be canditate\");\r\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\r\n        emit NewRecoveryAdmin(recoveryAdminCandidate);\r\n        recoveryAdmin = recoveryAdminCandidate;\r\n        recoveryAdminCandidate = address(0);\r\n    }\r\n\r\n    function proposeLosslessTurnOff() external override onlyRecoveryAdmin {\r\n        require(losslessTurnOffTimestamp == 0, \"LERC20: TurnOff already proposed\");\r\n        require(isLosslessOn, \"LERC20: Lossless already off\");\r\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n        emit LosslessTurnOffProposal(losslessTurnOffTimestamp);\r\n    }\r\n\r\n    function executeLosslessTurnOff() external override onlyRecoveryAdmin {\r\n        require(losslessTurnOffTimestamp != 0, \"LERC20: TurnOff not proposed\");\r\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\r\n        isLosslessOn = false;\r\n        losslessTurnOffTimestamp = 0;\r\n        emit LosslessOff();\r\n    }\r\n\r\n    function executeLosslessTurnOn() external override onlyRecoveryAdmin {\r\n        require(!isLosslessOn, \"LERC20: Lossless already on\");\r\n        losslessTurnOffTimestamp = 0;\r\n        isLosslessOn = true;\r\n        emit LosslessOn();\r\n    }\r\n\r\n    function getAdmin() public view virtual override returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    // --- ERC20 methods ---\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"LERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) override public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) override public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"LERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual lssBurn(_msgSender(), amount) {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual lssBurn(account, amount) {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"LERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public virtual lssMint(to, amount) {\r\n        require(_msgSender() == admin, \"LERC20: Must be admin\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"LERC20: mint to the zero address\");\r\n    \r\n        _totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked { \r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"LERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"LERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blacklisted\",\"type\":\"address\"}],\"name\":\"ConfirmBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"NewRecoveryAdminProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"}],\"name\":\"confirmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmedBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossless\",\"outputs\":[{\"internalType\":\"contract ILssController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LERC20", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000d93ebbc907ec5c6d782250063a0cccf02199e3d00000000000000000000000003c0a43c008272a760e6b38dcb6f8c1a6da2ade560000000000000000000000000000000000000000000000000000000000015180000000000000000000000000e91d7cebce484070fc70777cb04f7e2efae31db40000000000000000000000000000000000000000000000000000000000000004414354410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044143544100000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ba73ff7610fd6497ccc144190e3dd626e61390511d7c6351b5896e243010786"}]}