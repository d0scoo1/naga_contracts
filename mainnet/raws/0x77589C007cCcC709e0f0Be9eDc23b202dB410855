{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/AccessControlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./AllowListAccessControl.sol\\\";\\nimport \\\"../vaults/roles/Governable.sol\\\";\\nimport \\\"../interfaces/IAccessControlManager.sol\\\";\\nimport \\\"../interfaces/IBlockControlPolicy.sol\\\";\\n\\n/// @notice This contract will keep an registry for the access control policies that have been added, and check to see if any of them will allow a user to access to a particular vault.\\n///  A vault can either be a SingleAssetVault, or the staking contract.\\ncontract AccessControlManager is IAccessControlManager, Governable {\\n  /// @notice Emitted when a new policy is added\\n  event AccessControlPolicyAdded(address indexed _policy);\\n  /// @notice Emitted when a new policy is removed\\n  event AccessControlPolicyRemoved(address indexed _policy);\\n  /// @notice Emitted when a new policy is added\\n  event BlockControlPolicyAdded(address indexed _policy);\\n  /// @notice Emitted when a new policy is removed\\n  event BlockControlPolicyRemoved(address indexed _policy);\\n\\n  // Add the library methods\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  // internal registry for all the enabled policies\\n  EnumerableSet.AddressSet internal accessControlPolicies;\\n  EnumerableSet.AddressSet internal blockControlPolicies;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(\\n    address _governance,\\n    address[] memory _accessPolicies,\\n    address[] memory _blockPolicies\\n  ) Governable(_governance) {\\n    _addAccessControlPolicys(_accessPolicies);\\n    _addBlockControlPolicys(_blockPolicies);\\n  }\\n\\n  /// @notice Enable the given access control policies. Can only be set by the governance\\n  /// @param _policies The address of the access control policies\\n  function addAccessControlPolicies(address[] calldata _policies) external onlyGovernance {\\n    _addAccessControlPolicys(_policies);\\n  }\\n\\n  /// @notice Enable the given block control policies. Can only be set by the governance\\n  /// @param _policies The address of the block control policies\\n  function addBlockControlPolicies(address[] calldata _policies) external onlyGovernance {\\n    _addBlockControlPolicys(_policies);\\n  }\\n\\n  /// @notice Disable the given block control policies. Can only be set by the governance\\n  /// @param _policies The address of the block control policies\\n  function removeBlockControlPolicies(address[] calldata _policies) external onlyGovernance {\\n    _removeBlockControlPolicys(_policies);\\n  }\\n\\n  /// @notice Disable the given access control policies. Can only be set by the governance\\n  /// @param _policies The address of the access control policies\\n  function removeAccessControlPolicies(address[] calldata _policies) external onlyGovernance {\\n    _removeAccessControlPolicys(_policies);\\n  }\\n\\n  /// @notice Returns the current enabled access control policies\\n  /// @return the addresses of enabled access control policies\\n  function getAccessControlPolicies() external view returns (address[] memory) {\\n    return accessControlPolicies.values();\\n  }\\n\\n  /// @notice Returns the current enabled block control policies\\n  /// @return the addresses of enabled block control policies\\n  function getBlockControlPolicies() external view returns (address[] memory) {\\n    return blockControlPolicies.values();\\n  }\\n\\n  /// @notice Check if the given user has access to the given vault based on the current access control policies.\\n  /// @param _user the user address\\n  /// @param _vault the vault address. Can either be a SingleAssetVault or staking contract\\n  /// @return will return true if any of the current policies allows access\\n  function hasAccess(address _user, address _vault) external view returns (bool) {\\n    return _hasAccess(_user, _vault);\\n  }\\n\\n  // Had to use memory here instead of calldata as the function is\\n  // used in the constructor\\n  function _addAccessControlPolicys(address[] memory _policies) internal {\\n    for (uint256 i = 0; i < _policies.length; i++) {\\n      if (_policies[i] != address(0)) {\\n        bool added = accessControlPolicies.add(_policies[i]);\\n        if (added) {\\n          emit AccessControlPolicyAdded(_policies[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  // Had to use memory here instead of calldata as the function is\\n  // used in the constructor\\n  function _addBlockControlPolicys(address[] memory _policies) internal {\\n    for (uint256 i = 0; i < _policies.length; i++) {\\n      if (_policies[i] != address(0)) {\\n        bool added = blockControlPolicies.add(_policies[i]);\\n        if (added) {\\n          emit BlockControlPolicyAdded(_policies[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  function _removeAccessControlPolicys(address[] memory _policies) internal {\\n    for (uint256 i = 0; i < _policies.length; i++) {\\n      if (_policies[i] != address(0)) {\\n        bool removed = accessControlPolicies.remove(_policies[i]);\\n        if (removed) {\\n          emit AccessControlPolicyRemoved(_policies[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  function _removeBlockControlPolicys(address[] memory _policies) internal {\\n    for (uint256 i = 0; i < _policies.length; i++) {\\n      if (_policies[i] != address(0)) {\\n        bool removed = blockControlPolicies.remove(_policies[i]);\\n        if (removed) {\\n          emit BlockControlPolicyRemoved(_policies[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  function _hasAccess(address _user, address _vault) internal view returns (bool) {\\n    require(_user != address(0), \\\"invalid user address\\\");\\n    require(_vault != address(0), \\\"invalid vault address\\\");\\n    uint256 blockPoliciesLength = blockControlPolicies.length();\\n    uint256 accessPoliciesLength = accessControlPolicies.length();\\n    for (uint256 i = 0; i < blockPoliciesLength; i++) {\\n      bool blocked = IBlockControlPolicy(blockControlPolicies.at(i)).blockedAccess(_user, _vault);\\n      if (blocked) {\\n        return false;\\n      }\\n    }\\n\\n    // disable access if no policies are set\\n    if (accessPoliciesLength == 0) {\\n      return false;\\n    }\\n\\n    bool userHasAccess = false;\\n    for (uint256 i = 0; i < accessPoliciesLength; i++) {\\n      if (IAccessControlPolicy(accessControlPolicies.at(i)).hasAccess(_user, _vault)) {\\n        userHasAccess = true;\\n        break;\\n      }\\n    }\\n    return userHasAccess;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AllowListAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAccessControlPolicy.sol\\\";\\nimport \\\"../vaults/roles/Governable.sol\\\";\\nimport \\\"./PerVaultGatekeeper.sol\\\";\\n\\ncontract AllowlistAccessControl is IAccessControlPolicy, PerVaultGatekeeper {\\n  mapping(address => bool) public globalAccessMap;\\n  mapping(address => mapping(address => bool)) public vaultAccessMap;\\n\\n  event GlobalAccessGranted(address indexed _user);\\n  event GlobalAccessRemoved(address indexed _user);\\n  event VaultAccessGranted(address indexed _user, address indexed _vault);\\n  event VaultAccessRemoved(address indexed _user, address indexed _vault);\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _governance) PerVaultGatekeeper(_governance) {}\\n\\n  function allowGlobalAccess(address[] calldata _users) external onlyGovernance {\\n    _updateGlobalAccess(_users, true);\\n  }\\n\\n  function removeGlobalAccess(address[] calldata _users) external onlyGovernance {\\n    _updateGlobalAccess(_users, false);\\n  }\\n\\n  function allowVaultAccess(address[] calldata _users, address _vault) external {\\n    _onlyGovernanceOrGatekeeper(_vault);\\n    _updateAllowVaultAccess(_users, _vault, true);\\n  }\\n\\n  function removeVaultAccess(address[] calldata _users, address _vault) external {\\n    _onlyGovernanceOrGatekeeper(_vault);\\n    _updateAllowVaultAccess(_users, _vault, false);\\n  }\\n\\n  function _hasAccess(address _user, address _vault) internal view returns (bool) {\\n    require(_user != address(0), \\\"invalid user address\\\");\\n    require(_vault != address(0), \\\"invalid vault address\\\");\\n    return globalAccessMap[_user] || vaultAccessMap[_user][_vault];\\n  }\\n\\n  function hasAccess(address _user, address _vault) external view returns (bool) {\\n    return _hasAccess(_user, _vault);\\n  }\\n\\n  /// @dev updates the users global access\\n  function _updateGlobalAccess(address[] calldata _users, bool _permission) internal {\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      require(_users[i] != address(0), \\\"invalid address\\\");\\n      /// @dev only update mappign if permissions are changed\\n      if (globalAccessMap[_users[i]] != _permission) {\\n        globalAccessMap[_users[i]] = _permission;\\n        if (_permission) {\\n          emit GlobalAccessGranted(_users[i]);\\n        } else {\\n          emit GlobalAccessRemoved(_users[i]);\\n        }\\n      }\\n    }\\n  }\\n\\n  function _updateAllowVaultAccess(\\n    address[] calldata _users,\\n    address _vault,\\n    bool _permission\\n  ) internal {\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      require(_users[i] != address(0), \\\"invalid user address\\\");\\n      if (vaultAccessMap[_users[i]][_vault] != _permission) {\\n        vaultAccessMap[_users[i]][_vault] = _permission;\\n        if (_permission) {\\n          emit VaultAccessGranted(_users[i], _vault);\\n        } else {\\n          emit VaultAccessRemoved(_users[i], _vault);\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/roles/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ninterface IGovernable {\\n  function proposeGovernance(address _pendingGovernance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\\nabstract contract GovernableInternal {\\n  event GovenanceUpdated(address _govenance);\\n  event GovenanceProposed(address _pendingGovenance);\\n\\n  /// @dev This contract is used as part of the Vault contract and it is upgradeable.\\n  ///  which means any changes to the state variables could corrupt the data. Do not modify these at all.\\n  /// @notice the address of the current governance\\n  address public governance;\\n  /// @notice the address of the pending governance\\n  address public pendingGovernance;\\n\\n  /// @dev ensure msg.send is the governanace\\n  modifier onlyGovernance() {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev ensure msg.send is the pendingGovernance\\n  modifier onlyPendingGovernance() {\\n    require(_getMsgSender() == pendingGovernance, \\\"pending governance only\\\");\\n    _;\\n  }\\n\\n  /// @dev the deployer of the contract will be set as the initial governance\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init_unchained(address _governance) internal {\\n    require(_getMsgSender() != _governance, \\\"invalid address\\\");\\n    _updateGovernance(_governance);\\n  }\\n\\n  ///@notice propose a new governance of the vault. Only can be called by the existing governance.\\n  ///@param _pendingGovernance the address of the pending governance\\n  function proposeGovernance(address _pendingGovernance) external onlyGovernance {\\n    require(_pendingGovernance != address(0), \\\"invalid address\\\");\\n    require(_pendingGovernance != governance, \\\"already the governance\\\");\\n    pendingGovernance = _pendingGovernance;\\n    emit GovenanceProposed(_pendingGovernance);\\n  }\\n\\n  ///@notice accept the proposal to be the governance of the vault. Only can be called by the pending governance.\\n  function acceptGovernance() external onlyPendingGovernance {\\n    _updateGovernance(pendingGovernance);\\n  }\\n\\n  function _updateGovernance(address _pendingGovernance) internal {\\n    governance = _pendingGovernance;\\n    emit GovenanceUpdated(governance);\\n  }\\n\\n  /// @dev provides an internal function to allow reduce the contract size\\n  function _onlyGovernance() internal view {\\n    require(_getMsgSender() == governance, \\\"governance only\\\");\\n  }\\n\\n  function _getMsgSender() internal view virtual returns (address);\\n}\\n\\n/// @dev Add a `governance` and a `pendingGovernance` role to the contract, and implements a 2-phased nominatiom process to change the governance.\\n///   Also provides a modifier to allow controlling access to functions of the contract.\\ncontract Governable is Context, GovernableInternal {\\n  constructor(address _governance) GovernableInternal() {\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\\n/// @dev ungradeable version of the {Governable} contract. Can be used as part of an upgradeable contract.\\nabstract contract GovernableUpgradeable is ContextUpgradeable, GovernableInternal {\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() {}\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __Governable_init(address _governance) internal {\\n    __Context_init();\\n    __Governable_init_unchained(_governance);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _getMsgSender() internal view override returns (address) {\\n    return _msgSender();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControlManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IAccessControlManager {\\n  function hasAccess(address _user, address _vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBlockControlPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IBlockControlPolicy {\\n  function blockedAccess(address _user, address _vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControlPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IAccessControlPolicy {\\n  function hasAccess(address _user, address _vault) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/access/PerVaultGatekeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/roles/IGatekeeperable.sol\\\";\\nimport \\\"../vaults/roles/Governable.sol\\\";\\n\\ncontract PerVaultGatekeeper is Governable {\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _governance) Governable(_governance) {}\\n\\n  /// @dev works with any contract that implements the IGatekeeperable interface.\\n  function _onlyGovernanceOrGatekeeper(address _pool) internal view {\\n    require(_pool != address(0), \\\"!address\\\");\\n    address gatekeeper = IGatekeeperable(_pool).gatekeeper();\\n    require(_msgSender() == governance || (gatekeeper != address(0) && _msgSender() == gatekeeper), \\\"not authorised\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/roles/IGatekeeperable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\ninterface IGatekeeperable {\\n  function gatekeeper() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accessPolicies\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_blockPolicies\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"AccessControlPolicyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"AccessControlPolicyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"BlockControlPolicyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"BlockControlPolicyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovenance\",\"type\":\"address\"}],\"name\":\"GovenanceProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_govenance\",\"type\":\"address\"}],\"name\":\"GovenanceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_policies\",\"type\":\"address[]\"}],\"name\":\"addAccessControlPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_policies\",\"type\":\"address[]\"}],\"name\":\"addBlockControlPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessControlPolicies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockControlPolicies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"proposeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_policies\",\"type\":\"address[]\"}],\"name\":\"removeAccessControlPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_policies\",\"type\":\"address[]\"}],\"name\":\"removeBlockControlPolicies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccessControlManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000457a60065050050b3e64fcd96cfb973123d38338000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d8adef24771c6637ae05631f826f80ff23d418db00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008360896a7da16dd052465e911528121b065a5b4e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}