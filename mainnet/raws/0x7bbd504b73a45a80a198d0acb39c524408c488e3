{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                                                                         //\r\n//                                                                                                                                                         //\r\n//       .;dkkkkkkkkkkkkkkkkkkd'      .:xkkkkkkkkd,           .:dk0XXXXXXXK0xdl,.    .lxkkkkkkkkkkkkkkkkkk:.,okkkkkkko.    .cxkkkkkkxc.      ;dkkkkkko.    //\r\n//      ;xNMMMMMMMMMMMMMMMMMMMX:    .:kNWMMMMMMMMWx.        .l0NWWWWWMMMMMMMMMWNO;..lKWMMMMMMMMMMMMMMMMMMMKkKWMMMMMMMK,  .c0WMMMMMMMMX:   .;xXWMMMMMNo.    //\r\n//    .,lddddddddddddddddxKMMMK;   .,lddddddx0WMMMX;      .;llc::;;::cox0XWMMMMMWXdcoddddddddddddddddONMW0ddddddxXMMMK, .:odddddONMMMMO' .,lddddd0WWd.     //\r\n//    ..                 .dWWKl.   .         :XMMMWx.    ...            .,oKWMMMMWx.                 ,KMNc      .kMMM0, ..      .xWMMMWx'.      'kNk.      //\r\n//    ..                 .dKo'    ..         .xWMMMK;  ..       .'..       ,OWWMMWx.                 ,Okc'      .kMMMK,  ..      ,0MMMMXl.     .dNO'       //\r\n//    ..      .:ooo;......,'      .           :XMMMWd. .      .l0XXOc.      ;xKMWNo.      ,looc'......'...      .kMMMK,   ..      cXMMM0,     .oNK;        //\r\n//    ..      '0MMMk.            ..           .kWMMMK,.'      ;KMMMWNo.     .;kNkc,.     .dWMMK:        ..      .kMMMK,    ..     .dWMXc      cXK:         //\r\n//    ..      '0MMMXkxxxxxxxxd'  .     .:.     cXMMMWd,'      '0MMMMM0l;;;;;;:c;. ..     .dWMMW0xxxxxxxxx;      .kMMMK,     ..     'ONd.     :KXc          //\r\n//    ..      '0MMMMMMMMMMMMMNc ..     :O:     .kMMMMK:.       'd0NWMWWWWWWWNXOl'...     .dWMMMMMMMMMMMMWl      .kMMMK,      .      :d'     ;0No.          //\r\n//    ..      .lkkkkkkkkkKWMMNc .     .dNd.     cNMMMWo..        .':dOXWMMMMMMMWXk:.      :xkkkkkkkk0NMMWl      .kMMMK,       .      .     'ONd.           //\r\n//    ..                .oNMXd...     '0M0'     .kMMMM0, ..           .;o0NMMMMMMWx.                ,0MN0:      .kMMMK,       ..          .kW0'            //\r\n//    ..                 cKk,  .      lNMNl      cNMMMNo  .',..          .;xXWMMMWx.                'O0c'.      .kMMMK,        ..        .xWMO.            //\r\n//    ..      .,ccc,.....,,.  ..     .kMMMk.     .OMMMW0;'d0XX0xc,.         :d0MMWx.      ':cc:'....';. ..      .kMMMK,         ..      .oNMMO.            //\r\n//    ..      '0MMMk.         ..     ,kKKKk'      lNMMMN0KWWWMMMWNKl.         cXMWx.     .dWMMX:        ..      .kMMMK,         ..      .OMMMO.            //\r\n//    ..      '0MMMk'..........       .....       'OMMKo:::::cxNMMMKl'.       .OMWx.     .dWMMXc..........      .kMMMK:.........,'      .OMMMO.            //\r\n//    ..      '0MMMNXKKKKKKKKd.                    lNM0'      ;XMMMWN0c       .OMWd.     .dWMMWXKKKKKKKK0c      .kMMMWXKKKKKKKKK0:      .OMMMO.            //\r\n//    ..      'OWWWWWWWWWWMMNc      'llc'   .      '0MNc      .kWMMMMX:       ,KXx:.     .oNWWWWWWWWWWMMWl      .xWWWWWWWWWWWMMMN:      .OMMMO.            //\r\n//    ..       ,:::::::::cOWO.     .xWWO'   .       oNMO'      .lkOOx;.     .'cd,...      .::::::::::dXMWl       '::::::::::xWMMX:      .OMMWx.            //\r\n//    ..                  dNl      ,0Xd.    ..      ,0MNo.        .        ..'.   ..                 ,0WK:                  :NWOo,      .OWKo.             //\r\n//    .'                 .oO,     .co,       ..     .oOc....             ...      ..                 ,xo,..                 ckl..'.     'dd'               //\r\n//     .............................         ..........       .   ..   .          .....................  .....................   .........                 //\r\n//                                                                                                                                                         //\r\n//                                                                                                                                                         //\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * The contracts below implement a lazy-minted, randomized collection of ERC721A.\r\n * It requires that the creator knows the total number of NFTs they want and all belong to a token\r\n * directory, commonly will be an IPFS hash, with all the metadata from 0 to the #NFTs - 1.\r\n *\r\n * It has two main methods to lazy-mint:\r\n * One allows the owner or alternate signer to approve single-use signatures for specific wallet addresses\r\n * The other allows a general mint, multi-use signature that anyone can use.\r\n *\r\n * Minting from this collection is always random, this can be done with either a reveal mechanism that\r\n * has an optional random offset, or on-chain randomness for revealed collections, or a mix of both!\r\n *\r\n * Only with a reveal mechanism, does the price of minting utilize ERC721A improvements.\r\n */\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n *\r\n * This ERC721A is set up to better handle batch transactions. It has two layers of optimization:\r\n *\r\n * First, it assumes tokens are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..)\r\n * which allows for up to 5 times cheaper MINT gas fees, but does increase first time TRANSFER gas fees.\r\n * Because of this, methods have also been optimized to only call ownerOf() once as it is not a direct lookup.\r\n *\r\n * Second, it allows a permanent switch to non-sequential mint with still reduced fees because the {_mint}\r\n * only updates {_owners} and not {_balances} so that a batch mint method can update _balances a single time.\r\n *\r\n * Additionally assumes that an owner cannot have more than 2**128 - 1 (max value of uint128) of supply.\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    // Token name\r\n    string internal _name;\r\n\r\n    // Token symbol\r\n    string internal _symbol;\r\n\r\n    // Tracking total minted\r\n    // Only used when `_isSequential` is false\r\n    uint256 internal _totalMinted;\r\n\r\n    // Tracking total burned\r\n    uint256 internal _totalBurned;\r\n\r\n    // Tracking the next sequential mint\r\n    uint256 internal _nextSequential;\r\n\r\n    // This ensures that ownerOf() can still run in constant time with a max runtime\r\n    // of checking 5 values, but is up to 5 times cheaper on batch mints.\r\n    uint256 internal constant SEQ_MINT_LIMIT = 5;\r\n\r\n    // Tracking if the collection is still sequentially minted\r\n    bool internal _notSequentialMint;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) internal _owners;\r\n\r\n    // Mapping from token ID to burned\r\n    // This is necessary because to optimize gas fees for multiple mints a token with\r\n    // `_owners[tokenId] = address(0)` is not necessarily a token with no owner.\r\n    mapping(uint256 => bool) internal _burned;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => AddressData) internal _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721: balance query for the zero address\"\r\n        );\r\n        return _balances[owner].balance;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: owner query for nonexistent token\");\r\n\r\n        if (_owners[tokenId] != address(0)) {\r\n            return _owners[tokenId];\r\n        }\r\n\r\n        if (tokenId < _nextSequential) {\r\n            uint256 lowestTokenToCheck;\r\n            if (tokenId >= SEQ_MINT_LIMIT) {\r\n                lowestTokenToCheck = tokenId - SEQ_MINT_LIMIT + 1;\r\n            }\r\n            for (uint256 i = tokenId - 1; i >= lowestTokenToCheck; i--) {\r\n                if (_owners[i] != address(0)) {\r\n                    return _owners[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total current supply of the contract.\r\n     *\r\n     * WARNING - Underlying variables do NOT get automatically updated on mints\r\n     * so that we can save gas on transactions that mint multiple tokens.\r\n     *\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return totalMinted() - _totalBurned;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total ever minted from this contract.\r\n     *\r\n     * WARNING - Underlying variable do NOT get automatically updated on mints\r\n     * so that we can save gas on transactions that mint multiple tokens.\r\n     *\r\n     */\r\n    function totalMinted() public view virtual returns (uint256) {\r\n        if (_notSequentialMint) {\r\n            return _totalMinted;\r\n        }\r\n\r\n        return _nextSequential;\r\n    }\r\n\r\n    /**\r\n     * @dev returns how many tokens the given address has minted.\r\n     */\r\n    function mintCount(address addr) external view returns (uint256) {\r\n        return _balances[addr].numberMinted;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId, owner),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        require(owner == from, \"ERC721: transfer of token that is not own\");\r\n        _transferIgnoreOwner(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * This was modified to not call _safeTransfer because that would require fetching\r\n     * ownerOf() twice which is more expensive than doing it together.\r\n     *\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId, owner),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        require(owner == from, \"ERC721: transfer of token that is not own\");\r\n        _safeTransferIgnoreOwner(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev This is for functions which already get the owner of the tokenId and can do the check\r\n     * for `ownerOf(tokenId) == from` because ownerOf() in 721A is potentially an expensive function\r\n     * and should not be called twice if not needed\r\n     *\r\n     * WARNING this method does not check for tokenOwner. This is done because with the\r\n     * gas optimization calling ownerOf can be an expensive calculation and should only be done once (in the outer most layer)\r\n     */\r\n    function _safeTransferIgnoreOwner(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transferIgnoreOwner(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        if (_burned[tokenId]) {\r\n            return false;\r\n        }\r\n\r\n        if (tokenId < _nextSequential) {\r\n            return true;\r\n        }\r\n\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `sender` is allowed to manage `tokenId`.\r\n     * This is for functions which already get the owner of the tokenId because ownerOf() in\r\n     * 721A is potentially an expensive function and should not be called twice if not needed\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(\r\n        address sender,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) internal view virtual returns (bool) {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721: operator query for nonexistent token\"\r\n        );\r\n        return (sender == owner ||\r\n            getApproved(tokenId) == sender ||\r\n            isApprovedForAll(owner, sender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING - this method does not update totalSupply or _balances, please update that externally. Doing so\r\n     * will allow us to save gas on batch transactions\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     *\r\n     * WARNING: This method does not update totalSupply, please update that externally. Doing so\r\n     * will allow us to save gas on batch transactions\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     * WARNING: This method does not update totalSupply or _balances, please update that externally. Doing so\r\n     * will allow us to save gas on transactions that mint more than one NFT\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(_notSequentialMint, \"_notSequentialMint must be true\");\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    // Sequential mint doesn't match _beforeTokenTransfer and instead has a different optional override.\r\n    function _beforeSequentialMint(\r\n        address to,\r\n        uint256 starting,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Mints from `_nextSequential` to `_nextSequential + quantity` and transfers it to `to`.\r\n     *\r\n     * WARNING: This method does not update totalSupply or _balances, please update that externally. Doing so\r\n     * will allow us to save gas on transactions that mint more than one NFT\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMintSequential(address to, uint256 quantity)\r\n        internal\r\n        virtual\r\n    {\r\n        require(!_notSequentialMint, \"_notSequentialMint must be false\");\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n\r\n        _beforeSequentialMint(to, _nextSequential, quantity);\r\n\r\n        uint256 lastNum = _nextSequential + quantity;\r\n        // ensures ownerOf runs quickly even if user is minting a large number like 100\r\n        for (uint256 i = _nextSequential; i < lastNum; i += SEQ_MINT_LIMIT) {\r\n            _owners[i] = to;\r\n        }\r\n\r\n        // Gas is cheaper to have two separate for loops\r\n        for (uint256 i = _nextSequential; i < lastNum; i++) {\r\n            require(\r\n                _checkOnERC721Received(address(0), to, i, \"\"),\r\n                \"ERC721: transfer to non ERC721Receiver implementer\"\r\n            );\r\n            emit Transfer(address(0), to, i);\r\n        }\r\n\r\n        _balances[to] = AddressData(\r\n            _balances[to].balance + uint128(quantity),\r\n            _balances[to].numberMinted + uint128(quantity)\r\n        );\r\n        _nextSequential = lastNum;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned. Since owners[tokenId] can be\r\n     * the zero address for batch mints, this has been changed to modify _burned mapping instead\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId, owner),\r\n            \"Caller is not owner nor approved\"\r\n        );\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId, owner);\r\n\r\n        _balances[owner].balance -= 1;\r\n        _totalBurned += 1;\r\n        _burned[tokenId] = true;\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        _transferIgnoreOwner(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev This is for functions which already get the owner of the tokenId and can do the check\r\n     * for `ownerOf(tokenId) == from` because ownerOf() in 721A is potentially an expensive function\r\n     * and should not be called twice if not needed\r\n     *\r\n     * WARNING this method does not check for tokenOwner. This is done because with the\r\n     * gas optimization calling ownerOf can be an expensive calculation and should only be done once (in the outer most layer)\r\n     */\r\n    function _transferIgnoreOwner(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        _balances[from].balance -= 1;\r\n        _balances[to].balance += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (nextTokenId < _nextSequential) {\r\n            if (_owners[nextTokenId] == address(0)) {\r\n                _owners[nextTokenId] = from;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) internal virtual {\r\n        if (_tokenApprovals[tokenId] != to) {\r\n            _tokenApprovals[tokenId] = to;\r\n            emit Approval(owner, to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature)\r\n        internal\r\n        pure\r\n        returns (address, RecoverError)\r\n    {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(\r\n                vs,\r\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\r\n            )\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (\r\n            uint256(s) >\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\r\n        ) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n            );\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * ERC165 bytes to add to interface array - set in parent contract\r\n     * implementing this standard\r\n     *\r\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n     * _registerInterface(_INTERFACE_ID_ERC2981);\r\n     */\r\n\r\n    /**\r\n     * @notice Called with the sale price to determine how much royalty\r\n     *          is owed and to whom.\r\n     * @param _tokenId - the NFT asset queried for royalty information\r\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for _salePrice\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n/**\r\n * @dev External interface of the EaselyPayout contract\r\n */\r\ninterface IEaselyPayout {\r\n    /**\r\n     * @dev Takes in a payable amount and splits it among the given royalties.\r\n     * Also takes a cut of the payable amount depending on the sender and the primaryPayout address.\r\n     * Ensures that this method never splits over 100% of the payin amount.\r\n     */\r\n    function splitPayable(\r\n        address primaryPayout,\r\n        address[] memory royalties,\r\n        uint256[] memory bps\r\n    ) external payable;\r\n}\r\n\r\n/**\r\n * @dev Extension of the ERC721 contract that integrates a marketplace so that simple lazy-sales\r\n * do not have to be done on another contract. This saves gas fees on secondary sales because\r\n * buyers will not have to pay a gas fee to setApprovalForAll for another marketplace contract after buying.\r\n *\r\n * Easely will help power the lazy-selling as well as lazy minting that take place on\r\n * directly on the collection, which is why we take a cut of these transactions. Our cut can\r\n * be publically seen in the connected EaselyPayout contract and cannot exceed 5%.\r\n *\r\n * Owners also set a dual signer which they can change at any time. This dual signer helps enable\r\n * sales for large batches of addresses without needing to manually sign hundreds or thousands of hashes.\r\n * It also makes phishing scams harder as both signatures need to be compromised before an unwanted sale can occur.\r\n *\r\n * Owner also has an option to allow token owners to loan their tokens to other users which makes the token\r\n * untradeable until the original owner reclaims the token.\r\n */\r\nabstract contract ERC721Marketplace is ERC721A, Ownable {\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    // Allows token owners to loan tokens to other addresses.\r\n    bool public loaningActive;\r\n\r\n    /* see {IEaselyPayout} for more */\r\n    address public constant PAYOUT_CONTRACT_ADDRESS =\r\n        0xa95850bB73459ADB9587A97F103a4A7CCe59B56E;\r\n    uint256 private constant TIME_PER_DECREMENT = 300;\r\n\r\n    /* Basis points or BPS are 1/100th of a percent, so 10000 basis points accounts for 100% */\r\n    uint256 public constant BPS_TOTAL = 10000;\r\n    /* Max basis points for the owner for secondary sales of this collection */\r\n    uint256 public constant MAX_SECONDARY_BPS = 1000;\r\n    /* Default payout percent if there is no signature set */\r\n    uint256 private constant DEFAULT_PAYOUT_BPS = 500;\r\n    /* Signer for initializing splits to ensure splits were agreed upon by both parties */\r\n    address private constant VERIFIED_CONTRACT_SIGNER =\r\n        0x1BAAd9BFa20Eb279d2E3f3e859e3ae9ddE666c52;\r\n\r\n    /*\r\n     * Optional addresses to distribute referral commission for this collection\r\n     *\r\n     * Referral commission is taken from easely's cut\r\n     */\r\n    address public referralAddress;\r\n    /*\r\n     * Optional addresses to distribute partnership comission for this collection\r\n     *\r\n     * Partnership commission is taken in addition to easely's cut\r\n     */\r\n    address public partnershipAddress;\r\n    /* Optional addresses to distribute revenue of primary sales of this collection */\r\n    address public revenueShareAddress;\r\n\r\n    /* Enables dual address signatures to lazy mint */\r\n    address public dualSignerAddress;\r\n\r\n    struct WithdrawSplits {\r\n        /* Optional basis points for the owner for secondary sales of this collection */\r\n        uint64 ownerRoyaltyBPS;\r\n        /* Basis points for easely's payout contract */\r\n        uint64 payoutBPS;\r\n        /* Optional basis points for revenue sharing the owner wants to set up */\r\n        uint64 revenueShareBPS;\r\n        /*\r\n         * Optional basis points for collections that have been referred.\r\n         *\r\n         * Contracts with this will have a reduced easely's payout cut so that\r\n         * the creator's cut is unaffected\r\n         */\r\n        uint32 referralBPS;\r\n        /*\r\n         * Optional basis points for collections that require partnerships\r\n         *\r\n         * Contracts with this will have this fee on top of easely's payout cut because the partnership\r\n         * will offer advanced web3 integration of this contract in some form beyond what easely provides.\r\n         */\r\n        uint32 partnershipBPS;\r\n    }\r\n\r\n    WithdrawSplits public splits;\r\n\r\n    mapping(uint256 => address) internal _tokenOwnersOnLoan;\r\n    /* Mapping to the active version for all signed transactions */\r\n    mapping(address => uint256) internal _addressToActiveVersion;\r\n    /* Cancelled or finalized sales by hash to determine buyabliity */\r\n    mapping(bytes32 => bool) internal _cancelledOrFinalizedSales;\r\n\r\n    // Events related to lazy selling\r\n    event SaleCancelled(address indexed seller, bytes32 hash);\r\n    event SaleCompleted(\r\n        address indexed seller,\r\n        address indexed buyer,\r\n        uint256 indexed tokenId,\r\n        uint256 price,\r\n        bytes32 hash\r\n    );\r\n\r\n    // Events related to loaning\r\n    event LoaningActive(bool active);\r\n    event Loan(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event LoanRetrieved(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    // Miscellaneous events\r\n    event VersionChanged(address indexed seller, uint256 version);\r\n    event DualSignerChanged(address newSigner);\r\n    event BalanceWithdrawn(uint256 balance);\r\n    event RoyaltyUpdated(uint256 bps);\r\n    event WithdrawSplitsSet(\r\n        address indexed revenueShareAddress,\r\n        address indexed referralAddress,\r\n        address indexed partnershipAddress,\r\n        uint256 payoutBPS,\r\n        uint256 revenueShareBPS,\r\n        uint256 referralBPS,\r\n        uint256 partnershipBPS\r\n    );\r\n\r\n    /**\r\n     * @dev initializes all of the addresses and percentage of withdrawn funds that\r\n     * each address will get. These addresses and BPS splits must be signed by both the\r\n     * verified easely wallet and the creator of the contract. If a signature is missing\r\n     * the contract has a default of 5% to the easely payout wallet.\r\n     */\r\n    function _initWithdrawSplits(\r\n        address creator_,\r\n        address revenueShareAddress_,\r\n        address referralAddress_,\r\n        address partnershipAddress_,\r\n        uint256 payoutBPS_,\r\n        uint256 ownerRoyaltyBPS_,\r\n        uint256 revenueShareBPS_,\r\n        uint256 referralBPS_,\r\n        uint256 partnershipBPS_,\r\n        bytes[2] memory signatures\r\n    ) internal virtual {\r\n        revenueShareAddress = revenueShareAddress_;\r\n        require(\r\n            ownerRoyaltyBPS_ <= MAX_SECONDARY_BPS,\r\n            \"Cannot take more than 10% of secondaries\"\r\n        );\r\n        if (signatures[1].length == 0) {\r\n            require(\r\n                DEFAULT_PAYOUT_BPS + revenueShareBPS_ <= BPS_TOTAL,\r\n                \"BPS splits too high\"\r\n            );\r\n            splits = WithdrawSplits(\r\n                uint64(ownerRoyaltyBPS_),\r\n                uint64(DEFAULT_PAYOUT_BPS),\r\n                uint64(revenueShareBPS_),\r\n                uint32(0),\r\n                uint32(0)\r\n            );\r\n            emit WithdrawSplitsSet(\r\n                revenueShareAddress_,\r\n                address(0),\r\n                address(0),\r\n                DEFAULT_PAYOUT_BPS,\r\n                revenueShareBPS_,\r\n                0,\r\n                0\r\n            );\r\n        } else {\r\n            require(\r\n                payoutBPS_ +\r\n                    referralBPS_ +\r\n                    partnershipBPS_ +\r\n                    revenueShareBPS_ <=\r\n                    BPS_TOTAL,\r\n                \"BPS splits too high\"\r\n            );\r\n            bytes memory encoded = abi.encode(\r\n                \"InitializeSplits\",\r\n                creator_,\r\n                revenueShareAddress_,\r\n                referralAddress_,\r\n                partnershipAddress_,\r\n                payoutBPS_,\r\n                revenueShareBPS_,\r\n                referralBPS_,\r\n                partnershipBPS_\r\n            );\r\n            bytes32 hash = ECDSA.toEthSignedMessageHash(keccak256(encoded));\r\n            require(\r\n                hash.recover(signatures[0]) == creator_,\r\n                \"Not signed by creator\"\r\n            );\r\n            require(\r\n                hash.recover(signatures[1]) == VERIFIED_CONTRACT_SIGNER,\r\n                \"Not signed by verified address\"\r\n            );\r\n            referralAddress = referralAddress_;\r\n            partnershipAddress = partnershipAddress_;\r\n            splits = WithdrawSplits(\r\n                uint64(ownerRoyaltyBPS_),\r\n                uint64(payoutBPS_),\r\n                uint64(revenueShareBPS_),\r\n                uint32(referralBPS_),\r\n                uint32(partnershipBPS_)\r\n            );\r\n            emit WithdrawSplitsSet(\r\n                revenueShareAddress_,\r\n                referralAddress_,\r\n                partnershipAddress_,\r\n                payoutBPS_,\r\n                revenueShareBPS_,\r\n                referralBPS_,\r\n                partnershipBPS_\r\n            );\r\n        }\r\n        emit RoyaltyUpdated(ownerRoyaltyBPS_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(Ownable).interfaceId ||\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev see {IERC2981-supportsInterface}\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        uint256 royalty = (_salePrice * splits.ownerRoyaltyBPS) / BPS_TOTAL;\r\n        return (owner(), royalty);\r\n    }\r\n\r\n    /**\r\n     * @dev See {_currentPrice}\r\n     */\r\n    function getCurrentPrice(uint256[4] memory pricesAndTimestamps)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currentPrice(pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current activeVersion of an address both used to create signatures\r\n     * and to verify signatures of {buyToken} and {buyNewToken}\r\n     */\r\n    function getActiveVersion(address address_)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _addressToActiveVersion[address_];\r\n    }\r\n\r\n    /**\r\n     * This function, while callable by anybody will always ONLY withdraw the\r\n     * contract's balance to:\r\n     *\r\n     * the owner's account\r\n     * the addresses the owner has set up for revenue share\r\n     * the easely payout contract cut - capped at 5% but can be lower for some users\r\n     *\r\n     * This is callable by anybody so that Easely can set up automatic payouts\r\n     * after a contract has reached a certain minimum to save creators the gas fees\r\n     * involved in withdrawing balances.\r\n     */\r\n    function withdrawBalance(uint256 withdrawAmount) external {\r\n        if (withdrawAmount > address(this).balance) {\r\n            withdrawAmount = address(this).balance;\r\n        }\r\n\r\n        uint256 payoutBasis = withdrawAmount / BPS_TOTAL;\r\n        if (splits.revenueShareBPS > 0) {\r\n            payable(revenueShareAddress).transfer(\r\n                payoutBasis * splits.revenueShareBPS\r\n            );\r\n        }\r\n        if (splits.referralBPS > 0) {\r\n            payable(referralAddress).transfer(payoutBasis * splits.referralBPS);\r\n        }\r\n        if (splits.partnershipBPS > 0) {\r\n            payable(partnershipAddress).transfer(\r\n                payoutBasis * splits.partnershipBPS\r\n            );\r\n        }\r\n        payable(PAYOUT_CONTRACT_ADDRESS).transfer(\r\n            payoutBasis * splits.payoutBPS\r\n        );\r\n\r\n        uint256 remainingAmount = withdrawAmount -\r\n            payoutBasis *\r\n            (splits.revenueShareBPS +\r\n                splits.partnershipBPS +\r\n                splits.referralBPS +\r\n                splits.payoutBPS);\r\n        payable(owner()).transfer(remainingAmount);\r\n        emit BalanceWithdrawn(withdrawAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to change who the dual signer is\r\n     */\r\n    function setDualSigner(address alt) external onlyOwner {\r\n        dualSignerAddress = alt;\r\n        emit DualSignerChanged(alt);\r\n    }\r\n\r\n    /**\r\n     * @dev see {_setSecondary}\r\n     */\r\n    function setRoyaltiesBPS(uint256 newBPS) external onlyOwner {\r\n        require(\r\n            newBPS <= MAX_SECONDARY_BPS,\r\n            \"Cannot take more than 10% of secondaries\"\r\n        );\r\n        splits.ownerRoyaltyBPS = uint64(newBPS);\r\n        emit RoyaltyUpdated(newBPS);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by any user to update the version that they want their signatures to check. This is helpful if\r\n     * an address wants to mass invalidate their signatures without having to call cancelSale on each one.\r\n     */\r\n    function updateVersion(uint256 version) external {\r\n        _addressToActiveVersion[_msgSender()] = version;\r\n        emit VersionChanged(_msgSender(), version);\r\n    }\r\n\r\n    /**\r\n     * @dev To be updated by contract owner to allow for the loan functionality to be toggled\r\n     */\r\n    function setLoaningActive(bool _loaningActive) public onlyOwner {\r\n        loaningActive = _loaningActive;\r\n        emit LoaningActive(_loaningActive);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns who is loaning the given tokenId\r\n     */\r\n    function tokenOwnerOnLoan(uint256 tokenId) external view returns (address) {\r\n        require(_exists(tokenId), \"This token does not exist\");\r\n        return _tokenOwnersOnLoan[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @notice Allow owner to loan their tokens to other addresses\r\n     */\r\n    function loan(uint256 tokenId, address receiver) external {\r\n        address msgSender = msg.sender;\r\n        require(loaningActive, \"Loans not active\");\r\n\r\n        // Transfer the token\r\n        // _safeTransfer checks that msgSender is the tokenOwner\r\n        _safeTransfer(msgSender, receiver, tokenId, \"\");\r\n\r\n        // Add it to the mapping of originally loaned tokens\r\n        _tokenOwnersOnLoan[tokenId] = msgSender;\r\n\r\n        emit Loan(msgSender, receiver, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow owner to loan their tokens to other addresses\r\n     */\r\n    function retrieveLoan(uint256 tokenId) external {\r\n        address borrowerAddress = ownerOf(tokenId);\r\n        address msgSender = msg.sender;\r\n        require(\r\n            _tokenOwnersOnLoan[tokenId] == msgSender,\r\n            \"Sender is not the token loaner\"\r\n        );\r\n\r\n        // Remove it from the array of loaned out tokens\r\n        delete _tokenOwnersOnLoan[tokenId];\r\n\r\n        // Transfer the token back\r\n        _safeTransfer(borrowerAddress, msgSender, tokenId, \"\");\r\n\r\n        emit LoanRetrieved(borrowerAddress, msgSender, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get ownerRoyalties into an array form\r\n     */\r\n    function _ownerRoyalties() internal view returns (address[] memory) {\r\n        address[] memory ownerRoyalties = new address[](1);\r\n        ownerRoyalties[0] = owner();\r\n        return ownerRoyalties;\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get secondary BPS into array form\r\n     */\r\n    function _ownerBPS() internal view returns (uint256[] memory) {\r\n        uint256[] memory ownerBPS = new uint256[](1);\r\n        ownerBPS[0] = splits.ownerRoyaltyBPS;\r\n        return ownerBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * makes sure tokens on loan can't be transferred\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721A) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(\r\n            _tokenOwnersOnLoan[tokenId] == address(0),\r\n            \"Cannot transfer token on loan\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is either the owner, or the approved alternate signer.\r\n     */\r\n    function _checkValidSigner(address signer) internal view {\r\n        require(\r\n            signer == owner() || signer == dualSignerAddress,\r\n            \"Not valid signer.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    address(this),\r\n                    block.chainid,\r\n                    owner,\r\n                    version,\r\n                    nonce,\r\n                    tokenId,\r\n                    pricesAndTimestamps\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashToCheckForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            ECDSA.toEthSignedMessageHash(\r\n                _hashForSale(\r\n                    owner,\r\n                    version,\r\n                    nonce,\r\n                    tokenId,\r\n                    pricesAndTimestamps\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Current price for a sale which is calculated for the case of a descending sale. So\r\n     * the ending price must be less than the starting price and the timestamp is active.\r\n     * Standard single fare sales will have a matching starting and ending price.\r\n     */\r\n    function _currentPrice(uint256[4] memory pricesAndTimestamps)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 startingPrice = pricesAndTimestamps[0];\r\n        uint256 endingPrice = pricesAndTimestamps[1];\r\n        uint256 startingTimestamp = pricesAndTimestamps[2];\r\n        uint256 endingTimestamp = pricesAndTimestamps[3];\r\n\r\n        uint256 currTime = block.timestamp;\r\n        require(currTime >= startingTimestamp, \"Has not started yet\");\r\n        require(\r\n            startingTimestamp < endingTimestamp,\r\n            \"Must end after it starts\"\r\n        );\r\n        require(startingPrice >= endingPrice, \"Ending price cannot be bigger\");\r\n\r\n        if (startingPrice == endingPrice || currTime > endingTimestamp) {\r\n            return endingPrice;\r\n        }\r\n\r\n        uint256 diff = startingPrice - endingPrice;\r\n        uint256 decrements = (currTime - startingTimestamp) /\r\n            TIME_PER_DECREMENT;\r\n        if (decrements == 0) {\r\n            return startingPrice;\r\n        }\r\n\r\n        // decrements will equal 0 before totalDecrements does so we will not divide by 0\r\n        uint256 totalDecrements = (endingTimestamp - startingTimestamp) /\r\n            TIME_PER_DECREMENT;\r\n\r\n        return startingPrice - (diff / totalDecrements) * decrements;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a hash has been signed by a signer, and if this contract has a dual signer,\r\n     * that the dual signer has also signed the hash\r\n     */\r\n    function _checkHashAndSignatures(\r\n        bytes32 hash,\r\n        address signer,\r\n        bytes memory signature,\r\n        bytes memory dualSignature\r\n    ) internal view {\r\n        require(!_cancelledOrFinalizedSales[hash], \"Sale no longer active\");\r\n        require(\r\n            hash.recover(signature) == signer,\r\n            \"Not signed by current owner\"\r\n        );\r\n        require(\r\n            dualSignerAddress == address(0) ||\r\n                hash.recover(dualSignature) == dualSignerAddress,\r\n            \"Not signed by dual signer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by the owner of any token initiate a sale for their token. This does not\r\n     * lock the tokenId and the owner can freely trade their token, but doing so will\r\n     * invalidate the ability for others to buy.\r\n     */\r\n    function hashToSignToSellToken(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external view returns (bytes32) {\r\n        require(_msgSender() == ownerOf(tokenId), \"Not the owner of the token\");\r\n        return\r\n            _hashForSale(\r\n                _msgSender(),\r\n                version,\r\n                nonce,\r\n                tokenId,\r\n                pricesAndTimestamps\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Usable to cancel hashes generated from {hashToSignToSellToken}\r\n     */\r\n    function cancelSale(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external {\r\n        bytes32 hash = _hashToCheckForSale(\r\n            _msgSender(),\r\n            version,\r\n            nonce,\r\n            tokenId,\r\n            pricesAndTimestamps\r\n        );\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev With a hash signed by the method {hashToSignToSellToken} any user sending enough value can buy\r\n     * the token from the seller. Tokens not owned by the contract owner are all considered secondary sales and\r\n     * will give a cut to the owner of the contract based on the secondaryOwnerBPS.\r\n     */\r\n    function buyToken(\r\n        address seller,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        bytes memory signature,\r\n        bytes memory dualSignature\r\n    ) external payable {\r\n        uint256 currentPrice = _currentPrice(pricesAndTimestamps);\r\n\r\n        require(\r\n            _addressToActiveVersion[seller] == version,\r\n            \"Incorrect signature version\"\r\n        );\r\n        require(msg.value >= currentPrice, \"Not enough ETH to buy\");\r\n\r\n        bytes32 hash = _hashToCheckForSale(\r\n            seller,\r\n            version,\r\n            nonce,\r\n            tokenId,\r\n            pricesAndTimestamps\r\n        );\r\n        _checkHashAndSignatures(hash, seller, signature, dualSignature);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        emit SaleCompleted(seller, _msgSender(), tokenId, currentPrice, hash);\r\n        _safeTransfer(seller, _msgSender(), tokenId, \"\");\r\n\r\n        if (seller != owner()) {\r\n            IEaselyPayout(PAYOUT_CONTRACT_ADDRESS).splitPayable{\r\n                value: currentPrice\r\n            }(seller, _ownerRoyalties(), _ownerBPS());\r\n        }\r\n        payable(_msgSender()).transfer(msg.value - currentPrice);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This implements a lazy-minted, randomized collection of ERC721A.\r\n * It requires that the creator knows the total number of NFTs they want and all belong to a token\r\n * directory, commonly will be an IPFS hash, with all the metadata from 0 to the #NFTs - 1.\r\n *\r\n * It has two main methods to lazy-mint:\r\n * One allows the owner or alternate signer to approve single-use signatures for specific wallet addresses\r\n * The other allows a general mint, multi-use signature that anyone can use.\r\n *\r\n * Minting from this collection is always random, this can be done with either a reveal mechanism that\r\n * has an optional random offset, or on-chain randomness for revealed collections, or a mix of both!\r\n *\r\n * Only with a reveal mechanism, does the price of minting utilize ERC721A improvements.\r\n */\r\ncontract ERC721ARandomizedCollection is ERC721Marketplace {\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    bool public burnable;\r\n    // This returns whether or not a collection has been locked yet\r\n    bool public isLocked;\r\n    /*\r\n     * If this is set to true the owner must complete a signature for each address on the allowlist.\r\n     * If it is false, only the dualSignerAddress is required, which can be a programatic signer the\r\n     * owner is associted with that can easily sign tens of thousands of signatures.\r\n     */\r\n    bool private requireOwnerOnAllowlist;\r\n    bool private hasInit = false;\r\n\r\n    uint256 public maxSupply;\r\n    // Limits how much any single transaction can be\r\n    uint256 public transactionMax;\r\n    // Limits how much any single wallet can mint on a collection.\r\n    uint256 public maxMint;\r\n    // Used to shuffle tokenURI upon reveal\r\n    uint256 public offset;\r\n\r\n    // This limit is necessary for onchain randomness\r\n    uint256 public constant MAX_SUPPLY_LIMIT = 10**9;\r\n    // Mapping to enable constant time onchain randomness\r\n    uint256[MAX_SUPPLY_LIMIT] private indices;\r\n    string public tokenDirectory;\r\n\r\n    // Randomized Collection Events\r\n    event Minted(\r\n        address indexed buyer,\r\n        uint256 amount,\r\n        uint256 unitPrice,\r\n        bytes32 hash\r\n    );\r\n    event TokensRevealed(string tokenDirectory);\r\n    event TokenSupplyLocked(uint256 supply);\r\n    event TokenDirectoryLocked();\r\n    event RequireOwnerOnAllowList(bool required);\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor(\r\n        bool[2] memory bools,\r\n        address[4] memory addresses,\r\n        uint256[8] memory uints,\r\n        string[3] memory strings,\r\n        bytes[2] memory signatures\r\n    ) ERC721A(strings[0], strings[1]) {\r\n        _init(bools, addresses, uints, strings, signatures);\r\n    }\r\n\r\n    function init(\r\n        bool[2] memory bools,\r\n        address[4] memory addresses,\r\n        uint256[8] memory uints,\r\n        string[3] memory strings,\r\n        bytes[2] memory signatures\r\n    ) external {\r\n        _init(bools, addresses, uints, strings, signatures);\r\n    }\r\n\r\n    function _init(\r\n        bool[2] memory bools,\r\n        address[4] memory addresses,\r\n        uint256[8] memory uints,\r\n        string[3] memory strings,\r\n        bytes[2] memory signatures\r\n    ) internal {\r\n        require(!hasInit, \"Already has be initiated\");\r\n        hasInit = true;\r\n\r\n        burnable = bools[0];\r\n        _notSequentialMint = bools[1];\r\n\r\n        _owner = msg.sender;\r\n        _initWithdrawSplits(\r\n            _owner,\r\n            addresses[0], // revenue share address\r\n            addresses[1], // referral address\r\n            addresses[2], // partnership address\r\n            uints[0], // payout BPS\r\n            uints[1], // owner secondary BPS\r\n            uints[2], // revenue share BPS\r\n            uints[3], // referral BPS\r\n            uints[4], // partnership BPS\r\n            signatures\r\n        );\r\n        dualSignerAddress = addresses[3];\r\n        maxSupply = uints[5];\r\n        require(maxSupply < MAX_SUPPLY_LIMIT, \"Collection is too big\");\r\n\r\n        // Do not allow more than 500 mints a transaction so users cannot exceed gas limit\r\n        if (uints[6] == 0 || uints[6] >= 500) {\r\n            transactionMax = 500;\r\n        } else {\r\n            transactionMax = uints[6];\r\n        }\r\n        maxMint = uints[7];\r\n\r\n        _name = strings[0];\r\n        _symbol = strings[1];\r\n        tokenDirectory = strings[2];\r\n        if (_notSequentialMint) {\r\n            emit TokensRevealed(tokenDirectory);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return \"ipfs://\";\r\n    }\r\n\r\n    /**\r\n     * @dev sets if the owner's signature is also necessary for dual signing.\r\n     *\r\n     * This is normally turned off because the dual signer can be an automated\r\n     * process that can sign hundreds to thousands of sale permits instantly which\r\n     * would be tedious for a human-operated wallet.\r\n     */\r\n    function setRequireOwnerOnAllowlist(bool required) external onlyOwner {\r\n        requireOwnerOnAllowlist = required;\r\n        emit RequireOwnerOnAllowList(required);\r\n    }\r\n\r\n    /**\r\n     * @dev If this collection was created with burnable on, owners of tokens\r\n     * can use this method to burn their tokens. Easely will keep track of\r\n     * burns in case creators want to reward users for burning tokens.\r\n     */\r\n    function burn(uint256 tokenId) external {\r\n        require(burnable, \"Tokens from this collection are not burnable\");\r\n        _burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Method used if the creator wants to keep their collection hidden until\r\n     * a later release date. On reveal, a collection no longer uses the mint savings\r\n     * of ERC721A in favor of enabling on-chain randomness minting since the metadata\r\n     * is no longer hidden.\r\n     *\r\n     * Additionally, this method has the option to set a random offset once upon reveal\r\n     * but once that offset is set it cannot be changed to maintain user consistency.\r\n     *\r\n     * This method does not lock the tokenURI as there are cases when the initial metadata is\r\n     * inaccurate and may need to be updated. The owner of the collection should call {lockTokenURI}\r\n     * when they are certain of their metadata.\r\n     */\r\n    function changeTokenURI(\r\n        string calldata revealTokenDirectory,\r\n        bool shouldOffset\r\n    ) external onlyOwner {\r\n        require(!isLocked, \"The token URI has been locked\");\r\n        if (shouldOffset && offset == 0) {\r\n            offset = _random(maxSupply - 1) + 1;\r\n        }\r\n        tokenDirectory = revealTokenDirectory;\r\n        _notSequentialMint = true;\r\n\r\n        _totalMinted = _nextSequential;\r\n        emit TokensRevealed(revealTokenDirectory);\r\n    }\r\n\r\n    /**\r\n     * Prevents token metadata in this collection from ever changing.\r\n     *\r\n     * IMPORTANT - this function can only be called ONCE, if a wrong token directory\r\n     * is submitted by the owner, it can NEVER be switched to a different one.\r\n     */\r\n    function lockTokenURI() external onlyOwner {\r\n        require(!isLocked, \"Contract already locked\");\r\n        isLocked = true;\r\n        emit TokenDirectoryLocked();\r\n    }\r\n\r\n    /**\r\n     * Stops tokens from ever being minted past the current supply.\r\n     *\r\n     * IMPORTANT - this function can NEVER be undone. It is for collections\r\n     * that have not sold out, and the owner choosing to essentially \"burn\"\r\n     * the unminted tokens to give more value to the ones already minted.\r\n     */\r\n    function lockTokenSupply() external onlyOwner {\r\n        require(_notSequentialMint, \"The token URI has not been set yet\");\r\n        // This will lock the unminted tokens at reveal time\r\n        maxSupply = _totalMinted;\r\n        emit TokenSupplyLocked(_totalMinted);\r\n    }\r\n\r\n    /**\r\n     * @dev tokenURI of a tokenId, will change to include the tokeId and an offset in\r\n     * the URI once the collection has been revealed.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (!_notSequentialMint) {\r\n            return string(abi.encodePacked(_baseURI(), tokenDirectory));\r\n        }\r\n\r\n        require(_exists(tokenId), \"URI query for nonexistent token\");\r\n\r\n        uint256 offsetId = (tokenId + offset) % maxSupply;\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    _baseURI(),\r\n                    tokenDirectory,\r\n                    \"/\",\r\n                    offsetId.toString()\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable a {mintAllow} for a user\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForAllowList(\r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    address(this),\r\n                    block.chainid,\r\n                    owner(),\r\n                    allowedAddress,\r\n                    nonce,\r\n                    version,\r\n                    price,\r\n                    amount\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n     * see {_hashForAllowList} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForAllowList(\r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            ECDSA.toEthSignedMessageHash(\r\n                _hashForAllowList(allowedAddress, nonce, version, price, amount)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that the approved buyer\r\n     * can use in order to call the {mintAllow} method.\r\n     */\r\n    function hashToSignForAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        return _hashForAllowList(allowedAddress, version, nonce, price, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mintAllow} method.\r\n     */\r\n    function cancelAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForAllowList(\r\n            allowedAddress,\r\n            version,\r\n            nonce,\r\n            price,\r\n            amount\r\n        );\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a user with an approved signature to mint at a price and quantity specified by the\r\n     * contract. A user is still limited by totalSupply, transactionMax, and mintMax if populated.\r\n     * signing with amount = 0 will allow any buyAmount less than the other limits.\r\n     */\r\n    function mintAllow(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint256 buyAmount,\r\n        bytes memory signature,\r\n        bytes memory dualSignature\r\n    ) external payable {\r\n        require(\r\n            totalMinted() + buyAmount <= maxSupply,\r\n            \"Over token supply limit\"\r\n        );\r\n        require(buyAmount <= amount && buyAmount > 0, \"Invalid buyAmount\");\r\n        require(buyAmount <= transactionMax, \"Over transaction limit\");\r\n        require(\r\n            version == _addressToActiveVersion[owner()],\r\n            \"This presale version is disabled\"\r\n        );\r\n        require(allowedAddress == _msgSender(), \"Invalid sender\");\r\n        require(!Address.isContract(_msgSender()), \"Cannot mint from contract\");\r\n\r\n        uint256 totalPrice = price * buyAmount;\r\n        require(msg.value >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForAllowList(\r\n            allowedAddress,\r\n            version,\r\n            nonce,\r\n            price,\r\n            amount\r\n        );\r\n        require(!_cancelledOrFinalizedSales[hash], \"Signature not active\");\r\n        if (hash.recover(signature) != owner()) {\r\n            require(\r\n                !requireOwnerOnAllowlist &&\r\n                    dualSignerAddress != address(0) &&\r\n                    hash.recover(dualSignature) == dualSignerAddress,\r\n                \"Not signed by dual signer or owner\"\r\n            );\r\n        }\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        _mintRandom(_msgSender(), buyAmount);\r\n        emit Minted(_msgSender(), buyAmount, price, hash);\r\n        payable(_msgSender()).transfer(msg.value - totalPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable {mint} for all users\r\n     */\r\n    function _hashForMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    address(this),\r\n                    block.chainid,\r\n                    owner(),\r\n                    amount,\r\n                    pricesAndTimestamps,\r\n                    version\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n     * see {_hashForMint} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            ECDSA.toEthSignedMessageHash(\r\n                _hashForMint(version, amount, pricesAndTimestamps)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that buyers use\r\n     * in order to call the {mint} method.\r\n     */\r\n    function hashToSignForMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        require(amount <= transactionMax, \"Over transaction limit\");\r\n        return _hashForMint(version, amount, pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mint} method.\r\n     */\r\n    function cancelMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForMint(\r\n            version,\r\n            amount,\r\n            pricesAndTimestamps\r\n        );\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to buy an amount of tokens at a price which matches\r\n     * the signature that the owner or alternate signer has approved\r\n     */\r\n    function mint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256 buyAmount,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        bytes memory signature,\r\n        bytes memory dualSignature\r\n    ) external payable {\r\n        require(\r\n            totalMinted() + buyAmount <= maxSupply,\r\n            \"Over token supply limit\"\r\n        );\r\n        require(buyAmount != 0, \"Invalid buyAmount\");\r\n        require(buyAmount == amount || amount == 0, \"Over signature amount\");\r\n        require(buyAmount <= transactionMax, \"Over transaction limit\");\r\n        require(version == _addressToActiveVersion[owner()], \"Invalid version\");\r\n        require(!Address.isContract(_msgSender()), \"Cannot mint from contract\");\r\n\r\n        uint256 unitPrice = _currentPrice(pricesAndTimestamps);\r\n        uint256 totalPrice = buyAmount * unitPrice;\r\n        require(msg.value >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForMint(\r\n            version,\r\n            amount,\r\n            pricesAndTimestamps\r\n        );\r\n        _checkHashAndSignatures(hash, owner(), signature, dualSignature);\r\n\r\n        _mintRandom(_msgSender(), buyAmount);\r\n        emit Minted(_msgSender(), buyAmount, unitPrice, hash);\r\n\r\n        payable(_msgSender()).transfer(msg.value - totalPrice);\r\n    }\r\n\r\n    /// @notice Generates a pseudo random index of our tokens that has not been used so far\r\n    function _mintRandomIndex(address buyer, uint256 amount) internal {\r\n        //  number of tokens left to create\r\n        uint256 supplyLeft = maxSupply - _totalMinted;\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            // generate a random index\r\n            uint256 index = _random(supplyLeft);\r\n            uint256 tokenAtPlace = indices[index];\r\n\r\n            uint256 tokenId;\r\n            // if we havent stored a replacement token...\r\n            if (tokenAtPlace == 0) {\r\n                //... we just return the current index\r\n                tokenId = index;\r\n            } else {\r\n                // else we take the replace we stored with logic below\r\n                tokenId = tokenAtPlace;\r\n            }\r\n\r\n            // get the highest token id we havent handed out\r\n            uint256 lastTokenAvailable = indices[supplyLeft - 1];\r\n            // we need to store a replacement token for the next time we roll the same index\r\n            // if the last token is still unused...\r\n            if (lastTokenAvailable == 0) {\r\n                // ... we store the last token as index\r\n                indices[index] = supplyLeft - 1;\r\n            } else {\r\n                // ... we store the token that was stored for the last token\r\n                indices[index] = lastTokenAvailable;\r\n            }\r\n\r\n            _safeMint(buyer, tokenId + _nextSequential);\r\n            supplyLeft--;\r\n        }\r\n\r\n        _balances[buyer] = AddressData(\r\n            _balances[buyer].balance + uint128(amount),\r\n            _balances[buyer].numberMinted + uint128(amount)\r\n        );\r\n    }\r\n\r\n    /// @notice Generates a pseudo random number based on arguments with decent entropy\r\n    /// @param max The maximum value we want to receive\r\n    /// @return A random number less than the max\r\n    function _random(uint256 max) internal view returns (uint256) {\r\n        if (max == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rand = uint256(\r\n            keccak256(\r\n                abi.encode(\r\n                    msg.sender,\r\n                    block.difficulty,\r\n                    block.timestamp,\r\n                    blockhash(block.number - 1)\r\n                )\r\n            )\r\n        );\r\n        return rand % max;\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper around {_mintRandomIndex} that incrementally if the collection has not\r\n     * been revealed yet, which also checks the buyer has not exceeded maxMint count\r\n     */\r\n    function _mintRandom(address buyer, uint256 amount) internal {\r\n        require(\r\n            maxMint == 0 || _balances[buyer].numberMinted + amount <= maxMint,\r\n            \"Buyer over mint maximum\"\r\n        );\r\n        if (_notSequentialMint) {\r\n            _mintRandomIndex(buyer, amount);\r\n            _totalMinted += amount;\r\n        } else {\r\n            _safeMintSequential(buyer, amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool[2]\",\"name\":\"bools\",\"type\":\"bool[2]\"},{\"internalType\":\"address[4]\",\"name\":\"addresses\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"uints\",\"type\":\"uint256[8]\"},{\"internalType\":\"string[3]\",\"name\":\"strings\",\"type\":\"string[3]\"},{\"internalType\":\"bytes[2]\",\"name\":\"signatures\",\"type\":\"bytes[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"DualSignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Loan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LoanRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"LoaningActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"RequireOwnerOnAllowList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenDirectoryLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"TokenSupplyLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenDirectory\",\"type\":\"string\"}],\"name\":\"TokensRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueShareAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partnershipAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueShareBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnershipBPS\",\"type\":\"uint256\"}],\"name\":\"WithdrawSplitsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SECONDARY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYOUT_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dualSignature\",\"type\":\"bytes\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"revealTokenDirectory\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"shouldOffset\",\"type\":\"bool\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dualSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getActiveVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashToSignForAllowList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignForMint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignToSellToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[2]\",\"name\":\"bools\",\"type\":\"bool[2]\"},{\"internalType\":\"address[4]\",\"name\":\"addresses\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"uints\",\"type\":\"uint256[8]\"},{\"internalType\":\"string[3]\",\"name\":\"strings\",\"type\":\"string[3]\"},{\"internalType\":\"bytes[2]\",\"name\":\"signatures\",\"type\":\"bytes[2]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"loan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loaningActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTokenSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dualSignature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dualSignature\",\"type\":\"bytes\"}],\"name\":\"mintAllow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnershipAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"retrieveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueShareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alt\",\"type\":\"address\"}],\"name\":\"setDualSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_loaningActive\",\"type\":\"bool\"}],\"name\":\"setLoaningActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"setRequireOwnerOnAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBPS\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splits\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"ownerRoyaltyBPS\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"payoutBPS\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revenueShareBPS\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"referralBPS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"partnershipBPS\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDirectory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenOwnerOnLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721ARandomizedCollection", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArgumentsa000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006456173656c7900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454153450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1263082eb313ef68798ab10f972f5416757494cedeccd33b017d049659d2a456"}]}