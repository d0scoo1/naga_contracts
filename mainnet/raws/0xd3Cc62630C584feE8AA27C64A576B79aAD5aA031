{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BLONKSlocations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/// @title BLONKS Locations Contract\\r\\n/// @author Matto\\r\\n/// @notice This contract is determines where (almost) everything is placed in the final image.\\r\\n/// @dev Locations are saved in a single array so it's easy to pass values between functions.\\r\\n/// @custom:security-contact monkmatto@protonmail.com\\r\\ncontract BLONKSlocations {\\r\\n\\r\\n  function eM(uint256 _ent, uint256 _mod)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint16) \\r\\n  {\\r\\n    return uint16(_ent % _mod);\\r\\n  }\\r\\n\\r\\n  function p(uint16 _val, uint256 _ent, uint16 _delta)\\r\\n    internal\\r\\n    pure\\r\\n    returns (uint16)\\r\\n  {\\r\\n    uint16 t = uint16(_ent % 3);\\r\\n    if (t == 0) {\\r\\n      t = _val - _delta;\\r\\n    } else {\\r\\n      t -= 1;\\r\\n      t = _val + t * _delta;\\r\\n    }\\r\\n    return t;\\r\\n  }\\r\\n\\r\\n\\r\\n  function calculateLocatsArray(uint256 eO, uint256 eT, uint8[11] memory tA)\\r\\n    external\\r\\n    pure\\r\\n    returns (uint16[110] memory)\\r\\n  {\\r\\n    uint16[110] memory loc;\\r\\n\\r\\n    // Neck\\r\\n    loc[1] = 250 + (eM(eO,10) * 10);\\r\\n    eO /= 10;\\r\\n    loc[0] = (1000 - loc[1]) / 2;\\r\\n\\r\\n    // Head\\r\\n    loc[4] = 480 + (eM(eO,10) * 10); \\r\\n    eO /= 10;\\r\\n    loc[5] = 500 + (eM(eO,10) * 10); \\r\\n    eO /= 10;\\r\\n    loc[2] = (1000 - loc[4]) / 2; \\r\\n    loc[3] = (1000 - loc[5]) / 2; \\r\\n\\r\\n    // Eye Colors\\r\\n    eO /= 10;\\r\\n\\r\\n    // Right Eye\\r\\n    loc[8] = loc[4] / 6 + eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[9] = loc[5] / 6 + eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[6] = loc[2] - 10 + (loc[4] / 2 - loc[8]) - eM(eO,10) * 4;\\r\\n    eO /= 10;\\r\\n    loc[7] = loc[3] + (loc[5] / 2 - loc[9]) + eM(eO,10) * 2;\\r\\n    eO /= 10;\\r\\n\\r\\n    // Left Eye\\r\\n    loc[12] = loc[4] / 6 + eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[13] = loc[5] / 6 + eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[10] = loc[2] + 10 + loc[4] - (loc[4] / 2 - loc[12]) - loc[12] + eM(eO,10) * 4;\\r\\n    eO /= 10;\\r\\n    loc[11] = loc[3] + (loc[5] / 2 - loc[13]) + eM(eO,10) * 2;\\r\\n    eO /= 10;\\r\\n\\r\\n    // Right Pupil\\r\\n    loc[18] = loc[8] / 2 - eM(eT,10) * 2;\\r\\n    eT /= 10;\\r\\n    loc[19] = loc[9] / 2 - eM(eT,10) * 2;\\r\\n    eT /= 10;\\r\\n    loc[14] = eM(eT,3);\\r\\n    eT /= 10;\\r\\n    loc[15] = eM(eT,3);\\r\\n    eT /= 10;\\r\\n    if (loc[14] == 0) {\\r\\n      loc[16] = loc[6];\\r\\n    } else if (loc[14] == 1) {\\r\\n      loc[16] = p(loc[6] + loc[8] / 2 - loc[18] / 2, eT, 10);\\r\\n    } else {\\r\\n      loc[16] = loc[6] + loc[8] - loc[18];\\r\\n    }\\r\\n    eT /= 10;\\r\\n    if (loc[15] == 0) {\\r\\n      loc[17] = loc[7];\\r\\n    } else if (loc[15] == 1) {\\r\\n      loc[17] = p(loc[7] + loc[9] / 2 - loc[19] / 2, eT, 10);\\r\\n    } else {\\r\\n      loc[17] = loc[7] + loc[9] - loc[19];\\r\\n    }\\r\\n    eT /= 10;\\r\\n\\r\\n    // Left Pupil\\r\\n    loc[22] = loc[12] / 2 - eM(eT,10) * 2;\\r\\n    eT /= 10;\\r\\n    loc[23] = loc[13] / 2 - eM(eT,10) * 2;\\r\\n    eT /= 10;\\r\\n    if (loc[14] == 0) {\\r\\n      loc[20] = loc[10];\\r\\n    } else if (loc[14] == 1) {\\r\\n      loc[20] = p(loc[10] + loc[12] / 2 - loc[22] / 2, eT, 10);\\r\\n    } else {\\r\\n      loc[20] = loc[10] + loc[12] - loc[22];\\r\\n    }\\r\\n    eT /= 10;\\r\\n    if (loc[15] == 0) {\\r\\n      loc[21] = loc[11];\\r\\n    } else if (loc[15] == 1) {\\r\\n      loc[21] = p(loc[11] + loc[13] / 2 - loc[23] / 2, eT, 10);\\r\\n    } else {\\r\\n      loc[21] = loc[11] + loc[13] - loc[23];\\r\\n    }\\r\\n\\r\\n    // Nose\\r\\n    eO /= 10;\\r\\n    loc[26] = (loc[10] - (loc[6] + loc[8])) / 2;\\r\\n    loc[27] = loc[5] / 8 + eM(eO,10) * 4;\\r\\n    eO /= 10;\\r\\n    loc[24] = p(loc[2] + (loc[4] - loc[26]) / 2, eO, 5);\\r\\n    eO /= 10;\\r\\n    loc[25] = p(loc[3] + (loc[5] - loc[27]) / 2 + loc[27] / 2, eO, 3);\\r\\n\\r\\n    // Ears\\r\\n    eO /= 10;\\r\\n    loc[31] = loc[4] / 12 + eM(eO,10) * 2;\\r\\n    eO /= 10;\\r\\n    loc[32] = loc[5] / 4 + eM(eO,10) * 4;\\r\\n    eO /= 10;\\r\\n    loc[28] = loc[2] - loc[31];\\r\\n    loc[29] = loc[2] + loc[4];\\r\\n    loc[30] = loc[3] + loc[32] + 30 + eM(eO,10) * 3;\\r\\n    eO /= 10;\\r\\n\\r\\n    // Right Eyebrow\\r\\n    loc[39] = loc[8] + eM(eO,7) * 10;\\r\\n    eO /= 10;\\r\\n    loc[40] = (2 + eM(eO,5)) * 5;\\r\\n    eO /= 10;\\r\\n    loc[37] = loc[6] + 6 - eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[38] = loc[7] - 6 - loc[40] - eM(eO,10) * 4;\\r\\n    eO /= 10;\\r\\n\\r\\n    // Left Eyebrow\\r\\n    loc[43] = loc[12] + eM(eO,7) * 10;\\r\\n    eO /= 10;\\r\\n    loc[44] = (2 + eM(eO,5)) * 5;\\r\\n    eO /= 10;\\r\\n    loc[41] = loc[10] + 6 - eM(eO,10) * 5;\\r\\n    eO /= 10;\\r\\n    loc[42] = loc[11] - 6 - loc[44] - eM(eO,10) * 4;\\r\\n\\r\\n    // Mouth\\r\\n    eT /= 10;\\r\\n    loc[35] = loc[4] - 150 - eM(eT,10) * 27;\\r\\n    eT /= 10;\\r\\n    loc[36] = loc[5] / 12 + eM(eT,10) * 5;\\r\\n    eT /= 10;\\r\\n    loc[33] = p(loc[2] + (loc[4] - loc[35]) / 2, eT, 20);\\r\\n    eT /= 10;\\r\\n    loc[34] = p(loc[3] + loc[27] + loc[36] + (loc[5] - loc[36]) / 2, eT, 3);\\r\\n    eT /= 10;\\r\\n\\r\\n    // Mole\\r\\n    if (eM(eO,10) < 2) { \\r\\n      eO /= 10;\\r\\n      if (eM(eO,10) < 5) {\\r\\n        loc[45] = loc[2] + loc[27] + loc[27] / 2 - eM(eO,10) * 4;\\r\\n      } else {\\r\\n        loc[45] = loc[2] + loc[4] - loc[27] - loc[27] / 2  + eM(eO,10) * 4;\\r\\n      }\\r\\n      eO /= 10;\\r\\n      loc[106] = loc[34] - 2 * (loc[5] / 25) - eM(eO,10) * 3;\\r\\n      loc[107] = loc[4] / 25;\\r\\n      loc[108] = loc[5] / 25;\\r\\n    } \\r\\n    eO /= 10;\\r\\n\\r\\n    // Lens pt 1\\r\\n    loc[13] >= loc[9] ? loc[46] = loc[13] + 40 : loc[46] = loc[9] + 40;\\r\\n    loc[12] > loc[8] ? loc[47] = loc[12] + 30: loc[47] = loc[8] + 30;\\r\\n\\r\\n    // Teeth \\r\\n    if (tA[2] == 1) {\\r\\n      loc[50] = loc[33] + loc[35] / 16;\\r\\n      loc[51] = loc[34] + 3;\\r\\n      loc[52] = loc[35] - loc[35] / 8;\\r\\n      loc[53] = loc[36] - 6;\\r\\n    } else if (tA[2] == 2) {\\r\\n      loc[50] = loc[33] + (loc[35] / 3);\\r\\n      loc[51] = loc[34] + 3;\\r\\n      loc[52] = loc[35] / 3;\\r\\n      loc[53] = 2 * (loc[36] - 6) / 3;\\r\\n    } else if (tA[2] == 3) {\\r\\n      loc[50] = loc[33] + loc[35] / 16;\\r\\n      loc[51] = loc[34] + 3 + loc[36] / 4;\\r\\n      loc[52] = loc[35] - loc[35] / 8;\\r\\n      loc[53] = loc[36] -6 - loc[36] / 4;\\r\\n      loc[93] = loc[33] + loc[35] / 16 + loc[35] / 8;\\r\\n      loc[94] = loc[34] + 5;\\r\\n      loc[95] = 5 * (loc[35] / 8);\\r\\n      loc[96] = loc[36] - 8;\\r\\n    }\\r\\n\\r\\n    // Extra Detail\\r\\n    if (tA[3] == 1) {\\r\\n      loc[56] = loc[4] / 30;\\r\\n      loc[57] = 3 * loc[56];\\r\\n      loc[54] = loc[33] + loc[35] - loc[56] - 3;\\r\\n      loc[55] = loc[34] + loc[36] - 4;  \\r\\n      loc[58] = loc[54] - loc[56];\\r\\n      loc[60] = 2 * loc[56];\\r\\n      loc[61] = (3 * loc[60]) / 4;\\r\\n      loc[59] = loc[55];\\r\\n    } else if (tA[3] == 2) {\\r\\n      loc[56] = loc[26] / 2;\\r\\n      loc[57] = loc[56];\\r\\n      loc[54] = loc[24];\\r\\n      loc[55] = loc[25] + loc[27] + 3;\\r\\n      loc[59] = loc[55] + loc[57] - 2; \\r\\n      loc[60] = loc[56] - loc[56] / 5;\\r\\n      loc[61] = loc[57] + loc[57] / 4;\\r\\n      loc[58] = loc[54];     \\r\\n    } else if (tA[3] == 3) {\\r\\n      loc[56] = loc[4] / 30;\\r\\n      loc[57] = loc[56] + loc[56] / 2;\\r\\n      loc[54] = loc[2] + loc[4] - (loc[2] + loc[4] - (loc[10] + loc[12])) / 2;\\r\\n      loc[55] = loc[11] - loc[5] / 10;\\r\\n      loc[59] = loc[55] + loc[57] - 1; \\r\\n      loc[60] = 2 * loc[56];\\r\\n      loc[61] = loc[57] + loc[57] / 2;\\r\\n      loc[58] = loc[54] - loc[60] / 4;\\r\\n    } else if (tA[3] == 4) {\\r\\n      loc[56] = loc[4] / 40;\\r\\n      loc[57] = loc[56] + loc[56] / 2;\\r\\n      loc[54] = loc[6] - loc[56];\\r\\n      loc[55] = loc[7] + loc[9] + 8;\\r\\n      loc[59] = loc[55] + loc[57]; \\r\\n      loc[58] = loc[54] - loc[56] / 4;\\r\\n      loc[60] = loc[56] + loc[56] / 2;\\r\\n      loc[61] = loc[60];\\r\\n    }\\r\\n\\r\\n    // Glasses\\r\\n    if (tA[4] != 0) {\\r\\n      loc[62] = loc[24] - 10;\\r\\n      loc[63] = loc[25] - 23;\\r\\n      loc[64] = loc[26] + 20;\\r\\n      loc[65] = 20;\\r\\n      loc[66] = loc[24] - 10 - loc[47];\\r\\n      loc[67] = loc[25] - loc[46] + 27;\\r\\n      loc[68] = loc[24] + loc[26] + 10;\\r\\n      loc[69] = loc[28] - 3;\\r\\n      loc[70] = loc[30] - 15;\\r\\n      loc[71] = loc[24] - loc[47] - loc[28];\\r\\n      loc[72] = loc[24] + loc[26] + 3 + loc[47];\\r\\n      loc[73] = loc[30] - 15;\\r\\n      loc[74] = loc[29]  + loc[31] - loc[24] - loc[26] - loc[47];\\r\\n    }\\r\\n\\r\\n    // Hair\\r\\n    if (tA[5] == 1) {\\r\\n      loc[78] = (loc[30] - loc[3]) - 60;\\r\\n      loc[75] = loc[2] - 30;\\r\\n      loc[76] = loc[3] - loc[78] / 2 + 10;\\r\\n      loc[77] = loc[4] + 60;\\r\\n    } else if (tA[5] == 2) {\\r\\n      loc[78] = (loc[30] - loc[3]) / 2;\\r\\n      loc[75] = loc[2] + loc[31] / 2;\\r\\n      loc[76] = loc[3] - loc[78];\\r\\n      loc[77] = loc[4] - loc[31];\\r\\n    } else if (tA[5] == 3) {\\r\\n      loc[78] = (loc[30] - loc[3]) / 4;\\r\\n      loc[75] = loc[2];\\r\\n      loc[76] = loc[3] - loc[78];\\r\\n      loc[77] = loc[4];\\r\\n      loc[82] = loc[78] * 2;\\r\\n      loc[79] = loc[2] + loc[4] / 4;\\r\\n      loc[80] = loc[3] - loc[82];\\r\\n      loc[81] = loc[4] / 2;\\r\\n    } else if (tA[5] == 4) {\\r\\n      loc[75] = loc[2] + (5 * loc[4]) / 12;\\r\\n      loc[76] = loc[3] - loc[32];\\r\\n      loc[77] = loc[4] / 6;\\r\\n      loc[78] = loc[32];\\r\\n    }\\r\\n    if (tA[6] > 0) {\\r\\n      loc[89] = loc[4] + 40;\\r\\n      loc[90] = (loc[30] - loc[3]) / 3;\\r\\n      loc[87] = loc[2] - 20;\\r\\n      loc[88] = loc[3] + loc[90] / 2;\\r\\n    } \\r\\n    if (tA[6] == 2) {\\r\\n      loc[91] = loc[88] + loc[90] / 5;\\r\\n      loc[92] = (3 * loc[90]) / 5;\\r\\n    }\\r\\n    if (tA[5] == 3) {\\r\\n      loc[83] = loc[2];\\r\\n      loc[84] = loc[3] - 2;\\r\\n      loc[85] = loc[31];\\r\\n      loc[86] = (3 * loc[5]) / 4 - eM(eT,10) * 7;\\r\\n    }\\r\\n\\r\\n    // Ear rings pt 1\\r\\n    loc[48] = 15;\\r\\n    loc[49] = loc[32] + loc[30] - 35;\\r\\n\\r\\n    // Other\\r\\n    if (tA[9] == 0) {\\r\\n      loc[98] = loc[0] - 15;\\r\\n      loc[99] = 950;\\r\\n      loc[100] = loc[1] + 30;\\r\\n      loc[101] = 60; \\r\\n    } else if (tA[9] == 1) {\\r\\n      loc[98] = loc[2] - loc[27] / 2;\\r\\n      loc[99] = loc[3] + loc[5];\\r\\n      loc[100] = loc[4] + loc[27];\\r\\n      loc[101] = loc[27];\\r\\n      loc[104] = loc[27] / 2;\\r\\n      loc[103] = loc[32] + loc[30] + 20;\\r\\n      loc[105] = loc[3] + loc[5] - loc[103] + 10;\\r\\n      loc[102] = loc[2] - loc[104];\\r\\n      loc[97] = loc[2] + loc[4];\\r\\n    } else if (tA[9] == 2 || tA[9] == 3) {\\r\\n      loc[98] = loc[0] - 10;\\r\\n      loc[99] = loc[3] + loc[5] + loc[27];\\r\\n      loc[100] = loc[1] + 20;\\r\\n      loc[101] = loc[27];\\r\\n    } else if (tA[9] == 4) {\\r\\n      loc[99] = loc[3] + loc[5] + loc[19];\\r\\n      loc[98] = loc[0] - 20;\\r\\n      loc[100] = loc[1] + 40;\\r\\n      loc[101] = 1000 - loc[99];\\r\\n    } else if (tA[9] == 5) {\\r\\n      loc[98] = loc[0] - 60;\\r\\n      loc[99] = 1000 - loc[27];\\r\\n      loc[100] = loc[1] + 120;\\r\\n      loc[101] = loc[27];\\r\\n      loc[102] = loc[98] + 30;\\r\\n      loc[104] = loc[100] - 60;\\r\\n    }\\r\\n    return loc;\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eT\",\"type\":\"uint256\"},{\"internalType\":\"uint8[11]\",\"name\":\"tA\",\"type\":\"uint8[11]\"}],\"name\":\"calculateLocatsArray\",\"outputs\":[{\"internalType\":\"uint16[110]\",\"name\":\"\",\"type\":\"uint16[110]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "BLONKSlocations", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}