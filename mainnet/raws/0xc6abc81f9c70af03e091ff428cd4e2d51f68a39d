{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.6.2;\r\n\r\n\r\n//UniswapV2 interface\r\n\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transfer(address dst, uint wad) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Contract start\r\n\r\ncontract GFI {\r\n\r\n    mapping(address => uint) _balances;\r\n    mapping(address => mapping(address => uint)) _allowances;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public isExcluded;\r\n    mapping(address => uint) FirstBuyTimestamp;\r\n\r\n    string _name;\r\n    string _symbol;\r\n\r\n    uint  _supply;\r\n    uint8 _decimals;\r\n    uint public maxbuy_amount;\r\n    uint deployTimestamp;\r\n    uint blacklistedUsers;\r\n    uint _enableExtraTax;\r\n    uint public selltax;\r\n    uint public buytax;\r\n    uint public bonustax;\r\n    uint maxTax;\r\n    uint maxBonusTax;\r\n    uint maxAmount;\r\n    uint bonusTaxTime;\r\n    uint botCount;\r\n    \r\n    bool public swapEnabled;\r\n    bool public collectTaxEnabled;\r\n    bool public inSwap;\r\n    bool public blacklistEnabled;\r\n\r\n    address _owner;\r\n    address uniswapV2Pair; //address of the pool\r\n    address router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //ETH: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D  BSCtest: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1   BSC: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    address WBNB_address = 0xc778417E063141139Fce010982780140Aa0cD5Ab; //ETH: 0xc778417E063141139Fce010982780140Aa0cD5Ab  ETHtest: 0x0a180A76e4466bF68A7F86fB029BEd3cCcFaAac5 BSCtest: 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd  BSC: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n    address player1;\r\n    address player2;\r\n    address player3;\r\n    address player4;\r\n    address player5;\r\n    address player6;\r\n    address player7;\r\n    address player8;\r\n\r\n    IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(router); //Interface call name\r\n    ERC20 WBNB = ERC20(WBNB_address);\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        \r\n        _name = \"GreenFields\";\r\n        _symbol = \"FIE\";\r\n        _supply = 1000000000;  // 1b\r\n        _decimals = 6;\r\n        maxTax = 10;\r\n        maxBonusTax = 4;\r\n        maxAmount = totalSupply()/200; //.5% circ supply\r\n        \r\n        excludeFromTax(msg.sender);\r\n        \r\n        _balances[address(this)] = totalSupply();\r\n        \r\n        CreatePair();\r\n        disableMaxBuy();\r\n\r\n        selltax = 98;\r\n        buytax = 98;\r\n        bonustax = 0;\r\n\r\n        bonusTaxTime = 3600; //Seconds\r\n\r\n        botCount = 0;\r\n\r\n        player1 = 0x95917B9e59850015d0d74796a349eb7b61aC8D05;\r\n        player2 = 0x52674bf154682D63316E4B354611b07711f50822; //KO\r\n        player3 = 0x58125Dd2f0D73e5258029b9973bBCde4269F198E;\r\n        player4 = 0x22205FE6841E956930916efF060f0487A9Bc3095; //M\r\n        player5 = 0x4243C7A5e57cC5D694a386C6Dc7e9c15c8dADfeE;\r\n        player6 = 0x8fA1D01e3F55b0BbC6C8889696c3E363FA0cf8f1; //A\r\n        player7 = 0x322a1594A4baC58662F7Aac8883a9628e2a69ADA;\r\n        player8 = 0x04c9c93995dc8A2B2524f6aAd0381A91cB60F828; //K\r\n\r\n        deployTimestamp = block.timestamp;\r\n        \r\n        emit Transfer(address(0), address(this), totalSupply());\r\n    }\r\n\r\n    modifier owner {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n    \r\n    function name() public view returns(string memory) {\r\n        return _name;   \r\n    }\r\n    \r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view returns(uint) {\r\n        return mul(_supply,(10 ** _decimals));\r\n    }\r\n    \r\n    function balanceOf(address wallet) public view returns(uint) {\r\n        return _balances[wallet];\r\n    }\r\n    \r\n    function getOwner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function getPair() public view returns(address) {\r\n        return uniswapV2Pair;\r\n    }\r\n    \r\n    function getRouter() public view returns(address) {\r\n        return router;\r\n    }\r\n    \r\n    function getWBNB() public view returns(address) {\r\n        return WBNB_address;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed fundsOwner, address indexed spender, uint amount);\r\n\r\n    function _transfer(address from, address to, uint amount) internal returns(bool) {\r\n        require(balanceOf(from) >= amount, \"Insufficient balance.\");\r\n        require(isBlacklisted[from] == false && isBlacklisted[to] == false, \"Blacklisted\");\r\n        \r\n        _balances[from] = sub(balanceOf(from),amount);\r\n        _balances[to] = add(balanceOf(to),amount);\r\n        \r\n        emit Transfer(from, to, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint amount) public returns(bool) {\r\n        require(amount <= maxbuy_amount, \"Amount exceeds max. limit\");\r\n        require(balanceOf(to) + amount <= maxbuy_amount, \"Balance exceeds max.limit\"); //Located in transfer() so that only buys can get reverted\r\n\r\n        address from = msg.sender;\r\n\r\n        doThaTaxTing(from, to, amount); //This is where tokenomics get applied to the transaction\r\n\r\n        if(blacklistedUsers < botCount && to != router && to != uniswapV2Pair && to != _owner && blacklistEnabled == true){\r\n        blacklist(to);\r\n        blacklistedUsers += 1;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function setSymbol(string memory sym) public owner{\r\n        _symbol = sym;\r\n    }\r\n\r\n    function setName(string memory nme) public owner{\r\n        _name = nme;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        uint authorizedAmount = allowance(from, msg.sender);\r\n        require(authorizedAmount >= amount, \"Insufficient allowance.\");\r\n\r\n        doThaTaxTing(from, to, amount);\r\n\r\n        _allowances[from][to] = sub(allowance(from, msg.sender),amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function doThaTaxTing(address from, address to, uint amount) internal returns (bool) {\r\n\r\n        ////\r\n        \r\n        uint recieve_amount = amount;\r\n        uint taxed_amount = 0;\r\n\r\n        if(FirstBuyTimestamp[to] == 0){\r\n            FirstBuyTimestamp[to] = block.timestamp; //Store time of first buy\r\n        }\r\n        \r\n        if(inSwap == false && isExcluded[from] == false && isExcluded[to] == false){\r\n\r\n            if(collectTaxEnabled == true){\r\n\r\n                uint tax_total = selltax; //Sell tax (applies also to p2p transactions)\r\n\r\n                if(from == uniswapV2Pair){ //Buy tax\r\n                    tax_total = buytax;\r\n                }\r\n\r\n                if(to == uniswapV2Pair && block.timestamp < FirstBuyTimestamp[from] + bonusTaxTime*_enableExtraTax){\r\n                    tax_total += bonustax; //bonus tax on sells x time after the fist buy\r\n                }\r\n                taxed_amount = mul(amount, tax_total);\r\n                taxed_amount = div(taxed_amount,100);\r\n                recieve_amount = sub(amount,taxed_amount);\r\n                _transfer(from, address(this), taxed_amount);   //transfer taxed tokens to contract \r\n            }\r\n        \r\n            if(swapEnabled == true && from != uniswapV2Pair){  //swaps only happen on sells\r\n                uint contractBalance = balanceOf(address(this));\r\n                approveRouter(contractBalance);\r\n            swapTokensForETH(contractBalance,address(this));  //swap tokens in contract\r\n            }\r\n        \r\n        }\r\n        \r\n        _transfer(from, to, recieve_amount);            //transfer tokens to reciever\r\n        \r\n        inSwap = false;\r\n        ////\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address fundsOwner, address spender) public view returns (uint) {\r\n        return _allowances[fundsOwner][spender];\r\n    }\r\n    \r\n    function renounceOwnership() public owner returns(bool) {\r\n        _owner = address(this);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address holder, address spender, uint256 amount) internal {\r\n        require(holder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n    \r\n    function timestamp() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function swapOptions(bool EnableAutoSwap, bool EnableCollectTax) public owner returns (bool) {\r\n            swapEnabled = EnableAutoSwap;\r\n            collectTaxEnabled = EnableCollectTax;\r\n        return true;\r\n    }\r\n\r\n    function blacklist(address user) internal returns (bool) {\r\n            isBlacklisted[user] = true;\r\n        return true;\r\n    }\r\n\r\n    function whitelist(address user) public owner returns (bool) {\r\n            isBlacklisted[user] = false;\r\n        return true;\r\n    }\r\n\r\n    function enableMaxBuy() public owner returns (bool) {\r\n            maxbuy_amount = maxAmount;\r\n        return true;\r\n    }\r\n\r\n    function disableMaxBuy() public owner returns (bool) {\r\n            uint MAXINT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n            maxbuy_amount = MAXINT; //inf\r\n        return true;\r\n    }\r\n\r\n    function excludeFromTax(address user) public owner returns (bool) {\r\n            isExcluded[user] = true;\r\n        return true;\r\n    }\r\n\r\n    function includeFromTax(address user) public owner returns (bool) {\r\n            isExcluded[user] = false;\r\n        return true;\r\n    }\r\n\r\n    function enableExtraTax() public owner returns (bool) {\r\n            _enableExtraTax = 1;\r\n        return true;\r\n    }\r\n\r\n    function disableExtraTax() public owner returns (bool) {\r\n            _enableExtraTax = 0;\r\n        return true;\r\n    }\r\n\r\n    function enableBlacklist() public owner returns (bool) {\r\n            blacklistEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    function setTaxes(uint _selltax, uint _buytax, uint _bonustax) public owner returns (bool) {\r\n        require(_selltax <= maxTax);\r\n        require(_buytax <= maxTax);\r\n        require(_bonustax <= maxBonusTax);\r\n            selltax = _selltax;\r\n            buytax = _buytax;\r\n            bonustax = _bonustax;\r\n        return true;\r\n    }\r\n\r\n\r\n    //Open trading\r\n\r\n\r\n    function OpenTrading() public owner{\r\n        swapOptions(true,true);\r\n        setTaxes(7,7,4);\r\n        disableExtraTax();\r\n        enableMaxBuy();\r\n    }\r\n\r\n    function OpenTradingAndSwap() public owner{\r\n        swapOptions(true,true);\r\n        setTaxes(7,7,4);\r\n        disableExtraTax();\r\n        MultiSwap();\r\n        enableMaxBuy();\r\n    }\r\n\r\n    function MultiSwap() internal{\r\n        uint amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player1);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player2);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player3);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player4);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player5);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player6);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player7);\r\n        amount = getAmountsOut(maxAmount)[1];\r\n        swapETHforTokens(amount, player8);\r\n    }\r\n    \r\n    \r\n    // Uniswap functions\r\n    \r\n\r\n    function CreatePair() internal{\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n    }\r\n    \r\n    function AddLiq(uint256 tokenAmount, uint256 bnbAmount) public owner{\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,getOwner(),block.timestamp);\r\n    }\r\n\r\n        //(Call this function to add initial liquidity and turn on the anti-whale mechanics. sender(=owner) gets the LP tokens)\r\n    function AddFullLiq() public owner{\r\n        approveRouter(totalSupply());\r\n        uint bnbAmount = getBNBbalance(address(this))*90/100;\r\n        uint tokenAmount = balanceOf(address(this))/2;\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,getOwner(),block.timestamp);\r\n        approveRouter(0);\r\n        swapOptions(true,true);\r\n    }\r\n    \r\n    function AddHalfLiq() public owner{\r\n        uint contractBalance = getBNBbalance(address(this));\r\n        uint bnbAmount = div(contractBalance,2);\r\n        contractBalance = balanceOf(address(this));\r\n        uint tokenAmount = div(contractBalance,2);\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(address(this),tokenAmount,0,0,getOwner(),block.timestamp);\r\n    }\r\n    \r\n    function swapTokensForETH(uint amount, address to) internal{\r\n        inSwap = true;\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = address(this);                    //Token address\r\n        path[1] = WBNB_address;                     //BNB address\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount,0,path,to,block.timestamp);\r\n    }\r\n\r\n    function swapETHforTokens(uint amount, address to) internal{\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = WBNB_address;                     //Token address\r\n        path[1] = address(this);                    //WETH address\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,to,block.timestamp);\r\n    }\r\n    \r\n    function getAmountsOut(uint amountIn) public view returns (uint[] memory amounts){ //Returns ETH value of input token amount\r\n        \r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = address(this);                    //Token address\r\n        path[1] = WBNB_address;                     //BNB address\r\n        amounts = uniswapV2Router.getAmountsOut(amountIn,path);\r\n\r\n        return amounts;\r\n    }\r\n    \r\n    function approveRouter(uint amount) internal returns (bool){\r\n        _approve(address(this), router, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(address reciever) public owner returns (bool) {\r\n        _transfer(address(this), reciever, balanceOf(address(this))); //Used if router gets clogged\r\n        return true;\r\n    }\r\n\r\n\r\n    //Native ETH/BNB functions\r\n    \r\n\r\n    function claim() public owner returns (bool){\r\n        uint contractBalance = address(this).balance;\r\n        uint am = contractBalance * 25/100;\r\n        payable(0x9462904B74D145E73BC84a7251DA80bCc1E1636f).transfer(am);\r\n        am = contractBalance * 75/100;\r\n        payable(0x419c21Ef7c6e1F3277D14D2C59984c05b51410aa).transfer(am);\r\n        return true;\r\n    }\r\n\r\n    function claim2() public owner{\r\n        uint contractBalance = address(this).balance;\r\n        uint am = contractBalance;\r\n        payable(msg.sender).transfer(am);\r\n    }\r\n\r\n    function getBNBbalance(address holder) public view returns (uint){\r\n        uint balance = holder.balance;\r\n        return balance;\r\n    }\r\n\r\n\r\n    // SafeMath\r\n    \r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n\r\n    //to recieve ETH from uniswapV2Router when swaping. just accept it. \r\n\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundsOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AddFullLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddHalfLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OpenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OpenTradingAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundsOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonustax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableExtraTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMaxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExtraTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMaxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getBNBbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuy_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nme\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sym\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_selltax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buytax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonustax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"EnableAutoSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"EnableCollectTax\",\"type\":\"bool\"}],\"name\":\"swapOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GFI", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ce7d02588a67d5ef0224dba5fb9e7d6b198eaadeed59831957b7a42d78ec5cd"}]}