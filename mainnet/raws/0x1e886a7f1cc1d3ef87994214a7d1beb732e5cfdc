{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-01-22\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for checking active staked tokens of a user.\r\n */\r\ninterface IWWStaking {\r\n  function getStakerTokens(address staker, address contractAddress) external view returns (uint256[] memory);\r\n}\r\n\r\n/**\r\n * @dev Interface for checking active balance of a user.\r\n */\r\ninterface IWWNFT {\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n}\r\n\r\ncontract WWDispensary is Ownable, ReentrancyGuard {\r\n\r\n\tIWWNFT public PG;\r\n\tIWWNFT public AP;\r\n\tIWWStaking public STAKING;\r\n\tmapping(uint256 => uint256) private _etherClaimedByPG;\r\n\tmapping(uint256 => uint256) private _etherClaimedByAP;\r\n\tuint256 private _allTimeEthDepositedPG;\r\n\tuint256 private _allTimeEthDepositedAP;\r\n\r\n\tconstructor(address _pg, address _ap, address _staking) {\r\n\t\tPG = IWWNFT(_pg);\r\n\t\tAP = IWWNFT(_ap);\r\n\t\tSTAKING = IWWStaking(_staking);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether accrued.\r\n\t */\r\n\tfunction _getTotalEtherPG() public view returns (uint256) {\r\n\t\treturn _allTimeEthDepositedPG;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether accrued.\r\n\t */\r\n\tfunction _getTotalEtherAP() public view returns (uint256) {\r\n\t\treturn _allTimeEthDepositedAP;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether owed to to the characters in account.\r\n\t */\r\n\tfunction _getTotalEtherOwed(address account) public view returns (uint256) {\r\n\t\tuint256 etherOwed = (((PG.balanceOf(account) + STAKING.getStakerTokens(account, address(PG)).length) * _getTotalEtherPG())/800) + (((AP.balanceOf(account) + STAKING.getStakerTokens(account, address(AP)).length) * _getTotalEtherAP())/1600);\r\n\t\treturn etherOwed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether owed per PG whale.\r\n\t */\r\n\tfunction _getTotalEtherPerPG() public view returns (uint256) {\r\n\t\tuint256 etherOwed = (_getTotalEtherPG()/800);\r\n\t\treturn etherOwed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether owed per AP character.\r\n\t */\r\n\tfunction _getTotalEtherPerAP() public view returns (uint256) {\r\n\t\tuint256 etherOwed = (_getTotalEtherAP()/1600);\r\n\t\treturn etherOwed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether claimed for a PG character.\r\n\t */\r\n\tfunction _getTotalEtherClaimedPG(uint256 tokenId) public view returns (uint256) {\r\n\t\tuint256 etherClaimed = _etherClaimedByPG[tokenId];\r\n\t\treturn etherClaimed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether claimed for a AP character.\r\n\t */\r\n\tfunction _getTotalEtherClaimedAP(uint256 tokenId) public view returns (uint256) {\r\n\t\tuint256 etherClaimed = _etherClaimedByAP[tokenId];\r\n\t\treturn etherClaimed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets total ether claimed for characters in account.\r\n\t */\r\n\tfunction _getTotalEtherClaimed(address account) public view returns (uint256) {\r\n\t\tuint256 totalEtherClaimed;\r\n\t\tuint256[] memory stakedPG = STAKING.getStakerTokens(account, address(PG));\r\n\t\tuint256[] memory stakedAP = STAKING.getStakerTokens(account, address(AP));\r\n\t\tfor (uint256 i; i < PG.balanceOf(account); i++) {\r\n\t\t\ttotalEtherClaimed += _etherClaimedByPG[PG.tokenOfOwnerByIndex(account, i)];\r\n\t\t}\r\n\t\tfor (uint256 i; i < stakedPG.length; i++) {\r\n\t\t\ttotalEtherClaimed += _etherClaimedByPG[stakedPG[i]];\r\n\t\t}\r\n\t\tfor (uint256 j; j < AP.balanceOf(account); j++) {\r\n\t\t\ttotalEtherClaimed += _etherClaimedByAP[AP.tokenOfOwnerByIndex(account, j)];\r\n\t\t}\r\n\t\tfor (uint256 j; j < stakedAP.length; j++) {\r\n\t\t\ttotalEtherClaimed += _etherClaimedByAP[stakedAP[j]];\r\n\t\t}\r\n\t\treturn totalEtherClaimed;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev gets current rewards for account.\r\n\t */\r\n\tfunction _getRewardsForAccount(address account) public view returns (uint256) {\r\n\t\tuint256 rewards = _getTotalEtherOwed(account) - _getTotalEtherClaimed(account);\r\n\t\treturn rewards;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev claims rewards for account.\r\n\t */\r\n\tfunction claimRewards() public nonReentrant {\r\n\t\taddress account = msg.sender;\r\n\t\tuint256 totalEtherOwed = _getTotalEtherOwed(account);\r\n\t\tuint256 _totalEtherOwedPerPG = _getTotalEtherPerPG();\r\n\t\tuint256 _totalEtherOwedPerAP = _getTotalEtherPerAP();\r\n\t\tuint256[] memory stakedPG = STAKING.getStakerTokens(account, address(PG));\r\n\t\tuint256[] memory stakedAP = STAKING.getStakerTokens(account, address(AP));\r\n\r\n\t\tuint256 totalEtherClaimed;\r\n\t\tfor (uint256 i; i < PG.balanceOf(account); i++) {\r\n\t\t\tuint256 tokenId = PG.tokenOfOwnerByIndex(account, i);\r\n\t\t\ttotalEtherClaimed += _etherClaimedByPG[tokenId];\r\n\t\t\tuint256 diff = _totalEtherOwedPerPG - _etherClaimedByPG[tokenId];\r\n\t\t\t_etherClaimedByPG[tokenId] += diff;\r\n\t\t}\r\n\t\tfor (uint256 i; i < stakedPG.length; i++) {\r\n\t\t\tuint256 tokenId = stakedPG[i];\r\n\t\t\ttotalEtherClaimed += _etherClaimedByPG[tokenId];\r\n\t\t\tuint256 diff = _totalEtherOwedPerPG - _etherClaimedByPG[tokenId];\r\n\t\t\t_etherClaimedByPG[tokenId] += diff;\r\n\t\t}\r\n\t\tfor (uint256 j; j < AP.balanceOf(account); j++) {\r\n\t\t\tuint256 tokenId = AP.tokenOfOwnerByIndex(account, j);\r\n\t\t\ttotalEtherClaimed += _etherClaimedByAP[tokenId];\r\n\t\t\tuint256 diff = _totalEtherOwedPerAP - _etherClaimedByAP[tokenId];\r\n\t\t\t_etherClaimedByAP[tokenId] += diff;\r\n\t\t}\r\n\t\tfor (uint256 j; j < stakedAP.length; j++) {\r\n\t\t\tuint256 tokenId = stakedAP[j];\r\n\t\t\ttotalEtherClaimed += _etherClaimedByAP[tokenId];\r\n\t\t\tuint256 diff = _totalEtherOwedPerAP - _etherClaimedByAP[tokenId];\r\n\t\t\t_etherClaimedByAP[tokenId] += diff;\r\n\t\t}\r\n\r\n\t\tuint256 rewards = totalEtherOwed - totalEtherClaimed;\r\n\t\trequire(rewards > 0, \"No rewards available to claim\");\r\n\r\n\t\taddress payable _to = payable(account);\r\n\t\t_to.transfer(rewards);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deposit ETH for PG holders.\r\n\t */\r\n\tfunction depositPG() public payable {\r\n\t\t_allTimeEthDepositedPG += msg.value;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev deposit ETH for AP holders.\r\n\t */\r\n\tfunction depositAP() public payable {\r\n\t\t_allTimeEthDepositedAP += msg.value;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev set PG smart contract.\r\n\t */\r\n\tfunction setPG(address _pg) public onlyOwner {\r\n\t\tPG = IWWNFT(_pg);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev set AP smart contract.\r\n\t */\r\n\tfunction setAP(address _ap) public onlyOwner {\r\n\t\tAP = IWWNFT(_ap);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev set STAKING smart contract.\r\n\t */\r\n\tfunction setStaking(address _staking) public onlyOwner {\r\n\t\tSTAKING = IWWStaking(_staking);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev failsafe to move funds out of smart-contract in case of contract migration\r\n\t */\r\n\tfunction withdrawAll() public onlyOwner {\r\n\t\taddress payable _to = payable(owner());\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\t_to.transfer(_balance);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AP\",\"outputs\":[{\"internalType\":\"contract IWWNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PG\",\"outputs\":[{\"internalType\":\"contract IWWNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING\",\"outputs\":[{\"internalType\":\"contract IWWStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getRewardsForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalEtherAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getTotalEtherClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_getTotalEtherClaimedAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_getTotalEtherClaimedPG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_getTotalEtherOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalEtherPG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalEtherPerAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTotalEtherPerPG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPG\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ap\",\"type\":\"address\"}],\"name\":\"setAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pg\",\"type\":\"address\"}],\"name\":\"setPG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WWDispensary", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000757f0e9e8a4f84650ae94caab516a00fd7fb29610000000000000000000000000cdc3052f7a13634ed1f30abae4b92953dd35fa6000000000000000000000000d665215893ce709b72951a816d157be616899cd2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a7c24d5826a49e6fa452b13aabc45cfd0012be93fb42b34fabddeff764031f8"}]}