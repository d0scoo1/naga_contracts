{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CorruptionsPaletteToCharacterHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// intended for internal use only (but have fun with it if you want)\\n\\npragma solidity^0.8.0;\\n\\ncontract CorruptionsPaletteToCharacterHelper { \\n    struct Cursor {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    function prepareCanvas(string[] memory charPaletteStrings, uint256 numChars, bytes memory composition) external pure returns (string[32] memory) {\\n        require(composition.length == 961, \\\"RenderHelper: wrong length\\\");\\n        bytes[256] memory charPalette;\\n        bytes[32] memory canvas;\\n        string[32] memory canvasString;\\n        for (uint8 i = 0; i < 32; i++) {\\n            canvasString[i] = \\\"&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;&#x0002e;\\\";\\n            canvas[i] = bytes(canvasString[i]);\\n        }\\n        Cursor memory cursor;\\n        for (uint256 i = 0; i < numChars; i++) {\\n            charPalette[i] = bytes(charPaletteStrings[i]);\\n        }\\n\\n        for (uint256 i = 0; i < 961; i++) {\\n            canvas[cursor.y][cursor.x * 9]      = charPalette[uint8(composition[i])][0];\\n            canvas[cursor.y][cursor.x * 9 + 1]  = charPalette[uint8(composition[i])][1];\\n            canvas[cursor.y][cursor.x * 9 + 2]  = charPalette[uint8(composition[i])][2];\\n            canvas[cursor.y][cursor.x * 9 + 3]  = charPalette[uint8(composition[i])][3];\\n            canvas[cursor.y][cursor.x * 9 + 4]  = charPalette[uint8(composition[i])][4];\\n            canvas[cursor.y][cursor.x * 9 + 5]  = charPalette[uint8(composition[i])][5];\\n            canvas[cursor.y][cursor.x * 9 + 6]  = charPalette[uint8(composition[i])][6];\\n            canvas[cursor.y][cursor.x * 9 + 7]  = charPalette[uint8(composition[i])][7];\\n            canvas[cursor.y][cursor.x * 9 + 8]  = charPalette[uint8(composition[i])][8];\\n            \\n            cursor.x++;\\n            if (cursor.x > 30) {\\n                cursor.x = 0;\\n                cursor.y++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            canvasString[i] = string(canvas[i]);\\n        }\\n\\n        return canvasString;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"charPaletteStrings\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"numChars\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"composition\",\"type\":\"bytes\"}],\"name\":\"prepareCanvas\",\"outputs\":[{\"internalType\":\"string[32]\",\"name\":\"\",\"type\":\"string[32]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CorruptionsPaletteToCharacterHelper", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}