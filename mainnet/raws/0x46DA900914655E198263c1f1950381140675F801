{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/libraries/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Ownable.sol\r\n\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n\r\n// P1 - P3: OK\r\npragma solidity 0.6.12;\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\n// T1 - T4: OK\r\ncontract OwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract Ownable is OwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/libraries/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n// File: contracts/libraries/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/interfaces/IVStrike.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IVStrike {\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Mint} event.\r\n     */\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: contracts/interfaces/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n    external returns (bytes4);\r\n}\r\n// File: contracts/interfaces/IStrikeBoostFarm.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IStrikeBoostFarm {\r\n    function move(uint256 pid, address sender, address recipient, uint256 amount) external;\r\n}\r\n// File: contracts/interfaces/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: contracts/interfaces/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n// File: contracts/interfaces/IERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n// File: contracts/interfaces/IBoostToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\ninterface IBoostToken is IERC721Enumerable {\r\n    function updateStakeTime(uint tokenId, bool isStake) external;\r\n\r\n    function getTokenOwner(uint tokenId) external view returns(address);\r\n}\r\n// File: contracts/StrikeBoostFarm.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// StrikeFarm is the master of Farm.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once STRIKE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract StrikeBoostFarm is IStrikeBoostFarm, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 pendingAmount; // non-eligible lp amount for reward\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 depositedDate; // Latest deposited date\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of STRIKEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n        uint256[] boostFactors;\r\n        uint256 boostRewardDebt; // Boost Reward debt. See explanation below.\r\n        uint256 boostedDate; // Latest boosted date\r\n        uint256 accBoostReward;\r\n        uint256 accBaseReward;\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. STRIKEs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that STRIKEs distribution occurs.\r\n        uint256 accRewardPerShare; // Accumulated STRIKEs per share, times 1e12. See below.\r\n        uint256 totalBoostCount; // Total valid boosted accounts count.\r\n        uint256 rewardEligibleSupply; // total LP supply of users which staked boost token.\r\n    }\r\n    // The STRIKE TOKEN!\r\n    address public strk;\r\n    // The vSTRIKE TOKEN!\r\n    address public vStrk;\r\n    // The Reward TOKEN!\r\n    address public rewardToken;\r\n    // Block number when bonus STRIKE period ends.\r\n    uint256 public bonusEndBlock;\r\n    // STRIKE tokens created per block.\r\n    uint256 public rewardPerBlock;\r\n    // Bonus muliplier for early STRIKEex makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 10;\r\n    // VSTRIKE minting rate\r\n    uint256 public constant VSTRK_RATE = 10;\r\n    // Info of each pool.\r\n    PoolInfo[] private poolInfo;\r\n    // Total STRIKE amount deposited in STRIKE single pool. To reduce tx-fee, not included in struct PoolInfo.\r\n    uint256 private lpSupplyOfStrikePool;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // claimable time limit for base reward\r\n    uint256 public claimBaseRewardTime = 1 days;\r\n    uint256 public unstakableTime = 2 days;\r\n    uint256 public initialBoostMultiplier = 20;\r\n    uint256 public boostMultiplierFactor = 10;\r\n\r\n    // Boosting Part\r\n    // Minimum vaild boost NFT count\r\n    uint16 public minimumValidBoostCount = 1;\r\n    // Maximum boost NFT count\r\n    uint16 public maximumBoostCount = 20;\r\n    // NFT contract for boosting\r\n    IBoostToken public boostFactor;\r\n    // Boosted with NFT or not\r\n    mapping (uint256 => bool) public isBoosted;\r\n    // claimable time limit for boost reward\r\n    uint256 public claimBoostRewardTime = 30 days;\r\n    // boosted user list\r\n    mapping(uint256 => address[]) private boostedUsers;\r\n\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when STRIKE mining starts.\r\n    uint256 public startBlock;\r\n    uint256 private accMulFactor = 1e12;\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event ClaimBaseRewards(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event ClaimBoostRewards(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event Boost(address indexed user, uint256 indexed pid, uint256 tokenId);\r\n    event UnBoost(address indexed user, uint256 indexed pid, uint256 tokenId);\r\n\r\n    constructor(\r\n        address _strk,\r\n        address _rewardToken,\r\n        address _vStrk,\r\n        address _boost,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) public {\r\n        strk = _strk;\r\n        rewardToken = _rewardToken;\r\n        vStrk = _vStrk;\r\n        boostFactor = IBoostToken(_boost);\r\n        rewardPerBlock = _rewardPerBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n\r\n    function getPoolInfo(uint _pid) external view returns (\r\n        IERC20 lpToken,\r\n        uint256 lpSupply,\r\n        uint256 allocPoint,\r\n        uint256 lastRewardBlock,\r\n        uint accRewardPerShare,\r\n        uint totalBoostCount,\r\n        uint256 rewardEligibleSupply\r\n    ) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 amount;\r\n        if (strk == address(pool.lpToken)) {\r\n            amount = lpSupplyOfStrikePool;\r\n        } else {\r\n            amount = pool.lpToken.balanceOf(address(this));\r\n        }\r\n        return (\r\n            pool.lpToken,\r\n            amount,\r\n            pool.allocPoint,\r\n            pool.lastRewardBlock,\r\n            pool.accRewardPerShare,\r\n            pool.totalBoostCount,\r\n            pool.rewardEligibleSupply\r\n        );\r\n    }\r\n\r\n    function getUserInfo(uint256 _pid, address _user) external view returns(\r\n        uint256 amount,\r\n        uint256 pendingAmount,\r\n        uint256 rewardDebt,\r\n        uint256 depositedDate,\r\n        uint256[] memory boostFactors,\r\n        uint256 boostRewardDebt,\r\n        uint256 boostedDate,\r\n        uint256 accBoostReward,\r\n        uint256 accBaseReward\r\n    ) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        return (\r\n            user.amount,\r\n            user.pendingAmount,\r\n            user.rewardDebt,\r\n            user.depositedDate,\r\n            user.boostFactors,\r\n            user.boostRewardDebt,\r\n            user.boostedDate,\r\n            user.accBoostReward,\r\n            user.accBaseReward\r\n        );\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accRewardPerShare: 0,\r\n                totalBoostCount: 0,\r\n                rewardEligibleSupply: 0\r\n            })\r\n        );\r\n    }\r\n\r\n    // Update the given pool's STRIKE allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Update the given STRIKE per block. Can only be called by the owner.\r\n    function setRewardPerBlock(\r\n        uint256 speed\r\n    ) public onlyOwner {\r\n        rewardPerBlock = speed;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return\r\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                    _to.sub(bonusEndBlock)\r\n                );\r\n        }\r\n    }\r\n\r\n    function getValidBoostFactors(uint256 userBoostFactors) internal view returns (uint256) {\r\n        uint256 validBoostFactors = userBoostFactors > minimumValidBoostCount ? userBoostFactors - minimumValidBoostCount : 0;\r\n\r\n        return validBoostFactors;\r\n    }\r\n\r\n    function getBoostMultiplier(uint256 boostFactorCount) internal view returns (uint256) {\r\n        if (boostFactorCount <= minimumValidBoostCount) {\r\n            return 0;\r\n        }\r\n        uint256 initBoostCount = boostFactorCount.sub(minimumValidBoostCount + 1);\r\n\r\n        return initBoostCount.mul(boostMultiplierFactor).add(initialBoostMultiplier);\r\n    }\r\n\r\n    // View function to see pending STRIKEs on frontend.\r\n    function pendingReward(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n\r\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\r\n            uint256 multiplier =\r\n                getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 reward =\r\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                    totalAllocPoint\r\n                );\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n            );\r\n        }\r\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\r\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100).add(user.accBoostReward).sub(user.boostRewardDebt);\r\n        return baseReward.add(boostReward).add(user.accBaseReward);\r\n    }\r\n\r\n    // View function to see pending STRIKEs on frontend.\r\n    function pendingBaseReward(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n\r\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\r\n            uint256 multiplier =\r\n                getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 reward =\r\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                    totalAllocPoint\r\n                );\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n            );\r\n        }\r\n\r\n        uint256 newReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n        return newReward.add(user.accBaseReward);\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (pool.rewardEligibleSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 reward =\r\n            multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                totalAllocPoint\r\n            );\r\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\r\n            reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n        );\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Check the eligible user or not for reward\r\n    function checkRewardEligible(uint boost) internal view returns(bool) {\r\n        if (boost >= minimumValidBoostCount) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Check claim eligible\r\n    function checkRewardClaimEligible(uint depositedTime) internal view returns(bool) {\r\n        if (block.timestamp - depositedTime > claimBaseRewardTime) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Claim base lp reward\r\n    function _claimBaseRewards(uint256 _pid, address _user) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        bool claimEligible = checkRewardClaimEligible(user.depositedDate);\r\n\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\r\n\r\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100);\r\n        user.accBoostReward = user.accBoostReward.add(boostReward);\r\n        uint256 rewards;\r\n\r\n        if (claimEligible && baseReward > 0) {\r\n            rewards = baseReward.add(user.accBaseReward);\r\n            safeRewardTransfer(_user, rewards);\r\n            user.accBaseReward = 0;\r\n        } else {\r\n            rewards = 0;\r\n            user.accBaseReward = baseReward.add(user.accBaseReward);\r\n        }\r\n\r\n        emit ClaimBaseRewards(_user, _pid, rewards);\r\n\r\n        user.depositedDate = block.timestamp;\r\n    }\r\n\r\n    function claimBaseRewards(uint256 _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        bool claimEligible = checkRewardClaimEligible(user.depositedDate);\r\n        require(claimEligible == true, \"not claim eligible\");\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n    }\r\n\r\n    // Deposit LP tokens to STRIKEswap for STRIKE allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        bool rewardEligible = checkRewardEligible(user.boostFactors.length);\r\n\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        pool.lpToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        if (strk == address(pool.lpToken)) {\r\n            lpSupplyOfStrikePool = lpSupplyOfStrikePool.add(_amount);\r\n        }\r\n        if (rewardEligible) {\r\n            user.amount = user.amount.add(user.pendingAmount).add(_amount);\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.add(_amount);\r\n            user.pendingAmount = 0;\r\n        } else {\r\n            user.pendingAmount = user.pendingAmount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        if (_amount > 0) {\r\n            IVStrike(vStrk).mint(msg.sender, _amount.mul(VSTRK_RATE));\r\n        }\r\n        user.boostedDate = block.timestamp;\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from STRIKEexFarm.\r\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount + user.pendingAmount >= _amount, \"withdraw: not good\");\r\n        require(block.timestamp - user.depositedDate > unstakableTime, \"not eligible to withdraw\");\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n        if (user.amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(_amount);\r\n        } else {\r\n            user.pendingAmount = user.pendingAmount.sub(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        // will loose unclaimed boost reward\r\n        user.accBoostReward = 0;\r\n        user.boostRewardDebt = 0;\r\n        user.boostedDate = block.timestamp;\r\n        if (strk == address(pool.lpToken)) {\r\n            lpSupplyOfStrikePool = lpSupplyOfStrikePool.sub(_amount);\r\n        }\r\n        if (_amount > 0) {\r\n            IVStrike(vStrk).burnFrom(msg.sender, _amount.mul(VSTRK_RATE));\r\n        }\r\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // transfer VSTRIKE\r\n    function move(uint256 _pid, address _sender, address _recipient, uint256 _vstrikeAmount) override external nonReentrant {\r\n        require(vStrk == msg.sender);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage sender = userInfo[_pid][_sender];\r\n        UserInfo storage recipient = userInfo[_pid][_recipient];\r\n\r\n        uint256 amount = _vstrikeAmount.div(VSTRK_RATE);\r\n\r\n        require(sender.amount + sender.pendingAmount >= amount, \"transfer exceeds amount\");\r\n        require(block.timestamp - sender.depositedDate > unstakableTime, \"not eligible to undtake\");\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, _sender);\r\n\r\n        if (sender.amount > 0) {\r\n            sender.amount = sender.amount.sub(amount);\r\n        } else {\r\n            sender.pendingAmount = sender.pendingAmount.sub(amount);\r\n        }\r\n        sender.rewardDebt = sender.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        sender.boostedDate = block.timestamp;\r\n        // will loose unclaimed boost reward\r\n        sender.accBoostReward = 0;\r\n        sender.boostRewardDebt = 0;\r\n\r\n        bool claimEligible = checkRewardClaimEligible(recipient.depositedDate);\r\n        bool rewardEligible = checkRewardEligible(recipient.boostFactors.length);\r\n\r\n        if (claimEligible && rewardEligible) {\r\n            _claimBaseRewards(_pid, _recipient);\r\n        }\r\n\r\n        if (rewardEligible) {\r\n            recipient.amount = recipient.amount.add(recipient.pendingAmount).add(amount);\r\n            recipient.pendingAmount = 0;\r\n        } else {\r\n            recipient.pendingAmount = recipient.pendingAmount.add(amount);\r\n        }\r\n        recipient.rewardDebt = recipient.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        recipient.boostedDate = block.timestamp;\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount.add(user.pendingAmount));\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        if (user.amount > 0) {\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.amount);\r\n        }\r\n        user.amount = 0;\r\n        user.pendingAmount = 0;\r\n        user.rewardDebt = 0;\r\n        user.boostRewardDebt = 0;\r\n        user.accBoostReward = 0;\r\n    }\r\n\r\n    // Safe rewardToken transfer function, just in case if rounding error causes pool to not have enough STRIKEs.\r\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        uint256 availableBal = IERC20(rewardToken).balanceOf(address(this));\r\n\r\n        // Protect users liquidity\r\n        if (strk == rewardToken) {\r\n            if (availableBal > lpSupplyOfStrikePool) {\r\n                availableBal = availableBal - lpSupplyOfStrikePool;\r\n            } else {\r\n                availableBal = 0;\r\n            }\r\n        }\r\n\r\n        if (_amount > availableBal) {\r\n            IERC20(rewardToken).transfer(_to, availableBal);\r\n        } else {\r\n            IERC20(rewardToken).transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function setAccMulFactor(uint256 _factor) external onlyOwner {\r\n        accMulFactor = _factor;\r\n    }\r\n\r\n    function updateInitialBoostMultiplier(uint _initialBoostMultiplier) external onlyOwner {\r\n        initialBoostMultiplier = _initialBoostMultiplier;\r\n    }\r\n\r\n    function updatedBoostMultiplierFactor(uint _boostMultiplierFactor) external onlyOwner {\r\n        boostMultiplierFactor = _boostMultiplierFactor;\r\n    }\r\n\r\n    // Update reward token address by owner.\r\n    function updateRewardToken(address _reward) external onlyOwner {\r\n        rewardToken = _reward;\r\n    }\r\n\r\n    // Update claimBaseRewardTime\r\n    function updateClaimBaseRewardTime(uint256 _claimBaseRewardTime) external onlyOwner {\r\n        claimBaseRewardTime = _claimBaseRewardTime;\r\n    }\r\n\r\n    // Update unstakableTime\r\n    function updateUnstakableTime(uint256 _unstakableTime) external onlyOwner {\r\n        unstakableTime = _unstakableTime;\r\n    }\r\n\r\n    // NFT Boosting\r\n    // get boosted users\r\n    function getBoostedUserCount(uint256 _pid) external view returns(uint256) {\r\n        return boostedUsers[_pid].length;\r\n    }\r\n\r\n    // View function to see pending STRIKEs on frontend.\r\n    function pendingBoostReward(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n\r\n        if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\r\n            uint256 multiplier =\r\n                getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 reward =\r\n                multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                    totalAllocPoint\r\n                );\r\n            accRewardPerShare = accRewardPerShare.add(\r\n                reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n            );\r\n        }\r\n\r\n        uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\r\n        uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n        uint256 boostReward = boostMultiplier.mul(baseReward).div(100);\r\n        return user.accBoostReward.sub(user.boostRewardDebt).add(boostReward);\r\n    }\r\n\r\n    // for deposit reward token to contract\r\n    function getTotalPendingBoostRewards() external view returns (uint256) {\r\n        uint256 totalRewards;\r\n        for (uint i; i < poolInfo.length; i++) {\r\n            PoolInfo storage pool = poolInfo[i];\r\n            uint256 accRewardPerShare = pool.accRewardPerShare;\r\n\r\n            for (uint j; j < boostedUsers[i].length; j++) {\r\n                UserInfo storage user = userInfo[i][boostedUsers[i][j]];\r\n\r\n                if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\r\n                    uint256 multiplier =\r\n                        getMultiplier(pool.lastRewardBlock, block.number);\r\n                    uint256 reward =\r\n                        multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                            totalAllocPoint\r\n                        );\r\n                    accRewardPerShare = accRewardPerShare.add(\r\n                        reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n                    );\r\n                }\r\n                uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\r\n                uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n                uint256 initBoostReward = boostMultiplier.mul(baseReward).div(100);\r\n                uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt).add(initBoostReward);\r\n                totalRewards = totalRewards.add(boostReward);\r\n            }\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    // for deposit reward token to contract\r\n    function getClaimablePendingBoostRewards() external view returns (uint256) {\r\n        uint256 totalRewards;\r\n        for (uint i; i < poolInfo.length; i++) {\r\n            PoolInfo storage pool = poolInfo[i];\r\n            uint256 accRewardPerShare = pool.accRewardPerShare;\r\n\r\n            for (uint j; j < boostedUsers[i].length; j++) {\r\n                UserInfo storage user = userInfo[i][boostedUsers[i][j]];\r\n\r\n                if (block.timestamp - user.boostedDate >= claimBoostRewardTime) {\r\n                    if (block.number > pool.lastRewardBlock && pool.rewardEligibleSupply > 0) {\r\n                        uint256 multiplier =\r\n                            getMultiplier(pool.lastRewardBlock, block.number);\r\n                        uint256 reward =\r\n                            multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(\r\n                                totalAllocPoint\r\n                            );\r\n                        accRewardPerShare = accRewardPerShare.add(\r\n                            reward.mul(accMulFactor).div(pool.rewardEligibleSupply)\r\n                        );\r\n                    }\r\n                    uint256 boostMultiplier = getBoostMultiplier(user.boostFactors.length);\r\n                    uint256 baseReward = user.amount.mul(accRewardPerShare).div(accMulFactor).sub(user.rewardDebt);\r\n                    uint256 initBoostReward = boostMultiplier.mul(baseReward).div(100);\r\n                    uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt).add(initBoostReward);\r\n                    totalRewards = totalRewards.add(boostReward);\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    // Claim boost reward\r\n    function claimBoostReward(uint256 _pid) external {\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(block.timestamp - user.boostedDate > claimBoostRewardTime, \"not eligible to claim\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        uint256 boostReward = user.accBoostReward.sub(user.boostRewardDebt);\r\n        safeRewardTransfer(msg.sender, boostReward);\r\n        emit ClaimBoostRewards(msg.sender, _pid, boostReward);\r\n        user.boostRewardDebt = user.boostRewardDebt.add(boostReward);\r\n        user.boostedDate = block.timestamp;\r\n    }\r\n\r\n    function _boost(uint256 _pid, uint _tokenId) internal {\r\n        require (isBoosted[_tokenId] == false, \"already boosted\");\r\n\r\n        boostFactor.transferFrom(msg.sender, address(this), _tokenId);\r\n        boostFactor.updateStakeTime(_tokenId, true);\r\n\r\n        isBoosted[_tokenId] = true;\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (user.pendingAmount > 0) {\r\n            user.amount = user.pendingAmount;\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.add(user.amount);\r\n            user.pendingAmount = 0;\r\n        }\r\n        user.boostFactors.push(_tokenId);\r\n        pool.totalBoostCount = pool.totalBoostCount + 1;\r\n\r\n        emit Boost(msg.sender, _pid, _tokenId);\r\n    }\r\n\r\n    function boost(uint256 _pid, uint _tokenId) external {\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount + user.pendingAmount > 0, \"no stake tokens\");\r\n        require(user.boostFactors.length + 1 <= maximumBoostCount);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (user.boostFactors.length == 0) {\r\n            boostedUsers[_pid].push(msg.sender);\r\n        }\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        _boost(_pid, _tokenId);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        user.boostedDate = block.timestamp;\r\n    }\r\n\r\n    function boostPartially(uint _pid, uint tokenAmount) external {\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount + user.pendingAmount > 0, \"no stake tokens\");\r\n        require(user.boostFactors.length + tokenAmount <= maximumBoostCount);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (user.boostFactors.length == 0) {\r\n            boostedUsers[_pid].push(msg.sender);\r\n        }\r\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\r\n        require(tokenAmount <= ownerTokenCount);\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        for (uint i; i < tokenAmount; i++) {\r\n            uint _tokenId = boostFactor.tokenOfOwnerByIndex(msg.sender, 0);\r\n\r\n            _boost(_pid, _tokenId);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        user.boostedDate = block.timestamp;\r\n    }\r\n\r\n    function boostAll(uint _pid, uint256[] memory _tokenIds) external {\r\n        uint256 tokenIdLength = _tokenIds.length;\r\n        require(tokenIdLength > 0, \"\");\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount + user.pendingAmount > 0, \"no stake tokens\");\r\n        uint256 ownerTokenCount = boostFactor.balanceOf(msg.sender);\r\n        require(ownerTokenCount > 0, \"\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (user.boostFactors.length == 0) {\r\n            boostedUsers[_pid].push(msg.sender);\r\n        }\r\n        uint256 availableTokenAmount = maximumBoostCount - user.boostFactors.length;\r\n        require(availableTokenAmount > 0, \"overflow maximum boosting\");\r\n\r\n        if (tokenIdLength < availableTokenAmount) {\r\n            availableTokenAmount = tokenIdLength;\r\n        }\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        for (uint256 i; i < availableTokenAmount; i++) {\r\n            _boost(_pid, _tokenIds[i]);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n        user.boostedDate = block.timestamp;\r\n    }\r\n\r\n    function _unBoost(uint _pid, uint _tokenId) internal {\r\n        require (isBoosted[_tokenId] == true);\r\n\r\n        boostFactor.transferFrom(address(this), msg.sender, _tokenId);\r\n        boostFactor.updateStakeTime(_tokenId, false);\r\n\r\n        isBoosted[_tokenId] = false;\r\n\r\n        emit UnBoost(msg.sender, _pid, _tokenId);\r\n    }\r\n\r\n    function unBoost(uint _pid, uint _tokenId) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.boostFactors.length > 0, \"\");\r\n        uint factorLength = user.boostFactors.length;\r\n\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        _unBoost(_pid, _tokenId);\r\n        uint dfId; // will be deleted factor index\r\n        for (uint j; j < factorLength; j++) {\r\n            if (_tokenId == user.boostFactors[j]) {\r\n                dfId = j;\r\n                break;\r\n            }\r\n        }\r\n        user.boostFactors[dfId] = user.boostFactors[factorLength - 1];\r\n        user.boostFactors.pop();\r\n        pool.totalBoostCount = pool.totalBoostCount - 1;\r\n\r\n        user.boostedDate = block.timestamp;\r\n        // will loose unclaimed boost reward\r\n        user.accBoostReward = 0;\r\n        user.boostRewardDebt = 0;\r\n\r\n        uint boostedUserCount = boostedUsers[_pid].length;\r\n        if (user.boostFactors.length == 0) {\r\n            user.pendingAmount = user.amount;\r\n            user.amount = 0;\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\r\n\r\n            uint index;\r\n            for (uint j; j < boostedUserCount; j++) {\r\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\r\n            boostedUsers[_pid].pop();\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n    }\r\n\r\n    function unBoostPartially(uint _pid, uint tokenAmount) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.boostFactors.length > 0, \"\");\r\n        require(tokenAmount <= user.boostFactors.length, \"\");\r\n        uint factorLength = user.boostFactors.length;\r\n\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        for (uint i = 1; i <= tokenAmount; i++) {\r\n            uint index = factorLength - i;\r\n            uint _tokenId = user.boostFactors[index];\r\n\r\n            _unBoost(_pid, _tokenId);\r\n            user.boostFactors.pop();\r\n            pool.totalBoostCount = pool.totalBoostCount - 1;\r\n        }\r\n        user.boostedDate = block.timestamp;\r\n        // will loose unclaimed boost reward\r\n        user.accBoostReward = 0;\r\n        user.boostRewardDebt = 0;\r\n\r\n        uint boostedUserCount = boostedUsers[_pid].length;\r\n        if (user.boostFactors.length == 0) {\r\n            user.pendingAmount = user.amount;\r\n            user.amount = 0;\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\r\n\r\n            uint index;\r\n            for (uint j; j < boostedUserCount; j++) {\r\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\r\n            boostedUsers[_pid].pop();\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n    }\r\n\r\n    function unBoostAll(uint _pid) external {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint factorLength = user.boostFactors.length;\r\n        require(factorLength > 0, \"\");\r\n\r\n        updatePool(_pid);\r\n        _claimBaseRewards(_pid, msg.sender);\r\n\r\n        for (uint i = 0; i < factorLength; i++) {\r\n            uint _tokenId = user.boostFactors[i];\r\n            _unBoost(_pid, _tokenId);\r\n        }\r\n        delete user.boostFactors;\r\n        pool.totalBoostCount = pool.totalBoostCount - factorLength;\r\n        user.boostedDate = block.timestamp;\r\n\r\n        // will loose unclaimed boost reward\r\n        user.accBoostReward = 0;\r\n        user.boostRewardDebt = 0;\r\n\r\n        uint boostedUserCount = boostedUsers[_pid].length;\r\n        if (user.boostFactors.length == 0) {\r\n            user.pendingAmount = user.amount;\r\n            user.amount = 0;\r\n            pool.rewardEligibleSupply = pool.rewardEligibleSupply.sub(user.pendingAmount);\r\n\r\n            uint index;\r\n            for (uint j; j < boostedUserCount; j++) {\r\n                if (address(msg.sender) == address(boostedUsers[_pid][j])) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            boostedUsers[_pid][index] = boostedUsers[_pid][boostedUserCount - 1];\r\n            boostedUsers[_pid].pop();\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(accMulFactor);\r\n    }\r\n\r\n    // Update boostFactor address. Can only be called by the owner.\r\n    function setBoostFactor(\r\n        address _address\r\n    ) external onlyOwner {\r\n        boostFactor = IBoostToken(_address);\r\n    }\r\n\r\n    // Update claimBoostRewardTime\r\n    function updateClaimBoostRewardTime(uint256 _claimBoostRewardTime) external onlyOwner {\r\n        claimBoostRewardTime = _claimBoostRewardTime;\r\n    }\r\n\r\n    // Update minimum valid boost token count. Can only be called by the owner.\r\n    function updateMinimumValidBoostCount(uint16 _count) external onlyOwner {\r\n        minimumValidBoostCount = _count;\r\n    }\r\n\r\n    // Update maximum valid boost token count. Can only be called by the owner.\r\n    function updateMaximumBoostCount(uint16 _count) external onlyOwner {\r\n        maximumBoostCount = _count;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vStrk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boost\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBaseRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBoostRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VSTRK_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"boostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFactor\",\"outputs\":[{\"internalType\":\"contract IBoostToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostMultiplierFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"boostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBaseRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBaseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimBoostReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoostRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostedUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimablePendingBoostRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEligibleSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingBoostRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"boostFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"boostRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBoostReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBaseReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isBoosted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBoostCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumValidBoostCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vstrikeAmount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBoostReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"setAccMulFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBoostFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unBoostAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unBoostPartially\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimBaseRewardTime\",\"type\":\"uint256\"}],\"name\":\"updateClaimBaseRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimBoostRewardTime\",\"type\":\"uint256\"}],\"name\":\"updateClaimBoostRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialBoostMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateInitialBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"updateMaximumBoostCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"updateMinimumValidBoostCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakableTime\",\"type\":\"uint256\"}],\"name\":\"updateUnstakableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostMultiplierFactor\",\"type\":\"uint256\"}],\"name\":\"updatedBoostMultiplierFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBoostReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBaseReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vStrk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrikeBoostFarm", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ff734dcb7fd6517caed5c6c8720992a0c676c80000000000000000000000000074232704659ef37c08995e386a2e26cc27a8d7b100000000000000000000000010b1362633ff9fb12bf6f41b4a0a27d56c9d1ef4000000000000000000000000474d72f1a6a7884b62edacc8d24d0815d01a65a2000000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000000000000e43d160000000000000000000000000000000000000000000000000000000000e43d16", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c93d1973ced36908cf3e4cd58d962d9c263744a496bff13176519e84f079b43e"}]}