{"status": "1", "message": "OK", "result": [{"SourceCode": "/******************************************************************************************************************************\r\n\r\nCryptoSyno is the go-to source for DeFi cryptocurrency gambling.\r\n\r\nWebsite: \r\n- https://cryptosyno.io/\r\n\r\nSocial Media Links:\r\n- https://discord.gg/CryptoSyno\r\n- https://twitter.com/CryptoSyno_CSYN\r\n\r\nFor questions/concerns/inquiries, feel free to pop into the discord or email us at: contact@cryptosyno.io\r\n\r\nBuy\r\n- 0% Sent to burn address\r\n\r\nSell\r\n- 1% Reflections\r\n- 2% Sent to burn address\r\n- 2% Sent to CryptoSyno reward pool\r\n\r\nSlot Machine Odds\r\n- House odds 0.1% - 10% of the prize pool is sent to the dead address.\r\n- Big win odds 0.1% - Win 10% of the prize pool.\r\n- Standard win odds 8% - Win 1% of the prize pool.\r\n- After 3 losses in a row, user is granted a 2x  odds increase. \r\n- Users will keep getting extra odds increase for every lose if their lose streak is 3+. \r\n- After winning any reward, probabilities will reset to normal.\r\n\r\nAdd your Own Token\r\n- User submits token.\r\n- Must be 18 decimals.\r\n- Must select spin cost.\r\n- Listing fee 777 CryptoSyno (Sent to dead address)\r\n\r\nVIP STATUS\r\n- x1000 $CSYN tokens sent to the dead address.\r\n- Grants personalized remote concierge service.\r\n\r\n******************************************************************************************************************************/\r\n\r\npragma solidity ^0.8.6;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// SPDX-License-Identifier:MIT\r\n\r\n// BEP20 token standard interface\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `_account`.\r\n     */\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's _account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one _account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Dex Factory contract interface\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// Dex Router02 contract interface\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the _account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an _account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner _account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any _account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new _account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev set the owner for the first time.\r\n     * Can only be called by the contract or deployer.\r\n     */\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// Main token Contract\r\n\r\ncontract Cryptosyno is Context, IBEP20, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // all private variables and functions are only for contract use\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromReward;\r\n    mapping(address => bool) private _isExcludedFrommaxTransferLimit;\r\n    mapping(address => bool) private _isEXcludedFrommaxWallet;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant percentDivider = 1_000;\r\n    uint256 private _tTotal = 7_777_777 ether; // 7.77 million total supply\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"CryptoSyno\"; // token name\r\n    string private _symbol = \"CSYN\"; // token ticker\r\n    uint8 private _decimals = 18; // token decimals\r\n\r\n    IDexRouter public dexRouter; // Dex router address\r\n    address public dexPair; // LP token address\r\n    address public slotMachine; // Slot Machine wallet address\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD; // dead address\r\n\r\n    uint256 public maxTransferingAmount = _tTotal.div(100); // maximum sending limit is 1% percent of total supply\r\n    uint256 public maxWalletAmount = _tTotal.div(100); // maximum wallet limit is 1% percent of total supply\r\n    uint256 public maxFee = 100; // 10% max fees limit per transaction\r\n    uint256 private excludedTSupply; // for contract use\r\n    uint256 private excludedRSupply; // for contract use\r\n\r\n    bool public reflectionFees = true; // should be false to charge fee\r\n    bool public tradingOpen; //once switched on, can never be switched off.\r\n    bool public ismaxTransferLimitValid = true; // max sending Limit is valid if it's true\r\n    bool public ismaxWalletValid = true; // max wallet limit is valid if it's true\r\n\r\n    // buy tax fee\r\n    uint256 public redistributionFeeOnBuying = 0; // 0% will be distributed among holder as token divideneds\r\n    uint256 public slotMachineFeeOnBuying = 0; // 0% will go to the Slot Machine address\r\n    uint256 public burnFeeOnBuying = 10; // 1% will go to the burn address\r\n\r\n    // sell tax fee\r\n    uint256 public redistributionFeeOnSelling = 10; // 1% will be distributed among holder as token divideneds\r\n    uint256 public slotMachineFeeOnSelling = 20; // 2% will go to the Slot Machine address\r\n    uint256 public burnFeeOnSelling = 20; // 2% will go to the burn address\r\n\r\n    // normal tax fee\r\n    uint256 public redistributionFee = 0; // 0% will be distributed among holder as token divideneds\r\n    uint256 public slotMachineFee = 0; // 0% will go to the Slot Machine address\r\n    uint256 public burnFee = 0; // 0% will go to the burn address\r\n\r\n    // for smart contract use\r\n    uint256 private _currentRedistributionFee;\r\n    uint256 private _currentslotMachineFee;\r\n    uint256 private _currentburnFee;\r\n\r\n    uint256 private _accumulatedslotMachine;\r\n    uint256 private _accumulatedburn;\r\n\r\n    // constructor for initializing the contract\r\n    constructor() {\r\n        _rOwned[owner()] = _rTotal;\r\n        //mainnet\r\n        IDexRouter _dexRouter = IDexRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        // Create a Dex pair for this new token\r\n        dexPair = IDexFactory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            _dexRouter.WETH()\r\n        );\r\n\r\n        // set the rest of the contract variables\r\n        dexRouter = _dexRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude addresses from max tx\r\n        _isExcludedFrommaxTransferLimit[owner()] = true;\r\n        _isExcludedFrommaxTransferLimit[address(this)] = true;\r\n        _isExcludedFrommaxTransferLimit[dexPair] = true;\r\n        _isExcludedFrommaxTransferLimit[burnAddress] = true;\r\n        //exclude addresses from max wallet\r\n        _isEXcludedFrommaxWallet[owner()] = true;\r\n        _isEXcludedFrommaxWallet[address(this)] = true;\r\n        _isEXcludedFrommaxWallet[dexPair] = true;\r\n        _isEXcludedFrommaxWallet[burnAddress] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    // token standards by Blockchain\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (_isExcludedFromReward[_account]) return _tOwned[_account];\r\n        return tokenFromReflection(_rOwned[_account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // public view able functions\r\n\r\n    // to check wether the address is excluded from reward or not\r\n    function isExcludedFromReward(address _account) public view returns (bool) {\r\n        return _isExcludedFromReward[_account];\r\n    }\r\n\r\n    // to check wether the address is excluded from fee or not\r\n    function isExcludedFromFee(address _account) public view returns (bool) {\r\n        return _isExcludedFromFee[_account];\r\n    }\r\n\r\n    // to check wether the address is excluded from max sending or not\r\n    function isExcludedFrommaxTransferLimit(address _account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFrommaxTransferLimit[_account];\r\n    }\r\n\r\n    function isExcludedFrommaxWallet(address _account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isEXcludedFrommaxWallet[_account];\r\n    }\r\n\r\n    // to check how much tokens get redistributed among holders till now\r\n    function totalHolderDistribution() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    // For manual distribution to the holders\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcludedFromReward[sender],\r\n            \"BEP20: Excluded addresses cannot call this function\"\r\n        );\r\n        uint256 rAmount = tAmount.mul(_getRate());\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"BEP20: Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            return rAmount;\r\n        } else {\r\n            uint256 rAmount = tAmount.mul(_getRate());\r\n            uint256 rTransferAmount = rAmount.sub(\r\n                totalFeePerTx(tAmount).mul(_getRate())\r\n            );\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"BEP20: Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    // setter functions for owner\r\n\r\n    // to include any address in reward\r\n    function includeInReward(address _account) external onlyOwner {\r\n        require(\r\n            _isExcludedFromReward[_account],\r\n            \"BEP20: _Account is already excluded\"\r\n        );\r\n        excludedTSupply = excludedTSupply.sub(_tOwned[_account]);\r\n        excludedRSupply = excludedRSupply.sub(_rOwned[_account]);\r\n        _rOwned[_account] = _tOwned[_account].mul(_getRate());\r\n        _tOwned[_account] = 0;\r\n        _isExcludedFromReward[_account] = false;\r\n    }\r\n\r\n    //to include any address in reward\r\n    function excludeFromReward(address _account) public onlyOwner {\r\n        require(\r\n            !_isExcludedFromReward[_account],\r\n            \"BEP20: _Account is already excluded\"\r\n        );\r\n        if (_rOwned[_account] > 0) {\r\n            _tOwned[_account] = tokenFromReflection(_rOwned[_account]);\r\n        }\r\n        _isExcludedFromReward[_account] = true;\r\n        excludedTSupply = excludedTSupply.add(_tOwned[_account]);\r\n        excludedRSupply = excludedRSupply.add(_rOwned[_account]);\r\n    }\r\n\r\n    //to include or exludde  any address from fee\r\n    function includeOrExcludeFromFee(address _account, bool _value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[_account] = _value;\r\n    }\r\n\r\n    //to include or exludde  any address from max send limit\r\n    function includeOrExcludeFrommaxTransferLimit(address _address, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedFrommaxTransferLimit[_address] = value;\r\n    }\r\n\r\n    function includeOrExcludeFrommaxWallet(address _address, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isEXcludedFrommaxWallet[_address] = value;\r\n    }\r\n\r\n    //only owner can change maxTransferingAmount\r\n    function setmaxTransferingAmount(uint256 _percentage) public onlyOwner {\r\n        require(\r\n            _percentage > 0 && _percentage <= 100,\r\n            \"BEP20: percentage must be less than 100\"\r\n        );\r\n        maxTransferingAmount = _tTotal.mul(_percentage).div(percentDivider);\r\n    }\r\n\r\n    //only owner can change maxWalletAmount\r\n    function setmaxWalletAmount(uint256 _percentage) public onlyOwner {\r\n        require(\r\n            _percentage > 0 && _percentage <= 100,\r\n            \"BEP20: percentage must be less than 100\"\r\n        );\r\n        maxWalletAmount = _tTotal.mul(_percentage).div(percentDivider);\r\n    }\r\n\r\n    //only owner can change BuyFee on and off for everyone\r\n    function BuyFee(bool _value) external onlyOwner {\r\n        if (_value) {\r\n            redistributionFeeOnBuying = 0;\r\n            slotMachineFeeOnBuying = 0;\r\n            burnFeeOnBuying = 10;\r\n        } else {\r\n            redistributionFeeOnBuying = 0;\r\n            slotMachineFeeOnBuying = 0;\r\n            burnFeeOnBuying = 0;\r\n        }\r\n    }\r\n\r\n    //To enable or disable all fees when set it to true fees will be disabled\r\n    function enableOrDisableFees(bool _state) external onlyOwner {\r\n        reflectionFees = _state;\r\n    }\r\n\r\n    //by default maxTransfering is true to disable set it to false address can send more than limit\r\n    function enableOrDisablemaxTransferLimit(bool _state) external onlyOwner {\r\n        ismaxTransferLimitValid = _state;\r\n    }\r\n\r\n    function enableOrDisablemaxWallet(bool _state) external onlyOwner {\r\n        ismaxWalletValid = _state;\r\n    }\r\n\r\n    // owner can change Slot Machine address\r\n    function setslotMachineAddress(address payable _newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        slotMachine = _newAddress;\r\n    }\r\n\r\n    // owner can change router and pair address\r\n    function setRoute(IDexRouter _router, address _pair) external onlyOwner {\r\n        dexRouter = _router;\r\n        dexPair = _pair;\r\n    }\r\n\r\n    // no one can buy or sell when trading is off except owner\r\n    // but once switched on every one can buy / sell tokens\r\n    // once switched on can never be switched off\r\n    function startTrading() external onlyOwner {\r\n        require(!tradingOpen, \"BEP20: Already enabled\");\r\n        tradingOpen = true;\r\n    }\r\n\r\n    //to receive BNB from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    // internal functions for contract use\r\n\r\n    function totalFeePerTx(uint256 tAmount) internal view returns (uint256) {\r\n        uint256 percentage = tAmount\r\n            .mul(\r\n                _currentRedistributionFee.add(_currentslotMachineFee).add(\r\n                    _currentburnFee\r\n                )\r\n            )\r\n            .div(percentDivider);\r\n        return percentage;\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        rSupply = rSupply.sub(excludedRSupply);\r\n        tSupply = tSupply.sub(excludedTSupply);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _currentRedistributionFee = 0;\r\n        _currentslotMachineFee = 0;\r\n        _currentburnFee = 0;\r\n    }\r\n\r\n    function setBuyFee() private {\r\n        _currentRedistributionFee = redistributionFeeOnBuying;\r\n        _currentslotMachineFee = slotMachineFeeOnBuying;\r\n        _currentburnFee = burnFeeOnBuying;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _currentRedistributionFee = redistributionFeeOnSelling;\r\n        _currentslotMachineFee = slotMachineFeeOnSelling;\r\n        _currentburnFee = burnFeeOnSelling;\r\n    }\r\n\r\n    function setNormalFee() private {\r\n        _currentRedistributionFee = redistributionFee;\r\n        _currentslotMachineFee = slotMachineFee;\r\n        _currentburnFee = burnFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // base function to transafer tokens\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"BEP20: transfer amount must be greater than zero\");\r\n\r\n        if (!tradingOpen && from != owner()) {\r\n            require(to != dexPair, \"BEP20: trading is not enabled yet\");\r\n        }\r\n\r\n        if (!tradingOpen && to != owner()) {\r\n            require(from != dexPair, \"BEP20: trading is not enabled yet\");\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any _account belongs to _isExcludedFromFee _account then remove the fee\r\n        if (\r\n            _isExcludedFromFee[from] ||\r\n            _isExcludedFromFee[to] ||\r\n            !reflectionFees\r\n        ) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        }\r\n        // buying handler\r\n        else if (sender == dexPair) {\r\n            setBuyFee();\r\n        }\r\n        // selling handler\r\n        else if (recipient == dexPair) {\r\n            setSellFee();\r\n        }\r\n        // normal transaction handler\r\n        else {\r\n            setNormalFee();\r\n        }\r\n\r\n        // check if sender or reciver excluded from reward then do transfer accordingly\r\n        if (\r\n            _isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (\r\n            !_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (\r\n            _isExcludedFromReward[sender] && _isExcludedFromReward[recipient]\r\n        ) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _checkMaxTransferAmount(address to, uint256 amount) private view {\r\n        if (\r\n            !_isExcludedFrommaxTransferLimit[to] // by default false\r\n        ) {\r\n            if (ismaxTransferLimitValid) {\r\n                require(\r\n                    amount <= maxTransferingAmount,\r\n                    \"BEP20: amount exceed max sending limit\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkMaxWalletAmount(address to, uint256 amount) private view {\r\n        if (\r\n            !_isEXcludedFrommaxWallet[to] // by default false\r\n        ) {\r\n            if (ismaxWalletValid) {\r\n                require(\r\n                    amount + balanceOf(to) <= maxWalletAmount,\r\n                    \"BEP20: amount exceed max wallet limit\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // if both sender and receiver are not excluded from reward\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(\r\n            totalFeePerTx(tAmount).mul(currentRate)\r\n        );\r\n        _checkMaxTransferAmount(recipient, tTransferAmount);\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if receiver is excluded from reward\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _checkMaxTransferAmount(recipient, tTransferAmount);\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        excludedTSupply = excludedTSupply.add(tAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if sender is excluded from reward\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(\r\n            totalFeePerTx(tAmount).mul(currentRate)\r\n        );\r\n        _checkMaxTransferAmount(recipient, tTransferAmount);\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        excludedTSupply = excludedTSupply.sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // if both sender and receiver are excluded from reward\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 tTransferAmount = tAmount.sub(totalFeePerTx(tAmount));\r\n        _checkMaxTransferAmount(recipient, tTransferAmount);\r\n        _checkMaxWalletAmount(recipient, tTransferAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        excludedTSupply = excludedTSupply.sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        excludedTSupply = excludedTSupply.add(tAmount);\r\n        _takeAllFee(tAmount, currentRate);\r\n        _reflectFee(tAmount);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    // take fees for liquidity, Slot Machine and earth bank\r\n    function _takeAllFee(uint256 tAmount, uint256 currentRate) internal {\r\n        uint256 tFeeslot = tAmount.mul((_currentslotMachineFee)).div(\r\n            percentDivider\r\n        );\r\n        uint256 tFeeburn = tAmount.mul((_currentburnFee)).div(percentDivider);\r\n\r\n        if (tFeeslot > 0) {\r\n            _accumulatedslotMachine = _accumulatedslotMachine.add(\r\n                tAmount.mul(_currentslotMachineFee).div(percentDivider)\r\n            );\r\n\r\n            uint256 rFee = tFeeslot.mul(currentRate);\r\n            if (_isExcludedFromReward[slotMachine])\r\n                _tOwned[slotMachine] = _tOwned[slotMachine].add(tFeeslot);\r\n            else _rOwned[slotMachine] = _rOwned[slotMachine].add(rFee);\r\n\r\n            emit Transfer(_msgSender(), slotMachine, tFeeslot);\r\n        }\r\n        if (tFeeburn > 0) {\r\n            _accumulatedburn = _accumulatedburn.add(\r\n                tAmount.mul(_currentburnFee).div(percentDivider)\r\n            );\r\n\r\n            uint256 rFee = tFeeburn.mul(currentRate);\r\n            if (_isExcludedFromReward[burnAddress])\r\n                _tOwned[burnAddress] = _tOwned[burnAddress].add(tFeeburn);\r\n            else _rOwned[burnAddress] = _rOwned[burnAddress].add(rFee);\r\n\r\n            emit Transfer(_msgSender(), burnAddress, tFeeburn);\r\n        }\r\n    }\r\n\r\n    // for automatic redistribution among all holders on each tx\r\n    function _reflectFee(uint256 tAmount) private {\r\n        uint256 tFee = tAmount.mul(_currentRedistributionFee).div(\r\n            percentDivider\r\n        );\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n}\r\n\r\n// Library for doing a swap on Dex\r\nlibrary Utils {\r\n    using SafeMath for uint256;\r\n\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        internal\r\n    {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // generate the Dex pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) internal {\r\n        IDexRouter dexRouter = IDexRouter(routerAddress);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"BuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableOrDisablemaxTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableOrDisablemaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFrommaxTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFrommaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFrommaxTransferLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFrommaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ismaxTransferLimitValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ismaxWalletValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setmaxTransferingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setmaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setslotMachineAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMachine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMachineFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMachineFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMachineFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolderDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cryptosyno", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2acbebe751ef65f6ce2ef739de4b745187e8310083d0910c140651f85f0863b3"}]}