{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface VatLike {\r\n    function live() external view returns (uint256);\r\n    function wards(address) external view returns (uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n}\r\n\r\ninterface CropLike {\r\n    function gem() external view returns (GemLike);\r\n    function ilk() external view returns (bytes32);\r\n    function join(address, address, uint256) external;\r\n    function exit(address, address, uint256) external;\r\n    function tack(address, address, uint256) external;\r\n    function flee(address, address, uint256) external;\r\n}\r\n\r\ninterface GemLike {\r\n    function approve(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external;\r\n}\r\n\r\ncontract UrnProxy {\r\n    address immutable public usr;\r\n\r\n    constructor(address vat_, address usr_) public {\r\n        usr = usr_;\r\n        VatLike(vat_).hope(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Cropper {\r\n    address public implementation;\r\n    mapping (address => uint256) public wards;\r\n\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event SetImplementation(address indexed);\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Cropper/not-authed\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n\r\n    function setImplementation(address implementation_) external auth {\r\n        implementation = implementation_;\r\n        emit SetImplementation(implementation_);\r\n    }\r\n\r\n    fallback() external {\r\n        address _impl = implementation;\r\n        require(_impl != address(0));\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract CropperImp {\r\n    bytes32 slot0;\r\n    bytes32 slot1;\r\n    mapping (address => address) public proxy; // UrnProxy per user\r\n    mapping (address => mapping (address => uint256)) public can;\r\n\r\n    event Hope(address indexed from, address indexed to);\r\n    event Nope(address indexed from, address indexed to);\r\n    event NewProxy(address indexed usr, address indexed urp);\r\n\r\n    address public immutable vat;\r\n    constructor(address vat_) public {\r\n        vat = vat_;\r\n    }\r\n\r\n    modifier allowed(address usr) {\r\n        require(msg.sender == usr || can[usr][msg.sender] == 1, \"Cropper/not-allowed\");\r\n        _;\r\n    }\r\n\r\n    function hope(address usr) external {\r\n        can[msg.sender][usr] = 1;\r\n        emit Hope(msg.sender, usr);\r\n    }\r\n\r\n    function nope(address usr) external {\r\n        can[msg.sender][usr] = 0;\r\n        emit Nope(msg.sender, usr);\r\n    }\r\n\r\n    function getOrCreateProxy(address usr) public returns (address urp) {\r\n        urp = proxy[usr];\r\n        if (urp == address(0)) {\r\n            urp = proxy[usr] = address(new UrnProxy(address(vat), usr));\r\n            emit NewProxy(usr, urp);\r\n        }\r\n    }\r\n\r\n    function join(address crop, address usr, uint256 val) external {\r\n        require(VatLike(vat).wards(crop) == 1, \"Cropper/crop-not-authorized\");\r\n\r\n        GemLike gem = CropLike(crop).gem();\r\n        gem.transferFrom(msg.sender, address(this), val);\r\n        gem.approve(crop, val);\r\n        CropLike(crop).join(getOrCreateProxy(usr), usr, val);\r\n    }\r\n\r\n    function exit(address crop, address usr, uint256 val) external {\r\n        require(VatLike(vat).wards(crop) == 1, \"Cropper/crop-not-authorized\");\r\n\r\n        address urp = proxy[msg.sender];\r\n        require(urp != address(0), \"Cropper/non-existing-urp\");\r\n        CropLike(crop).exit(urp, usr, val);\r\n    }\r\n\r\n    function flee(address crop, address usr, uint256 val) external {\r\n        require(VatLike(vat).wards(crop) == 1, \"Cropper/crop-not-authorized\");\r\n\r\n        address urp = proxy[msg.sender];\r\n        require(urp != address(0), \"Cropper/non-existing-urp\");\r\n        CropLike(crop).flee(urp, usr, val);\r\n    }\r\n\r\n    function move(address u, address dst, uint256 rad) external allowed(u) {\r\n        address urp = proxy[u];\r\n        require(urp != address(0), \"Cropper/non-existing-urp\");\r\n\r\n        VatLike(vat).move(urp, dst, rad);\r\n    }\r\n\r\n    function frob(bytes32 ilk, address u, address v, address w, int256 dink, int256 dart) external allowed(u) allowed(w) {\r\n        // The u == v requirement can never be relaxed as otherwise tack() can lose track of the rewards\r\n        require(u == v, \"Cropper/not-matching\");\r\n        address urp = getOrCreateProxy(u);\r\n\r\n        VatLike(vat).frob(ilk, urp, urp, w, dink, dart);\r\n    }\r\n\r\n    function flux(address crop, address src, address dst, uint256 wad) external allowed(src) {\r\n        require(VatLike(vat).wards(crop) == 1, \"Cropper/crop-not-authorized\");\r\n\r\n        address surp = proxy[src];\r\n        require(surp != address(0), \"Cropper/non-existing-surp\");\r\n        address durp = getOrCreateProxy(dst);\r\n\r\n        VatLike(vat).flux(CropLike(crop).ilk(), surp, durp, wad);\r\n        CropLike(crop).tack(surp, durp, wad);\r\n    }\r\n\r\n    function onLiquidation(address crop, address usr, uint256 wad) external {\r\n        // NOTE - this is not permissioned so be careful with what is done here\r\n        // Send any outstanding rewards to usr and tack to the clipper\r\n        address urp = proxy[usr];\r\n        require(urp != address(0), \"Cropper/non-existing-urp\");\r\n        CropLike(crop).join(urp, usr, 0);\r\n        CropLike(crop).tack(urp, msg.sender, wad);\r\n    }\r\n\r\n    function onVatFlux(address crop, address from, address to, uint256 wad) external {\r\n        // NOTE - this is not permissioned so be careful with what is done here\r\n        CropLike(crop).tack(from, to, wad);\r\n    }\r\n\r\n    function quit(bytes32 ilk, address u, address dst) external allowed(u) allowed(dst) {\r\n        require(VatLike(vat).live() == 0, \"Cropper/vat-still-live\");\r\n\r\n        address urp = proxy[u];\r\n        require(urp != address(0), \"Cropper/non-existing-urp\");\r\n\r\n        (uint256 ink, uint256 art) = VatLike(vat).urns(ilk, urp);\r\n        require(int256(ink) >= 0, \"Cropper/overflow\");\r\n        require(int256(art) >= 0, \"Cropper/overflow\");\r\n        VatLike(vat).fork(\r\n            ilk,\r\n            urp,\r\n            dst,\r\n            int256(ink),\r\n            int256(art)\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Hope\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"urp\",\"type\":\"address\"}],\"name\":\"NewProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Nope\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"can\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"flee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"flux\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"w\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"frob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getOrCreateProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"urp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"onLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"onVatFlux\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CropperImp", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3242ce9be287197aa40af9df1fe0c4b811689db74185f9756b875bb762ed49c8"}]}