{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            \r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract CryptonitoFinance is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MINIMAL_DEPOSIT = 0.001 ether;\r\n    uint256 public constant DEPOSITS_THRESHOLD = 25;\r\n    uint256 public constant ROWS_IN_DEPOSIT = 7;\r\n    uint8 public constant DEPOSITS_TYPES_COUNT = 4;\r\n    uint256 public constant POSSIBLE_DEPOSITS_ROWS_COUNT = 700; \r\n    uint256[4] public PLANS_PERIODS = [7 days, 14 days, 21 days, 28 days];\r\n    uint256[4] public PLANS_PERCENTS = [7, 17, 28, 42];\r\n    uint256[9] public LEADER_BONUS_TRIGGERS = [\r\n        0.3 ether,\r\n        0.8 ether,\r\n        1.5 ether,\r\n        3 ether,\r\n        15 ether,\r\n        30 ether,\r\n        150 ether,\r\n        300 ether,\r\n        1500 ether\r\n    ];\r\n\r\n    uint256[9] public LEADER_BONUS_REWARDS = [\r\n        0.006 ether,\r\n        0.0128 ether,\r\n        0.03 ether,\r\n        0.06 ether,\r\n        0.3 ether,\r\n        1.05 ether,\r\n        3.75 ether,\r\n        10.5 ether,\r\n        75 ether\r\n    ];\r\n\r\n    uint256[3] public LEADER_BONUS_LEVEL_PERCENTS = [100, 30, 15];\r\n\r\n    address payable public PROMOTION_ADDRESS = payable(0x706BC5dbBCeE7383e1f7c2f1d7d7977b38E21c7F);\r\n    uint256[4] public PROMOTION_PERCENTS = [100, 100, 100, 100]; \r\n\r\n    address payable public constant DEFAULT_REFERRER = payable(0x22D4622652Cd3dDc5B0107F3f3f65FdE2C372cD7);\r\n    uint256[5][4] public REFERRAL_PERCENTS; \r\n    uint256[4] public TOTAL_REFERRAL_PERCENTS = [300, 600, 900, 1200]; \r\n\r\n    struct Deposit {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint8 depositType;\r\n        uint256 freezeTime;\r\n        uint256 withdrawn;\r\n    }\r\n\r\n    struct Player {\r\n        address payable referrer;\r\n        address refLevel;\r\n        uint256 referralReward;\r\n        uint256 refsCount;\r\n        bool isActive; \r\n        uint256 leadTurnover;\r\n        uint256 basicWithdraws;\r\n        uint256 leadBonusReward;\r\n        bool[9] receivedBonuses;\r\n        bool isMadeFirstDeposit;\r\n\r\n        Deposit[] deposits;\r\n        uint256 investmentSum;\r\n\r\n        uint256[4] depositsTypesCount;\r\n        uint256[4] depositsTotalAmount;\r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(address => uint256) private balances;\r\n    uint256 public playersCount;\r\n    uint256 public depositsCounter;\r\n    uint256 public totalFrozenFunds;\r\n    uint256 public totalReferalWithdraws;\r\n    uint256 public totalLeadBonusReward;\r\n    uint256 public turnover;\r\n\r\n    event NewDeposit(\r\n        uint256 depositId,\r\n        address account,\r\n        address referrer,\r\n        uint8 depositType,\r\n        uint256 amount\r\n    );\r\n    event Withdraw(address account,  uint256 originalAmount, uint256 level_percent, uint256 amount);\r\n    event TransferReferralReward(address ref, address player, uint256 originalAmount, uint256 level_percents, uint256 rateType, uint256 amount);\r\n    event TransferLeaderBonusReward(\r\n        address indexed _to,\r\n        uint256 indexed _amount,\r\n        uint8 indexed _level\r\n    );\r\n    event TakeAwayDeposit(address account, uint8 depositType, uint256 amount);\r\n    event WithdrawPromotionReward(address promo, uint256 reward);\r\n\r\n    constructor() {\r\n        REFERRAL_PERCENTS[0] = [125, 75, 50, 25, 25];\r\n        REFERRAL_PERCENTS[1] = [250, 150, 100, 50, 50];\r\n        REFERRAL_PERCENTS[2] = [375, 225, 150, 75, 75];\r\n        REFERRAL_PERCENTS[3] = [500, 300, 200, 100, 100];\r\n    }\r\n\r\n    function isDepositCanBeCreated(uint8 depositType) external view returns (bool) {\r\n        if (depositType < DEPOSITS_TYPES_COUNT) {\r\n            return players[msg.sender].depositsTypesCount[depositType] < DEPOSITS_THRESHOLD;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getMaximumPossibleDepositValue(uint8 depositType) external view returns (uint256) {\r\n        Player storage player = players[msg.sender];\r\n        return player.depositsTotalAmount[DEPOSITS_TYPES_COUNT - 1] - player.depositsTotalAmount[depositType];\r\n    }\r\n\r\n    function makeDeposit(address payable ref, uint8 depositType)\r\n        external\r\n        payable\r\n    {\r\n        Player storage player = players[msg.sender];\r\n\r\n        require(depositType < DEPOSITS_TYPES_COUNT, \"Wrong deposit type\");\r\n        require(player.depositsTypesCount[depositType] < DEPOSITS_THRESHOLD, \"Can't create deposits over limit\");\r\n        require(\r\n            msg.value >= MINIMAL_DEPOSIT,\r\n            \"Not enought for mimimal deposit\"\r\n        );\r\n        require(player.isActive || ref != msg.sender, \"Referal can't refer to itself\");\r\n\r\n        \r\n        if (depositType < DEPOSITS_TYPES_COUNT - 1) {\r\n          require(player.depositsTypesCount[DEPOSITS_TYPES_COUNT - 1] > 0, \"You should create 28 days long deposit before\");\r\n          require(\r\n            player.depositsTotalAmount[depositType].add(msg.value) <= player.depositsTotalAmount[DEPOSITS_TYPES_COUNT - 1],\r\n            \"Low levels total deposits amount should be lower than 28 days long total deposits amount\"\r\n          );\r\n        }\r\n\r\n        \r\n        if (!player.isActive) {\r\n            playersCount = playersCount.add(1);\r\n            player.isActive = true;\r\n        }\r\n\r\n        \r\n        player.depositsTypesCount[depositType] = player.depositsTypesCount[depositType].add(1);\r\n        player.depositsTotalAmount[depositType] = player.depositsTotalAmount[depositType].add(msg.value);\r\n\r\n        _setReferrer(msg.sender, ref);\r\n\r\n        player.deposits.push(\r\n            Deposit({\r\n                id: depositsCounter + 1,\r\n                amount: msg.value,\r\n                depositType: depositType,\r\n                freezeTime: block.timestamp,\r\n                withdrawn: 0\r\n            })\r\n        );\r\n        player.investmentSum = player.investmentSum.add(msg.value);\r\n        totalFrozenFunds = totalFrozenFunds.add(msg.value);\r\n\r\n        emit NewDeposit(depositsCounter + 1, msg.sender, _getReferrer(msg.sender), depositType, msg.value);\r\n        distributeRef(msg.value, msg.sender, depositType);\r\n        distributeBonuses(msg.value, payable(msg.sender));\r\n        sendRewardToPromotion(msg.value, depositType);\r\n\r\n        depositsCounter = depositsCounter.add(1);\r\n    }\r\n\r\n    function takeAwayDeposit(uint256 depositId) external {\r\n        Player storage player = players[msg.sender];\r\n        require(depositId < player.deposits.length, \"Out of keys list range\");\r\n\r\n        Deposit memory deposit = player.deposits[depositId];\r\n        require(deposit.withdrawn > 0, \"First need to withdraw reward\");\r\n        require(\r\n            deposit.freezeTime.add(PLANS_PERIODS[deposit.depositType]) <= block.timestamp,\r\n            \"Not allowed now\"\r\n        );\r\n        require(address(this).balance >= deposit.amount, \"Not enought ETH to withdraw deposit\");\r\n\r\n        \r\n        player.depositsTypesCount[deposit.depositType] = player.depositsTypesCount[deposit.depositType].sub(1);\r\n        player.depositsTotalAmount[deposit.depositType] = player.depositsTotalAmount[deposit.depositType].sub(deposit.amount);\r\n\r\n        \r\n        player.investmentSum = player.investmentSum.sub(deposit.amount);\r\n\r\n        \r\n        if (depositId < player.deposits.length.sub(1)) {\r\n          player.deposits[depositId] = player.deposits[player.deposits.length.sub(1)];\r\n        }\r\n        player.deposits.pop();\r\n        payable(msg.sender).transfer(deposit.amount);\r\n\r\n        emit TakeAwayDeposit(msg.sender, deposit.depositType, deposit.amount);\r\n    }\r\n\r\n    function _withdraw(address payable _wallet, uint256 _amount) private {\r\n        require(address(this).balance >= _amount, \"Not enougth TRX to withdraw reward\");\r\n        _wallet.transfer(_amount);\r\n    }\r\n\r\n    function withdrawReward(uint256 depositId) external returns (uint256) {\r\n        Player storage player = players[msg.sender];\r\n        require(depositId < player.deposits.length, \"Out of keys list range\");\r\n\r\n        Deposit storage deposit = player.deposits[depositId];\r\n\r\n        require(deposit.withdrawn == 0, \"Already withdrawn, try 'Withdrow again' feature\");\r\n        uint256 amount = deposit.amount.mul(PLANS_PERCENTS[deposit.depositType]).div(100);\r\n        deposit.withdrawn = deposit.withdrawn.add(amount);\r\n        _withdraw(payable(msg.sender), amount);\r\n        emit Withdraw(msg.sender, deposit.amount, PLANS_PERCENTS[deposit.depositType], amount);\r\n\r\n        player.basicWithdraws = player.basicWithdraws.add(amount);\r\n        return amount;\r\n    }\r\n\r\n    function withdrawRewardAgain(uint256 depositId) external returns (uint256) {\r\n        Player storage player = players[msg.sender];\r\n        require(depositId < player.deposits.length, \"Out of keys list range\");\r\n\r\n        Deposit storage deposit = player.deposits[depositId];\r\n\r\n        require(deposit.withdrawn != 0, \"Already withdrawn, try 'Withdrow again' feature\");\r\n        require(deposit.freezeTime.add(PLANS_PERIODS[deposit.depositType]) <= block.timestamp, \"Repeated withdraw not allowed now\");\r\n\r\n        \r\n        deposit.freezeTime = block.timestamp;\r\n\r\n        uint256 amount =\r\n            deposit.amount\r\n            .mul(PLANS_PERCENTS[deposit.depositType])\r\n            .div(100);\r\n\r\n        deposit.withdrawn = deposit.withdrawn.add(amount);\r\n        _withdraw(payable(msg.sender), amount);\r\n        emit Withdraw(msg.sender, deposit.withdrawn, PLANS_PERCENTS[deposit.depositType], amount);\r\n        player.basicWithdraws = player.basicWithdraws.add(amount);\r\n\r\n        uint256 depositAmount = deposit.amount;\r\n\r\n        distributeRef(depositAmount, msg.sender, deposit.depositType);\r\n        sendRewardToPromotion(depositAmount, deposit.depositType);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function distributeRef(uint256 _amount, address _player, uint256 rateType) private {\r\n        uint256 totalReward = _amount.mul(TOTAL_REFERRAL_PERCENTS[rateType]).div(10000);\r\n\r\n        address player = _player;\r\n        address payable ref = _getReferrer(player);\r\n        uint256 refReward;\r\n\r\n        for (uint8 i = 0; i < REFERRAL_PERCENTS[rateType].length; i++) {\r\n            refReward = (_amount.mul(REFERRAL_PERCENTS[rateType][i]).div(10000));\r\n            totalReward = totalReward.sub(refReward);\r\n\r\n            players[ref].referralReward = players[ref].referralReward.add(\r\n                refReward\r\n            );\r\n            totalReferalWithdraws = totalReferalWithdraws.add(refReward);\r\n\r\n            \r\n            if (address(this).balance >= refReward) {\r\n\r\n                \r\n                if (i == 0 && !players[player].isMadeFirstDeposit) {\r\n                    players[player].isMadeFirstDeposit = true;\r\n                    players[ref].refsCount = players[ref].refsCount.add(1);\r\n                }\r\n\r\n                ref.transfer(refReward);\r\n                emit TransferReferralReward(ref, player, _amount, REFERRAL_PERCENTS[rateType][i], rateType, refReward);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n\r\n            player = ref;\r\n            ref = players[ref].referrer;\r\n\r\n            if (ref == address(0x0)) {\r\n                ref = DEFAULT_REFERRER;\r\n            }\r\n        }\r\n\r\n        if (totalReward > 0) {\r\n            payable(owner()).transfer(totalReward);\r\n        }\r\n    }\r\n\r\n    function distributeBonuses(uint256 _amount, address payable _player)\r\n        private\r\n    {\r\n        address payable ref = players[_player].referrer;\r\n\r\n        for (uint8 i = 0; i < LEADER_BONUS_LEVEL_PERCENTS.length; i++) {\r\n            players[ref].leadTurnover = players[ref].leadTurnover.add(\r\n                _amount.mul(LEADER_BONUS_LEVEL_PERCENTS[i]).div(100)\r\n            );\r\n\r\n            for (uint8 j = 0; j < LEADER_BONUS_TRIGGERS.length; j++) {\r\n                if (players[ref].leadTurnover >= LEADER_BONUS_TRIGGERS[j]) {\r\n                    if (!players[ref].receivedBonuses[j] && address(this).balance >= LEADER_BONUS_REWARDS[j]) {\r\n                        players[ref].receivedBonuses[j] = true;\r\n                        players[ref].leadBonusReward = players[ref]\r\n                            .leadBonusReward\r\n                            .add(LEADER_BONUS_REWARDS[j]);\r\n                        totalLeadBonusReward = totalLeadBonusReward.add(\r\n                            LEADER_BONUS_REWARDS[j]\r\n                        );\r\n\r\n                        ref.transfer(LEADER_BONUS_REWARDS[j]);\r\n                        emit TransferLeaderBonusReward(\r\n                            ref,\r\n                            LEADER_BONUS_REWARDS[j],\r\n                            i\r\n                        );\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            ref = players[ref].referrer;\r\n        }\r\n    }\r\n\r\n    function sendRewardToPromotion(uint256 amount, uint8 depositType) private {\r\n        uint256 reward = amount.mul(PROMOTION_PERCENTS[depositType]).div(1000);\r\n\r\n        PROMOTION_ADDRESS.transfer(reward);\r\n        emit WithdrawPromotionReward(PROMOTION_ADDRESS, reward);\r\n    }\r\n\r\n    function _getReferrer(address player) private view returns (address payable) {\r\n        return players[player].referrer;\r\n    }\r\n\r\n    function _setReferrer(address playerAddress, address payable ref) private {\r\n        Player storage player = players[playerAddress];\r\n        uint256 depositsCount = getDepositsCount(address(ref));\r\n\r\n        if (player.referrer == address(0)) {\r\n            if (ref == address(0) || depositsCount == 0) {\r\n                player.referrer = DEFAULT_REFERRER;\r\n            }\r\n            else {\r\n                player.referrer = ref;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function invest() external payable {\r\n      payable(msg.sender).transfer(msg.value);\r\n    }\r\n\r\n    \r\n    function getGlobalStats() external view returns (uint256[4] memory stats) {\r\n        stats[0] = totalFrozenFunds;\r\n        stats[1] = playersCount;\r\n    }\r\n\r\n     \r\n    function getInvestmentsSum(address _player) public view returns (uint256 sum) {\r\n        return players[_player].investmentSum;\r\n    }\r\n\r\n    function getDeposit(address _player, uint256 _id) public view returns (uint256[ROWS_IN_DEPOSIT] memory deposit) {\r\n        Deposit memory depositStruct = players[_player].deposits[_id];\r\n        deposit = depositStructToArray(depositStruct);\r\n    }\r\n\r\n    function getDeposits(address _player) public view returns (uint256[POSSIBLE_DEPOSITS_ROWS_COUNT] memory deposits) {\r\n        Player memory player = players[_player];\r\n\r\n        for (uint256 i = 0; i < player.deposits.length; i++) {\r\n            uint256[ROWS_IN_DEPOSIT] memory deposit = depositStructToArray(player.deposits[i]);\r\n            for (uint256 row = 0; row < ROWS_IN_DEPOSIT; row++) {\r\n                deposits[i.mul(ROWS_IN_DEPOSIT).add(row)] = deposit[row];\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDepositsCount(address _player) public view returns (uint256) {\r\n        return players[_player].deposits.length;\r\n    }\r\n\r\n    function isDepositTakenAway(address _player, uint256 _id) public view returns (bool) {\r\n        return players[_player].deposits[_id].amount == 0;\r\n    }\r\n\r\n    function getWithdraws(address _player) public view returns (uint256) {\r\n        return players[_player].basicWithdraws;\r\n    }\r\n\r\n    function getWithdrawnReferalFunds(address _player)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return players[_player].referralReward;\r\n    }\r\n\r\n    function getWithdrawnLeaderFunds(address _player)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return players[_player].leadBonusReward;\r\n    }\r\n\r\n    function getReferralsCount(address _player) public view returns (uint256) {\r\n        return players[_player].refsCount;\r\n    }\r\n\r\n    function getPersonalStats(address _player) external view returns (uint256[7] memory stats) {\r\n        Player memory player = players[_player];\r\n\r\n        stats[0] = address(_player).balance;\r\n        if (player.isActive) {\r\n            stats[1] = player.deposits.length;\r\n            stats[2] = getInvestmentsSum(_player);\r\n        }\r\n        else {\r\n            stats[1] = 0;\r\n            stats[2] = 0;\r\n        }\r\n        stats[3] = getWithdraws(_player);\r\n        stats[4] = getWithdrawnReferalFunds(_player);\r\n        stats[5] = getWithdrawnLeaderFunds(_player);\r\n        stats[6] = getReferralsCount(_player);\r\n    }\r\n\r\n    function getReceivedBonuses(address _player) external view returns (bool[9] memory) {\r\n        return players[_player].receivedBonuses;\r\n    }\r\n\r\n    \r\n    function depositStructToArray(Deposit memory deposit) private view returns (uint256[ROWS_IN_DEPOSIT] memory depositArray) {\r\n        depositArray[0] = deposit.id;\r\n        depositArray[1] = deposit.amount;\r\n        depositArray[2] = deposit.depositType;\r\n        depositArray[3] = PLANS_PERCENTS[deposit.depositType];\r\n        depositArray[4] = PLANS_PERIODS[deposit.depositType];\r\n        depositArray[5] = deposit.freezeTime;\r\n        depositArray[6] = deposit.withdrawn;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeAwayDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"TransferLeaderBonusReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level_percents\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rateType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level_percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawPromotionReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_REFERRER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_TYPES_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEADER_BONUS_LEVEL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEADER_BONUS_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEADER_BONUS_TRIGGERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PLANS_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PLANS_PERIODS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSSIBLE_DEPOSITS_ROWS_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROMOTION_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PROMOTION_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROWS_IN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOTAL_REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"deposit\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"internalType\":\"uint256[700]\",\"name\":\"deposits\",\"type\":\"uint256[700]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalStats\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"stats\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getInvestmentsSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"}],\"name\":\"getMaximumPossibleDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPersonalStats\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"stats\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getReceivedBonuses\",\"outputs\":[{\"internalType\":\"bool[9]\",\"name\":\"\",\"type\":\"bool[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getReferralsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getWithdrawnLeaderFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getWithdrawnReferalFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"}],\"name\":\"isDepositCanBeCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isDepositTakenAway\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refLevel\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refsCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leadTurnover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basicWithdraws\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leadBonusReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMadeFirstDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"investmentSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"takeAwayDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozenFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLeadBonusReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferalWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardAgain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptonitoFinance", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://389b9a3eb2287db1a3ec40951c00ec4342dbc2297d9ce4677486e3a25b0dc2db"}]}