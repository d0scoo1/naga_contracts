{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PONY.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: i am Pony\\n/// @author: manifold.xyz\\n\\nimport \\\"./ERC721Creator.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                //\\n//                                                                                                //\\n//    XS%8 8.8t8@88X88888@@@88888888888888888X8888@88888@8@8@8@8@8@8@8888888888888888888888888    //\\n//    8S8888888:8S8S8SX8@888888@8@S888888@X8X888@888888888888@88888@8888888S8S8S@X8@8888888888    //\\n//    88S88888888.88@8888X88@X8 Stt%8SSX88888S8@88@888X8@@@@X@X@X@X@X@X@X8@8S8@@S8X8X8@@8X88@8    //\\n//    @888;88888888 8X88SS888St8. ..;X88@@@S8X;88@X@@88S8S8X8X8X8X8X8S8S8X8@@@@8@X88@@@888@888    //\\n//    88888%X8888888888%8X888888;t.:8%;@@88@@S;St  Xt88SX@8@8@X8X88XX8S8S8S8@8SX888@X88@X888@@    //\\n//    8S@X@%;888888@88888;888XS8S8t@%;8X;888S8@ :8. ;XtX@8S@88@888@888888X8S8X8@X88@@X@X8X8@@8    //\\n//    8S@8XX88.88888@88888X8888%S%SX8@  8SXX8@888t.;  % 888888SX8@8@888S8888S8@8X@8@@888X8X@88    //\\n//    8X8@S888888888888888888X88888%Xt;.%8X8888:88;;t. SS@8888S@8888@8888XX8888@8X88X88X8S888X    //\\n//    @88@888888:88SX@8888888888888888@.:8%X8XX88  t..: S.888888@8@@@@8X888S@@888S@88888@@S8@8    //\\n//    8X888888%;8888@88888888888@88888%: 88888X8S:;8 ... X888X8888X8888@8XX88XX8S88S@8@8@8X888    //\\n//    88888@88XXSS88888888t;88@8@8888.. X8S8@. @88X tS; ..@;888888S8S888X8S8@8SX888X888@8@XS88    //\\n//    @888S@88888XX8;8888X88888888888;888 SS8 :.S8SX8 .: . S@8%8SS88XX88X8XS88@88@8X8X8@8@8XX8    //\\n//    @@8888XS8@888888888888888SX88888S8X;;X:8%888@8: ...  :SX88SS8S888S888X888S:8X888S8S88@S8    //\\n//    8888888888X8@8%888888888S88888@.%88.:S%@8X:8:8:::::: .t;S88888X88@888t88SS8%XX88@X@S8S8S    //\\n//    88@8888@8S88X88888@888S8888888@S8  8888888: S::.::t@. .@ @8S@S888X888888888SS@@8888888S8    //\\n//    88@8888@@S88S888.888888888888888 @%%%8t;%@:t::;:.88t8 .%.S8888SX8888X88@888@XS@8S8888888    //\\n//    88@8@88@@88X:8X88X88:88888888888SX:t.    .:;::tXt;@.:. S: 888SX8SS88888888X888S88888X888    //\\n//    8888888XXS8XX8XS88888;88@%8888888t:S88; .::::;@S:88X;. 88S;@X8SXS@88888888@88X8@8X88X@@@    //\\n//    88888888X888@X888888.88888888888SS@S@S:::::;%@X::%@;. t XS888tX8888@@S%%SX8@88@SS88SX@8S    //\\n//    8888888888X8XX888SXS88@@888888888 t.S:.::;%St;::.:88..t88X@t.  .;@SSXSX8SXXX@S8XSS8@SSS8    //\\n//    8888888888@S@88S88@XS8@t888888888888  ;;t%%:::..::;%S@Xt.888%:.t8 ;;tSS%XS@SSXS8S8@88XS8    //\\n//    8888888888@8:@@88:.X8888.88888@888@   t;;t::..:....:@@tS@;8%8.tS8S.X.:%SX%%%%SSSSXS8X88@    //\\n//    8888888888X..X8S %SS@8888888888888S@88S% .:........:;8%S8S:8XtttS8X8 :.  ..;%ttX%SX@88S8    //\\n//    8X8888888@S::t%X%%.8%8888 8 8:888 @888SX% .:........:...8tS8:.:;t888%S88t:8;::;:%StSS@XS    //\\n//    8@888@88X@@.X:8t8X88888.;8.888%8@8888:88: .:.......:..:t8%S  ....:tt8X@Xt8% 88:8%S%tS88%    //\\n//    8888XXXX8XS 8.X :S888888t%8:8:8888.@88.XS. :.....::....;t;; .  ...:;:%@:;8 .8888.%@88%%8    //\\n//    8888@X@8X8S .@;X:88::X88@StS::88 %888 8;:..:::.:.:.;XX .@%.. ......:. ;8Xt8X.88.8888XX%@    //\\n//    8@88888S:@8 .%8%S :%@S8XSSXtt88;:; 8:%;:.  ;::::;X88X;; 8S.::.......:..X;88t .888SS88X%%    //\\n//    88888XXXXSt ..:S  XXSX@X%%t88t  .%8X; .. :;;;::SXtX8@;;@@S:...........:t% ;S 8:88;tS8XXS    //\\n//    8888@XX@X%;..:t  888X8SSS%:.t: Xt :8  .:;;;:X%t8.888888X8 .:;%;....:.:...@: 888:8;:tXXS%    //\\n//    888@XX@ S..X ::.;888%8XS;tt :88Xt::88% .;;8X.888@8888888Xt:t%;;%:...:.:. :@8S8.8888%tt%t    //\\n//    8888SX%tt.8:.:X:S8t8X8XSX@;S888S.t :. ; :%;88888888888888X:;;.:::.:..:.:.  . : 888..:;;:    //\\n//    888X@X%%t.;.;.t  X888SXXStSX88888X8 ;8: 8:888888888888888 t.;:..::.....::..   ;X@t8;:..:    //\\n//    88XSSS.X. S8%t:@ @@.88X8@S@@@88888X888:88;8.88888888@8888@8;:::t8;;:.:..:::.    %8 88888    //\\n//    8@SX%8%X..8@@X%;8%8@@t@X%;@8@8@88888X%88X 88;8:8888S8888888X ::%@:8@t....::::    ;8.8.88    //\\n//    @8SX S%X .;%%X::%.%S%%t . .8S88X888X8XX :; 88%@88.8888.888 @%%;888 8:S;:...::::.  S888.8    //\\n//    SSX t:XS 8;8%:..:;.8%@;;X  @88S8S8SS;S@888t: @.8888888888888X88 X8888 S8;:.::::::  X8;8:    //\\n//    SS: 88XX @@ 8S...::;S.tt 8t; 88S888%8@8X88@8.88S%888 88888@@;88888888@8 t;::::;::. .;.8;    //\\n//    tS @;Xt;%. St:.. .:%.;SX:@t@S;8:88%t@@SX8;S@@8  888:88888%8: 888@888888t ;St:;:::.. :8:8    //\\n//    t;%@8XXS.. ; %;.....:S8X8St8: :88;X% SXX8@@88:S.88 888S888888;88888888888t ;8t:.:::  X88    //\\n//    ;.8@X8 SS8%.@8;t  ...:t@8:X8  ;8XS8..%;8S88t8888XS888S8888:888 %888X8.8S:8.8;::.::::. %     //\\n//    ;. 8S ;: : 8tSt8%. ...:St%t; :: XX;X::S8S888::8@  . S8X8888:888888888888:8 @  :..:::tX:     //\\n//    ; X::t S X;  t;.@@  ....S8;..%:%%;8X%::8t;8%8; 8888 ..@888;@8888XX@88888 8:   .::.%SX888    //\\n//    StS8:8:8S S @:S%S8X  ...:%:. t@;%;X8SX@%t;88 88t;8@88@ S@88888888@8888 8;..   :::88S8888    //\\n//    XX %;SX: S%8%8SX%:t%. ...:...8@t8X S:;S8 S8; @ X%X;8888888 88888S@@8888:.    .;X%  @S88@    //\\n//    SS%S.X88.S   ;%Xt; XX. .....S@  ;8%8@8.::t;  88;X8  88 88:88888XXS 8X:.  .   @:   8 X@8X    //\\n//    %XSS:8tX% :: X%%%;@8 ;.....: XX:S@.8 ;8 t..8t;8:88;;t%S8:888888X 8%:.  .   ;:::.    S 8     //\\n//    SXX%SS@ %8 ;8%8@%8:S;.t:..tt88 @8%8:; ;.t8SSS@.;:8.  ...88t 88X8S;.  .  ;8t  %S%:   S 88    //\\n//    SX%XXSt:.XS%t@XtXX; S  8S8.  t;;8;t;X;@; ;.:8:..::.  . .:@    8t.. . t8t8SS% :SXS:     8    //\\n//    %%tS@SS%%%%.;88SSSXX   ;t%88 8XS.; 8%XX8%XS... .:%t  .   .. .;%8.. :%S@8X   :%S8t:@X8SXS    //\\n//    %SSXXXX@S8%S;XSt:.. S  :t;X@88;%.;t%X:%%88t:%X8tX88:  .    .  ;8%8S; ;8 8  :S@X@%.8@t:.:    //\\n//    %SS%t%SSXXXS%.         .;t.@ t;tt8: : ;:S8S%:.%X%@ 888tS.. .S8SStS% t%8  .;SX@%t 88: @ :    //\\n//    ;t:: .;tSXXS: tSS   8 8 88..:@ .;.8X%t%@.S@SXX.X%XSX;@8: :;8. 8@t  SX8@  :;%%;: ;tt8. X:    //\\n//                                                                                                //\\n//                                                                                                //\\n//                                                                                                //\\n////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncontract PONY is ERC721Creator {\\n    constructor() ERC721Creator(\\\"i am Pony\\\", \\\"PONY\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721Creator.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\ncontract ERC721Creator is Proxy {\\n    \\n    constructor(string memory name, string memory symbol) {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0xe4E4003afE3765Aca8149a82fc064C0b125B9e5a;\\n        Address.functionDelegateCall(\\n            0xe4E4003afE3765Aca8149a82fc064C0b125B9e5a,\\n            abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol)\\n        );\\n    }\\n        \\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n     function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PONY", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xe4e4003afe3765aca8149a82fc064c0b125b9e5a", "SwarmSource": ""}]}