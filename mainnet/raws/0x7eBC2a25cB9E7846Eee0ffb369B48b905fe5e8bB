{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/renderer/Face.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./WatchData.sol\\\";\\n\\n// Renders the Face, which includes the date and engraving.\\nlibrary Face {\\n    function render(\\n        uint256 _day,\\n        uint256 _month,\\n        uint256 _year,\\n        string memory _engraving,\\n        bool _isLight\\n    ) public pure returns (string memory) {\\n        return\\n            svg.g(\\n                utils.NULL,\\n                string.concat(\\n                    // base face layer\\n                    svg.circle(\\n                        string.concat(\\n                            svg.prop(\\\"cx\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\\"cy\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\n                                \\\"r\\\",\\n                                utils.uint2str(WatchData.FACE_RADIUS)\\n                            ),\\n                            svg.prop(\\\"fill\\\", utils.getDefURL(\\\"fg\\\")),\\n                            svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\"))\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    // inner tick lines\\n                    svg.path(\\n                        string.concat(\\n                            svg.prop(\\n                                \\\"d\\\",\\n                                \\\"M316.8 180H180m136.6 7.2-136.61252-7.15956M316.1 194.3l-136.0506-14.2995M315.1 201.4l-135.11576-21.40023M313.8 208.4l-133.8106-28.44232M312.1 215.4l-132.13865-35.40645M310.1 222.3l-130.10453-42.27352M307.7 229l-127.7138-49.02474M305 235.6l-124.97302-55.64157M301.9 242.1l-121.8897-62.1059M298.5 248.4 180.02772 180M294.7 254.5l-114.73013-74.50662M290.7 260.4l-110.67352-80.40902M286.3 266.1l-106.31357-86.09103M281.7 271.5l-101.66221-91.53707M276.7 276.7l-96.7322-96.7322M271.5 281.7l-91.53707-101.66221M266.1 286.3l-86.09103-106.31357M260.4 290.7l-80.40902-110.67352M254.5 294.7l-74.50662-114.73013M248.4 298.5 180 180.02772M242.1 301.9l-62.1059-121.8897M235.6 305l-55.64157-124.97302M229 307.7l-49.02474-127.7138M222.3 310.1l-42.27352-130.10453M215.4 312.1l-35.40645-132.13865M208.4 313.8l-28.44232-133.8106M201.4 315.1l-21.40023-135.11576M194.3 316.1l-14.2995-136.0506M187.2 316.6l-7.15956-136.61252M180 316.8V180m-7.2 136.6 7.15956-136.61252M165.7 316.1l14.2995-136.0506M158.6 315.1l21.40023-135.11576M151.6 313.8l28.44232-133.8106M144.6 312.1l35.40645-132.13865M137.7 310.1l42.27352-130.10453M131 307.7l49.02474-127.7138M124.4 305l55.64157-124.97302M117.9 301.9l62.1059-121.8897M111.6 298.5 180 180.02772M105.5 294.7l74.50662-114.73013M99.6 290.7l80.40902-110.67352M93.9 286.3l86.09103-106.31357M88.5 281.7l91.53707-101.66221M83.3 276.7l96.7322-96.7322M78.3 271.5l101.66221-91.53707M73.7 266.1l106.31357-86.09103M69.3 260.4l110.67352-80.40902M65.3 254.5l114.73013-74.50662M61.5 248.4 179.97228 180M58.1 242.1l121.8897-62.1059M55 235.6l124.97302-55.64157M52.3 229l127.7138-49.02474M49.9 222.3l130.10453-42.27352M47.9 215.4l132.13865-35.40645M46.2 208.4l133.8106-28.44232M44.9 201.4l135.11576-21.40023M43.9 194.3l136.0506-14.2995M43.4 187.2l136.61252-7.15956M43.2 180H180m-136.6-7.2 136.61252 7.15956M43.9 165.7l136.0506 14.2995M44.9 158.6l135.11576 21.40023M46.2 151.6l133.8106 28.44232M47.9 144.6l132.13865 35.40645M49.9 137.7l130.10453 42.27352M52.3 131l127.7138 49.02474M55 124.4l124.97302 55.64157M58.1 117.9l121.8897 62.1059M61.5 111.6 179.97228 180M65.3 105.5l114.73013 74.50662M69.3 99.6l110.67352 80.40902M73.7 93.9l106.31357 86.09103M78.3 88.5l101.66221 91.53707M83.3 83.3l96.7322 96.7322M88.5 78.3l91.53707 101.66221M93.9 73.7l86.09103 106.31357M99.6 69.3l80.40902 110.67352M105.5 65.3l74.50662 114.73013M111.6 61.5 180 179.97228M117.9 58.1l62.1059 121.8897M124.4 55l55.64157 124.97302M131 52.3l49.02474 127.7138M137.7 49.9l42.27352 130.10453M144.6 47.9l35.40645 132.13865M151.6 46.2l28.44232 133.8106M158.6 44.9l21.40023 135.11576M165.7 43.9l14.2995 136.0506M172.8 43.4l7.15956 136.61252M180 43.2V180m7.2-136.6-7.15956 136.61252M194.3 43.9l-14.2995 136.0506M201.4 44.9l-21.40023 135.11576M208.4 46.2l-28.44232 133.8106M215.4 47.9l-35.40645 132.13865M222.3 49.9l-42.27352 130.10453M229 52.3l-49.02474 127.7138M235.6 55l-55.64157 124.97302M242.1 58.1l-62.1059 121.8897M248.4 61.5 180 179.97228M254.5 65.3l-74.50662 114.73013M260.4 69.3l-80.40902 110.67352M266.1 73.7l-86.09103 106.31357M271.5 78.3l-91.53707 101.66221M276.7 83.3l-96.7322 96.7322M281.7 88.5l-101.66221 91.53707M286.3 93.9l-106.31357 86.09103M290.7 99.6l-110.67352 80.40902M294.7 105.5l-114.73013 74.50662M298.5 111.6 180.02772 180M301.9 117.9l-121.8897 62.1059M305 124.4l-124.97302 55.64157M307.7 131l-127.7138 49.02474M310.1 137.7l-130.10453 42.27352M312.1 144.6l-132.13865 35.40645M313.8 151.6l-133.8106 28.44232M315.1 158.6l-135.11576 21.40023M316.1 165.7l-136.0506 14.2995M316.6 172.8l-136.61252 7.15956\\\"\\n                            ),\\n                            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"opacity\\\", _isLight ? \\\"0.075\\\" : \\\"0.25\\\"),\\n                            svg.prop(\\n                                \\\"style\\\",\\n                                string.concat(\\n                                    \\\"mix-blend-mode:\\\",\\n                                    _isLight ? \\\"normal\\\" : \\\"overlay\\\"\\n                                )\\n                            )\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    // outer tick lines\\n                    svg.path(\\n                        string.concat(\\n                            svg.prop(\\n                                \\\"d\\\",\\n                                \\\"M316.8 180h-12m11.3 14.3-5.96713-.62717M313.8 208.4l-5.86889-1.24747M310.1 222.3l-5.70634-1.8541M305 235.6l-5.48127-2.44042M298.5 248.4l-10.3923-6m2.5923 18-4.8541-3.52671M281.7 271.5l-4.45887-4.01478M271.5 281.7l-4.01478-4.45887M260.4 290.7l-3.52671-4.8541M248.4 298.5l-6-10.3923M235.6 305l-2.44042-5.48127M222.3 310.1l-1.8541-5.70634M208.4 313.8l-1.24747-5.86889M194.3 316.1l-.62717-5.96713M180 316.8v-12m-14.3 11.3.62717-5.96713M151.6 313.8l1.24747-5.86889M137.7 310.1l1.8541-5.70634M124.4 305l2.44042-5.48127M111.6 298.5l6-10.3923m-18 2.5923 3.52671-4.8541M88.5 281.7l4.01478-4.45887M78.3 271.5l4.45887-4.01478M69.3 260.4l4.8541-3.52671M61.5 248.4l10.3923-6M55 235.6l5.48127-2.44042M49.9 222.3l5.70634-1.8541M46.2 208.4l5.86889-1.24747M43.9 194.3l5.96713-.62717M43.2 180h12m-11.3-14.3 5.96713.62717M46.2 151.6l5.86889 1.24747M49.9 137.7l5.70634 1.8541M55 124.4l5.48127 2.44042M61.5 111.6l10.3923 6M69.3 99.6l4.8541 3.52671M78.3 88.5l4.45887 4.01478M88.5 78.3l4.01478 4.45887M99.6 69.3l3.52671 4.8541M111.6 61.5l6 10.3923M124.4 55l2.44042 5.48127M137.7 49.9l1.8541 5.70634M151.6 46.2l1.24747 5.86889M165.7 43.9l.62717 5.96713M180 43.2v12m14.3-11.3-.62717 5.96713M208.4 46.2l-1.24747 5.86889M222.3 49.9l-1.8541 5.70634M235.6 55l-2.44042 5.48127M248.4 61.5l-6 10.3923m18-2.5923-3.52671 4.8541M271.5 78.3l-4.01478 4.45887M281.7 88.5l-4.45887 4.01478M290.7 99.6l-4.8541 3.52671M298.5 111.6l-10.3923 6M305 124.4l-5.48127 2.44042M310.1 137.7l-5.70634 1.8541M313.8 151.6l-5.86889 1.24747M316.1 165.7l-5.96713.62717\\\"\\n                            ),\\n                            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"stroke-width\\\", \\\"2\\\"),\\n                            svg.prop(\\\"opacity\\\", \\\"0.35\\\")\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    renderDate(_day, _month, _year),\\n                    renderEngraving(_engraving)\\n                )\\n            );\\n    }\\n\\n    function renderEngraving(string memory _engraving)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 engravingLength = utils.utfStringLength(_engraving);\\n\\n        if (engravingLength == 0 || engravingLength > 20) {\\n            return utils.NULL;\\n        }\\n\\n        uint256 charWidth = 7;\\n        uint256 padding = 14;\\n        uint256 fullWidth = charWidth *\\n            engravingLength +\\n            padding *\\n            2 +\\n            padding /\\n            4;\\n\\n        return\\n            svg.g(\\n                string.concat(\\n                    svg.prop(\\n                        \\\"transform\\\",\\n                        string.concat(\\n                            \\\"translate(\\\",\\n                            utils.uint2str(180 - fullWidth / 2),\\n                            \\\" \\\",\\n                            utils.uint2str(268),\\n                            \\\")\\\"\\n                        )\\n                    )\\n                ),\\n                string.concat(\\n                    svg.rect(\\n                        string.concat(\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                            svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                            svg.prop(\\\"x\\\", \\\"0\\\"),\\n                            svg.prop(\\\"y\\\", \\\"-13\\\"),\\n                            svg.prop(\\\"width\\\", utils.uint2str(fullWidth)),\\n                            svg.prop(\\n                                \\\"height\\\",\\n                                utils.uint2str(charWidth + padding)\\n                            ),\\n                            svg.prop(\\\"rx\\\", utils.uint2str(10)),\\n                            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"stroke-opacity\\\", \\\"0.2\\\")\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    svg.text(\\n                        string.concat(\\n                            svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n                            svg.prop(\\\"x\\\", utils.uint2str(fullWidth / 2)),\\n                            svg.prop(\\\"y\\\", \\\"1\\\"),\\n                            svg.prop(\\\"font-size\\\", utils.getCssVar(\\\"fts\\\")),\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"fill-opacity\\\", \\\"0.5\\\")\\n                        ),\\n                        // _engraving\\n                        string.concat(\\\"<![CDATA[\\\", _engraving, \\\"]]>\\\")\\n                    )\\n                )\\n            );\\n    }\\n\\n    function renderDate(\\n        uint256 _day,\\n        uint256 _month,\\n        uint256 _year\\n    ) private pure returns (string memory) {\\n        // All x positions and transforms are calculated in js and just used as constants here.\\n        return\\n            svg.g(\\n                string.concat(svg.prop(\\\"transform\\\", \\\"translate(136, 88)\\\")),\\n                string.concat(\\n                    // BACKGROUND CONTAINER\\n                    svg.g(\\n                        string.concat(\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fs\\\")),\\n                            svg.prop(\\\"filter\\\", utils.getDefURL(\\\"insetShadow\\\")),\\n                            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"stroke-opacity\\\", \\\"0.2\\\")\\n                        ),\\n                        string.concat(\\n                            svg.rect(\\n                                string.concat(\\n                                    svg.prop(\\\"x\\\", \\\"0\\\"),\\n                                    svg.prop(\\\"y\\\", \\\"-14\\\"),\\n                                    svg.prop(\\\"width\\\", \\\"22\\\"),\\n                                    svg.prop(\\\"height\\\", \\\"20\\\"),\\n                                    svg.prop(\\\"rx\\\", \\\"4\\\")\\n                                ),\\n                                utils.NULL\\n                            ),\\n                            svg.rect(\\n                                string.concat(\\n                                    svg.prop(\\\"x\\\", \\\"26\\\"),\\n                                    svg.prop(\\\"y\\\", \\\"-14\\\"),\\n                                    svg.prop(\\\"width\\\", \\\"22\\\"),\\n                                    svg.prop(\\\"height\\\", \\\"20\\\"),\\n                                    svg.prop(\\\"rx\\\", \\\"4\\\")\\n                                ),\\n                                utils.NULL\\n                            ),\\n                            svg.rect(\\n                                string.concat(\\n                                    svg.prop(\\\"x\\\", \\\"52\\\"),\\n                                    svg.prop(\\\"y\\\", \\\"-14\\\"),\\n                                    svg.prop(\\\"width\\\", \\\"36\\\"),\\n                                    svg.prop(\\\"height\\\", \\\"20\\\"),\\n                                    svg.prop(\\\"rx\\\", \\\"4\\\")\\n                                ),\\n                                utils.NULL\\n                            )\\n                        )\\n                    ),\\n                    // TEXT CONTAINER\\n                    svg.g(\\n                        string.concat(\\n                            svg.prop(\\\"font-size\\\", utils.getCssVar(\\\"fts\\\")),\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"fa\\\")),\\n                            svg.prop(\\\"opacity\\\", \\\"0.5\\\")\\n                        ),\\n                        string.concat(\\n                            svg.text(\\n                                string.concat(\\n                                    svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n                                    svg.prop(\\\"x\\\", \\\"11\\\")\\n                                ),\\n                                utils.uint2str(_month)\\n                            ),\\n                            svg.text(\\n                                string.concat(\\n                                    svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n                                    svg.prop(\\\"x\\\", \\\"37\\\")\\n                                ),\\n                                utils.uint2str(_day)\\n                            ),\\n                            svg.text(\\n                                string.concat(\\n                                    svg.prop(\\\"text-anchor\\\", \\\"middle\\\"),\\n                                    svg.prop(\\\"x\\\", \\\"70\\\")\\n                                ),\\n                                utils.uint2str(_year)\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/SVG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"g\\\", _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"path\\\", _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"text\\\", _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"line\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props, _children);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"rect\\\", _props, _children);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"filter\\\", _props, _children);\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"radialGradient\\\", _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"linearGradient\\\", _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                \\\"stop\\\",\\n                string.concat(\\n                    prop(\\\"stop-color\\\", stopColor),\\n                    \\\" \\\",\\n                    prop(\\\"offset\\\", string.concat(utils.uint2str(offset), \\\"%\\\")),\\n                    \\\" \\\",\\n                    _props\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"animateTransform\\\", _props, utils.NULL);\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _tag,\\n                \\\" \\\",\\n                _props,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _tag,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/WatchData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Primary library for storing all core constants and rendering data.\\nlibrary WatchData {\\n    /* CONSTANTS */\\n    uint256 public constant WATCH_SIZE = 360;\\n    uint256 public constant CENTER = 180;\\n    uint256 public constant OUTER_BEZEL_RADIUS = 180;\\n    uint256 public constant INNER_BEZEL_RADIUS = 152;\\n    uint256 public constant FACE_RADIUS = 144; // OUTER_BEZEL_RADIUS * 0.8\\n    uint8 public constant GLOW_IN_THE_DARK_ID = 99;\\n\\n    /* IDs */\\n    enum MaterialId {\\n        Pearl,\\n        Copper,\\n        Onyx,\\n        Quartz,\\n        Emerald,\\n        Ruby,\\n        Sapphire,\\n        Amber,\\n        Amethyst,\\n        Obsidian,\\n        Gold,\\n        Diamond\\n    }\\n\\n    enum MoodId {\\n        Surprised,\\n        Happy,\\n        Relaxed,\\n        Excited,\\n        Speechless,\\n        Chilling,\\n        Annoyed,\\n        Sleepy,\\n        Unimpressed,\\n        Meditating,\\n        Relieved,\\n        Cheeky,\\n        Sus\\n    }\\n\\n    enum GlassesId {\\n        None,\\n        LeftMonocle,\\n        RightMonocle,\\n        Flip,\\n        Valentine,\\n        Shutters,\\n        ThreeD,\\n        Ski,\\n        Monolens\\n    }\\n\\n    /* TRAIT STRUCTS */\\n    struct Material {\\n        MaterialId id;\\n        string name;\\n        string[2] vals;\\n    }\\n\\n    struct Glasses {\\n        GlassesId id;\\n        string name;\\n    }\\n\\n    struct Mood {\\n        MoodId id;\\n        string name;\\n    }\\n\\n    struct GlowInTheDarkData {\\n        // contains the light mode colors\\n        string[2] light;\\n        // contains the dark mode colors\\n        string[2] dark;\\n        string name;\\n    }\\n\\n    /* DATA RETRIEVAL */\\n    function getGlowInTheDarkData()\\n        public\\n        pure\\n        returns (GlowInTheDarkData memory)\\n    {\\n        return\\n            GlowInTheDarkData(\\n                [\\\"#fbfffc\\\", \\\"#d7ffd7\\\"],\\n                [\\\"#052925\\\", \\\"#a4ffa1\\\"],\\n                \\\"Glow In The Dark\\\"\\n            );\\n    }\\n\\n    function getDiamondOverlayGradient()\\n        public\\n        pure\\n        returns (string[7] memory)\\n    {\\n        return [\\n            \\\"#fffd92\\\",\\n            \\\"#ffcca7\\\",\\n            \\\"#f893ff\\\",\\n            \\\"#b393ff\\\",\\n            \\\"#99a7ff\\\",\\n            \\\"#76d4ff\\\",\\n            \\\"#7cffda\\\"\\n        ];\\n    }\\n\\n    function getMaterial(uint256 _materialId)\\n        public\\n        pure\\n        returns (Material memory)\\n    {\\n        Material[12] memory materials = [\\n            Material(MaterialId.Pearl, \\\"Ocean Pearl\\\", [\\\"#ffffff\\\", \\\"#f6e6ff\\\"]),\\n            Material(\\n                MaterialId.Copper,\\n                \\\"Resistor Copper\\\",\\n                [\\\"#f7d1bf\\\", \\\"#5a2c1d\\\"]\\n            ),\\n            Material(MaterialId.Onyx, \\\"Void Onyx\\\", [\\\"#615c5c\\\", \\\"#0f0f0f\\\"]),\\n            Material(MaterialId.Quartz, \\\"Block Quartz\\\", [\\\"#ffb4be\\\", \\\"#81004e\\\"]),\\n            Material(\\n                MaterialId.Emerald,\\n                \\\"Matrix Emerald\\\",\\n                [\\\"#97ff47\\\", \\\"#011601\\\"]\\n            ),\\n            Material(MaterialId.Ruby, \\\"404 Ruby\\\", [\\\"#fe3d4a\\\", \\\"#460008\\\"]),\\n            Material(\\n                MaterialId.Sapphire,\\n                \\\"Hyperlink Sapphire\\\",\\n                [\\\"#4668ff\\\", \\\"#000281\\\"]\\n            ),\\n            Material(MaterialId.Amber, \\\"Sunset Amber\\\", [\\\"#ffa641\\\", \\\"#30031f\\\"]),\\n            Material(\\n                MaterialId.Amethyst,\\n                \\\"Candy Amethyst\\\",\\n                [\\\"#f7dfff\\\", \\\"#3671ca\\\"]\\n            ),\\n            Material(\\n                MaterialId.Obsidian,\\n                \\\"Nether Obsidian\\\",\\n                [\\\"#6f00ff\\\", \\\"#2b003b\\\"]\\n            ),\\n            Material(MaterialId.Gold, \\\"Electric Gold\\\", [\\\"#fcba7d\\\", \\\"#864800\\\"]),\\n            Material(\\n                MaterialId.Diamond,\\n                \\\"Ethereal Diamond\\\",\\n                [\\\"#b5f9ff\\\", \\\"#30c2c2\\\"]\\n            )\\n        ];\\n\\n        return materials[_materialId];\\n    }\\n\\n    function getMood(uint256 _moodId) public pure returns (Mood memory) {\\n        Mood[13] memory moods = [\\n            Mood(MoodId.Surprised, \\\"Surprised\\\"),\\n            Mood(MoodId.Happy, \\\"Happy\\\"),\\n            Mood(MoodId.Relaxed, \\\"Relaxed\\\"),\\n            Mood(MoodId.Excited, \\\"Excited\\\"),\\n            Mood(MoodId.Speechless, \\\"Speechless\\\"),\\n            Mood(MoodId.Chilling, \\\"Chilling\\\"),\\n            Mood(MoodId.Annoyed, \\\"Annoyed\\\"),\\n            Mood(MoodId.Sleepy, \\\"Sleepy\\\"),\\n            Mood(MoodId.Unimpressed, \\\"Unimpressed\\\"),\\n            Mood(MoodId.Meditating, \\\"Meditating\\\"),\\n            Mood(MoodId.Relieved, \\\"Relieved\\\"),\\n            Mood(MoodId.Cheeky, \\\"Cheeky\\\"),\\n            Mood(MoodId.Sus, \\\"Sus\\\")\\n        ];\\n\\n        return moods[_moodId];\\n    }\\n\\n    function getGlasses(uint256 _glassesId)\\n        public\\n        pure\\n        returns (Glasses memory)\\n    {\\n        Glasses[9] memory glasses = [\\n            Glasses(GlassesId.None, \\\"None\\\"),\\n            Glasses(GlassesId.LeftMonocle, \\\"Left Monocle\\\"),\\n            Glasses(GlassesId.RightMonocle, \\\"Right Monocle\\\"),\\n            Glasses(GlassesId.Flip, \\\"Flip\\\"),\\n            Glasses(GlassesId.Valentine, \\\"Valentine\\\"),\\n            Glasses(GlassesId.Shutters, \\\"Shutters\\\"),\\n            Glasses(GlassesId.ThreeD, \\\"3D\\\"),\\n            Glasses(GlassesId.Ski, \\\"Ski\\\"),\\n            Glasses(GlassesId.Monolens, \\\"Monolens\\\")\\n        ];\\n\\n        return glasses[_glassesId];\\n    }\\n\\n    /* UTILS */\\n    // used to determine proper accent colors.\\n    function isLightMaterial(MaterialId _id) public pure returns (bool) {\\n        return _id == MaterialId.Pearl || _id == MaterialId.Diamond;\\n    }\\n\\n    function getMaterialAccentColor(MaterialId _id)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.getCssVar(\\\"black\\\");\\n        }\\n\\n        return utils.getCssVar(\\\"white\\\");\\n    }\\n\\n    function getMaterialShadow(MaterialId _id)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.black_a(85);\\n        }\\n\\n        return utils.white_a(85);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", utils.uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_engraving\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isLight\",\"type\":\"bool\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Face", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}