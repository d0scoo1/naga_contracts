{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/libraries/LibAppStorage.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nstruct AppStorage {\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n    string currency;\r\n    uint256 totalSupply;\r\n    bool paused;\r\n    address blacklister;\r\n    address pauser;\r\n    address rescuer;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => bool) minters;\r\n    mapping(address => uint256) minterAllowed;\r\n    mapping(address => bool) blacklisted;\r\n    mapping(address => uint256) permitNonces;\r\n    mapping(address => mapping(bytes32 => bool)) _authorizationStates;\r\n}\r\n\r\n// File: contracts/interfaces/IDiamondCut.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDiamondCut {\r\n    enum FacetCutAction {\r\n        Add,\r\n        Replace,\r\n        Remove\r\n    }\r\n\r\n    struct FacetCut {\r\n        address facetAddress;\r\n        FacetCutAction action;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external;\r\n\r\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n}\r\n\r\n// File: contracts/libraries/ECRecover.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary ECRecover {\r\n    function recover(\r\n        bytes32 digest,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        if (\r\n            uint256(s) >\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\r\n        ) {\r\n            revert(\"Invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"Invalid signature 'v' value\");\r\n        }\r\n\r\n        address signer = ecrecover(digest, v, r, s);\r\n        require(signer != address(0), \"Invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/EIP712.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary EIP712 {\r\n    event RecoverDebug(bytes data);\r\n    event RecoverDebug32(bytes32 data);\r\n\r\n    function recover(\r\n        bytes32 domainSeparator,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes memory typeHashAndData\r\n    ) internal pure returns (address) {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(typeHashAndData)\r\n            )\r\n        );\r\n\r\n        return ECRecover.recover(digest, v, r, s);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/LibDiamond.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nlibrary LibDiamond {\r\n    bytes32 constant DIAMOND_STORAGE_POSITION =\r\n        keccak256(\"diamond.standard.diamond.storage\");\r\n\r\n    struct DiamondStorage {\r\n        mapping(bytes4 => bytes32) facets;\r\n        mapping(uint256 => bytes32) selectorSlots;\r\n        uint16 selectorCount;\r\n        mapping(bytes4 => bool) supportedInterfaces;\r\n        address contractOwner;\r\n        mapping(address => bool) isOwner;\r\n    }\r\n\r\n    function diamondStorage()\r\n        internal\r\n        pure\r\n        returns (DiamondStorage storage ds)\r\n    {\r\n        bytes32 position = DIAMOND_STORAGE_POSITION;\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n    }\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    function setContractOwner(address _newOwner) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        address previousOwner = ds.contractOwner;\r\n        ds.contractOwner = _newOwner;\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n    function contractOwner() internal view returns (address contractOwner_) {\r\n        contractOwner_ = diamondStorage().contractOwner;\r\n    }\r\n\r\n    function enforceIsContractOwner() internal view {\r\n        require(\r\n            msg.sender == diamondStorage().contractOwner,\r\n            \"Must be contract owner\"\r\n        );\r\n    }\r\n\r\n    event DiamondCut(\r\n        IDiamondCut.FacetCut[] _diamondCut,\r\n        address _init,\r\n        bytes _calldata\r\n    );\r\n\r\n    bytes32 constant CLEAR_ADDRESS_MASK =\r\n        bytes32(uint256(0xffffffffffffffffffffffff));\r\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\r\n\r\n    function diamondCut(\r\n        IDiamondCut.FacetCut[] memory _diamondCut,\r\n        address _init,\r\n        bytes memory _calldata\r\n    ) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        uint256 originalSelectorCount = ds.selectorCount;\r\n        uint256 selectorCount = originalSelectorCount;\r\n        bytes32 selectorSlot;\r\n        if (selectorCount & 7 > 0) {\r\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\r\n        }\r\n        // loop through diamond cut\r\n        for (\r\n            uint256 facetIndex;\r\n            facetIndex < _diamondCut.length;\r\n            facetIndex++\r\n        ) {\r\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\r\n                selectorCount,\r\n                selectorSlot,\r\n                _diamondCut[facetIndex].facetAddress,\r\n                _diamondCut[facetIndex].action,\r\n                _diamondCut[facetIndex].functionSelectors\r\n            );\r\n        }\r\n        if (selectorCount != originalSelectorCount) {\r\n            ds.selectorCount = uint16(selectorCount);\r\n        }\r\n        if (selectorCount & 7 > 0) {\r\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\r\n        }\r\n        emit DiamondCut(_diamondCut, _init, _calldata);\r\n        initializeDiamondCut(_init, _calldata);\r\n    }\r\n\r\n    function addReplaceRemoveFacetSelectors(\r\n        uint256 _selectorCount,\r\n        bytes32 _selectorSlot,\r\n        address _newFacetAddress,\r\n        IDiamondCut.FacetCutAction _action,\r\n        bytes4[] memory _selectors\r\n    ) internal returns (uint256, bytes32) {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        require(_selectors.length > 0, \"No selectors in facet to cut\");\r\n        if (_action == IDiamondCut.FacetCutAction.Add) {\r\n            enforceHasContractCode(_newFacetAddress, \"Add facet has no code\");\r\n            for (\r\n                uint256 selectorIndex;\r\n                selectorIndex < _selectors.length;\r\n                selectorIndex++\r\n            ) {\r\n                bytes4 selector = _selectors[selectorIndex];\r\n                bytes32 oldFacet = ds.facets[selector];\r\n                require(\r\n                    address(bytes20(oldFacet)) == address(0),\r\n                    \"Can't add function that already exists\"\r\n                );\r\n                ds.facets[selector] =\r\n                    bytes20(_newFacetAddress) |\r\n                    bytes32(_selectorCount);\r\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\r\n                _selectorSlot =\r\n                    (_selectorSlot &\r\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\r\n                    (bytes32(selector) >> selectorInSlotPosition);\r\n                if (selectorInSlotPosition == 224) {\r\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\r\n                    _selectorSlot = 0;\r\n                }\r\n                _selectorCount++;\r\n            }\r\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\r\n            enforceHasContractCode(\r\n                _newFacetAddress,\r\n                \"Replace facet has no code\"\r\n            );\r\n            for (\r\n                uint256 selectorIndex;\r\n                selectorIndex < _selectors.length;\r\n                selectorIndex++\r\n            ) {\r\n                bytes4 selector = _selectors[selectorIndex];\r\n                bytes32 oldFacet = ds.facets[selector];\r\n                address oldFacetAddress = address(bytes20(oldFacet));\r\n                require(\r\n                    oldFacetAddress != address(this),\r\n                    \"Can't replace immutable function\"\r\n                );\r\n                require(\r\n                    oldFacetAddress != _newFacetAddress,\r\n                    \"Can't replace function with same function\"\r\n                );\r\n                require(\r\n                    oldFacetAddress != address(0),\r\n                    \"Can't replace function that doesn't exist\"\r\n                );\r\n                ds.facets[selector] =\r\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\r\n                    bytes20(_newFacetAddress);\r\n            }\r\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\r\n            require(\r\n                _newFacetAddress == address(0),\r\n                \"Remove facet address must be address(0)\"\r\n            );\r\n            uint256 selectorSlotCount = _selectorCount >> 3;\r\n            uint256 selectorInSlotIndex = _selectorCount & 7;\r\n            for (\r\n                uint256 selectorIndex;\r\n                selectorIndex < _selectors.length;\r\n                selectorIndex++\r\n            ) {\r\n                if (_selectorSlot == 0) {\r\n                    selectorSlotCount--;\r\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\r\n                    selectorInSlotIndex = 7;\r\n                } else {\r\n                    selectorInSlotIndex--;\r\n                }\r\n                bytes4 lastSelector;\r\n                uint256 oldSelectorsSlotCount;\r\n                uint256 oldSelectorInSlotPosition;\r\n                {\r\n                    bytes4 selector = _selectors[selectorIndex];\r\n                    bytes32 oldFacet = ds.facets[selector];\r\n                    require(\r\n                        address(bytes20(oldFacet)) != address(0),\r\n                        \"Can't remove function that doesn't exist\"\r\n                    );\r\n                    require(\r\n                        address(bytes20(oldFacet)) != address(this),\r\n                        \"Can't remove immutable function\"\r\n                    );\r\n                    lastSelector = bytes4(\r\n                        _selectorSlot << (selectorInSlotIndex << 5)\r\n                    );\r\n                    if (lastSelector != selector) {\r\n                        ds.facets[lastSelector] =\r\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\r\n                            bytes20(ds.facets[lastSelector]);\r\n                    }\r\n                    delete ds.facets[selector];\r\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\r\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\r\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\r\n                }\r\n                if (oldSelectorsSlotCount != selectorSlotCount) {\r\n                    bytes32 oldSelectorSlot = ds.selectorSlots[\r\n                        oldSelectorsSlotCount\r\n                    ];\r\n                    oldSelectorSlot =\r\n                        (oldSelectorSlot &\r\n                            ~(CLEAR_SELECTOR_MASK >>\r\n                                oldSelectorInSlotPosition)) |\r\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\r\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\r\n                } else {\r\n                    _selectorSlot =\r\n                        (_selectorSlot &\r\n                            ~(CLEAR_SELECTOR_MASK >>\r\n                                oldSelectorInSlotPosition)) |\r\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\r\n                }\r\n                if (selectorInSlotIndex == 0) {\r\n                    delete ds.selectorSlots[selectorSlotCount];\r\n                    _selectorSlot = 0;\r\n                }\r\n            }\r\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\r\n        } else {\r\n            revert(\"Incorrect FacetCutAction\");\r\n        }\r\n        return (_selectorCount, _selectorSlot);\r\n    }\r\n\r\n    function initializeDiamondCut(address _init, bytes memory _calldata)\r\n        internal\r\n    {\r\n        if (_init == address(0)) {\r\n            require(\r\n                _calldata.length == 0,\r\n                \"_init is address(0) but_calldata is not empty\"\r\n            );\r\n        } else {\r\n            require(\r\n                _calldata.length > 0,\r\n                \"_calldata is empty but _init is not address(0)\"\r\n            );\r\n            if (_init != address(this)) {\r\n                enforceHasContractCode(_init, \"_init address has no code\");\r\n            }\r\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\r\n            if (!success) {\r\n                if (error.length > 0) {\r\n                    revert(string(error));\r\n                } else {\r\n                    revert(\"_init function reverted\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function enforceHasContractCode(\r\n        address _contract,\r\n        string memory _errorMessage\r\n    ) internal view {\r\n        uint256 contractSize;\r\n        assembly {\r\n            contractSize := extcodesize(_contract)\r\n        }\r\n        require(contractSize > 0, _errorMessage);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/facets/TokenFacet.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenFacet is IERC20 {\r\n    AppStorage internal s;\r\n\r\n    using SafeERC20 for IERC20;\r\n    bool internal _initialized;\r\n\r\n    event TokenSetup(\r\n        address indexed initiator,\r\n        string _name,\r\n        string _token,\r\n        uint8 decimals\r\n    );\r\n    event Mint(address indexed minter, address indexed to, uint256 amount);\r\n    event Burn(address indexed burner, uint256 amount);\r\n    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\r\n    event MinterRemoved(address indexed oldMinter);\r\n\r\n    bytes32 internal constant _DOMAIN_SEPARATOR =\r\n        0xf235a3a1324700fca428abea7e3ccf9edb374d9c399878216a0ef4af02815cde;\r\n\r\n    /* keccak256(\"Permit(address _owner,address _spender,uint256 _value,uint256 _nonce,uint256 _deadline)\") */\r\n    bytes32 internal constant _PERMIT_TYPEHASH =\r\n        0x283ef5f1323e8965c0333bc5843eb0b8d7ffe23b9c2eab15c3e3ffcc75ae8134;\r\n\r\n    /* keccak256(\"TransferWithAuthorization(address _from,address _to,uint256 _value,uint256 _validAfter,uint256 _validBefore,bytes32 _nonce)\")*/\r\n    bytes32 internal constant _TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\r\n        0x310777934f929c98189a844bb5f21f2844db2a576625365b824861540a319f79;\r\n\r\n    /* keccak256(\"ReceiveWithAuthorization(address _from,address _to,uint256 _value,uint256 _validAfter,uint256 _validBefore,bytes32 _nonce)\")*/\r\n    bytes32 internal constant _RECEIVE_WITH_AUTHORIZATION_TYPEHASH =\r\n        0x58ac3df019d91fe0955489460a6a1c370bec91d993d7efbc0925fe3d403653eb;\r\n\r\n    /* keccak256(\"CancelAuthorization(address _authorizer,bytes32 _nonce)\")*/\r\n    bytes32 internal constant _CANCEL_AUTHORIZATION_TYPEHASH =\r\n        0xf523c75f846f1f78c4e7be3cf73d7e9c0b2a8d15cd65153faae8afa14f91c341;\r\n\r\n    function name() external view returns (string memory name_) {\r\n        name_ = s.name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory symbol_) {\r\n        symbol_ = s.symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8 decimals_) {\r\n        decimals_ = s.decimals;\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() external pure returns (bytes32 ds_) {\r\n        ds_ = _DOMAIN_SEPARATOR;\r\n    }\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32 pth_) {\r\n        pth_ = _PERMIT_TYPEHASH;\r\n    }\r\n\r\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\r\n        external\r\n        pure\r\n        returns (bytes32 twath_)\r\n    {\r\n        twath_ = _TRANSFER_WITH_AUTHORIZATION_TYPEHASH;\r\n    }\r\n\r\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\r\n        external\r\n        pure\r\n        returns (bytes32 rwath_)\r\n    {\r\n        rwath_ = _RECEIVE_WITH_AUTHORIZATION_TYPEHASH;\r\n    }\r\n\r\n    function CANCEL_AUTHORIZATION_TYPEHASH()\r\n        external\r\n        pure\r\n        returns (bytes32 cath_)\r\n    {\r\n        cath_ = _CANCEL_AUTHORIZATION_TYPEHASH;\r\n    }\r\n\r\n    constructor() {\r\n        _initialized = false;\r\n    }\r\n\r\n    function setup(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) external {\r\n        require(!_initialized);\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.name = _name;\r\n        s.symbol = _symbol;\r\n        s.decimals = _decimals;\r\n\r\n        _initialized = true;\r\n        emit TokenSetup(msg.sender, _name, _symbol, _decimals);\r\n    }\r\n\r\n    modifier onlyMinters() {\r\n        require(s.minters[msg.sender], \"Caller is not a minter\");\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        onlyMinters\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_to)\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"Mint to the zero address\");\r\n        require(_amount > 0, \"Mint amount not greater than 0\");\r\n\r\n        uint256 mintingAllowedAmount = s.minterAllowed[msg.sender];\r\n        require(\r\n            _amount <= mintingAllowedAmount,\r\n            \"Mint amount exceeds minterAllowance\"\r\n        );\r\n\r\n        s.totalSupply = s.totalSupply + _amount;\r\n        s.balances[_to] = s.balances[_to] + _amount;\r\n        s.minterAllowed[msg.sender] = mintingAllowedAmount - _amount;\r\n        emit Mint(msg.sender, _to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function minterAllowance(address _minter)\r\n        external\r\n        view\r\n        returns (uint256 amount_)\r\n    {\r\n        amount_ = s.minterAllowed[_minter];\r\n    }\r\n\r\n    function isMinter(address _account) external view returns (bool isMinter_) {\r\n        isMinter_ = s.minters[_account];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        external\r\n        view\r\n        returns (uint256 amount_)\r\n    {\r\n        amount_ = s.allowed[_owner][_spender];\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256 amount_) {\r\n        amount_ = s.totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n        external\r\n        view\r\n        returns (uint256 amount_)\r\n    {\r\n        amount_ = s.balances[_account];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_spender)\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal {\r\n        require(_owner != address(0), \"Approve from the zero address\");\r\n        require(_spender != address(0), \"Approve to the zero address\");\r\n        s.allowed[_owner][_spender] = _value;\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_from)\r\n        notBlacklisted(_to)\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _value <= s.allowed[_from][msg.sender],\r\n            \"Transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(_from, _to, _value);\r\n        s.allowed[_from][msg.sender] = s.allowed[_from][msg.sender] - _value;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_to)\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        require(_from != address(0), \"Transfer from the zero address\");\r\n        require(_to != address(0), \"Transfer to the zero address\");\r\n        require(_value <= s.balances[_from], \"Transfer amount exceeds balance\");\r\n\r\n        s.balances[_from] = s.balances[_from] - _value;\r\n        s.balances[_to] = s.balances[_to] + _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function configureMinter(address _minter, uint256 _minterAllowedAmount)\r\n        external\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.minters[_minter] = true;\r\n        s.minterAllowed[_minter] = _minterAllowedAmount;\r\n        emit MinterConfigured(_minter, _minterAllowedAmount);\r\n        return true;\r\n    }\r\n\r\n    function removeMinter(address _minter) external returns (bool) {\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.minters[_minter] = false;\r\n        s.minterAllowed[_minter] = 0;\r\n        emit MinterRemoved(_minter);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _amount)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n    {\r\n        uint256 balance = s.balances[msg.sender];\r\n        require(_amount > 0, \"Burn amount not greater than 0\");\r\n        require(balance >= _amount, \"Burn amount exceeds balance\");\r\n\r\n        s.totalSupply = s.totalSupply - _amount;\r\n        s.balances[msg.sender] = balance - _amount;\r\n        emit Burn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _increment)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_spender)\r\n        returns (bool)\r\n    {\r\n        _increaseAllowance(msg.sender, _spender, _increment);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _decrement)\r\n        external\r\n        whenNotPaused\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(_spender)\r\n        returns (bool)\r\n    {\r\n        _decreaseAllowance(msg.sender, _spender, _decrement);\r\n        return true;\r\n    }\r\n\r\n    function transferWithAuthorization(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _validAfter,\r\n        uint256 _validBefore,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external whenNotPaused notBlacklisted(_from) notBlacklisted(_to) {\r\n        _transferWithAuthorization(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _validAfter,\r\n            _validBefore,\r\n            _nonce,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }\r\n\r\n    function receiveWithAuthorization(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _validAfter,\r\n        uint256 _validBefore,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external whenNotPaused notBlacklisted(_from) notBlacklisted(_to) {\r\n        _receiveWithAuthorization(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _validAfter,\r\n            _validBefore,\r\n            _nonce,\r\n            _v,\r\n            _r,\r\n            _s\r\n        );\r\n    }\r\n\r\n    function cancelAuthorization(\r\n        address _authorizer,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external whenNotPaused {\r\n        _cancelAuthorization(_authorizer, _nonce, _v, _r, _s);\r\n    }\r\n\r\n    function permit(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external whenNotPaused notBlacklisted(_owner) notBlacklisted(_spender) {\r\n        _permit(_owner, _spender, _value, _deadline, _v, _r, _s);\r\n    }\r\n\r\n    function _increaseAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _increment\r\n    ) internal {\r\n        _approve(_owner, _spender, s.allowed[_owner][_spender] + _increment);\r\n    }\r\n\r\n    function _decreaseAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _decrement\r\n    ) internal {\r\n        _approve(_owner, _spender, s.allowed[_owner][_spender] - _decrement);\r\n    }\r\n\r\n    function nonces(address _owner) external view returns (uint256 nonce_) {\r\n        nonce_ = s.permitNonces[_owner];\r\n    }\r\n\r\n    function _permit(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal {\r\n        require(_deadline >= block.timestamp, \"Permit is expired\");\r\n\r\n        bytes memory data = abi.encode(\r\n            _PERMIT_TYPEHASH,\r\n            _owner,\r\n            _spender,\r\n            _value,\r\n            s.permitNonces[_owner]++,\r\n            _deadline\r\n        );\r\n        require(\r\n            EIP712.recover(_DOMAIN_SEPARATOR, _v, _r, _s, data) == _owner,\r\n            \"Invalid signature\"\r\n        );\r\n\r\n        _approve(_owner, _spender, _value);\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => bool)) private _authorizationStates;\r\n\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n    event AuthorizationCanceled(\r\n        address indexed authorizer,\r\n        bytes32 indexed nonce\r\n    );\r\n\r\n    function authorizationState(address _authorizer, bytes32 _nonce)\r\n        external\r\n        view\r\n        returns (bool state_)\r\n    {\r\n        state_ = _authorizationStates[_authorizer][_nonce];\r\n    }\r\n\r\n    function _transferWithAuthorization(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _validAfter,\r\n        uint256 _validBefore,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal {\r\n        _requireValidAuthorization(_from, _nonce, _validAfter, _validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _validAfter,\r\n            _validBefore,\r\n            _nonce\r\n        );\r\n        require(\r\n            EIP712.recover(_DOMAIN_SEPARATOR, _v, _r, _s, data) == _from,\r\n            \"Invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(_from, _nonce);\r\n        _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _receiveWithAuthorization(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _validAfter,\r\n        uint256 _validBefore,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal {\r\n        require(_to == msg.sender, \"Caller must be the payee\");\r\n        _requireValidAuthorization(_from, _nonce, _validAfter, _validBefore);\r\n\r\n        bytes memory data = abi.encode(\r\n            _RECEIVE_WITH_AUTHORIZATION_TYPEHASH,\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _validAfter,\r\n            _validBefore,\r\n            _nonce\r\n        );\r\n        require(\r\n            EIP712.recover(_DOMAIN_SEPARATOR, _v, _r, _s, data) == _from,\r\n            \"Invalid signature\"\r\n        );\r\n\r\n        _markAuthorizationAsUsed(_from, _nonce);\r\n        _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _cancelAuthorization(\r\n        address _authorizer,\r\n        bytes32 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) internal {\r\n        _requireUnusedAuthorization(_authorizer, _nonce);\r\n\r\n        bytes memory data = abi.encode(\r\n            _CANCEL_AUTHORIZATION_TYPEHASH,\r\n            _authorizer,\r\n            _nonce\r\n        );\r\n        require(\r\n            EIP712.recover(_DOMAIN_SEPARATOR, _v, _r, _s, data) == _authorizer,\r\n            \"Invalid signature\"\r\n        );\r\n\r\n        _authorizationStates[_authorizer][_nonce] = true;\r\n        emit AuthorizationCanceled(_authorizer, _nonce);\r\n    }\r\n\r\n    function _requireUnusedAuthorization(address _authorizer, bytes32 _nonce)\r\n        private\r\n        view\r\n    {\r\n        require(\r\n            !_authorizationStates[_authorizer][_nonce],\r\n            \"Authorization is used or canceled\"\r\n        );\r\n    }\r\n\r\n    function _requireValidAuthorization(\r\n        address _authorizer,\r\n        bytes32 _nonce,\r\n        uint256 _validAfter,\r\n        uint256 _validBefore\r\n    ) private view {\r\n        require(\r\n            block.timestamp > _validAfter,\r\n            \"Authorization is not yet valid\"\r\n        );\r\n        require(block.timestamp < _validBefore, \"Authorization is expired\");\r\n        _requireUnusedAuthorization(_authorizer, _nonce);\r\n    }\r\n\r\n    function _markAuthorizationAsUsed(address _authorizer, bytes32 _nonce)\r\n        private\r\n    {\r\n        _authorizationStates[_authorizer][_nonce] = true;\r\n        emit AuthorizationUsed(_authorizer, _nonce);\r\n    }\r\n\r\n    event RescuerChanged(address indexed _newRescuer);\r\n\r\n    modifier onlyRescuer() {\r\n        require(msg.sender == s.rescuer, \"Caller is not the rescuer\");\r\n        _;\r\n    }\r\n\r\n    function rescueERC20(\r\n        IERC20 _tokenContract,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyRescuer {\r\n        _tokenContract.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function updateRescuer(address _newRescuer) external {\r\n        require(_newRescuer != address(0), \"New rescuer is the zero address\");\r\n\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.rescuer = _newRescuer;\r\n        emit RescuerChanged(s.rescuer);\r\n    }\r\n\r\n    event Pause();\r\n    event Unpause();\r\n    event PauserChanged(address indexed newAddress);\r\n\r\n    modifier whenNotPaused() {\r\n        require(!s.paused, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(msg.sender == s.pauser, \"Caller is not the pauser\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyPauser {\r\n        s.paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() external onlyPauser {\r\n        s.paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    function updatePauser(address _newPauser) external {\r\n        require(_newPauser != address(0), \"New pauser is the zero address\");\r\n\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.pauser = _newPauser;\r\n        emit PauserChanged(s.pauser);\r\n    }\r\n\r\n    event Blacklisted(address indexed _account);\r\n    event UnBlacklisted(address indexed _account);\r\n    event BlacklisterChanged(address indexed _newBlacklister);\r\n\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == s.blacklister, \"Caller is not the blacklister\");\r\n        _;\r\n    }\r\n\r\n    modifier notBlacklisted(address _account) {\r\n        require(!s.blacklisted[_account], \"Account is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    function isBlacklisted(address _account) external view returns (bool) {\r\n        return s.blacklisted[_account];\r\n    }\r\n\r\n    function blacklist(address _account) external onlyBlacklister {\r\n        s.blacklisted[_account] = true;\r\n        emit Blacklisted(_account);\r\n    }\r\n\r\n    function unBlacklist(address _account) external onlyBlacklister {\r\n        s.blacklisted[_account] = false;\r\n        emit UnBlacklisted(_account);\r\n    }\r\n\r\n    function updateBlacklister(address _newBlacklister) external {\r\n        require(\r\n            _newBlacklister != address(0),\r\n            \"New blacklister is the zero address\"\r\n        );\r\n\r\n        LibDiamond.enforceIsContractOwner();\r\n\r\n        s.blacklister = _newBlacklister;\r\n        emit BlacklisterChanged(s.blacklister);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"TokenSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"cath_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ds_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"pth_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rwath_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"twath_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMinter_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRescuer\",\"type\":\"address\"}],\"name\":\"updateRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenFacet", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77d91f5bee9d2f09c211fbf58d46ba2a3e90e04b39a8bc5c9c476b35367131ec"}]}