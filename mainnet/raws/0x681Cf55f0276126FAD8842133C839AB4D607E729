{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InterestRateModels/JumpRateModelV2.sol\": {\r\n      \"content\": \"import \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Logic for Compound's JumpRateModel Contract V2.\\r\\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\\r\\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\r\\n  */\\r\\ncontract BaseJumpRateModelV2 {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\r\\n     */\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\r\\n     */\\r\\n    uint public constant blocksPerYear = 2102400;\\r\\n\\r\\n    /**\\r\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\r\\n     */\\r\\n    uint public multiplierPerBlock;\\r\\n\\r\\n    /**\\r\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\r\\n     */\\r\\n    uint public baseRatePerBlock;\\r\\n\\r\\n    /**\\r\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\r\\n     */\\r\\n    uint public jumpMultiplierPerBlock;\\r\\n\\r\\n    /**\\r\\n     * @notice The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    uint public kink;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an interest rate model\\r\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\r\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\r\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\r\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\r\\n        owner = tx.origin;\\r\\n\\r\\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\r\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\r\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\r\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\r\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) external {\\r\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\r\\n\\r\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market (currently unused)\\r\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\r\\n     */\\r\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\r\\n        // Utilization rate is 0 when there are no borrows\\r\\n        if (borrows == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market\\r\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\r\\n        uint util = utilizationRate(cash, borrows, reserves);\\r\\n\\r\\n        if (util <= kink) {\\r\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\r\\n        } else {\\r\\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\r\\n            uint excessUtil = util.sub(kink);\\r\\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the current supply rate per block\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market\\r\\n     * @param reserveFactorMantissa The current reserve factor for the market\\r\\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\r\\n     */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\\r\\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\\r\\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\r\\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\r\\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to update the parameters of the interest rate model\\r\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\r\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\r\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\r\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\r\\n     */\\r\\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\r\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\r\\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\\r\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\r\\n        kink = kink_;\\r\\n\\r\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice external function to transfer owner role\\r\\n     * @param _newOwner The new owner address\\r\\n     */\\r\\n    function setAdmin(address _newOwner) external {\\r\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\\r\\n  * @author Arr00\\r\\n  * @notice Supports only for V2 cTokens\\r\\n  */\\r\\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {\\r\\n\\r\\n\\t/**\\r\\n     * @notice Calculates the current borrow rate per block\\r\\n     * @param cash The amount of cash in the market\\r\\n     * @param borrows The amount of borrows in the market\\r\\n     * @param reserves The amount of reserves in the market\\r\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\r\\n     */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {\\r\\n        return getBorrowRateInternal(cash, borrows, reserves);\\r\\n    }\\r\\n\\r\\n    constructor(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) \\r\\n    \\tBaseJumpRateModelV2(baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_) public {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/InterestRateModels/InterestRateModel.sol\": {\r\n      \"content\": \"import \\\"../Utils/SafeMath.sol\\\";\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Compound's InterestRateModel Interface\\r\\n  * @author Compound\\r\\n  */\\r\\ncontract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Utils/SafeMath.sol\": {\r\n      \"content\": \"// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "JumpRateModelV2", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b1a2bc2eaa95800000000000000000000000000000000000000000000000000f207539951b53000000000000000000000000000000000000000000000000000b1a2bc2ec500000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}