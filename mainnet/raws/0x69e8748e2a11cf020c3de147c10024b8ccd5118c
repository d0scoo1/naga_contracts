{"status": "1", "message": "OK", "result": [{"SourceCode": "/*  \ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\ud83c\udf08\r\n    RainbowPoop \r\n    not just a piece of shit\r\n    but also a rainbow poop \ud83c\udf08\ud83d\udca9\r\n    or probably another piece of shit\r\n    or something\r\n    or probably nothing\r\n    or 'poopchip'\r\n    Let's poop it! Hellyeah!\r\n    https://rainbowpoop.wtf\r\n    \ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\r\n */\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC165.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC2981.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\r\n     * @param tokenId - the NFT asset queried for royalty information\r\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File contracts/ERC721A.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    uint256 private currentIndex = 0;\r\n\r\n    uint256 internal immutable collectionSize;\r\n    uint256 internal immutable maxBatchSize;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev\r\n     * `maxBatchSize` refers to how much a minter can mint at a time.\r\n     * `collectionSize_` refers to how many tokens are in the collection.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_,\r\n        uint256 collectionSize_\r\n    ) {\r\n        require(collectionSize_ > 0, \"ERC721A: collection must have a nonzero supply\");\r\n        require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = maxBatchSize_;\r\n        collectionSize = collectionSize_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        require(index > 0 && index <= totalSupply(), \"ERC721A: global index out of bounds\");\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx = 0;\r\n        address currOwnershipAddr = address(0);\r\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n            TokenOwnership memory ownership = _ownerships[i];\r\n            if (ownership.addr != address(0)) {\r\n                currOwnershipAddr = ownership.addr;\r\n            }\r\n            if (currOwnershipAddr == owner) {\r\n                if (tokenIdsIdx == index) {\r\n                    return i;\r\n                }\r\n                tokenIdsIdx++;\r\n            }\r\n        }\r\n        revert(\"ERC721A: unable to get token of owner by index\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(owner != address(0), \"ERC721A: number minted query for the zero address\");\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n\r\n        uint256 lowestTokenToCheck;\r\n        if (tokenId >= maxBatchSize) {\r\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n        }\r\n\r\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                return ownership;\r\n            }\r\n        }\r\n\r\n        revert(\"ERC721A: unable to determine the owner of token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \"ERC721A: approve caller is not owner nor approved for all\");\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721A: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId > 0 && tokenId <= currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - there must be `quantity` tokens remaining unminted in the total collection.\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` cannot be larger than the max batch size.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        uint256 startTokenId = totalSupply() + 1;\r\n        require(to != address(0), \"ERC721A: mint to the zero address\");\r\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n        require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        AddressData memory addressData = _addressData[to];\r\n        _addressData[to] = AddressData(addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity));\r\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        uint256 updatedIndex = startTokenId;\r\n\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            emit Transfer(address(0), to, updatedIndex);\r\n            require(_checkOnERC721Received(address(0), to, updatedIndex, _data), \"ERC721A: transfer to non ERC721Receiver implementer\");\r\n            updatedIndex++;\r\n        }\r\n\r\n        currentIndex += quantity;\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(isApprovedOrOwner, \"ERC721A: transfer caller is not owner nor approved\");\r\n\r\n        require(prevOwnership.addr == from, \"ERC721A: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n        require(quantity > 0, \"quantity must be nonzero\");\r\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n        if (endIndex > collectionSize - 1) {\r\n            endIndex = collectionSize - 1;\r\n        }\r\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n        require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n            if (_ownerships[i].addr == address(0)) {\r\n                TokenOwnership memory ownership = ownershipOf(i);\r\n                _ownerships[i] = TokenOwnership(ownership.addr, ownership.startTimestamp);\r\n            }\r\n        }\r\n        nextOwnerToExplicitlySet = endIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n// File contracts/Base64.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\n                out := shl(8, out)\r\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}\r\n\r\n// File contracts/RainbowPoop.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract RainbowPoop is ERC721A, Ownable, IERC2981 {\r\n    using Strings for uint256;\r\n    using Strings for uint8;\r\n\r\n    string[8] private RAINBOW_COLORS = [\"url(#rainbow)\", \"#ff2f2b\", \"#ff5722\", \"#ffeb3b\", \"#4caf50\", \"#03a9f4\", \"#673ab7\", \"#9c27b0\"];\r\n    string[23] private GENERAL_COLORS = [\r\n        \"url(#rainbow)\",\r\n        \"#fff\",\r\n        \"#f44336\",\r\n        \"#e91e63\",\r\n        \"#9c27b0\",\r\n        \"#673ab7\",\r\n        \"#3f51b5\",\r\n        \"#2196f3\",\r\n        \"#03a9f4\",\r\n        \"#00bcd4\",\r\n        \"#009688\",\r\n        \"#4caf50\",\r\n        \"#8bc34a\",\r\n        \"#cddc39\",\r\n        \"#ffeb3b\",\r\n        \"#ffc107\",\r\n        \"#ff9800\",\r\n        \"#ff5722\",\r\n        \"#795548\",\r\n        \"#9e9e9e\",\r\n        \"#607d8b\",\r\n        \"#000\",\r\n        \"none\"\r\n    ];\r\n\r\n    string[8] private HAIR_COLORS = [\"url(#rainbow)\", \"#607d8b\", \"#f44336\", \"#fff\", \"#8bc34a\", \"#2196f3\", \"#ff9800\", \"#795548\"];\r\n    string[8] private HEAD_COLORS = [\"url(#rainbow)\", \"#607d8b\", \"#f44336\", \"#fff\", \"#8bc34a\", \"#2196f3\", \"#ff9800\", \"#795548\"];\r\n    string[8] private BOTTOM_COLORS = [\"url(#rainbow)\", \"#f44336\", \"#000\", \"#8bc34a\", \"#2196f3\", \"#607d8b\", \"#ff9800\", \"#795548\"];\r\n\r\n    struct Poop {\r\n        uint8 background;\r\n        uint8 hair;\r\n        uint8 head;\r\n        uint8 bottom;\r\n        uint8 eyes;\r\n        uint8 mouth;\r\n        uint8 generation;\r\n        uint8 shit;\r\n    }\r\n\r\n    string[8] private backgroundAttr = [unicode\"\ud83c\udf08\", \"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\", \"Indigo\", \"Violet\"];\r\n    string[8] private hairAttr = [unicode\"\ud83c\udf08\", \"Goblin\", \"Punk\", \"Pure\", \"Zombie\", \"Ape\", \"Popcorn\", \"Poop\"];\r\n    string[8] private headAttr = [unicode\"\ud83c\udf08\", unicode\"\ud83d\udc7d\", unicode\"\ud83d\udc79\", unicode\"\ud83d\udc80\", unicode\"\ud83e\udddf\", unicode\"\ud83e\udd16\", unicode\"\ud83e\uddb9\u200d\u2642\ufe0f\", unicode\"\ud83d\udca9\"];\r\n    string[8] private bottomAttr = [unicode\"\ud83c\udf08\", \"Beetrootpoop\", \"Poophole\", \"Veganpoop\", \"Poopman\", \"Koalapoop\", \"Shampoop\", \"Poopoop\"];\r\n    string[8] private eyesAttr = [unicode\"\ud83c\udf08\", \"Laserpoop\", \"Cyclopoop\", \"Fasionpoop\", \"Poophole\", \"Pandapoop\", \"Koalapoop\", \"Poopoop\"];\r\n    string[8] private mouthAttr = [unicode\"\ud83c\udf08\", \"Poopshit\", \"Freezingpoop\", \"Puppypoop\", \"Bitchpoop\", \"Boredpoop\", \"Nopoop\", \"Cheesepoop\"];\r\n    string[8] private generationAttr = [unicode\"\ud83c\udf08\", unicode\"\ud83d\udca9\"];\r\n    string[8] private shitAttr = [\"L\", \"G\", \"B\", \"T\", \"Q\", \"I\", \"A\", \"P\"];\r\n\r\n    constructor() ERC721A(\"RainbowPoop - from shit to rainbow poop\", \"rainbowpoop.wtf\", 10, 10000) {}\r\n\r\n    function poop(uint256 quantity) external payable {\r\n        require(quantity <= 2, \"poop too much\");\r\n        require(quantity + totalSupply() <= collectionSize, \"no more poop\");\r\n        require(balanceOf(msg.sender) + quantity <= maxBatchSize, \"you own poooooop\");\r\n        _safeMint(msg.sender, quantity);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        Poop memory p = randomPoop(tokenId);\r\n        string memory output = Base64.encode(\r\n            bytes(\r\n                string(\r\n                    abi.encodePacked(\r\n                        '{\"name\": \"Rainbow Poop #',\r\n                        tokenId.toString(),\r\n                        unicode'\", \"description\": \"RainbowPoop is not just a piece of shit, but also a rainbow poop \ud83c\udf08\ud83d\udca9. \"',\r\n                        ',\"attributes\":',\r\n                        poopAttributes(p),\r\n                        ',\"image\": \"data:image/svg+xml;base64,',\r\n                        Base64.encode(bytes(poopSVG(p))),\r\n                        '\"}'\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", output));\r\n    }\r\n\r\n    function poopSVG(uint256 tokenId) public view returns (string memory) {\r\n        return poopSVG(randomPoop(tokenId));\r\n    }\r\n\r\n    function poopSVG(Poop memory p) private view returns (string memory) {\r\n        string[9] memory parts = [\r\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 60 60\"><defs><linearGradient id=\"rainbow\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#ff2f2b\"/><stop offset=\"17%\" stop-color=\"#ff5722\"/><stop offset=\"33%\" stop-color=\"#ffeb3b\"/><stop offset=\"50%\" stop-color=\"#4caf50\"/><stop offset=\"66%\" stop-color=\"#03a9f4\"/><stop offset=\"83%\" stop-color=\"#673ab7\"/><stop offset=\"100%\" stop-color=\"#9c27b0\"/></linearGradient></defs>',\r\n            poopBackground(p.background),\r\n            poopHair(p.hair),\r\n            poopHead(p.head),\r\n            poopBottom(p.bottom),\r\n            poopEyes(p.eyes),\r\n            poopMouth(p.mouth),\r\n            poopGeneration(p.generation),\r\n            \"</svg>\"\r\n        ];\r\n\r\n        return string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n    }\r\n\r\n    function randomPoop(uint256 tokenId) private pure returns (Poop memory) {\r\n        uint256 rand = uint256(keccak256(abi.encodePacked(tokenId)));\r\n\r\n        return\r\n            Poop({\r\n                background: avgPoopIndex(uint8(rand & 255)),\r\n                hair: seqPoopIndex(uint8((rand >> 8) & 255)),\r\n                head: powPoopIndex(uint8((rand >> 16) & 255)),\r\n                bottom: avgPoopIndex(uint8((rand >> 24) & 255)),\r\n                eyes: seqPoopIndex(uint8((rand >> 32) & 255)),\r\n                mouth: seqPoopIndex(uint8((rand >> 40) & 255)),\r\n                generation: twoPoopIndex(uint8((rand >> 48) & 255)),\r\n                shit: avgPoopIndex(uint8((rand >> 56) & 255))\r\n            });\r\n    }\r\n\r\n    function avgPoopIndex(uint8 num) private pure returns (uint8) {\r\n        return (num % 8);\r\n    }\r\n\r\n    function powPoopIndex(uint8 num) private pure returns (uint8) {\r\n        if (num < 2) {\r\n            return 0;\r\n        }\r\n        if (num < 4) {\r\n            return 1;\r\n        }\r\n        if (num < 8) {\r\n            return 2;\r\n        }\r\n        if (num < 16) {\r\n            return 3;\r\n        }\r\n        if (num < 32) {\r\n            return 4;\r\n        }\r\n        if (num < 64) {\r\n            return 5;\r\n        }\r\n        if (num < 128) {\r\n            return 6;\r\n        }\r\n        return 7;\r\n    }\r\n\r\n    function seqPoopIndex(uint8 num) private pure returns (uint8) {\r\n        if (num < 8) {\r\n            return 0;\r\n        }\r\n        if (num < 16) {\r\n            return 1;\r\n        }\r\n        if (num < 24) {\r\n            return 2;\r\n        }\r\n        if (num < 40) {\r\n            return 3;\r\n        }\r\n        if (num < 64) {\r\n            return 4;\r\n        }\r\n        if (num < 104) {\r\n            return 5;\r\n        }\r\n        if (num < 168) {\r\n            return 6;\r\n        }\r\n        return 7;\r\n    }\r\n\r\n    function twoPoopIndex(uint8 num) private pure returns (uint8) {\r\n        return (num < 51) ? 0 : 1;\r\n    }\r\n\r\n    function poopBackground(uint8 index) private view returns (string memory) {\r\n        return string(abi.encodePacked('<rect width=\"100%\" height=\"100%\" fill=\"', RAINBOW_COLORS[index], '\" />'));\r\n    }\r\n\r\n    function poopHair(uint8 index) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M39 16c-2.5 4.99-9.02 7.2-15.86 8.38l-5.91.88c-.72.13-1.41.27-2.07.44C9.62 16.56 16.36 11.87 24 9c6.28-2.36 2-8 2-8 9 0 16 9 13 15z\" fill=\"',\r\n                    HAIR_COLORS[index],\r\n                    '\" stroke=\"#000\"/>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function poopHead(uint8 index) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M55 35a13 13 0 01-1.74 6.33c-2.59 4.49-8.34 8.87-19 11.91l-2.39.64A125 125 0 019 57a8 8 0 01-8-8c0-3 1.5-5.25 4.5-7a12 12 0 013-1.15 70 70 0 019.71-1.54l7-.86a61.68 61.68 0 008.19-1.78l12.37-7.02A34 34 0 0048 27s7 2 7 8z\" fill=\"',\r\n                    HEAD_COLORS[index],\r\n                    '\" stroke=\"#000\"/>'\r\n                    '<path d=\"M48 27a34 34 0 01-2.3 2.65l-12.37 7.02a61.68 61.68 0 01-8.19 1.78l-7.0.86c-3.2.2-6.5.8-9.71 1.54A8 8 0 016 35c0-5 3.43-8 9.16-9.3.66-.17 1.35-.31 2.07-.44l5.91-.88C29.98 23.2 36.5 20.99 39 16c10 0 9 11 9 11z\" fill=\"',\r\n                    HEAD_COLORS[index],\r\n                    '\" stroke=\"#000\"/>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function poopBottom(uint8 index) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<path d=\"M59 49a8 8 0 01-8 8H9a125 125 0 0022.83-3.12l2.39-.64c10.7-3.04 16.45-7.42 19-11.91A8 8 0 0159 49z\" fill=\"',\r\n                    BOTTOM_COLORS[index],\r\n                    '\" stroke=\"#000\"/>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function poopEyes(uint8 index) private view returns (string memory) {\r\n        if (index == 0) {\r\n            return string(abi.encodePacked(_poopCircle(21, 32, 8, 0), _poopCircle(40, 32, 8, 0), _poopRect(28, 30, 1, 5, 2, 0)));\r\n        }\r\n        if (index == 1) {\r\n            return string(abi.encodePacked(_poopCircle(22, 32, 2, 2, 14), _poopCircle(38, 32, 2, 2, 14), _poopRect(6, 31, 1, 48, 2, 2, 14)));\r\n        }\r\n        if (index == 2) {\r\n            return '<rect x=\"14\" y=\"28\" rx=\"4\" width=\"33\" height=\"8\" stroke-width=\"3\" fill=\"#03a9f4\" stroke=\"#000\" />';\r\n            // return _poopRect(14, 28, 4, 33, 8, 8, 21, 'stroke-width=\"3\"');\r\n        }\r\n        if (index == 3) {\r\n            return string(abi.encodePacked(_poopRect(13, 26, 3, 16, 10, 8), _poopRect(32, 26, 3, 16, 10, 8), _poopRect(28, 29, 1, 5, 2, 0)));\r\n        }\r\n        if (index == 4) {\r\n            return string(abi.encodePacked(_poopCircle(17, 32, 2, 20), _poopCircle(33, 32, 2, 20), _poopRect(13, 28, 1, 14, 2, 21), _poopRect(29, 28, 1, 14, 2, 21)));\r\n        }\r\n        if (index == 5) {\r\n            return string(abi.encodePacked(_poopCircle(21, 32, 8, 21), _poopCircle(39, 32, 8, 21), _poopEllipse(22, 32, 4, 2, 20), _poopEllipse(39, 32, 4, 2, 20)));\r\n        }\r\n        if (index == 6) {\r\n            return string(abi.encodePacked(_poopCircle(22, 32, 2, 20), _poopCircle(40, 32, 2, 20)));\r\n        }\r\n        return string(abi.encodePacked(_poopEye(true), _poopEye(false)));\r\n    }\r\n\r\n    function poopMouth(uint8 index) private view returns (string memory) {\r\n        if (index == 0) {\r\n            // pure\r\n            return _poopPath(\"m21 43a10 24 10 0 0 19 1z\", 0);\r\n        }\r\n        if (index == 1) {\r\n            // shit\r\n            return _poopPath(\"m22 40a10 8 0 0 0 20 4z\", 2);\r\n        }\r\n        if (index == 2) {\r\n            // freezing\r\n            return\r\n                string(\r\n                    abi.encodePacked(\r\n                        _poopRect(20, 44, 3, 20, 6, 2),\r\n                        _poopLine(24, 44, 24, 50, 21),\r\n                        _poopLine(28, 44, 28, 50, 21),\r\n                        _poopLine(32, 44, 32, 50, 21),\r\n                        _poopLine(36, 44, 36, 50, 21)\r\n                    )\r\n                );\r\n        }\r\n        if (index == 3) {\r\n            // puppy\r\n            return _poopPath(\"m36 45a10 6 0 0 1-10 0\", 22);\r\n        }\r\n        if (index == 4) {\r\n            // bitch\r\n            return _poopEllipse(30, 46, 5, 6, 2, 21);\r\n        }\r\n        if (index == 5) {\r\n            // bored\r\n            return _poopPath(\"m28 45a12 6 0 0 1 13 1\", 22);\r\n        }\r\n        if (index == 6) {\r\n            // cheese\r\n            return _poopPath(\"M30 54c7 0 9-5 10-9a1 1 0 00-1-1 26 26 0 01-17 0 1 1 0 00-1 1C20 48 22 54 30 54z\", 2);\r\n        }\r\n\r\n        // none\r\n        return \"\";\r\n    }\r\n\r\n    function poopGeneration(uint8 index) private pure returns (string memory) {\r\n        return index == 0 ? string(abi.encodePacked('<text x=\"1\" y=\"15\" font-size=\"16\">', unicode\"\ud83c\udf08\", \"</text>\")) : \"\";\r\n    }\r\n\r\n    function _poopPath(string memory d, uint8 fill) private view returns (string memory) {\r\n        return string(abi.encodePacked('<path d=\"', d, '\" style=\"stroke-linecap:round;stroke:#000;\" fill=\"', GENERAL_COLORS[fill], '\"/>'));\r\n    }\r\n\r\n    function _poopEye(bool isLeftEye) private view returns (string memory) {\r\n        string memory cx0 = (isLeftEye ? 21 : 39).toString();\r\n        string memory cx1 = (isLeftEye ? 22 : 38).toString();\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<ellipse cx=\"',\r\n                    cx0,\r\n                    '\" cy=\"32\" rx=\"7\" ry=\"8\" fill=\"',\r\n                    GENERAL_COLORS[1],\r\n                    '\" stroke=\"#000\"/><ellipse cx=\"',\r\n                    cx1,\r\n                    '\" cy=\"32\" fill=\"#052e43\" rx=\"2.5\" ry=\"3.5\" /><ellipse cx=\"',\r\n                    cx1,\r\n                    '\" cy=\"32\" fill=\"#607d8b\" rx=\"1\" ry=\"1.6\" />'\r\n                )\r\n            );\r\n    }\r\n\r\n    function _poopLine(\r\n        uint8 x1,\r\n        uint8 y1,\r\n        uint8 x2,\r\n        uint8 y2,\r\n        uint8 stroke\r\n    ) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<line x1=\"',\r\n                    x1.toString(),\r\n                    '\" y1=\"',\r\n                    y1.toString(),\r\n                    '\" x2=\"',\r\n                    x2.toString(),\r\n                    '\" y2=\"',\r\n                    y2.toString(),\r\n                    '\" stroke=\"',\r\n                    GENERAL_COLORS[stroke],\r\n                    '\"/>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function _poopEllipse(\r\n        uint8 cx,\r\n        uint8 cy,\r\n        uint8 rx,\r\n        uint8 ry,\r\n        uint8 fill\r\n    ) private view returns (string memory) {\r\n        return _poopEllipse(cx, cy, rx, ry, fill, 22);\r\n    }\r\n\r\n    function _poopEllipse(\r\n        uint8 cx,\r\n        uint8 cy,\r\n        uint8 rx,\r\n        uint8 ry,\r\n        uint8 fill,\r\n        uint8 stroke\r\n    ) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<ellipse cx=\"',\r\n                    cx.toString(),\r\n                    '\" cy=\"',\r\n                    cy.toString(),\r\n                    '\" rx=\"',\r\n                    rx.toString(),\r\n                    '\" ry=\"',\r\n                    ry.toString(),\r\n                    '\" fill=\"',\r\n                    GENERAL_COLORS[fill],\r\n                    '\" stroke=\"',\r\n                    GENERAL_COLORS[stroke],\r\n                    '\"/>'\r\n                )\r\n            );\r\n    }\r\n\r\n    function _poopRect(\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 rx,\r\n        uint8 width,\r\n        uint8 height,\r\n        uint8 fill\r\n    ) private view returns (string memory) {\r\n        return _poopRect(x, y, rx, width, height, fill, 21);\r\n    }\r\n\r\n    function _poopRect(\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 rx,\r\n        uint8 width,\r\n        uint8 height,\r\n        uint8 fill,\r\n        uint8 stroke\r\n    ) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<rect x=\"',\r\n                    x.toString(),\r\n                    '\" y=\"',\r\n                    y.toString(),\r\n                    '\" rx=\"',\r\n                    rx.toString(),\r\n                    '\" width=\"',\r\n                    width.toString(),\r\n                    '\" height=\"',\r\n                    height.toString(),\r\n                    '\" fill=\"',\r\n                    GENERAL_COLORS[fill],\r\n                    '\" stroke=\"',\r\n                    GENERAL_COLORS[stroke],\r\n                    '\"/>\"'\r\n                )\r\n            );\r\n    }\r\n\r\n    function _poopCircle(\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 r,\r\n        uint8 fill\r\n    ) private view returns (string memory) {\r\n        return _poopCircle(x, y, r, fill, 21);\r\n    }\r\n\r\n    function _poopCircle(\r\n        uint8 x,\r\n        uint8 y,\r\n        uint8 r,\r\n        uint8 fill,\r\n        uint8 stroke\r\n    ) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<circle cx=\"',\r\n                    x.toString(),\r\n                    '\" cy=\"',\r\n                    y.toString(),\r\n                    '\" r=\"',\r\n                    r.toString(),\r\n                    '\" fill=\"',\r\n                    GENERAL_COLORS[fill],\r\n                    '\" stroke=\"',\r\n                    GENERAL_COLORS[stroke],\r\n                    '\" />'\r\n                )\r\n            );\r\n    }\r\n\r\n    function poopAttributes(Poop memory p) private view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '[{\"trait_type\":\"Background\",\"value\":\"',\r\n                    backgroundAttr[p.background],\r\n                    '\"},{\"trait_type\":\"Hair\",\"value\":\"',\r\n                    hairAttr[p.hair],\r\n                    '\"},{\"trait_type\":\"Head\",\"value\":\"',\r\n                    headAttr[p.head],\r\n                    '\"},{\"trait_type\":\"Bottom\",\"value\":\"',\r\n                    bottomAttr[p.bottom],\r\n                    '\"},{\"trait_type\":\"Eyes\",\"value\":\"',\r\n                    eyesAttr[p.eyes],\r\n                    '\"},{\"trait_type\":\"Mouth\",\"value\":\"',\r\n                    mouthAttr[p.mouth],\r\n                    '\"},{\"trait_type\":\"Generation\",\"value\":\"',\r\n                    generationAttr[p.generation],\r\n                    '\"},{\"trait_type\":\"Shit\",\"value\":\"',\r\n                    shitAttr[p.shit],\r\n                    '\"}]'\r\n                )\r\n            );\r\n    }\r\n\r\n    function purePoop(uint256 quantity, address receiver) external onlyOwner {\r\n        require(quantity + totalSupply() <= collectionSize, \"no more poop\");\r\n        _safeMint(receiver, quantity);\r\n    }\r\n\r\n    function royaltyInfo(uint256, uint256 salePrice) external view override returns (address receiver, uint256 royaltyAmount) {\r\n        return (address(this), (salePrice * 7) / 100);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = payable(msg.sender).call{ value: address(this).balance }(\"\");\r\n        require(success, \"no tips\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"poop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poopSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"purePoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RainbowPoop", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee0e2fef1cf07355e2661d697a4ea072f754d81e0de072562dbc6bb1c2086d9e"}]}