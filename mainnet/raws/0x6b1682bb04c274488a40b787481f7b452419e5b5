{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/LiquidityBridgeMigV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\nimport \\\"./interfaces/IBMICoverStaking.sol\\\";\\nimport \\\"./interfaces/IBMIStaking.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/ILiquidityBridge.sol\\\";\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\nimport \\\"./interfaces/IPolicyRegistry.sol\\\";\\nimport \\\"./interfaces/IV2BMIStaking.sol\\\";\\nimport \\\"./interfaces/IV2ContractsRegistry.sol\\\";\\nimport \\\"./interfaces/IV2PolicyBook.sol\\\";\\nimport \\\"./interfaces/IV2PolicyBookFacade.sol\\\";\\nimport \\\"./interfaces/tokens/ISTKBMIToken.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\n\\nimport \\\"./libraries/DecimalsConverter.sol\\\";\\n\\ncontract LiquidityBridge is ILiquidityBridge, OwnableUpgradeable, AbstractDependant {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using Math for uint256;\\n\\n    address public v1bmiStakingAddress;\\n    address public v2bmiStakingAddress;\\n    address public v1bmiCoverStakingAddress;\\n    address public v2bmiCoverStakingAddress;\\n    address public v1policyBookFabricAddress;\\n    address public v2contractsRegistryAddress;\\n    address public v1contractsRegistryAddress;\\n    address public v1policyRegistryAddress;\\n    address public v1policyBookRegistryAddress;\\n    address public v2policyBookRegistryAddress;\\n\\n    address public admin;\\n\\n    uint256 public counter;\\n    uint256 public stblDecimals;\\n\\n    IERC20 public bmiToken;\\n    ERC20 public stblToken;\\n\\n    // Policybook => user\\n    mapping(address => mapping(address => bool)) public migrateAddLiquidity;\\n    mapping(address => mapping(address => bool)) public migratedCoverStaking;\\n    mapping(address => mapping(address => bool)) public migratedPolicies;\\n\\n    mapping(address => address) public upgradedPolicies;\\n    mapping(address => uint256) public extractedLiquidity;\\n    mapping(address => uint256) public migratedLiquidity;\\n\\n    event TokensRecovered(address to, uint256 amount);\\n\\n    event MigratedPolicy(\\n        address indexed v1PolicyBook,\\n        address indexed v2PolicyBook,\\n        address indexed sender,\\n        uint256 price\\n    );\\n\\n    event MigrationAllowanceSetUp(\\n        address indexed pool,\\n        uint256 newStblAllowance,\\n        uint256 newBMIXAllowance\\n    );\\n\\n    event NftProcessed(\\n        uint256 indexed nftId,\\n        address indexed policyBookAddress,\\n        address indexed userAddress,\\n        uint256 stakedBMIXAmount\\n    );\\n\\n    event LiquidityCollected(\\n        address indexed v1PolicyBook,\\n        address indexed v2PolicyBook,\\n        uint256 amount\\n    );\\n    event LiquidityMigrated(\\n        uint256 migratedCount,\\n        address indexed poolAddress,\\n        address indexed userAddress\\n    );\\n    event SkippedRequest(uint256 reason, address indexed poolAddress, address indexed userAddress);\\n    event MigratedAddedLiquidity(\\n        address indexed pool,\\n        address indexed user,\\n        uint256 tetherAmount,\\n        uint8 withdrawalStatus\\n    );\\n\\n    function __LiquidityBridge_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry) external override {\\n        v1contractsRegistryAddress = 0x8050c5a46FC224E3BCfa5D7B7cBacB1e4010118d;\\n        v2contractsRegistryAddress = 0x45269F7e69EE636067835e0DfDd597214A1de6ea;\\n\\n        require(\\n            msg.sender == v1contractsRegistryAddress || msg.sender == v2contractsRegistryAddress,\\n            \\\"Dependant: Not an injector\\\"\\n        );\\n\\n        IContractsRegistry _v1contractsRegistry = IContractsRegistry(v1contractsRegistryAddress);\\n        IV2ContractsRegistry _v2contractsRegistry =\\n            IV2ContractsRegistry(v2contractsRegistryAddress);\\n\\n        v1bmiStakingAddress = _v1contractsRegistry.getBMIStakingContract();\\n        v2bmiStakingAddress = _v2contractsRegistry.getBMIStakingContract();\\n\\n        v1bmiCoverStakingAddress = _v1contractsRegistry.getBMICoverStakingContract();\\n        v2bmiCoverStakingAddress = _v2contractsRegistry.getBMICoverStakingContract();\\n\\n        v1policyBookFabricAddress = _v1contractsRegistry.getPolicyBookFabricContract();\\n\\n        v1policyRegistryAddress = _v1contractsRegistry.getPolicyRegistryContract();\\n\\n        v1policyBookRegistryAddress = _v1contractsRegistry.getPolicyBookRegistryContract();\\n        v2policyBookRegistryAddress = _v2contractsRegistry.getPolicyBookRegistryContract();\\n\\n        bmiToken = IERC20(_v1contractsRegistry.getBMIContract());\\n        stblToken = ERC20(_contractsRegistry.getUSDTContract());\\n\\n        stblDecimals = stblToken.decimals();\\n    }\\n\\n    modifier onlyAdmins() {\\n        require(_msgSender() == admin || _msgSender() == owner(), \\\"not in admins\\\");\\n        _;\\n    }\\n\\n    modifier guardEmptyPolicies(address v1Policy) {\\n        require(hasRecievingPolicy(upgradedPolicies[v1Policy]), \\\"No recieving policy set\\\");\\n        _;\\n    }\\n\\n    function hasRecievingPolicy(address v1Policy) public view returns (bool) {\\n        if (upgradedPolicies[v1Policy] == address(0)) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function checkBalances()\\n        external\\n        view\\n        returns (\\n            address[] memory policyBooksV1,\\n            uint256[] memory balanceV1,\\n            address[] memory policyBooksV2,\\n            uint256[] memory balanceV2,\\n            uint256[] memory takenLiquidity,\\n            uint256[] memory bridgedLiquidity\\n        )\\n    {\\n        address[] memory policyBooks =\\n            IPolicyBookRegistry(v1policyBookRegistryAddress).list(0, 33);\\n\\n        policyBooksV1 = new address[](policyBooks.length);\\n        policyBooksV2 = new address[](policyBooks.length);\\n        balanceV1 = new uint256[](policyBooks.length);\\n        balanceV2 = new uint256[](policyBooks.length);\\n        takenLiquidity = new uint256[](policyBooks.length);\\n        bridgedLiquidity = new uint256[](policyBooks.length);\\n\\n        for (uint256 i = 0; i < policyBooks.length; i++) {\\n            if (policyBooks[i] == address(0)) {\\n                break;\\n            }\\n\\n            policyBooksV1[i] = policyBooks[i];\\n            balanceV1[i] = stblToken.balanceOf(policyBooksV1[i]);\\n            policyBooksV2[i] = upgradedPolicies[policyBooks[i]];\\n            takenLiquidity[i] = extractedLiquidity[policyBooks[i]];\\n\\n            if (policyBooksV2[i] != address(0)) {\\n                balanceV2[i] = stblToken.balanceOf(policyBooksV2[i]);\\n            }\\n            bridgedLiquidity[i] = migratedLiquidity[policyBooks[i]];\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external onlyOwner {\\n        admin = _admin;\\n    }\\n\\n    // function _unlockAllowances() internal {\\n    //     if (bmiToken.allowance(address(this), v2bmiStakingAddress) == 0) {\\n    //         bmiToken.approve(v2bmiStakingAddress, uint256(-1));\\n    //     }\\n\\n    //     if (bmiToken.allowance(address(this), v2bmiCoverStakingAddress) == 0) {\\n    //         bmiToken.approve(v2bmiStakingAddress, uint256(-1));\\n    //     }\\n    // }\\n\\n    function unlockStblAllowanceFor(address _spender, uint256 _amount) external onlyAdmins {\\n        _unlockStblAllowanceFor(_spender, _amount);\\n    }\\n\\n    function _unlockStblAllowanceFor(address _spender, uint256 _amount) internal {\\n        uint256 _allowance = stblToken.allowance(address(this), _spender);\\n\\n        if (_allowance < _amount) {\\n            if (_allowance > 0) {\\n                stblToken.safeApprove(_spender, 0);\\n            }\\n\\n            stblToken.safeIncreaseAllowance(_spender, _amount);\\n        }\\n    }\\n\\n    function purchasePolicyFor(address _v1Policy, address _sender)\\n        external\\n        onlyAdmins\\n        guardEmptyPolicies(_v1Policy)\\n        returns (bool)\\n    {\\n        IPolicyBook.PolicyHolder memory data = IPolicyBook(_v1Policy).userStats(_sender);\\n\\n        if (data.startEpochNumber != 0) {\\n            uint256 _currentEpoch = IPolicyBook(_v1Policy).getEpoch(block.timestamp);\\n\\n            if (data.endEpochNumber > _currentEpoch) {\\n                uint256 _epochNumbers = data.endEpochNumber.sub(_currentEpoch);\\n\\n                address facade = IV2PolicyBook(upgradedPolicies[_v1Policy]).policyBookFacade();\\n\\n                (, uint256 _price, ) =\\n                    IV2PolicyBook(_v1Policy).getPolicyPrice(\\n                        _epochNumbers,\\n                        data.coverTokens,\\n                        _sender\\n                    );\\n\\n                // TODO fund the premiums?\\n                IV2PolicyBookFacade(facade).buyPolicyFor(_sender, _epochNumbers, data.coverTokens);\\n\\n                emit MigratedPolicy(_v1Policy, upgradedPolicies[_v1Policy], _sender, _price);\\n                migratedPolicies[_v1Policy][_sender] = true;\\n\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function migrateAddedLiquidity(\\n        address[] calldata _poolAddress,\\n        address[] calldata _userAddress\\n    ) external onlyAdmins {\\n        require(_poolAddress.length == _userAddress.length, \\\"Missmatch inputs lenght\\\");\\n        uint256 maxGasSpent = 0;\\n        uint256 i;\\n\\n        for (i = 0; i < _poolAddress.length; i++) {\\n            uint256 gasStart = gasleft();\\n\\n            if (upgradedPolicies[_poolAddress[i]] == address(0)) {\\n                // No linked v2 policyBook\\n                emit SkippedRequest(0, _poolAddress[i], _userAddress[i]);\\n                continue;\\n            }\\n\\n            migrateStblLiquidity(_poolAddress[i], _userAddress[i]);\\n            counter++;\\n\\n            emit LiquidityMigrated(counter, _poolAddress[i], _userAddress[i]);\\n\\n            uint256 gasEnd = gasleft();\\n            maxGasSpent = (gasStart - gasEnd) > maxGasSpent ? (gasStart - gasEnd) : maxGasSpent;\\n\\n            if (gasEnd < maxGasSpent) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function migrateStblLiquidity(address _pool, address _sender)\\n        public\\n        onlyAdmins\\n        returns (bool)\\n    {\\n        // (uint256 userBalance, uint256 withdrawalsInfo, uint256 _burnedBMIX)\\n\\n        IPolicyBook.WithdrawalStatus withdrawalStatus =\\n            IPolicyBook(_pool).getWithdrawalStatus(_sender);\\n\\n        (uint256 _tokensToBurn, uint256 _stblAmountStnd) =\\n            IPolicyBook(_pool).getUserBMIXStakeInfo(_sender);\\n\\n        // IPolicyBook(_pool).migrateRequestWithdrawal(_sender, _tokensToBurn);\\n\\n        if (_stblAmountStnd > 0) {\\n            address _v2Policy = upgradedPolicies[_pool];\\n            address facade = IV2PolicyBook(_v2Policy).policyBookFacade();\\n\\n            // IV2PolicyBookFacade(facade).addLiquidityAndStakeFor(\\n            //     _sender,\\n            //     _stblAmountStnd,\\n            //     _stblAmountStnd\\n            // );\\n\\n            uint256 _stblAmountStndTether =\\n                DecimalsConverter.convertFrom18(_stblAmountStnd, stblDecimals);\\n            migratedLiquidity[_pool] = migratedLiquidity[_pool].add(_stblAmountStndTether);\\n            // extractedLiquidity[_pool].sub(_stblAmountStndTether);\\n            migrateAddLiquidity[_pool][_sender] = true;\\n\\n            emit MigratedAddedLiquidity(_pool, _sender, _stblAmountStnd, uint8(withdrawalStatus));\\n        }\\n    }\\n\\n    function migrateUserBMIStake(address _sender, uint256 _bmiAmount) external override {\\n        require(_msgSender() == v1bmiStakingAddress, \\\"LB: no migration role\\\");\\n\\n        if (_bmiAmount > 0) {\\n            IV2BMIStaking(v2bmiStakingAddress).stakeFor(_sender, _bmiAmount);\\n        }\\n    }\\n\\n    /// @notice migrates a stake from BMIStaking\\n    /// @param _sender address of the user to migrate description\\n    /// @param _bmiRewards uint256 unstaked bmi rewards for restaking\\n    function migrateBMIStake(address _sender, uint256 _bmiRewards) internal returns (bool) {\\n        (uint256 _amountBMI, uint256 _burnedStkBMI) =\\n            IBMIStaking(v1bmiStakingAddress).migrateStakeToV2(_sender);\\n\\n        if (_amountBMI > 0) {\\n            IV2BMIStaking(v2bmiStakingAddress).stakeFor(_sender, _amountBMI + _bmiRewards);\\n        }\\n\\n        emit BMIMigratedToV2(_sender, _amountBMI, _bmiRewards, _burnedStkBMI);\\n    }\\n\\n    function recoverBMITokens() external onlyOwner {\\n        uint256 balance = bmiToken.balanceOf(address(this));\\n\\n        bmiToken.transfer(_msgSender(), balance);\\n\\n        emit TokensRecovered(_msgSender(), balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IBMICoverStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBMICoverStaking {\\n    struct StakingInfo {\\n        address policyBookAddress;\\n        uint256 stakedBMIXAmount;\\n    }\\n\\n    struct PolicyBookInfo {\\n        uint256 totalStakedSTBL;\\n        uint256 rewardPerBlock;\\n        uint256 stakingAPY;\\n        uint256 liquidityAPY;\\n    }\\n\\n    struct UserInfo {\\n        uint256 totalStakedBMIX;\\n        uint256 totalStakedSTBL;\\n        uint256 totalBmiReward;\\n    }\\n\\n    struct NFTsInfo {\\n        uint256 nftIndex;\\n        string uri;\\n        uint256 stakedBMIXAmount;\\n        uint256 stakedSTBLAmount;\\n        uint256 reward;\\n    }\\n\\n    function aggregateNFTs(address policyBookAddress, uint256[] calldata tokenIds) external;\\n\\n    function stakeBMIX(uint256 amount, address policyBookAddress) external;\\n\\n    function stakeBMIXWithPermit(\\n        uint256 bmiXAmount,\\n        address policyBookAddress,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakeBMIXFrom(address user, uint256 amount) external;\\n\\n    function stakeBMIXFromWithPermit(\\n        address user,\\n        uint256 bmiXAmount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getPolicyBookAPY(address policyBookAddress) external view returns (uint256);\\n\\n    function restakeBMIProfit(uint256 tokenId) external;\\n\\n    function restakeStakerBMIProfit(address policyBookAddress) external;\\n\\n    function withdrawBMIProfit(uint256 tokenID) external;\\n\\n    function withdrawStakerBMIProfit(address policyBookAddress) external;\\n\\n    // function migrateWitdrawFundsWithProfit(address _sender, uint256 tokenId)\\n    //     external\\n    //     returns (uint256);\\n\\n    function withdrawFundsWithProfit(uint256 tokenID) external;\\n\\n    function withdrawStakerFundsWithProfit(address policyBookAddress) external;\\n\\n    function stakingInfoByToken(uint256 tokenID) external view returns (StakingInfo memory);\\n\\n    /// @notice exhaustive information about staker's stakes\\n    /// @param staker is a user to return information for\\n    /// @param policyBooksAddresses is an array of PolicyBooks to check the stakes in\\n    /// @param offset is a starting ordinal number of user's NFT\\n    /// @param limit is a number of NFTs to check per function's call\\n    /// @return policyBooksInfo - an array of infos (totalStakedSTBL, rewardPerBlock (in BMI), stakingAPY, liquidityAPY)\\n    /// @return usersInfo - an array of user's info per PolicyBook (totalStakedBMIX, totalStakedSTBL, totalBmiReward)\\n    /// @return nftsCount - number of NFTs for each respective PolicyBook\\n    /// @return nftsInfo - 2 dimensional array of NFTs info per each PolicyBook\\n    ///     (nftIndex, uri, stakedBMIXAmount, stakedSTBLAmount, reward (in BMI))\\n    function stakingInfoByStaker(\\n        address staker,\\n        address[] calldata policyBooksAddresses,\\n        uint256 offset,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            PolicyBookInfo[] memory policyBooksInfo,\\n            UserInfo[] memory usersInfo,\\n            uint256[] memory nftsCount,\\n            NFTsInfo[][] memory nftsInfo\\n        );\\n\\n    function getSlashedBMIProfit(uint256 tokenId) external view returns (uint256);\\n\\n    function getBMIProfit(uint256 tokenId) external view returns (uint256);\\n\\n    function getSlashedStakerBMIProfit(\\n        address staker,\\n        address policyBookAddress,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256 totalProfit);\\n\\n    function getStakerBMIProfit(\\n        address staker,\\n        address policyBookAddress,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256 totalProfit);\\n\\n    function totalStaked(address user) external view returns (uint256);\\n\\n    function totalStakedSTBL(address user) external view returns (uint256);\\n\\n    function stakedByNFT(uint256 tokenId) external view returns (uint256);\\n\\n    function stakedSTBLByNFT(uint256 tokenId) external view returns (uint256);\\n\\n    function policyBookByNFT(uint256 tokenId) external view returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IBMIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./tokens/ISTKBMIToken.sol\\\";\\n\\ninterface IBMIStaking {\\n    event StakedBMI(uint256 stakedBMI, uint256 mintedStkBMI, address indexed recipient);\\n    event BMIWithdrawn(uint256 amountBMI, uint256 burnedStkBMI, address indexed recipient);\\n\\n    event UnusedRewardPoolRevoked(address recipient, uint256 amount);\\n    event RewardPoolRevoked(address recipient, uint256 amount);\\n\\n    event BMIMigratedToV2(uint256 amountBMI, uint256 burnedStkBMI, address indexed recipient);\\n\\n    struct WithdrawalInfo {\\n        uint256 coolDownTimeEnd;\\n        uint256 amountBMIRequested;\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amountBMI,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function stakeFor(address _user, uint256 _amountBMI) external;\\n\\n    function stake(uint256 _amountBMI) external;\\n\\n    function maturityAt() external view returns (uint256);\\n\\n    function isBMIRewardUnlocked() external view returns (bool);\\n\\n    function whenCanWithdrawBMIReward(address _address) external view returns (uint256);\\n\\n    function unlockTokensToWithdraw(uint256 _amountBMIUnlock) external;\\n\\n    function withdraw() external;\\n\\n    function migrateStakeToV2(address _user)\\n        external\\n        returns (uint256 amountBMI, uint256 _amountStkBMI);\\n\\n    /// @notice Getting withdraw information\\n    /// @return _amountBMIRequested is amount of bmi tokens requested to unlock\\n    /// @return _amountStkBMI is amount of stkBMI that will burn\\n    /// @return _unlockPeriod is its timestamp when user can withdraw\\n    ///         returns 0 if it didn't unlocked yet. User has 48hs to withdraw\\n    /// @return _availableFor is the end date if withdraw period has already begun\\n    ///         or 0 if it is expired or didn't start\\n    function getWithdrawalInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _amountBMIRequested,\\n            uint256 _amountStkBMI,\\n            uint256 _unlockPeriod,\\n            uint256 _availableFor\\n        );\\n\\n    function addToPool(uint256 _amount) external;\\n\\n    function stakingReward(uint256 _amount) external view returns (uint256);\\n\\n    function getStakedBMI(address _address) external view returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function setRewardPerBlock(uint256 _amount) external;\\n\\n    function revokeRewardPool(uint256 _amount) external;\\n\\n    function revokeUnusedRewardPool() external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function liquidityBridgeImplementation() external view returns (address);\\n\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLiquidityBridgeContract() external view returns (address);\\n\\n    function getContractsRegistryV2Contract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/ILiquidityBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityBridge {\\n    event BMIMigratedToV2(\\n        address indexed recipient,\\n        uint256 amountBMI,\\n        uint256 rewardsBMI,\\n        uint256 burnedStkBMI\\n    );\\n    event MigratedBMIStakers(uint256 migratedCount);\\n\\n    function migrateUserBMIStake(address _sender, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    function forwardUserLiquidity(\\n        address _user,\\n        address _v2PolicyBookAddress,\\n        uint256 _stblAmountStnd\\n    ) external;\\n\\n    function withdrawSTBLTo(address to) external;\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function getUserBMIXStakeInfo(address _sendere) external returns (uint256, uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get STBL equivalent\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get BMIX equivalent\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice forces an update of RewardsGenerator multiplier\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    function getPolicyPrice(uint256 _epochsNumber, uint256 _coverTokens)\\n        external\\n        view\\n        returns (uint256 totalSeconds, uint256 totalPrice);\\n\\n    function buyPolicyFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    function buyPolicy(uint256 _durationSeconds, uint256 _coverTokens) external;\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getUserAvailableSTBL(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    function requestWithdrawalWithPermit(\\n        uint256 _tokensToWithdraw,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlockTokens() external;\\n\\n    function migrateRequestWithdrawal(address _sender, uint256 _tokensToBurn)\\n        external\\n        returns (uint256 _sbtlAmount);\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalSTBLLiquidity,\\n            uint256 _stakedSTBL,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiXRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiXCover token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit\\n    ) external returns (address);\\n\\n    function isMigrating() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalSTBLLiquidity;\\n        uint256 stakedSTBL;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiXRatio;\\n        bool whitelisted;\\n    }\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IPolicyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyRegistry {\\n    struct PolicyInfo {\\n        uint256 coverAmount;\\n        uint256 premium;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    struct PolicyUserInfo {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 coverTokens;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 paid;\\n    }\\n\\n    function STILL_CLAIMABLE_FOR() external view returns (uint256);\\n\\n    /// @notice Returns the number of the policy for the user, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @return the number of police in the array\\n    function getPoliciesLength(address _userAddr) external view returns (uint256);\\n\\n    /// @notice Shows whether the user has a policy, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _policyBookAddr Address of policy book\\n    /// @return true if user has policy in specific policy book\\n    function policyExists(address _userAddr, address _policyBookAddr) external view returns (bool);\\n\\n    /// @notice Returns information about current policy, access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _policyBookAddr Address of policy book\\n    /// @return true if user has active policy in specific policy book\\n    function isPolicyActive(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice returns current policy start time or zero\\n    function policyStartTime(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns current policy end time or zero\\n    function policyEndTime(address _userAddr, address _policyBookAddr)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the array of the policy itself , access: ANY\\n    /// @param _userAddr Policy holder address\\n    /// @param _isActive If true, then returns an array with information about active policies, if false, about inactive\\n    /// @return _policiesCount is the number of police in the array\\n    /// @return _policyBooksArr is the array of policy books addresses\\n    /// @return _policies is the array of policies\\n    /// @return _policyStatuses parameter will show which button to display on the dashboard\\n    function getPoliciesInfo(\\n        address _userAddr,\\n        bool _isActive,\\n        uint256 _offset,\\n        uint256 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _policiesCount,\\n            address[] memory _policyBooksArr,\\n            PolicyInfo[] memory _policies,\\n            IClaimingRegistry.ClaimStatus[] memory _policyStatuses\\n        );\\n\\n    /// @notice Getting stats from users of policy books, access: ANY\\n    function getUsersInfo(address[] calldata _users, address[] calldata _policyBooks)\\n        external\\n        view\\n        returns (PolicyUserInfo[] memory _stats);\\n\\n    function getPoliciesArr(address _userAddr) external view returns (address[] memory _arr);\\n\\n    /// @notice Adds a new policy to the list , access: ONLY POLICY BOOKS\\n    /// @param _userAddr is the user's address\\n    /// @param _coverAmount is the number of insured tokens\\n    /// @param _premium is the name of PolicyBook\\n    /// @param _durationDays is the number of days for which the insured\\n    function addPolicy(\\n        address _userAddr,\\n        uint256 _coverAmount,\\n        uint256 _premium,\\n        uint256 _durationDays\\n    ) external;\\n\\n    /// @notice Removes the policy book from the list, access: ONLY POLICY BOOKS\\n    /// @param _userAddr is the user's address\\n    function removePolicy(address _userAddr) external;\\n\\n    function removePolicy(address _policy, address _userAddr) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IV2BMIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./tokens/ISTKBMIToken.sol\\\";\\n\\ninterface IV2BMIStaking {\\n    event StakedBMI(uint256 stakedBMI, uint256 mintedStkBMI, address indexed recipient);\\n    event BMIWithdrawn(uint256 amountBMI, uint256 burnedStkBMI, address indexed recipient);\\n\\n    event UnusedRewardPoolRevoked(address recipient, uint256 amount);\\n    event RewardPoolRevoked(address recipient, uint256 amount);\\n\\n    struct WithdrawalInfo {\\n        uint256 coolDownTimeEnd;\\n        uint256 amountBMIRequested;\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amountBMI,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function stakeFor(address _user, uint256 _amountBMI) external;\\n\\n    function stake(uint256 _amountBMI) external;\\n\\n    function maturityAt() external view returns (uint256);\\n\\n    function isBMIRewardUnlocked() external view returns (bool);\\n\\n    function whenCanWithdrawBMIReward(address _address) external view returns (uint256);\\n\\n    function unlockTokensToWithdraw(uint256 _amountBMIUnlock) external;\\n\\n    function withdraw() external;\\n\\n    /// @notice Getting withdraw information\\n    /// @return _amountBMIRequested is amount of bmi tokens requested to unlock\\n    /// @return _amountStkBMI is amount of stkBMI that will burn\\n    /// @return _unlockPeriod is its timestamp when user can withdraw\\n    ///         returns 0 if it didn't unlocked yet. User has 48hs to withdraw\\n    /// @return _availableFor is the end date if withdraw period has already begun\\n    ///         or 0 if it is expired or didn't start\\n    function getWithdrawalInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _amountBMIRequested,\\n            uint256 _amountStkBMI,\\n            uint256 _unlockPeriod,\\n            uint256 _availableFor\\n        );\\n\\n    function addToPool(uint256 _amount) external;\\n\\n    function stakingReward(uint256 _amount) external view returns (uint256);\\n\\n    function getStakedBMI(address _address) external view returns (uint256);\\n\\n    function getAPY() external view returns (uint256);\\n\\n    function setRewardPerBlock(uint256 _amount) external;\\n\\n    function revokeRewardPool(uint256 _amount) external;\\n\\n    function revokeUnusedRewardPool() external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IV2ContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IV2ContractsRegistry {\\n    function addProxyContract(bytes32 name, address contractAddress) external;\\n\\n    function upgradeContract(bytes32 name, address contractAddress) external;\\n\\n    function injectDependencies(bytes32 name) external;\\n\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getUniswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiswapRouterContract() external view returns (address);\\n\\n    function getSushiswapBMIToETHPairContract() external view returns (address);\\n\\n    function getSushiswapBMIToUSDTPairContract() external view returns (address);\\n\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getUSDTContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMICoverStakingContract() external view returns (address);\\n\\n    function getBMICoverStakingViewContract() external view returns (address);\\n\\n    function getLegacyRewardsGeneratorContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getNFTStakingContract() external view returns (address);\\n\\n    function getLiquidityBridgeContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getLeveragePortfolioViewContract() external view returns (address);\\n\\n    function getCapitalPoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n\\n    function getAaveProtocolContract() external view returns (address);\\n\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\n\\n    function getAaveATokenContract() external view returns (address);\\n\\n    function getCompoundProtocolContract() external view returns (address);\\n\\n    function getCompoundCTokenContract() external view returns (address);\\n\\n    function getCompoundComptrollerContract() external view returns (address);\\n\\n    function getYearnProtocolContract() external view returns (address);\\n\\n    function getYearnVaultContract() external view returns (address);\\n\\n    function getYieldGeneratorContract() external view returns (address);\\n\\n    function getShieldMiningContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IV2PolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"./IPolicyBookFabric.sol\\\";\\n// import \\\"./IClaimingRegistry.sol\\\";\\n// import \\\"./IPolicyBookFacade.sol\\\";\\n\\ninterface IV2PolicyBook {\\n    function policyBookFacade() external view returns (address);\\n\\n    ///// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\n    ///// @param _liquidityHolderAddr is address of address to assign cover\\n    ///// @param _liqudityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    /// @notice view function to get precise policy price\\n    /// @param _epochsNumber is number of epochs to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    /// @param _buyer address of the user who buy the policy\\n    /// @return totalSeconds is number of seconds to cover\\n    /// @return totalPrice is the policy price which will pay by the buyer\\n    function getPolicyPrice(\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens,\\n        address _buyer\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalSeconds,\\n            uint256 totalPrice,\\n            uint256 pricePercentage\\n        );\\n\\n    //enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    //struct PolicyHolder {\\n    //    uint256 coverTokens;\\n    //    uint256 startEpochNumber;\\n    //    uint256 endEpochNumber;\\n    //    uint256 paid;\\n    //    uint256 reinsurancePrice;\\n    //}\\n\\n    //struct WithdrawalInfo {\\n    //    uint256 withdrawalAmount;\\n    //    uint256 readyToWithdrawDate;\\n    //    bool withdrawalAllowed;\\n    //}\\n\\n    //struct BuyPolicyParameters {\\n    //    address buyer;\\n    //    address holder;\\n    //    uint256 epochsNumber;\\n    //    uint256 coverTokens;\\n    //    uint256 distributorFee;\\n    //    address distributor;\\n    //}\\n\\n    //function policyHolders(address _holder)\\n    //    external\\n    //    view\\n    //    returns (\\n    //        uint256,\\n    //        uint256,\\n    //        uint256,\\n    //        uint256,\\n    //        uint256\\n    //    );\\n\\n    //function policyBookFacade() external view returns (IPolicyBookFacade);\\n\\n    //function setPolicyBookFacade(address _policyBookFacade) external;\\n\\n    //function EPOCH_DURATION() external view returns (uint256);\\n\\n    //function stblDecimals() external view returns (uint256);\\n\\n    //function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    //function whitelisted() external view returns (bool);\\n\\n    //function epochStartTime() external view returns (uint256);\\n\\n    //// @TODO: should we let DAO to change contract address?\\n    ///// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    ///// @return _contract is address of covered contract\\n    //function insuranceContractAddress() external view returns (address _contract);\\n\\n    ///// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    ///// @return _type is type of contract\\n    //function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    //function totalLiquidity() external view returns (uint256);\\n\\n    //function totalCoverTokens() external view returns (uint256);\\n\\n    //// /// @notice return MPL for user leverage pool\\n    //// function userleveragedMPL() external view returns (uint256);\\n\\n    //// /// @notice return MPL for reinsurance pool\\n    //// function reinsurancePoolMPL() external view returns (uint256);\\n\\n    //// function bmiRewardMultiplier() external view returns (uint256);\\n\\n    //function withdrawalsInfo(address _userAddr)\\n    //    external\\n    //    view\\n    //    returns (\\n    //        uint256 _withdrawalAmount,\\n    //        uint256 _readyToWithdrawDate,\\n    //        bool _withdrawalAllowed\\n    //    );\\n\\n    //function __PolicyBook_init(\\n    //    address _insuranceContract,\\n    //    IPolicyBookFabric.ContractType _contractType,\\n    //    string calldata _description,\\n    //    string calldata _projectSymbol\\n    //) external;\\n\\n    //function whitelist(bool _whitelisted) external;\\n\\n    ///// @notice get STBL equivalent\\n    //function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\n\\n    ///// @notice get BMIX equivalent\\n    //function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\n\\n    ///// @notice submits new claim of the policy book\\n    //function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    ///// @notice submits new appeal claim of the policy book\\n    //function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    ///// @notice updates info on claim acceptance\\n    //function commitClaim(\\n    //    address claimer,\\n    //    uint256 claimAmount,\\n    //    uint256 claimEndTime,\\n    //    IClaimingRegistry.ClaimStatus status\\n    //) external;\\n\\n    ///// @notice forces an update of RewardsGenerator multiplier\\n    //function forceUpdateBMICoverStakingRewardMultiplier() external;\\n\\n    ///// @notice function to get precise current cover and liquidity\\n    //function getNewCoverAndLiquidity()\\n    //    external\\n    //    view\\n    //    returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    //function updateEpochsInfo() external;\\n\\n    //function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    //function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    //function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    //function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\n\\n    //// function requestWithdrawalWithPermit(\\n    ////     uint256 _tokensToWithdraw,\\n    ////     uint8 _v,\\n    ////     bytes32 _r,\\n    ////     bytes32 _s\\n    //// ) external;\\n\\n    //function unlockTokens() external;\\n\\n    ///// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    //function withdrawLiquidity(address sender) external returns (uint256);\\n\\n    /////@notice for doing defi hard rebalancing, access: policyBookFacade\\n    //function updateLiquidity(uint256 _newLiquidity) external;\\n\\n    //function getAPY() external view returns (uint256);\\n\\n    ///// @notice Getting user stats, access: ANY\\n    //function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    ///// @notice Getting number stats, access: ANY\\n    ///// @return _maxCapacities is a max token amount that a user can buy\\n    ///// @return _totalSTBLLiquidity is PolicyBook's liquidity\\n    ///// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\n    ///// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\n    ///// @return _annualProfitYields is its APY\\n    ///// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    //function numberStats()\\n    //    external\\n    //    view\\n    //    returns (\\n    //        uint256 _maxCapacities,\\n    //        uint256 _totalSTBLLiquidity,\\n    //        uint256 _totalLeveragedLiquidity,\\n    //        uint256 _stakedSTBL,\\n    //        uint256 _annualProfitYields,\\n    //        uint256 _annualInsuranceCost,\\n    //        uint256 _bmiXRatio\\n    //    );\\n\\n    ///// @notice Getting info, access: ANY\\n    ///// @return _symbol is the symbol of PolicyBook (bmiXCover)\\n    ///// @return _insuredContract is an addres of insured contract\\n    ///// @return _contractType is a type of insured contract\\n    ///// @return _whitelisted is a state of whitelisting\\n    //function info()\\n    //    external\\n    //    view\\n    //    returns (\\n    //        string memory _symbol,\\n    //        address _insuredContract,\\n    //        IPolicyBookFabric.ContractType _contractType,\\n    //        bool _whitelisted\\n    //    );\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/IV2PolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IV2PolicyBookFacade {\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\n    /// @dev access: ANY\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    function addLiquidityAndStakeFor(\\n        address _liquidityHolderAddr,\\n        uint256 _liquidityAmount,\\n        uint256 _stakeSTBLAmount\\n    ) external;\\n\\n    /// @param _holder who owns coverage\\n    /// @param _epochsNumber period policy will cover\\n    /// @param _coverTokens amount paid for the coverage\\n    function buyPolicyFor(\\n        address _holder,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    /// @param _user the one taht add liquidity\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\n\\n    ///// @notice Let user to buy policy by supplying stable coin, access: ANY\\n    ///// @param _epochsNumber period policy will cover\\n    ///// @param _coverTokens amount paid for the coverage\\n    //function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\n\\n    //function policyBook() external view returns (IPolicyBook);\\n\\n    //function userLiquidity(address account) external view returns (uint256);\\n\\n    ///// @notice virtual funds deployed by reinsurance pool\\n    //function VUreinsurnacePool() external view returns (uint256);\\n\\n    ///// @notice leverage funds deployed by reinsurance pool\\n    //function LUreinsurnacePool() external view returns (uint256);\\n\\n    ///// @notice leverage funds deployed by user leverage pool\\n    //function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\n\\n    ///// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\n    //function totalLeveragedLiquidity() external view returns (uint256);\\n\\n    //function userleveragedMPL() external view returns (uint256);\\n\\n    //function reinsurancePoolMPL() external view returns (uint256);\\n\\n    //function rebalancingThreshold() external view returns (uint256);\\n\\n    //function safePricingModel() external view returns (bool);\\n\\n    ///// @notice policyBookFacade initializer\\n    ///// @param pbProxy polciybook address upgreadable cotnract.\\n    //function __PolicyBookFacade_init(\\n    //    address pbProxy,\\n    //    address liquidityProvider,\\n    //    uint256 initialDeposit\\n    //) external;\\n\\n    ///// @param _epochsNumber period policy will cover\\n    ///// @param _coverTokens amount paid for the coverage\\n    ///// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    //function buyPolicyFromDistributor(\\n    //    uint256 _epochsNumber,\\n    //    uint256 _coverTokens,\\n    //    address _distributor\\n    //) external;\\n\\n    ///// @param _buyer who is buying the coverage\\n    ///// @param _epochsNumber period policy will cover\\n    ///// @param _coverTokens amount paid for the coverage\\n    ///// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\n    //function buyPolicyFromDistributorFor(\\n    //    address _buyer,\\n    //    uint256 _epochsNumber,\\n    //    uint256 _coverTokens,\\n    //    address _distributor\\n    //) external;\\n\\n    ///// @notice Let user to add liquidity by supplying stable coin, access: ANY\\n    ///// @param _liquidityAmount is amount of stable coin tokens to secure\\n    //function addLiquidity(uint256 _liquidityAmount) external;\\n\\n    ///// @notice Let user to add liquidity by supplying stable coin and stake it,\\n    ///// @dev access: ANY\\n    //function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\n\\n    ///// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    //function withdrawLiquidity() external;\\n\\n    ///// @notice fetches all the pools data\\n    ///// @return uint256 VUreinsurnacePool\\n    ///// @return uint256 LUreinsurnacePool\\n    ///// @return uint256 LUleveragePool\\n    ///// @return uint256 user leverage pool address\\n    //function getPoolsData()\\n    //    external\\n    //    view\\n    //    returns (\\n    //        uint256,\\n    //        uint256,\\n    //        uint256,\\n    //        address\\n    //    );\\n\\n    ///// @notice deploy leverage funds (RP lStable, ULP lStable)\\n    ///// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\n    ///// @param leveragePool whether user leverage or reinsurance leverage\\n    //function deployLeverageFundsAfterRebalance(\\n    //    uint256 deployedAmount,\\n    //    ILeveragePortfolio.LeveragePortfolio leveragePool\\n    //) external;\\n\\n    ///// @notice deploy virtual funds (RP vStable)\\n    ///// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\n    //function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\n\\n    /////@dev in case ur changed of the pools by commit a claim or policy expired\\n    //function reevaluateProvidedLeverageStable() external;\\n\\n    ///// @notice set the MPL for the user leverage and the reinsurance leverage\\n    ///// @param _userLeverageMPL uint256 value of the user leverage MPL\\n    ///// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\n    //function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\n\\n    ///// @notice sets the rebalancing threshold value\\n    ///// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\n    //function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\n\\n    ///// @notice sets the rebalancing threshold value\\n    ///// @param _safePricingModel bool is pricing model safe (true) or not (false)\\n    //function setSafePricingModel(bool _safePricingModel) external;\\n\\n    ///// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    //function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    ///// @notice upserts a withdraw request\\n    ///// @dev prevents adding a request if an already pending or ready request is open.\\n    ///// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\n    //function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    //function listUserLeveragePools(uint256 offset, uint256 limit)\\n    //    external\\n    //    view\\n    //    returns (address[] memory _userLeveragePools);\\n\\n    //function countUserLeveragePools() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/interfaces/tokens/ISTKBMIToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ISTKBMIToken is IERC20Upgradeable {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/ccolorado/Source/bridgeM/bmicore-2/contracts/libraries/DecimalsConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @notice the intention of this library is to be able to easily convert\\n///     one amount of tokens with N decimal places\\n///     to another amount with M decimal places\\nlibrary DecimalsConverter {\\n    using SafeMath for uint256;\\n\\n    function convert(\\n        uint256 amount,\\n        uint256 baseDecimals,\\n        uint256 destinationDecimals\\n    ) internal pure returns (uint256) {\\n        if (baseDecimals > destinationDecimals) {\\n            amount = amount.div(10**(baseDecimals - destinationDecimals));\\n        } else if (baseDecimals < destinationDecimals) {\\n            amount = amount.mul(10**(destinationDecimals - baseDecimals));\\n        }\\n\\n        return amount;\\n    }\\n\\n    function convertTo18(uint256 amount, uint256 baseDecimals) internal pure returns (uint256) {\\n        return convert(amount, baseDecimals, 18);\\n    }\\n\\n    function convertFrom18(uint256 amount, uint256 destinationDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return convert(amount, 18, destinationDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBMI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsBMI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedStkBMI\",\"type\":\"uint256\"}],\"name\":\"BMIMigratedToV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"v1PolicyBook\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"v2PolicyBook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migratedCount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"LiquidityMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tetherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"withdrawalStatus\",\"type\":\"uint8\"}],\"name\":\"MigratedAddedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migratedCount\",\"type\":\"uint256\"}],\"name\":\"MigratedBMIStakers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"v1PolicyBook\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"v2PolicyBook\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MigratedPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStblAllowance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBMIXAllowance\",\"type\":\"uint256\"}],\"name\":\"MigrationAllowanceSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedBMIXAmount\",\"type\":\"uint256\"}],\"name\":\"NftProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"SkippedRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__LiquidityBridge_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"policyBooksV1\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balanceV1\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"policyBooksV2\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balanceV2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takenLiquidity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bridgedLiquidity\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extractedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v1Policy\",\"type\":\"address\"}],\"name\":\"hasRecievingPolicy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrateAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_userAddress\",\"type\":\"address[]\"}],\"name\":\"migrateAddedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"migrateStblLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bmiAmount\",\"type\":\"uint256\"}],\"name\":\"migrateUserBMIStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedCoverStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migratedPolicies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v1Policy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"purchasePolicyFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBMITokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stblToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockStblAllowanceFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradedPolicies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1bmiCoverStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1bmiStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1contractsRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1policyBookFabricAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1policyBookRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1policyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2bmiCoverStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2bmiStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2contractsRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2policyBookRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityBridge", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}