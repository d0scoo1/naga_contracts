{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/flashloans/Flasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./DyDxFlashLoans.sol\\\";\\r\\nimport \\\"../../abstracts/claimable/Claimable.sol\\\";\\r\\nimport \\\"../../interfaces/IFujiAdmin.sol\\\";\\r\\nimport \\\"../../interfaces/IVault.sol\\\";\\r\\nimport \\\"../../interfaces/IFlasher.sol\\\";\\r\\nimport \\\"../../interfaces/IFliquidator.sol\\\";\\r\\nimport \\\"../../interfaces/IFujiMappings.sol\\\";\\r\\nimport \\\"../../interfaces/IWETH.sol\\\";\\r\\nimport \\\"../../interfaces/aave/IFlashLoanReceiver.sol\\\";\\r\\nimport \\\"../../interfaces/aave/IAaveLendingPool.sol\\\";\\r\\nimport \\\"../../interfaces/cream/IERC3156FlashLender.sol\\\";\\r\\nimport \\\"../../interfaces/cream/ICFlashloanReceiver.sol\\\";\\r\\nimport \\\"../../interfaces/cream/ICrComptroller.sol\\\";\\r\\nimport \\\"../../interfaces/balancer/IBalancerVault.sol\\\";\\r\\nimport \\\"../../interfaces/balancer/IFlashLoanRecipient.sol\\\";\\r\\nimport \\\"../libraries/LibUniversalERC20.sol\\\";\\r\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\r\\nimport \\\"../../libraries/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract that handles Fuji protocol flash loan logic and\\r\\n * the specific logic of all active flash loan providers used by Fuji protocol.\\r\\n */\\r\\n\\r\\ncontract Flasher is\\r\\n  IFlasher,\\r\\n  DyDxFlashloanBase,\\r\\n  IFlashLoanReceiver,\\r\\n  ICFlashloanReceiver,\\r\\n  IFlashLoanRecipient,\\r\\n  ICallee,\\r\\n  Claimable\\r\\n{\\r\\n  using LibUniversalERC20 for IERC20;\\r\\n\\r\\n  IFujiAdmin private _fujiAdmin;\\r\\n\\r\\n  address private constant _ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n  address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n  address private immutable _aaveLendingPool = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\r\\n  address private immutable _dydxSoloMargin = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\r\\n\\r\\n  // IronBank\\r\\n  address private immutable _cyFlashloanLender = 0x1a21Ab52d1Ca1312232a72f4cf4389361A479829;\\r\\n  address private immutable _cyComptroller = 0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB;\\r\\n\\r\\n  // Balancer\\r\\n  address private immutable _balancerVault = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\r\\n\\r\\n  bytes32 private _paramsHash;\\r\\n\\r\\n  // need to be payable because of the conversion ETH <> WETH\\r\\n  receive() external payable {}\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if caller is not 'owner'.\\r\\n   */\\r\\n  modifier isAuthorized() {\\r\\n    require(\\r\\n      msg.sender == _fujiAdmin.getController() ||\\r\\n        msg.sender == _fujiAdmin.getFliquidator() ||\\r\\n        msg.sender == owner(),\\r\\n      Errors.VL_NOT_AUTHORIZED\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the fujiAdmin Address\\r\\n   * @param _newFujiAdmin: FujiAdmin Contract Address\\r\\n   * Emits a {FujiAdminChanged} event.\\r\\n   */\\r\\n  function setFujiAdmin(address _newFujiAdmin) public onlyOwner {\\r\\n    _fujiAdmin = IFujiAdmin(_newFujiAdmin);\\r\\n    emit FujiAdminChanged(_newFujiAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Routing Function for Flashloan Provider\\r\\n   * @param info: struct information for flashLoan\\r\\n   * @param _flashnum: integer identifier of flashloan provider\\r\\n   */\\r\\n  function initiateFlashloan(FlashLoan.Info calldata info, uint8 _flashnum)\\r\\n    external\\r\\n    override\\r\\n    isAuthorized\\r\\n  {\\r\\n    require(_paramsHash == \\\"\\\", \\\"_paramsHash should be empty!\\\");\\r\\n    _paramsHash = keccak256(abi.encode(info));\\r\\n    if (_flashnum == 0) {\\r\\n      _initiateAaveFlashLoan(info);\\r\\n    } else if (_flashnum == 1) {\\r\\n      _initiateDyDxFlashLoan(info);\\r\\n    } else if (_flashnum == 2) {\\r\\n      _initiateCreamFlashLoan(info);\\r\\n    } else if (_flashnum == 3) {\\r\\n      _initiateBalancerFlashLoan(info);\\r\\n    } else {\\r\\n      revert(Errors.VL_INVALID_FLASH_NUMBER);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // ===================== DyDx FlashLoan ===================================\\r\\n\\r\\n  /**\\r\\n   * @dev Initiates a DyDx flashloan.\\r\\n   * @param info: data to be passed between functions executing flashloan logic\\r\\n   */\\r\\n  function _initiateDyDxFlashLoan(FlashLoan.Info calldata info) internal {\\r\\n    ISoloMargin solo = ISoloMargin(_dydxSoloMargin);\\r\\n\\r\\n    // Get marketId from token address\\r\\n    uint256 marketId = _getMarketIdFromTokenAddress(solo, info.asset == _ETH ? _WETH : info.asset);\\r\\n\\r\\n    // 1. Withdraw $\\r\\n    // 2. Call callFunction(...)\\r\\n    // 3. Deposit back $\\r\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\r\\n\\r\\n    operations[0] = _getWithdrawAction(marketId, info.amount);\\r\\n    // Encode FlashLoan.Info for callFunction\\r\\n    operations[1] = _getCallAction(abi.encode(info));\\r\\n    // add fee of 2 wei\\r\\n    operations[2] = _getDepositAction(marketId, info.amount + 2);\\r\\n\\r\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\r\\n    accountInfos[0] = _getAccountInfo(address(this));\\r\\n\\r\\n    solo.operate(accountInfos, operations);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes DyDx Flashloan, this operation is required\\r\\n   * and called by Solo when sending loaned amount\\r\\n   * @param sender: Not used\\r\\n   * @param account: Not used\\r\\n   */\\r\\n  function callFunction(\\r\\n    address sender,\\r\\n    Account.Info calldata account,\\r\\n    bytes calldata data\\r\\n  ) external override {\\r\\n    require(msg.sender == _dydxSoloMargin && sender == address(this), Errors.VL_NOT_AUTHORIZED);\\r\\n    account;\\r\\n\\r\\n    FlashLoan.Info memory info = abi.decode(data, (FlashLoan.Info));\\r\\n\\r\\n    uint256 _value;\\r\\n    if (info.asset == _ETH) {\\r\\n      // Convert WETH to ETH and assign amount to be set as msg.value\\r\\n      _convertWethToEth(info.amount);\\r\\n      _value = info.amount;\\r\\n    } else {\\r\\n      // Transfer to Vault the flashloan Amount\\r\\n      // _value is 0\\r\\n      IERC20(info.asset).univTransfer(payable(info.vault), info.amount);\\r\\n    }\\r\\n\\r\\n    _executeAction(info, info.amount, 2, _value);\\r\\n\\r\\n    _approveBeforeRepay(info.asset == _ETH, info.asset, info.amount + 2, _dydxSoloMargin);\\r\\n  }\\r\\n\\r\\n  // ===================== Aave FlashLoan ===================================\\r\\n\\r\\n  /**\\r\\n   * @dev Initiates an Aave flashloan.\\r\\n   * @param info: data to be passed between functions executing flashloan logic\\r\\n   */\\r\\n  function _initiateAaveFlashLoan(FlashLoan.Info calldata info) internal {\\r\\n    //Initialize Instance of Aave Lending Pool\\r\\n    IAaveLendingPool aaveLp = IAaveLendingPool(_aaveLendingPool);\\r\\n\\r\\n    //Passing arguments to construct Aave flashloan -limited to 1 asset type for now.\\r\\n    address receiverAddress = address(this);\\r\\n    address[] memory assets = new address[](1);\\r\\n    assets[0] = address(info.asset == _ETH ? _WETH : info.asset);\\r\\n    uint256[] memory amounts = new uint256[](1);\\r\\n    amounts[0] = info.amount;\\r\\n\\r\\n    // 0 = no debt, 1 = stable, 2 = variable\\r\\n    uint256[] memory modes = new uint256[](1);\\r\\n    //modes[0] = 0;\\r\\n\\r\\n    //address onBehalfOf = address(this);\\r\\n    //bytes memory params = abi.encode(info);\\r\\n    //uint16 referralCode = 0;\\r\\n\\r\\n    //Aave Flashloan initiated.\\r\\n    aaveLp.flashLoan(receiverAddress, assets, amounts, modes, address(this), abi.encode(info), 0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes Aave Flashloan, this operation is required\\r\\n   * and called by Aaveflashloan when sending loaned amount\\r\\n   */\\r\\n  function executeOperation(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata premiums,\\r\\n    address initiator,\\r\\n    bytes calldata params\\r\\n  ) external override returns (bool) {\\r\\n    require(msg.sender == _aaveLendingPool && initiator == address(this), Errors.VL_NOT_AUTHORIZED);\\r\\n\\r\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\r\\n\\r\\n    uint256 _value;\\r\\n    if (info.asset == _ETH) {\\r\\n      // Convert WETH to ETH and assign amount to be set as msg.value\\r\\n      _convertWethToEth(amounts[0]);\\r\\n      _value = info.amount;\\r\\n    } else {\\r\\n      // Transfer to Vault the flashloan Amount\\r\\n      // _value is 0\\r\\n      IERC20(assets[0]).univTransfer(payable(info.vault), amounts[0]);\\r\\n    }\\r\\n\\r\\n    _executeAction(info, amounts[0], premiums[0], _value);\\r\\n\\r\\n    //Approve aaveLP to spend to repay flashloan\\r\\n    _approveBeforeRepay(info.asset == _ETH, assets[0], amounts[0] + premiums[0], _aaveLendingPool);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // ===================== IronBank FlashLoan ===================================\\r\\n\\r\\n  /**\\r\\n   * @dev Initiates an IronBank flashloan.\\r\\n   * @param info: data to be passed between functions executing flashloan logic\\r\\n   */\\r\\n  function _initiateCreamFlashLoan(FlashLoan.Info calldata info) internal {\\r\\n    address token = info.asset == _ETH ? _WETH : info.asset;\\r\\n\\r\\n    // Prepara data for flashloan execution\\r\\n    bytes memory params = abi.encode(info);\\r\\n\\r\\n    // Initialize Instance of IronBank LendingContract\\r\\n    IERC3156FlashLender(_cyFlashloanLender).flashLoan(\\r\\n      ICFlashloanReceiver(address(this)),\\r\\n      token,\\r\\n      info.amount,\\r\\n      params\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes IronBank Flashloan, this operation is required\\r\\n   * and called by IronBankflashloan when sending loaned amount\\r\\n   */\\r\\n  function onFlashLoan(\\r\\n    address initiator,\\r\\n    address token,\\r\\n    uint256 amount,\\r\\n    uint256 fee,\\r\\n    bytes calldata params\\r\\n  ) external override returns (bytes32) {\\r\\n    require(\\r\\n      address(this) == initiator && ICrComptroller(_cyComptroller).isMarketListed(msg.sender),\\r\\n      Errors.VL_NOT_AUTHORIZED\\r\\n    );\\r\\n    require(IERC20(token).balanceOf(address(this)) >= amount, Errors.VL_FLASHLOAN_FAILED);\\r\\n\\r\\n    FlashLoan.Info memory info = abi.decode(params, (FlashLoan.Info));\\r\\n\\r\\n    uint256 _value;\\r\\n    if (info.asset == _ETH) {\\r\\n      // Convert WETH to _ETH and assign amount to be set as msg.value\\r\\n      _convertWethToEth(amount);\\r\\n      _value = amount;\\r\\n    } else {\\r\\n      // Transfer to Vault the flashloan Amount\\r\\n      // _value is 0\\r\\n      IERC20(token).univTransfer(payable(info.vault), amount);\\r\\n    }\\r\\n\\r\\n    // Do task according to CallType\\r\\n    _executeAction(info, amount, fee, _value);\\r\\n\\r\\n    if (info.asset == _ETH) _convertEthToWeth(amount + fee);\\r\\n    // Transfer flashloan + fee back to crToken Lending Contract\\r\\n    IERC20(token).univApprove(msg.sender, amount + fee);\\r\\n\\r\\n    return keccak256(\\\"ERC3156FlashBorrowerInterface.onFlashLoan\\\");\\r\\n  }\\r\\n  \\r\\n  // ===================== Balancer FlashLoan ===================================\\r\\n  \\r\\n  /**\\r\\n   * @dev Initiates a Balancer flashloan.\\r\\n   * @param info: data to be passed between functions executing flashloan logic\\r\\n   */\\r\\n  function _initiateBalancerFlashLoan(FlashLoan.Info calldata info) internal {\\r\\n    //Initialize Instance of Balancer Vault\\r\\n    IBalancerVault balVault = IBalancerVault(_balancerVault);\\r\\n\\r\\n    //Passing arguments to construct Balancer flashloan -limited to 1 asset type for now.\\r\\n    IFlashLoanRecipient receiverAddress = IFlashLoanRecipient(address(this));\\r\\n    IERC20[] memory assets = new IERC20[](1);\\r\\n    assets[0] = IERC20(address(info.asset == _ETH ? _WETH : info.asset));\\r\\n    uint256[] memory amounts = new uint256[](1);\\r\\n    amounts[0] = info.amount;\\r\\n\\r\\n    //Balancer Flashloan initiated.\\r\\n    balVault.flashLoan(receiverAddress, assets, amounts, abi.encode(info));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes Balancer Flashloan, this operation is required\\r\\n   * and called by Balancer flashloan when sending loaned amount\\r\\n   */\\r\\n  function receiveFlashLoan(\\r\\n    IERC20[] memory tokens,\\r\\n    uint256[] memory amounts,\\r\\n    uint256[] memory feeAmounts,\\r\\n    bytes memory userData\\r\\n  ) external override {\\r\\n    require(msg.sender == _balancerVault, Errors.VL_NOT_AUTHORIZED);\\r\\n\\r\\n    FlashLoan.Info memory info = abi.decode(userData, (FlashLoan.Info));\\r\\n\\r\\n    uint256 _value;\\r\\n    if (info.asset == _ETH) {\\r\\n      // Convert WETH to ETH and assign amount to be set as msg.value\\r\\n      _convertWethToEth(amounts[0]);\\r\\n      _value = info.amount;\\r\\n    } else {\\r\\n      // Transfer to Vault the flashloan Amount\\r\\n      // _value is 0\\r\\n      tokens[0].univTransfer(payable(info.vault), amounts[0]);\\r\\n    }\\r\\n\\r\\n    _executeAction(info, amounts[0], feeAmounts[0], _value);\\r\\n\\r\\n    // Repay flashloan\\r\\n    _repay(\\r\\n      info.asset == _ETH,\\r\\n      address(tokens[0]),\\r\\n      amounts[0] + feeAmounts[0],\\r\\n      _balancerVault\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _executeAction(\\r\\n    FlashLoan.Info memory _info,\\r\\n    uint256 _amount,\\r\\n    uint256 _fee,\\r\\n    uint256 _value\\r\\n  ) internal {\\r\\n    require( _paramsHash == keccak256(abi.encode(_info)), \\\"False entry point!\\\");\\r\\n    if (_info.callType == FlashLoan.CallType.Switch) {\\r\\n      IVault(_info.vault).executeSwitch{ value: _value }(_info.newProvider, _amount, _fee);\\r\\n    } else if (_info.callType == FlashLoan.CallType.Close) {\\r\\n      IFliquidator(_info.fliquidator).executeFlashClose{ value: _value }(\\r\\n        _info.userAddrs[0],\\r\\n        _info.vault,\\r\\n        _amount,\\r\\n        _fee\\r\\n      );\\r\\n    } else {\\r\\n      IFliquidator(_info.fliquidator).executeFlashBatchLiquidation{ value: _value }(\\r\\n        _info.userAddrs,\\r\\n        _info.userBalances,\\r\\n        _info.userliquidator,\\r\\n        _info.vault,\\r\\n        _amount,\\r\\n        _fee\\r\\n      );\\r\\n    }\\r\\n    _paramsHash = \\\"\\\";\\r\\n  }\\r\\n\\r\\n  function _approveBeforeRepay(\\r\\n    bool _isETH,\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    address _spender\\r\\n  ) internal {\\r\\n    if (_isETH) {\\r\\n      _convertEthToWeth(_amount);\\r\\n      IERC20(_WETH).univApprove(payable(_spender), _amount);\\r\\n    } else {\\r\\n      IERC20(_asset).univApprove(payable(_spender), _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _repay(\\r\\n    bool _isETH,\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    address _spender\\r\\n  ) internal {\\r\\n    if (_isETH) {\\r\\n      _convertEthToWeth(_amount);\\r\\n      IERC20(_WETH).univTransfer(payable(_spender), _amount);\\r\\n    } else {\\r\\n      IERC20(_asset).univTransfer(payable(_spender), _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _convertEthToWeth(uint256 _amount) internal {\\r\\n    IWETH(_WETH).deposit{ value: _amount }();\\r\\n  }\\r\\n\\r\\n  function _convertWethToEth(uint256 _amount) internal {\\r\\n    IWETH token = IWETH(_WETH);\\r\\n    token.withdraw(_amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/flashloans/DyDxFlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../interfaces/dydx/ICallee.sol\\\";\\r\\nimport \\\"../../interfaces/dydx/ISoloMargin.sol\\\";\\r\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\r\\n\\r\\ncontract DyDxFlashloanBase {\\r\\n  // -- Internal Helper functions -- //\\r\\n\\r\\n  function _getMarketIdFromTokenAddress(ISoloMargin solo, address token)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 numMarkets = solo.getNumMarkets();\\r\\n\\r\\n    address curToken;\\r\\n    for (uint256 i = 0; i < numMarkets; i++) {\\r\\n      curToken = solo.getMarketTokenAddress(i);\\r\\n\\r\\n      if (curToken == token) {\\r\\n        return i;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"No marketId found\\\");\\r\\n  }\\r\\n\\r\\n  function _getAccountInfo(address receiver) internal pure returns (Account.Info memory) {\\r\\n    return Account.Info({ owner: receiver, number: 1 });\\r\\n  }\\r\\n\\r\\n  function _getWithdrawAction(uint256 marketId, uint256 amount)\\r\\n    internal\\r\\n    view\\r\\n    returns (Actions.ActionArgs memory)\\r\\n  {\\r\\n    return\\r\\n      Actions.ActionArgs({\\r\\n        actionType: Actions.ActionType.Withdraw,\\r\\n        accountId: 0,\\r\\n        amount: Types.AssetAmount({\\r\\n          sign: false,\\r\\n          denomination: Types.AssetDenomination.Wei,\\r\\n          ref: Types.AssetReference.Delta,\\r\\n          value: amount\\r\\n        }),\\r\\n        primaryMarketId: marketId,\\r\\n        secondaryMarketId: 0,\\r\\n        otherAddress: address(this),\\r\\n        otherAccountId: 0,\\r\\n        data: \\\"\\\"\\r\\n      });\\r\\n  }\\r\\n\\r\\n  function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\r\\n    return\\r\\n      Actions.ActionArgs({\\r\\n        actionType: Actions.ActionType.Call,\\r\\n        accountId: 0,\\r\\n        amount: Types.AssetAmount({\\r\\n          sign: false,\\r\\n          denomination: Types.AssetDenomination.Wei,\\r\\n          ref: Types.AssetReference.Delta,\\r\\n          value: 0\\r\\n        }),\\r\\n        primaryMarketId: 0,\\r\\n        secondaryMarketId: 0,\\r\\n        otherAddress: address(this),\\r\\n        otherAccountId: 0,\\r\\n        data: data\\r\\n      });\\r\\n  }\\r\\n\\r\\n  function _getDepositAction(uint256 marketId, uint256 amount)\\r\\n    internal\\r\\n    view\\r\\n    returns (Actions.ActionArgs memory)\\r\\n  {\\r\\n    return\\r\\n      Actions.ActionArgs({\\r\\n        actionType: Actions.ActionType.Deposit,\\r\\n        accountId: 0,\\r\\n        amount: Types.AssetAmount({\\r\\n          sign: true,\\r\\n          denomination: Types.AssetDenomination.Wei,\\r\\n          ref: Types.AssetReference.Delta,\\r\\n          value: amount\\r\\n        }),\\r\\n        primaryMarketId: marketId,\\r\\n        secondaryMarketId: 0,\\r\\n        otherAddress: address(this),\\r\\n        otherAccountId: 0,\\r\\n        data: \\\"\\\"\\r\\n      });\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/abstracts/claimable/Claimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Abstract contract that implements a modified version of  Openzeppelin {Ownable.sol} contract.\\r\\n * It creates a two step process for the transfer of ownership.\\r\\n */\\r\\n\\r\\nabstract contract Claimable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  address public pendingOwner;\\r\\n\\r\\n  // Claimable Events\\r\\n\\r\\n  /**\\r\\n   * @dev Emits when step two in ownership transfer is completed.\\r\\n   */\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n  /**\\r\\n   * @dev Emits when step one in ownership transfer is initiated.\\r\\n   */\\r\\n  event NewPendingOwner(address indexed owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(_msgSender() == owner(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the pendingOwner.\\r\\n   */\\r\\n  modifier onlyPendingOwner() {\\r\\n    require(_msgSender() == pendingOwner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(owner(), address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Step one of ownership transfer.\\r\\n   * Initiates transfer of ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE:`newOwner` requires to claim ownership in order to be able to call\\r\\n   * {onlyOwner} modified functions.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Cannot pass zero address!\\\");\\r\\n    require(pendingOwner == address(0), \\\"There is a pending owner!\\\");\\r\\n    pendingOwner = newOwner;\\r\\n    emit NewPendingOwner(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Cancels the transfer of ownership of the contract.\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function cancelTransferOwnership() public onlyOwner {\\r\\n    require(pendingOwner != address(0));\\r\\n    delete pendingOwner;\\r\\n    emit NewPendingOwner(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Step two of ownership transfer.\\r\\n   * 'pendingOwner' claims ownership of the contract.\\r\\n   * Can only be called by the pending owner.\\r\\n   */\\r\\n  function claimOwnership() public onlyPendingOwner {\\r\\n    emit OwnershipTransferred(owner(), pendingOwner);\\r\\n    _owner = pendingOwner;\\r\\n    delete pendingOwner;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFujiAdmin {\\r\\n  // FujiAdmin Events\\r\\n\\r\\n  /**\\r\\n   * @dev Log change of flasher address\\r\\n   */\\r\\n  event FlasherChanged(address newFlasher);\\r\\n  /**\\r\\n   * @dev Log change of fliquidator address\\r\\n   */\\r\\n  event FliquidatorChanged(address newFliquidator);\\r\\n  /**\\r\\n   * @dev Log change of treasury address\\r\\n   */\\r\\n  event TreasuryChanged(address newTreasury);\\r\\n  /**\\r\\n   * @dev Log change of controller address\\r\\n   */\\r\\n  event ControllerChanged(address newController);\\r\\n  /**\\r\\n   * @dev Log change of vault harvester address\\r\\n   */\\r\\n  event VaultHarvesterChanged(address newHarvester);\\r\\n  /**\\r\\n   * @dev Log change of swapper address\\r\\n   */\\r\\n  event SwapperChanged(address newSwapper);\\r\\n  /**\\r\\n   * @dev Log change of vault address permission\\r\\n   */\\r\\n  event VaultPermitChanged(address vaultAddress, bool newPermit);\\r\\n\\r\\n  function validVault(address _vaultAddr) external view returns (bool);\\r\\n\\r\\n  function getFlasher() external view returns (address);\\r\\n\\r\\n  function getFliquidator() external view returns (address);\\r\\n\\r\\n  function getController() external view returns (address);\\r\\n\\r\\n  function getTreasury() external view returns (address payable);\\r\\n\\r\\n  function getVaultHarvester() external view returns (address);\\r\\n\\r\\n  function getSwapper() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IVault {\\r\\n  // Vault Events\\r\\n\\r\\n  /**\\r\\n   * @dev Log a deposit transaction done by a user\\r\\n   */\\r\\n  event Deposit(address indexed userAddrs, address indexed asset, uint256 amount);\\r\\n  /**\\r\\n   * @dev Log a withdraw transaction done by a user\\r\\n   */\\r\\n  event Withdraw(address indexed userAddrs, address indexed asset, uint256 amount);\\r\\n  /**\\r\\n   * @dev Log a borrow transaction done by a user\\r\\n   */\\r\\n  event Borrow(address indexed userAddrs, address indexed asset, uint256 amount);\\r\\n  /**\\r\\n   * @dev Log a payback transaction done by a user\\r\\n   */\\r\\n  event Payback(address indexed userAddrs, address indexed asset, uint256 amount);\\r\\n  /**\\r\\n   * @dev Log a switch from provider to new provider in vault\\r\\n   */\\r\\n  event Switch(\\r\\n    address fromProviderAddrs,\\r\\n    address toProviderAddr,\\r\\n    uint256 debtamount,\\r\\n    uint256 collattamount\\r\\n  );\\r\\n  /**\\r\\n   * @dev Log a change in active provider\\r\\n   */\\r\\n  event SetActiveProvider(address newActiveProviderAddress);\\r\\n  /**\\r\\n   * @dev Log a change in the array of provider addresses\\r\\n   */\\r\\n  event ProvidersChanged(address[] newProviderArray);\\r\\n  /**\\r\\n   * @dev Log a change in F1155 address\\r\\n   */\\r\\n  event F1155Changed(address newF1155Address);\\r\\n  /**\\r\\n   * @dev Log a change in fuji admin address\\r\\n   */\\r\\n  event FujiAdminChanged(address newFujiAdmin);\\r\\n  /**\\r\\n   * @dev Log a change in the factor values\\r\\n   */\\r\\n  event FactorChanged(FactorType factorType, uint64 newFactorA, uint64 newFactorB);\\r\\n  /**\\r\\n   * @dev Log a change in the oracle address\\r\\n   */\\r\\n  event OracleChanged(address newOracle);\\r\\n\\r\\n  enum FactorType {\\r\\n    Safety,\\r\\n    Collateralization,\\r\\n    ProtocolFee,\\r\\n    BonusLiquidation\\r\\n  }\\r\\n\\r\\n  struct Factor {\\r\\n    uint64 a;\\r\\n    uint64 b;\\r\\n  }\\r\\n\\r\\n  // Core Vault Functions\\r\\n\\r\\n  function deposit(uint256 _collateralAmount) external payable;\\r\\n\\r\\n  function withdraw(int256 _withdrawAmount) external;\\r\\n\\r\\n  function withdrawLiq(int256 _withdrawAmount) external;\\r\\n\\r\\n  function borrow(uint256 _borrowAmount) external;\\r\\n\\r\\n  function payback(int256 _repayAmount) external payable;\\r\\n\\r\\n  function paybackLiq(address[] memory _users, uint256 _repayAmount) external payable;\\r\\n\\r\\n  function executeSwitch(\\r\\n    address _newProvider,\\r\\n    uint256 _flashLoanDebt,\\r\\n    uint256 _fee\\r\\n  ) external payable;\\r\\n\\r\\n  //Getter Functions\\r\\n\\r\\n  function activeProvider() external view returns (address);\\r\\n\\r\\n  function borrowBalance(address _provider) external view returns (uint256);\\r\\n\\r\\n  function depositBalance(address _provider) external view returns (uint256);\\r\\n\\r\\n  function userDebtBalance(address _user) external view returns (uint256);\\r\\n\\r\\n  function userProtocolFee(address _user) external view returns (uint256);\\r\\n\\r\\n  function userDepositBalance(address _user) external view returns (uint256);\\r\\n\\r\\n  function getNeededCollateralFor(uint256 _amount, bool _withFactors)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function getLiquidationBonusFor(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n  function getProviders() external view returns (address[] memory);\\r\\n\\r\\n  function fujiERC1155() external view returns (address);\\r\\n\\r\\n  //Setter Functions\\r\\n\\r\\n  function setActiveProvider(address _provider) external;\\r\\n\\r\\n  function updateF1155Balances() external;\\r\\n\\r\\n  function protocolFee() external view returns (uint64, uint64);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../libraries/FlashLoans.sol\\\";\\r\\n\\r\\ninterface IFlasher {\\r\\n  /**\\r\\n   * @dev Logs a change in FujiAdmin address.\\r\\n   */\\r\\n  event FujiAdminChanged(address newFujiAdmin);\\r\\n\\r\\n  function initiateFlashloan(FlashLoan.Info calldata info, uint8 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFliquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFliquidator {\\r\\n  function executeFlashClose(\\r\\n    address _userAddr,\\r\\n    address _vault,\\r\\n    uint256 _amount,\\r\\n    uint256 _flashloanfee\\r\\n  ) external payable;\\r\\n\\r\\n  function executeFlashBatchLiquidation(\\r\\n    address[] calldata _userAddrs,\\r\\n    uint256[] calldata _usrsBals,\\r\\n    address _liquidatorAddr,\\r\\n    address _vault,\\r\\n    uint256 _amount,\\r\\n    uint256 _flashloanFee\\r\\n  ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiMappings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFujiMappings {\\r\\n  // FujiMapping Events\\r\\n\\r\\n  /**\\r\\n   * @dev Log a change in address mapping\\r\\n   */\\r\\n  event MappingChanged(address keyAddress, address mappedAddress);\\r\\n  /**\\r\\n   * @dev Log a change in URI\\r\\n   */\\r\\n  event UriChanged(string newUri);\\r\\n\\r\\n  function addressMapping(address) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IWETH {\\r\\n  function approve(address, uint256) external;\\r\\n\\r\\n  function deposit() external payable;\\r\\n\\r\\n  function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/aave/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFlashLoanReceiver {\\r\\n  function executeOperation(\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata premiums,\\r\\n    address initiator,\\r\\n    bytes calldata params\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/aave/IAaveLendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAaveLendingPool {\\r\\n  function flashLoan(\\r\\n    address receiverAddress,\\r\\n    address[] calldata assets,\\r\\n    uint256[] calldata amounts,\\r\\n    uint256[] calldata modes,\\r\\n    address onBehalfOf,\\r\\n    bytes calldata params,\\r\\n    uint16 referralCode\\r\\n  ) external;\\r\\n\\r\\n  function deposit(\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    address _onBehalfOf,\\r\\n    uint16 _referralCode\\r\\n  ) external;\\r\\n\\r\\n  function withdraw(\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    address _to\\r\\n  ) external;\\r\\n\\r\\n  function borrow(\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    uint256 _interestRateMode,\\r\\n    uint16 _referralCode,\\r\\n    address _onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  function repay(\\r\\n    address _asset,\\r\\n    uint256 _amount,\\r\\n    uint256 _rateMode,\\r\\n    address _onBehalfOf\\r\\n  ) external;\\r\\n\\r\\n  function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/cream/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ICFlashloanReceiver.sol\\\";\\r\\n\\r\\ninterface IERC3156FlashLender {\\r\\n  /**\\r\\n   * @dev The amount of currency available to be lent.\\r\\n   * @param token The loan currency.\\r\\n   * @return The amount of `token` that can be borrowed.\\r\\n   */\\r\\n  function maxFlashLoan(address token) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev The fee to be charged for a given loan.\\r\\n   * @param token The loan currency.\\r\\n   * @param amount The amount of tokens lent.\\r\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\r\\n   */\\r\\n  function flashFee(address token, uint256 amount) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Initiate a flash loan.\\r\\n   * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\r\\n   * @param token The loan currency.\\r\\n   * @param amount The amount of tokens lent.\\r\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\r\\n   */\\r\\n  function flashLoan(\\r\\n    ICFlashloanReceiver receiver,\\r\\n    address token,\\r\\n    uint256 amount,\\r\\n    bytes calldata data\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/cream/ICFlashloanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICFlashloanReceiver {\\r\\n  function onFlashLoan(\\r\\n    address sender,\\r\\n    address underlying,\\r\\n    uint256 amount,\\r\\n    uint256 fee,\\r\\n    bytes calldata params\\r\\n  ) external returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/cream/ICrComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ICrComptroller {\\r\\n  function isMarketListed(address cTokenAddress) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/balancer/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Partial interface for the vault, only for flash loans\\r\\n */\\r\\ninterface IBalancerVault {\\r\\n    // Flash Loans\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\r\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\r\\n     *\\r\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\r\\n     * for each token contract. `tokens` must be sorted in ascending order.\\r\\n     *\\r\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\r\\n     * `receiveFlashLoan` call.\\r\\n     *\\r\\n     * Emits `FlashLoan` events.\\r\\n     */\\r\\n    function flashLoan(\\r\\n        IFlashLoanRecipient recipient,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\r\\n     */\\r\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/balancer/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n    /**\\r\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\r\\n     *\\r\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\r\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\r\\n     * Vault, or else the entire flash loan will revert.\\r\\n     *\\r\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\r\\n     */\\r\\n    function receiveFlashLoan(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        uint256[] memory feeAmounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/mainnet/libraries/LibUniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary LibUniversalERC20 {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n  IERC20 private constant _ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\r\\n\\r\\n  function isETH(IERC20 token) internal pure returns (bool) {\\r\\n    return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\r\\n  }\\r\\n\\r\\n  function univBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\r\\n    if (isETH(token)) {\\r\\n      return account.balance;\\r\\n    } else {\\r\\n      return token.balanceOf(account);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function univTransfer(\\r\\n    IERC20 token,\\r\\n    address payable to,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    if (amount > 0) {\\r\\n      if (isETH(token)) {\\r\\n        (bool sent, ) = to.call{ value: amount }(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n      } else {\\r\\n        token.safeTransfer(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function univApprove(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    require(!isETH(token), \\\"Approve called on ETH\\\");\\r\\n\\r\\n    if (amount == 0) {\\r\\n      token.safeApprove(to, 0);\\r\\n    } else {\\r\\n      uint256 allowance = token.allowance(address(this), to);\\r\\n      if (allowance < amount) {\\r\\n        if (allowance > 0) {\\r\\n          token.safeApprove(to, 0);\\r\\n        }\\r\\n        token.safeApprove(to, amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/FlashLoans.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Account {\\r\\n  enum Status {\\r\\n    Normal,\\r\\n    Liquid,\\r\\n    Vapor\\r\\n  }\\r\\n  struct Info {\\r\\n    address owner; // The address that owns the account\\r\\n    uint256 number; // A nonce that allows a single address to control many accounts\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary Actions {\\r\\n  enum ActionType {\\r\\n    Deposit, // supply tokens\\r\\n    Withdraw, // borrow tokens\\r\\n    Transfer, // transfer balance between accounts\\r\\n    Buy, // buy an amount of some token (publicly)\\r\\n    Sell, // sell an amount of some token (publicly)\\r\\n    Trade, // trade tokens against another account\\r\\n    Liquidate, // liquidate an undercollateralized or expiring account\\r\\n    Vaporize, // use excess tokens to zero-out a completely negative account\\r\\n    Call // send arbitrary data to an address\\r\\n  }\\r\\n\\r\\n  struct ActionArgs {\\r\\n    ActionType actionType;\\r\\n    uint256 accountId;\\r\\n    Types.AssetAmount amount;\\r\\n    uint256 primaryMarketId;\\r\\n    uint256 secondaryMarketId;\\r\\n    address otherAddress;\\r\\n    uint256 otherAccountId;\\r\\n    bytes data;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary Types {\\r\\n  enum AssetDenomination {\\r\\n    Wei, // the amount is denominated in wei\\r\\n    Par // the amount is denominated in par\\r\\n  }\\r\\n\\r\\n  enum AssetReference {\\r\\n    Delta, // the amount is given as a delta from the current value\\r\\n    Target // the amount is given as an exact number to end up at\\r\\n  }\\r\\n\\r\\n  struct AssetAmount {\\r\\n    bool sign; // true if positive\\r\\n    AssetDenomination denomination;\\r\\n    AssetReference ref;\\r\\n    uint256 value;\\r\\n  }\\r\\n}\\r\\n\\r\\nlibrary FlashLoan {\\r\\n  /**\\r\\n   * @dev Used to determine which vault's function to call post-flashloan:\\r\\n   * - Switch for executeSwitch(...)\\r\\n   * - Close for executeFlashClose(...)\\r\\n   * - Liquidate for executeFlashLiquidation(...)\\r\\n   * - BatchLiquidate for executeFlashBatchLiquidation(...)\\r\\n   */\\r\\n  enum CallType {\\r\\n    Switch,\\r\\n    Close,\\r\\n    BatchLiquidate\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Struct of params to be passed between functions executing flashloan logic\\r\\n   * @param asset: Address of asset to be borrowed with flashloan\\r\\n   * @param amount: Amount of asset to be borrowed with flashloan\\r\\n   * @param vault: Vault's address on which the flashloan logic to be executed\\r\\n   * @param newProvider: New provider's address. Used when callType is Switch\\r\\n   * @param userAddrs: User's address array Used when callType is BatchLiquidate\\r\\n   * @param userBals:  Array of user's balances, Used when callType is BatchLiquidate\\r\\n   * @param userliquidator: The user's address who is  performing liquidation. Used when callType is Liquidate\\r\\n   * @param fliquidator: Fujis Liquidator's address.\\r\\n   */\\r\\n  struct Info {\\r\\n    CallType callType;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address vault;\\r\\n    address newProvider;\\r\\n    address[] userAddrs;\\r\\n    uint256[] userBalances;\\r\\n    address userliquidator;\\r\\n    address fliquidator;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Fuji\\r\\n * @notice Defines the error messages emitted by the different contracts\\r\\n * @dev Error messages prefix glossary:\\r\\n *  - VL = Validation Logic 100 series\\r\\n *  - MATH = Math libraries 200 series\\r\\n *  - RF = Refinancing 300 series\\r\\n *  - VLT = vault 400 series\\r\\n *  - SP = Special 900 series\\r\\n */\\r\\nlibrary Errors {\\r\\n  //Errors\\r\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\r\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\r\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\r\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\r\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\r\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\r\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\r\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\r\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\r\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\r\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\r\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\r\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\r\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\r\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\r\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\r\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\r\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\r\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\r\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\r\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\r\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\r\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\r\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\r\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\r\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\r\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\r\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\r\\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \\\"128\\\"; // ERC1155: Not Transferable\\r\\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \\\"129\\\"; // ERC1155: Not Transferable\\r\\n  string public constant VL_ZERO_ADDR = \\\"130\\\"; // Zero Address\\r\\n  string public constant VL_INVALID_FLASH_NUMBER = \\\"131\\\"; // invalid flashloan number\\r\\n  string public constant VL_INVALID_HARVEST_PROTOCOL_NUMBER = \\\"132\\\"; // invalid flashloan number\\r\\n  string public constant VL_INVALID_HARVEST_TYPE = \\\"133\\\"; // invalid flashloan number\\r\\n  string public constant VL_INVALID_FACTOR = \\\"134\\\"; // invalid factor\\r\\n  string public constant VL_INVALID_NEW_PROVIDER =\\\"135\\\"; // invalid newProvider in executeSwitch\\r\\n\\r\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\r\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\r\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\r\\n\\r\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\r\\n  string public constant RF_INVALID_NEW_ACTIVEPROVIDER = \\\"302\\\"; //Input '_newProvider' and vault's 'activeProvider' must be different\\r\\n\\r\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\r\\n\\r\\n  string public constant ORACLE_INVALID_LENGTH = \\\"501\\\"; // The assets length and price feeds length doesn't match\\r\\n  string public constant ORACLE_NONE_PRICE_FEED = \\\"502\\\"; // The price feed is not found\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/dydx/ICallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ICallee\\r\\n * @author dYdX\\r\\n *\\r\\n * Interface that Callees for Solo must implement in order to ingest data.\\r\\n */\\r\\ninterface ICallee {\\r\\n  /**\\r\\n   * Allows users to send this contract arbitrary data.\\r\\n   *\\r\\n   * @param  sender       The msg.sender to Solo\\r\\n   * @param  accountInfo  The account from which the data is being sent\\r\\n   * @param  data         Arbitrary data given by the sender\\r\\n   */\\r\\n  function callFunction(\\r\\n    address sender,\\r\\n    Account.Info memory accountInfo,\\r\\n    bytes memory data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/dydx/ISoloMargin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../libraries/FlashLoans.sol\\\";\\r\\n\\r\\ninterface ISoloMargin {\\r\\n  struct Price {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  struct Value {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  struct Rate {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  struct Wei {\\r\\n    bool sign;\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  function operate(Account.Info[] calldata _accounts, Actions.ActionArgs[] calldata _actions)\\r\\n    external;\\r\\n\\r\\n  function getAccountWei(Account.Info calldata _account, uint256 _marketId)\\r\\n    external\\r\\n    view\\r\\n    returns (Wei memory);\\r\\n\\r\\n  function getNumMarkets() external view returns (uint256);\\r\\n\\r\\n  function getMarketTokenAddress(uint256 _marketId) external view returns (address);\\r\\n\\r\\n  function getAccountValues(Account.Info memory _account)\\r\\n    external\\r\\n    view\\r\\n    returns (Value memory, Value memory);\\r\\n\\r\\n  function getMarketInterestRate(uint256 _marketId) external view returns (Rate memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFujiAdmin\",\"type\":\"address\"}],\"name\":\"FujiAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum FlashLoan.CallType\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"userAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"userBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"userliquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fliquidator\",\"type\":\"address\"}],\"internalType\":\"struct FlashLoan.Info\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"_flashnum\",\"type\":\"uint8\"}],\"name\":\"initiateFlashloan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFujiAdmin\",\"type\":\"address\"}],\"name\":\"setFujiAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Flasher", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}