{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/IMeta.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n/*\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&--&------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-----------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-----------------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&--------------------------&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&--------------------------------&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&-------------------------------------------&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&-----------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&-----------------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&--------------------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&-----------------------------------------------------&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&------------------------------------------------&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&-------------------------------------------------&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&------------------------------------------------&&&&&&&&&&&&&&\r\n(%%%%%%%%%%%%%%%%%------------------------------------------------%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%---------------------------------------------%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%-------------------------------------------%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%%%---------------------------------------%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%%%%%%%-------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%-----%%%%%%%%%%%%%%%-----------------------%%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%----------------%%%%%%%%-------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%&------%%%%%%%--------%%%%--------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%-----&%%%%%%%%%%%%%-----%%---------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%-----%%%%%%%%%%%%%%%%---------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%-----%%---%%%%%%%%%%%%--------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%----------%%%%%%%%%%%--------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%------%%%%%%%%%%%---------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%%%%%----------------------------------%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%%% @creator: BapezNFT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%% @author: debugger, twitter.com/debuggerguy %%%%%%%%%%%%%%\r\n*/\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMeta \r\n{\r\n    function getMetadata(uint256 tokenId) external view returns (string memory);\r\n}\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/MDProvider.sol\r\n\r\n\r\n/*\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&--&------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-----------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-----------------&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&&&&--------------------------&&&&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&&&--------------------------------&&&&&&&&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&&&-------------------------------------------&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&&&&&-----------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&-----------------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&--------------------------------------------------------&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&-----------------------------------------------------&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&------------------------------------------------&&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&-------------------------------------------------&&&&&&&&&&&&&&\r\n(&&&&&&&&&&&&&&&&&------------------------------------------------&&&&&&&&&&&&&&\r\n(%%%%%%%%%%%%%%%%%------------------------------------------------%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%---------------------------------------------%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%-------------------------------------------%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%%%---------------------------------------%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%%%%%%%%%%%%%%%-------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%%%%%%-----%%%%%%%%%%%%%%%-----------------------%%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%%%%----------------%%%%%%%%-------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%%&------%%%%%%%--------%%%%--------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n(%%%-----&%%%%%%%%%%%%%-----%%---------------------------%%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%-----%%%%%%%%%%%%%%%%---------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%-----%%---%%%%%%%%%%%%--------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%----------%%%%%%%%%%%--------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%------%%%%%%%%%%%---------------------------------%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%%%%%----------------------------------%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%%% @creator: BapezNFT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n/%%%%%%%%%%%%%%%%%%%%% @author: debugger, twitter.com/debuggerguy %%%%%%%%%%%%%%\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract MDProvider is IMeta, Ownable {\r\n    using Strings for uint256;\r\n\r\n    bool public isRevealed;\r\n\r\n    string public baseURI = \"\";\r\n    \r\n    constructor\r\n    ( \r\n       string memory _baseURI\r\n    ) \r\n    {\r\n       baseURI = _baseURI;\r\n    }\r\n\r\n    function getMetadata(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return isRevealed ? string(abi.encodePacked(baseURI, tokenId.toString())) : string(abi.encodePacked(baseURI, tokenId.toString(),\".json\"));\r\n    }\r\n\r\n    function setBaseURI(string memory _baseURI) external onlyOwner {\r\n        baseURI = _baseURI;\r\n    }\r\n\r\n    function reveal(string memory _baseURI) external onlyOwner \r\n    {\r\n        baseURI = _baseURI;\r\n        isRevealed = !isRevealed;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MDProvider", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d5259466a355076724a5a336a794a397a42397147634b4746664773414e63353556387756795146584a6768372f00000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://493bd3bb5a0154913b169fd9d069e150bec891845e33a02a1e93a7b7d5d99420"}]}