{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ninterface IDDFERC20Factory {\r\n    function getPair(address token) external view returns (address pair);\r\n    function indexPairs(uint index) external view returns (address pair);\r\n    function allTokensLength() external view returns (uint);\r\n}\r\n\r\ninterface IDDFERC20PoolPair {\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function pairInfo(address owner) external view returns (uint32, uint, uint32, uint32);\r\n    function mint(address owner, uint256 amount) external;\r\n    function burn(address owner, uint256 amount) external;\r\n    function updateTokenTime(address owner) external;\r\n}\r\n\r\ninterface IDDFERC20Router {\r\n    function deposit(address token, uint256 amount) external;\r\n    function withdraw(address token, uint256 amount) external;\r\n    function receiveInterest(address token) external;\r\n    function findAllDeposit(address token)\r\n        external\r\n\t\tview\r\n        returns (uint256 amount);\r\n    function findInterest(address token ,address account) \r\n        external \r\n        view \r\n        returns (uint256 amount,uint256 interest);\r\n}\r\n\r\ncontract DDFERC20Router is IDDFERC20Router {\r\n    address public factory;\r\n    address public ddfAddress;\r\n    address public ddfSender;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'DDFNFT: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(address _factory, address _ddfAddress) {\r\n        factory = _factory;\r\n        ddfAddress = _ddfAddress;\r\n        ddfSender = msg.sender;\r\n    }\r\n\r\n    function deposit(address token, uint256 amount) external lock override {\r\n        address pair = IDDFERC20Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter:pair nonexistent\");\r\n        require(amount <= IERC20(token).balanceOf(msg.sender), \"DDFRouter:deposit amount not enough\");\r\n\r\n        (uint32 startTime, uint _amount, uint32 interestRate, uint32 INTEREST_RATE_MOL) = IDDFERC20PoolPair(pair).pairInfo(msg.sender);\r\n        if(_amount > 0 && startTime > 0){\r\n            uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n            uint ddfAmount = CalProfitMath.colProfitAmount(startTime, endTime, _amount, interestRate, INTEREST_RATE_MOL);\r\n            IERC20(ddfAddress).transferFrom(ddfSender, msg.sender,ddfAmount);\r\n        }\r\n\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        IERC20(token).approve(pair,amount);\r\n        IDDFERC20PoolPair(pair).mint(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) external lock override {\r\n        address pair = IDDFERC20Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n\r\n        (uint32 startTime, uint allAmount, uint32 interestRate, uint32 INTEREST_RATE_MOL) = IDDFERC20PoolPair(pair).pairInfo(msg.sender);\r\n        require(amount > 0, \"DDFRouter: withdraw amount not enough\"); \r\n\r\n        if(allAmount > 0 && startTime > 0){ \r\n            uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n            uint ddfAmount = CalProfitMath.colProfitAmount(startTime, endTime, allAmount, interestRate, INTEREST_RATE_MOL);\r\n            if(ddfAmount > 0){\r\n                IERC20(ddfAddress).transferFrom(ddfSender, msg.sender,ddfAmount);\r\n            }\r\n        }\r\n\r\n        IDDFERC20PoolPair(pair).burn(msg.sender,amount);\r\n    }\r\n\r\n    function receiveInterest(address token) external lock override {\r\n        address pair = IDDFERC20Factory(factory).getPair(token);\r\n        require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n\r\n        (uint32 startTime, uint amount, uint32 interestRate, uint32 INTEREST_RATE_MOL) = IDDFERC20PoolPair(pair).pairInfo(msg.sender);\r\n        require(amount > 0, \"DDFRouter: withdraw amount not enough\"); \r\n\r\n        if(amount > 0 && startTime > 0){ \r\n            uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n            uint ddfAmount = CalProfitMath.colProfitAmount(startTime, endTime, amount, interestRate, INTEREST_RATE_MOL);\r\n            if(ddfAmount > 0){\r\n                IERC20(ddfAddress).transferFrom(ddfSender, msg.sender, ddfAmount);\r\n            }\r\n        }\r\n\r\n        IDDFERC20PoolPair(pair).updateTokenTime(msg.sender);\r\n    }\r\n\r\n    function findAllDeposit(address token)\r\n        public\r\n\t\tview\r\n        override\r\n        returns (uint256 amount) {\r\n            address pair = IDDFERC20Factory(factory).getPair(token);\r\n            require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n            amount = IDDFERC20PoolPair(pair).totalSupply();\r\n    }\r\n\r\n    function findInterest(address token ,address account)\r\n        public\r\n\t\tview\r\n        override\r\n        returns (uint256 amount,uint256 interest) {\r\n            address pair = IDDFERC20Factory(factory).getPair(token);\r\n            require(pair != address(0), \"DDFRouter: pair nonexistent\");\r\n\r\n            (uint32 startTime, uint _amount, uint32 interestRate, uint32 INTEREST_RATE_MOL) = IDDFERC20PoolPair(pair).pairInfo(account);\r\n\r\n            if(_amount > 0){\r\n                uint32 endTime = uint32(block.timestamp % 2 ** 32);\r\n                interest = CalProfitMath.colProfitAmount(startTime, endTime, _amount, interestRate, INTEREST_RATE_MOL);\r\n                amount = _amount;\r\n            }\r\n    }\r\n}\r\n\r\nlibrary CalProfitMath {\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function calProfit(uint256 dayProfit, uint second) internal pure returns (uint256 z) {\r\n        z = mul(dayProfit,second);\r\n        z = div(z,SECONDS_PER_DAY);\r\n    }\r\n    \r\n    function colProfitAmount(uint32 startime, uint32 endtime, uint256 depositAmount, uint256 m, uint256 d) internal pure returns (uint256 totalAmount) {\r\n        uint dayAmount = div(mul(depositAmount,m),d);\r\n        totalAmount = calProfit(dayAmount,sub(endtime,startime));\r\n        return totalAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ddfAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ddfAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddfSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"findAllDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"findInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"receiveInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DDFERC20Router", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009caa376236c766e85a8f16d64461d5f2fdad407a0000000000000000000000007227ef719eb6b0624c1c6202af169c5394a4557c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10e39100acc2e3bb93f0ecb2cf403d93e4d8e39de76416873a09d39acb00926f"}]}