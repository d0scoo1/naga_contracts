{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"FUSHI.sol\":{\"content\":\"/*\\n* Fushi Inu ETH - $FUSHI\\n* The Eternity - first Auto LP + Auto Buyback token on Degen Swap!\\n* DegenSwap:https://degenswap.app\\n* Website:  https://FushiInu.com\\n* Telegram: https://t.me/FushiInuETH\\n* Twitter:  https://twitter.com/FushiInuETH\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\nimport \\\"./IUniswapV2Router.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapV2Maker.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract FUSHI is Ownable, IERC20 {\\n    using SafeMath for uint256;\\n    bool private _swapping;\\n    uint256 public _launchedBlock;\\n    uint256 public _launchedTime;\\n    \\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    // Pair Details\\n    mapping (uint256 =\\u003e address) private pairs;\\n    mapping (uint256 =\\u003e address) private tokens;\\n    uint256 private pairsLength;\\n    address public WETH;\\n\\n    uint256 private _totalSupply = 10000000000 * 10**9;\\n    uint256 private _txLimit = 50000000 * 10**9;\\n    string private _name = \\\"Fushi Inu\\\";\\n    string private _symbol = \\\"FUSHI\\\";\\n    uint8 private _decimals = 9;\\n    uint256 private _tax = 1200; //12% tax\\n    uint8 private _lpSplit = 8;\\n    bool private _createLp = true;\\n    uint256 private _swapThreshold = 1250000000000000000;\\n\\n    mapping (address =\\u003e bool) private _blacklist;\\n    mapping (address =\\u003e bool) private _excludedAddress;\\n    mapping (address =\\u003e uint) private _cooldown;\\n    bool public _cooldownEnabled = false;\\n\\n    address private _uniRouter = 0x4bf3E2287D4CeD7796bFaB364C0401DFcE4a4f7F;\\n    address private _dead = 0x000000000000000000000000000000000000dEaD;\\n    address private _dev;\\n    address public _maker = 0xCAa42dc48B33914B0F0092aF243b4a6D2313E3e9;\\n    IUniswapV2Router public _uniswapV2Router;\\n    IUniswapV2Factory public _uniswapV2Factory;\\n    IUniswapV2Pair public _uniswapV2Pair;\\n    \\n    event launched();\\n    \\n    constructor(address[] memory dev) {\\n        _dev = dev[2];\\n        _balances[owner()] = _totalSupply;\\n        _excludedAddress[owner()] = true;\\n        _excludedAddress[_dev] = true;\\n        _excludedAddress[address(this)] = true;\\n        _uniswapV2Router = IUniswapV2Router(_uniRouter);\\n        _allowances[address(this)][_uniRouter] = type(uint256).max;\\n        _uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\n        _uniswapV2Pair = IUniswapV2Pair(_uniswapV2Factory\\n                            .createPair(address(this), _uniswapV2Router.WETH()));\\n        _uniswapV2Pair.setBaseToken(_uniswapV2Router.WETH());\\n        _uniswapV2Pair.updateTotalFee(_tax);\\n        WETH = _uniswapV2Router.WETH();\\n        tokens[pairsLength] = WETH;\\n        pairs[pairsLength] = address(_uniswapV2Pair);   \\n        pairsLength += 1;\\n        IERC20(WETH).approve(address(_uniswapV2Pair), type(uint256).max);\\n        IERC20(WETH).approve(address(this), type(uint256).max);\\n        IERC20(WETH).approve(_maker, type(uint256).max);\\n        \\n    }\\n\\n    modifier devOrOwner() {\\n        require(owner() == _msgSender() || _dev == _msgSender(), \\\"Caller is not the owner or dev\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchange() {\\n        bool isPair = false;\\n        for(uint i = 0; i \\u003c pairsLength; i++) {\\n            if(pairs[i] == msg.sender) isPair = true;\\n        }\\n        require(\\n            msg.sender == address(_uniswapV2Router)\\n            || isPair\\n            , \\\"DEGEN: NOT_ALLOWED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier lockSwap {\\n        _swapping = true;\\n        _;\\n        _swapping = false;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function isBuy(address sender) private view returns (bool) {\\n        return sender == address(_uniswapV2Pair);\\n    }\\n\\n    function trader(address sender, address recipient) private view returns (bool) {\\n        return !(_excludedAddress[sender] ||  _excludedAddress[recipient]);\\n    }\\n    \\n    function txRestricted(address sender, address recipient) private view returns (bool) {\\n        return sender == address(_uniswapV2Pair) \\u0026\\u0026 recipient != address(_uniRouter) \\u0026\\u0026 !_excludedAddress[recipient];\\n    }\\n    \\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        require (_allowances[sender][_msgSender()] \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approveAlt(address token, address contractaddr) external onlyOwner {\\n        IERC20(token).approve(contractaddr, type(uint256).max);\\n    }\\n    \\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(_balances[sender] \\u003e= amount, \\\"ERC20: transfer exceeds balance\\\");\\n        require(amount \\u003e 0, \\\"ERC20: cannot transfer zero\\\");\\n        require(!_blacklist[sender] \\u0026\\u0026 !_blacklist[recipient] \\u0026\\u0026 !_blacklist[tx.origin]);\\n\\n        if (trader(sender, recipient)) {\\n            require (_launchedBlock != 0, \\\"FUSHI: trading not enabled\\\");\\n            if (txRestricted(sender, recipient)){\\n                require(amount \\u003c= _txLimit, \\\"FUSHI: max tx buy limit\\\");\\n                 if (_cooldownEnabled) {\\n                    require(_cooldown[recipient] \\u003c block.timestamp);\\n                    _cooldown[recipient] = block.timestamp + 30 seconds;\\n                }\\n            }\\n            if (!isBuy(sender)){\\n                if (IERC20(WETH).balanceOf(address(this)) \\u003e _swapThreshold \\u0026\\u0026 !_swapping){\\n                    createLp(_dev, _lpSplit, _createLp);\\n                }\\n            }\\n        }\\n\\n        _balances[recipient] += amount;\\n        _balances[sender] -= amount;\\n        \\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function launch() external onlyOwner {\\n        require (_launchedBlock \\u003c= block.number, \\\"FUSHI: already launched...\\\");\\n        _cooldownEnabled = true;\\n        _launchedBlock = block.number;\\n        _launchedTime = block.timestamp;\\n        emit launched();\\n    }\\n\\n    function setThreshold(uint256 swapThreshold) external onlyOwner {\\n        _swapThreshold = swapThreshold;\\n    }\\n\\n    function setCooldownEnabled(bool cooldownEnabled) external onlyOwner {\\n        _cooldownEnabled = cooldownEnabled;\\n    }\\n\\n    function setTxLimit(uint256 txLimit) external devOrOwner {\\n        require(txLimit \\u003e= _txLimit, \\\"FUSHI: tx limit can only go up!\\\");\\n        _txLimit = txLimit;\\n    }\\n\\n    function changeDev(address dev) external devOrOwner {\\n        _dev = dev;\\n    }\\n\\n    function changeMaker(address maker) external devOrOwner {\\n        _maker = maker;\\n    }\\n\\n    function setLpVars(uint8 lpSplit, bool createLpBool) external devOrOwner {\\n    \\trequire(lpSplit \\u003c= 10, \\\"FUSHI: LP Split cannot be less than 10% of tax. Gas efficiency. Aim for 12.5% or higher (8)\\\");\\n    \\tif (lpSplit == 0){\\n    \\t\\t_lpSplit = lpSplit;\\n        \\t_createLp = false;\\n    \\t} else {\\n    \\t\\t_lpSplit = lpSplit;\\n        \\t_createLp = createLpBool;\\n    \\t}\\n    }\\n\\n    function failsafeETHtransfer() external devOrOwner {\\n        sendEth();\\n    }\\n    \\n    function manualCreateLP(address wallet, uint8 lpSplit, bool createLpBool) external devOrOwner {\\n        //in case current ETH does not meet threshold and dev wants to buyback\\n        createLp(wallet, lpSplit, createLpBool);\\n    }\\n\\n    function sendEth() private {\\n        (bool sendeth, ) = payable(_dev).call{value: address(this).balance}(\\\"\\\");\\n        require(sendeth, \\\"FUSHI: Failed to send Ether\\\");\\n    }\\n\\n    receive() external payable {}\\n    \\n    function createLp(address lpTaxReceiver, uint8 lpSplit, bool createLpBool) private lockSwap {\\n        IUniswapV2Maker(_maker).bakeDegen(lpTaxReceiver, lpSplit, createLpBool);\\n    }\\n\\n    function excludedAddress(address wallet, bool isExcluded) external onlyOwner {\\n        _excludedAddress[wallet] = isExcluded;\\n    }\\n\\n    function setFees(uint256 tax) public onlyOwner {\\n        require(tax \\u003c= 1500, \\\"FUSHI: Tax cannot exceed 15%\\\");\\n        updatePairsFee(tax);\\n    }\\n    \\n    function blacklistBots(address[] memory wallet) external onlyOwner {\\n        require (_launchedBlock + 22 \\u003e= block.number, \\\"FUSHI: Can only blacklist the first 22 blocks. ~5 Minutes\\\");\\n        for (uint i = 0; i \\u003c wallet.length; i++) {\\n        \\t_blacklist[wallet[i]] = true;\\n        }\\n    }\\n\\n    function sendToEternity(address[] memory wallet) external onlyOwner {\\n        for (uint i = 0; i \\u003c wallet.length; i++) {\\n            //only can run if wallet is blacklisted, which can only happen first 5 minutes\\n            if(_blacklist[wallet[i]]){\\n                uint256 botBalance = _balances[wallet[i]];\\n                _balances[wallet[i]] -= botBalance;\\n                _totalSupply -= botBalance;\\n                emit Transfer(wallet[i], _dead, botBalance);\\n            }\\n        }\\n    }\\n\\n    function rmBlacklist(address wallet) external onlyOwner {\\n        _blacklist[wallet] = false;\\n    }\\n\\n    function checkIfBlacklist(address wallet) public view returns (bool) {\\n        return _blacklist[wallet];\\n    }\\n\\n    function updatePairsFee(uint256 fee) internal {\\n        _uniswapV2Pair.updateTotalFee(fee);\\n    }\\n    \\n    function eternalBurnExtra() external onlyOwner {\\n    \\tuint256 contractBalance = _balances[address(this)];\\n    \\t_totalSupply -= contractBalance;\\n    \\temit Transfer(address(this), 0x000000000000000000000000000000000000dEaD, contractBalance);\\n    }\\n\\n    function claimERCtoknes(IERC20 tokenAddress) external {\\n        tokenAddress.transfer(_dev, tokenAddress.balanceOf(address(this)));\\n    }\\n    \\n    function depositLPFee(uint256 amount, address token) public onlyExchange {\\n        uint256 tokenIndex = _getTokenIndex(token);\\n        if(tokenIndex \\u003c pairsLength) {\\n            uint256 allowanceT = IERC20(token).allowance(msg.sender, address(this));\\n\\n            if(allowanceT \\u003e= amount) {\\n                IERC20(token).transferFrom(msg.sender, address(this), amount);\\n            }\\n        }\\n    }\\n\\n    function _getTokenIndex(address _token) internal view returns (uint256) {\\n        uint256 index = pairsLength + 1;\\n        for(uint256 i = 0; i \\u003c pairsLength; i++) {\\n            if(tokens[i] == _token) index = i;\\n        }\\n        return index;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"},\"IUniswapV2Maker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IUniswapV2Maker {\\n    function bakeDegen(address lpTaxReceiver, uint8 lpSplit, bool createLp) external returns (bool);\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IUniswapV2Pair {\\n    function updateTotalFee(uint totalFee) external returns (bool);\\n    function setBaseToken(address _baseToken) external;\\n}\"},\"IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.8.0 \\u003c0.9.0;\\n\\nlibrary SafeMath {\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n        return c;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dev\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"launched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractaddr\",\"type\":\"address\"}],\"name\":\"approveAlt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"}],\"name\":\"blacklistBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"changeMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"claimERCtoknes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eternalBurnExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"excludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failsafeETHtransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lpSplit\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"createLpBool\",\"type\":\"bool\"}],\"name\":\"manualCreateLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"}],\"name\":\"sendToEternity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"cooldownEnabled\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lpSplit\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"createLpBool\",\"type\":\"bool\"}],\"name\":\"setLpVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapThreshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FUSHI", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "6969", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000009c0c646dd3c8bfc3b4c4bfb733387333fd92bc69000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000004bf3e2287d4ced7796bfab364c0401dfce4a4f7f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://279344506285eb62c7f84b35429d69002a9d999c33a1126aab2c809ad2c2d40e"}]}