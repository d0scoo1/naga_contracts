{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITubbies {\r\n    function totalSupply() external view returns (uint);\r\n    function startSaleTimestamp() external view returns (uint);\r\n    function mintFromSale(uint tubbiesToMint) external payable;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract TubbiesBot is IERC721Receiver {\r\n    address public owner;\r\n    address public tubbies;\r\n\r\n    constructor(address _tubbies) {\r\n        owner = msg.sender;\r\n        tubbies = _tubbies;\r\n    }\r\n\r\n    function mintFromSale(uint count) public payable {\r\n        uint startSaleTimestamp = ITubbies(tubbies).startSaleTimestamp();\r\n        require(block.timestamp > startSaleTimestamp);\r\n        uint totalSupply = ITubbies(tubbies).totalSupply();\r\n        require(totalSupply < 20000);\r\n        uint left = 20000 - totalSupply;\r\n        uint maxMint = left > count ? count : left;\r\n        uint index = 5;\r\n        for (; index <= maxMint; index += 5) {\r\n            ITubbies(tubbies).mintFromSale { value: 0.5 ether } (5);\r\n            \r\n        }\r\n        uint loose = maxMint + 5 - index;\r\n        if (loose > 0) {\r\n            ITubbies(tubbies).mintFromSale { value: 0.1 ether * loose } (loose);\r\n        }\r\n        if (maxMint < count) {\r\n            payable(msg.sender).transfer(msg.value - maxMint * 0.1 ether);\r\n        }\r\n    }\r\n\r\n    function withdrawTubbies(uint[] memory tokenIds) public {\r\n        require(owner == msg.sender);\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            ITubbies(tubbies).safeTransferFrom(address(this), msg.sender, tokenIds[i], '');\r\n        }\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tubbies\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintFromSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tubbies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawTubbies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TubbiesBot", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ca7ca7bcc765f77339be2d648ba53ce9c8a262bd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a004eaeab29dc1bcfcb6f2bb7fcd562b02124b46960490cd0a4f14aa344538a5"}]}