{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/market/IMarket.sol\r\n\r\npragma solidity >=0.6.6 <0.9.0;\r\n\r\ninterface IMarket {\r\n    enum OrderType {\r\n        Public, // 0\r\n        Private, // 1\r\n        Event_Private //2\r\n    }\r\n\r\n    enum PaymentType {\r\n        Normal // 0\r\n    }\r\n\r\n    struct Lending {\r\n        address lender;\r\n        address nftAddress;\r\n        uint256 nftId;\r\n        uint64 maxEndTime;\r\n        uint64 minDuration;\r\n        uint64 createTime;\r\n        uint64 nonce;\r\n        OrderType orderType;\r\n        PaymentType paymentType;\r\n    }\r\n\r\n    struct PaymentNormal {\r\n        address token;\r\n        uint256 pricePerDay;\r\n    }\r\n\r\n    event CreateLendOrder(\r\n        address lender,\r\n        address nftAddress,\r\n        uint256 nftId,\r\n        uint64 maxEndTime,\r\n        uint64 minDuration,\r\n        uint256 pricePerDay,\r\n        address paymentToken,\r\n        address renter,\r\n        OrderType orderType\r\n    );\r\n    event CancelLendOrder(address lender, address nftAddress, uint256 nftId);\r\n    event FulfillOrder(\r\n        address renter,\r\n        address lender,\r\n        address nftAddress,\r\n        uint256 nftId,\r\n        uint64 startTime,\r\n        uint64 endTime,\r\n        uint256 pricePerDay,\r\n        uint256 newId,\r\n        address paymentToken\r\n    );\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    function mintAndCreateLendOrder(\r\n        address resolverAddress,\r\n        uint256 oNftId,\r\n        uint64 maxEndTime,\r\n        uint64 minDuration,\r\n        uint256 pricePerDay,\r\n        address paymentToken\r\n    ) external;\r\n\r\n    function createLendOrder(\r\n        address nftAddress,\r\n        uint256 nftId,\r\n        uint64 maxEndTime,\r\n        uint64 minDuration,\r\n        uint256 pricePerDay,\r\n        address paymentToken\r\n    ) external;\r\n\r\n    function cancelLendOrder(address nftAddress, uint256 nftId) external;\r\n\r\n    function getLendOrder(address nftAddress, uint256 nftId)\r\n        external\r\n        view\r\n        returns (Lending memory);\r\n\r\n    function getRenterOfPrivateLendOrder(address nftAddress, uint256 nftId)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getPaymentNormal(address nftAddress, uint256 nftId)\r\n        external\r\n        view\r\n        returns (PaymentNormal memory paymentNormal);\r\n\r\n    function fulfillOrderNow(\r\n        address nftAddress,\r\n        uint256 nftId,\r\n        uint256 durationId,\r\n        uint64 duration,\r\n        address user\r\n    ) external payable returns (uint256 tid);\r\n\r\n    function setFee(uint256 fee) external;\r\n\r\n    function getFee() external view returns (uint256);\r\n\r\n    function setMarketBeneficiary(address payable beneficiary) external;\r\n\r\n    function claimFee(address[] calldata paymentTokens) external;\r\n\r\n    function claimRoyalty(address nftAddress, address[] calldata paymentTokens)\r\n        external;\r\n\r\n    function isLendOrderValid(address nftAddress, uint256 nftId)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function setPause(bool v) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/IBaseDoNFT.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBaseDoNFT is IERC721Receiver {\r\n    struct Duration {\r\n        uint64 start;\r\n        uint64 end;\r\n    }\r\n\r\n    struct DoNftInfo {\r\n        uint256 oid;\r\n        uint64 nonce;\r\n        EnumerableSet.UintSet durationList;\r\n    }\r\n\r\n    event MetadataUpdate(uint256 tokenId);\r\n\r\n    event DurationUpdate(\r\n        uint256 durationId,\r\n        uint256 tokenId,\r\n        uint64 start,\r\n        uint64 end\r\n    );\r\n\r\n    event DurationBurn(uint256[] durationIdList);\r\n\r\n    event CheckIn(\r\n        address opreator,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 durationId,\r\n        uint256 oid,\r\n        uint64 expires\r\n    );\r\n\r\n    function mintVNft(uint256 oid) external returns (uint256 tid);\r\n\r\n    function mint(\r\n        uint256 tokenId,\r\n        uint256 durationId,\r\n        uint64 start,\r\n        uint64 end,\r\n        address to,\r\n        address user\r\n    ) external returns (uint256 tid);\r\n\r\n    function setMaxDuration(uint64 v) external;\r\n\r\n    function getMaxDuration() external view returns (uint64);\r\n\r\n    function getDurationIdList(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function getDurationListLength(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getDoNftInfo(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 oid,\r\n            uint256[] memory durationIds,\r\n            uint64[] memory starts,\r\n            uint64[] memory ends,\r\n            uint64 nonce\r\n        );\r\n\r\n    function getNonce(uint256 tokenId) external view returns (uint64);\r\n\r\n    function getDuration(uint256 durationId)\r\n        external\r\n        view\r\n        returns (uint64 start, uint64 end);\r\n\r\n    function getDurationByIndex(uint256 tokenId, uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 durationId,\r\n            uint64 start,\r\n            uint64 end\r\n        );\r\n\r\n    function getVNftId(uint256 originalNftId) external view returns (uint256);\r\n\r\n    function isVNft(uint256 tokenId) external view returns (bool);\r\n\r\n    function isValidNow(uint256 tokenId) external view returns (bool isValid);\r\n\r\n    function getOriginalNftAddress() external view returns (address);\r\n\r\n    function getOriginalNftId(uint256 tokenId) external view returns (uint256);\r\n\r\n    function checkIn(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 durationId\r\n    ) external;\r\n\r\n    function getUser(uint256 orignalNftId) external view returns (address);\r\n\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/royalty/IRoyalty.sol\r\n\r\npragma solidity >=0.6.6 <0.9.0;\r\n\r\ninterface IRoyalty {\r\n    event ClaimRoyaltyAdmin(address operator);\r\n\r\n    event SetBeneficiary(address operator, address beneficiary);\r\n\r\n    event SetRoyaltyFee(address operator, uint256 fee);\r\n\r\n    event ClaimRoyaltyBalance(address operator, uint256 balance);\r\n\r\n    function claimRoyaltyAdmin() external;\r\n\r\n    function setBeneficiary(address payable beneficiary_) external;\r\n\r\n    function getBeneficiary() external view returns (address payable);\r\n\r\n    function setRoyaltyFee(uint256 fee_) external;\r\n\r\n    function getRoyaltyFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/IComplexDoNFT.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IComplexDoNFT is IBaseDoNFT, IRoyalty {\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address nftAddress_,\r\n        address market_,\r\n        address owner_,\r\n        address admin_,\r\n        address royaltyAdmin_\r\n    ) external;\r\n}\r\n\r\n// File: contracts/MiddleWare.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface IDoNFT is IComplexDoNFT, IERC721Metadata {}\r\n\r\ncontract MiddleWare {\r\n    struct DoNftMarketInfo {\r\n        uint256 originalNftId;\r\n        uint128 orderPricePerDay;\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint32 orderCreateTime;\r\n        uint32 orderMinDuration;\r\n        uint32 orderMaxEndTime;\r\n        uint32 orderFee; //   ratio = fee / 1e5 , orderFee = 1000 means 1%\r\n        uint8 orderType; // 0: Public, 1: Private, 2: Event_Private\r\n        bool orderIsValid;\r\n        address originalNftAddress;\r\n        address owner;\r\n        address user;\r\n        address orderPrivateRenter;\r\n        address orderPaymentToken;\r\n    }\r\n\r\n    struct DoNftMarketInfo2 {\r\n        uint256 originalNftId;\r\n        uint128 orderPricePerDay;\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        uint32 orderCreateTime;\r\n        uint32 orderMinDuration;\r\n        uint32 orderMaxEndTime;\r\n        uint32 orderFee; //   ratio = fee / 1e5 , orderFee = 1000 means 1%\r\n        uint8 orderType; // 0: Public, 1: Private, 2: Event_Private\r\n        bool orderIsValid;\r\n        bool isVNft;\r\n        address originalNftAddress;\r\n        address owner;\r\n        address user;\r\n        address orderPrivateRenter;\r\n        address orderPaymentToken;\r\n    }\r\n\r\n    function getNftOwnerAndUser(\r\n        address originalNftAddr,\r\n        uint256 orginalNftId,\r\n        address doNftAddr\r\n    ) public view returns (address owner, address user) {\r\n        IBaseDoNFT doNft = IBaseDoNFT(doNftAddr);\r\n        IERC721Metadata oNft = IERC721Metadata(originalNftAddr);\r\n\r\n        try oNft.ownerOf(orginalNftId) returns (address ownerAddr) {\r\n            owner = ownerAddr;\r\n        } catch {}\r\n\r\n        try doNft.getUser(orginalNftId) returns (address userAddr) {\r\n            user = userAddr;\r\n        } catch {}\r\n    }\r\n\r\n    function getNftOwner(address nftAddr, uint256 nftId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        IERC721Metadata nft = IERC721Metadata(nftAddr);\r\n        try nft.ownerOf(nftId) returns (address ownerAddr) {\r\n            owner = ownerAddr;\r\n        } catch {}\r\n    }\r\n\r\n    function getNftOwnerAndTokenURI(address nftAddr, uint256 nftId)\r\n        public\r\n        view\r\n        returns (address owner, string memory uri)\r\n    {\r\n        IERC721Metadata nft = IERC721Metadata(nftAddr);\r\n        try nft.ownerOf(nftId) returns (address ownerAddr) {\r\n            owner = ownerAddr;\r\n        } catch {}\r\n\r\n        try nft.tokenURI(nftId) returns (string memory tokenURI) {\r\n            uri = tokenURI;\r\n        } catch {}\r\n    }\r\n\r\n    function getDoNftMarketInfo(\r\n        address nftAddr,\r\n        uint256 nftId,\r\n        address marketAddr\r\n    ) public view returns (DoNftMarketInfo memory doNftInfo) {\r\n        IDoNFT doNft = IDoNFT(nftAddr);\r\n        IMarket market = IMarket(marketAddr);\r\n\r\n        doNftInfo.originalNftAddress = doNft.getOriginalNftAddress();\r\n        doNftInfo.orderFee =\r\n            uint32(market.getFee()) +\r\n            uint32(doNft.getRoyaltyFee());\r\n\r\n        if (doNft.exists(nftId)) {\r\n            (\r\n                uint256 oid,\r\n                ,\r\n                uint64[] memory starts,\r\n                uint64[] memory ends,\r\n\r\n            ) = doNft.getDoNftInfo(nftId);\r\n\r\n            doNftInfo.owner = doNft.ownerOf(nftId);\r\n            doNftInfo.originalNftId = oid;\r\n            doNftInfo.user = doNft.getUser(oid);\r\n            doNftInfo.startTime = starts[0];\r\n            doNftInfo.endTime = ends[0];\r\n            doNftInfo.orderIsValid = market.isLendOrderValid(nftAddr, nftId);\r\n            if (doNftInfo.orderIsValid) {\r\n                IMarket.Lending memory order = market.getLendOrder(\r\n                    nftAddr,\r\n                    nftId\r\n                );\r\n                IMarket.PaymentNormal memory pNormal = market.getPaymentNormal(\r\n                    nftAddr,\r\n                    nftId\r\n                );\r\n                if (\r\n                    order.orderType == IMarket.OrderType.Private ||\r\n                    order.orderType == IMarket.OrderType.Event_Private\r\n                ) {\r\n                    doNftInfo.orderPrivateRenter = market\r\n                        .getRenterOfPrivateLendOrder(nftAddr, nftId);\r\n                }\r\n                doNftInfo.orderType = uint8(order.orderType);\r\n                doNftInfo.orderMinDuration = uint32(order.minDuration);\r\n                doNftInfo.orderMaxEndTime = uint32(order.maxEndTime);\r\n                doNftInfo.orderCreateTime = uint32(order.createTime);\r\n                doNftInfo.orderPricePerDay = uint128(pNormal.pricePerDay);\r\n                doNftInfo.orderPaymentToken = pNormal.token;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDoNftMarketInfo2(\r\n        address nftAddr,\r\n        uint256 nftId,\r\n        address marketAddr\r\n    ) public view returns (DoNftMarketInfo2 memory doNftInfo) {\r\n        IDoNFT doNft = IDoNFT(nftAddr);\r\n        IMarket market = IMarket(marketAddr);\r\n\r\n        doNftInfo.originalNftAddress = doNft.getOriginalNftAddress();\r\n        doNftInfo.orderFee =\r\n            uint32(market.getFee()) +\r\n            uint32(doNft.getRoyaltyFee());\r\n\r\n        if (doNft.exists(nftId)) {\r\n            (\r\n                uint256 oid,\r\n                ,\r\n                uint64[] memory starts,\r\n                uint64[] memory ends,\r\n\r\n            ) = doNft.getDoNftInfo(nftId);\r\n\r\n            doNftInfo.owner = doNft.ownerOf(nftId);\r\n            doNftInfo.originalNftId = oid;\r\n            doNftInfo.user = doNft.getUser(oid);\r\n            doNftInfo.startTime = starts[0];\r\n            doNftInfo.endTime = ends[0];\r\n            doNftInfo.orderIsValid = market.isLendOrderValid(nftAddr, nftId);\r\n            doNftInfo.isVNft = doNft.isVNft(nftId);\r\n            if (doNftInfo.orderIsValid) {\r\n                IMarket.Lending memory order = market.getLendOrder(\r\n                    nftAddr,\r\n                    nftId\r\n                );\r\n                IMarket.PaymentNormal memory pNormal = market.getPaymentNormal(\r\n                    nftAddr,\r\n                    nftId\r\n                );\r\n                if (\r\n                    order.orderType == IMarket.OrderType.Private ||\r\n                    order.orderType == IMarket.OrderType.Event_Private\r\n                ) {\r\n                    doNftInfo.orderPrivateRenter = market\r\n                        .getRenterOfPrivateLendOrder(nftAddr, nftId);\r\n                }\r\n                doNftInfo.orderType = uint8(order.orderType);\r\n                doNftInfo.orderMinDuration = uint32(order.minDuration);\r\n                doNftInfo.orderMaxEndTime = uint32(order.maxEndTime);\r\n                doNftInfo.orderCreateTime = uint32(order.createTime);\r\n                doNftInfo.orderPricePerDay = uint128(pNormal.pricePerDay);\r\n                doNftInfo.orderPaymentToken = pNormal.token;\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchIsApprovedForAll(address owner, address[] calldata operators, address[] calldata erc721Array) external view returns (bool[] memory results) {\r\n        results = new bool[](erc721Array.length);\r\n        for(uint i = 0; i < erc721Array.length; i++) {\r\n            results[i] = IERC721(erc721Array[i]).isApprovedForAll(owner, operators[i]);\r\n        }\r\n    }\r\n\r\n    function batchGetDoNftIdByONftId(address[] calldata doNftAddressArray, uint256[] calldata oNftIdArray) external view returns (uint256[] memory doNftIdArray) {\r\n        require(doNftAddressArray.length == oNftIdArray.length, \"invalid input data\");\r\n        doNftIdArray = new uint256[](doNftAddressArray.length);\r\n        for(uint i = 0; i < doNftAddressArray.length; i++) {\r\n            doNftIdArray[i] = IDoNFT(doNftAddressArray[i]).getVNftId(oNftIdArray[i]);\r\n        }\r\n    }\r\n\r\n    function batchGetNftOwner(address nftAddress, uint256[] calldata nftIdArray) external view returns (address[] memory results) {\r\n        results = new address[](nftIdArray.length);\r\n        IERC721 nft = IERC721(nftAddress);\r\n        for(uint i = 0; i < nftIdArray.length; i++) {\r\n            try nft.ownerOf(nftIdArray[i]) returns (address ownerAddr) {\r\n                results[i] = ownerAddr;\r\n            } catch {}\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"doNftAddressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oNftIdArray\",\"type\":\"uint256[]\"}],\"name\":\"batchGetDoNftIdByONftId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"doNftIdArray\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIdArray\",\"type\":\"uint256[]\"}],\"name\":\"batchGetNftOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"results\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc721Array\",\"type\":\"address[]\"}],\"name\":\"batchIsApprovedForAll\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketAddr\",\"type\":\"address\"}],\"name\":\"getDoNftMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"originalNftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"orderPricePerDay\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"orderCreateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderMinDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderMaxEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderFee\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"orderIsValid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"originalNftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderPrivateRenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderPaymentToken\",\"type\":\"address\"}],\"internalType\":\"struct MiddleWare.DoNftMarketInfo\",\"name\":\"doNftInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketAddr\",\"type\":\"address\"}],\"name\":\"getDoNftMarketInfo2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"originalNftId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"orderPricePerDay\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"orderCreateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderMinDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderMaxEndTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"orderFee\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"orderIsValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVNft\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"originalNftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderPrivateRenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orderPaymentToken\",\"type\":\"address\"}],\"internalType\":\"struct MiddleWare.DoNftMarketInfo2\",\"name\":\"doNftInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getNftOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getNftOwnerAndTokenURI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalNftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orginalNftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doNftAddr\",\"type\":\"address\"}],\"name\":\"getNftOwnerAndUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MiddleWare", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c347a54a83e2b87b2141b58d78368370bac5f6968eb309fab14a147372cbefe"}]}