{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BootcampSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\ninterface IExternalStatic {\\n  function getSVG() external pure returns (string memory);\\n}\\n\\n\\ncontract BootcampSVG1 is IExternalStatic {\\n  function getSVG() external override pure returns (string memory) {\\n    return '<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 816 805.4\\\" style=\\\"enable-background:new 0 0 816 805.4;\\\" xml:space=\\\"preserve\\\">'\\n    '<style>.st0{fill-rule:evenodd;clip-rule:evenodd;fill:#6b1687}.st1{fill:#883797}.st2{fill:#2800ff}.st3{fill:#68626a}.st4{fill:#67616a}.st5{fill-rule:evenodd;clip-rule:evenodd;}.st17{fill:#666}.st18{font-family:Optima,Helvetica, sans-serif;}.st19{font-size:36px}.st20{letter-spacing:4}.st21{fill:#6c04b4}.st22{letter-spacing:3}.st23{font-size:21px}</style>'\\n    '<path class=\\\"st0\\\" d=\\\"m415 129.4l-1.2-2.1\\\"/><path class=\\\"st1\\\" d=\\\"M86.9,703.7h642.5v2.9H86.9V703.7z\\\"/>'\\n    '<path class=\\\"st1\\\" d=\\\"m86.9 698.2c-3.9-0.1-7 3-7.1 6.9s3 7 6.9 7.1 7-3 7.1-6.9v-0.1c0-3.8-3.1-6.9-6.9-7zm642.5 13.9c3.8-0.5 6.6-3.9 6.1-7.8-0.4-3.2-2.9-5.7-6.1-6.1-3.8-0.5-7.3 2.3-7.8 6.1s2.3 7.3 6.1 7.8c0.6 0.1 1.1 0.1 1.7 0z\\\"/>'\\n    '<path class=\\\"st2\\\" d=\\\"m544.1 778.6h2.8c0.7 0 0.9-0.2 0.9-0.9v-12.3l1.4 2.3 4.1 7.2c0.2 0.3 0.6 0.6 1 0.6h1.8c0.5 0 1-0.3 1.3-0.7 0.4-0.8 0.8-1.5 1.3-2.2 1.3-2.4 2.6-4.8 4-7.1 0-0.1 0-0.1 0.1-0.1v12.4c0 0.6 0.2 0.8 0.8 0.8h2.8c0.7 0 0.9-0.2 0.9-0.9v-19.8c0-0.6-0.3-0.9-0.8-0.9-1 0.1-2 0.1-3 0-0.6 0-1.1 0.3-1.4 0.8l-2.8 4.9-2.5 4.4-0.3 0.7c-0.3 0.6-0.6 1.2-1 1.8l-0.2-0.3c-0.3-0.7-0.7-1.3-1.1-1.9l-2.8-4.7c-0.8-1.7-1.8-3.3-2.8-4.9-0.1-0.5-0.6-0.8-1.1-0.7h-3.2c-0.4-0.1-0.7 0.2-0.8 0.6v0.2 20.1c-0.2 0.4 0 0.6 0.6 0.6zm-38.9 0h6c1.3 0.1 2.6-0.2 3.8-0.7 2.6-1 4.7-2.8 6-5.3 1.6-3.3 1.5-7.3-0.5-10.4-1.7-2.7-4.4-4.5-7.5-5-0.7-0.1-1.3-0.2-2-0.2h-5.8c-0.6 0-0.8 0.3-0.8 0.8v20.1c0 0.5 0.2 0.7 0.8 0.7zm3.5-16.8c0-0.2 0.1-0.3 0.3-0.3 0.5 0.1 1.1 0.1 1.6 0.1s1.1 0 1.6 0.1c0.8 0.1 1.6 0.3 2.2 0.8 2.2 1.2 3.4 3.6 3.1 6-0.1 1.7-0.9 3.3-2.3 4.4-1.1 1-2.5 1.5-4 1.5h-2.2c-0.2 0-0.3 0-0.3-0.2v-12.4zm-70 16.6l1.7-3.8c0.1-0.1 0.1-0.2 0.3-0.2h9.4l0.5 0.2 1.6 3.8c0.1 0.1 0.1 0.2 0.3 0.2h4.6c-0.1-0.3-0.2-0.5-0.3-0.8l-2.3-5.3-2.3-5.2-2.3-5.3-1.9-4.4c-0.2-0.5-0.6-0.8-1.1-0.8h-2.5c-0.6 0-1.2 0.3-1.4 0.9l-2.2 4.8-2.2 5.2c-0.7 1.8-1.6 3.4-2.3 5.3l-2.1 4.7c-0.1 0.3-0.2 0.5-0.3 0.8h4.6c0.2 0.1 0.2 0 0.2-0.1zm6.8-15.4l3.1 6.9h-6.1l3-6.9zm36.8 15.4c0.6-1.2 1.1-2.4 1.6-3.7 0.1-0.2 0.3-0.3 0.5-0.3h9.4l0.5 0.2 1.6 3.8c0 0.1 0.1 0.2 0.2 0.2h4.7c-0.1-0.3-0.2-0.5-0.3-0.8l-2.3-5.2-2.3-5.3-2.2-4.8-2.2-4.9c-0.1-0.4-0.5-0.7-1-0.7-0.4 0.1-0.9 0.1-1.3 0.1s-0.9 0-1.3-0.1c-0.6 0-1.1 0.3-1.3 0.9l-2.2 4.8-2.3 5.2-2.3 5.4c-0.7 1.5-1.4 3-1.9 4.5-0.2 0.3-0.4 0.6-0.5 0.9h4.6c0.2 0 0.2-0.1 0.3-0.2zm6.7-15.4l3.1 6.9h-6.1l3-6.9zm37.9 15.6h11.1c0.6 0 0.8-0.2 0.8-0.8v-2.8c-0.1-0.7-0.2-0.9-0.9-0.9h-7.1c-0.3 0-0.3-0.1-0.3-0.3v-3.4c0-0.2 0-0.3 0.2-0.3h5.8c0.6 0 0.8-0.2 0.8-0.8v-2.9c0-0.6-0.2-0.8-0.8-0.8h-5.7c-0.3 0-0.3-0.1-0.3-0.3v-3.4c0-0.2 0-0.3 0.3-0.3h7.1c0.7 0 0.9-0.2 0.9-0.8v-2.9c0-0.5-0.3-0.8-0.9-0.8h-11c-0.6 0-0.8 0.3-0.8 0.9v19.9c0 0.5 0.2 0.7 0.8 0.7zm-62.5-0.4c1.1 0.3 2.2 0.5 3.3 0.5s2.3-0.2 3.3-0.7c1.7-0.7 3.2-1.7 4.5-3.1 0.2-0.3 0.2-0.6 0-0.9l-2.1-2.2c-0.2-0.2-0.3-0.3-0.5-0.3s-0.4 0.1-0.6 0.3c-0.4 0.5-0.8 1-1.4 1.3-1 0.7-2.2 1.1-3.5 1.1-1.5 0-2.9-0.5-4-1.5-2.7-2.4-2.9-6.5-0.5-9.2 1.1-1.2 2.7-2 4.4-2.1 1.1 0 2.1 0.3 3.1 0.8 0.7 0.5 1.3 1 1.9 1.6 0.2 0.2 0.3 0.3 0.5 0.3s0.3-0.1 0.5-0.3l2.1-2.2c0.3-0.2 0.2-0.6 0-0.9l-0.6-0.6c-1.5-1.5-3.4-2.5-5.5-3-0.6-0.1-1.2-0.2-1.8-0.2-3.9 0-7.6 2.2-9.5 5.6-1.7 3.2-1.7 7.2 0 10.4 1.4 2.5 3.7 4.4 6.4 5.3zm108-15.5c1.1 1.8 2.4 3.6 3.6 5.3 0.8 1.4 1.7 2.8 2.6 4.1 0.2 0.4 0.3 0.8 0.3 1.2v4.6c0 0.6 0.2 0.8 0.8 0.8h2.8c0.7 0 0.9-0.2 0.9-0.8v-4.6c0-0.4 0.1-0.8 0.3-1.2l3-4.6 3.6-5.4 3.1-4.6c0.1-0.1 0.2-0.3 0.2-0.5h-5l-0.3 0.1c0 0.1 0 0.2-0.1 0.3l-3.6 5.4-3.1 4.6-0.2 0.5c-0.2 0-0.2-0.3-0.3-0.5l-3.7-5.5c-0.9-1.5-1.9-3-3-4.5-0.1-0.1-0.1-0.1-0.1-0.2-0.1-0.2-0.2-0.2-0.5-0.2h-4.9l0.2 0.5c1.1 1.8 2.2 3.5 3.4 5.2z\\\"/>';\\n  }\\n}\\n\\ncontract BootcampSVG2 is IExternalStatic {\\n  function getSVG() external override pure returns (string memory) {\\n    return '<path class=\\\"st3\\\" d=\\\"m258.6 780.5c6.2 0 11.3-5.1 11.3-11.3v-0.2c-0.1-6.2-5.3-11.2-11.5-11.1s-11.2 5.3-11.1 11.5 5.1 11.1 11.3 11.1zm0-20.7h0.2c5 0.1 9.1 4.3 9 9.3-0.1 5.1-4.2 9.2-9.3 9.1s-9.2-4.2-9.1-9.3c0.1-5 4.2-9.1 9.2-9.1z\\\"/>'\\n    '<path class=\\\"st4\\\" d=\\\"m322.2 779.2h12.5c0.5 0 0.8-0.3 0.9-0.8 0.3-0.5 0.2-1.1-0.3-1.4-0.2-0.1-0.5-0.2-0.8-0.1h-11.1c-0.2 0-0.3 0-0.3-0.2v-7.7c0-0.2 0.1-0.3 0.3-0.3h7.9c0.6 0 1-0.2 1.1-0.7 0.2-0.8-0.2-1.5-1-1.5h-7.9c-0.3 0-0.5-0.1-0.5-0.5l0.1-7.2c0-0.5-0.1-0.5 0.3-0.5h11.2c0.5 0 0.9-0.3 1-0.8 0.2-0.6-0.2-1.3-0.9-1.5h-0.4-12.4c-0.7-0.1-1.2 0.4-1.3 1.1v0.3 20.4c0.3 0.9 0.7 1.4 1.6 1.4z\\\"/>'\\n    '<path class=\\\"st3\\\" d=\\\"m413.9 778.2c1.2 0.7 2.6 1 4 1 1.6 0 3.2-0.5 4.6-1.4 0.5-0.3 1.1-0.7 1.5-1.2 2.4-2.3 2.6-6.1 0.3-8.5-0.2-0.3-0.5-0.5-0.8-0.7-1.2-1-2.6-1.8-4.1-2.1-1-0.1-2.1-0.3-3.1-0.6-1.1-0.3-2.2-0.9-3-1.7-0.5-0.5-0.7-1.2-0.5-1.8 0.2-0.9 0.8-1.7 1.6-2.1 1.1-0.6 2.3-0.9 3.6-1 1.2 0 2.3 0.3 3.4 0.8 1 0.5 1.7 1.5 1.9 2.6 0 0.4 0.2 0.7 0.5 0.9 0.2 0.1 0.4 0.2 0.6 0.2s0.3 0 0.5-0.1c0.3-0.2 0.6-0.6 0.6-1s0-0.7-0.1-1.1c-0.6-1.6-1.8-2.9-3.3-3.6-1.3-0.6-2.7-1-4.2-1-1.6 0.1-3.2 0.5-4.6 1.4-0.5 0.3-1.1 0.7-1.5 1.2-1.7 1.8-1.6 4.7 0.2 6.4 0.1 0.1 0.3 0.2 0.4 0.3 1.2 0.9 2.5 1.5 4 1.8 1.1 0.1 2.1 0.3 3.1 0.7 1 0.2 1.9 0.7 2.6 1.4 0.8 0.7 1.4 1.6 1.6 2.6 0.3 1.4-0.3 2.8-1.4 3.6-1.2 1-2.7 1.6-4.3 1.6-0.9 0-1.8-0.2-2.7-0.5-2-0.5-3.4-2.4-3.4-4.5 0-0.6-0.5-1-1-1s-1 0.5-1 1c0 0.6 0.1 1.1 0.2 1.7 0.5 2.1 1.9 3.8 3.8 4.7zm-45.7 0c1.2 0.7 2.6 1 4 1 1.6 0 3.1-0.5 4.5-1.3 0.6-0.3 1.2-0.7 1.6-1.3 2.5-2.2 2.7-6 0.5-8.5-0.2-0.3-0.5-0.5-0.8-0.7-1.2-1-2.6-1.8-4.2-2.1l-2.4-0.3c-1.2-0.3-2.3-0.8-3.2-1.6-0.6-0.4-0.9-1-0.9-1.7 0.1-0.9 0.5-1.8 1.3-2.3 0.9-0.6 2.1-1 3.2-1 0.4-0.1 0.7-0.1 1.1-0.1 1.2 0 2.3 0.3 3.3 0.9 0.9 0.5 1.6 1.4 1.7 2.5 0 0.4 0.2 0.7 0.5 0.9 0.2 0.1 0.4 0.2 0.6 0.2s0.3 0 0.5-0.1c0.3-0.2 0.6-0.6 0.6-1 0-0.5 0-1-0.2-1.4-0.5-1.5-1.7-2.7-3.2-3.3-1.4-0.7-2.9-1-4.5-1-1.5 0-3 0.5-4.2 1.4-0.6 0.3-1.1 0.7-1.5 1.2-1.1 1.1-1.5 2.7-1.1 4.2 0.3 1 0.9 1.9 1.7 2.5 1.1 1 2.5 1.6 4 1.8 1.1 0.1 2.1 0.3 3.1 0.7 0.9 0.3 1.8 0.8 2.6 1.4 0.9 0.8 1.5 1.9 1.6 3.1 0 1.4-0.7 2.6-1.8 3.4-1.1 0.9-2.5 1.3-3.9 1.3-0.6 0-1.3-0.1-1.9-0.2-1.5-0.2-2.8-1.1-3.6-2.4-0.4-0.7-0.7-1.5-0.7-2.3-0.1-0.5-0.5-0.9-1-0.9-0.5 0.1-0.9 0.5-0.9 1 0 0.6 0 1.2 0.2 1.7 0.3 1.9 1.6 3.6 3.4 4.3zm-65.7 0c2.7 1.4 5.9 1.3 8.5-0.2 0.6-0.3 1.2-0.8 1.7-1.3 2.5-2.3 2.6-6.3 0.3-8.8-0.2-0.2-0.4-0.4-0.6-0.5-1.2-0.9-2.7-1.6-4.2-1.9-1-0.1-2.1-0.3-3.1-0.6-1.1-0.3-2.2-0.9-3-1.7-0.5-0.5-0.7-1.2-0.5-1.8 0.2-0.9 0.8-1.7 1.6-2.1 1.1-0.6 2.3-0.9 3.6-1 1.2 0 2.3 0.3 3.4 0.8 1 0.5 1.8 1.5 2 2.6 0 0.2 0.1 0.4 0.2 0.6 0.1 0.3 0.4 0.6 0.8 0.6 0.7 0 1-0.5 1.1-1.1 0-0.4-0.1-0.7-0.2-1.1-0.5-1.6-1.7-2.9-3.2-3.6-1.4-0.7-2.9-1.1-4.4-1-1.6 0-3.1 0.5-4.5 1.3-0.6 0.3-1.1 0.8-1.5 1.3-1 1.1-1.5 2.5-1.3 4 0.2 1.1 0.9 2 1.8 2.6 1.1 1 2.5 1.6 4 1.9 1.1 0.1 2.1 0.3 3.1 0.6 0.9 0.4 1.8 0.9 2.6 1.5 0.9 0.7 1.5 1.8 1.6 3 0.1 1.3-0.5 2.5-1.5 3.3-1.2 0.9-2.7 1.5-4.3 1.5-0.9 0-1.8-0.2-2.6-0.5-1.4-0.4-2.5-1.4-3.1-2.8-0.2-0.5-0.3-1.1-0.3-1.7-0.1-0.5-0.5-1-1.1-0.9-0.5 0.1-0.9 0.5-0.9 1 0 0.6 0.1 1.1 0.2 1.7 0.7 1.9 2 3.4 3.8 4.3zm-74.3 0c1.3 0.6 2.7 0.9 4.1 1 2.1 0.1 4.2-0.4 6-1.4 1-0.7 2-1.5 2.9-2.3 0.2-0.2 0.3-0.4 0.3-0.7 0.1-0.4-0.1-0.9-0.5-1.1-0.1-0.1-0.3-0.1-0.4-0.1-0.2 0-0.5 0.1-0.7 0.2s-0.4 0.3-0.6 0.5c-1.7 1.7-3.9 2.6-6.3 2.6-0.6 0-1.3-0.1-1.9-0.2-2.6-0.4-4.8-2-6.1-4.2-0.9-1.4-1.4-3-1.4-4.6 0-2 0.5-3.9 1.6-5.6 1.8-2.5 4.6-3.9 7.6-3.9 0.6 0 1.2 0.1 1.8 0.2 1.3 0.3 2.5 0.9 3.6 1.7l1.4 1c0.2 0.2 0.4 0.3 0.7 0.3s0.5-0.1 0.7-0.3c0.4-0.4 0.5-1 0.1-1.4l-0.3-0.3c-0.9-1-2.1-1.8-3.3-2.4-1.4-0.7-2.9-1-4.4-1h-0.7c-1.7 0-3.4 0.4-4.9 1.3-2.2 1.2-3.9 3.1-5 5.3-0.7 1.6-1.1 3.4-1.1 5.2 0.1 1.9 0.6 3.7 1.5 5.4 1.3 2.1 3.1 3.8 5.3 4.8z\\\"/>'\\n    '<path class=\\\"st4\\\" d=\\\"m342.5 779.1h0.2c0.5-0.1 1-0.5 0.9-1.1v-13.4c0-0.9 0.1-1.7 0.5-2.5 0.9-2.3 3.2-3.7 5.6-3.7h0.8c2.7 0.4 4.9 2.6 5.3 5.3v14.3c0 0.3 0.1 0.6 0.3 0.8 0.2 0.3 0.6 0.4 0.9 0.4h0.3c0.5-0.1 0.9-0.6 0.8-1.1v-13.5c0-0.8-0.1-1.6-0.3-2.3-0.6-2.1-2.1-3.9-4-5-1.2-0.7-2.6-1-4-1-0.4 0-0.9 0-1.3 0.1-1.2 0.2-2.4 0.7-3.4 1.5-0.4 0.3-0.8 0.6-1.1 1-1.6 1.6-2.4 3.8-2.3 6v13.5c-0.2 0.3 0.3 0.7 0.8 0.7zm-65.4 0c0.1 0 0.3 0 0.4-0.1 0.5-0.1 0.9-0.6 0.8-1.1v-13.3c0-0.8 0.1-1.6 0.3-2.3 0.9-2.4 3.1-4 5.7-4 0.5 0 1 0.1 1.5 0.2 2.7 0.8 4.5 3.2 4.5 6v13.5c-0.1 0.4 0.2 0.8 0.6 0.9 0.2 0.1 0.5 0.2 0.7 0.2s0.3 0 0.5-0.1c0.3-0.2 0.6-0.6 0.6-1v-13.8c0-0.7-0.1-1.4-0.3-2.1-0.6-2.2-2.1-4-4.1-5-1.1-0.7-2.3-1.1-3.6-1.1-0.5 0-1 0-1.5 0.1-1.2 0.2-2.4 0.6-3.4 1.4-0.4 0.3-0.8 0.6-1.1 1-1.6 1.6-2.4 3.8-2.4 6v13.4c-0.2 0.4-0.1 0.9 0.3 1.1 0.1 0.1 0.3 0.1 0.5 0.1z\\\"/>'\\n    '<path class=\\\"st3\\\" d=\\\"m388.2 762.7l4 5.3 1.5 1.9c0.1 0.2 0.2 0.4 0.2 0.6v7.7c0.1 0.6 0.3 0.8 0.8 0.9h0.3c0.3 0 0.6-0.1 0.8-0.4s0.2-0.6 0.2-0.9v-7.5c0-0.2 0-0.3 0.1-0.5 0.7-0.8 1.3-1.6 1.9-2.4 1.4-1.8 2.8-3.4 4.1-5.3l1.7-2.2 1.7-2.2c0.3-0.5 0.2-1.2-0.2-1.6-0.2-0.1-0.4-0.2-0.6-0.2-0.3 0-0.7 0.2-0.9 0.4l-0.7 0.9-4.1 5.3-2.4 3-1.7 2.3-0.5-0.6c-1.7-2.2-3.4-4.5-5.2-6.6l-3.2-4.2c-0.2-0.3-0.5-0.4-0.8-0.4h-0.3c-0.6 0.2-0.9 0.8-0.7 1.4 0 0.2 0.1 0.3 0.2 0.4l3.8 4.9z\\\"/>';\\n  }\\n}\\n\\ncontract BootcampSVG3 is IExternalStatic {\\n  function getSVG() external override pure returns (string memory) {\\n    return '<linearGradient id=\\\"a\\\" x1=\\\"-2015\\\" x2=\\\"-2015\\\" y1=\\\"-84.463\\\" y2=\\\"-70.963\\\" gradientTransform=\\\"matrix(13.55 0 0 13.55 27662 1276.1)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#be03ed\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#7935ad\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path class=\\\"st5\\\" fill= \\\"url(#a)\\\" d=\\\"m413.8 130.1l-108.3 183.7 108.3-45.7v-138z\\\"/>'\\n    '<linearGradient id=\\\"d\\\" x1=\\\"-2012.8\\\" x2=\\\"-2022.9\\\" y1=\\\"-85.293\\\" y2=\\\"-75.193\\\" gradientTransform=\\\"matrix(14.37 0 0 14.37 29465 1375.5)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#9902bf\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#e971ff\\\" offset=\\\".1\\\"/><stop stop-color=\\\"#662d91\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m522.8 313.8l-108.3-183.7 0.2 137.9 108.1 45.8z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#d)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"i\\\" x1=\\\"-1956.5\\\" x2=\\\"-1956.5\\\" y1=\\\"-58.447\\\" y2=\\\"-48.147\\\" gradientTransform=\\\"matrix(10.34 0 0 10.34 20590 876.34)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#9902bf\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#662d91\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m413.8 268.8l-108.3 45.6 108.3 61.3v-106.9z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#i)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"g\\\" x1=\\\"-1945.9\\\" x2=\\\"-1945.9\\\" y1=\\\"-58.447\\\" y2=\\\"-48.147\\\" gradientTransform=\\\"matrix(10.34 0 0 10.34 20590 876.34)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#770195\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m414.7 268.8l-0.2 106.9 108.2-61.3-108-45.6z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#g)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"b\\\" x1=\\\"-1988.7\\\" x2=\\\"-1988.7\\\" y1=\\\"-64.368\\\" y2=\\\"-51.867\\\" gradientTransform=\\\"matrix(12.44 0 0 12.44 25210 1133.3)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#770195\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient>';\\n  }\\n}\\n\\ncontract BootcampSVG4 is IExternalStatic {\\n  function getSVG() external override pure returns (string memory) {\\n    return '<path d=\\\"m414.5 396.5v93.9l110.3-154.7-110.3 60.8z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#b)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"c\\\" x1=\\\"-1997.7\\\" x2=\\\"-1997.7\\\" y1=\\\"-64.368\\\" y2=\\\"-51.867\\\" gradientTransform=\\\"matrix(12.44 0 0 12.44 25210 1133.3)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#9902bf\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#662d91\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m413.8 396.5l-110.6-60.8 110.6 154.7v-93.9z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#c)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"f\\\" x1=\\\"-1833.1\\\" x2=\\\"-1833.1\\\" y1=\\\"-25.875\\\" y2=\\\"-18.975\\\" gradientTransform=\\\"matrix(6.93 0 0 6.93 13063 442.98)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#770195\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m414.7 269.2l-0.8-1.9-109.1 46 0.8 1.9 109.1-46z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#f)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<linearGradient id=\\\"e\\\" x1=\\\"-1817.3\\\" x2=\\\"-1817.3\\\" y1=\\\"-25.875\\\" y2=\\\"-18.975\\\" gradientTransform=\\\"matrix(6.93 0 0 6.93 13062 442.58)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#770195\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient><path d=\\\"m523.5 313.2l-108.8-46-0.8 2 108.8 45.9 0.8-1.9z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#e)\\\" fill-rule=\\\"evenodd\\\"/><linearGradient id=\\\"l\\\" x1=\\\"-2001.4\\\" x2=\\\"-2010.7\\\" y1=\\\"-78.57\\\" y2=\\\"-69.17\\\" gradientTransform=\\\"matrix(13.26 0 0 13.26 27013 1233.4)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#9902bf\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#c15dd4\\\" offset=\\\".4\\\"/><stop stop-color=\\\"#662d91\\\" offset=\\\"1\\\"/></linearGradient>';\\n  }\\n}\\n\\ncontract BootcampSVG5 is IExternalStatic {\\n  function getSVG() external pure returns (string memory) {\\n    return '<path d=\\\"M413.2,129.6h2V376h-2V129.6z\\\" fill=\\\"url(#l)\\\"/><linearGradient id=\\\"k\\\" x1=\\\"-1933.6\\\" x2=\\\"-1933.6\\\" y1=\\\"-40.994\\\" y2=\\\"-31.293\\\" gradientTransform=\\\"matrix(9.71 0 0 9.71 19189 789.76)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#5e0076\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient><path d=\\\"m413.2 396.7h2v94.2h-2v-94.2z\\\" fill=\\\"url(#k)\\\"/><linearGradient id=\\\"h\\\" x1=\\\"-2038.3\\\" x2=\\\"-2038.4\\\" y1=\\\"-90.397\\\" y2=\\\"-74.592\\\" gradientTransform=\\\"matrix(15.81 0 0 15.81 32641 1556.9)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#9902bf\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#662d91\\\" offset=\\\"1\\\"/></linearGradient><path d=\\\"m524.6 314.6l-110.4-187.4-109.9 186.5-0.6 1 110.5 62.4 110.4-62.5zm-110.4-183.2l107.5 182.5-107.5 60.8-107.5-60.8 107.5-182.5z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#h)\\\" fill-rule=\\\"evenodd\\\"/><linearGradient id=\\\"j\\\" x1=\\\"-1997.2\\\" x2=\\\"-1997.2\\\" y1=\\\"-65.657\\\" y2=\\\"-52.958\\\" gradientTransform=\\\"matrix(12.66 0 0 12.66 25698 1163.4)\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#770195\\\" offset=\\\"0\\\"/><stop stop-color=\\\"#512374\\\" offset=\\\"1\\\"/></linearGradient>'\\n    '<path d=\\\"m414.2 492.8l114.1-160.2-114.1 63-114.5-63 113.6 159 0.9 1.2zm0-94.9l107-59-107 150.1-107.5-150.1 107.5 59z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"url(#j)\\\" fill-rule=\\\"evenodd\\\"/>'\\n    '<text class=\\\"st17 st18 st19 st20\\\" transform=\\\"translate(168 75)\\\">CERTIFICATE OF PROFICIENCY</text><text class=\\\"st21 st18 st19 st20\\\" transform=\\\"translate(130 569)\\\">ETHEREUM DEVELOPER PROGRAM</text><text class=\\\"st21 st18 st19 st22\\\" transform=\\\"translate(188 613)\\\">ONLINE BOOTCAMP 2021</text><text class=\\\"st18 st23\\\" transform=\\\"translate(335 655)\\\">ISSUED JAN 2022</text></svg>';\\n  }\\n}\\n\\ncontract BootcampNFTCert is ERC721URIStorage {\\n  uint256 public tokenCounter;\\n  \\n  event CreatedBootcampNFT(uint indexed tokenId);\\n  address public owner;\\n  // IExternalStatic public baseSVG1;\\n  // IExternalStatic public baseSVG2;\\n  BootcampSVG1 public BootcampSVG1_ref;\\n  BootcampSVG2 public BootcampSVG2_ref;\\n  BootcampSVG3 public BootcampSVG3_ref;\\n  BootcampSVG4 public BootcampSVG4_ref;\\n  BootcampSVG5 public BootcampSVG5_ref;\\n\\n  constructor(BootcampSVG1 _addrBootcampSVG1, BootcampSVG2 _addrBootcampSVG2, BootcampSVG3 _addrBootcampSVG3, BootcampSVG4 _addrBootcampSVG4, BootcampSVG5 _addrBootcampSVG5) ERC721 (\\\"BOOTCAMP2021\\\", \\\"EDU-DAO0x0\\\") public {\\n    // studentList = _studentList;\\n    tokenCounter = 0;\\n    owner = msg.sender;\\n    // baseSVG1 = IExternalStatic(new BootcampSVG1());\\n    // baseSVG2 = IExternalStatic(new BootcampSVG2());\\n    BootcampSVG1_ref = _addrBootcampSVG1;\\n    BootcampSVG2_ref = _addrBootcampSVG2;\\n    BootcampSVG3_ref = _addrBootcampSVG3;\\n    BootcampSVG4_ref = _addrBootcampSVG4;\\n    BootcampSVG5_ref = _addrBootcampSVG5;\\n\\n\\n\\n  }\\n\\n  modifier onlyOwner {\\n    require(msg.sender == owner, \\\"Caller is not contract owner\\\");\\n    _;\\n }\\n\\n  function _baseURI() internal override view virtual returns (string memory) {\\n\\n    string memory baseURL = \\\"data:image/svg+xml;base64,\\\";  \\n    string memory svgBase64Encoded = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            BootcampSVG1_ref.getSVG(),\\n            BootcampSVG2_ref.getSVG(),\\n            BootcampSVG3_ref.getSVG(),\\n            BootcampSVG4_ref.getSVG(),\\n            BootcampSVG5_ref.getSVG())\\n            \\n        )\\n      )\\n    );\\n    string memory imageURI = string(abi.encodePacked(baseURL,svgBase64Encoded));\\n\\n  return string(\\n    abi.encodePacked(\\n      \\\"data:application/json;base64,\\\",\\n      Base64.encode(\\n        bytes(\\n          abi.encodePacked(\\n              '{\\\"name\\\":\\\"',\\n              \\\"2021 ConsenSys Academy Bootcamp Certificate\\\",\\n              '\\\", \\\"description\\\":\\\"On-Chain Bootcamp Certification\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',imageURI,'\\\"}'\\n          )\\n        )\\n      )\\n    )\\n  );\\n\\n}\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n    string memory baseURI = _baseURI();\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI)) : \\\"\\\";\\n  }\\n\\n  function create(address _student) public onlyOwner {\\n    \\n    _safeMint(_student, tokenCounter);\\n    tokenCounter = tokenCounter + 1;\\n\\n    emit CreatedBootcampNFT(tokenCounter);\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n) public virtual override onlyOwner {\\n\\n    _transfer(from, to, tokenId);\\n}\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n) public virtual override onlyOwner {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n}\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override onlyOwner {\\n\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n}\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BootcampSVG1\",\"name\":\"_addrBootcampSVG1\",\"type\":\"address\"},{\"internalType\":\"contract BootcampSVG2\",\"name\":\"_addrBootcampSVG2\",\"type\":\"address\"},{\"internalType\":\"contract BootcampSVG3\",\"name\":\"_addrBootcampSVG3\",\"type\":\"address\"},{\"internalType\":\"contract BootcampSVG4\",\"name\":\"_addrBootcampSVG4\",\"type\":\"address\"},{\"internalType\":\"contract BootcampSVG5\",\"name\":\"_addrBootcampSVG5\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CreatedBootcampNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BootcampSVG1_ref\",\"outputs\":[{\"internalType\":\"contract BootcampSVG1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BootcampSVG2_ref\",\"outputs\":[{\"internalType\":\"contract BootcampSVG2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BootcampSVG3_ref\",\"outputs\":[{\"internalType\":\"contract BootcampSVG3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BootcampSVG4_ref\",\"outputs\":[{\"internalType\":\"contract BootcampSVG4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BootcampSVG5_ref\",\"outputs\":[{\"internalType\":\"contract BootcampSVG5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_student\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BootcampNFTCert", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c9a1b2ced855d54a6b0e5c163ba63df6927c05c70000000000000000000000008d9c018b59f24f893cf24b458e10945c2c5eb3be000000000000000000000000401534fb9e5e6de220e092da75e56cf0660dfd1b0000000000000000000000002df2b9eb2d1dc673b5748a35bfb107d97669a9d0000000000000000000000000c727b6c4d96549aed7672c85eebdcea8c2eb5656", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}