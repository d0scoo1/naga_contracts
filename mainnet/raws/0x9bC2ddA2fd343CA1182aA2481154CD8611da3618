{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/library/BridgeScanRange.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct AbnormalRangeInfo {\r\n    bool startInit;\r\n    bool endInit;\r\n    uint256 startIndex;\r\n    uint256 endIndex;\r\n    bool continuousStart;\r\n    bool continuousEnd;\r\n    bool middle;\r\n}\r\n\r\nlibrary BridgeScanRange {\r\n    function getBlockScanRange(\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) internal pure returns (uint64[] memory _r) {\r\n        if (r.length == 0) {\r\n            _r = new uint64[](2);\r\n            (, _r) = _insertRange(0, _r, v1, v2);\r\n        } else {\r\n            uint256 total;\r\n            uint64[2][] memory ranges = _extractBlockScanRanges(r);\r\n            bool normality = _determineRangeNormality(ranges, v1, v2);\r\n            if (normality) {\r\n                total = _getNewRangeCount(r.length, ranges, v1, v2);\r\n                if (total > 0) {\r\n                    _r = new uint64[](total);\r\n                    _r = _createNewRanges(ranges, v1, v2, _r);\r\n                }\r\n            } else {\r\n                AbnormalRangeInfo memory info;\r\n                (total, info) = _getAbnormalNewRangeCount(\r\n                    r.length,\r\n                    ranges,\r\n                    v1,\r\n                    v2\r\n                );\r\n                if (total > 0) {\r\n                    _r = new uint64[](total);\r\n                    _r = _createAbnormalNewRanges(ranges, v1, v2, _r, info);\r\n                }\r\n            }\r\n\r\n            if (total == 0) {\r\n                _r = new uint64[](r.length);\r\n                _r = r;\r\n            }\r\n        }\r\n    }\r\n\r\n    // extract [x1, x2, x3, x4] into [[x1, x2], [x3, x4]]\r\n    function _extractBlockScanRanges(uint64[] memory r)\r\n        private\r\n        pure\r\n        returns (uint64[2][] memory arr)\r\n    {\r\n        uint256 maxRange = r.length / 2;\r\n        arr = new uint64[2][](maxRange);\r\n\r\n        uint64 k = 0;\r\n        for (uint64 i = 0; i < maxRange; i++) {\r\n            (bool e1, uint64 v1) = _getElement(i + k, r);\r\n            (bool e2, uint64 v2) = _getElement(i + k + 1, r);\r\n\r\n            uint64[2] memory tmp;\r\n            if (e1 && e2) tmp = [v1, v2];\r\n            arr[k] = tmp;\r\n            k++;\r\n        }\r\n    }\r\n\r\n    function _getElement(uint64 i, uint64[] memory arr)\r\n        private\r\n        pure\r\n        returns (bool exist, uint64 ele)\r\n    {\r\n        if (exist = (i >= 0 && i < arr.length)) {\r\n            ele = arr[i];\r\n        }\r\n    }\r\n\r\n    function _getElement(uint64 i, uint64[2][] memory arr)\r\n        private\r\n        pure\r\n        returns (bool exist, uint64[2] memory ranges)\r\n    {\r\n        if (exist = (i >= 0 && i < arr.length)) {\r\n            ranges = arr[i];\r\n        }\r\n    }\r\n\r\n    // determine range overlapping\r\n    function _determineRangeNormality(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (bool normality) {\r\n        bool ended;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2)\r\n                (ended, normality) = _checkRangeNormality(\r\n                    i,\r\n                    v1,\r\n                    v2,\r\n                    ele1,\r\n                    ele2\r\n                );\r\n            else if (e1)\r\n                (ended, normality) = _checkRangeNormality(i, v1, v2, ele1);\r\n\r\n            if (ended) return normality;\r\n        }\r\n    }\r\n\r\n    function _checkRangeNormality(\r\n        uint64 index,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    ) private pure returns (bool, bool) {\r\n        if ((index == 0 && v2 <= ele1[0]) || v1 >= ele1[1]) {\r\n            return (true, true);\r\n        }\r\n        return (true, false);\r\n    }\r\n\r\n    function _checkRangeNormality(\r\n        uint64 index,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    ) private pure returns (bool, bool) {\r\n        if ((index == 0 && v2 <= ele1[0]) || (v1 >= ele1[1] && v2 <= ele2[0])) {\r\n            return (true, true);\r\n        }\r\n        return (false, false);\r\n    }\r\n\r\n    /** Range Normal */\r\n\r\n    // Get total number of elements\r\n    function _getNewRangeCount(\r\n        uint256 curCount,\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256 total) {\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2) total = _calculateRange(curCount, v1, v2, ele1, ele2);\r\n            else if (e1) total = _calculateRange(curCount, v1, v2, ele1);\r\n\r\n            if (total > 0) return total;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function _calculateRange(\r\n        uint256 curCount,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    ) private pure returns (uint256 total) {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        } else if (v1 >= ele1[1]) {\r\n            if (_checkStart(ele1[1], v1)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calculateRange(\r\n        uint256 curCount,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    ) private pure returns (uint256 total) {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        } else if (v1 >= ele1[1] && v2 <= ele2[0]) {\r\n            if (_checkStart(ele1[1], v1) && _checkEnd(ele2[0], v2)) {\r\n                total = curCount - 2;\r\n            } else if (_checkStart(ele1[1], v1) || _checkEnd(ele2[0], v2)) {\r\n                total = curCount;\r\n            } else {\r\n                total = curCount + 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create new blockScanRanges array\r\n    function _createNewRanges(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[] memory r\r\n    ) private pure returns (uint64[] memory) {\r\n        bool done = false;\r\n        bool skip = false;\r\n        uint256 total = 0;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (done) {\r\n                if (!skip && e1)\r\n                    (total, r) = _insertRange(total, r, ele1[0], ele1[1]);\r\n                else skip = false;\r\n            } else {\r\n                if (e1 && e2) {\r\n                    (done, total, r) = _insertRange(\r\n                        total,\r\n                        r,\r\n                        v1,\r\n                        v2,\r\n                        ele1,\r\n                        ele2\r\n                    );\r\n                    if (done) skip = true;\r\n                } else if (e1)\r\n                    (done, total, r) = _insertRange(total, r, v1, v2, ele1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v1;\r\n        r[i + 1] = v2;\r\n        i += 2;\r\n        return (i, r);\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            bool done,\r\n            uint256,\r\n            uint64[] memory\r\n        )\r\n    {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                (i, r) = _insertRange(i, r, v1, ele1[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                done = true;\r\n            }\r\n        } else if (v1 >= ele1[1]) {\r\n            if (_checkStart(ele1[1], v1)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], v2);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                done = true;\r\n            }\r\n        }\r\n        return (done, i, r);\r\n    }\r\n\r\n    function _insertRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            bool done,\r\n            uint256,\r\n            uint64[] memory\r\n        )\r\n    {\r\n        if (v2 <= ele1[0]) {\r\n            if (_checkEnd(ele1[0], v2)) {\r\n                (i, r) = _insertRange(i, r, v1, ele1[1]);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            }\r\n        } else if (v1 >= ele1[1] && v2 <= ele2[0]) {\r\n            if (_checkStart(ele1[1], v1) && _checkEnd(ele2[0], v2)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele2[1]);\r\n                done = true;\r\n            } else if (_checkStart(ele1[1], v1)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], v2);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            } else if (_checkEnd(ele2[0], v2)) {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, ele2[1]);\r\n                done = true;\r\n            } else {\r\n                (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n                (i, r) = _insertRange(i, r, v1, v2);\r\n                (i, r) = _insertRange(i, r, ele2[0], ele2[1]);\r\n                done = true;\r\n            }\r\n        }\r\n\r\n        if (!done) (i, r) = _insertRange(i, r, ele1[0], ele1[1]);\r\n\r\n        return (done, i, r);\r\n    }\r\n\r\n    /** END Range Normal */\r\n\r\n    /** Range Abnormal (overlapping) */\r\n    function _getAbnormalNewRangeCount(\r\n        uint256 curCount,\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256 total, AbnormalRangeInfo memory info) {\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (bool e1, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (e1 && e2) {\r\n                if (info.startInit)\r\n                    info = _calculateAbnormalRangeEnd(i, v2, ele1, ele2, info);\r\n                else\r\n                    info = _calculateAbnormalRange(i, v1, v2, ele1, ele2, info);\r\n            } else if (e1) {\r\n                if (info.startInit)\r\n                    info = _calculateAbnormalRange(i, v2, ele1, info);\r\n                else info = _calculateAbnormalRange(i, v1, v2, ele1, info);\r\n            }\r\n\r\n            if (info.endInit)\r\n                total = _calculateAbnormalRangeTotal(curCount, info);\r\n\r\n            if (total > 0) return (total, info);\r\n        }\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v1 <= ele1[0] && v2 >= ele1[1]) {\r\n            info.startInit = info.endInit = true;\r\n            info.startIndex = info.endIndex = i;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v2 >= ele1[1]) {\r\n            info.endInit = true;\r\n            info.endIndex = i;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRange(\r\n        uint256 i,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v1 <= ele1[0] && v2 >= ele1[1] && v2 <= ele2[0]) {\r\n            info.startInit = info.endInit = true;\r\n            info.startIndex = info.endIndex = i;\r\n            if (_checkEnd(ele2[0], v2)) info.continuousEnd = true;\r\n        } else if (v1 <= ele1[0]) {\r\n            info.startInit = true;\r\n            info.startIndex = i;\r\n        } else if (v1 >= ele1[1] && v1 <= ele2[0]) {\r\n            info.startInit = true;\r\n            info.startIndex = i;\r\n            info.middle = true;\r\n            if (_checkStart(ele1[1], v1)) info.continuousStart = true;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRangeEnd(\r\n        uint256 i,\r\n        uint64 v2,\r\n        uint64[2] memory ele1,\r\n        uint64[2] memory ele2,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (AbnormalRangeInfo memory) {\r\n        if (v2 >= ele1[1] && v2 <= ele2[0]) {\r\n            info.endInit = true;\r\n            info.endIndex = i;\r\n            if (_checkEnd(ele2[0], v2)) info.continuousEnd = true;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    function _calculateAbnormalRangeTotal(\r\n        uint256 curCount,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (uint256 total) {\r\n        if (info.startIndex == info.endIndex) {\r\n            if (info.continuousEnd) total = curCount - 2;\r\n            else total = curCount;\r\n        } else if (info.endIndex > info.startIndex) {\r\n            uint256 diff = info.endIndex - info.startIndex;\r\n            total = curCount - (2 * diff);\r\n            if (\r\n                (info.continuousStart && info.continuousEnd && info.middle) ||\r\n                (info.continuousEnd && !info.middle)\r\n            ) total -= 2;\r\n            else if (\r\n                !info.continuousStart && !info.continuousEnd && info.middle\r\n            ) total += 2;\r\n        }\r\n    }\r\n\r\n    function _createAbnormalNewRanges(\r\n        uint64[2][] memory ranges,\r\n        uint64 v1,\r\n        uint64 v2,\r\n        uint64[] memory r,\r\n        AbnormalRangeInfo memory info\r\n    ) private pure returns (uint64[] memory) {\r\n        bool skip = false;\r\n        uint256 total = 0;\r\n        for (uint64 i = 0; i < ranges.length; i++) {\r\n            (, uint64[2] memory ele1) = _getElement(i, ranges);\r\n            (bool e2, uint64[2] memory ele2) = _getElement(i + 1, ranges);\r\n\r\n            if (info.startIndex == i) {\r\n                if (info.middle) {\r\n                    if (info.continuousStart) {\r\n                        (total, r) = _insertAbnormalRange(total, r, ele1[0]);\r\n                        skip = true;\r\n                    } else {\r\n                        (total, r) = _insertAbnormalRange(\r\n                            total,\r\n                            r,\r\n                            ele1[0],\r\n                            ele1[1]\r\n                        );\r\n                        (total, r) = _insertAbnormalRange(total, r, v1);\r\n                        skip = true;\r\n                    }\r\n                } else {\r\n                    (total, r) = _insertAbnormalRange(total, r, v1);\r\n                }\r\n            }\r\n\r\n            if (info.endIndex == i) {\r\n                if (info.continuousEnd) {\r\n                    (total, r) = _insertAbnormalRange(total, r, ele2[1]);\r\n                    skip = true;\r\n                } else {\r\n                    (total, r) = _insertAbnormalRange(total, r, v2);\r\n                    if (e2) {\r\n                        (total, r) = _insertAbnormalRange(\r\n                            total,\r\n                            r,\r\n                            ele2[0],\r\n                            ele2[1]\r\n                        );\r\n                        skip = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!(i >= info.startIndex && i <= info.endIndex)) {\r\n                if (!skip)\r\n                    (total, r) = _insertAbnormalRange(\r\n                        total,\r\n                        r,\r\n                        ele1[0],\r\n                        ele1[1]\r\n                    );\r\n                else skip = false;\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function _insertAbnormalRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v;\r\n        i += 1;\r\n        return (i, r);\r\n    }\r\n\r\n    function _insertAbnormalRange(\r\n        uint256 i,\r\n        uint64[] memory r,\r\n        uint64 v1,\r\n        uint64 v2\r\n    ) private pure returns (uint256, uint64[] memory) {\r\n        r[i] = v1;\r\n        r[i + 1] = v2;\r\n        i += 2;\r\n        return (i, r);\r\n    }\r\n\r\n    /** END Range Abnormal (overlapping) */\r\n\r\n    // Check continuous\r\n    function _checkStart(uint64 ele, uint64 v) private pure returns (bool) {\r\n        return ((uint64(ele + 1) == v) || ele == v);\r\n    }\r\n\r\n    function _checkEnd(uint64 ele, uint64 v) private pure returns (bool) {\r\n        return ((uint64(ele - 1) == v) || ele == v);\r\n    }\r\n}\r\n\r\n// File: contracts/library/BridgeSecurity.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary BridgeSecurity {\r\n    function generateSignerMsgHash(uint64 epoch, address[] memory signers)\r\n        internal\r\n        pure\r\n        returns (bytes32 msgHash)\r\n    {\r\n        msgHash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0x19),\r\n                bytes1(0),\r\n                address(0),\r\n                epoch,\r\n                _encodeAddressArr(signers)\r\n            )\r\n        );\r\n    }\r\n\r\n    function generatePackMsgHash(\r\n        address thisAddr,\r\n        uint64 epoch,\r\n        uint8 networkId,\r\n        uint64[2] memory blockScanRange,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) internal pure returns (bytes32 msgHash) {\r\n        msgHash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0x19),\r\n                bytes1(0),\r\n                thisAddr,\r\n                epoch,\r\n                _encodeFixed2Uint64Arr(blockScanRange),\r\n                networkId,\r\n                _encodeUint256Arr(txHashes),\r\n                _encodeAddressArr(tokens),\r\n                _encodeAddressArr(recipients),\r\n                _encodeUint256Arr(amounts)\r\n            )\r\n        );\r\n    }\r\n\r\n    function signersVerification(\r\n        bytes32 msgHash,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s,\r\n        address[] memory signers,\r\n        mapping(address => bool) storage mapSigners\r\n    ) internal view returns (bool) {\r\n        uint64 totalSigners = 0;\r\n        for (uint64 i = 0; i < signers.length; i++) {\r\n            if (mapSigners[signers[i]]) totalSigners++;\r\n        }\r\n        return (_getVerifiedSigners(msgHash, v, r, s, mapSigners) ==\r\n            (totalSigners / 2) + 1);\r\n    }\r\n\r\n    function _getVerifiedSigners(\r\n        bytes32 msgHash,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s,\r\n        mapping(address => bool) storage mapSigners\r\n    ) private view returns (uint8 verifiedSigners) {\r\n        address lastAddr = address(0);\r\n        verifiedSigners = 0;\r\n        for (uint64 i = 0; i < v.length; i++) {\r\n            address recovered = ecrecover(msgHash, v[i], r[i], s[i]);\r\n            if (recovered > lastAddr && mapSigners[recovered])\r\n                verifiedSigners++;\r\n            lastAddr = recovered;\r\n        }\r\n    }\r\n\r\n    function _encodeAddressArr(address[] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n\r\n    function _encodeUint256Arr(uint256[] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n\r\n    function _encodeFixed2Uint64Arr(uint64[2] memory arr)\r\n        private\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            data = abi.encodePacked(data, arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BaseBridgeV2/interface/IBridgeV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nstruct TokenReq {\r\n    bool exist;\r\n    uint256 minAmount;\r\n    uint256 maxAmount;\r\n    uint256 chargePercent;\r\n    uint256 minCharge;\r\n    uint256 maxCharge;\r\n}\r\n\r\nstruct CrossTokenInfo {\r\n    string name;\r\n    string symbol;\r\n}\r\n\r\nstruct NetworkInfo {\r\n    uint8 id;\r\n    string name;\r\n}\r\n\r\nstruct TokenData {\r\n    address[] tokens;\r\n    address[] crossTokens;\r\n    uint256[] minAmounts;\r\n    uint256[] maxAmounts;\r\n    uint256[] chargePercents;\r\n    uint256[] minCharges;\r\n    uint256[] maxCharges;\r\n    uint8[] tokenTypes;\r\n}\r\n\r\nstruct TokensInfo {\r\n    uint8[] ids;\r\n    address[][] tokens;\r\n    address[][] crossTokens;\r\n    uint256[][] minAmounts;\r\n    uint256[][] maxAmounts;\r\n    uint256[][] chargePercents;\r\n    uint256[][] minCharges;\r\n    uint256[][] maxCharges;\r\n    uint8[][] tokenTypes;\r\n}\r\n\r\ninterface IBridgeV2 {\r\n    event TokenConnected(\r\n        address indexed token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address indexed crossToken,\r\n        string symbol\r\n    );\r\n\r\n    event TokenReqChanged(\r\n        uint64 blockIndex,\r\n        address indexed token,\r\n        uint256[2] minAmount,\r\n        uint256[2] maxAmount,\r\n        uint256[2] percent,\r\n        uint256[2] minCharge,\r\n        uint256[2] maxCharge\r\n    );\r\n\r\n    function initialize(\r\n        address factory,\r\n        address admin,\r\n        address tokenFactory,\r\n        address wMech,\r\n        uint8 networkId,\r\n        string memory networkName\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function network() external view returns (uint8, string memory);\r\n\r\n    function activeTokenCount() external view returns (uint8);\r\n\r\n    function crossToken(address crossToken)\r\n        external\r\n        view\r\n        returns (string memory, string memory);\r\n\r\n    function tokens(uint64 futureBlock, uint64 searchBlockIndex)\r\n        external\r\n        view\r\n        returns (TokenData memory data);\r\n\r\n    function blockScanRange() external view returns (uint64[] memory);\r\n\r\n    function txHash(uint256 txHash) external view returns (bool);\r\n\r\n    function setTokenConnection(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address crossToken,\r\n        string memory name,\r\n        string memory symbol\r\n    ) external;\r\n\r\n    function setTokenInfo(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge\r\n    ) external;\r\n\r\n    function resetTokenConnection(address token, address crossToken) external;\r\n\r\n    function processPack(\r\n        uint64[2] memory blockScanRange,\r\n        uint256[] memory txHashes,\r\n        address[] memory tokens,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    function setScanRange(uint64[2] memory scanRange) external;\r\n}\r\n\r\n// File: contracts/BaseToken/interface/ITokenFactory.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ITokenFactory {\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    event BridgeChanged(address indexed oldBridge, address indexed newBridge);\r\n\r\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\r\n\r\n    event TokenCreated(\r\n        string name,\r\n        string indexed symbol,\r\n        uint256 amount,\r\n        uint8 decimal,\r\n        uint256 cap,\r\n        address indexed token\r\n    );\r\n\r\n    event TokenRemoved(address indexed token);\r\n\r\n    event TokenDecimalChanged(\r\n        address indexed token,\r\n        uint8 oldDecimal,\r\n        uint8 newDecimal\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function tokens() external view returns (address[] memory);\r\n\r\n    function tokenExist(address token) external view returns (bool);\r\n\r\n    function bridge() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function setBridge(address bridge) external;\r\n\r\n    function setAdmin(address admin) external;\r\n\r\n    function createToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 amount,\r\n        uint8 decimal,\r\n        uint256 cap\r\n    ) external returns (address token);\r\n\r\n    function removeToken(address token) external;\r\n\r\n    function setTokenDecimal(address token, uint8 decimal) external;\r\n}\r\n\r\n// File: contracts/library/BridgeUtilsV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary BridgeUtilsV2 {\r\n    uint256 internal constant FUTURE_BLOCK_INTERVAL = 100;\r\n    uint256 public constant CHARGE_PERCENTAGE_DIVIDER = 10000;\r\n\r\n    function roundFuture(uint256 blockIndex) internal pure returns (uint64) {\r\n        uint256 _futureBlockIndex;\r\n        if (blockIndex <= FUTURE_BLOCK_INTERVAL) {\r\n            _futureBlockIndex = FUTURE_BLOCK_INTERVAL;\r\n        } else {\r\n            _futureBlockIndex =\r\n                FUTURE_BLOCK_INTERVAL *\r\n                ((blockIndex / FUTURE_BLOCK_INTERVAL) + 1);\r\n        }\r\n        return uint64(_futureBlockIndex);\r\n    }\r\n\r\n    function getFuture(uint256 blockIndex)\r\n        internal\r\n        pure\r\n        returns (uint64 futureBlockIndex)\r\n    {\r\n        uint256 _futureBlockIndex;\r\n        if (blockIndex <= FUTURE_BLOCK_INTERVAL) {\r\n            _futureBlockIndex = 0;\r\n        } else {\r\n            _futureBlockIndex =\r\n                FUTURE_BLOCK_INTERVAL *\r\n                (blockIndex / FUTURE_BLOCK_INTERVAL);\r\n        }\r\n        return uint64(_futureBlockIndex);\r\n    }\r\n\r\n    function getBlockScanRange(\r\n        uint16 count,\r\n        uint8[] memory networks,\r\n        mapping(uint8 => address) storage bridges\r\n    )\r\n        internal\r\n        view\r\n        returns (uint8[] memory _networks, uint64[][] memory _ranges)\r\n    {\r\n        _networks = new uint8[](count);\r\n        _ranges = new uint64[][](count);\r\n        uint64 k = 0;\r\n        for (uint64 i = 0; i < networks.length; i++) {\r\n            if (bridges[networks[i]] != address(0)) {\r\n                _networks[k] = networks[i];\r\n                _ranges[k] = IBridgeV2(bridges[networks[i]]).blockScanRange();\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTokenReq(\r\n        uint64 futureBlock,\r\n        address token,\r\n        uint64[] memory futureBlocks,\r\n        mapping(address => mapping(uint64 => TokenReq)) storage tokenReqs\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 minAmount,\r\n            uint256 maxAmount,\r\n            uint256 percent,\r\n            uint256 minCharge,\r\n            uint256 maxCharge\r\n        )\r\n    {\r\n        TokenReq memory _req = getReq(\r\n            futureBlock,\r\n            token,\r\n            futureBlocks,\r\n            tokenReqs\r\n        );\r\n        minAmount = _req.minAmount;\r\n        maxAmount = _req.maxAmount;\r\n        percent = _req.chargePercent;\r\n        minCharge = _req.minCharge;\r\n        maxCharge = _req.maxCharge;\r\n    }\r\n\r\n    function updateMap(\r\n        address[] memory arr,\r\n        bool status,\r\n        mapping(address => bool) storage map\r\n    ) internal {\r\n        for (uint64 i = 0; i < arr.length; i++) {\r\n            map[arr[i]] = status;\r\n        }\r\n    }\r\n\r\n    function getReq(\r\n        uint64 blockIndex,\r\n        address token,\r\n        uint64[] memory futureBlocks,\r\n        mapping(address => mapping(uint64 => TokenReq)) storage tokenReqs\r\n    ) internal view returns (TokenReq memory req) {\r\n        req = tokenReqs[token][blockIndex];\r\n        if (!req.exist) {\r\n            for (uint256 i = futureBlocks.length; i > 0; i--) {\r\n                if (futureBlocks[i - 1] <= blockIndex) {\r\n                    req = tokenReqs[token][futureBlocks[i - 1]];\r\n                    if (req.exist) return req;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCountBySearchIndex(\r\n        uint64 searchBlockIndex,\r\n        address[] memory tokens,\r\n        mapping(address => bool) storage mapTokens,\r\n        mapping(address => uint64) storage mapTokenCreatedBlockIndex\r\n    ) internal view returns (uint64 k) {\r\n        for (uint64 i = 0; i < tokens.length; i++) {\r\n            if (\r\n                mapTokens[tokens[i]] &&\r\n                (mapTokenCreatedBlockIndex[tokens[i]] <= searchBlockIndex)\r\n            ) {\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/interface/ICrossBridgeStorageTokenV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface ICrossBridgeStorageTokenV2 {\r\n    event TokenConnected(\r\n        address indexed token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 percent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address indexed crossToken,\r\n        string symbol\r\n    );\r\n\r\n    event TokenRequirementChanged(\r\n        uint64 blockIndex,\r\n        address indexed token,\r\n        uint256[2] minAmount,\r\n        uint256[2] maxAmount,\r\n        uint256[2] percent,\r\n        uint256[2] minCharge,\r\n        uint256[2] maxCharge\r\n    );\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function bridge() external view returns (address);\r\n\r\n    function mapToken(address token) external view returns (bool);\r\n\r\n    function mapOcToken(address token) external view returns (address);\r\n\r\n    function mapCoToken(address token) external view returns (address);\r\n\r\n    function blockScanRange() external view returns (uint64[] memory);\r\n\r\n    function crossToken(address token)\r\n        external\r\n        view\r\n        returns (string memory, string memory);\r\n\r\n    function tokens(\r\n        ITokenFactory tf,\r\n        uint64 futureBlock,\r\n        uint64 searchBlockIndex\r\n    ) external view returns (TokensInfo memory info);\r\n\r\n    function txHash(uint256 txHash) external view returns (bool);\r\n\r\n    function setCallers(address admin, address bridge) external;\r\n\r\n    function resetTokenConnection(address token, address crossToken) external;\r\n\r\n    function setTokenConnection(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address crossToken,\r\n        string memory name,\r\n        string memory symbol\r\n    ) external;\r\n\r\n    function setTokenInfo(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge\r\n    ) external;\r\n\r\n    function setTxHash(uint256 txHash) external;\r\n\r\n    function setScanRange(uint64[2] memory scanRange) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/BaseCrossBridgeV2/base/CrossBridgeStorageTokenUpgradeableV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract CrossBridgeStorageTokenUpgradeableV2 is\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ICrossBridgeStorageTokenV2\r\n{\r\n    using BridgeSecurity for *;\r\n    using BridgeUtilsV2 for *;\r\n    using BridgeScanRange for uint64[];\r\n\r\n    address private _admin;\r\n    address private _bridge;\r\n\r\n    NetworkInfo private _network;\r\n    uint8 private _activeTokenCount;\r\n    address[] private _tokens;\r\n    uint64[] private _scanRanges;\r\n    uint64[] private _futureBlocks;\r\n    mapping(address => address) private _mappedOCTokens;\r\n    mapping(address => address) private _mappedCOTokens;\r\n    mapping(address => bool) private _mapTokens;\r\n    mapping(address => uint64) private _mapTokenCreatedBlockIndex;\r\n    mapping(address => CrossTokenInfo) private _crossTokenInfos;\r\n    mapping(address => TokenReq) private _tokenLastestReqs;\r\n    mapping(address => mapping(uint64 => TokenReq)) private _tokenReqs;\r\n    mapping(uint256 => bool) private _txHashes;\r\n    mapping(uint64 => bool) private _mapFutureBlocks;\r\n\r\n    function __CrossBridgeTokenStorage_init(\r\n        uint8 networkId,\r\n        string memory networkName\r\n    ) internal initializer {\r\n        __Ownable_init();\r\n        _network.id = networkId;\r\n        _network.name = networkName;\r\n    }\r\n\r\n    function owner()\r\n        public\r\n        view\r\n        override(OwnableUpgradeable, ICrossBridgeStorageTokenV2)\r\n        returns (address)\r\n    {\r\n        return OwnableUpgradeable.owner();\r\n    }\r\n\r\n    function admin() public view virtual override returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function bridge() public view virtual override returns (address) {\r\n        return _bridge;\r\n    }\r\n\r\n    modifier onlyAllowedOwner() {\r\n        require(msg.sender == bridge() || msg.sender == admin());\r\n        _;\r\n    }\r\n\r\n    function mapToken(address token)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _mapTokens[token];\r\n    }\r\n\r\n    function mapOcToken(address token)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _mappedOCTokens[token];\r\n    }\r\n\r\n    function mapCoToken(address token)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _mappedCOTokens[token];\r\n    }\r\n\r\n    function blockScanRange()\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint64[] memory)\r\n    {\r\n        return _scanRanges;\r\n    }\r\n\r\n    function crossToken(address token)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory name, string memory symbol)\r\n    {\r\n        return (_crossTokenInfos[token].name, _crossTokenInfos[token].symbol);\r\n    }\r\n\r\n    function tokens(\r\n        ITokenFactory tf,\r\n        uint64 futureBlock,\r\n        uint64 searchBlockIndex\r\n    ) external view virtual override returns (TokensInfo memory info) {\r\n        TokenData memory data = _getTokensInfo(\r\n            tf,\r\n            futureBlock,\r\n            searchBlockIndex\r\n        );\r\n        info = _packTokensInfo(data);\r\n    }\r\n\r\n    function txHash(uint256 txHash_)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _txHashes[txHash_];\r\n    }\r\n\r\n    function setCallers(address admin_, address bridge_)\r\n        external\r\n        virtual\r\n        override\r\n        onlyOwner\r\n    {\r\n        _admin = admin_;\r\n        _bridge = bridge_;\r\n    }\r\n\r\n    function resetTokenConnection(address token, address crossToken_)\r\n        external\r\n        virtual\r\n        override\r\n        onlyAllowedOwner\r\n    {\r\n        if (!_mapTokens[token]) {\r\n            _tokens.push(token);\r\n            _mapTokens[token] = true;\r\n        }\r\n\r\n        if (_mappedCOTokens[crossToken_] != address(0)) {\r\n            _mapTokens[_mappedCOTokens[crossToken_]] = false;\r\n\r\n            TokenReq storage _oriReq = _tokenReqs[_mappedCOTokens[crossToken_]][\r\n                0\r\n            ];\r\n\r\n            TokenReq storage _req = _tokenReqs[token][0];\r\n            _req.exist = true;\r\n            _req.minAmount = _oriReq.minAmount;\r\n            _req.maxAmount = _oriReq.maxAmount;\r\n            _req.chargePercent = _oriReq.chargePercent;\r\n            _req.minCharge = _oriReq.minCharge;\r\n            _req.maxCharge = _oriReq.maxCharge;\r\n\r\n            TokenReq storage _oriLatestReq = _tokenReqs[\r\n                _mappedCOTokens[crossToken_]\r\n            ][0];\r\n\r\n            TokenReq storage _latestReq = _tokenLastestReqs[token];\r\n            _latestReq.minAmount = _oriLatestReq.minAmount;\r\n            _latestReq.maxAmount = _oriLatestReq.maxAmount;\r\n            _latestReq.chargePercent = _oriLatestReq.chargePercent;\r\n            _latestReq.minCharge = _oriLatestReq.minCharge;\r\n            _latestReq.maxCharge = _oriLatestReq.maxCharge;\r\n        }\r\n\r\n        _mappedOCTokens[token] = crossToken_;\r\n        _mappedCOTokens[crossToken_] = token;\r\n    }\r\n\r\n    function setTokenConnection(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge,\r\n        address crossToken_,\r\n        string memory name,\r\n        string memory symbol\r\n    ) external virtual override onlyAllowedOwner {\r\n        require(_mappedOCTokens[token] == address(0), \"TCE\");\r\n        uint64 futureBlock = block.number.roundFuture();\r\n\r\n        _mapTokenCreatedBlockIndex[token] = futureBlock;\r\n        _tokens.push(token);\r\n        _mapTokens[token] = true;\r\n        _mappedOCTokens[token] = crossToken_;\r\n        _mappedCOTokens[crossToken_] = token;\r\n        _activeTokenCount++;\r\n\r\n        CrossTokenInfo storage _info = _crossTokenInfos[crossToken_];\r\n        _info.name = name;\r\n        _info.symbol = symbol;\r\n\r\n        TokenReq storage _req = _tokenReqs[token][0];\r\n        _req.exist = true;\r\n        _req.minAmount = minAmount;\r\n        _req.maxAmount = maxAmount;\r\n        _req.chargePercent = chargePercent;\r\n        _req.minCharge = minCharge;\r\n        _req.maxCharge = maxCharge;\r\n\r\n        _futureBlocks.push(0);\r\n        _mapFutureBlocks[0] = true;\r\n\r\n        TokenReq storage _latestReq = _tokenLastestReqs[token];\r\n        _latestReq.minAmount = minAmount;\r\n        _latestReq.maxAmount = maxAmount;\r\n        _latestReq.chargePercent = chargePercent;\r\n        _latestReq.minCharge = minCharge;\r\n        _latestReq.maxCharge = maxCharge;\r\n\r\n        emit TokenConnected(\r\n            token,\r\n            minAmount,\r\n            maxAmount,\r\n            chargePercent,\r\n            minCharge,\r\n            maxCharge,\r\n            crossToken_,\r\n            symbol\r\n        );\r\n    }\r\n\r\n    function setTokenInfo(\r\n        address token,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 chargePercent,\r\n        uint256 minCharge,\r\n        uint256 maxCharge\r\n    ) external virtual override onlyAllowedOwner {\r\n        uint64 futureBlock = block.number.roundFuture();\r\n\r\n        TokenReq storage _latestReq = _tokenLastestReqs[token];\r\n        emit TokenRequirementChanged(\r\n            futureBlock,\r\n            token,\r\n            [_latestReq.minAmount, minAmount],\r\n            [_latestReq.maxAmount, maxAmount],\r\n            [_latestReq.chargePercent, chargePercent],\r\n            [_latestReq.minCharge, minCharge],\r\n            [_latestReq.maxCharge, maxCharge]\r\n        );\r\n        _latestReq.minAmount = minAmount;\r\n        _latestReq.maxAmount = maxAmount;\r\n        _latestReq.chargePercent = chargePercent;\r\n        _latestReq.minCharge = minCharge;\r\n        _latestReq.maxCharge = maxCharge;\r\n\r\n        TokenReq storage _req = _tokenReqs[token][futureBlock];\r\n        _req.exist = true;\r\n        _req.minAmount = minAmount;\r\n        _req.maxAmount = maxAmount;\r\n        _req.chargePercent = chargePercent;\r\n        _req.minCharge = minCharge;\r\n        _req.maxCharge = maxCharge;\r\n\r\n        if (!_mapFutureBlocks[futureBlock]) {\r\n            _futureBlocks.push(futureBlock);\r\n            _mapFutureBlocks[futureBlock] = true;\r\n        }\r\n    }\r\n\r\n    function setTxHash(uint256 txHash_)\r\n        external\r\n        virtual\r\n        override\r\n        onlyAllowedOwner\r\n    {\r\n        _txHashes[txHash_] = true;\r\n    }\r\n\r\n    function setScanRange(uint64[2] memory scanRange_)\r\n        external\r\n        virtual\r\n        override\r\n        onlyAllowedOwner\r\n    {\r\n        uint64[] memory r = _scanRanges.getBlockScanRange(\r\n            scanRange_[0],\r\n            scanRange_[1]\r\n        );\r\n        delete _scanRanges;\r\n        _scanRanges = r;\r\n    }\r\n\r\n    function _getTokensInfo(\r\n        ITokenFactory tf,\r\n        uint64 futureBlock,\r\n        uint64 searchBlockIndex\r\n    ) private view returns (TokenData memory data) {\r\n        uint64 _searchActive = searchBlockIndex.getCountBySearchIndex(\r\n            _tokens,\r\n            _mapTokens,\r\n            _mapTokenCreatedBlockIndex\r\n        );\r\n        data.tokens = new address[](_searchActive);\r\n        data.crossTokens = new address[](_searchActive);\r\n        data.minAmounts = new uint256[](_searchActive);\r\n        data.maxAmounts = new uint256[](_searchActive);\r\n        data.chargePercents = new uint256[](_searchActive);\r\n        data.minCharges = new uint256[](_searchActive);\r\n        data.maxCharges = new uint256[](_searchActive);\r\n        data.tokenTypes = new uint8[](_searchActive);\r\n        uint64 k = 0;\r\n        for (uint64 i = 0; i < _tokens.length; i++) {\r\n            if (\r\n                _mapTokens[_tokens[i]] &&\r\n                (_mapTokenCreatedBlockIndex[_tokens[i]] <= searchBlockIndex)\r\n            ) {\r\n                data.tokens[k] = _tokens[i];\r\n                data.crossTokens[k] = _mappedOCTokens[_tokens[i]];\r\n                (\r\n                    data.minAmounts[k],\r\n                    data.maxAmounts[k],\r\n                    data.chargePercents[k],\r\n                    data.minCharges[k],\r\n                    data.maxCharges[k]\r\n                ) = futureBlock.getTokenReq(\r\n                    _tokens[i],\r\n                    _futureBlocks,\r\n                    _tokenReqs\r\n                );\r\n                data.tokenTypes[k] = tf.tokenExist(_tokens[i]) ? 0 : 1;\r\n                k++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _packTokensInfo(TokenData memory data)\r\n        private\r\n        view\r\n        returns (TokensInfo memory info)\r\n    {\r\n        info.ids = new uint8[](1);\r\n        info.tokens = new address[][](1);\r\n        info.crossTokens = new address[][](1);\r\n        info.minAmounts = new uint256[][](1);\r\n        info.maxAmounts = new uint256[][](1);\r\n        info.chargePercents = new uint256[][](1);\r\n        info.minCharges = new uint256[][](1);\r\n        info.maxCharges = new uint256[][](1);\r\n        info.tokenTypes = new uint8[][](1);\r\n\r\n        info.ids[0] = _network.id;\r\n        info.tokens[0] = data.tokens;\r\n        info.crossTokens[0] = data.crossTokens;\r\n        info.minAmounts[0] = data.minAmounts;\r\n        info.maxAmounts[0] = data.maxAmounts;\r\n        info.chargePercents[0] = data.chargePercents;\r\n        info.minCharges[0] = data.minCharges;\r\n        info.maxCharges[0] = data.maxCharges;\r\n        info.tokenTypes[0] = data.tokenTypes;\r\n    }\r\n}\r\n\r\n// File: contracts/Net-Ethereum/BridgeV2/EthereumBridgeStorageTokenV2.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract EthereumBridgeStorageTokenV2 is CrossBridgeStorageTokenUpgradeableV2 {\r\n    function initialize(uint8 networkId, string memory networkName)\r\n        public\r\n        initializer\r\n    {\r\n        __CrossBridgeTokenStorage_init(networkId, networkName);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCharge\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crossToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenConnected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"minAmount\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"maxAmount\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"percent\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"minCharge\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"maxCharge\",\"type\":\"uint256[2]\"}],\"name\":\"TokenRequirementChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockScanRange\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"crossToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"networkId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"networkName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapCoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapOcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossToken_\",\"type\":\"address\"}],\"name\":\"resetTokenConnection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"name\":\"setCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[2]\",\"name\":\"scanRange_\",\"type\":\"uint64[2]\"}],\"name\":\"setScanRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCharge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossToken_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"setTokenConnection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chargePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCharge\",\"type\":\"uint256\"}],\"name\":\"setTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txHash_\",\"type\":\"uint256\"}],\"name\":\"setTxHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenFactory\",\"name\":\"tf\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"futureBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"searchBlockIndex\",\"type\":\"uint64\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"address[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"crossTokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"minAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maxAmounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"chargePercents\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"minCharges\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maxCharges\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint8[][]\",\"name\":\"tokenTypes\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct TokensInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txHash_\",\"type\":\"uint256\"}],\"name\":\"txHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EthereumBridgeStorageTokenV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33cbd90df4ea60ee66a6c307ff2cba6dcab54a7650ac8bfd4cba4001bc60a271"}]}