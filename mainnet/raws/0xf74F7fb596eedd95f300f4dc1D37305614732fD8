{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Stakeable {\r\n\r\n    constructor() { }\r\n\r\n    function initStakeable() internal {\r\n        stakeholders.push();\r\n        rewardPerHour = 36500;\r\n    }\r\n\r\n    struct Stake{\r\n        address user;\r\n        uint256 amount;\r\n        uint256 since;\r\n        uint256 claimable;\r\n    }\r\n  \r\n    struct Stakeholder{\r\n        address user;\r\n        Stake[] address_stakes;\r\n        \r\n    }\r\n\r\n     struct StakingSummary{\r\n         uint256 total_amount;\r\n         Stake[] stakes;\r\n     }\r\n\r\n    Stakeholder[] internal stakeholders;\r\n\r\n    mapping(address => uint256) internal stakes;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 index, uint256 timestamp);\r\n\r\n    uint256 internal rewardPerHour;\r\n\r\n    function _addStakeholder(address staker) internal returns (uint256){\r\n        stakeholders.push();\r\n        uint256 userIndex = stakeholders.length - 1;\r\n        stakeholders[userIndex].user = staker;\r\n        stakes[staker] = userIndex;\r\n        return userIndex; \r\n    }\r\n\r\n    function _stake(uint256 _amount) internal {\r\n        require(_amount > 0, \"Cannot stake nothing\");\r\n        \r\n        uint256 index = stakes[msg.sender];\r\n        uint256 timestamp = block.timestamp;\r\n        if(index == 0){\r\n            index = _addStakeholder(msg.sender);\r\n        }\r\n\r\n        stakeholders[index].address_stakes.push(Stake(msg.sender, _amount, timestamp,0));\r\n        emit Staked(msg.sender, _amount, index,timestamp);\r\n    }\r\n\r\n    function calculateStakeReward(Stake memory _current_stake) internal view returns(uint256){\r\n      uint256 stakeTime = block.timestamp - _current_stake.since;\r\n      if (stakeTime < 1 days) {\r\n        return 0;\r\n      }\r\n      return (((stakeTime) / 1 hours) * _current_stake.amount) / rewardPerHour;\r\n    }\r\n\r\n    function _withdrawStake(uint256 amount, uint256 index) internal returns(uint256, uint256, uint256){\r\n      uint256 user_index = stakes[msg.sender];\r\n      Stake memory current_stake = stakeholders[user_index].address_stakes[index];\r\n      require(current_stake.amount >= amount, \"Staking: Cannot withdraw more than you have staked\");\r\n\r\n      uint256 reward = calculateStakeReward(current_stake);\r\n      current_stake.amount = current_stake.amount - amount;\r\n      if(current_stake.amount == 0){\r\n          delete stakeholders[user_index].address_stakes[index];\r\n      } else {\r\n        stakeholders[user_index].address_stakes[index].amount = current_stake.amount;\r\n        stakeholders[user_index].address_stakes[index].since = block.timestamp;    \r\n      }\r\n      uint256 devReward = ( reward * 5 ) / 100; \r\n      reward -= devReward;\r\n      return (amount, reward, devReward);\r\n    }\r\n\r\n    function _withdrawStakeWithZeroReward(uint256 amount, uint256 index) internal returns(uint256){\r\n      uint256 user_index = stakes[msg.sender];\r\n      Stake memory current_stake = stakeholders[user_index].address_stakes[index];\r\n      require(current_stake.amount >= amount, \"Staking: Cannot withdraw more than you have staked\");\r\n      current_stake.amount = current_stake.amount - amount;\r\n      if(current_stake.amount == 0) {\r\n        delete stakeholders[user_index].address_stakes[index];\r\n      } else {\r\n        stakeholders[user_index].address_stakes[index].amount = current_stake.amount;\r\n        stakeholders[user_index].address_stakes[index].since = block.timestamp;    \r\n      }\r\n      return (amount);\r\n    }\r\n   \r\n    function hasStake(address _staker) public view returns(StakingSummary memory){\r\n      uint256 totalStakeAmount; \r\n      StakingSummary memory summary = StakingSummary(0, stakeholders[stakes[_staker]].address_stakes);\r\n      for (uint256 s = 0; s < summary.stakes.length; s += 1) {\r\n        uint256 availableReward = calculateStakeReward(summary.stakes[s]);\r\n        summary.stakes[s].claimable = availableReward;\r\n        totalStakeAmount = totalStakeAmount+summary.stakes[s].amount;\r\n      }\r\n      summary.total_amount = totalStakeAmount;\r\n      return summary;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() {    }\r\n\r\n    function initOwner() internal {\r\n      _owner = 0xF36834a746fFcC8D13E508154075Fc83B2FEa83d;\r\n      emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n   \r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n\r\n    }\r\n   \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n  \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n  \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WVSOL is Ownable, Stakeable{\r\n \r\n    uint private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n    uint private _rewardsupply;\r\n\r\n    address devAddress;\r\n    address adminAddress;\r\n\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event AdminAddress(address _from, address to);\r\n    event DevAddress(address _from, address to);\r\n\r\n    constructor() { \r\n    }\r\n\r\n    bool initialized;\r\n\r\n    modifier isInitialized {\r\n      require(!initialized, \"You can not initialize function again \");\r\n      _;\r\n    }\r\n\r\n    function initialize() public isInitialized {\r\n      _name = \"Wrapped VSolidus Coin\";\r\n      _symbol = \"WVSOL\";\r\n      _decimals = 8;\r\n      \r\n      uint256 premine = 450_000_000 * (10 ** _decimals);\r\n\r\n      initOwner();\r\n      initStakeable();\r\n\r\n      _mint(owner(), premine);\r\n      _rewardsupply = premine;\r\n      devAddress = 0x2B98d6c2FC894714f14cE17f76599fb04E9193Bd; \r\n      adminAddress = 0x9c67cfEcd0633d3dDeB666aE6b9ffe084015eB23; \r\n\r\n      initialized = true;\r\n    }\r\n\r\n    function changeDevAddress(address _addr) onlyOwner public {\r\n      emit DevAddress(devAddress, _addr);\r\n      devAddress = _addr;\r\n    }\r\n\r\n    function changeAdminAddress(address _addr) onlyOwner public {\r\n      emit AdminAddress(adminAddress, _addr);\r\n      adminAddress = _addr;\r\n    }\r\n  \r\n    function decimals() external view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n  \r\n    function symbol() external view returns (string memory){\r\n      return _symbol;\r\n    }\r\n \r\n    function name() external view returns (string memory){\r\n      return _name;\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256){\r\n      return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n      return _balances[account];\r\n    }\r\nfunction getTotalStakeholders() public view returns(uint256) {\r\n  return stakeholders.length;\r\n}\r\n\r\nfunction getTotalStakedAmount() public view returns(uint256) {\r\n  return balanceOf(address(this));\r\n}\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n      require(account != address(0), \"DevToken: cannot mint to zero address\");\r\n\r\n      _totalSupply = _totalSupply + (amount);\r\n      _balances[account] = _balances[account] + amount;\r\n      emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n      require(account != address(0), \"DevToken: cannot burn from zero address\");\r\n      require(_balances[account] >= amount, \"DevToken: Cannot burn more than the account owns\");\r\n\r\n      _balances[account] = _balances[account] - amount;\r\n      _totalSupply = _totalSupply - amount;\r\n      emit Transfer(account, address(0), amount);\r\n    }\r\n \r\n    function burn(address account, uint256 amount) public onlyOwner returns(bool) {\r\n      _burn(account, amount);\r\n      return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public onlyOwner returns(bool){\r\n      _mint(account, amount);\r\n      return true;\r\n    }\r\n\r\n \r\n    function transfer(address recipient, uint256 amount) external returns(bool) {\r\n      _transfer(msg.sender, recipient, amount);\r\n      return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n      require(sender != address(0), \"DevToken: transfer from zero address\");\r\n      require(recipient != address(0), \"DevToken: transfer to zero address\");\r\n      require(_balances[sender] >= amount, \"DevToken: cant transfer more than your account holds\");\r\n\r\n      _balances[sender] = _balances[sender] - amount;\r\n      _balances[recipient] = _balances[recipient] + amount;\r\n\r\n      emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns(uint256){\r\n      return _allowances[owner][spender];\r\n    }\r\n  \r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n      _approve(msg.sender, spender, amount);\r\n      return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n      require(owner != address(0), \"DevToken: approve cannot be done from zero address\");\r\n      require(spender != address(0), \"DevToken: approve cannot be to zero address\");\r\n      _allowances[owner][spender] = amount;\r\n\r\n      emit Approval(owner,spender,amount);\r\n    }\r\n\r\n    function transferFrom(address spender, address recipient, uint256 amount) external returns(bool){\r\n      // Make sure spender is allowed the amount \r\n      require(_allowances[spender][msg.sender] >= amount, \"DevToken: You cannot spend that much on this account\");\r\n      _transfer(spender, recipient, amount);\r\n      _approve(spender, msg.sender, _allowances[spender][msg.sender] - amount);\r\n      return true;\r\n    }\r\n  \r\n    function increaseAllowance(address spender, uint256 amount) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowances[msg.sender][spender]+amount);\r\n      return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 amount) public returns (bool) {\r\n      _approve(msg.sender, spender, _allowances[msg.sender][spender]-amount);\r\n      return true;\r\n    }\r\n\r\n\r\n    function stake(uint256 _amount) public {\r\n      require(_amount < _balances[msg.sender], \"DevToken: Cannot stake more than you own\");\r\n      _stake(_amount);\r\n      _transfer(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function getRemainingReward() view public returns(uint256) {\r\n      return _rewardsupply;\r\n    }\r\n\r\n    function reduceRewardSupply(uint amount) private {\r\n      uint256 temp = _rewardsupply;\r\n      _rewardsupply -= amount;\r\n      emit RewardAmountReduced(temp, _rewardsupply);\r\n    }\r\n\r\n    event RewardAmountReduced(uint256 _from, uint256 _to);\r\n\r\n    event LastAmountMinted(uint256 stakedAmount, uint256 remaningAmount, uint256 rewardAmount, uint totalAmount);\r\n\r\n    event CanNotGetReward(uint256 userRewardAmount, uint256 contractRewardAmountHold);\r\n\r\n    event NotFinished24Hours(address _from, address _to, uint256 amount);\r\n\r\n    function mintReward(uint256 amountStaked, uint256 userReward, uint256 devReward) private {\r\n      _mint(devAddress, devReward/2);\r\n      _mint(adminAddress, devReward/2);\r\n      _mint(msg.sender, userReward);\r\n      _transfer(address(this), msg.sender, amountStaked);\r\n    }\r\n\r\n    function withdrawStake(uint256 amount, uint256 stake_index)  public {\r\n      uint256 amountStaked;\r\n      uint256 devReward;\r\n      uint256 userReward;\r\n\r\n      if (getRemainingReward() > 0 ) {\r\n\r\n        (amountStaked, userReward, devReward) = _withdrawStake(amount, stake_index);\r\n\r\n        if( (userReward + devReward) > 0 ) { \r\n          if ( (userReward + devReward) < getRemainingReward() ) {\r\n            reduceRewardSupply(devReward + userReward);\r\n            mintReward(amountStaked, userReward, devReward);\r\n          }\r\n          else\r\n          {\r\n            userReward = getRemainingReward();\r\n            devReward = ( userReward * 5 ) / 100;\r\n            userReward -= devReward;\r\n            mintReward(amountStaked, userReward, devReward);\r\n            _rewardsupply = 0;          \r\n          }\r\n        }\r\n\r\n        else {\r\n          _transfer(address(this), msg.sender, amountStaked);\r\n          emit NotFinished24Hours(address(this), msg.sender, amountStaked);\r\n        }\r\n\r\n      }\r\n      else {\r\n        amountStaked = _withdrawStakeWithZeroReward(amount, stake_index);\r\n        _transfer(address(this), msg.sender, amountStaked);\r\n        emit CanNotGetReward(userReward + devReward, getRemainingReward());\r\n      }\r\n    }\r\n\r\n    function withdrawBNB() onlyOwner public payable {\r\n      payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {\r\n      payable(owner()).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userRewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractRewardAmountHold\",\"type\":\"uint256\"}],\"name\":\"CanNotGetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaningAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"LastAmountMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotFinished24Hours\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"RewardAmountReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct Stakeable.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Stakeable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake_index\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WVSOL", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://269ba8b70a057cd52fec8af0c83f6ec154046caf6c4f2da85d9a6f2bf860813c"}]}