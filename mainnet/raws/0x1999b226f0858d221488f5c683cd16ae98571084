{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"MultipleProposalVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\nimport \\\"./Context.sol\\\";\\n\\ncontract MultipleProposalVoting is Context {\\n    mapping(string =\\u003e uint256)[] public votes;\\n    string[][] public possibleAnswers;\\n    uint256 public totalVotes;\\n    uint256 public maxVotes;\\n    mapping(address =\\u003e bool) public voters;\\n\\n    event VoteOccurred(address voter, uint256 voteCount);\\n\\n    /**\\n     * @dev Creates a survey by specifying possible answers for each question. Each element in the\\n     * outer array corresponds to a question. The inner array includes possible answers to that question.\\n     * While answers are stored on-chain, the questions are not.\\n     */\\n    constructor(string[][] memory possibleAnswers_, uint256 maxVotes_) {\\n        possibleAnswers = possibleAnswers_;\\n        for (uint64 i = 0; i \\u003c possibleAnswers_.length; ++i) {\\n            votes.push();\\n        }\\n        totalVotes = 0;\\n        maxVotes = maxVotes_;\\n    }\\n\\n    /**\\n     * @dev Votes for answers to all the questions posed function for buys on a whitelist. The price can be different from\\n     *  the regular minting function. In addition,\\n     */\\n    function vote(uint64[] memory answers) public {\\n        require(\\n            answers.length == possibleAnswers.length,\\n            \\\"Number of answers doesn\\u0027t match number of questions.\\\"\\n        );\\n        totalVotes++;\\n        require(totalVotes \\u003c= maxVotes, \\\"Too many votes have been cast.\\\");\\n        require(!voters[_msgSender()], \\\"Address has already voted.\\\");\\n        voters[_msgSender()] = true;\\n        for (uint64 i = 0; i \\u003c answers.length; ++i) {\\n            require(\\n                answers[i] \\u003c possibleAnswers[i].length,\\n                \\\"Answer is out of bounds.\\\"\\n            );\\n            votes[i][possibleAnswers[i][answers[i]]]++;\\n        }\\n\\n        emit VoteOccurred(_msgSender(), totalVotes);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[][]\",\"name\":\"possibleAnswers_\",\"type\":\"string[][]\"},{\"internalType\":\"uint256\",\"name\":\"maxVotes_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"name\":\"VoteOccurred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"maxVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"possibleAnswers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"answers\",\"type\":\"uint64[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultipleProposalVoting", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000003417274000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094d61726b6574696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000553746f727900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064576656e7473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055065726b7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000054c617465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006536f6f6e65720000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8766fb52433fac45f9b705209fe7c7148ec71ee5b7e77584caa63bc8008237b9"}]}