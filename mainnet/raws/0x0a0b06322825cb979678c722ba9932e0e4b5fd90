{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\ninterface erc20 {\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface cy20 {\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function mint(uint) external returns (uint);\r\n    function borrow(uint) external returns (uint);\r\n    function repayBorrow(uint) external returns (uint);\r\n}\r\n\r\ninterface registry {\r\n    function cy(address) external view returns (address);\r\n    function price(address) external view returns (uint);\r\n}\r\n\r\ninterface cl {\r\n    function latestAnswer() external view returns (int);\r\n}\r\n\r\ncontract ib_amm {\r\n    address constant mim = address(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\r\n    address constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    registry constant ff = registry(0x5C08bC10F45468F18CbDC65454Cbd1dd2cB1Ac65);\r\n    cl constant dai_feed = cl(0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9);\r\n    cl constant mim_feed = cl(0x7A364e8770418566e3eb2001A96116E6138Eb32F);\r\n    \r\n    address public governance;\r\n    address public pending_governance;\r\n    bool public breaker = false;\r\n    int public threshold = 99000000;\r\n    uint constant public fee = 3;\r\n    uint constant public base = 1000;\r\n    \r\n    constructor(address _governance) {\r\n        governance = _governance;\r\n    }\r\n\r\n    modifier only_governance() {\r\n        require(msg.sender == governance);\r\n        _;\r\n    }\r\n\r\n    function set_governance(address _governance) external only_governance {\r\n        pending_governance = _governance;\r\n    }\r\n\r\n    function accept_governance() external {\r\n        require(msg.sender == pending_governance);\r\n        governance = pending_governance;\r\n    }\r\n\r\n    function set_breaker(bool _breaker) external only_governance {\r\n        breaker = _breaker;\r\n    }\r\n\r\n    function set_threshold(int _threshold) external only_governance {\r\n        threshold = _threshold;\r\n    }\r\n\r\n    function repay(cy20 cy, address token, uint amount) external returns (bool) {\r\n         _safeTransferFrom(token, msg.sender, address(this), amount);\r\n        erc20(token).approve(address(cy), amount);\r\n        require(cy.repayBorrow(amount) == 0, \"ib: !repay\");\r\n        return true;\r\n    }\r\n\r\n    function dai_quote() external view returns (int) {\r\n        return dai_feed.latestAnswer();\r\n    }\r\n\r\n    function mim_quote() external view returns (int) {\r\n        return mim_feed.latestAnswer();\r\n    }\r\n\r\n    function buy_quote(address to, uint amount) public view returns (uint) {\r\n        uint _fee = amount * fee / base;\r\n        return (amount - _fee)  * 1e18 / ff.price(to);\r\n    }\r\n\r\n    function sell_quote(address from, uint amount) public view returns (uint) {\r\n        uint _fee = amount * fee / base;\r\n        return (amount - _fee) * ff.price(from) / 1e18;\r\n    }\r\n    \r\n    function buy(address to, uint amount, uint minOut) external returns (bool) {\r\n        require(!breaker, \"breaker\");\r\n        require(dai_feed.latestAnswer() > threshold, \"peg\");\r\n        _safeTransferFrom(dai, msg.sender, governance, amount);\r\n        uint _quote = buy_quote(to, amount);\r\n        require(_quote > 0 && _quote >= minOut, \"< minOut\");\r\n        require(cy20(ff.cy(to)).borrow(_quote) == 0, \"ib: borrow failed\");\r\n        _safeTransfer(to, msg.sender, _quote);\r\n        return true;\r\n    }\r\n    \r\n    function sell(address from, uint amount, uint minOut) external returns (bool) {\r\n        require(!breaker, \"breaker\");\r\n        require(mim_feed.latestAnswer() > threshold, \"peg\");\r\n        _safeTransferFrom(from, msg.sender, governance, amount);\r\n        uint _quote = sell_quote(from, amount);\r\n        require(_quote > 0 && _quote >= minOut, \"< minOut\");\r\n        _safeTransfer(mim, msg.sender, _quote);\r\n        return true;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n\r\n    function _safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accept_governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy_quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai_quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim_quote\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract cy20\",\"name\":\"cy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell_quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_breaker\",\"type\":\"bool\"}],\"name\":\"set_breaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"set_governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_threshold\",\"type\":\"int256\"}],\"name\":\"set_threshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ib_amm", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d5dc686d0a2abbfdafdfb4d0533e886517d4e83", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8291e8950e790f7781827c56732e35b6baee30634d6bc6c971d50a6cf90f4450"}]}