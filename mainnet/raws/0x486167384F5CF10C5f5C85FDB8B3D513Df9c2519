{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Simplr/collection/factories/CollectionFactoryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2022 Simplr\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../../common/utils/CloneFactory.sol\\\";\\nimport \\\"../interface/ICollection.sol\\\";\\n\\n/// @title CollectionFactoryV2\\n/// @author Chain Labs\\n/// @notice a single factory to create multiple and various clones of collection.\\n/// @dev new collection type can be added and deployed\\ncontract CollectionFactoryV2 is Pausable, Ownable, CloneFactory {\\n    //------------------------------------------------------//\\n    //\\n    //  Storage\\n    //\\n    //------------------------------------------------------//\\n    /// @notice version of Collection Factory\\n    /// @dev version of collection factory\\n    /// @return VERSION version of collection factory\\n    string public constant VERSION = \\\"0.2.0\\\";\\n\\n    /// @notice address of Simplr Afffiliate Registry\\n    /// @dev address of simplr affiliate registry\\n    /// @return affiliateRegistry address of simple affiliate registry\\n    address public affiliateRegistry;\\n\\n    /// @notice address of Simplr Early Access Token\\n    /// @dev only ERC721 contract address\\n    /// @return freePass address of SEAT (Simplr Early Access Token)\\n    address public freePass;\\n\\n    /// @notice simplr fee receiver gnosis safe\\n    /// @dev all the fees is transfered to Simplr's Fee Receiver Gnosis Safe\\n    /// @return simplr Simplr Fee receiver gnosis safe\\n    address public simplr;\\n\\n    /// @notice fixed share of simplr for each collection sale\\n    /// @dev in the beginning it is set to 0%, then gradually it will increase to 1% max\\n    /// @return simplrShares shares of simplr\\n    uint256 public simplrShares;\\n\\n    /// @notice upfront fee to start a new collection\\n    /// @dev upfront fee to start a new collection\\n    /// @return upfrontFee upfront fee to start a new collection\\n    uint256 public upfrontFee;\\n\\n    /// @notice total amount of upfront fee withdrawn from Factory\\n    /// @dev used to calculate total fee collected\\n    /// @return totalWithdrawn total amount of upfront fee withdrawn from Factory\\n    uint256 public totalWithdrawn;\\n\\n    /// @notice ID of Simplr Collection in affiliate registry\\n    /// @dev ID that is used to identify Simplr Collection by affiliate registry\\n    /// @return affiliateProjectId ID of Simplr Collection in affiliate registry\\n    bytes32 public affiliateProjectId;\\n\\n    /// @notice list of various collection types\\n    /// @dev mapping of collection id with master copy of collection\\n    /// @return mastercopies master copy address of a collection type\\n    mapping(uint256 => address) public mastercopies;\\n\\n    /// @notice logs whenever new collection is created\\n    /// @dev emitted when new collection is created\\n    /// @param collection address of new collection\\n    /// @param admin admin address of new collection\\n    /// @param collectionType type of collection deployed\\n    event CollectionCreated(\\n        address indexed collection,\\n        address indexed admin,\\n        uint256 indexed collectionType\\n    );\\n\\n    /// @notice logs when new collection type is added\\n    /// @dev emitted when new collection type is added\\n    /// @param collectionType ID of collection type\\n    /// @param mastercopy address of collection type master copy\\n    /// @param data collection type specific data eg. name of collection type\\n    event NewCollectionTypeAdded(\\n        uint256 indexed collectionType,\\n        address mastercopy,\\n        bytes data\\n    );\\n\\n    //------------------------------------------------------//\\n    //\\n    //  Constructor\\n    //\\n    //------------------------------------------------------//\\n\\n    /// @notice constructor\\n    /// @param _masterCopy address of implementation contract\\n    /// @param _data collection type specific data\\n    /// @param _simplr address of simplr beneficiary\\n    /// @param _newRegistry address of affiliate registry\\n    /// @param _newProjectId ID of Simplr Collection in Affiliate Registry\\n    /// @param _simplrShares shares of simplr, eg. 15% = parseUnits(15,16) or toWei(0.15) or 15*10^16\\n    /// @param _upfrontFee upfront fee to start a new collection\\n    constructor(\\n        address _masterCopy,\\n        bytes memory _data,\\n        address _simplr,\\n        address _newRegistry,\\n        bytes32 _newProjectId,\\n        uint256 _simplrShares,\\n        uint256 _upfrontFee\\n    ) {\\n        require(_masterCopy != address(0), \\\"CFv2:001\\\");\\n        require(_simplr != address(0), \\\"CFv2:002\\\");\\n        simplr = _simplr;\\n        simplrShares = _simplrShares;\\n        upfrontFee = _upfrontFee;\\n        affiliateRegistry = _newRegistry;\\n        affiliateProjectId = _newProjectId;\\n        _addNewCollectionType(_masterCopy, 1, _data);\\n    }\\n\\n    //------------------------------------------------------//\\n    //\\n    //  Owner only functions\\n    //\\n    //------------------------------------------------------//\\n\\n    /// @notice set simplr fee receiver address\\n    /// @dev set Simplr Fee Receiver Gnosis Safe\\n    /// @param _simplr address of Simplr Fee receiver\\n    function setSimplr(address _simplr) external onlyOwner {\\n        require(_simplr != address(0) && simplr != _simplr, \\\"CFv2:003\\\");\\n        simplr = _simplr;\\n    }\\n\\n    /// @notice set Simplr Early Access Token address\\n    /// @dev it can only be ERC721 type contract\\n    /// @param _freePass adddress of SEAT (Simplr Early Access Token)\\n    function setFreePass(address _freePass) external onlyOwner {\\n        require(\\n            _freePass != address(0) &&\\n                IERC165(_freePass).supportsInterface(type(IERC721).interfaceId),\\n            \\\"CFv2:010\\\"\\n        );\\n        freePass = _freePass;\\n    }\\n\\n    /// @notice set Simplr Shares\\n    /// @dev update simplr shares\\n    /// @param _simplrShares new shares of simplr\\n    function setSimplrShares(uint256 _simplrShares) external onlyOwner {\\n        simplrShares = _simplrShares;\\n    }\\n\\n    /// @notice sets new upfront fee\\n    /// @dev sets new upfront fee\\n    /// @param _upfrontFee  new upfront fee\\n    function setUpfrontFee(uint256 _upfrontFee) external onlyOwner {\\n        upfrontFee = _upfrontFee;\\n    }\\n\\n    /// @notice set Simplr Affiliate Registry address\\n    /// @dev set new Simplr Affiliate registry address\\n    /// @param _newRegistry address of new simplr affiliate registry address\\n    function setAffiliateRegistry(address _newRegistry) external onlyOwner {\\n        affiliateRegistry = _newRegistry;\\n    }\\n\\n    /// @notice set project ID of Simplr Collection\\n    /// @dev Identifier of Simplr Collection in Affiliate Registry\\n    /// @param _newProjectId new project ID\\n    function setAffiliateProjectId(bytes32 _newProjectId) external onlyOwner {\\n        affiliateProjectId = _newProjectId;\\n    }\\n\\n    /// @notice set new master copy for a collection type\\n    /// @dev set new master copy for a collection type\\n    /// @param _newMastercopy new master copy address\\n    /// @param _type collection type ID\\n    function setMastercopy(address _newMastercopy, uint256 _type)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newMastercopy != address(0) &&\\n                _newMastercopy != mastercopies[_type],\\n            \\\"CFv2:004\\\"\\n        );\\n        require(mastercopies[_type] != address(0), \\\"CFv2:005\\\");\\n        mastercopies[_type] = _newMastercopy;\\n    }\\n\\n    /// @notice withdraw collected upfront fees\\n    /// @dev withdraw specific amount\\n    /// @param _value amount to withdraw\\n    function withdraw(uint256 _value) external onlyOwner {\\n        require(_value <= address(this).balance, \\\"CFv2:008\\\");\\n        totalWithdrawn += _value;\\n        Address.sendValue(payable(simplr), _value);\\n    }\\n\\n    /// @notice pause creation of collection\\n    /// @dev pauses all the public methods, using OpenZeppelin's Pausable.sol\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice unpause creation of collection\\n    /// @dev unpauses all the public methods, using OpenZeppelin's Pausable.sol\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice add new collection type\\n    /// @dev only owner can add new collection type\\n    /// @param _mastercopy address of collection mastercopy\\n    /// @param _type type of collection\\n    /// @param _data bytes string to store  arbitrary data about the collection in emitted events eg. explaination about the  type\\n    function addNewCollectionType(\\n        address _mastercopy,\\n        uint256 _type,\\n        bytes memory _data\\n    ) external onlyOwner {\\n        _addNewCollectionType(_mastercopy, _type, _data);\\n    }\\n\\n    //------------------------------------------------------//\\n    //\\n    //  Public function\\n    //\\n    //------------------------------------------------------//\\n\\n    /// @notice create new collection\\n    /// @dev deploys new collection using cloning\\n    /// @param _type type of collection to be deployed\\n    /// @param _baseCollection struct with params to setup base collection\\n    /// @param _presaleable  struct with params to setup presaleable\\n    /// @param _paymentSplitter struct with params to setup payment splitting\\n    /// @param _projectURIProvenance  struct with params to setup reveal details\\n    /// @param _metadata ipfs hash or CID for the metadata of collection\\n    function createCollection(\\n        uint256 _type,\\n        ICollection.BaseCollectionStruct memory _baseCollection,\\n        ICollection.PresaleableStruct memory _presaleable,\\n        ICollection.PaymentSplitterStruct memory _paymentSplitter,\\n        bytes32 _projectURIProvenance,\\n        ICollection.RoyaltyInfo memory _royalties,\\n        uint256 _reserveTokens,\\n        string memory _metadata,\\n        bool _isAffiliable,\\n        bool _useSeat,\\n        uint256 _seatId\\n    ) external payable whenNotPaused {\\n        require(mastercopies[_type] != address(0), \\\"CFv2:005\\\");\\n        if (_useSeat && IERC721(freePass).balanceOf(msg.sender) > 0) {\\n            _paymentSplitter.simplrShares = 1;\\n            IERC721(freePass).transferFrom(msg.sender, address(this), _seatId);\\n        } else {\\n            require(msg.value == upfrontFee, \\\"CFv2:006\\\");\\n            _paymentSplitter.simplrShares = simplrShares;\\n        }\\n        _paymentSplitter.simplr = simplr;\\n        address collection = createClone(mastercopies[_type]);\\n        ICollection(collection).setMetadata(_metadata);\\n        if (\\n            _isAffiliable &&\\n            affiliateRegistry != address(0) &&\\n            affiliateProjectId != bytes32(0)\\n        ) {\\n            ICollection(collection).setupWithAffiliate(\\n                _baseCollection,\\n                _presaleable,\\n                _paymentSplitter,\\n                _projectURIProvenance,\\n                _royalties,\\n                _reserveTokens,\\n                IAffiliateRegistry(affiliateRegistry),\\n                affiliateProjectId\\n            );\\n        } else {\\n            ICollection(collection).setup(\\n                _baseCollection,\\n                _presaleable,\\n                _paymentSplitter,\\n                _projectURIProvenance,\\n                _royalties,\\n                _reserveTokens\\n            );\\n        }\\n        emit CollectionCreated(collection, _baseCollection.admin, _type);\\n    }\\n\\n    //------------------------------------------------------//\\n    //\\n    //  Internal function\\n    //\\n    //------------------------------------------------------//\\n\\n    /// @notice internal method to add new collection types\\n    /// @dev used to add new collection type by constrcutor too\\n    /// @param _mastercopy address of collection mastercopy\\n    /// @param _type type of collection\\n    /// @param _data bytes string to store  arbitrary data about the collection in emitted events eg. explaination about the  type\\n    function _addNewCollectionType(\\n        address _mastercopy,\\n        uint256 _type,\\n        bytes memory _data\\n    ) private {\\n        require(mastercopies[_type] == address(0), \\\"CFv2:009\\\");\\n        require(_mastercopy != address(0), \\\"CFv2:001\\\");\\n        mastercopies[_type] = _mastercopy;\\n        emit NewCollectionTypeAdded(_type, _mastercopy, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/common/utils/CloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/*\\nThe MIT License (MIT)\\nCopyright (c) 2018 Murray Software, LLC.\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n//solhint-disable max-line-length\\n//solhint-disable no-inline-assembly\\n\\ncontract CloneFactory {\\n    function createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function isClone(address target, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Simplr/collection/interface/ICollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2022 Simplr\\npragma solidity 0.8.11;\\n\\nimport \\\"./ICollectionStruct.sol\\\";\\nimport \\\"../../affiliate/IAffiliateRegistry.sol\\\";\\n\\n/// @title Collection Interface\\n/// @author Chain Labs\\n/// @notice interface to with setup functionality of collection.\\ninterface ICollection is ICollectionStruct {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    /// @notice setup collection with affiliate module\\n    /// @dev setup all the modules and base collection including affiliate module\\n    /// @param _baseCollection struct conatining setup parameters of base collection\\n    /// @param _presaleable struct conatining setup parameters of presale module\\n    /// @param _paymentSplitter struct conatining setup parameters of payment splitter module\\n    /// @param _projectURIProvenance provenance of revealed project URI\\n    /// @param _royalties struct conatining setup parameters of royalties module\\n    /// @param _reserveTokens number of tokens to be reserved\\n    /// @param _registry address of Simplr Affiliate registry\\n    /// @param _projectId project ID of Simplr Collection\\n    function setupWithAffiliate(\\n        BaseCollectionStruct memory _baseCollection,\\n        PresaleableStruct memory _presaleable,\\n        PaymentSplitterStruct memory _paymentSplitter,\\n        bytes32 _projectURIProvenance,\\n        RoyaltyInfo memory _royalties,\\n        uint256 _reserveTokens,\\n        IAffiliateRegistry _registry,\\n        bytes32 _projectId\\n    ) external;\\n\\n    /// @notice setup collection\\n    /// @dev setup all the modules and base collection\\n    /// @param _baseCollection struct conatining setup parameters of base collection\\n    /// @param _presaleable struct conatining setup parameters of presale module\\n    /// @param _paymentSplitter struct conatining setup parameters of payment splitter module\\n    /// @param _projectURIProvenance provenance of revealed project URI\\n    /// @param _royalties struct conatining setup parameters of royalties module\\n    /// @param _reserveTokens number of tokens to be reserved\\n    function setup(\\n        BaseCollectionStruct memory _baseCollection,\\n        PresaleableStruct memory _presaleable,\\n        PaymentSplitterStruct memory _paymentSplitter,\\n        bytes32 _projectURIProvenance,\\n        RoyaltyInfo memory _royalties,\\n        uint256 _reserveTokens\\n    ) external;\\n\\n    /// @notice updates the collection details (not collection assets)\\n    /// @dev updates the IPFS CID that points to new collection details\\n    /// @param _metadata new IPFS CID with updated collection details\\n    function setMetadata(string memory _metadata) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Simplr/collection/interface/ICollectionStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2022 Simplr\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Collection Struct Interface\\n * @dev   interface to for all the struct required for setup parameters.\\n * @author Chain Labs Team\\n */\\n/// @title Collection Struct Interface\\n/// @author Chain Labs\\n/// @notice interface for all the struct required for setup parameters.\\ninterface ICollectionStruct {\\n    struct BaseCollectionStruct {\\n        string name;\\n        string symbol;\\n        address admin;\\n        uint256 maximumTokens;\\n        uint16 maxPurchase;\\n        uint16 maxHolding;\\n        uint256 price;\\n        uint256 publicSaleStartTime;\\n        string projectURI;\\n    }\\n\\n    struct Whitelist {\\n        bytes32 root;\\n        string cid;\\n    }\\n\\n    struct PresaleableStruct {\\n        uint256 presaleReservedTokens;\\n        uint256 presalePrice;\\n        uint256 presaleStartTime;\\n        uint256 presaleMaxHolding;\\n        Whitelist presaleWhitelist;\\n    }\\n\\n    struct PaymentSplitterStruct {\\n        address simplr;\\n        uint256 simplrShares;\\n        address[] payees;\\n        uint256[] shares;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Simplr/affiliate/IAffiliateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2022 Simplr\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Affiliate Registry Interface\\n * @dev   Interface with necessary functionalities of Affiliate Registry.\\n * @author Chain Labs Team\\n */\\ninterface IAffiliateRegistry {\\n    function setAffiliateShares(uint256 _affiliateShares, bytes32 _projectId)\\n        external;\\n\\n    function registerProject(string memory projectName, uint256 affiliateShares)\\n        external\\n        returns (bytes32 projectId);\\n\\n    function getProjectId(string memory _projectName, address _projectOwner)\\n        external\\n        view\\n        returns (bytes32 projectId);\\n\\n    function getAffiliateShareValue(\\n        bytes memory signature,\\n        address affiliate,\\n        bytes32 projectId,\\n        uint256 value\\n    ) external view returns (bool _isAffiliate, uint256 _shareValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_simplr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_newProjectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_simplrShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upfrontFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionType\",\"type\":\"uint256\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mastercopy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NewCollectionTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addNewCollectionType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateProjectId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maximumTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxPurchase\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxHolding\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectURI\",\"type\":\"string\"}],\"internalType\":\"struct ICollectionStruct.BaseCollectionStruct\",\"name\":\"_baseCollection\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"presaleReservedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleMaxHolding\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICollectionStruct.Whitelist\",\"name\":\"presaleWhitelist\",\"type\":\"tuple\"}],\"internalType\":\"struct ICollectionStruct.PresaleableStruct\",\"name\":\"_presaleable\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"simplr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"simplrShares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICollectionStruct.PaymentSplitterStruct\",\"name\":\"_paymentSplitter\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_projectURIProvenance\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFraction\",\"type\":\"uint96\"}],\"internalType\":\"struct ICollection.RoyaltyInfo\",\"name\":\"_royalties\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_reserveTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isAffiliable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useSeat\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_seatId\",\"type\":\"uint256\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freePass\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mastercopies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newProjectId\",\"type\":\"bytes32\"}],\"name\":\"setAffiliateProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRegistry\",\"type\":\"address\"}],\"name\":\"setAffiliateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_freePass\",\"type\":\"address\"}],\"name\":\"setFreePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMastercopy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setMastercopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_simplr\",\"type\":\"address\"}],\"name\":\"setSimplr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_simplrShares\",\"type\":\"uint256\"}],\"name\":\"setSimplrShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upfrontFee\",\"type\":\"uint256\"}],\"name\":\"setUpfrontFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simplr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simplrShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upfrontFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollectionFactoryV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b58f0e5a449750d0bd758b4f0a6f7faf67e4c65f00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000794ed971efc3d13940f00122fa96b48bb612386a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000016436f6c6c656374696f6e203031202d2045524337323100000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}