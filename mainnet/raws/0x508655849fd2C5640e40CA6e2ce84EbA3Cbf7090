{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/OpenStarterStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-StarterLabs-Business-Source\\n/*\\n-----------------------------------------------------------------------------\\nThe Licensed Work is (c) 2022 Starter Labs, LLC\\nLicensor:             Starter Labs, LLC\\nLicensed Work:        OpenStarter v1\\nEffective Date:       2022 March 1\\nFull License Text:    https://github.com/StarterXyz/LICENSE\\n-----------------------------------------------------------------------------\\n */\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Address.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/ERC20.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\nimport \\\"./OpenStarterLibrary.sol\\\";\\n\\ncontract OpenStarterStaking is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    OpenStarterLibrary public starterLibrary;\\n\\n    event Staked(address indexed from, address _token, uint256 amount);\\n    event Unstaked(address indexed from, address _token, uint256 amount);\\n\\n    struct AccountInfo {\\n        uint256[15] balances;\\n        uint256 lastStakedTimestamp;\\n        uint256 lastUnstakedTimestamp;\\n    }\\n\\n    mapping(address => AccountInfo) public accounts;\\n\\n    address[15] public stakingTokens; // Staking Tokens\\n    address[] public stakers; // Stakers Addresses\\n    uint256[15] public minStakeTime = [\\n        5 * 24 * 3600,\\n        7 * 24 * 3600,\\n        10 * 24 * 3600,\\n        14 * 24 * 3600\\n    ]; // MinStakeTime\\n\\n    uint256 maxTierCount = 4;\\n\\n    modifier onlyStarterDev() {\\n        require(\\n            msg.sender == starterLibrary.owner() ||\\n                starterLibrary.getStarterDev(msg.sender),\\n            \\\"Dev Required\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _starterLibrary,\\n        address _apeToken,\\n        address _startToken,\\n        address _sosToken\\n    ) public {\\n        starterLibrary = OpenStarterLibrary(_starterLibrary);\\n        stakingTokens[0] = _apeToken;\\n        stakingTokens[1] = _startToken;\\n        stakingTokens[2] = _sosToken;\\n    }\\n\\n    function stake(uint256 stakeTokenIndex, uint256 _amount)\\n        public\\n        nonReentrant\\n    {\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        ERC20(stakingTokens[stakeTokenIndex]).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        AccountInfo storage account = accounts[msg.sender];\\n        account.balances[stakeTokenIndex] = account\\n            .balances[stakeTokenIndex]\\n            .add(_amount);\\n\\n        if (\\n            account.lastStakedTimestamp == 0 &&\\n            account.lastUnstakedTimestamp == 0\\n        ) {\\n            stakers.push(msg.sender);\\n        }\\n\\n        if (account.lastStakedTimestamp == 0) {\\n            account.lastStakedTimestamp = block.timestamp;\\n        }\\n\\n        emit Staked(msg.sender, stakingTokens[stakeTokenIndex], _amount);\\n    }\\n\\n    function unstake(uint256 stakeTokenIndex, uint256 _amount)\\n        external\\n        nonReentrant\\n    {\\n        AccountInfo storage account = accounts[msg.sender];\\n        require(!address(msg.sender).isContract(), \\\"No contracts\\\");\\n\\n        require(account.balances[stakeTokenIndex] > 0, \\\"Nothing to unstake\\\");\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n        if (account.balances[stakeTokenIndex] < _amount) {\\n            _amount = account.balances[stakeTokenIndex];\\n        }\\n        account.balances[stakeTokenIndex] = account\\n            .balances[stakeTokenIndex]\\n            .sub(_amount);\\n\\n        account.lastStakedTimestamp = 0; // reset earlier staking time\\n        account.lastUnstakedTimestamp = block.timestamp;\\n        ERC20(stakingTokens[stakeTokenIndex]).transfer(msg.sender, _amount);\\n\\n        emit Unstaked(msg.sender, stakingTokens[stakeTokenIndex], _amount);\\n    }\\n\\n    function getStakerTier(address _staker) public view returns (uint256) {\\n        uint256 userTier = 0;\\n        uint256 i = 0;\\n        for (i = 0; i < 5; i++) {\\n            uint256 userTokenTier = starterLibrary.getUserTier(\\n                i,\\n                accounts[_staker].balances[i] +\\n                    starterLibrary.getExternalStaked(i, _staker)\\n            );\\n\\n            if (userTier < userTokenTier) {\\n                userTier = userTokenTier;\\n                if (userTier == maxTierCount)\\n                    // break if already in max tier\\n                    break;\\n            }\\n        }\\n        uint256 stakedTime = block.timestamp -\\n            (\\n                accounts[_staker].lastStakedTimestamp == 0\\n                    ? accounts[_staker].lastUnstakedTimestamp\\n                    : accounts[_staker].lastStakedTimestamp\\n            );\\n\\n        for (i = 0; i < maxTierCount; i++) {\\n            if (stakedTime < minStakeTime[i]) {\\n                break;\\n            }\\n        }\\n        if (userTier > i) {\\n            return i;\\n        }\\n        return userTier;\\n    }\\n\\n    function getStakerCount(uint256 _tier) public view returns (uint256) {\\n        uint256 i = 0;\\n        uint256 count = 0;\\n        uint256 stakersLen = stakers.length;\\n        for (i = 0; i < stakersLen; i++) {\\n            if (_tier == getStakerTier(stakers[i])) {\\n                count = count.add(1);\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function setLibrary(address _newInfo) external onlyStarterDev {\\n        starterLibrary = OpenStarterLibrary(_newInfo);\\n    }\\n\\n    function getUserInfo(address _staker)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            getStakerTier(_staker),\\n            accounts[_staker].lastStakedTimestamp,\\n            accounts[_staker].lastUnstakedTimestamp\\n        );\\n    }\\n\\n    function getUserBalances(address _staker)\\n        public\\n        view\\n        returns (uint256[15] memory)\\n    {\\n        return accounts[_staker].balances;\\n    }\\n\\n    function setStakingToken(uint256 _index, address _tokenAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        stakingTokens[_index] = _tokenAddress;\\n    }\\n\\n    function setMaxTierCount(uint256 _tierCount) external onlyStarterDev {\\n        maxTierCount = _tierCount;\\n    }\\n\\n    function setMinStakeTime(uint256 _index, uint256 _value)\\n        external\\n        onlyStarterDev\\n    {\\n        minStakeTime[_index] = _value;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n * @dev Basic contract for authorization control.\\n * @author dicether\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event LogOwnerShipTransferInitiated(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Modifier, which throws if called by other account than owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set contract creator as initial owner\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        pendingOwner = _newOwner;\\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev PendingOwner can accept ownership.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n        emit LogOwnerShipTransferred(owner, pendingOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) _balances;\\n\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    uint256 _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/OpenStarterLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-StarterLabs-Business-Source\\n/*\\n-----------------------------------------------------------------------------\\nThe Licensed Work is (c) 2022 Starter Labs, LLC\\nLicensor:             Starter Labs, LLC\\nLicensed Work:        OpenStarter v1\\nEffective Date:       2022 March 1\\nFull License Text:    https://github.com/StarterXyz/LICENSE\\n-----------------------------------------------------------------------------\\n */\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/ERC20.sol\\\";\\n\\ninterface IOpenStarterStaking {\\n    function accounts(address)\\n        external\\n        view\\n        returns (\\n            uint256[15] memory,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getUserBalances(address) external view returns (uint256[] memory);\\n\\n    function getStakerTier(address) external view returns (uint256);\\n}\\n\\ninterface IExternalStaking {\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ncontract OpenStarterLibrary is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256[15][10] private tiers; // tiers[0][] is APE; tiers[1][] is START;\\n\\n    // Archeologist:    20K+ START OR 10K APE for 14+ days\\n    // Conservator:     10K+ START OR 1K APE for 10+ days\\n    // Researcher:      1K+ START OR 100 APE for 7+ days\\n    // Navigator:       100+ START OR 10 APE for 5+ days\\n    // Lottery:         <Navigator or no staking at all\\n\\n    mapping(address => bool) private starterDevs;\\n\\n    IOpenStarterStaking public openStarterStakingPool;\\n    IExternalStaking public externalStaking;\\n\\n    address private nftFactoryAddress;\\n    address private saleFactoryAddress;\\n    address private vaultFactoryAddress;\\n\\n    address[] public nfts;\\n    address[] public sales;\\n\\n    uint256 private devFeePercentage = 10; // 10% dev fee for INOs\\n\\n    address private WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint256 private allocationCount = 4;\\n    uint256[] private allocationPercentage = [5, 10, 20, 30, 35];\\n    uint256[] private allocationTime = [30 * 60, 60 * 60, 90 * 60, 120 * 60];\\n\\n    uint256[15] private minVoterBalance = [\\n        10 * 1e18,\\n        100 * 1e18,\\n        100000 * 1e18\\n    ]; // min APE needed to vote\\n    uint256[15] private minYesVotesThreshold = [\\n        10000000 * 1e18,\\n        100000 * 1e18,\\n        100000000000 * 1e18\\n    ]; // min YES votes needed to pass\\n    uint256 private externalTokenIndex = 0;\\n\\n    string public featured; // ipfs link for featured projects list\\n    string public upcomings; // ipfs link for upcoming projects list\\n    string public finished; // ipfs link for finished projects list\\n\\n    constructor(address _openStarterStakingPool, address _externalStaking)\\n        public\\n    {\\n        openStarterStakingPool = IOpenStarterStaking(_openStarterStakingPool);\\n        externalStaking = IExternalStaking(_externalStaking);\\n\\n        starterDevs[address(0xf7e925818a20E5573Ee0f3ba7aBC963e17f2c476)] = true;\\n        starterDevs[address(0x283B3b8f340E8FB94D55b17E906744a74074cD07)] = true;\\n\\n        tiers[0][0] = 10 * 1e18; // tiers: 10+ APE, 100+ APE, 1K+ APE, 10K+ APE\\n        tiers[0][1] = 100 * 1e18;\\n        tiers[0][2] = 1000 * 1e18;\\n        tiers[0][3] = 10000 * 1e18;\\n\\n        tiers[1][0] = 100 * 1e18; // tiers: 100+ START, 1K+ START, 10K+ START, 20K+ START\\n        tiers[1][1] = 1000 * 1e18;\\n        tiers[1][2] = 10000 * 1e18;\\n        tiers[1][3] = 20000 * 1e18;\\n    }\\n\\n    modifier onlyStarterDev() {\\n        require(\\n            owner == msg.sender || starterDevs[msg.sender],\\n            \\\"onlyStarterDev\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(\\n            owner == msg.sender ||\\n                starterDevs[msg.sender] ||\\n                nftFactoryAddress == msg.sender ||\\n                saleFactoryAddress == msg.sender,\\n            \\\"onlyFactory\\\"\\n        );\\n        _;\\n    }\\n\\n    function getTier(uint256 tokenIndex, uint256 tierIndex)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return tiers[tokenIndex][tierIndex];\\n    }\\n\\n    function setTier(\\n        uint256 tokenIndex,\\n        uint256 tierIndex,\\n        uint256 _value\\n    ) external onlyStarterDev {\\n        tiers[tokenIndex][tierIndex] = _value;\\n    }\\n\\n    function getUserTier(uint256 stakingTokenIndex, uint256 amount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 i = 0;\\n        uint256 tier = 0;\\n        uint256 tiersLen = tiers[stakingTokenIndex].length;\\n        for (i = 0; i < tiersLen; i++) {\\n            if (\\n                amount >= tiers[stakingTokenIndex][i] &&\\n                tiers[stakingTokenIndex][i] > 0\\n            ) {\\n                tier = i + 1;\\n            } else {\\n                break;\\n            }\\n        }\\n        return tier;\\n    }\\n\\n    function getStarterDev(address _dev) external view returns (bool) {\\n        return starterDevs[_dev];\\n    }\\n\\n    function setStarterDevAddress(address _newDev) external onlyOwner {\\n        starterDevs[_newDev] = true;\\n    }\\n\\n    function removeStarterDevAddress(address _oldDev) external onlyOwner {\\n        starterDevs[_oldDev] = false;\\n    }\\n\\n    function getNftFactoryAddress() external view returns (address) {\\n        return nftFactoryAddress;\\n    }\\n\\n    function setNftFactoryAddress(address _newFactoryAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        nftFactoryAddress = _newFactoryAddress;\\n    }\\n\\n    function getSaleFactoryAddress() external view returns (address) {\\n        return saleFactoryAddress;\\n    }\\n\\n    function setSaleFactoryAddress(address _newFactoryAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        saleFactoryAddress = _newFactoryAddress;\\n    }\\n\\n    function getVaultFactoryAddress() external view returns (address) {\\n        return vaultFactoryAddress;\\n    }\\n\\n    function setVaultFactoryAddress(address _newFactoryAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        vaultFactoryAddress = _newFactoryAddress;\\n    }\\n\\n    function addNfts(address _nftAddress)\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        nfts.push(_nftAddress);\\n        return nfts.length - 1;\\n    }\\n\\n    function addSaleAddress(address _saleAddress)\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        sales.push(_saleAddress);\\n        return sales.length - 1;\\n    }\\n\\n    function addSales(address[] calldata _saleAddresses) external onlyFactory {\\n        uint256 salesLen = _saleAddresses.length;\\n        for (uint256 i = 0; i < salesLen; i++) {\\n            sales.push(_saleAddresses[i]);\\n        }\\n    }\\n\\n    function setNftAddress(uint256 _index, address _nftAddress)\\n        external\\n        onlyFactory\\n    {\\n        nfts[_index] = _nftAddress;\\n    }\\n\\n    function setSaleAddress(uint256 _index, address _saleAddress)\\n        external\\n        onlyFactory\\n    {\\n        sales[_index] = _saleAddress;\\n    }\\n\\n    function getStakingPool() external view returns (address) {\\n        return address(openStarterStakingPool);\\n    }\\n\\n    function setStakingPool(address _openStarterStakingPool)\\n        external\\n        onlyStarterDev\\n    {\\n        openStarterStakingPool = IOpenStarterStaking(_openStarterStakingPool);\\n    }\\n\\n    function getExternalStaking() external view returns (address) {\\n        return address(externalStaking);\\n    }\\n\\n    function setExternalStaking(address _openStarterStakingPool)\\n        external\\n        onlyStarterDev\\n    {\\n        externalStaking = IExternalStaking(_openStarterStakingPool);\\n    }\\n\\n    function getNftsCount() external view returns (uint256) {\\n        return nfts.length;\\n    }\\n\\n    function getNftAddress(uint256 nftId) external view returns (address) {\\n        return nfts[nftId];\\n    }\\n\\n    function getSalesCount() external view returns (uint256) {\\n        return sales.length;\\n    }\\n\\n    function getSaleAddress(uint256 saleId) external view returns (address) {\\n        return sales[saleId];\\n    }\\n\\n    function getDevFeePercentage() external view returns (uint256) {\\n        return devFeePercentage;\\n    }\\n\\n    function setDevFeePercentage(uint256 _devFeePercentage)\\n        external\\n        onlyStarterDev\\n    {\\n        devFeePercentage = _devFeePercentage;\\n    }\\n\\n    function getWETH() external view returns (address) {\\n        return WETH;\\n    }\\n\\n    function setWETH(address _WETH) external onlyStarterDev {\\n        WETH = _WETH;\\n    }\\n\\n    function getAllocationCount() external view returns (uint256) {\\n        return allocationCount;\\n    }\\n\\n    function setAllocationCount(uint256 _count) external onlyStarterDev {\\n        allocationCount = _count;\\n    }\\n\\n    function getAllocationPercentage(uint256 _index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allocationPercentage[_index];\\n    }\\n\\n    function setAllocationPercentage(uint256 _index, uint256 _value)\\n        external\\n        onlyStarterDev\\n    {\\n        allocationPercentage[_index] = _value;\\n    }\\n\\n    function getAllocationTime(uint256 _index) external view returns (uint256) {\\n        return allocationTime[_index];\\n    }\\n\\n    function setAllocationTime(uint256 _index, uint256 _value)\\n        external\\n        onlyStarterDev\\n    {\\n        allocationTime[_index] = _value;\\n    }\\n\\n    function getStaked(address _sender, uint256 _voteTokenIndex)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory balances = openStarterStakingPool.getUserBalances(\\n            _sender\\n        );\\n        uint256 externalBalance = 0;\\n        if (\\n            address(externalStaking) !=\\n            0x0000000000000000000000000000000000000000 &&\\n            _voteTokenIndex == externalTokenIndex // only include outside bal if its the votetoken\\n        ) {\\n            externalBalance = externalStaking.balanceOf(_sender);\\n        }\\n        return balances[_voteTokenIndex] + externalBalance;\\n    }\\n\\n    function getStakerTier(address _staker) external view returns (uint256) {\\n        return openStarterStakingPool.getStakerTier(_staker);\\n    }\\n\\n    function getMinVoterBalance(uint256 _voteTokenIndex)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minVoterBalance[_voteTokenIndex];\\n    }\\n\\n    function setMinVoterBalance(uint256 _voteTokenIndex, uint256 _balance)\\n        external\\n        onlyStarterDev\\n    {\\n        minVoterBalance[_voteTokenIndex] = _balance;\\n    }\\n\\n    function getMinYesVotesThreshold(uint256 _voteTokenIndex)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minYesVotesThreshold[_voteTokenIndex];\\n    }\\n\\n    function setMinYesVotesThreshold(uint256 _voteTokenIndex, uint256 _balance)\\n        external\\n        onlyStarterDev\\n    {\\n        minYesVotesThreshold[_voteTokenIndex] = _balance;\\n    }\\n\\n    function getTierByTime(uint256 _openTime, uint256 _currentTimestamp)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (\\n            _currentTimestamp >= _openTime &&\\n            _currentTimestamp <= _openTime + allocationTime[0]\\n        ) {\\n            return 4;\\n        }\\n        for (uint256 i = 0; i < allocationCount - 1; i++) {\\n            if (\\n                _currentTimestamp > _openTime + allocationTime[i] &&\\n                _currentTimestamp <= _openTime + allocationTime[i + 1]\\n            ) {\\n                return allocationCount - i - 1;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function setFeaturedProjects(string memory _url) external onlyStarterDev {\\n        featured = _url;\\n    }\\n\\n    function setUpcomingProjects(string memory _url) external onlyStarterDev {\\n        upcomings = _url;\\n    }\\n\\n    function setFinishedProjects(string memory _url) external onlyStarterDev {\\n        finished = _url;\\n    }\\n\\n    function getExternalTokenIndex() external view returns (uint256) {\\n        return externalTokenIndex;\\n    }\\n\\n    function setExternalTokenIndex(uint256 _index) external onlyStarterDev {\\n        externalTokenIndex = _index;\\n    }\\n\\n    function getExternalStaked(uint256 tokenIndex, address _staker)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (tokenIndex != externalTokenIndex) return 0;\\n        if (\\n            address(externalStaking) ==\\n            0x0000000000000000000000000000000000000000\\n        ) return 0;\\n        return externalStaking.balanceOf(_staker);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterLibrary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_startToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sosToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastStakedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnstakedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"getStakerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256[15]\",\"name\":\"\",\"type\":\"uint256[15]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newInfo\",\"type\":\"address\"}],\"name\":\"setLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierCount\",\"type\":\"uint256\"}],\"name\":\"setMaxTierCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starterLibrary\",\"outputs\":[{\"internalType\":\"contract OpenStarterLibrary\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpenStarterStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "000000000000000000000000ae979a25f09bb3b483046481665fde15191be3830000000000000000000000004d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000001d7ca62f6af49ec66f6680b8606e634e55ef22c1000000000000000000000000edd27c961ce6f79afc16fd287d934ee31a90d7d1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}