{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    function approve(address spender, uint256 amount) external;\r\n}\r\n\r\ncontract testSmartContractV3 {\r\n    address constant OWNER = 0xB7d691867E549C7C54C559B7fc93965403AC65dF;\r\n    address constant inchRouter = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == OWNER, \"caller is not the owner!\");\r\n        _;\r\n    }\r\n\r\n    function doSwapTestOnly(\r\n        address addressStableToken,\r\n        address addressShitCoinToken,\r\n        uint256 amountOutShitCoin,\r\n        uint256 amountOutStable,\r\n        uint256 _amountIn,\r\n        bytes calldata msgDataBuy,\r\n        bytes calldata msgDataSell\r\n    ) public onlyOwner returns (uint) {\r\n\r\n         addressStableToken.call(\r\n                abi.encodeWithSelector(\r\n                    0x23b872dd,\r\n                    OWNER,\r\n                    address(this),\r\n                    _amountIn\r\n                )\r\n            );\r\n        IERC20(addressStableToken).approve(inchRouter, amountOutStable * 2);\r\n\r\n        (bool success1, ) = inchRouter.call(msgDataBuy);\r\n\r\n        require(success1, \"!success1\");\r\n\r\n        uint256 ShitCoinbalance = IERC20(addressShitCoinToken).balanceOf(\r\n            address(this)\r\n        );\r\n        require(\r\n            ShitCoinbalance >= amountOutShitCoin,\r\n            \"after buy !ShitCoinbalance>=amountOutShitCoin\"\r\n        );\r\n\r\n        IERC20(addressShitCoinToken).approve(inchRouter, ShitCoinbalance);\r\n\r\n        (bool success2, ) = inchRouter.call(msgDataSell);\r\n        require(success2, \"!success2\");\r\n\r\n        uint256 StableBalance = IERC20(addressStableToken).balanceOf(\r\n            address(this)\r\n        );\r\n        require(\r\n            StableBalance + 5 >= amountOutStable,\r\n            \"after sell !StableBalance > amountOutStable\"\r\n        );\r\n        return StableBalance;\r\n    }\r\n\r\n    // ///////////////////////////////////    WITHDRAW        ///////////////////////////\r\n\r\n    function withdrawToken(address _tokenAddress) public onlyOwner {\r\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(OWNER, balance);\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressStableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressShitCoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutShitCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutStable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"msgDataBuy\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"msgDataSell\",\"type\":\"bytes\"}],\"name\":\"doSwapTestOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "testSmartContractV3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4403192f8d12ffa2511111d6df0f5ceb30b74b129ef2d21f1770c2e92482038b"}]}