{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/XJoyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"../libraries/BlackListToken.sol\\\";\\r\\nimport \\\"../presale/JoyPresale.sol\\\";\\r\\n\\r\\ncontract XJoyToken is BlackListToken {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // State variables\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    uint256 public manualMinted;\\r\\n    address privatePresaleAddress;\\r\\n    address seedPresaleAddress;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Events & Modifiers\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Initialization functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function initialize(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 initialSupply\\r\\n    ) public virtual initializer {\\r\\n        __ERC20_init(name, symbol);\\r\\n        __BlackList_init();\\r\\n        _mint(_msgSender(), initialSupply);\\r\\n        addAuthorized(_msgSender());\\r\\n        manualMinted = 0;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // External functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return \\\"xJOY Token\\\";\\r\\n    }\\r\\n    \\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return \\\"xJOY\\\";\\r\\n    }\\r\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\r\\n        _mint(_to, _amount);\\r\\n        manualMinted = manualMinted.add(_amount);\\r\\n    }\\r\\n\\r\\n    // add purchaser\\r\\n    function addPurchaser(address addr) public onlyAuthorized {\\r\\n      addBlackList(addr);\\r\\n    }\\r\\n\\r\\n    function updatePresaleAddresses(address _privatePresaleAddress, address _seedPresaleAddress) public onlyAuthorized {\\r\\n        privatePresaleAddress = _privatePresaleAddress;\\r\\n        seedPresaleAddress = _seedPresaleAddress;\\r\\n    }\\r\\n\\r\\n    function isTransferable(address _from, address _to) public view virtual override returns (bool) {\\r\\n        if (isBlackListChecking) {\\r\\n            // require(!isBlackListed[_from], \\\"BlackListToken@isTransferable: _from is in isBlackListed\\\");\\r\\n            // require(!isBlackListed[_to] || isWhiteListed[_to], \\\"BlackListToken@isTransferable: _to is in isBlackListed\\\");\\r\\n            require(!isBlackListed[_from] || isWhiteListed[_to], \\\"XJoyToken@isTransferable: _from is in isBlackListed\\\");            \\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BlackListToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"../utils/AuthorizableU.sol\\\";\\r\\n\\r\\ncontract BlackListToken is ERC20Upgradeable, AuthorizableU {\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // State variables\\r\\n    ////////////////////////////////////////////////////////////////////////    \\r\\n    \\r\\n    bool public isBlackListChecking;\\r\\n    mapping (address => bool) public isBlackListed; // for from address\\r\\n    mapping (address => bool) public isWhiteListed; // for to address\\r\\n    \\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Events & Modifiers\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    event SetBlackList(address[] _users, bool _status);\\r\\n    event AddedBlackList(address _user);\\r\\n    event RemovedBlackList(address _user);\\r\\n\\r\\n    event SetWhiteList(address[] _users, bool _status);\\r\\n    event AddedWhiteList(address _user);\\r\\n    event RemovedWhiteList(address _user);    \\r\\n\\r\\n    modifier whenTransferable(address _from, address _to) {\\r\\n        require(isTransferable(_from, _to), \\\"BlackListToken@whenTransferable: transfer isn't allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Initialization functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function __BlackList_init() internal virtual initializer {\\r\\n        __Authorizable_init();\\r\\n\\r\\n        isBlackListChecking = true;\\r\\n    }\\r\\n    \\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // External functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    \\r\\n    function startBlackList(bool _status) public onlyAuthorized {\\r\\n        isBlackListChecking = _status;\\r\\n    }\\r\\n\\r\\n    // Blacklist\\r\\n    function setBlackList(address[] memory _addrs, bool _status) public onlyAuthorized {\\r\\n        for (uint256 i; i < _addrs.length; ++i) {\\r\\n            isBlackListed[_addrs[i]] = _status;\\r\\n        }\\r\\n\\r\\n        emit SetBlackList(_addrs, _status);\\r\\n    }\\r\\n\\r\\n    function addBlackList(address _toAdd) public onlyAuthorized {\\r\\n        isBlackListed[_toAdd] = true;\\r\\n\\r\\n        emit AddedBlackList(_toAdd);\\r\\n    }\\r\\n\\r\\n    function removeBlackList(address _toRemove) public onlyAuthorized {\\r\\n        isBlackListed[_toRemove] = false;\\r\\n\\r\\n        emit RemovedBlackList(_toRemove);\\r\\n    }\\r\\n    \\r\\n    // Whitelist\\r\\n    function setWhiteList(address[] memory _addrs, bool _status) public onlyAuthorized {\\r\\n        for (uint256 i; i < _addrs.length; ++i) {\\r\\n            isWhiteListed[_addrs[i]] = _status;\\r\\n        }\\r\\n\\r\\n        emit SetWhiteList(_addrs, _status);\\r\\n    }\\r\\n\\r\\n    function addWhiteList(address _toAdd) public onlyAuthorized {\\r\\n        isWhiteListed[_toAdd] = true;\\r\\n\\r\\n        emit AddedWhiteList(_toAdd);\\r\\n    }\\r\\n\\r\\n    function removeWhiteList (address _toRemove) public onlyAuthorized {\\r\\n        isWhiteListed[_toRemove] = false;\\r\\n\\r\\n        emit RemovedWhiteList(_toRemove);\\r\\n    }\\r\\n    \\r\\n    function isTransferable(address _from, address _to) public view virtual returns (bool) {\\r\\n        if (isBlackListChecking) {\\r\\n            // require(!isBlackListed[_from], \\\"BlackListToken@isTransferable: _from is in isBlackListed\\\");\\r\\n            // require(!isBlackListed[_to] || isWhiteListed[_to], \\\"BlackListToken@isTransferable: _to is in isBlackListed\\\");\\r\\n            require(!isBlackListed[_from] || isWhiteListed[_to], \\\"BlackListToken@isTransferable: _from is in isBlackListed\\\");            \\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Internal functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _transfer(address _from, address _to, uint256 _amount) internal virtual override whenTransferable(_from, _to) {\\r\\n        super._transfer(_from, _to, _amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/presale/JoyPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../utils/AuthorizableU.sol\\\";\\r\\nimport \\\"../token/XJoyToken.sol\\\";\\r\\n\\r\\ncontract JoyPresale is ContextUpgradeable, AuthorizableU {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // State variables\\r\\n    ////////////////////////////////////////////////////////////////////////    \\r\\n\\r\\n    // Info of each coin like USDT, USDC\\r\\n    struct CoinInfo {\\r\\n        address addr;\\r\\n        uint256 rate;\\r\\n    }\\r\\n\\r\\n    // Info of each Vesting\\r\\n    struct VestingInfo {\\r\\n        uint8   initClaimablePercent;   // Init Claimable Percent\\r\\n        uint256 lockingDuration;        // Locking Duration\\r\\n        uint256 vestingDuration;        // Vesting Duration\\r\\n    }\\r\\n\\r\\n    // Info of each Purchaser\\r\\n    struct UserInfo {\\r\\n        uint8   vestingIndex;           // Index of VestingInfo\\r\\n        uint256 depositedAmount;        // How many Coins amount the user has deposited.\\r\\n        uint256 purchasedAmount;        // How many JOY tokens the user has purchased.\\r\\n        uint256 withdrawnAmount;        // Withdrawn amount\\r\\n        uint256 firstDepositedTime;     // Last Deposited time\\r\\n        uint256 lastWithdrawnTime;      // Last Withdrawn time\\r\\n    }\\r\\n\\r\\n    // The JOY Token\\r\\n    IERC20Upgradeable public govToken;\\r\\n    // The xJOY Token\\r\\n    IERC20Upgradeable public xGovToken;\\r\\n\\r\\n    // treasury addresses\\r\\n    address[] public treasuryAddrs;\\r\\n    uint16 public treasuryIndex;\\r\\n\\r\\n    // Coin Info list\\r\\n    CoinInfo[] public coinList;\\r\\n    uint8 public COIN_DECIMALS;\\r\\n\\r\\n    // Vesting Info\\r\\n    VestingInfo[] public vestingList;       // 0: Seed, 1: Presale A\\r\\n    uint8 public VESTING_INDEX;\\r\\n\\r\\n    // Sale flag and time\\r\\n    bool public SALE_FLAG;\\r\\n    uint256 public SALE_START;\\r\\n    uint256 public SALE_DURATION;\\r\\n\\r\\n    // GovToken public flag\\r\\n    bool public GOVTOKEN_PUBLIC_FLAG;\\r\\n\\r\\n    // User address => UserInfo\\r\\n    mapping(address => UserInfo) public userList;\\r\\n    address[] public userAddrs;\\r\\n\\r\\n    // total tokens amounts (all 18 decimals)\\r\\n    uint256 public totalSaleAmount;\\r\\n    uint256 public totalSoldAmount;\\r\\n    uint256 public totalCoinAmount;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Events & Modifiers\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    // Events.\\r\\n    event TokensPurchased(address indexed purchaser, uint256 coinAmount, uint256 tokenAmount);\\r\\n    event TokensWithdrawed(address indexed purchaser, uint256 tokenAmount);\\r\\n\\r\\n    // Modifiers.\\r\\n    modifier whenSale() {\\r\\n        require(checkSalePeriod(), \\\"This is not sale period.\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier whenVesting(address userAddr) {\\r\\n        require(checkVestingPeriod(userAddr), \\\"This is not vesting period.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Initialization functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function initialize(\\r\\n        IERC20Upgradeable _govToken, \\r\\n        IERC20Upgradeable _xGovToken, \\r\\n        uint256 _totalSaleAmount,\\r\\n        CoinInfo[] memory _coinList,\\r\\n        VestingInfo[] memory _vestingList\\r\\n    ) public virtual initializer\\r\\n    {\\r\\n        __Context_init();\\r\\n        __Authorizable_init();\\r\\n        addAuthorized(_msgSender());\\r\\n\\r\\n        govToken = _govToken;\\r\\n        xGovToken = _xGovToken;\\r\\n        \\r\\n        treasuryIndex = 0;\\r\\n\\r\\n        COIN_DECIMALS = 18;\\r\\n        setCoinList(_coinList);\\r\\n\\r\\n        setVestingList(_vestingList);\\r\\n        VESTING_INDEX = 0;\\r\\n\\r\\n        startSale(false);\\r\\n        updateSaleDuration(60 days);\\r\\n\\r\\n        setGovTokenPublicFlag(false);\\r\\n\\r\\n        updateTotalSaleAmount(_totalSaleAmount);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // External functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    // Update token\\r\\n    function updateTokens(IERC20Upgradeable _govToken, IERC20Upgradeable _xGovToken) public onlyAuthorized {\\r\\n        govToken = _govToken;\\r\\n        xGovToken = _xGovToken;\\r\\n    }\\r\\n\\r\\n    // Update the treasury address\\r\\n    function updateTreasuryAddrs(address[] memory _treasuryAddrs) public onlyOwner {\\r\\n        delete treasuryAddrs;\\r\\n        for (uint i=0; i<_treasuryAddrs.length; i++) {\\r\\n            treasuryAddrs.push(_treasuryAddrs[i]);\\r\\n        }\\r\\n        treasuryIndex = 0;\\r\\n    }\\r\\n    function updateTreasuryIndex(uint16 _treasuryIndex) public onlyAuthorized {\\r\\n        treasuryIndex = _treasuryIndex;\\r\\n        if (treasuryAddrs.length > 0 && treasuryIndex >= treasuryAddrs.length) {\\r\\n            treasuryIndex = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Set coin list\\r\\n    function setCoinList(CoinInfo[] memory _coinList) public onlyAuthorized {\\r\\n        delete coinList;\\r\\n        for (uint i=0; i<_coinList.length; i++) {\\r\\n            coinList.push(_coinList[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update coin info\\r\\n    function updateCoinInfo(uint8 index, address addr, uint256 rate) public onlyAuthorized {\\r\\n        coinList[index] = CoinInfo(addr, rate);\\r\\n    }\\r\\n\\r\\n    // Set vesting list\\r\\n    function setVestingList(VestingInfo[] memory _vestingList) public onlyAuthorized {\\r\\n        delete vestingList;\\r\\n        for (uint i=0; i<_vestingList.length; i++) {\\r\\n            vestingList.push(_vestingList[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setVestingIndex(uint8 index) public onlyAuthorized {\\r\\n        VESTING_INDEX = index;\\r\\n    }\\r\\n\\r\\n    // Update vesting info\\r\\n    function updateVestingInfo(uint8 index, uint8 _initClaimablePercent, uint256 _lockingDuration, uint256 _vestingDuration) public onlyAuthorized {\\r\\n        if (index == 255) {\\r\\n            vestingList.push(VestingInfo(_initClaimablePercent, _lockingDuration, _vestingDuration));\\r\\n        } else {\\r\\n            vestingList[index] = VestingInfo(_initClaimablePercent, _lockingDuration, _vestingDuration);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Start stop sale\\r\\n    function startSale(bool bStart) public onlyAuthorized {\\r\\n        SALE_FLAG = bStart;\\r\\n        if (bStart) {\\r\\n            SALE_START = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Set GovToken public flag\\r\\n    function setGovTokenPublicFlag(bool bFlag) public onlyAuthorized {\\r\\n        GOVTOKEN_PUBLIC_FLAG = bFlag;\\r\\n    }\\r\\n\\r\\n    // Update sale duration\\r\\n    function updateSaleDuration(uint256 saleDuration) public onlyAuthorized {\\r\\n        SALE_DURATION = saleDuration;\\r\\n    }\\r\\n\\r\\n    // check sale period\\r\\n    function checkSalePeriod() public view returns (bool) {\\r\\n        return SALE_FLAG && block.timestamp >= SALE_START && block.timestamp <= SALE_START.add(SALE_DURATION);\\r\\n    }\\r\\n\\r\\n    // check locking period\\r\\n    function checkLockingPeriod(address userAddr) public view returns (bool) {\\r\\n        UserInfo memory userInfo = userList[userAddr];\\r\\n        VestingInfo memory vestingInfo = getUserVestingInfo(userAddr);\\r\\n        // return block.timestamp >= SALE_START && block.timestamp <= SALE_START.add(vestingInfo.lockingDuration);\\r\\n        return block.timestamp >= userInfo.firstDepositedTime && block.timestamp <= userInfo.firstDepositedTime.add(vestingInfo.lockingDuration);\\r\\n    }\\r\\n\\r\\n    // check vesting period\\r\\n    function checkVestingPeriod(address userAddr) public view returns (bool) {\\r\\n        UserInfo memory userInfo = userList[userAddr];\\r\\n        VestingInfo memory vestingInfo = getUserVestingInfo(userAddr);\\r\\n        // uint256 VESTING_START = SALE_START.add(vestingInfo.lockingDuration);\\r\\n        // return block.timestamp >= VESTING_START;\\r\\n        uint256 VESTING_START = userInfo.firstDepositedTime.add(vestingInfo.lockingDuration);\\r\\n        return GOVTOKEN_PUBLIC_FLAG || block.timestamp >= VESTING_START;\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Update total sale amount\\r\\n    function updateTotalSaleAmount(uint256 amount) public onlyAuthorized {\\r\\n        totalSaleAmount = amount;\\r\\n    }\\r\\n\\r\\n    // Get user addrs\\r\\n    function getUserAddrs() public view returns (address[] memory) {\\r\\n        address[] memory returnData = new address[](userAddrs.length);\\r\\n        for (uint i=0; i<userAddrs.length; i++) {\\r\\n            returnData[i] = userAddrs[i];\\r\\n        }\\r\\n        return returnData;\\r\\n    }\\r\\n    \\r\\n    // Get user's vesting info\\r\\n    function getUserVestingInfo(address userAddr) public view returns (VestingInfo memory) {\\r\\n        UserInfo memory userInfo = userList[userAddr];\\r\\n        VestingInfo memory vestingInfo = vestingList[userInfo.vestingIndex];\\r\\n        return vestingInfo;\\r\\n    }\\r\\n\\r\\n    // Set User Info\\r\\n    function setUserInfo(address _addr, uint8 _vestingIndex, uint256 _depositedTime, uint256 _depositedAmount, uint256 _purchasedAmount, uint256 _withdrawnAmount) public onlyAuthorized {\\r\\n        UserInfo storage userInfo = userList[_addr];\\r\\n        if (userInfo.depositedAmount == 0) {\\r\\n            userAddrs.push(_addr);\\r\\n            \\r\\n            userInfo.vestingIndex = _vestingIndex;\\r\\n            userInfo.firstDepositedTime = block.timestamp;\\r\\n            userInfo.depositedAmount = 0;\\r\\n            userInfo.purchasedAmount = 0;\\r\\n            userInfo.withdrawnAmount = 0;\\r\\n        } else {\\r\\n            totalCoinAmount = totalCoinAmount.sub(Math.min(totalCoinAmount, userInfo.depositedAmount));\\r\\n            totalSoldAmount = totalSoldAmount.sub(Math.min(totalSoldAmount, userInfo.purchasedAmount));\\r\\n        }\\r\\n        totalCoinAmount = totalCoinAmount.add(_depositedAmount);\\r\\n        totalSoldAmount = totalSoldAmount.add(_purchasedAmount);\\r\\n\\r\\n        if (_depositedTime > 0) {\\r\\n            userInfo.firstDepositedTime = _depositedTime;\\r\\n        }\\r\\n        userInfo.depositedAmount = userInfo.depositedAmount.add(_depositedAmount);\\r\\n        userInfo.purchasedAmount = userInfo.purchasedAmount.add(_purchasedAmount);\\r\\n        userInfo.withdrawnAmount = userInfo.withdrawnAmount.add(_withdrawnAmount);\\r\\n\\r\\n        XJoyToken _xJoyToken = XJoyToken(address(xGovToken));\\r\\n        _xJoyToken.addPurchaser(_addr);\\r\\n    }\\r\\n\\r\\n    // Seed User List\\r\\n    function transTokenListByAdmin(address[] memory _userAddrs, UserInfo[] memory _userList, bool _transferToken) public onlyOwner {\\r\\n        for (uint i=0; i<_userAddrs.length; i++) {\\r\\n            setUserInfo(_userAddrs[i], _userList[i].vestingIndex, _userList[i].firstDepositedTime, _userList[i].depositedAmount, _userList[i].purchasedAmount, _userList[i].withdrawnAmount);\\r\\n            if (_transferToken) {\\r\\n                xGovToken.safeTransfer(_userAddrs[i], _userList[i].purchasedAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function transTokenByAdmin(address _userAddr, uint8 _vestingIndex, uint256 _depositedTime, uint256 _depositedAmount, uint256 _purchasedAmount, bool _transferToken) public onlyOwner {\\r\\n        setUserInfo(_userAddr, _vestingIndex, _depositedTime, _depositedAmount, _purchasedAmount, 0);\\r\\n        if (_transferToken) {\\r\\n            xGovToken.safeTransfer(_userAddr, _purchasedAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Deposit\\r\\n    // coinAmount (decimals: COIN_DECIMALS) \\r\\n    function deposit(uint256 _coinAmount, uint8 coinIndex) external whenSale {\\r\\n        require( totalSaleAmount >= totalSoldAmount, \\\"totalSaleAmount >= totalSoldAmount\\\");\\r\\n\\r\\n        CoinInfo memory coinInfo = coinList[coinIndex];\\r\\n        IERC20Upgradeable coin = IERC20Upgradeable(coinInfo.addr);\\r\\n\\r\\n        // calculate token amount to be transferred\\r\\n        (uint256 tokenAmount, uint256 coinAmount) = calcTokenAmount(_coinAmount, coinIndex);\\r\\n        uint256 availableTokenAmount = totalSaleAmount.sub(totalSoldAmount);\\r\\n\\r\\n        // if the token amount is less than remaining\\r\\n        if (availableTokenAmount < tokenAmount) {\\r\\n            tokenAmount = availableTokenAmount;\\r\\n            (_coinAmount, coinAmount) = calcCoinAmount(availableTokenAmount, coinIndex);\\r\\n        }\\r\\n\\r\\n        // validate purchasing\\r\\n        _preValidatePurchase(_msgSender(), tokenAmount, coinAmount, coinIndex);\\r\\n\\r\\n        // transfer coin and token\\r\\n        coin.safeTransferFrom(_msgSender(), address(this), coinAmount);\\r\\n        xGovToken.safeTransfer(_msgSender(), tokenAmount);\\r\\n\\r\\n        // transfer coin to treasury\\r\\n        if (treasuryAddrs.length != 0) {\\r\\n            coin.safeTransfer(treasuryAddrs[treasuryIndex], coinAmount);\\r\\n        }\\r\\n\\r\\n        // update global state\\r\\n        totalCoinAmount = totalCoinAmount.add(_coinAmount);\\r\\n        totalSoldAmount = totalSoldAmount.add(tokenAmount);\\r\\n        \\r\\n       // update purchased token list\\r\\n       UserInfo storage userInfo = userList[_msgSender()];\\r\\n       if (userInfo.depositedAmount == 0) {\\r\\n           userAddrs.push(_msgSender());\\r\\n           userInfo.vestingIndex = 0;\\r\\n           userInfo.firstDepositedTime = block.timestamp;\\r\\n       }\\r\\n       userInfo.depositedAmount = userInfo.depositedAmount.add(_coinAmount);\\r\\n       userInfo.purchasedAmount = userInfo.purchasedAmount.add(tokenAmount);\\r\\n       \\r\\n       emit TokensPurchased(_msgSender(), _coinAmount, tokenAmount);\\r\\n\\r\\n       XJoyToken _xJoyToken = XJoyToken(address(xGovToken));\\r\\n       _xJoyToken.addPurchaser(_msgSender());\\r\\n    }\\r\\n\\r\\n    // Withdraw\\r\\n    function withdraw() external whenVesting(_msgSender()) {\\r\\n        uint256 withdrawalAmount = calcWithdrawalAmount(_msgSender());\\r\\n        uint256 govTokenAmount = govToken.balanceOf(address(this));\\r\\n        uint256 xGovTokenAmount = xGovToken.balanceOf(address(_msgSender()));\\r\\n        uint256 withdrawAmount = Math.min(withdrawalAmount, Math.min(govTokenAmount, xGovTokenAmount));\\r\\n       \\r\\n        require(withdrawAmount > 0, \\\"No withdraw amount!\\\");\\r\\n        require(xGovToken.allowance(_msgSender(), address(this)) >= withdrawAmount, \\\"withdraw's allowance is low!\\\");\\r\\n\\r\\n        xGovToken.safeTransferFrom(_msgSender(), address(this), withdrawAmount);\\r\\n        govToken.safeTransfer(_msgSender(), withdrawAmount);\\r\\n\\r\\n        UserInfo storage userInfo = userList[_msgSender()];\\r\\n        userInfo.withdrawnAmount = userInfo.withdrawnAmount.add(withdrawAmount);\\r\\n        userInfo.lastWithdrawnTime = block.timestamp;\\r\\n\\r\\n        emit TokensWithdrawed(_msgSender(), withdrawAmount);\\r\\n    }\\r\\n\\r\\n    // Calc token amount by coin amount\\r\\n    function calcWithdrawalAmount(address userAddr) public view returns (uint256) {\\r\\n        require(checkVestingPeriod(userAddr), \\\"This is not vesting period.\\\");\\r\\n\\r\\n        UserInfo memory userInfo = userList[userAddr];\\r\\n        VestingInfo memory vestingInfo = getUserVestingInfo(userAddr);\\r\\n        // uint256 VESTING_START = SALE_START.add(vestingInfo.lockingDuration);\\r\\n        uint256 VESTING_START = userInfo.firstDepositedTime.add(vestingInfo.lockingDuration);\\r\\n\\r\\n        uint256 totalAmount = 0;\\r\\n        if (block.timestamp <= VESTING_START) {\\r\\n            totalAmount = userInfo.purchasedAmount.mul(vestingInfo.initClaimablePercent).div(100);\\r\\n        } else if (block.timestamp >= VESTING_START.add(vestingInfo.vestingDuration)) {\\r\\n            totalAmount = userInfo.purchasedAmount;\\r\\n        } else {\\r\\n            totalAmount = userInfo.purchasedAmount.mul(block.timestamp.sub(VESTING_START)).div(vestingInfo.vestingDuration);\\r\\n        }\\r\\n\\r\\n        uint256 withdrawalAmount = totalAmount.sub(userInfo.withdrawnAmount);\\r\\n        return withdrawalAmount;\\r\\n    }\\r\\n\\r\\n    // Calc token amount by coin amount\\r\\n    function calcTokenAmount(uint256 _coinAmount, uint8 coinIndex) public view returns (uint256, uint256) {\\r\\n        require( coinList.length > coinIndex, \\\"coinList.length > coinIndex\\\");\\r\\n\\r\\n        CoinInfo memory coinInfo = coinList[coinIndex];\\r\\n        ERC20Upgradeable coin = ERC20Upgradeable(coinInfo.addr);\\r\\n        uint256 rate = coinInfo.rate;\\r\\n\\r\\n        uint tokenDecimal =  ERC20Upgradeable(address(xGovToken)).decimals() + coin.decimals() - COIN_DECIMALS;\\r\\n        uint256 tokenAmount = _coinAmount\\r\\n        .mul(10**tokenDecimal)\\r\\n        .div(rate);\\r\\n        \\r\\n        uint coinDecimal =  COIN_DECIMALS - coin.decimals();\\r\\n        uint256 coinAmount = _coinAmount\\r\\n        .div(10**coinDecimal);\\r\\n\\r\\n        return (tokenAmount, coinAmount);\\r\\n    }\\r\\n\\r\\n    // Calc coin amount by token amount\\r\\n    function calcCoinAmount(uint256 _tokenAmount, uint8 coinIndex) public view returns (uint256, uint256) {\\r\\n        require( coinList.length > coinIndex, \\\"coinList.length > coinIndex\\\");\\r\\n\\r\\n        CoinInfo memory coinInfo = coinList[coinIndex];\\r\\n        ERC20Upgradeable coin = ERC20Upgradeable(coinInfo.addr);\\r\\n        uint256 rate = coinInfo.rate;\\r\\n\\r\\n        uint _coinDecimal =  ERC20Upgradeable(address(xGovToken)).decimals() + coin.decimals() - COIN_DECIMALS;\\r\\n        uint256 _coinAmount = _tokenAmount\\r\\n        .div(10**_coinDecimal)\\r\\n        .mul(rate);\\r\\n        \\r\\n        uint coinDecimal =  COIN_DECIMALS - coin.decimals();\\r\\n        uint256 coinAmount = _coinAmount\\r\\n        .div(10**coinDecimal);\\r\\n\\r\\n        return (_coinAmount, coinAmount);\\r\\n    }\\r\\n\\r\\n    // Calc max coin amount to be deposit\\r\\n    function calcMaxCoinAmountToBeDeposit(uint8 coinIndex) public view returns (uint256) {\\r\\n        uint256 availableTokenAmount = totalSaleAmount.sub(totalSoldAmount);\\r\\n        (uint256 _coinAmount,) = calcCoinAmount(availableTokenAmount, coinIndex);\\r\\n        return _coinAmount;\\r\\n    }\\r\\n\\r\\n    // Withdraw all coins by owner\\r\\n    function withdrawAllCoins(address treasury) public onlyOwner {\\r\\n        for (uint i=0; i<coinList.length; i++) {\\r\\n            CoinInfo memory coinInfo = coinList[i];\\r\\n            IERC20Upgradeable _coin = IERC20Upgradeable(coinInfo.addr);\\r\\n            uint256 coinAmount = _coin.balanceOf(address(this));\\r\\n            _coin.safeTransfer(treasury, coinAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw all xJOY by owner\\r\\n    function withdrawAllxGovTokens(address treasury) public onlyOwner {\\r\\n        uint256 tokenAmount = xGovToken.balanceOf(address(this));\\r\\n        xGovToken.safeTransfer(treasury, tokenAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all $JOY by owner\\r\\n    function withdrawAllGovTokens(address treasury) public onlyOwner {\\r\\n        uint256 tokenAmount = govToken.balanceOf(address(this));\\r\\n        govToken.safeTransfer(treasury, tokenAmount);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Internal functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    // Validate purchase\\r\\n    function _preValidatePurchase(address purchaser, uint256 tokenAmount, uint256 coinAmount, uint8 coinIndex) internal view {\\r\\n        require( coinList.length > coinIndex, \\\"coinList.length > coinIndex\\\");\\r\\n        CoinInfo memory coinInfo = coinList[coinIndex];\\r\\n        IERC20Upgradeable coin = IERC20Upgradeable(coinInfo.addr);\\r\\n\\r\\n        require(purchaser != address(0), \\\"Purchaser is the zero address\\\");\\r\\n        require(coinAmount != 0, \\\"Coin amount is 0\\\");\\r\\n        require(tokenAmount != 0, \\\"Token amount is 0\\\");\\r\\n\\r\\n        require(xGovToken.balanceOf(address(this)) >= tokenAmount, \\\"$xJoyToken amount is lack!\\\");\\r\\n        require(coin.balanceOf(msg.sender) >= coinAmount, \\\"Purchaser's coin amount is lack!\\\");\\r\\n        require(coin.allowance(msg.sender, address(this)) >= coinAmount, \\\"Purchaser's allowance is low!\\\");\\r\\n\\r\\n        this;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AuthorizableU.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract AuthorizableU is OwnableUpgradeable {\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // State variables\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    mapping(address => bool) public isAuthorized;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Events & Modifiers\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(isAuthorized[msg.sender] || owner() == msg.sender, \\\"caller is not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Initialization functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function __Authorizable_init() internal virtual initializer {\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // External functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    function addAuthorized(address _toAdd) public onlyOwner {\\r\\n        isAuthorized[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\r\\n        require(_toRemove != msg.sender);\\r\\n        \\r\\n        isAuthorized[_toRemove] = false;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n    // Internal functions\\r\\n    ////////////////////////////////////////////////////////////////////////\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addPurchaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlackListChecking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"startBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privatePresaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seedPresaleAddress\",\"type\":\"address\"}],\"name\":\"updatePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XJoyToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}