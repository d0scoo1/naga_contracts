{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/SiloV2Facet/SiloV2Facet.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TokenSilo.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../ReentrancyGuard.sol\\\";\\n\\n/*\\n * @author Publius\\n * @title SiloV2Facet handles depositing, withdrawing and claiming whitelisted Silo tokens.\\n*/\\ncontract SiloV2Facet is TokenSilo {\\n\\n    event BeanAllocation(address indexed account, uint256 beans);\\n\\n    using SafeMath for uint256;\\n    using LibSafeMath32 for uint32;\\n\\n    struct SeasonClaim {\\n        address token;\\n        uint32 season;\\n    }\\n\\n    struct SeasonsClaim {\\n        address token;\\n        uint32[] seasons;\\n    }\\n\\n    struct WithdrawSeason {\\n        address token;\\n        uint32 season;\\n        uint256 amount;\\n    }\\n\\n    struct WithdrawSeasons {\\n        address token;\\n        uint32[] seasons;\\n        uint256[] amounts;\\n    }\\n\\n    /*\\n     * Deposit\\n     */\\n\\n    function deposit(address token, uint256 amount) external updateSiloNonReentrant {\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        _deposit(token, amount);\\n    }\\n\\n    /*\\n     * Withdraw\\n     */\\n\\n    function withdrawTokenBySeason(address token, uint32 season, uint256 amount) \\n        external \\n        updateSilo \\n    {\\n        _withdrawDeposit(token, season, amount);\\n        LibSilo.updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    function withdrawTokenBySeasons(address token, uint32[] calldata seasons, uint256[] calldata amounts) \\n        external \\n        updateSilo \\n    {\\n        _withdrawDeposits(token, seasons, amounts);\\n        LibSilo.updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    function withdrawTokensBySeason(WithdrawSeason[] calldata withdraws) external updateSilo {\\n        for (uint256 i = 0; i < withdraws.length; i++) {\\n            _withdrawDeposit(withdraws[i].token, withdraws[i].season, withdraws[i].amount);\\n        }\\n        LibSilo.updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    function withdrawTokensBySeasons(WithdrawSeasons[] calldata withdraws) external updateSilo {\\n        for (uint256 i = 0; i < withdraws.length; i++) {\\n            _withdrawDeposits(withdraws[i].token, withdraws[i].seasons, withdraws[i].amounts);\\n        }\\n        LibSilo.updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    /*\\n     * Claim\\n     */\\n\\n    function claimTokenBySeason(address token, uint32 season) external {\\n        _claimTokenBySeason(token, season);\\n    }\\n\\n    function claimTokenBySeasons(address token, uint32[] calldata seasons) external {\\n        _claimTokenBySeasons(token, seasons);\\n    }\\n\\n    function claimTokensBySeason(SeasonClaim[] calldata claims) external {\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            _claimTokenBySeason(claims[i].token, claims[i].season);\\n        }\\n    }\\n\\n    function claimTokensBySeasons(SeasonsClaim[] calldata claims) external {\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            _claimTokenBySeasons(claims[i].token, claims[i].seasons);\\n        }\\n    }\\n\\n    function _claimTokenBySeasons(address token, uint32[] calldata seasons) private {\\n        uint256 amount = removeTokenWithdrawals(msg.sender, token, seasons);\\n        IERC20(token).transfer(msg.sender, amount);\\n        emit ClaimSeasons(msg.sender, token, seasons, amount);\\n    }\\n\\n    function _claimTokenBySeason(address token, uint32 season) private {\\n        uint256 amount = removeTokenWithdrawal(msg.sender, token, season);\\n        IERC20(token).transfer(msg.sender, amount);\\n        emit ClaimSeason(msg.sender, token, season, amount);\\n    }\\n\\n    /*\\n     * Whitelist\\n     */\\n\\n    function whitelistToken(address token, bytes4 selector, uint32 stalk, uint32 seeds) external {\\n        require(msg.sender == address(this), \\\"Silo: Only Beanstalk can whitelist tokens.\\\");\\n        s.ss[token].selector = selector;\\n        s.ss[token].stalk = stalk;\\n        s.ss[token].seeds = seeds;\\n    }\\n\\n    function tokenSettings(address token) external view returns (Storage.SiloSettings memory) {\\n        return s.ss[token];\\n    }\\n}\"\r\n    },\r\n    \"contracts/farm/facets/SiloV2Facet/TokenSilo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../libraries/Silo/LibTokenSilo.sol\\\";\\nimport \\\"../../../libraries/Silo/LibSilo.sol\\\";\\nimport \\\"../../../libraries/LibInternal.sol\\\";\\nimport \\\"../../../libraries/LibSafeMath32.sol\\\";\\nimport \\\"../../ReentrancyGuard.sol\\\";\\n/**\\n * @author Publius\\n * @title Token Silo\\n**/\\ncontract TokenSilo is ReentrancyGuard {\\n\\n    uint32 private constant ASSET_PADDING = 100;\\n\\n    using SafeMath for uint256;\\n    using LibSafeMath32 for uint32;\\n\\n    event Deposit(address indexed account, address indexed token, uint256 season, uint256 amount, uint256 bdv);\\n    event RemoveSeasons(address indexed account, address indexed token, uint32[] seasons, uint256[] amounts, uint256 amount);\\n    event RemoveSeason(address indexed account, address indexed token, uint32 season, uint256 amount);\\n\\n    event Withdraw(address indexed account, address indexed token, uint32 season, uint256 amount);\\n    event ClaimSeasons(address indexed account, address indexed token, uint32[] seasons, uint256 amount);\\n    event ClaimSeason(address indexed account, address indexed token, uint32 season, uint256 amount);\\n\\n    struct AssetsRemoved {\\n        uint256 tokensRemoved;\\n        uint256 stalkRemoved;\\n        uint256 seedsRemoved;\\n    }\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function getDeposit(address account, address token, uint32 season) external view returns (uint256, uint256) {\\n        return LibTokenSilo.tokenDeposit(account, token, season);\\n    }\\n\\n    function getWithdrawal(address account, address token, uint32 season) external view returns (uint256) {\\n        return LibTokenSilo.tokenWithdrawal(account, token, season);\\n    }\\n\\n    function getTotalDeposited(address token) external view returns (uint256) {\\n        return s.siloBalances[token].deposited;\\n    }\\n\\n    function getTotalWithdrawn(address token) external view returns (uint256) {\\n        return s.siloBalances[token].withdrawn;\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    function _deposit(address token, uint256 amount) internal {\\n        LibInternal.updateSilo(msg.sender);\\n        (uint256 seeds, uint256 stalk) = LibTokenSilo.deposit(msg.sender, token, _season(), amount);\\n        LibSilo.depositSiloAssets(msg.sender, seeds, stalk);\\n    }\\n\\n    function _withdrawDeposits(address token, uint32[] calldata seasons, uint256[] calldata amounts) internal {\\n        require(seasons.length == amounts.length, \\\"Silo: Crates, amounts are diff lengths.\\\");\\n        AssetsRemoved memory ar = removeDeposits(token, seasons, amounts);\\n        uint32 arrivalSeason = _season() + s.season.withdrawSeasons;\\n        addTokenWithdrawal(msg.sender, token, arrivalSeason, ar.tokensRemoved);\\n        LibTokenSilo.decrementDepositedToken(token, ar.tokensRemoved);\\n        LibSilo.withdrawSiloAssets(msg.sender, ar.seedsRemoved, ar.stalkRemoved);\\n        LibSilo.updateBalanceOfRainStalk(msg.sender);\\n    }\\n\\n    function _withdrawDeposit(address token, uint32 season, uint256 amount) internal {\\n        (uint256 tokensRemoved, uint256 stalkRemoved, uint256 seedsRemoved) = removeDeposit(token, season, amount);\\n        uint32 arrivalSeason = _season() + s.season.withdrawSeasons;\\n        addTokenWithdrawal(msg.sender, token, arrivalSeason, tokensRemoved);\\n        LibTokenSilo.decrementDepositedToken(token, tokensRemoved);\\n        LibSilo.withdrawSiloAssets(msg.sender, seedsRemoved, stalkRemoved);\\n    }\\n\\n    function removeDeposit(address token, uint32 season, uint256 amount) \\n        private \\n        returns (uint256 tokensRemoved, uint256 stalkRemoved, uint256 seedsRemoved) \\n    {\\n        uint256 bdv;\\n        (tokensRemoved, bdv) = LibTokenSilo.removeDeposit(\\n            msg.sender,\\n            token,\\n            season,\\n            amount\\n        );\\n        seedsRemoved = bdv.mul(s.ss[token].seeds);\\n        stalkRemoved = bdv.mul(s.ss[token].stalk).add(\\n            LibSilo.stalkReward(seedsRemoved, _season()-season)\\n        );\\n        emit RemoveSeason(msg.sender, token, season, amount);\\n    }\\n\\n    function removeDeposits(address token, uint32[] calldata seasons, uint256[] calldata amounts)\\n        private\\n        returns (AssetsRemoved memory ar)\\n    {\\n        uint256 bdvRemoved;\\n        for (uint256 i = 0; i < seasons.length; i++) {\\n            (uint256 crateTokens, uint256 crateBdv) = LibTokenSilo.removeDeposit(\\n                msg.sender,\\n                token,\\n                seasons[i],\\n                amounts[i]\\n            );\\n            bdvRemoved = bdvRemoved.add(crateBdv);\\n            ar.tokensRemoved = ar.tokensRemoved.add(crateTokens);\\n            ar.stalkRemoved = ar.stalkRemoved.add(\\n                LibSilo.stalkReward(crateBdv.mul(s.ss[token].seeds), _season()-seasons[i])\\n            );\\n        }\\n        ar.seedsRemoved = bdvRemoved.mul(s.ss[token].seeds);\\n        ar.stalkRemoved = ar.stalkRemoved.add(bdvRemoved.mul(s.ss[token].stalk));\\n        emit RemoveSeasons(msg.sender, token, seasons, amounts, ar.tokensRemoved);\\n    }\\n\\n    function addTokenWithdrawal(address account, address token, uint32 arrivalSeason, uint256 amount) private {\\n        s.a[account].withdrawals[token][arrivalSeason] = s.a[account].withdrawals[token][arrivalSeason].add(amount);\\n        s.siloBalances[token].withdrawn = s.siloBalances[token].withdrawn.add(amount);\\n        emit Withdraw(msg.sender, token, arrivalSeason, amount);\\n    }\\n\\n    function removeTokenWithdrawals(address account, address token, uint32[] calldata seasons) internal returns (uint256 amount) {\\n        for (uint256 i = 0; i < seasons.length; i++) {\\n            amount = amount.add(_removeTokenWithdrawal(account, token, seasons[i]));\\n        }\\n        s.siloBalances[token].withdrawn = s.siloBalances[token].withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    function removeTokenWithdrawal(address account, address token, uint32 season) internal returns (uint256) {\\n        uint256 amount = _removeTokenWithdrawal(account, token, season);\\n        s.siloBalances[token].withdrawn = s.siloBalances[token].withdrawn.sub(amount);\\n        return amount;\\n    }\\n\\n    function _removeTokenWithdrawal(address account, address token, uint32 season) private returns (uint256) {\\n        require(season <= s.season.current, \\\"Claim: Withdrawal not recievable.\\\");\\n        uint256 amount = s.a[account].withdrawals[token][season];\\n        delete s.a[account].withdrawals[token][season];\\n        return amount;\\n    }\\n\\n    function _season() private view returns (uint32) {\\n        return s.season.current;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/farm/ReentrancyGuard.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/LibInternal.sol\\\";\\nimport \\\"./AppStorage.sol\\\";\\n\\n/**\\n * @author Beanstalk Farms\\n * @title Variation of Oepn Zeppelins reentrant guard to include Silo Update\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts%2Fsecurity%2FReentrancyGuard.sol\\n**/\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    AppStorage internal s;\\n    \\n    modifier updateSilo() {\\n        LibInternal.updateSilo(msg.sender);\\n        _;\\n    }\\n    modifier updateSiloNonReentrant() {\\n        require(s.reentrantStatus != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        s.reentrantStatus = _ENTERED;\\n        LibInternal.updateSilo(msg.sender);\\n        _;\\n        s.reentrantStatus = _NOT_ENTERED;\\n    }\\n    \\n    modifier nonReentrant() {\\n        require(s.reentrantStatus != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        s.reentrantStatus = _ENTERED;\\n        _;\\n        s.reentrantStatus = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Silo/LibTokenSilo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../LibAppStorage.sol\\\";\\nimport \\\"../../C.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Lib Token Silo\\n**/\\nlibrary LibTokenSilo {\\n\\n    using SafeMath for uint256;\\n\\n    event Deposit(address indexed account, address indexed token, uint256 season, uint256 amount, uint256 bdv);\\n\\n    /*\\n     * Deposit\\n     */\\n\\n    function deposit(address account, address token, uint32 _s, uint256 amount) internal returns (uint256, uint256) {\\n        uint256 bdv = beanDenominatedValue(token, amount);\\n        return depositWithBDV(account, token, _s, amount, bdv);\\n    }\\n\\n    function depositWithBDV(address account, address token, uint32 _s, uint256 amount, uint256 bdv) internal returns (uint256, uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(bdv > 0, \\\"Silo: No Beans under Token.\\\");\\n        incrementDepositedToken(token, amount);\\n        addDeposit(account, token, _s, amount, bdv);\\n        return (bdv.mul(s.ss[token].seeds), bdv.mul(s.ss[token].stalk));\\n    }\\n\\n    function incrementDepositedToken(address token, uint256 amount) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.siloBalances[token].deposited = s.siloBalances[token].deposited.add(amount);\\n    }\\n\\n    function addDeposit(address account, address token, uint32 _s, uint256 amount, uint256 bdv) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.a[account].deposits[token][_s].amount += uint128(amount);\\n        s.a[account].deposits[token][_s].bdv += uint128(bdv);\\n        emit Deposit(account, token, _s, amount, bdv);\\n    }\\n\\n    function decrementDepositedToken(address token, uint256 amount) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.siloBalances[token].deposited = s.siloBalances[token].deposited.sub(amount);\\n    }\\n\\n    /*\\n     * Remove\\n     */\\n\\n    function removeDeposit(address account, address token, uint32 id, uint256 amount)\\n        internal\\n        returns (uint256, uint256) \\n    {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        (uint256 crateAmount, uint256 crateBase) = tokenDeposit(account, token, id);\\n        require(crateAmount >= amount, \\\"Silo: Crate balance too low.\\\");\\n        if (amount < crateAmount) {\\n            uint256 base = amount.mul(crateBase).div(crateAmount);\\n            uint256 newBase = uint256(s.a[account].deposits[token][id].bdv).sub(base);\\n            uint256 newAmount = uint256(s.a[account].deposits[token][id].amount).sub(amount);\\n            require(newBase <= uint128(-1) && newAmount <= uint128(-1), 'Silo: uint128 overflow.');\\n            s.a[account].deposits[token][id].amount = uint128(newAmount);\\n            s.a[account].deposits[token][id].bdv = uint128(newBase);\\n            return (amount, base);\\n        } else {\\n            delete s.a[account].deposits[token][id];\\n            return (crateAmount, crateBase);\\n        }\\n    }\\n\\n    /*\\n     * Getters\\n     */\\n\\n    function tokenDeposit(address account, address token, uint32 id) internal view returns (uint256, uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return (s.a[account].deposits[token][id].amount, s.a[account].deposits[token][id].bdv);\\n    }\\n\\n    function beanDenominatedValue(address token, uint256 amount) private returns (uint256 bdv) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        bytes memory myFunctionCall = abi.encodeWithSelector(s.ss[token].selector, amount);\\n        (bool success, bytes memory data) = address(this).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: Bean denominated value failed.\\\");\\n        assembly { bdv := mload(add(data, add(0x20, 0))) }\\n    }\\n\\n    function tokenWithdrawal(address account, address token, uint32 id) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.a[account].withdrawals[token][id];\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Silo/LibSilo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../C.sol\\\";\\nimport \\\"../LibAppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Lib Silo\\n**/\\nlibrary LibSilo {\\n\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    event BeanDeposit(address indexed account, uint256 season, uint256 beans);\\n\\n    /**\\n     * Silo\\n    **/\\n\\n    function depositSiloAssets(address account, uint256 seeds, uint256 stalk) internal {\\n        incrementBalanceOfStalk(account, stalk);\\n        incrementBalanceOfSeeds(account, seeds);\\n    }\\n\\n    function withdrawSiloAssets(address account, uint256 seeds, uint256 stalk) internal {\\n        decrementBalanceOfStalk(account, stalk);\\n        decrementBalanceOfSeeds(account, seeds);\\n    }\\n\\n    function incrementBalanceOfSeeds(address account, uint256 seeds) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.s.seeds = s.s.seeds.add(seeds);\\n        s.a[account].s.seeds = s.a[account].s.seeds.add(seeds);\\n    }\\n\\n    function incrementBalanceOfStalk(address account, uint256 stalk) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 roots;\\n        if (s.s.roots == 0) roots = stalk.mul(C.getRootsBase());\\n        else roots = s.s.roots.mul(stalk).div(s.s.stalk);\\n\\n        s.s.stalk = s.s.stalk.add(stalk);\\n        s.a[account].s.stalk = s.a[account].s.stalk.add(stalk);\\n\\n        s.s.roots = s.s.roots.add(roots);\\n        s.a[account].roots = s.a[account].roots.add(roots);\\n\\n        incrementBipRoots(account, roots);\\n    }\\n\\n    function decrementBalanceOfSeeds(address account, uint256 seeds) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        s.s.seeds = s.s.seeds.sub(seeds);\\n        s.a[account].s.seeds = s.a[account].s.seeds.sub(seeds);\\n    }\\n\\n    function decrementBalanceOfStalk(address account, uint256 stalk) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (stalk == 0) return;\\n        uint256 roots = s.a[account].roots.mul(stalk).sub(1).div(s.a[account].s.stalk).add(1);\\n\\n        s.s.stalk = s.s.stalk.sub(stalk);\\n        s.a[account].s.stalk = s.a[account].s.stalk.sub(stalk);\\n\\n        s.s.roots = s.s.roots.sub(roots);\\n        s.a[account].roots = s.a[account].roots.sub(roots);\\n\\n        decrementBipRoots(account, roots);\\n    }\\n\\n    function updateBalanceOfRainStalk(address account) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (!s.r.raining) return;\\n        if (s.a[account].roots < s.a[account].sop.roots) {\\n            s.r.roots = s.r.roots.sub(s.a[account].sop.roots - s.a[account].roots); // Note: SafeMath is redundant here.\\n            s.a[account].sop.roots = s.a[account].roots;\\n        }\\n    }\\n\\n    function incrementBipRoots(address account, uint256 roots) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (s.a[account].votedUntil >= season()) {\\n            uint256 numberOfActiveBips = s.g.activeBips.length; \\n            for (uint256 i = 0; i < numberOfActiveBips; i++) {\\n                uint32 bip = s.g.activeBips[i];\\n                if (s.g.voted[bip][account]) s.g.bips[bip].roots = s.g.bips[bip].roots.add(roots);\\n            }\\n        }\\n    }\\n\\n    /// @notice Decrements the given amount of roots from bips that have been voted on by a given account and\\n    /// checks whether the account is a proposer and if he/she are then they need to have the min roots required\\n    /// @param account The address of the account to have their bip roots decremented\\n    /// @param roots The amount of roots for the given account to be decremented from\\n    function decrementBipRoots(address account, uint256 roots) private {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if (s.a[account].votedUntil >= season()) {\\n            require(\\n                s.a[account].proposedUntil < season() || canPropose(account),\\n                \\\"Silo: Proposer must have min Stalk.\\\"\\n            );\\n            uint256 numberOfActiveBips = s.g.activeBips.length; \\n            for (uint256 i = 0; i < numberOfActiveBips; i++) {\\n                uint32 bip = s.g.activeBips[i];\\n                if (s.g.voted[bip][account]) s.g.bips[bip].roots = s.g.bips[bip].roots.sub(roots);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks whether the account have the min roots required for a BIP\\n    /// @param account The address of the account to check roots balance\\n    function canPropose(address account) internal view returns (bool) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        Decimal.D256 memory stake = Decimal.ratio(s.a[account].roots, s.s.roots);\\n        return stake.greaterThan(C.getGovernanceProposalThreshold());\\n    }\\n\\n    function stalkReward(uint256 seeds, uint32 seasons) internal pure returns (uint256) {\\n        return seeds.mul(seasons);\\n    }\\n\\n    function season() internal view returns (uint32) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.season.current;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibInternal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Internal Library handles gas efficient function calls between facets.\\n**/\\n\\ninterface ISiloUpdate {\\n    function updateSilo(address account) external payable;\\n}\\n\\nlibrary LibInternal {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        address[] facetAddresses;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function updateSilo(address account) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address facet = ds.selectorToFacetAndPosition[ISiloUpdate.updateSilo.selector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(ISiloUpdate.updateSilo.selector, account);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateSilo failed.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibSafeMath32.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @author Publius\\n * @title LibSafeMath32 is a uint32 variation of Open Zeppelin's Safe Math library.\\n**/\\nlibrary LibSafeMath32 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint32 a, uint32 b) internal pure returns (bool, uint32) {\\n        uint32 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint32 a, uint32 b) internal pure returns (bool, uint32) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint32 a, uint32 b) internal pure returns (bool, uint32) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint32 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint32 a, uint32 b) internal pure returns (bool, uint32) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint32 a, uint32 b) internal pure returns (bool, uint32) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\\n        uint32 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\\n        if (a == 0) return 0;\\n        uint32 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint32 a, uint32 b) internal pure returns (uint32) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../farm/AppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage Library allows libaries to access Beanstalk's state.\\n**/\\nlibrary LibAppStorage {\\n\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/C.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/Decimal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title C holds the contracts for Beanstalk.\\n**/\\nlibrary C {\\n\\n    using Decimal for Decimal.D256;\\n    using SafeMath for uint256;\\n\\n    // Constants\\n    uint256 private constant PERCENT_BASE = 1e18; // Mainnet\\n\\n    // Chain\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    // Season\\n    uint256 private constant CURRENT_SEASON_PERIOD = 3600; // 1 hour\\n\\n    // Sun\\n    uint256 private constant HARVESET_PERCENTAGE = 0.5e18; // 50%\\n\\n    // Weather\\n    uint256 private constant POD_RATE_LOWER_BOUND = 0.05e18; // 5%\\n    uint256 private constant OPTIMAL_POD_RATE = 0.15e18; // 15%\\n    uint256 private constant POD_RATE_UPPER_BOUND = 0.25e18; // 25%\\n\\n    uint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 0.95e18; // 95%\\n    uint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 1.05e18; // 105%\\n\\n    uint32 private constant STEADY_SOW_TIME = 60; // 1 minute\\n    uint256 private constant RAIN_TIME = 24; // 24 seasons = 1 day\\n\\n    // Governance\\n    uint32 private constant GOVERNANCE_PERIOD = 168; // 168 seasons = 7 days\\n    uint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400; // 1 day\\n    uint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17; // 1/2\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2; // 2/3\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3; // 2/3\\n    uint32 private constant GOVERNANCE_EXPIRATION = 24; // 24 seasons = 1 day\\n    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 0.001e18; // 0.1%\\n    uint256 private constant BASE_COMMIT_INCENTIVE = 100e6; // 100 beans\\n    uint256 private constant MAX_PROPOSITIONS = 5;\\n\\n    // Silo\\n    uint256 private constant BASE_ADVANCE_INCENTIVE = 100e6; // 100 beans\\n    uint32 private constant WITHDRAW_TIME = 25; // 24 + 1 seasons\\n    uint256 private constant SEEDS_PER_BEAN = 2;\\n    uint256 private constant SEEDS_PER_LP_BEAN = 4;\\n    uint256 private constant STALK_PER_BEAN = 10000;\\n    uint256 private constant ROOTS_BASE = 1e12;\\n\\n    // Field\\n    uint256 private constant MAX_SOIL_DENOMINATOR = 4; // 25%\\n    uint256 private constant COMPLEX_WEATHER_DENOMINATOR = 1000; // 0.1%\\n\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function getSeasonPeriod() internal pure returns (uint256) {\\n        return CURRENT_SEASON_PERIOD;\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceEmergencyPeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_EMERGENCY_PERIOD;\\n    }\\n\\n    function getGovernanceExpiration() internal pure returns (uint32) {\\n        return GOVERNANCE_EXPIRATION;\\n    }\\n\\n    function getGovernancePassThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PASS_THRESHOLD});\\n    }\\n\\n    function getGovernanceEmergencyThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR,GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR);\\n    }\\n\\n    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return BASE_ADVANCE_INCENTIVE;\\n    }\\n\\n    function getCommitIncentive() internal pure returns (uint256) {\\n        return BASE_COMMIT_INCENTIVE;\\n    }\\n\\n    function getSiloWithdrawSeasons() internal pure returns (uint32) {\\n        return WITHDRAW_TIME;\\n    }\\n\\n    function getComplexWeatherDenominator() internal pure returns (uint256) {\\n        return COMPLEX_WEATHER_DENOMINATOR;\\n    }\\n\\n    function getMaxSoilDenominator() internal pure returns (uint256) {\\n        return MAX_SOIL_DENOMINATOR;\\n    }\\n\\n    function getHarvestPercentage() internal pure returns (uint256) {\\n        return HARVESET_PERCENTAGE;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n\\n    function getOptimalPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(OPTIMAL_POD_RATE, PERCENT_BASE);\\n    }\\n\\n    function getUpperBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_UPPER_BOUND, PERCENT_BASE);\\n    }\\n\\n    function getLowerBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_LOWER_BOUND, PERCENT_BASE);\\n    }\\n\\n    function getUpperBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_UPPER_BOUND, PERCENT_BASE);\\n    }\\n\\n    function getLowerBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_LOWER_BOUND, PERCENT_BASE);\\n    }\\n\\n    function getSteadySowTime() internal pure returns (uint32) {\\n        return STEADY_SOW_TIME;\\n    }\\n\\n    function getRainTime() internal pure returns (uint256) {\\n        return RAIN_TIME;\\n    }\\n\\n    function getMaxPropositions() internal pure returns (uint256) {\\n      return MAX_PROPOSITIONS;\\n    }\\n\\n    function getSeedsPerBean() internal pure returns (uint256) {\\n        return SEEDS_PER_BEAN;\\n    }\\n\\n    function getSeedsPerLPBean() internal pure returns (uint256) {\\n        return SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getStalkPerBean() internal pure returns (uint256) {\\n      return STALK_PER_BEAN;\\n    }\\n\\n    function getStalkPerLPSeed() internal pure returns (uint256) {\\n      return STALK_PER_BEAN/SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getRootsBase() internal pure returns (uint256) {\\n        return ROOTS_BASE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Deposit {\\n        uint128 amount;\\n        uint128 bdv;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 votedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        uint32 lastSIs;\\n        uint32 proposedUntil;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n        uint256 wrappedBeans;\\n        mapping(address => mapping(uint32 => Deposit)) deposits;\\n        mapping(address => mapping(uint32 => uint256)) withdrawals;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct V1IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n        uint256 roots;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint32 sis;\\n        uint8 withdrawSeasons;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n\\n    struct Fundraiser {\\n        address payee;\\n        address token;\\n        uint256 total;\\n        uint256 remaining;\\n        uint256 start;\\n    }\\n\\n    struct SiloSettings {\\n        bytes4 selector;\\n        uint32 seeds;\\n        uint32 stalk;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 reentrantStatus; // An intra-transaction state variable to protect against reentrance\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    Storage.V1IncreaseSilo v1SI;\\n    uint256 unclaimedRoots;\\n    uint256 v2SIBeans;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n    uint32 hotFix3Start;\\n    mapping (uint32 => Storage.Fundraiser) fundraisers;\\n    uint32 fundraiserIndex;\\n    mapping (address => bool) isBudget;\\n    mapping(uint256 => bytes32) podListings;\\n    mapping(bytes32 => uint256) podOrders;\\n    mapping(address => Storage.AssetSilo) siloBalances;\\n    mapping(address => Storage.SiloSettings) ss;\\n\\n    // These refund variables are intra-transaction state varables use to store refund amounts\\n    uint256 refundStatus;\\n    uint256 beanRefundAmount;\\n    uint256 ethRefundAmount;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity =0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return one();\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"BeanAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimSeasons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bdv\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveSeason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveSeasons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"}],\"name\":\"claimTokenBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"}],\"name\":\"claimTokenBySeasons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"}],\"internalType\":\"struct SiloV2Facet.SeasonClaim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimTokensBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"}],\"internalType\":\"struct SiloV2Facet.SeasonsClaim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimTokensBySeasons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"}],\"name\":\"getWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"seeds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalk\",\"type\":\"uint32\"}],\"internalType\":\"struct Storage.SiloSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"stalk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"seeds\",\"type\":\"uint32\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawTokenBySeasons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SiloV2Facet.WithdrawSeason[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"}],\"name\":\"withdrawTokensBySeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"seasons\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SiloV2Facet.WithdrawSeasons[]\",\"name\":\"withdraws\",\"type\":\"tuple[]\"}],\"name\":\"withdrawTokensBySeasons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SiloV2Facet", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}