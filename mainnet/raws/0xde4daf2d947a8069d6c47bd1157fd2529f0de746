{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/projection/ERC1155/ERC1155Wrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IERC1155Wrapper.sol\\\";\\nimport \\\"../ItemProjection.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { Uint256Utilities, StringUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\ncontract ERC1155Wrapper is IERC1155Wrapper, ItemProjection, IERC1155Receiver {\\n    using AddressUtilities for address;\\n    using Uint256Utilities for uint256;\\n    using Uint256Utilities for uint256[];\\n    using BytesUtilities for bytes;\\n    using StringUtilities for string;\\n\\n    mapping(bytes32 => uint256) private _itemIdOf;\\n    mapping(uint256 => uint256) private _tokenDecimals;\\n\\n    mapping(uint256 => address) private _sourceTokenAddress;\\n    mapping(uint256 => uint256) private _sourceTokenId;\\n\\n    uint256[] private _tokenIds;\\n    mapping(uint256 => uint256) private _originalAmount;\\n    mapping(uint256 => address[]) private _accounts;\\n    mapping(uint256 => uint256[]) private _originalAmounts;\\n\\n    constructor(bytes memory lazyInitData) ItemProjection(lazyInitData) {\\n    }\\n\\n    function _projectionLazyInit(bytes memory collateralInitData) internal override returns (bytes memory) {\\n    }\\n\\n    function itemIdOf(address tokenAddress, uint256 tokenId) override public view returns(uint256) {\\n        return _itemIdOf[_toItemKey(tokenAddress, tokenId)];\\n    }\\n\\n    function source(uint256 itemId) external override view returns(address tokenAddress, uint256 tokenId) {\\n        return (_sourceTokenAddress[itemId], _sourceTokenId[itemId]);\\n    }\\n\\n    /*function mintItems(CreateItem[] calldata createItemsInput) virtual override(Item, ItemProjection) public returns(uint256[] memory itemIds) {\\n        CreateItem[] memory createItems = new CreateItem[](createItemsInput.length);\\n        uint256[] memory tokensDecimals = new uint256[](createItemsInput.length);\\n        uint256[] memory loadedItemIds = new uint256[](createItemsInput.length);\\n        string memory uri = plainUri();\\n        for(uint256  i = 0; i < createItemsInput.length; i++) {\\n            address tokenAddress = address(uint160(uint256(createItemsInput[i].collectionId)));\\n            uint256 tokenId = createItemsInput[i].id;\\n            uint256 value = createItemsInput[i].amounts.sum();\\n            bytes memory encodedData = abi.encode(createItemsInput[i].amounts, createItemsInput[i].accounts);\\n            (createItems[i], tokensDecimals[i]) = _buildCreateItem(msg.sender, tokenAddress, tokenId, value, encodedData, loadedItemIds[i] = itemIdOf(tokenAddress, tokenId), uri);\\n            IERC1155(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenId, value, \\\"\\\");\\n        }\\n        itemIds = IItemMainInterface(mainInterface).mintItems(createItems);\\n        for(uint256 i = 0; i < createItemsInput.length; i++) {\\n            if(loadedItemIds[i] == 0) {\\n                address tokenAddress = address(uint160(uint256(createItemsInput[i].collectionId)));\\n                uint256 tokenId = createItemsInput[i].id;\\n                _itemIdOf[_toItemKey(tokenAddress, tokenId)] = itemIds[i];\\n                _tokenDecimals[itemIds[i]] = tokensDecimals[i];\\n                _sourceTokenAddress[itemIds[i]] = tokenAddress;\\n                _sourceTokenId[itemIds[i]] = tokenId;\\n                emit Token(tokenAddress, tokenId, itemIds[i]);\\n            }\\n        }\\n    }*/\\n\\n    function setHeader(Header calldata value) authorizedOnly override(IItemProjection, ItemProjection) external virtual returns(Header memory oldValue) {\\n        Header[] memory values = new Header[](1);\\n        values[0] = value;\\n        values[0].host = address(this);\\n        bytes32[] memory collectionIds = new bytes32[](1);\\n        collectionIds[0] = collectionId;\\n        return IItemMainInterface(mainInterface).setCollectionsMetadata(collectionIds, values)[0];\\n    }\\n\\n    function setItemsCollection(uint256[] calldata, bytes32[] calldata) authorizedOnly virtual override(Item, ItemProjection) external returns(bytes32[] memory) {\\n        revert(\\\"Impossibru!\\\");\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) override external returns (bytes4) {\\n        if(operator == address(this)) {\\n            return this.onERC1155Received.selector;\\n        }\\n        uint256 itemId = itemIdOf(msg.sender, tokenId);\\n        (CreateItem memory createItem, uint256 tokenDecimals) = _buildCreateItem(from, msg.sender, tokenId, amount, data, itemId, plainUri());\\n        _trySaveCreatedItemAndEmitTokenEvent(itemId, 0, tokenId, createItem, tokenDecimals);\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) override external returns (bytes4) {\\n        if(operator == address(this)) {\\n            return this.onERC1155BatchReceived.selector;\\n        }\\n        bytes[] memory dataArray = abi.decode(data, (bytes[]));\\n        for(uint256 i = 0 ; i < tokenIds.length; i++) {\\n            _prepareTempVars(from, tokenIds[i], amounts[i], dataArray[i]);\\n        }\\n        (CreateItem[] memory createItems, uint256[] memory loadedItemIds, uint256[] memory tokenDecimals) = _buildCreateItems(from, msg.sender);\\n        uint256[] memory itemIds = IItemMainInterface(mainInterface).mintItems(createItems);\\n        for(uint256 i = 0; i < createItems.length; i++) {\\n            _trySaveCreatedItemAndEmitTokenEvent(loadedItemIds[i], itemIds[i], _tokenIds[i], createItems[i], tokenDecimals[i]);\\n            delete _tokenIds[i];\\n        }\\n        delete _tokenIds;\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _buildCreateItems(address from, address tokenAddress) private returns(CreateItem[] memory createItems, uint256[] memory loadedItemIds, uint256[] memory tokenDecimals) {\\n        createItems = new CreateItem[](_tokenIds.length);\\n        loadedItemIds = new uint256[](_tokenIds.length);\\n        tokenDecimals = new uint256[](_tokenIds.length);\\n        string memory uri = plainUri();\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 tokenId = _tokenIds[i];\\n            (createItems[i], tokenDecimals[i]) = _buildCreateItem(from, tokenAddress, tokenId, _originalAmount[tokenId], abi.encode(_originalAmounts[tokenId], _accounts[tokenId]), loadedItemIds[i] = itemIdOf(msg.sender, tokenId), uri);\\n            delete _originalAmount[tokenId];\\n            delete _accounts[tokenId];\\n            delete _originalAmounts[tokenId];\\n        }\\n    }\\n\\n    function _trySaveCreatedItemAndEmitTokenEvent(uint256 itemId, uint256 createdItemId, uint256 tokenId, CreateItem memory createItem, uint256 tokenDecimals) internal {\\n        if(createdItemId == 0) {\\n            CreateItem[] memory createItems = new CreateItem[](1);\\n            createItems[0] = createItem;\\n            createdItemId = IItemMainInterface(mainInterface).mintItems(createItems)[0];\\n        }\\n        if(itemId != 0) {\\n            return;\\n        }\\n        _itemIdOf[_toItemKey(msg.sender, tokenId)] = createdItemId;\\n        _tokenDecimals[createdItemId] = tokenDecimals;\\n        _sourceTokenAddress[createdItemId] = msg.sender;\\n        _sourceTokenId[createdItemId] = tokenId;\\n        emit Token(msg.sender, tokenId, createdItemId);\\n    }\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes memory data) override(Item, ItemProjection) public {\\n        require(account != address(0), \\\"required account\\\");\\n        IItemMainInterface(mainInterface).mintTransferOrBurn(false, abi.encode(msg.sender, account, address(0), itemId, _unwrap(account, itemId, amount, data)));\\n        emit TransferSingle(msg.sender, account, address(0), itemId, amount);\\n    }\\n\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes memory data) override(Item, ItemProjection) public {\\n        require(account != address(0), \\\"required account\\\");\\n        uint256[] memory interoperableInterfaceAmounts = new uint256[](amounts.length);\\n        bytes[] memory datas = abi.decode(data, (bytes[]));\\n        for(uint256 i = 0; i < itemIds.length; i++) {\\n            interoperableInterfaceAmounts[i] = _unwrap(account, itemIds[i], amounts[i], datas[i]);\\n            IItemMainInterface(mainInterface).mintTransferOrBurn(false, abi.encode(msg.sender, account, address(0), itemIds[i], interoperableInterfaceAmounts[i]));\\n        }\\n        emit TransferBatch(msg.sender, account, address(0), itemIds, interoperableInterfaceAmounts);\\n    }\\n\\n    function _prepareTempVars(address from, uint256 tokenId, uint256 amount, bytes memory data) private {\\n        (uint256[] memory amounts, address[] memory receivers) = abi.decode(data, (uint256[], address[]));\\n        uint256 originalAmount = 0;\\n        address[] memory accounts = receivers.length == 0 ? from.asSingletonArray() : receivers;\\n        require(accounts.length == amounts.length, \\\"length\\\");\\n        for(uint256 z = 0; z < amounts.length; z++) {\\n            require(amounts[z] > 0, \\\"zero amount\\\");\\n            require(accounts[z] != address(0), \\\"zero address\\\");\\n            _originalAmounts[tokenId].push(amounts[z]);\\n            _accounts[tokenId].push(accounts[z]);\\n            originalAmount += amounts[z];\\n        }\\n        require(originalAmount == amount, \\\"Not corresponding\\\");\\n        if((_originalAmount[tokenId] += originalAmount) == originalAmount) {\\n            _tokenIds.push(tokenId);\\n        }\\n    }\\n\\n    function _buildCreateItem(address from, address tokenAddress, uint256 tokenId, uint256 amount, bytes memory data, uint256 itemId, string memory uri) private view returns(CreateItem memory createItem, uint256 tokenDecimals) {\\n        require(_sourceTokenAddress[tokenId] == address(0) && _sourceTokenId[tokenId] == 0, \\\"invalid\\\");\\n        (uint256[] memory values, address[] memory receivers) = abi.decode(data, (uint256[], address[]));\\n        uint256 totalAmount = 0;\\n        tokenDecimals = itemId != 0 ? _tokenDecimals[itemId] : _safeDecimals(tokenAddress, tokenId);\\n        address[] memory realReceivers = new address[](values.length);\\n        for(uint256 i = 0; i < values.length; i++) {\\n            totalAmount += values[i];\\n            values[i] = _convertAmount(i, tokenDecimals, values[i], itemId);\\n            realReceivers[i] = (realReceivers[i] = i < receivers.length ? receivers[i] : from) != address(0) ? realReceivers[i] : from;\\n        }\\n        require(totalAmount == amount, \\\"amount\\\");\\n        (string memory name, string memory symbol) = itemId != 0 ? (\\\"\\\", \\\"\\\") : _tryRecoveryMetadata(tokenAddress, tokenId);\\n        name = itemId != 0 ? name : string(abi.encodePacked(name, \\\" item\\\"));\\n        symbol = itemId != 0 ? symbol : string(abi.encodePacked(\\\"i\\\", symbol));\\n        createItem = CreateItem(Header(address(0), name, symbol, uri), collectionId, itemId, realReceivers, values);\\n    }\\n\\n    function _convertAmount(uint256 i, uint256 tokenDecimals, uint256 plainValue, uint256 itemId) private view returns(uint256) {\\n        uint256 totalSupply = itemId == 0 ? 0 : Item(mainInterface).totalSupply(itemId);\\n        if(i > 0 || tokenDecimals != 0 || itemId == 0 || (itemId != 0 && (totalSupply >= 1e18))) {\\n            return plainValue * (10**(18 - tokenDecimals));\\n        }\\n        return (1e18 - totalSupply) + ((plainValue - 1) * (10**(18 - tokenDecimals)));\\n    }\\n\\n    function _tryRecoveryMetadata(address source, uint256 tokenId) private view returns(string memory name, string memory symbol) {\\n        ItemProjection nft = ItemProjection(source);\\n        try nft.name(tokenId) returns(string memory n) {\\n            name = n;\\n        } catch {\\n        }\\n        try nft.symbol(tokenId) returns(string memory s) {\\n            symbol = s;\\n        } catch {\\n        }\\n        if(name.isEmpty()) {\\n            try nft.name() returns(string memory n) {\\n                name = n;\\n            } catch {\\n            }\\n        }\\n        if(symbol.isEmpty()) {\\n            try nft.symbol() returns(string memory s) {\\n                symbol = s;\\n            } catch {\\n            }\\n        }\\n        if(name.isEmpty()) {\\n            name = source.toString();\\n        }\\n        if(symbol.isEmpty()) {\\n            symbol = source.toString();\\n        }\\n    }\\n\\n    function _safeDecimals(address tokenAddress, uint256 tokenId) private view returns(uint256 dec) {\\n        (bool result, bytes memory response) = tokenAddress.staticcall(abi.encodeWithSelector(0x3f47e662, tokenId));//decimals(uint256)\\n        if(!result) {\\n            (result, response) = tokenAddress.staticcall(abi.encodeWithSelector(0x313ce567));//decimals()\\n        }\\n        if(result) {\\n            dec = abi.decode(response, (uint256));\\n        } else {\\n            (result, response) = tokenAddress.staticcall(abi.encodeWithSelector(IERC20Metadata(tokenAddress).decimals.selector));\\n            if(result) {\\n                dec = abi.decode(response, (uint256));\\n            }\\n        }\\n        require(dec == 0 || dec == 18, \\\"dec\\\");\\n    }\\n\\n    function _toItemKey(address tokenAddress, uint256 tokenId) private pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(tokenAddress, tokenId));\\n    }\\n\\n    function _unwrap(address from, uint256 itemId, uint256 amount, bytes memory data) private returns (uint256 interoperableAmount) {\\n        require(amount > 0, \\\"zero\\\");\\n        (address tokenAddress, uint256 tokenId, address receiver, bytes memory payload) = abi.decode(data, (address, uint256, address, bytes));\\n        receiver = receiver != address(0) ? receiver : from;\\n        require(itemIdOf(tokenAddress, tokenId) == itemId, \\\"token\\\");\\n        uint256 converter = 10**(18 - _tokenDecimals[itemId]);\\n        uint256 tokenAmount = amount / converter;\\n        interoperableAmount = amount;\\n        require(interoperableAmount > 0);\\n        uint256 balanceOf = IItemMainInterface(mainInterface).balanceOf(from, itemId);\\n        require(balanceOf > 0 && balanceOf >= interoperableAmount, \\\"insuff\\\");\\n        uint256 totalSupply = IItemMainInterface(mainInterface).totalSupply(itemId);\\n        bool isUnity = interoperableAmount >= (51*1e16);\\n        if(totalSupply <= 1e18 && isUnity) {\\n            tokenAmount = 1;\\n        } else {\\n            require(amount == tokenAmount * converter, \\\"amount\\\");\\n        }\\n        require(_tokenDecimals[itemId] == 18 || totalSupply > 1e18 || isUnity, \\\"balance\\\");\\n        IERC1155(tokenAddress).safeTransferFrom(address(this), receiver, tokenId, tokenAmount, payload);\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary BehaviorUtilities {\\n\\n    function randomKey(uint256 i) internal view returns (bytes32) {\\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\\n    }\\n\\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\\n        if(arraySize != 0 && start < arraySize && offset != 0) {\\n            uint256 length = start + offset;\\n            if(start < (length = length > arraySize ? arraySize : length)) {\\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\\n            }\\n        }\\n    }\\n}\\n\\nlibrary ReflectionUtilities {\\n\\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.staticcall(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.call{value : value}(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function isContract(address subject) internal view returns (bool) {\\n        if(subject == address(0)) {\\n            return false;\\n        }\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(subject)\\n        }\\n        return codeLength > 0;\\n    }\\n\\n    function clone(address originalContract) internal returns(address copyContract) {\\n        assembly {\\n            mstore(\\n                0,\\n                or(\\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\\n                    mul(originalContract, 0x1000000000000000000)\\n                )\\n            )\\n            copyContract := create(0, 0, 32)\\n            switch extcodesize(copyContract)\\n                case 0 {\\n                    invalid()\\n                }\\n        }\\n    }\\n}\\n\\nlibrary BytesUtilities {\\n\\n    bytes private constant ALPHABET = \\\"0123456789abcdef\\\";\\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function asAddress(bytes memory b) internal pure returns(address) {\\n        if(b.length == 0) {\\n            return address(0);\\n        }\\n        if(b.length == 20) {\\n            address addr;\\n            assembly {\\n                addr := mload(add(b, 20))\\n            }\\n            return addr;\\n        }\\n        return abi.decode(b, (address));\\n    }\\n\\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (address[]));\\n        }\\n    }\\n\\n    function asBool(bytes memory bs) internal pure returns(bool) {\\n        return asUint256(bs) != 0;\\n    }\\n\\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bool[]));\\n        }\\n    }\\n\\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bytes[]));\\n        }\\n    }\\n\\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string));\\n        }\\n    }\\n\\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string[]));\\n        }\\n    }\\n\\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\\n        if (bs.length >= 32) {\\n            assembly {\\n                x := mload(add(bs, add(0x20, 0)))\\n            }\\n        }\\n    }\\n\\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (uint256[]));\\n        }\\n    }\\n\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\\n        array = new bytes[](1);\\n        array[0] = a;\\n    }\\n\\n    function toBase64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        string memory table = BASE64_ENCODER_DATA;\\n\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, encodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary StringUtilities {\\n\\n    bytes1 private constant CHAR_0 = bytes1('0');\\n    bytes1 private constant CHAR_A = bytes1('A');\\n    bytes1 private constant CHAR_a = bytes1('a');\\n    bytes1 private constant CHAR_f = bytes1('f');\\n\\n    bytes  internal constant BASE64_DECODER_DATA = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                                   hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                                   hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                                   hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function isEmpty(string memory test) internal pure returns (bool) {\\n        return equals(test, \\\"\\\");\\n    }\\n\\n    function equals(string memory a, string memory b) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toLowerCase(string memory str) internal pure returns(string memory) {\\n        bytes memory bStr = bytes(str);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\\n        }\\n        return string(bStr);\\n    }\\n\\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\\n        bytes memory data = abi.encodePacked(str);\\n        if(data.length == 0 || data[0] != \\\"0\\\" || (data[1] != \\\"x\\\" && data[1] != \\\"X\\\")) {\\n            return \\\"\\\";\\n        }\\n        uint256 start = 2;\\n        toDecode = new bytes((data.length - 2) / 2);\\n\\n        for(uint256 i = 0; i < toDecode.length; i++) {\\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\\n        }\\n    }\\n\\n    function toBase64(string memory input) internal pure returns(string memory) {\\n        return BytesUtilities.toBase64(abi.encodePacked(input));\\n    }\\n\\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        bytes memory table = BASE64_DECODER_DATA;\\n\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            mstore(result, decodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\\n        bytes1 charc = bytes1(c);\\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\\n    }\\n}\\n\\nlibrary Uint256Utilities {\\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\\n        array = new uint256[](1);\\n        array[0] = n;\\n    }\\n\\n    function toHex(uint256 _i) internal pure returns (string memory) {\\n        return BytesUtilities.toString(abi.encodePacked(_i));\\n    }\\n\\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\\n        for(uint256 i = 0; i < arr.length; i++) {\\n            result += arr[i];\\n        }\\n    }\\n}\\n\\nlibrary AddressUtilities {\\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\\n        array = new address[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(address _addr) internal pure returns (string memory) {\\n        return _addr == address(0) ? \\\"0x0000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(_addr));\\n    }\\n}\\n\\nlibrary Bytes32Utilities {\\n\\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\\n        array = new bytes32[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(bytes32 bt) internal pure returns (string memory) {\\n        return bt == bytes32(0) ?  \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(bt));\\n    }\\n}\\n\\nlibrary TransferUtilities {\\n    using ReflectionUtilities for address;\\n\\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return account.balance;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\\n    }\\n\\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return 0;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\\n    }\\n\\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/projection/ItemProjection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IItemProjection.sol\\\";\\nimport \\\"../model/IItemMainInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\\\";\\nimport \\\"../util/ERC1155CommonLibrary.sol\\\";\\nimport { AddressUtilities, BytesUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\nabstract contract ItemProjection is IItemProjection, LazyInitCapableElement {\\n    using AddressUtilities for address;\\n    using BytesUtilities for bytes;\\n\\n    address public override mainInterface;\\n    bytes32 public override collectionId;\\n\\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\\n    }\\n\\n    function _lazyInit(bytes memory lazyInitParams) override virtual internal returns(bytes memory lazyInitResponse) {\\n        (mainInterface, lazyInitResponse) = abi.decode(lazyInitParams, (address, bytes));\\n        Header memory header;\\n        CreateItem[] memory items;\\n        (collectionId, header, items, lazyInitResponse) = abi.decode(lazyInitResponse, (bytes32, Header, CreateItem[], bytes));\\n        if(collectionId == bytes32(0)) {\\n            header.host = address(this);\\n            (collectionId,) = IItemMainInterface(mainInterface).createCollection(header, items);\\n        } else if(items.length > 0) {\\n            IItemMainInterface(mainInterface).mintItems(items);\\n        }\\n        lazyInitResponse = _projectionLazyInit(lazyInitResponse);\\n    }\\n\\n    function _supportsInterface(bytes4 interfaceId) override internal pure returns (bool) {\\n        return\\n            interfaceId == type(IItemProjection).interfaceId ||\\n            interfaceId == 0xeac989f8 ||//uri()\\n            interfaceId == this.mainInterface.selector ||\\n            interfaceId == this.collectionId.selector ||\\n            interfaceId == this.plainUri.selector ||\\n            interfaceId == this.itemPlainUri.selector ||\\n            interfaceId == this.setHeader.selector ||\\n            interfaceId == this.toInteroperableInterfaceAmount.selector ||\\n            interfaceId == this.toMainInterfaceAmount.selector ||\\n            interfaceId == this.balanceOf.selector ||\\n            interfaceId == this.balanceOfBatch.selector ||\\n            interfaceId == this.setApprovalForAll.selector ||\\n            interfaceId == this.isApprovedForAll.selector ||\\n            interfaceId == this.safeTransferFrom.selector ||\\n            interfaceId == this.safeBatchTransferFrom.selector ||\\n            interfaceId == 0xd9b67a26 ||//OpenSea Standard\\n            interfaceId == type(IERC1155Views).interfaceId ||\\n            interfaceId == this.totalSupply.selector ||\\n            interfaceId == 0x00ad800c ||//name(uint256)\\n            interfaceId == 0x4e41a1fb ||//symbol(uint256)\\n            interfaceId == 0x3f47e662 ||//decimals(uint256)\\n            interfaceId == 0x313ce567 ||//decimals()\\n            interfaceId == 0x0e89341c ||//uri(uint256)\\n            interfaceId == type(Item).interfaceId ||\\n            interfaceId == 0x06fdde03 ||//name()\\n            interfaceId == 0x95d89b41 ||//symbol()\\n            interfaceId == 0xf5298aca ||//burn(address,uint256,uint256)\\n            interfaceId == 0x6b20c454 ||//burnBatch(address,uint256[],uint256[])\\n            interfaceId == 0x8a94b05f ||//burn(address,uint256,uint256,bytes)\\n            interfaceId == 0x5473422e ||//burnBatch(address,uint256[],uint256[],bytes)\\n            interfaceId == this.mintItems.selector ||\\n            interfaceId == this.setItemsCollection.selector ||\\n            interfaceId == this.setItemsMetadata.selector ||\\n            interfaceId == this.interoperableOf.selector;\\n    }\\n\\n    function _projectionLazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function setHeader(Header calldata value) authorizedOnly override external virtual returns(Header memory oldValue) {\\n        Header[] memory values = new Header[](1);\\n        values[0] = value;\\n        bytes32[] memory collectionIds = new bytes32[](1);\\n        collectionIds[0] = collectionId;\\n        return IItemMainInterface(mainInterface).setCollectionsMetadata(collectionIds, values)[0];\\n    }\\n\\n    function setItemsMetadata(uint256[] calldata itemIds, Header[] calldata values) authorizedOnly override external virtual returns(Header[] memory oldValues) {\\n        return IItemMainInterface(mainInterface).setItemsMetadata(itemIds, values);\\n    }\\n\\n    function mintItems(CreateItem[] memory items) authorizedOnly virtual override public returns(uint256[] memory itemIds) {\\n        uint256 multiplier = 10 ** (18 - decimals(0));\\n        for(uint256 i = 0; i < items.length; i++) {\\n            items[i].collectionId = collectionId;\\n            uint256[] memory amounts = items[i].amounts;\\n            for(uint256 z = 0; z < amounts.length; z++) {\\n                amounts[z] = amounts[z] * multiplier;\\n            }\\n            items[i].amounts = amounts;\\n        }\\n        return IItemMainInterface(mainInterface).mintItems(items);\\n    }\\n\\n    function setItemsCollection(uint256[] calldata itemIds, bytes32[] calldata collectionIds) authorizedOnly virtual override external returns(bytes32[] memory oldCollectionIds) {\\n        return IItemMainInterface(mainInterface).setItemsCollection(itemIds, collectionIds);\\n    }\\n\\n    function name() override external view returns(string memory value) {\\n        (,value,,) = IItemMainInterface(mainInterface).collection(collectionId);\\n    }\\n\\n    function symbol() override external view returns(string memory value) {\\n        (,,value,) = IItemMainInterface(mainInterface).collection(collectionId);\\n    }\\n\\n    function plainUri() override public view returns(string memory value) {\\n        (,,,value) = IItemMainInterface(mainInterface).collection(collectionId);\\n    }\\n\\n    function uri() override public view returns(string memory) {\\n        return IItemMainInterface(mainInterface).collectionUri(collectionId);\\n    }\\n\\n    function interoperableOf(uint256 itemId) override public pure returns(address) {\\n        return address(uint160(itemId));\\n    }\\n\\n    function name(uint256 itemId) override external view returns(string memory) {\\n        (,Header memory header,,) = IItemMainInterface(mainInterface).item(itemId);\\n        return header.name;\\n    }\\n\\n    function symbol(uint256 itemId) override external view returns(string memory) {\\n        (,Header memory header,,) = IItemMainInterface(mainInterface).item(itemId);\\n        return header.symbol;\\n    }\\n\\n    function decimals(uint256) override public virtual view returns(uint256) {\\n        return 18;\\n    }\\n\\n    function decimals() external override view returns(uint256) {\\n        return 18;\\n    }\\n\\n    function toMainInterfaceAmount(uint256 interoperableInterfaceAmount, uint256 itemId) override public view returns(uint256) {\\n        if(interoperableInterfaceAmount == 0) {\\n            return 0;\\n        }\\n        uint256 itemDecimals = decimals(itemId);\\n        if(itemDecimals == 18) {\\n            return interoperableInterfaceAmount;\\n        }\\n        uint256 interoperableTotalSupply = IERC20(interoperableOf(itemId)).totalSupply();\\n        uint256 interoperableUnity = 1e18;\\n        uint256 interoperableHalfUnity = (interoperableUnity / 51) * 100;\\n        uint256 mainInterfaceUnity = 10 ** itemDecimals;\\n        if(interoperableTotalSupply <= interoperableUnity && interoperableInterfaceAmount <= interoperableUnity) {\\n            return interoperableInterfaceAmount < interoperableHalfUnity ? 0 : mainInterfaceUnity;\\n        }\\n        return (interoperableInterfaceAmount * mainInterfaceUnity) / interoperableUnity;\\n    }\\n\\n    function toInteroperableInterfaceAmount(uint256 mainInterfaceAmount, uint256 itemId, address account) override public view returns(uint256) {\\n        if(mainInterfaceAmount == 0) {\\n            return 0;\\n        }\\n        if(decimals(itemId) == 18) {\\n            return mainInterfaceAmount;\\n        }\\n        uint256 interoperableInterfaceAmount = mainInterfaceAmount * 10 ** (18 - decimals(itemId));\\n        if(account == address(0)) {\\n            return interoperableInterfaceAmount;\\n        }\\n        uint256 interoperableBalance = IItemMainInterface(mainInterface).balanceOf(account, itemId);\\n        if(interoperableBalance == 0) {\\n            return interoperableInterfaceAmount;\\n        }\\n        uint256 interoperableTotalSupply = IERC20(interoperableOf(itemId)).totalSupply();\\n        uint256 interoperableUnity = 1e18;\\n        uint256 interoperableHalfUnity = (interoperableUnity / 51) * 100;\\n        if(interoperableTotalSupply <= interoperableUnity && interoperableInterfaceAmount == interoperableUnity && interoperableBalance >= interoperableHalfUnity) {\\n            return interoperableBalance < interoperableInterfaceAmount ? interoperableBalance : interoperableInterfaceAmount;\\n        }\\n        return interoperableInterfaceAmount;\\n    }\\n\\n    function uri(uint256 itemId) override external view returns(string memory) {\\n        return IItemMainInterface(mainInterface).uri(itemId);\\n    }\\n\\n    function itemPlainUri(uint256 itemId) override external view returns(string memory) {\\n        (, Header memory header,,) = IItemMainInterface(mainInterface).item(itemId);\\n        return header.uri;\\n    }\\n\\n    function totalSupply(uint256 itemId) override external view returns (uint256) {\\n        return IItemMainInterface(mainInterface).totalSupply(itemId);\\n    }\\n\\n    function balanceOf(address account, uint256 itemId) override external view returns (uint256) {\\n        return toMainInterfaceAmount(IItemMainInterface(mainInterface).balanceOf(account, itemId), itemId);\\n    }\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata itemIds) override external view returns (uint256[] memory balances) {\\n        balances = IItemMainInterface(mainInterface).balanceOfBatch(accounts, itemIds);\\n        for(uint256 i = 0; i < itemIds.length; i++) {\\n            balances[i] = toMainInterfaceAmount(balances[i], itemIds[i]);\\n        }\\n    }\\n\\n    function isApprovedForAll(address account, address operator) override external view returns (bool) {\\n        return IItemMainInterface(mainInterface).isApprovedForAll(account, operator);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) override external virtual {\\n        IItemMainInterface(mainInterface).setApprovalForAllByCollectionHost(collectionId, msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 itemId, uint256 amount, bytes calldata data) override external virtual {\\n        require(from != address(0), \\\"required from\\\");\\n        require(to != address(0), \\\"required to\\\");\\n        IItemMainInterface(mainInterface).mintTransferOrBurn(false, abi.encode(msg.sender, from, to, itemId, toInteroperableInterfaceAmount(amount, itemId, from)));\\n        ERC1155CommonLibrary.doSafeTransferAcceptanceCheck(msg.sender, from, to, itemId, amount, data);\\n        emit TransferSingle(msg.sender, from, to, itemId, amount);\\n    }\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata itemIds, uint256[] calldata amounts, bytes calldata data) override external virtual {\\n        require(from != address(0), \\\"required from\\\");\\n        require(to != address(0), \\\"required to\\\");\\n        uint256[] memory interoperableInterfaceAmounts = new uint256[](amounts.length);\\n        for(uint256 i = 0 ; i < interoperableInterfaceAmounts.length; i++) {\\n            interoperableInterfaceAmounts[i] = toInteroperableInterfaceAmount(amounts[i], itemIds[i], from);\\n        }\\n        IItemMainInterface(mainInterface).mintTransferOrBurn(true, abi.encode(true, abi.encode(abi.encode(msg.sender, from, to, itemIds, interoperableInterfaceAmounts).asSingletonArray())));\\n        ERC1155CommonLibrary.doSafeBatchTransferAcceptanceCheck(msg.sender, from, to, itemIds, amounts, data);\\n        emit TransferBatch(msg.sender, from, to, itemIds, amounts);\\n    }\\n\\n    function burn(address account, uint256 itemId, uint256 amount) override external {\\n        burn(account, itemId, amount, \\\"\\\");\\n    }\\n\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts) override external {\\n        burnBatch(account, itemIds, amounts, \\\"\\\");\\n    }\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes memory) override virtual public {\\n        require(account != address(0), \\\"required account\\\");\\n        IItemMainInterface(mainInterface).mintTransferOrBurn(false, abi.encode(msg.sender, account, address(0), itemId, toInteroperableInterfaceAmount(amount, itemId, account)));\\n        emit TransferSingle(msg.sender, account, address(0), itemId, amount);\\n    }\\n\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes memory) override virtual public {\\n        require(account != address(0), \\\"required account\\\");\\n        uint256[] memory interoperableInterfaceAmounts = new uint256[](amounts.length);\\n        for(uint256 i = 0 ; i < interoperableInterfaceAmounts.length; i++) {\\n            interoperableInterfaceAmounts[i] = toInteroperableInterfaceAmount(amounts[i], itemIds[i], account);\\n        }\\n        IItemMainInterface(mainInterface).mintTransferOrBurn(true, abi.encode(true, abi.encode(abi.encode(msg.sender, account, address(0), itemIds, interoperableInterfaceAmounts).asSingletonArray())));\\n        emit TransferBatch(msg.sender, account, address(0), itemIds, amounts);\\n    }\\n}\"\r\n    },\r\n    \"contracts/projection/ERC1155/IERC1155Wrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../IItemProjection.sol\\\";\\n\\ninterface IERC1155Wrapper is IItemProjection {\\n\\n    event Token(address indexed tokenAddress, uint256 indexed tokenId, uint256 indexed itemId);\\n\\n    function itemIdOf(address tokenAddress, uint256 tokenId) external view returns(uint256);\\n\\n    function source(uint256 itemId) external view returns(address tokenAddress, uint256 tokenId);\\n}\"\r\n    },\r\n    \"contracts/util/ERC1155CommonLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { ReflectionUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\nlibrary ERC1155CommonLibrary {\\n    using ReflectionUtilities for address;\\n\\n    function doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ILazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override initializer;\\n    address public override host;\\n\\n    constructor(bytes memory lazyInitData) {\\n        if(lazyInitData.length > 0) {\\n            _privateLazyInit(lazyInitData);\\n        }\\n    }\\n\\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\\n        return _privateLazyInit(lazyInitData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == this.supportsInterface.selector ||\\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\\n            interfaceId == this.lazyInit.selector ||\\n            interfaceId == this.initializer.selector ||\\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\\n            interfaceId == this.host.selector ||\\n            interfaceId == this.setHost.selector ||\\n            _supportsInterface(interfaceId);\\n    }\\n\\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = host;\\n        host = newValue;\\n        emit Host(oldValue, newValue);\\n    }\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\\n        if(chidlElementValidationIsConsistent) {\\n            return chidlElementValidationResult;\\n        }\\n        if(subject == host) {\\n            return true;\\n        }\\n        if(!host.isContract()) {\\n            return false;\\n        }\\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\\n        return result && abi.decode(resultData, (bool));\\n    }\\n\\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\\n        require(initializer == address(0), \\\"init\\\");\\n        initializer = msg.sender;\\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        emit Host(address(0), host);\\n        lazyInitResponse = _lazyInit(lazyInitResponse);\\n    }\\n\\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\\n    }\\n\\n    modifier authorizedOnly {\\n        require(_authorizedOnly(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _authorizedOnly() internal returns(bool) {\\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/model/IItemMainInterface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Item.sol\\\";\\n\\nstruct ItemData {\\n    bytes32 collectionId;\\n    Header header;\\n    bytes32 domainSeparator;\\n    uint256 totalSupply;\\n    mapping(address => uint256) balanceOf;\\n    mapping(address => mapping(address => uint256)) allowance;\\n    mapping(address => uint256) nonces;\\n}\\n\\ninterface IItemMainInterface is Item {\\n\\n    event Collection(address indexed from, address indexed to, bytes32 indexed collectionId);\\n\\n    function interoperableInterfaceModel() external view returns(address);\\n\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n    function dynamicUriResolver() external view returns(address);\\n    function hostInitializer() external view returns(address);\\n\\n    function collection(bytes32 collectionId) external view returns(address host, string memory name, string memory symbol, string memory uri);\\n    function collectionUri(bytes32 collectionId) external view returns(string memory);\\n    function createCollection(Header calldata _collection, CreateItem[] calldata items) external returns(bytes32 collectionId, uint256[] memory itemIds);\\n    function setCollectionsMetadata(bytes32[] calldata collectionIds, Header[] calldata values) external returns(Header[] memory oldValues);\\n\\n    function setApprovalForAllByCollectionHost(bytes32 collectionId, address account, address operator, bool approved) external;\\n\\n    function item(uint256 itemId) external view returns(bytes32 collectionId, Header memory header, bytes32 domainSeparator, uint256 totalSupply);\\n\\n    function mintTransferOrBurn(bool isMulti, bytes calldata data) external;\\n\\n    function allowance(address account, address spender, uint256 itemId) external view returns(uint256);\\n    function approve(address account, address spender, uint256 amount, uint256 itemId) external;\\n    function TYPEHASH_PERMIT() external view returns (bytes32);\\n    function EIP712_PERMIT_DOMAINSEPARATOR_NAME_AND_VERSION() external view returns(string memory domainSeparatorName, string memory domainSeparatorVersion);\\n    function permit(uint256 itemId, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function nonces(address owner, uint256 itemId) external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/projection/IItemProjection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../model/Item.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IItemProjection is Item, ILazyInitCapableElement {\\n\\n    function mainInterface() external view returns(address);\\n\\n    function collectionId() external view returns(bytes32);\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n    function itemPlainUri(uint256 itemId) external view returns(string memory);\\n    function setHeader(Header calldata value) external returns(Header memory oldValue);\\n\\n    function toInteroperableInterfaceAmount(uint256 amount, uint256 itemId, address account) external view returns(uint256);\\n    function toMainInterfaceAmount(uint256 amount, uint256 itemId) external view returns(uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/model/Item.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IERC1155Views.sol\\\";\\n\\nstruct Header {\\n    address host;\\n    string name;\\n    string symbol;\\n    string uri;\\n}\\n\\nstruct CreateItem {\\n    Header header;\\n    bytes32 collectionId;\\n    uint256 id;\\n    address[] accounts;\\n    uint256[] amounts;\\n}\\n\\ninterface Item is IERC1155, IERC1155Views {\\n\\n    event CollectionItem(bytes32 indexed fromCollectionId, bytes32 indexed toCollectionId, uint256 indexed itemId);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function decimals() external view returns(uint256);\\n\\n    function burn(address account, uint256 itemId, uint256 amount) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts) external;\\n\\n    function burn(address account, uint256 itemId, uint256 amount, bytes calldata data) external;\\n    function burnBatch(address account, uint256[] calldata itemIds, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    function mintItems(CreateItem[] calldata items) external returns(uint256[] memory itemIds);\\n    function setItemsCollection(uint256[] calldata itemIds, bytes32[] calldata collectionIds) external returns(bytes32[] memory oldCollectionIds);\\n    function setItemsMetadata(uint256[] calldata itemIds, Header[] calldata newValues) external returns(Header[] memory oldValues);\\n\\n    function interoperableOf(uint256 itemId) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/model/IERC1155Views.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\\n * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\\n */\\ninterface IERC1155Views {\\n\\n    /**\\n     * @dev Returns the total supply of the given token id\\n     * @param itemId the id of the token whose availability you want to know \\n     */\\n    function totalSupply(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the name of the given token id\\n     * @param itemId the id of the token whose name you want to know \\n     */\\n    function name(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the given token id\\n     * @param itemId the id of the token whose symbol you want to know \\n     */\\n    function symbol(uint256 itemId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the given token id\\n     * @param itemId the id of the token whose decimals you want to know \\n     */\\n    function decimals(uint256 itemId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the uri of the given token id\\n     * @param itemId the id of the token whose uri you want to know \\n     */\\n    function uri(uint256 itemId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fromCollectionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"toCollectionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"CollectionItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"interoperableOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"itemPlainUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CreateItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"mintItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plainUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header\",\"name\":\"oldValue\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"setItemsCollection\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setItemsMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct Header[]\",\"name\":\"oldValues\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainInterfaceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toInteroperableInterfaceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interoperableInterfaceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"toMainInterfaceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC1155Wrapper", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}