{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StolenNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./tokens/ERC721Enumerable.sol\\\";\\nimport \\\"./tokens/ERC721Permit.sol\\\";\\nimport \\\"./interfaces/IStolenNFT.sol\\\";\\nimport \\\"./interfaces/ICriminalRecords.sol\\\";\\n\\nerror AlreadyStolen(uint256 tokenId);\\nerror CallerNotTheLaw();\\nerror CriminalRecordsOffline();\\nerror CrossChainUriMissing();\\nerror ErrorSendingTips();\\nerror InvalidChainId();\\nerror InvalidRoyalty();\\nerror NothingLeftToSteal();\\nerror NoTips();\\nerror ReceiverIsRetired();\\nerror SenderIsRetired();\\nerror StealingFromZeroAddress();\\nerror StealingStolenNft();\\nerror ThiefIsRetired();\\nerror UnsupportedToken();\\nerror YouAreRetired();\\nerror YouAreWanted();\\n\\n/// @title Steal somebody's NFTs (with their permission of course)\\n/// @dev ERC721 Token supporting EIP-2612 signatures for token approvals\\ncontract StolenNFT is IStolenNFT, Ownable, ERC721Permit, ERC721Enumerable {\\n\\t/// Contract used to track the thief's action\\n\\tICriminalRecords public criminalRecords;\\n\\t/// Maximum supply of stolen NFTs\\n\\tuint256 public maximumSupply;\\n\\t/// Used for unique stolen token ids\\n\\tuint256 private _tokenCounter;\\n\\t/// Mapping from the original address & token id hash to a StolenNFT token id\\n\\tmapping(bytes32 => uint256) private _stolenNfts;\\n\\t/// Mapping from a StolenNFT token id to a struct containing the original address & token id\\n\\tmapping(uint256 => NftData) private _stolenNftsById;\\n\\t/// Optional mapping of StolenNFTs token ids to tokenURIs\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\t/// Mapping of thief's to whether they are retired to disable interaction / transfer with StolenNFTs\\n\\tmapping(address => bool) private _retiredThief;\\n\\n\\tconstructor(address _owner) Ownable(_owner) ERC721Permit(\\\"StolenNFT\\\", \\\"SNFT\\\") {\\n\\t\\tmaximumSupply = type(uint256).max;\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t/// @inheritdoc IStolenNFT\\n\\tfunction steal(\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalAddress,\\n\\t\\tuint256 originalId,\\n\\t\\taddress mintFrom,\\n\\t\\tuint32 royaltyFee,\\n\\t\\tstring memory uri\\n\\t) external payable override returns (uint256) {\\n\\t\\tif (retired(msg.sender)) revert YouAreRetired();\\n\\t\\tif (totalSupply() >= maximumSupply) revert NothingLeftToSteal();\\n\\t\\tif (originalAddress == address(0)) revert StealingFromZeroAddress();\\n\\t\\tif (originalAddress == address(this)) revert StealingStolenNft();\\n\\t\\tif (originalChainId == 0 || originalChainId > type(uint64).max / 2 - 36)\\n\\t\\t\\trevert InvalidChainId();\\n\\t\\tif ((royaltyFee > 0 && originalChainId != block.chainid) || royaltyFee > 10000)\\n\\t\\t\\trevert InvalidRoyalty();\\n\\n\\t\\tbytes32 nftHash = keccak256(abi.encodePacked(originalAddress, originalId));\\n\\t\\tif (_stolenNfts[nftHash] != 0) revert AlreadyStolen(_stolenNfts[nftHash]);\\n\\n\\t\\tuint256 stolenId = ++_tokenCounter;\\n\\n\\t\\t// Set the tokenUri if given\\n\\t\\tif (bytes(uri).length > 0) {\\n\\t\\t\\t_tokenURIs[stolenId] = uri;\\n\\t\\t} else if (originalChainId != block.chainid) {\\n\\t\\t\\trevert CrossChainUriMissing();\\n\\t\\t}\\n\\n\\t\\t// Store the bi-directional mapping between original contract and token id\\n\\t\\t_stolenNfts[nftHash] = stolenId;\\n\\t\\t_stolenNftsById[stolenId] = NftData(\\n\\t\\t\\troyaltyFee,\\n\\t\\t\\toriginalChainId,\\n\\t\\t\\toriginalAddress,\\n\\t\\t\\toriginalId\\n\\t\\t);\\n\\n\\t\\temit Stolen(msg.sender, originalChainId, originalAddress, originalId, stolenId);\\n\\n\\t\\t// Skip sleep minting if callers address is given\\n\\t\\tif (mintFrom == msg.sender) mintFrom = address(0);\\n\\n\\t\\t// Same as mint + additional Transfer event\\n\\t\\t_sleepMint(mintFrom, msg.sender, stolenId);\\n\\n\\t\\taddress originalOwner;\\n\\t\\tif (originalChainId == block.chainid) {\\n\\t\\t\\t// Fetch the original owner if on same chain\\n\\t\\t\\toriginalOwner = originalOwnerOf(originalAddress, originalId);\\n\\n\\t\\t\\t// Check if fetching the original tokenURI is supported if no URI is given\\n\\t\\t\\tif (bytes(uri).length == 0) {\\n\\t\\t\\t\\turi = originalTokenURI(originalAddress, originalId);\\n\\t\\t\\t\\tif (bytes(uri).length == 0) {\\n\\t\\t\\t\\t\\trevert UnsupportedToken();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Track the wanted level if a thief who is not the owner steals it\\n\\t\\tif (address(criminalRecords) != address(0) && msg.sender != originalOwner) {\\n\\t\\t\\tcriminalRecords.crimeWitnessed(msg.sender);\\n\\t\\t}\\n\\n\\t\\treturn stolenId;\\n\\t}\\n\\n\\t/// @inheritdoc IStolenNFT\\n\\tfunction swatted(uint256 stolenId) external override {\\n\\t\\tif (msg.sender != address(criminalRecords)) revert CallerNotTheLaw();\\n\\t\\tif (retired(ERC721.ownerOf(stolenId))) revert ThiefIsRetired();\\n\\t\\t_burn(stolenId);\\n\\t}\\n\\n\\t/// @inheritdoc IStolenNFT\\n\\tfunction surrender(uint256 stolenId) external override onlyHolder(stolenId) {\\n\\t\\t_burn(stolenId);\\n\\n\\t\\tif (address(criminalRecords) != address(0)) {\\n\\t\\t\\tcriminalRecords.surrender(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allows holder of the StolenNFT to overwrite the linked / stored tokenURI\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\t/// @param uri The new tokenURI that should be returned when tokenURI() is called or\\n\\t/// no uri if the nft originates from the same chain and the originals tokenURI should be linked\\n\\tfunction setTokenURI(uint256 stolenId, string memory uri) external onlyHolder(stolenId) {\\n\\t\\tif (bytes(uri).length > 0) {\\n\\t\\t\\t_tokenURIs[stolenId] = uri;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tNftData storage data = _stolenNftsById[stolenId];\\n\\t\\tif (data.chainId == block.chainid) {\\n\\t\\t\\t// Only allow linking if the original token returns an uri\\n\\t\\t\\turi = originalTokenURI(data.contractAddress, data.tokenId);\\n\\t\\t\\tif (bytes(uri).length == 0) {\\n\\t\\t\\t\\trevert UnsupportedToken();\\n\\t\\t\\t}\\n\\t\\t\\tdelete _tokenURIs[stolenId];\\n\\t\\t} else {\\n\\t\\t\\trevert CrossChainUriMissing();\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice While thief's are retired stealing / sending is not possible\\n\\t/// This protects them from NFTs being sent to their address, increasing their wanted level\\n\\t/// @param isRetired Whether msg.sender is retiring or becoming a thief again\\n\\tfunction retire(bool isRetired) external {\\n\\t\\tif (address(criminalRecords) == address(0)) revert CriminalRecordsOffline();\\n\\t\\tif (criminalRecords.getWanted(msg.sender) > 0) revert YouAreWanted();\\n\\n\\t\\t_retiredThief[msg.sender] = isRetired;\\n\\t}\\n\\n\\t/// @notice Sets the maximum amount of StolenNFTs that can be minted / stolen\\n\\t/// @dev Can only be set by the contract owner, emits a SupplyChange event\\n\\t/// @param _maximumSupply The new maximum supply\\n\\tfunction setMaximumSupply(uint256 _maximumSupply) external onlyOwner {\\n\\t\\tmaximumSupply = _maximumSupply;\\n\\t\\temit SupplyChange(_maximumSupply);\\n\\t}\\n\\n\\t/// @notice Sets the criminal records contract that should be used to track thefts\\n\\t/// @dev Can only be set by the contract owner\\n\\t/// @param recordsAddress The address of the contract\\n\\tfunction setCriminalRecords(address recordsAddress) external onlyOwner {\\n\\t\\tcriminalRecords = ICriminalRecords(recordsAddress);\\n\\t\\temit CriminalRecordsChange(recordsAddress);\\n\\t}\\n\\n\\t/// @notice Sends all collected tips to a specified address\\n\\t/// @dev Can only be executed by the contract owner\\n\\t/// @param recipient Payable address that should receive all tips\\n\\tfunction emptyTipJar(address payable recipient) external onlyOwner {\\n\\t\\tif (recipient == address(0)) revert TransferToZeroAddress();\\n\\t\\tuint256 amount = address(this).balance;\\n\\t\\tif (amount == 0) revert NoTips();\\n\\t\\t(bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n\\t\\tif (!success) revert ErrorSendingTips();\\n\\t}\\n\\n\\t/// @inheritdoc IStolenNFT\\n\\tfunction getStolen(address originalAddress, uint256 originalId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\treturn _stolenNfts[keccak256(abi.encodePacked(originalAddress, originalId))];\\n\\t}\\n\\n\\t/// @inheritdoc IStolenNFT\\n\\tfunction getOriginal(uint256 stolenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint64,\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\treturn (\\n\\t\\t\\t_stolenNftsById[stolenId].chainId,\\n\\t\\t\\t_stolenNftsById[stolenId].contractAddress,\\n\\t\\t\\t_stolenNftsById[stolenId].tokenId\\n\\t\\t);\\n\\t}\\n\\n\\t/// @inheritdoc IERC721Metadata\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(IERC721Metadata, ERC721)\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tif (!_exists(tokenId)) revert QueryForNonExistentToken(tokenId);\\n\\n\\t\\tif (bytes(_tokenURIs[tokenId]).length > 0) {\\n\\t\\t\\treturn _tokenURIs[tokenId];\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\toriginalTokenURI(\\n\\t\\t\\t\\t_stolenNftsById[tokenId].contractAddress,\\n\\t\\t\\t\\t_stolenNftsById[tokenId].tokenId\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Returns the original tokenURI of an IERC721Metadata token\\n\\t/// @dev External call that can be influenced by caller, handle with care\\n\\t/// @param contractAddress The contract address of the NFT\\n\\t/// @param tokenId The token id of the NFT\\n\\t/// @return If the contract is a valid IERC721Metadata token the tokenURI will be returned,\\n\\t/// an empty string otherwise\\n\\tfunction originalTokenURI(address contractAddress, uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tif (contractAddress.code.length > 0) {\\n\\t\\t\\ttry IERC721Metadata(contractAddress).tokenURI(tokenId) returns (\\n\\t\\t\\t\\tstring memory fetchedURI\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn fetchedURI;\\n\\t\\t\\t} catch {}\\n\\t\\t}\\n\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\t/// @notice Returns the original owner of an IERC721 token if the owner is not a contract\\n\\t/// @dev External call that can be influenced by caller, handle with care\\n\\t/// @param contractAddress The contract address of the NFT\\n\\t/// @param tokenId The token id of the NFT\\n\\t/// @return If the contract is a valid IERC721 token that exists the address will be returned\\n\\t/// if its not an contract address, zero-address otherwise\\n\\tfunction originalOwnerOf(address contractAddress, uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (address)\\n\\t{\\n\\t\\tif (contractAddress.code.length > 0) {\\n\\t\\t\\ttry IERC721(contractAddress).ownerOf(tokenId) returns (address _holder) {\\n\\t\\t\\t\\tif (_holder.code.length == 0) {\\n\\t\\t\\t\\t\\treturn _holder;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch {}\\n\\t\\t}\\n\\n\\t\\treturn address(0);\\n\\t}\\n\\n\\t/// @notice Returns whether a thief is retired\\n\\t/// @param thief The thief who should be checked out\\n\\t/// @return True if criminal records are online and the thief is retired, false otherwise\\n\\tfunction retired(address thief) public view returns (bool) {\\n\\t\\treturn address(criminalRecords) != address(0) && _retiredThief[thief];\\n\\t}\\n\\n\\t/// @inheritdoc IERC2981\\n\\tfunction royaltyInfo(uint256 tokenId, uint256 salePrice)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (address, uint256)\\n\\t{\\n\\t\\taddress holder;\\n\\t\\tuint256 royaltyValue;\\n\\t\\tNftData storage data = _stolenNftsById[tokenId];\\n\\n\\t\\tif (data.tokenRoyalty > 0 && data.tokenRoyalty <= 10000) {\\n\\t\\t\\t// Only non holders that are not contracts will be compensated\\n\\t\\t\\tholder = originalOwnerOf(data.contractAddress, data.tokenId);\\n\\n\\t\\t\\tif (holder != address(0)) {\\n\\t\\t\\t\\troyaltyValue = (salePrice * data.tokenRoyalty) / 10000;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (holder, royaltyValue);\\n\\t}\\n\\n\\t/// @inheritdoc IERC165\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC165, ERC721, ERC721Enumerable)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/// @inheritdoc ERC721\\n\\tfunction _burn(uint256 tokenId) internal override(ERC721) {\\n\\t\\tNftData storage data = _stolenNftsById[tokenId];\\n\\n\\t\\temit Seized(\\n\\t\\t\\tERC721.ownerOf(tokenId),\\n\\t\\t\\tdata.chainId,\\n\\t\\t\\tdata.contractAddress,\\n\\t\\t\\tdata.tokenId,\\n\\t\\t\\ttokenId\\n\\t\\t);\\n\\n\\t\\tdelete _stolenNfts[keccak256(abi.encodePacked(data.contractAddress, data.tokenId))];\\n\\t\\tdelete _stolenNftsById[tokenId];\\n\\n\\t\\tif (bytes(_tokenURIs[tokenId]).length > 0) {\\n\\t\\t\\tdelete _tokenURIs[tokenId];\\n\\t\\t}\\n\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc ERC721\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual override(ERC721, ERC721Enumerable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\n\\t}\\n\\n\\t/// @inheritdoc ERC721\\n\\tfunction _afterTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual override(ERC721) {\\n\\t\\tsuper._afterTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Prohibit retired thief's from transferring\\n\\t\\t// Track the exchange except if the original holder is transferring it\\n\\t\\tif (address(criminalRecords) != address(0) && from != address(0)) {\\n\\t\\t\\tif (_retiredThief[from]) revert SenderIsRetired();\\n\\t\\t\\tif (_retiredThief[to]) revert ReceiverIsRetired();\\n\\n\\t\\t\\tcriminalRecords.exchangeWitnessed(from, to);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Modifier that verifies that msg.sender is the owner of the StolenNFT\\n\\t/// @param stolenId The token id of the StolenNFT\\n\\tmodifier onlyHolder(uint256 stolenId) {\\n\\t\\taddress holder = ERC721.ownerOf(stolenId);\\n\\t\\tif (msg.sender != holder) revert NotTheTokenOwner();\\n\\t\\tif (retired(msg.sender)) revert YouAreRetired();\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Emitted when the maximum supply of StolenNFTs changes\\n\\t/// @param newSupply the new maximum supply\\n\\tevent SupplyChange(uint256 newSupply);\\n\\n\\t/// @notice Emitted when the criminalRecords get set or unset\\n\\t/// @param recordsAddress The new address of the CriminalRecords or zero address if disabled\\n\\tevent CriminalRecordsChange(address recordsAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror CallerNotTheOwner();\\nerror NewOwnerIsZeroAddress();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n\\taddress private _contractOwner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Initializes the given owner as the initial owner.\\n\\t */\\n\\tconstructor(address contractOwner_) {\\n\\t\\t_transferOwnership(contractOwner_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _contractOwner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\tif (owner() != msg.sender) revert CallerNotTheOwner();\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\tif (newOwner == address(0)) revert NewOwnerIsZeroAddress();\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Internal function without access restriction.\\n\\t */\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _contractOwner;\\n\\t\\t_contractOwner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\nerror OwnerIndexOutOfBounds(uint256 index);\\nerror GlobalIndexOutOfBounds(uint256 index);\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n\\t// Mapping from owner to list of owned token IDs\\n\\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n\\t// Mapping from token ID to index of the owner tokens list\\n\\tmapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n\\t// Array with all token ids, used for enumeration\\n\\tuint256[] private _allTokens;\\n\\n\\t// Mapping from token id to position in the allTokens array\\n\\tmapping(uint256 => uint256) private _allTokensIndex;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC165, ERC721)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721Enumerable).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (index >= ERC721.balanceOf(owner)) revert OwnerIndexOutOfBounds(index);\\n\\t\\treturn _ownedTokens[owner][index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-tokenByIndex}.\\n\\t */\\n\\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n\\t\\tif (index >= ERC721Enumerable.totalSupply()) revert GlobalIndexOutOfBounds(index);\\n\\t\\treturn _allTokens[index];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\tif (from == address(0)) {\\n\\t\\t\\t_addTokenToAllTokensEnumeration(tokenId);\\n\\t\\t} else if (from != to) {\\n\\t\\t\\t_removeTokenFromOwnerEnumeration(from, tokenId);\\n\\t\\t}\\n\\t\\tif (to == address(0)) {\\n\\t\\t\\t_removeTokenFromAllTokensEnumeration(tokenId);\\n\\t\\t} else if (to != from) {\\n\\t\\t\\t_addTokenToOwnerEnumeration(to, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n\\t * @param to address representing the new owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n\\t */\\n\\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n\\t\\tuint256 length = ERC721.balanceOf(to);\\n\\t\\t_ownedTokens[to][length] = tokenId;\\n\\t\\t_ownedTokensIndex[tokenId] = length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to add a token to this extension's token tracking data structures.\\n\\t * @param tokenId uint256 ID of the token to be added to the tokens list\\n\\t */\\n\\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t_allTokensIndex[tokenId] = _allTokens.length;\\n\\t\\t_allTokens.push(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n\\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n\\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n\\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n\\t */\\n\\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n\\t\\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n\\t\\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary\\n\\t\\tif (tokenIndex != lastTokenIndex) {\\n\\t\\t\\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n\\t\\t\\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t\\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\t\\t}\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _ownedTokensIndex[tokenId];\\n\\t\\tdelete _ownedTokens[from][lastTokenIndex];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Private function to remove a token from this extension's token tracking data structures.\\n\\t * This has O(1) time complexity, but alters the order of the _allTokens array.\\n\\t * @param tokenId uint256 ID of the token to be removed from the tokens list\\n\\t */\\n\\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastTokenIndex = _allTokens.length - 1;\\n\\t\\tuint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\tuint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n\\t\\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n\\t\\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allTokensIndex[tokenId];\\n\\t\\t_allTokens.pop();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Permit.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"../utils/EIP712.sol\\\";\\n\\nerror NotTheTokenOwner();\\nerror PermitToOwner();\\nerror PermitDeadLineExpired();\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 approval (see {IERC721-approval}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC721Permit is ERC721, IERC721Permit, EIP712 {\\n\\tmapping(address => uint256) private _nonces;\\n\\n\\t// solhint-disable-next-line var-name-mixedcase\\n\\tbytes32 private immutable _PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\t\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n\\t\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n\\t *\\n\\t * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n\\t */\\n\\tconstructor(string memory _name, string memory _symbol)\\n\\t\\tERC721(_name, _symbol)\\n\\t\\tEIP712(_name, \\\"1\\\")\\n\\t{}\\n\\n\\t/**\\n\\t * @dev See {IERC20Permit-permit}.\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public virtual override {\\n\\t\\tif (owner != ERC721.ownerOf(value)) revert NotTheTokenOwner();\\n\\t\\tif (spender == owner) revert PermitToOwner();\\n\\t\\tif (block.timestamp > deadline) revert PermitDeadLineExpired();\\n\\n\\t\\tbytes32 structHash = keccak256(\\n\\t\\t\\tabi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)\\n\\t\\t);\\n\\n\\t\\tbytes32 hash = _hashTypedDataV4(structHash);\\n\\n\\t\\taddress signer = ECDSA.recover(hash, v, r, s);\\n\\t\\tif (signer != owner) revert InvalidSignature();\\n\\n\\t\\t_approve(spender, value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20Permit-nonces}.\\n\\t */\\n\\tfunction nonces(address owner) public view virtual override returns (uint256) {\\n\\t\\treturn _nonces[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n\\t */\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n\\t\\treturn _domainSeparatorV4();\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n\\t *\\n\\t * _Available since v4.1._\\n\\t */\\n\\tfunction _useNonce(address owner) internal virtual returns (uint256 current) {\\n\\t\\tcurrent = _nonces[owner];\\n\\t\\tunchecked {\\n\\t\\t\\t_nonces[owner] = current + 1;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStolenNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"../tokens/IERC721Permit.sol\\\";\\n\\n/// @title Steal somebody's NFTs (with their permission of course)\\n/// @dev ERC721 Token supporting EIP-2612 signatures for token approvals\\ninterface IStolenNFT is IERC2981, IERC721Metadata, IERC721Enumerable, IERC721Permit {\\n\\t/// @notice Emitted when a user steals / mints a NFT\\n\\t/// @param thief The user who stole a NFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the minted StolenNFT\\n\\tevent Stolen(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress indexed originalContract,\\n\\t\\tuint256 indexed originalId,\\n\\t\\tuint256 stolenId\\n\\t);\\n\\n\\t/// @notice Emitted when a user was reported and gets his StolenNFT taken away / burned\\n\\t/// @param thief The user who returned the StolenNFT\\n\\t/// @param originalChainId The chain the Nft was stolen from\\n\\t/// @param originalContract The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tevent Seized(\\n\\t\\taddress indexed thief,\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalContract,\\n\\t\\tuint256 originalId,\\n\\t\\tuint256 indexed stolenId\\n\\t);\\n\\n\\t/// @notice Struct to store the contract and token ID of the NFT that was stolen\\n\\tstruct NftData {\\n\\t\\tuint32 tokenRoyalty;\\n\\t\\tuint64 chainId;\\n\\t\\taddress contractAddress;\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\t/// @notice Steal / Mint an original NFT to create a StolenNFT\\n\\t/// @dev Emits a Stolen event\\n\\t/// @param originalChainId The chainId the NFT originates from, used to trace where the nft was stolen from\\n\\t/// @param originalAddress The original NFTs contract address\\n\\t/// @param originalId The original NFTs token ID\\n\\t/// @param mintFrom Optional address the StolenNFT will be minted and transferred from\\n\\t/// @param royaltyFee Optional royalty that should be payed to the original owner on secondary market sales\\n\\t/// @param uri Optional Metadata URI to overwrite / censor the original NFT\\n\\tfunction steal(\\n\\t\\tuint64 originalChainId,\\n\\t\\taddress originalAddress,\\n\\t\\tuint256 originalId,\\n\\t\\taddress mintFrom,\\n\\t\\tuint32 royaltyFee,\\n\\t\\tstring memory uri\\n\\t) external payable returns (uint256);\\n\\n\\t/// @notice Allows the StolenNFT to be taken away / burned by the authorities\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction swatted(uint256 stolenId) external;\\n\\n\\t/// @notice Allows the holder to return / burn the StolenNFT\\n\\t/// @dev Emits a Swatted event\\n\\t/// @param stolenId The token ID of the StolenNFT\\n\\tfunction surrender(uint256 stolenId) external;\\n\\n\\t/// @notice Returns the stolenID for a given original NFT address and tokenID if stolen\\n\\t/// @param originalAddress The contract address of the original NFT\\n\\t/// @param originalId The tokenID of the original NFT\\n\\t/// @return The stolenID\\n\\tfunction getStolen(address originalAddress, uint256 originalId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/// @notice Returns the original NFT address and tokenID for a given stolenID if stolen\\n\\t/// @param stolenId The stolenID to lookup\\n\\t/// @return originalChainId The chain the NFT was stolen from\\n\\t/// @return originalAddress The contract address of the original NFT\\n\\t/// @return originalId The tokenID of the original NFT\\n\\tfunction getOriginal(uint256 stolenId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint64,\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICriminalRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Police HQ - tracking criminals - staying corrupt\\ninterface ICriminalRecords {\\n\\t/// @notice Emitted when the wanted level of a criminal changes\\n\\t/// @param criminal The user that committed a crime\\n\\t/// @param level The criminals new wanted level\\n\\tevent Wanted(address indexed criminal, uint256 level);\\n\\n\\t/// @notice Emitted when a report against a criminal was filed\\n\\t/// @param snitch The user that reported the theft\\n\\t/// @param thief The user that got reported\\n\\t/// @param stolenId The tokenID of the stolen NFT\\n\\tevent Reported(address indexed snitch, address indexed thief, uint256 indexed stolenId);\\n\\n\\t/// @notice Emitted when a the criminal is arrested\\n\\t/// @param snitch The user that reported the theft\\n\\t/// @param thief The user that got reported\\n\\t/// @param stolenId The tokenID of the stolen NFT\\n\\tevent Arrested(address indexed snitch, address indexed thief, uint256 indexed stolenId);\\n\\n\\t/// @notice Struct to store the the details of a report\\n\\tstruct Report {\\n\\t\\tuint256 stolenId;\\n\\t\\tuint256 timestamp;\\n\\t}\\n\\n\\t/// @notice Maximum wanted level a thief can have\\n\\t/// @return The maximum wanted level\\n\\tfunction maximumWanted() external view returns (uint8);\\n\\n\\t/// @notice The wanted level sentence given for a crime\\n\\t/// @return The sentence\\n\\tfunction sentence() external view returns (uint8);\\n\\n\\t/// @notice The percentage between 0-100 a report is successful and the thief is caught\\n\\t/// @return The chance\\n\\tfunction thiefCaughtChance() external view returns (uint8);\\n\\n\\t/// @notice Time that has to pass between the report and the arrest of a criminal\\n\\t/// @return The time\\n\\tfunction reportDelay() external view returns (uint32);\\n\\n\\t/// @notice Time how long a report will be valid\\n\\t/// @return The time\\n\\tfunction reportValidity() external view returns (uint32);\\n\\n\\t/// @notice How much to bribe to remove a wanted level\\n\\t/// @return The cost of a bribe\\n\\tfunction bribePerLevel() external view returns (uint256);\\n\\n\\t/// @notice The reward if a citizen successfully reports a criminal\\n\\t/// @return The reward\\n\\tfunction reward() external view returns (uint256);\\n\\n\\t/// @notice Decrease the criminals wanted level by providing a bribe denominated in CounterfeitMoney\\n\\t/// @dev The decrease depends on {bribePerLevel}. If more CounterfeitMoney is given\\n\\t/// then needed it will not be transferred / burned.\\n\\t/// Emits a {Wanted} Event\\n\\t/// @param criminal The criminal whose wanted level should be reduced\\n\\t/// @param amount Amount of CounterfeitMoney available to pay the bribe\\n\\t/// @return Number of wanted levels that have been removed\\n\\tfunction bribe(address criminal, uint256 amount) external returns (uint256);\\n\\n\\t/// @notice Decrease the criminals wanted level by providing a bribe denominated in CounterfeitMoney and a valid EIP-2612 Permit\\n\\t/// @dev Same as {xref-ICriminalRecords-bribe-address-uint256-}[`bribe`], with additional signature parameters which\\n\\t/// allow the approval and transfer of CounterfeitMoney in a single Transaction using EIP-2612 Permits\\n\\t/// Emits a {Wanted} Event\\n\\t/// @param criminal The criminal whose wanted level should be reduced\\n\\t/// @param amount Amount of CounterfeitMoney available to pay the bribe\\n\\t/// @param deadline timestamp until when the given signature will be valid\\n\\t/// @param v The parity of the y co-ordinate of r of the signature\\n\\t/// @param r The x co-ordinate of the r value of the signature\\n\\t/// @param s The x co-ordinate of the s value of the signature\\n\\t/// @return Number of wanted levels that have been removed\\n\\tfunction bribeCheque(\\n\\t\\taddress criminal,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256);\\n\\n\\t/// @notice Report the theft of a stolen NFT, required to trigger an arrest\\n\\t/// @dev Emits a {Reported} Event\\n\\t/// @param stolenId The stolen NFTs tokenID that should be reported\\n\\tfunction reportTheft(uint256 stolenId) external;\\n\\n\\t/// @notice After previous report was filed the arrest can be triggered\\n\\t/// If the arrest is successful the stolen NFT will be returned / burned\\n\\t/// If the thief gets away another report has to be filed\\n\\t/// @dev Emits a {Arrested} and {Wanted} Event\\n\\t/// @return Returns true if the report was successful\\n\\tfunction arrest() external returns (bool);\\n\\n\\t/// @notice Returns the wanted level of a given criminal\\n\\t/// @param criminal The criminal whose wanted level should be returned\\n\\t/// @return The criminals wanted level\\n\\tfunction getWanted(address criminal) external view returns (uint256);\\n\\n\\t// @notice Returns whether report data and processing state\\n\\t/// @param reporter The reporter who reported the theft\\n\\t/// @return stolenId The reported stolen NFT\\n\\t/// @return timestamp The timestamp when the theft was reported\\n\\t/// @return processed true if the report has been processed, false if not reported / processed or expired\\n\\tfunction getReport(address reporter)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool\\n\\t\\t);\\n\\n\\t/// @notice Executed when a theft of a NFT was witnessed, increases the criminals wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param criminal The criminal who committed the crime\\n\\tfunction crimeWitnessed(address criminal) external;\\n\\n\\t/// @notice Executed when a transfer of a NFT was witnessed, increases the receivers wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param from The sender of the stolen NFT\\n\\t/// @param to The receiver of the stolen NFT\\n\\tfunction exchangeWitnessed(address from, address to) external;\\n\\n\\t/// @notice Allows the criminal to surrender and to decrease his wanted level\\n\\t/// @dev Emits a {Wanted} Event\\n\\t/// @param criminal The criminal who turned himself in\\n\\tfunction surrender(address criminal) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nerror QueryForZeroAddress();\\nerror QueryForNonExistentToken(uint256 tokenId);\\nerror ApprovalToOwner();\\nerror CallerNotApprovedOrOwner();\\nerror TransferToNonERC721Receiver();\\nerror MintFromOwnAddress();\\nerror MintToZeroAddress();\\nerror TokenAlreadyMinted();\\nerror TransferToZeroAddress();\\nerror TransferFromNotTheOwner();\\nerror ApproveToOwner();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is ERC165, IERC721, IERC721Metadata {\\n\\t// Token name\\n\\tstring private _name;\\n\\n\\t// Token symbol\\n\\tstring private _symbol;\\n\\n\\t// Mapping from token ID to owner address\\n\\tmapping(uint256 => address) private _owners;\\n\\n\\t// Mapping owner address to token count\\n\\tmapping(address => uint256) private _balances;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) private _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\t/**\\n\\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC165, IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\\n\\t\\tif (owner == address(0)) revert QueryForZeroAddress();\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n\\t\\taddress owner = _owners[tokenId];\\n\\t\\tif (owner == address(0)) revert QueryForNonExistentToken(tokenId);\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public virtual override {\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\t\\tif (to == owner) revert ApprovalToOwner();\\n\\n\\t\\tif (msg.sender != owner && !isApprovedForAll(owner, msg.sender))\\n\\t\\t\\trevert CallerNotApprovedOrOwner();\\n\\n\\t\\t_approve(to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\\n\\t\\tif (!_exists(tokenId)) revert QueryForNonExistentToken(tokenId);\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\n\\t\\t_setApprovalForAll(msg.sender, operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tif (!_isApprovedOrOwner(msg.sender, tokenId)) revert CallerNotApprovedOrOwner();\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\tif (!_isApprovedOrOwner(msg.sender, tokenId)) revert CallerNotApprovedOrOwner();\\n\\t\\t_safeTransfer(from, to, tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n\\t *\\n\\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n\\t *\\n\\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n\\t * implement alternative mechanisms to perform token transfer, such as signature-based.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `from` cannot be the zero address.\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must exist and be owned by `from`.\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) internal virtual {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\tif (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n\\t\\t\\trevert TransferToNonERC721Receiver();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t * and stop existing when they are burned (`_burn`).\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\\n\\t\\treturn _owners[tokenId] != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t */\\n\\tfunction _isApprovedOrOwner(address spender, uint256 tokenId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tif (!_exists(tokenId)) revert QueryForNonExistentToken(tokenId);\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\t\\treturn (spender == owner ||\\n\\t\\t\\tgetApproved(tokenId) == spender ||\\n\\t\\t\\tisApprovedForAll(owner, spender));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `to`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `to` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(address to, uint256 tokenId) internal virtual {\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\n\\t\\tif (_exists(tokenId)) revert TokenAlreadyMinted();\\n\\n\\t\\t_beforeTokenTransfer(address(0), to, tokenId);\\n\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(address(0), to, tokenId);\\n\\n\\t\\t_afterTokenTransfer(address(0), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `tokenId` and transfers it to `receiver`.\\n\\t *\\n\\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must not exist.\\n\\t * - `receiver` cannot be the zero address.\\n\\t *\\n\\t * Emits a {Transfer} event from `AddressZero` to `minter` if minter is not AddressZero.\\n\\t * Emits a {Transfer} event from `minter` to `receiver`.\\n\\t */\\n\\tfunction _sleepMint(\\n\\t\\taddress minter,\\n\\t\\taddress receiver,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\tif (minter == receiver) revert MintFromOwnAddress();\\n\\t\\tif (receiver == address(0)) revert MintToZeroAddress();\\n\\t\\tif (_exists(tokenId)) revert TokenAlreadyMinted();\\n\\n\\t\\t_beforeTokenTransfer(address(0), receiver, tokenId);\\n\\n\\t\\t_balances[receiver] += 1;\\n\\t\\t_owners[tokenId] = receiver;\\n\\n\\t\\tif (minter != address(0)) {\\n\\t\\t\\temit Transfer(address(0), minter, tokenId);\\n\\t\\t}\\n\\n\\t\\temit Transfer(minter, receiver, tokenId);\\n\\n\\t\\t_afterTokenTransfer(address(0), receiver, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\taddress owner = ERC721.ownerOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfer(owner, address(0), tokenId);\\n\\n\\t\\t// Clear approvals\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[owner] -= 1;\\n\\t\\tdelete _owners[tokenId];\\n\\n\\t\\temit Transfer(owner, address(0), tokenId);\\n\\n\\t\\t_afterTokenTransfer(owner, address(0), tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {\\n\\t\\tif (ERC721.ownerOf(tokenId) != from) revert TransferFromNotTheOwner();\\n\\t\\tif (to == address(0)) revert TransferToZeroAddress();\\n\\n\\t\\t_beforeTokenTransfer(from, to, tokenId);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId);\\n\\n\\t\\t_balances[from] -= 1;\\n\\t\\t_balances[to] += 1;\\n\\t\\t_owners[tokenId] = to;\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\n\\t\\t_afterTokenTransfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(address to, uint256 tokenId) internal virtual {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `operator` to operate on all of `owner` tokens\\n\\t *\\n\\t * Emits a {ApprovalForAll} event.\\n\\t */\\n\\tfunction _setApprovalForAll(\\n\\t\\taddress owner,\\n\\t\\taddress operator,\\n\\t\\tbool approved\\n\\t) internal virtual {\\n\\t\\tif (owner == operator) revert ApproveToOwner();\\n\\t\\t_operatorApprovals[owner][operator] = approved;\\n\\t\\temit ApprovalForAll(owner, operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n\\t * The call is not executed if the target address is not a contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\tif (to.code.length > 0) {\\n\\t\\t\\ttry IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (\\n\\t\\t\\t\\tbytes4 retval\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn retval == IERC721Receiver.onERC721Received.selector;\\n\\t\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\t\\trevert TransferToNonERC721Receiver();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer. This includes minting\\n\\t * and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _afterTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/IERC721Permit.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/**\\n * @dev Interface of extending the IERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 approval (see {IERC721-approval}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC721Permit is IERC20Permit {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n\\t/* solhint-disable var-name-mixedcase */\\n\\t// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n\\t// invalidate the cached domain separator if the chain id changes.\\n\\tbytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n\\tuint256 private immutable _CACHED_CHAIN_ID;\\n\\taddress private immutable _CACHED_THIS;\\n\\n\\tbytes32 private immutable _HASHED_NAME;\\n\\tbytes32 private immutable _HASHED_VERSION;\\n\\tbytes32 private immutable _TYPE_HASH;\\n\\n\\t/* solhint-enable var-name-mixedcase */\\n\\n\\t/**\\n\\t * @dev Initializes the domain separator and parameter caches.\\n\\t *\\n\\t * The meaning of `name` and `version` is specified in\\n\\t * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n\\t *\\n\\t * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n\\t * - `version`: the current major version of the signing domain.\\n\\t *\\n\\t * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n\\t * contract upgrade].\\n\\t */\\n\\tconstructor(string memory name, string memory version) {\\n\\t\\tbytes32 hashedName = keccak256(bytes(name));\\n\\t\\tbytes32 hashedVersion = keccak256(bytes(version));\\n\\t\\tbytes32 typeHash = keccak256(\\n\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t);\\n\\t\\t_HASHED_NAME = hashedName;\\n\\t\\t_HASHED_VERSION = hashedVersion;\\n\\t\\t_CACHED_CHAIN_ID = block.chainid;\\n\\t\\t_CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n\\t\\t_CACHED_THIS = address(this);\\n\\t\\t_TYPE_HASH = typeHash;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the domain separator for the current chain.\\n\\t */\\n\\tfunction _domainSeparatorV4() internal view returns (bytes32) {\\n\\t\\tif (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n\\t\\t\\treturn _CACHED_DOMAIN_SEPARATOR;\\n\\t\\t} else {\\n\\t\\t\\treturn _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _buildDomainSeparator(\\n\\t\\tbytes32 typeHash,\\n\\t\\tbytes32 nameHash,\\n\\t\\tbytes32 versionHash\\n\\t) private view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n\\t * function returns the hash of the fully encoded EIP712 message for this domain.\\n\\t *\\n\\t * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n\\t *\\n\\t * ```solidity\\n\\t * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n\\t *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n\\t *     mailTo,\\n\\t *     keccak256(bytes(mailContents))\\n\\t * )));\\n\\t * address signer = ECDSA.recover(digest, signature);\\n\\t * ```\\n\\t */\\n\\tfunction _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n\\t\\treturn ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror InvalidSignature();\\nerror InvalidSignatureLength();\\nerror InvalidSignatureSValue();\\nerror InvalidSignatureVValue();\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n\\t/**\\n\\t * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\tif (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n\\t\\t\\trevert InvalidSignatureSValue();\\n\\t\\t}\\n\\t\\tif (v != 27 && v != 28) {\\n\\t\\t\\trevert InvalidSignatureVValue();\\n\\t\\t}\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\tif (signer == address(0)) {\\n\\t\\t\\trevert InvalidSignature();\\n\\t\\t}\\n\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyStolen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTheLaw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CriminalRecordsOffline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossChainUriMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorSendingTips\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GlobalIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoyalty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureSValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureVValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFromOwnAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTips\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingLeftToSteal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadLineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitToOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"QueryForNonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiverIsRetired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsRetired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StealingFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StealingStolenNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThiefIsRetired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouAreRetired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouAreWanted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recordsAddress\",\"type\":\"address\"}],\"name\":\"CriminalRecordsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"originalChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"Seized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"originalChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"Stolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"SupplyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"criminalRecords\",\"outputs\":[{\"internalType\":\"contract ICriminalRecords\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"emptyTipJar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"getOriginal\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalId\",\"type\":\"uint256\"}],\"name\":\"getStolen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"originalOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"originalTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isRetired\",\"type\":\"bool\"}],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thief\",\"type\":\"address\"}],\"name\":\"retired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recordsAddress\",\"type\":\"address\"}],\"name\":\"setCriminalRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumSupply\",\"type\":\"uint256\"}],\"name\":\"setMaximumSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"originalChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintFrom\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"royaltyFee\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"steal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"surrender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stolenId\",\"type\":\"uint256\"}],\"name\":\"swatted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StolenNFT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000ab6405423374236559f5969e93fcdaee3f14dd00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}