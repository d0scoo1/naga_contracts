{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GuestlistedArt.sol\": {\r\n      \"content\": \"// File contracts/GuestlistedLibrary.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary GuestlistedLibrary {\\n    struct Venue { \\n        string name;\\n        string location;\\n        uint[2][] indexes;\\n        string[] colors;\\n        uint[] djIndexes;\\n    }\\n\\n    struct DJ { \\n        string firstName;\\n        string lastName;\\n        uint fontSize;\\n    }\\n\\n    struct TokenData {\\n        uint tokenId;\\n        uint deterministicNumber;\\n        uint randomNumber;\\n        uint shapeRandomNumber;\\n        uint shapeIndex;\\n        string json;\\n        string date;\\n        string bg;\\n        string color;\\n        string shape;\\n        string attributes;\\n        string customMetadata;\\n        string djFullName;\\n        Venue venue;\\n        DJ dj;\\n    }\\n\\n    function toString(uint value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\\n\\n// File contracts/GuestlistedArt.sol\\n\\n\\npragma solidity ^0.8.12;\\npragma experimental ABIEncoderV2;\\n\\n// author: @etherlect\\n\\ncontract GuestlistedArt {\\n\\n    // --------------------------------------------------------\\n    // \\n    //  Draw the token image (SVG) from token tokenData\\n    // \\n    // --------------------------------------------------------\\n    function draw (GuestlistedLibrary.TokenData memory tokenData) external pure returns (string memory) {\\n        uint rotate = tokenData.randomNumber % 360;\\n        uint patternSize = 150;\\n        uint dasharray = tokenData.randomNumber % 3;\\n        uint scale;\\n        string memory drawing;\\n\\n        // --------------------------------------------------------\\n        // \\n        //  Setup scale, rotate and patternSize \\n        //  depending on shape type\\n        // \\n        // --------------------------------------------------------\\n        if (tokenData.shapeIndex == 0) {\\n            // circle\\n            rotate = 0;\\n            scale = 8;\\n        } else if (tokenData.shapeIndex == 1) {\\n            // prism\\n            scale = tokenData.randomNumber % 8 + 4;\\n        } else if (tokenData.shapeIndex == 2) {\\n            // square\\n            scale = tokenData.randomNumber % 4 + 4;\\n        } else if (tokenData.shapeIndex == 3) {\\n            // cube\\n            scale = tokenData.randomNumber % 4 + 3;\\n            patternSize = 210;\\n        } else if (tokenData.shapeIndex == 4) {\\n            // line\\n            scale = tokenData.randomNumber % 5 + 1;\\n            patternSize = 50;\\n        }\\n\\n        // --------------------------------------------------------\\n        // \\n        //  Starting to build the SVG pattern\\n        // \\n        // --------------------------------------------------------\\n        string memory pattern = string(\\n            abi.encodePacked(\\n                '<pattern id=\\\"p-',\\n                GuestlistedLibrary.toString(tokenData.tokenId),\\n                '\\\" patternUnits=\\\"userSpaceOnUse\\\" width=\\\"',\\n                GuestlistedLibrary.toString(patternSize),\\n                '\\\" height=\\\"',\\n                GuestlistedLibrary.toString(patternSize),\\n                '\\\" patternTransform=\\\"scale(',\\n                GuestlistedLibrary.toString(scale),\\n                ') rotate(',\\n                GuestlistedLibrary.toString(rotate),\\n                ')\\\"><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#',\\n                tokenData.bg,\\n                '\\\"/>'\\n            )\\n        );\\n\\n        // --------------------------------------------------------\\n        // \\n        //  Adding the shape and animations to the pattern\\n        // \\n        // --------------------------------------------------------\\n        if (tokenData.shapeIndex == 0) {\\n            // circle\\n            uint position = tokenData.randomNumber % 70 + 30;\\n            uint radius = tokenData.randomNumber % 50 + 20;\\n            string memory random = string(abi.encodePacked(GuestlistedLibrary.toString(tokenData.randomNumber % 10), '.2'));\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<circle cx=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" cy=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" r=\\\"',\\n                    GuestlistedLibrary.toString(radius),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.2\\\"/>',\\n                    '<circle cx=\\\"',\\n                    GuestlistedLibrary.toString(position + radius - 50),\\n                    '\\\" cy=\\\"',\\n                    GuestlistedLibrary.toString(position + radius - 50),\\n                    '\\\" r=\\\"',\\n                    GuestlistedLibrary.toString(radius / 2),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.2\\\"><animate attributeName=\\\"stroke-width\\\" values=\\\"0.2;',\\n                    random,\\n                    ';0.2\\\" dur=\\\"20s\\\" calcMode=\\\"paced\\\" repeatCount=\\\"indefinite\\\"/></circle>'\\n                )\\n            );\\n\\n        } else if (tokenData.shapeIndex == 1) {\\n            // prism\\n            uint position = tokenData.randomNumber % 100;\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<polygon points=\\\"50,16 85,85 15,85 50,16\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\"/><polygon points=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ',16 85,85 15,85 50,16\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\"><animate id=\\\"polygon_animation_1_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '\\\" begin=\\\"0s;polygon_animation_2_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '.end\\\" attributeName=\\\"points\\\"  from=\\\"'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    GuestlistedLibrary.toString(position),\\n                    ',16 85,85 15,85 50,16\\\" to=\\\"',\\n                    GuestlistedLibrary.toString(position + 50),\\n                    ',16 85,85 15,85 50,16\\\"  dur=\\\"60s\\\" calcMode=\\\"paced\\\"/><animate id=\\\"polygon_animation_2_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '\\\" begin=\\\"polygon_animation_1_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '.end\\\" attributeName=\\\"points\\\" from=\\\"',\\n                    GuestlistedLibrary.toString(position + 50),\\n                    ',16 85,85 15,85 50,16\\\" to=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ',16 85,85 15,85 50,16\\\"  dur=\\\"60s\\\" calcMode=\\\"paced\\\"/></polygon><line x1=\\\"'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" y1=\\\"16\\\" x2=\\\"15\\\" y2=\\\"85\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\" stroke-dasharray=\\\"',\\n                    GuestlistedLibrary.toString(dasharray),\\n                    '\\\"><animate id=\\\"line_animation_1_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '\\\" begin=\\\"0s;line_animation_2_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '.end\\\" attributeName=\\\"x1\\\"  from=\\\"',\\n                    GuestlistedLibrary.toString(position)\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '\\\" to=\\\"',\\n                    GuestlistedLibrary.toString(position + 50),\\n                    '\\\"  dur=\\\"60s\\\" calcMode=\\\"paced\\\"/><animate id=\\\"line_animation_2_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '\\\" begin=\\\"line_animation_1_',\\n                    GuestlistedLibrary.toString(tokenData.tokenId),\\n                    '.end\\\" attributeName=\\\"x1\\\" from=\\\"',\\n                    GuestlistedLibrary.toString(position + 50),\\n                    '\\\" to=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\"  dur=\\\"60s\\\" calcMode=\\\"paced\\\"/></line>'\\n                )\\n            );\\n\\n        } else if (tokenData.shapeIndex == 2) {\\n            // square\\n            uint size = tokenData.randomNumber % 100 + 40;\\n            uint random = tokenData.randomNumber % 50;\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" height=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.5\\\"><animate attributeName=\\\"x\\\" values=\\\"0;50;0\\\" dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\" /></rect><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n                    GuestlistedLibrary.toString(size + random),\\n                    '\\\" height=\\\"',\\n                    GuestlistedLibrary.toString(size + random),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.5\\\"/>'\\n                )\\n            );\\n\\n        } else if (tokenData.shapeIndex == 3) {\\n            // cube\\n            uint size = tokenData.randomNumber % 100 + 50;\\n            uint position = tokenData.randomNumber % 50 + 10;\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" height=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.5\\\"></rect><rect x=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" y=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" width=\\\"'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" height=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.5\\\"><animate attributeName=\\\"x\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\" /><animate attributeName=\\\"y\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\" /></rect>'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<line x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" y2=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\" stroke-dasharray=\\\"',\\n                    GuestlistedLibrary.toString(dasharray)\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '\\\"><animate attributeName=\\\"x2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/><animate attributeName=\\\"y2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/></line>'\\n                )\\n            );\\n\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<line x1=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                   '\\\" y1=\\\"0\\\" x2=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\" y2=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\" stroke-dasharray=\\\"',\\n                    GuestlistedLibrary.toString(dasharray)\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '\\\">',\\n                    '<animate attributeName=\\\"x2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    ';',\\n                    GuestlistedLibrary.toString(size),\\n                    ';',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/><animate attributeName=\\\"y2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/></line>'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<line x1=\\\"0\\\" y1=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" x2=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\" y2=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\" stroke-dasharray=\\\"',\\n                    GuestlistedLibrary.toString(dasharray)\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '\\\"><animate attributeName=\\\"x2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position),\\n                    ';0;',\\n                    GuestlistedLibrary.toString(position),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/><animate attributeName=\\\"y2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    ';',\\n                    GuestlistedLibrary.toString(size),\\n                    ';',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/></line>'\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<line x1=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" y1=\\\"',\\n                    GuestlistedLibrary.toString(size),\\n                    '\\\" x2=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\" y2=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"0.3\\\" stroke-dasharray=\\\"',\\n                    GuestlistedLibrary.toString(dasharray)\\n                )\\n            );\\n\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '\\\"><animate attributeName=\\\"x2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    ';',\\n                    GuestlistedLibrary.toString(size),\\n                    ';',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/><animate attributeName=\\\"y2\\\" values=\\\"',\\n                    GuestlistedLibrary.toString(position + size),\\n                    ';',\\n                    GuestlistedLibrary.toString(size),\\n                    ';',\\n                    GuestlistedLibrary.toString(position + size),\\n                    '\\\"  dur=\\\"60s\\\" repeatCount=\\\"indefinite\\\" calcMode=\\\"paced\\\"/></line>'\\n                )\\n            );\\n\\n        } else if (tokenData.shapeIndex == 4) {\\n            // line\\n            pattern = string(\\n                abi.encodePacked(\\n                    pattern,\\n                    '<line x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"0\\\" y2=\\\"50\\\" fill=\\\"none\\\" stroke=\\\"#',\\n                    tokenData.color,\\n                    '\\\" stroke-width=\\\"1\\\"/>'\\n                )\\n            );\\n        } \\n \\n        pattern = string(\\n            abi.encodePacked(\\n                pattern,\\n                '</pattern>'\\n            )\\n        );\\n        // --------------------------------------------------------\\n        // \\n        //  Building the SVG\\n        // \\n        // --------------------------------------------------------\\n        drawing = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"600\\\" height=\\\"850\\\"><defs><style>.bg{fill: url(#p-',\\n                GuestlistedLibrary.toString(tokenData.tokenId),\\n                ') #',\\n                tokenData.bg,\\n                ';}.dj, .venue,.id, .location, .date {fill: #'\\n            )\\n        );\\n\\n        drawing = string(\\n            abi.encodePacked(\\n                drawing,\\n                tokenData.color,\\n                ';font-family:Arial;font-weight:700;}.venue{font-size:60px;}.date{font-size:40px;}.location{font-size:30px;}.id{font-size:20px;}.figure{fill:none;stroke: #',\\n                tokenData.color,\\n                ';} .bg { transform-origin: center; animation: spin 120s linear infinite; }@keyframes spin{0% { transform: rotate(0deg) scale(1);} 50%{ transform: rotate(180deg) scale(2);} 100%{ transform: rotate(360deg) scale(1);}}</style>',\\n                pattern,\\n                '</defs>'\\n            )\\n        );\\n\\n        drawing = string(\\n            abi.encodePacked(\\n                drawing,\\n                '<rect class=\\\"bg\\\" x=\\\"-300\\\" y=\\\"-425\\\" width=\\\"1200\\\" height=\\\"1700\\\"/><text class=\\\"id\\\" x=\\\"75\\\" y=\\\"70\\\"><tspan x=\\\"75\\\" dy=\\\"0\\\">#',\\n                GuestlistedLibrary.toString(tokenData.tokenId),\\n                '</tspan></text><text x=\\\"70\\\" y=\\\"80\\\" class=\\\"dj\\\"><tspan x=\\\"70\\\" dy=\\\"0\\\" alignment-baseline=\\\"hanging\\\" style=\\\"font-size:',\\n                GuestlistedLibrary.toString(tokenData.dj.fontSize),\\n                '\\\">',\\n                tokenData.dj.firstName,\\n                '</tspan><tspan x=\\\"70\\\" dy=\\\"',\\n                GuestlistedLibrary.toString(tokenData.dj.fontSize),\\n                '\\\" alignment-baseline=\\\"hanging\\\" style=\\\"font-size:',\\n                GuestlistedLibrary.toString(tokenData.dj.fontSize),\\n                '\\\">'\\n            )\\n        );\\n\\n        drawing = string(\\n            abi.encodePacked(\\n                drawing,\\n                tokenData.dj.lastName,\\n                '</tspan></text><text class=\\\"date\\\" text-anchor=\\\"end\\\" x=\\\"530\\\" y=\\\"650\\\">',\\n                tokenData.date,\\n                '</text><text class=\\\"venue\\\" text-anchor=\\\"end\\\" x=\\\"530\\\" y=\\\"720\\\">',\\n                tokenData.venue.name,\\n                '</text><text class=\\\"location\\\" text-anchor=\\\"end\\\" x=\\\"530\\\" y=\\\"770\\\">',\\n                tokenData.venue.location,\\n                '</text></svg>'\\n            )\\n        );\\n\\n        drawing = Base64.encode(bytes(drawing));\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", drawing));\\n    }\\n\\n    constructor() {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deterministicNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shapeRandomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shapeIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shape\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"attributes\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"customMetadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"djFullName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256[2][]\",\"name\":\"indexes\",\"type\":\"uint256[2][]\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"djIndexes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GuestlistedLibrary.Venue\",\"name\":\"venue\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"firstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fontSize\",\"type\":\"uint256\"}],\"internalType\":\"struct GuestlistedLibrary.DJ\",\"name\":\"dj\",\"type\":\"tuple\"}],\"internalType\":\"struct GuestlistedLibrary.TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GuestlistedArt", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}