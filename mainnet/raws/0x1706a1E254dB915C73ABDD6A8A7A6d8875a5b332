{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.8;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _potentialOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnerNominated(address potentialOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current potentialOwner.\r\n     */\r\n    function potentialOwner() public view returns (address) {\r\n        return _potentialOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function nominatePotentialOwner(address newOwner) public virtual onlyOwner {\r\n        _potentialOwner = newOwner;\r\n        emit OwnerNominated(newOwner);\r\n    }\r\n\r\n    function acceptOwnership () public virtual {\r\n        require(msg.sender == _potentialOwner, 'You must be nominated as potential owner before you can accept ownership');\r\n        emit OwnershipTransferred(_owner, _potentialOwner);\r\n        _owner = _potentialOwner;\r\n        _potentialOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IItemFactory {\r\n    // function rarityDecimal() external view returns (uint256);\r\n\r\n    function totalSupply(uint256 boxType) external view returns (uint256);\r\n\r\n    function addItem(\r\n        uint256 boxType,\r\n        uint256 itemId,\r\n        uint256 rarity,\r\n        uint256 itemInitialLevel,\r\n        uint256 itemInitialExperience\r\n    ) external;\r\n\r\n    function getRandomItem(uint256 randomness, uint256 boxType)\r\n        external\r\n        view\r\n        returns (uint256 itemId);\r\n\r\n    function getItemInitialLevel(uint256[] memory boxTypes, uint256[] memory itemIds)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getItemInitialExperience(uint256[] memory boxTypes, uint256[] memory itemIds)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    event ItemAdded(\r\n        uint256 indexed boxType,\r\n        uint256 indexed itemId,\r\n        uint256 rarity,\r\n        uint256 itemInitialLevel,\r\n        uint256 itemInitialExperience\r\n    );\r\n\r\n    event ItemUpdated(\r\n        uint256 indexed boxType,\r\n        uint256 indexed itemId,\r\n        uint256 rarity,\r\n        uint256 itemInitialLevel,\r\n        uint256 itemInitialExperience\r\n    );\r\n\r\n}\r\n\r\ncontract ItemFactory is Ownable, IItemFactory {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    EnumerableSet.UintSet private _supportedBoxTypes; // BoxType\r\n\r\n    struct RarityInfo {\r\n        uint256 zeroIndex;\r\n        uint256 rarity;\r\n    }\r\n\r\n    // Items for specific type\r\n    struct Items {\r\n        uint256 totalRarity;\r\n        uint256[] itemIds;\r\n        mapping(uint256 => RarityInfo) itemIdToRarity;\r\n        mapping(uint256 => uint256) itemInitialLevel;\r\n        mapping(uint256 => uint256) itemInitialExperience;\r\n    }\r\n    mapping(uint256 => Items) private _items;\r\n\r\n    constructor() {\r\n        // Mystery Box\r\n        _supportedBoxTypes.add(1); // #1\r\n        _supportedBoxTypes.add(2); // #2\r\n        _supportedBoxTypes.add(3); // #3\r\n        _supportedBoxTypes.add(4); // #4\r\n        _supportedBoxTypes.add(5); // #5\r\n        _supportedBoxTypes.add(6); // #6\r\n        _supportedBoxTypes.add(7); // #7\r\n    }\r\n\r\n    modifier onlySupportedBoxType(uint256 boxType_) {\r\n        require(\r\n            _supportedBoxTypes.contains(boxType_),\r\n            \"ItemFactory: unsupported box type\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function supportedBoxTypes() external view returns (uint256[] memory) {\r\n        return _supportedBoxTypes.values();\r\n    }\r\n\r\n    function totalSupply(uint256 boxType_) external view returns (uint256) {\r\n        return _items[boxType_].itemIds.length;\r\n    }\r\n\r\n    function addBoxType(uint256 boxType_) external onlyOwner {\r\n        require(_supportedBoxTypes.add(boxType_), \"ItemFactory::addBoxType box type is already supported\");\r\n    }\r\n\r\n    function getItemRarity(uint256 boxType_, uint256 itemId_) external view returns(uint256) {\r\n        return _items[boxType_].itemIdToRarity[itemId_].rarity;\r\n    }\r\n\r\n    function getItemIds(uint256 boxType_) external view returns (uint256[] memory) {\r\n        return _items[boxType_].itemIds;\r\n    }\r\n\r\n    function getItemProperties(uint256 boxType_, uint256 itemId_) external view returns(uint256, uint256) {\r\n        return(_items[boxType_].itemInitialLevel[itemId_], _items[boxType_].itemInitialExperience[itemId_]);\r\n    }\r\n\r\n    function getItemTotalRarity(uint256 boxType_) external view returns(uint256) {\r\n        return _items[boxType_].totalRarity;\r\n    }\r\n\r\n    function getItemInitialLevel(uint256[] memory boxTypes_, uint256[] memory itemIds_) external view returns(uint256) {\r\n        uint256 totalLevel = 0;\r\n        for(uint256 i = 0; i < itemIds_.length; i++) {\r\n            totalLevel = totalLevel + _items[boxTypes_[i]].itemInitialLevel[itemIds_[i]];\r\n        }\r\n        return totalLevel;\r\n    }\r\n\r\n    function getItemInitialExperience(uint256[] memory boxTypes_, uint256[] memory itemIds_) external view returns(uint256) {\r\n        uint256 totalExperience = 0;\r\n        for(uint256 i = 0; i < itemIds_.length; i++) {\r\n            totalExperience = totalExperience + _items[boxTypes_[i]].itemInitialExperience[itemIds_[i]];\r\n        }\r\n        return totalExperience;\r\n    }\r\n\r\n    function updateItem(\r\n        uint256 boxType_,\r\n        uint256 itemId_,\r\n        uint256 rarity_,\r\n        uint256 itemInitialLevel_,\r\n        uint256 itemInitialExperience_\r\n    ) external\r\n        onlyOwner\r\n        onlySupportedBoxType(boxType_)\r\n    {\r\n        require(itemId_ > uint256(0), \"ItemFactory::updateItem itemId_ is 0\");\r\n        require(rarity_ > uint256(0), \"ItemFactory::updateItem rarity_ is 0\");\r\n\r\n        Items storage _itemsForSpecificType = _items[boxType_];\r\n        require(\r\n            _itemsForSpecificType.itemIdToRarity[itemId_].rarity > uint256(0),\r\n            \"ItemFactory::updateItem itemId_ is not existed\"\r\n        );\r\n        \r\n        // Update total rarity\r\n        _itemsForSpecificType.totalRarity =\r\n            _itemsForSpecificType.totalRarity - _itemsForSpecificType.itemIdToRarity[itemId_].rarity + rarity_;\r\n\r\n        // Update initial level and experience\r\n        _itemsForSpecificType.itemInitialLevel[itemId_] = itemInitialLevel_;\r\n        _itemsForSpecificType.itemInitialExperience[itemId_] = itemInitialExperience_;\r\n\r\n        // Update rarity info for item\r\n        _itemsForSpecificType.itemIdToRarity[itemId_].rarity = rarity_;\r\n\r\n        if(_itemsForSpecificType.itemIds.length > 1) {\r\n            uint256 totalRarity_ = 0;\r\n            for(uint256 i = 1; i < _itemsForSpecificType.itemIds.length; i++) {\r\n                totalRarity_ = totalRarity_ + _itemsForSpecificType.itemIdToRarity[_itemsForSpecificType.itemIds[i - 1]].rarity;\r\n                _itemsForSpecificType.itemIdToRarity[_itemsForSpecificType.itemIds[i]].zeroIndex = totalRarity_;\r\n            }\r\n        }\r\n\r\n        emit ItemUpdated(\r\n            boxType_,\r\n            itemId_,\r\n            rarity_,\r\n            itemInitialLevel_,\r\n            itemInitialExperience_\r\n        );\r\n    }\r\n\r\n    function addItem(\r\n        uint256 boxType_,\r\n        uint256 itemId_,\r\n        uint256 rarity_,\r\n        uint256 itemInitialLevel_,\r\n        uint256 itemInitialExperience_\r\n    ) external\r\n        onlyOwner\r\n        onlySupportedBoxType(boxType_)\r\n    {\r\n        require(itemId_ > uint256(0), \"ItemFactory::addItem itemId_ is 0\");\r\n        require(rarity_ > uint256(0), \"ItemFactory::addItem rarity_ is 0\");\r\n\r\n        Items storage _itemsForSpecificType = _items[boxType_];\r\n        require(\r\n            _itemsForSpecificType.itemIdToRarity[itemId_].rarity == uint256(0),\r\n            \"ItemFactory: itemId_ is already existed\"\r\n        );\r\n\r\n        // Update artifacts for current type\r\n        _itemsForSpecificType.itemIds.push(itemId_);\r\n\r\n        // Update rarity info for item\r\n        _itemsForSpecificType.itemIdToRarity[itemId_].zeroIndex = _itemsForSpecificType.totalRarity;\r\n        _itemsForSpecificType.itemIdToRarity[itemId_].rarity = rarity_;\r\n\r\n        // Update total rarity\r\n        _itemsForSpecificType.totalRarity += rarity_;\r\n\r\n        // Update initial level and experience\r\n        _itemsForSpecificType.itemInitialLevel[itemId_] = itemInitialLevel_;\r\n        _itemsForSpecificType.itemInitialExperience[itemId_] = itemInitialExperience_;\r\n\r\n        emit ItemAdded(\r\n            boxType_,\r\n            itemId_,\r\n            rarity_,\r\n            itemInitialLevel_,\r\n            itemInitialExperience_\r\n        );\r\n    }\r\n\r\n    function getRandomItem(uint256 randomness_, uint256 boxType_) public view\r\n        onlySupportedBoxType(boxType_)\r\n        returns (uint256 _itemId) {\r\n        Items storage _itemsForSpecificType = _items[boxType_];\r\n        require(\r\n            _itemsForSpecificType.totalRarity > 0,\r\n            \"ItemFactory: add items for this type before using function\"\r\n        );\r\n\r\n        uint256 _randomNumber = randomness_ % _itemsForSpecificType.totalRarity;\r\n\r\n        for (uint256 i = 0; i < _itemsForSpecificType.itemIds.length; i++) {\r\n            RarityInfo storage _rarityInfo = _itemsForSpecificType\r\n                .itemIdToRarity[_itemsForSpecificType.itemIds[i]];\r\n\r\n            if (_rarityInfo.zeroIndex <= _randomNumber && _randomNumber < _rarityInfo.zeroIndex + _rarityInfo.rarity) {\r\n                _itemId = _itemsForSpecificType.itemIds[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemInitialLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemInitialExperience\",\"type\":\"uint256\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boxType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemInitialLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemInitialExperience\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"}],\"name\":\"addBoxType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemInitialLevel_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemInitialExperience_\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"}],\"name\":\"getItemIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"boxTypes_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds_\",\"type\":\"uint256[]\"}],\"name\":\"getItemInitialExperience\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"boxTypes_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds_\",\"type\":\"uint256[]\"}],\"name\":\"getItemInitialLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId_\",\"type\":\"uint256\"}],\"name\":\"getItemProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId_\",\"type\":\"uint256\"}],\"name\":\"getItemRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"}],\"name\":\"getItemTotalRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomness_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"}],\"name\":\"getRandomItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"nominatePotentialOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedBoxTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxType_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemInitialLevel_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemInitialExperience_\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ItemFactory", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://151671fb76b9c1597548023c9c092df6f2972eae9a9d7479e55b14e1e91792eb"}]}