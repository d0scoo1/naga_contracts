{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SvgGenerator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/ISvgGenerator.sol\\\";\\nimport \\\"./libraries/UintStrings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract SvgGenerator is ISvgGenerator {\\n    string private constant _svgBeforeStyleTags =\\n        '<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <svg viewBox=\\\"0 0 1080 1080\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">';\\n    string private constant _svgAfterStyleTags =\\n        '<g id=\\\"tree\\\"> <path class=\\\"leaf\\\" d=\\\"M670.08,852.07c-132.84-35.37-194.52-53.42-255.84,35.08,4.69,1.5-2.25,30.58-2.17,31,11.65,2.09,23,5.42,32.34,13.16,126.1,107.64,158.06,6.53,275.64-47.51C719.46,883,697.56,859.39,670.08,852.07Z\\\" /> <path class=\\\"leaf\\\" d=\\\"M884.51,532.33C828,472.64,788,431,690.48,479c-13.77,6.79-64.06,82.18,57.76,82.19C806.38,553.07,843.9,530.07,884.51,532.33Z\\\" /> <path class=\\\"leaf\\\" d=\\\"M329.78,774.53c-20.2-25.71-58-34.77-88.65-40.12,20.19,32.42,10.45,74.61,27.54,107.43,7.51,5.83,15.4,19.73,25.91,19.15,13.43-2.19,33.76,2.56,44.6-28.15S342,791.55,329.78,774.53Z\\\" /> <path class=\\\"bark\\\" d=\\\"M602.18,508.27A17.52,17.52,0,0,0,603.72,498c-14.52-94-83.2,88-83.91,87.44C498.93,613,413.7,745.59,319.23,966.24c-3.37,7.87,24.71,5.33,51.95-22.88,8.44-8.76,32-26.66,44.7-36.76,5.69-4.51.23-5.47-1.79-12.44-1.81-6.21-.3-16.29,8.66-27.79a20,20,0,0,0,1.62-2.38c16.12-28.84,24.95-64.5,40.74-93.75.3-.55.62-1.08,1-1.6C508.8,705.87,572.51,570.22,602.18,508.27Z\\\" /> </g> <path class=\\\"body\\\" d=\\\"M812,278.76C822.07,175,558.19-29.29,564.47,167.69c.17,24.17,12.38,36.6-5.6,34.05-32-3.56-73.08-32.2-103.87-21.35-13.05,3.18-31.51.79-41.56,11.68-11.07,16.07-37.87-1.28-48.2,15.67-8.18,14-31.39,9.43-43.1,19-10.47,31.68-31.38,22.31-43.69,41.78C274.52,292.8,237.12,293,236.18,318c3.74,20-25.42,34.11-20.63,56.13,3.61,24-18.86,33.69-16.32,52.33,20.74,18.59-5.29,43.33,5.38,62.79,13.21,21.46-11.51,43.1,22,66.9,13.23,9.38-5.28,29.85,8.75,39.12,17,9.53,14,31,22.28,45.32,15.22,9.26,28.22,24.23,35.86,41.54,27.88,22.27,65.72,33.68,100.16,46.66,22.09,11.54,15.45-5.37,29-2.3,13.79-5.88,29.62.87,41.08,5.12,7.65,3.27,11.13,20.94,15,29.1s14.59,5.1,17.51-6c210.87,8.15,225.44-252.59,58.32-248.79C519.7,507,494.72,539.25,488.78,565c-3.3,14.33,6.86,33.53,11,37.15.35.28,5.07,9.13,7,4.73,37-82.78,68.57-12.75,45,24-3.75,5.82,11.89-4.05,16-7.74,26.11-12,20.77-76.43-26.62-58.94-18.43,8-29.11,16.55-25.92,10.39,93-138.38,170.6,141.2-6.74,108.4-11.28-32.26-47.4-46.17-72.77-16.61,0,0-5-2.58-1.8-8.94-6.56-27.59-13.27-59.17-22.5-86-8-16.17-21.38-30.73-8.07-50.19,60.7-95,56.12-80.93,115.7-63.43,5.17,1.52,48.51,5.17,43.24,9.27-13.13,10.21-12,1.36,5.82,19.27,2.24,2.26,5.12-1.92,2.41-2.61-6.69-10.43,16.55-11.9,23.73-12.31,15.9-15.13,11.07,8.32,21.7,26.75,8.34-3.18,22.87.9,19-17.83-2.33-11.32,8.82-7.83,19.65-21.53,1-13.06,12.62-14.86,21.35-23,6.91-5.63,13.27-19,20.17-25.31l1.82-8.46-1.87-17.65,5-4.13c57.52,22.35,106.72-12,89.82-19.81-3.51-1.63-15.77.3-25,.41-9.48-1.33-6.24-33.25.37-32.71C801.32,328.37,831.08,331.58,812,278.76ZM567.48,411.65c-92.48-11.75-80.84-9.22-26.18-58.18,8.06,10.29,14.72,22.49,21.76,33.41C571.07,399.12,572.3,397,567.48,411.65Zm74.29-31.4-2.8,5.67c-4.05.49-25.52-2.26-29-1.49-20-13-38.08-26.48-51.08-46.42,9-10.95,35.69-22.45,47.34-19.58C619,334.09,636,351.24,649.77,360.69l-8.83,15.46Z\\\" /> <path d=\\\"M644.5,475.32a34.79,34.79,0,0,1-2.39,21.27c12.78-.27,24.52-6.11,34.52-13.68,98.48-60.43,130.78-30.72,207.73,38.15,1.77,3.06,14.76,14.53,7.87,15.69-74.29.41-71.31,15.84-133.89,34-30.31,4.47-70.89-5.06-90.58-29.85-3.8-11.39-2.79-23.18-3.63-35.21-12.71,1.85-23.08,7-35.48,11.07,31.8,18.59,40.81,67.66,43.32,101.8,1.21,39.54-17.82,78.41-47.8,103.62-16.16,14.52-37.83,19.59-57.29,28-19,5.57-39,7.05-58.62,8.67-5.13,3.2-7.93,10.29-13.79,13.16-2.66,2.56-6.06.56-9.15.71-4.15.43-8.29,1-12.53,1.47-11.06,22.08-18.63,45.61-28.33,68.41,63.13-55.19,237.81-14.24,289.62,44.55-30.5,7.9-57.68,24.63-84,41.72-170.25,148.45-194.75-57.46-274.46,19.37-14.81,8.3-25.67,23.06-43.32,26.87-7.13.42-11.7,11.16-17.4,5.79-11.15-5.51,1.56-15.11.72-23.26,7.81-33.63,26.3-67.19,19.67-102.86-9.83,10.51-24.66,11.82-38.44,13.17-20.47,1.36-37.23-24.57-42.53-42-11.22-51.61.51-58.09-33-105.11,10,.36,20.84,4.08,30.94,6.48,16.23,5,34.17,6.53,49.41,14.43,28.3,16.21,57,45.68,50.44,80.85-.69,7.63-6.26,14.87-5.19,22.42,3.84,8.19,3.95,16.3,7.75,24.68,10.41-19.06,21.42-37.87,28.24-58.5,9.51-22.14,23.88-42.53,30.71-65.63-28.91-7.29-56.22-19.73-82.28-33.39-8.33-7.16-16.56-14.63-27-18.52-27.7-13.5-6.23-20.6-48.05-40.33-16.07-8-13-26.3-19.11-40.39-11.69-13.88-20.07-13.67-18.94-36,.3-4.73,3.55-10.43-.51-14.44-4.82-7.21-13.74-13.77-13.63-23-.75-15.69,6-35-4.86-48.27-6.77-6-.32-29.05,2.9-36.61,4.29-8.94-7.49-17.91-8.45-27.57-3.37-16.17,15.44-26.94,15.81-42.9.82-32.87,2.9-31.71,21.37-58.42-2.13-20.21,9.86-33.81,26.9-43.53,22.44-11.38,11.13-24.4,27.08-31.48,44.24-18.33,17.59-20,33.59-31.58,14.59-11.69,30.85-6.83,39-19.07a24,24,0,0,1,16.09-10.76c11.36-1.92,25.42,4,33.35-6.75,10.93-11,26.69-5.79,40.28-5.8,20.79-11.5,36.83-.86,59.14,3.68,17.9,4.36,35.74,8.31,53.58,12.91-8.65-16.09-5.28-34.36-4.65-51.86,22.58-150.27,236.15,12.93,254,94.88,5.39,15.93,26,89.06,5.21,94.57a251.76,251.76,0,0,1-49.43,2.33c1,7.79,6.82,5.66,8.09,17.88,4.86.3,9.73.89,14.6.94,20.67,1.65,8.84,26.56-2.31,32.1-24.85,14.9-56.06,11.34-83.37,5.3,5,9.81,6.87,22.14-2.49,29.92-3.05,3.48-8.31,5.21-10.48,9.36-3,14.65-17.72,14-24.92,23.69-.75,1.21-3.31,1.95-3.59,3.49C659.36,465.42,652.11,470,644.5,475.32ZM473.08,387.71c13.7,3.83,17.57,10.94,29-1.47,9.69-9.89,20.72-18.73,30.21-28.71A296.07,296.07,0,0,1,559.76,330c38.18-15.58-2-65.08,20.83-89.35C558,327.72,748.18,433.42,787.79,362c-57.68.51-115.25-45.18-145.09-92.25-13.16-10.84-29.34-4.59-42.37,3,4.4-10.57,15.78-13.77,26.11-15.25,14.78-3.42,28.92,4.22,43,7.53,4.77.84,4.3,8.7-.56,8.91-4.24-.07-7.31-.75-12.12-1.14,19.86,30,73.57,46.47,108.22,50,7.72-.08,50.31,3.89,46.92-7.69,2-74-37.18-146.9-102.74-182.45-63.47-45-146.3-78.59-144.69,35,.23,24.14,20.29,40.2,39.89,50.54-5.51,4.85-10.64-2.32-16.1-3.5-23.61-8.31-47.55-15.59-72.15-20.43-15.09-1.65-46.07-17.45-58.47-9-5.46,3.18-12.62,1.68-18.73,2.14-32.44-4-17.36,7.08-37.85,11.78-11.83,1.6-28.52-3.5-35.83,8.52-7.54,15.67-37.37,9.18-42,25-3,22.95-35.27,20.54-37.67,34.36-3.37,19.55-26,23.31-36.88,37.2-18.51,23.8,9.25,6.41-19.56,43.87-12.28,16.38-3.87,38.63-14,56-25.82,26.74,5.28,29.82-1.2,51.22-14.13,31.71,0,25,2.1,50.11.37,9.39.87,18.79-.48,28.16-1.73,9.13,6.08,15.88,11.14,22.46,12.21,10.67-5.27,29.85,8.75,39.12,19.84,13.61,13.1,31.11,22.28,45.32,9.53,6.54,21,11,29.51,18.89,7.72,6.88,9.56,20.92,20.8,23.22,7.64,3.84,15.41,8.32,22.13,14.13a44.11,44.11,0,0,0,19.51,11.57c19,9.21,37.85,21.41,59.22,23.91-10-9.47-10.15-23.5-18.07-34.2-12.42-18.81-6.79-42.38-8-63.57-.12-22.36-11.39-42.67-13.76-64.85,5.31-.5,6,6.82,8.26,10.3,11.57,22.43,17.81,47.37,16.47,72.67-2,17.66,1.4,34.79,11.39,49.66,4.9,9.1,6.82,19.67,17.6,24.17,5.07-13.36,20-3.05,29.36-.4,15.93,4.69,26.54,17.67,26.72,34.62,5.51,2,12.56,3.14,15.88-3,22.65-27-22-60.48-36.91-82.09l.53-.75c19.63,4.21,31.17,27.16,45.42,38.75,10-9.65,6.78-24.61-.73-34.85-30.24-51.11-50.19-21.72-86.53-.81-2.32-4.33,7.67-15.07,11.36-18,4.31-3.9-1.68-14.32-1.51-19.87-7.57-31.37-6.19-68.28-31.05-92.09-7-9.48-30.73-2-35.64,6.58-8.34,25.78-8.79,53.51-7.48,80.2-17.84-5.26-8.35-69.39-2.53-83.58,2.09-8.57,10.72-11.57,17.76-15.3,6.1-4.44,14.12-1,20.3-4.66C401.75,519.83,411,503.55,419.8,488c6.27-15.29,30-32.22,24.49-49.11-80.75-35.57-40.23-75.29,15.35-110.15,2.82-1.91,6.14-3.08,8.88.25-13,13.11-58.76,46.81-60.72,62.4C406.61,402.64,420.06,412,428.18,418c17.44,12.3,37.94,18.39,58.35,23.8,20.18,8.13,40.1,20.21,62.93,18.71,5.43.59,14.94-3,17.65,3.15.69,2.28-.5,3.89-2.09,5.31-1.75,1.4-3.91,3.43-2.74,5.81,2.19,3.28,3.72,10.42,7,11.86a6.07,6.07,0,0,0,1.21-2.91c-15.51-11.07,15.67-16,22.76-17.26.29-10.34,11.07,0,15.93,1.5,7.54,6.65,8.74,18.24,11.38,27.7,20.31-5.56,15.08-10.93,11.38-28-1.32-7.39-1.22-14.92-6.23-21.27-1.16-6.22-7.81-9.25-10.09-15l.74-.75c7.24,2.73,12.58,8.91,18.54,13.66s5.72,12.53,6.82,19.54c5.32-1.69,9.79-7.31,9-13.1-2.06-9.78-3-19.77-7.34-28.89-3.9-9.65-15.79-8.59-24.32-10.36-21.92-3.32-29.57,27-52.2,22.53,1.53-5.84,7.64-6.39,11-9.94-21.26-20.13-57.13-11.61-83.62-19.08-12.93-3.52-25.05-10.1-38.14-12.84-6.15-1.87-17.17,1.38-18.94-6.74,11.34-3.17,25.21-3.13,31.85-14.67,5.09-8.12,23.69-29.24,33.78-26.46C491.87,358.28,478.75,370.19,473.08,387.71ZM411.82,916.93l.25,1.23c11.65,2.09,23,5.42,32.34,13.16C561.53,1020.55,588.1,946.94,691.79,896c8.84-3,16.89-7.3,25.16-12.08C630,827.2,486,786.69,414.24,887.15c4.69,1.5,7.63-.76,11.49-2.47,20.27-6.81,41.49-12.88,63-13.18,13.59-.15,26-7,39.55-6.88,24.43-.78,48.81-.79,73.06,2.74C537.57,873.59,467.2,878.25,411.82,916.93ZM511.73,748c164.89,5.38,206.69-212.59,62.43-238.6-48.53-6.81-98.19,38.35-72.55,86.65,55.5-146.64,182.86-2.93,89.62,73.59-6.2,7.46-15.84,9-24.12,13-15.85,8.14-30.56,9.86-47.93,5.94,7.44,30-14.71,28-9.68,41C512.41,735.64,511.81,741.32,511.73,748ZM552,471.54c-30,1.35-55.28-16.08-83.21-23.64-7.35-.42-19.6,18.56-24.15,24.55-17.9,23.95-39.5,55.69-28.17,86.7,15.34,27.7,13.88,61.1,22.87,90.85,12.72-8.52,26.19-13.77,41.18-7.49,3.27-11.37,10.42-20.66,14.63-31.72,1.86-3-.36-5.29-1.83-7.82-30-43.76,12.55-100.53,60.68-103.33C569.12,495.49,549.23,481.69,552,471.54Zm252,29.19v1.07c-6,2.66-13,.42-19.34,0-17.86-2.79-36-1.53-54.07-3.1-18.7,2-38.45-2.71-56,5.84.7,12-2.94,28.08,7.45,36.72,74.58,52,110.5-16.86,197.45-12.86-15.22-13.85-34.18-23.61-48.33-38.79-7.46-7.92-15.68-15-25.62-19.76C768.36,452.37,723,464.11,691,486.76c1.25,1.75,3,2.23,5.19,2.11C732.38,487.52,769.66,487.68,804,500.73ZM325.19,966.24c19.42-3.33,33.05-18.74,46.34-32.11,5.78-6.86,13.92-10.54,21.18-15.51,7.35-6.21,15.55-11.19,23.44-16.58l-.48-.92c-15,7-30.74,13.22-43.25,24.28-3.47,3.4-8.71,1.24-11.89,5.09-5.19,3.18-12.14,16-18.38,13.22-11.78-9.22,32.42-36,40.35-39.28,41.29-32,52.66-88.62,76.33-133.18,5.21-31.6,8.13-30.44-24.63-39.79C401.3,807.81,354.16,885.46,325.19,966.24Zm13-139.81,1.23-.2c10.35-30-13.39-54-37-69.18-9.24-6.74-19.16-11.73-30.64-13.56-9.18-1.42-17.56-6.94-26.89-7.54,13.17,21.06,12.07,45.9,17.39,69.3.75,5-1.56,10.18,1,14.94,2.71,7.21,4.89,15.06,10,21,7.5,5.83,13.66,17.5,24.16,16.92,13.43-2.19,29.32-4.23,34.18-19.14,1.91-6.43-8.63-14.94-11.31-21.05-9.65-19.39-28.61-31.06-39.71-49.51,28.68,5.82,41.42,36.76,57.62,58Zm254.89-271.7c-17.52,27.88-.83,15.5-3.63,43.38-1.05,16.49-13.66,29.9-26.21,39.46-5.44,4.85-14.74,3.36-17.16,7.73-6.11,11.39-13.2,22.35-19.48,33.51C591.32,689,644.9,603,593.07,554.73ZM488.78,646.6c8.27,5.37,15.12,11.68,19.48,20.35,19,3.12,45.86-59.94,47.62-77.12,3.6-9.38-5.85-10.1-12-13.83-9.82-3.89-19.85-.54-24,9.43C509.44,605.89,499.4,625.86,488.78,646.6ZM619.22,400.83c1.18-6.69,1.18-7-4.44-8.9-10.86-3.7-18.33-12.94-27.45-19.5-9.43-6.31-14.46-16.17-21.66-24.61l-18.93,12.33c9.17,13.94,15.76,30.78,28.56,41.73,4.9,2.91,6.71,16.22,14.08,10.76C598.31,406.12,607.86,401.35,619.22,400.83ZM574.89,342c8.52,16.15,47,57.35,64.12,35.39a36.07,36.07,0,0,1,6-12.85C592.39,330.83,620.61,324.12,574.89,342Zm84,100.53,16.53-10.26c12.31-15.27-6.25-38.82-22.25-43.34-7.32-2.31-23.74,1.83-22.88,11.09.38,2.25,1.4,3.31,3.58,3.54,17.6,2.9,23.67,23.51,25,38.95ZM562.26,404.7c-8.39-12.44-14.76-25.54-23.3-37.56a306.29,306.29,0,0,1-27.37,29.94l.41.94c17,.93,33.8,2.13,50.28,6.66Zm-11,161-.33,1.22c4.87,3.46,12.07,4.32,15.31,9.54,2.74,7.2,16.32,21.22,4.21,24.27-1.65,11.22-11.73,18.07-15.09,28.65,30.4-11.66,38.41-67.54-4.06-63.75Zm98.51-187.91c12,1.36,25.29,10.18,31.35,20.77,3,5,8.52,8.14,9.8,14.44,12.15-8-2-16.36,1.57-26.65-12.56-3.34-23.53-9.53-35.2-15C653.4,369.43,650.17,373.77,649.77,377.79ZM569.56,498.16l30.86,5.33c5.91-6-3.7-20-10.74-21.88a12.57,12.57,0,0,1-4-2.59c-2.83-2.33-3.18-2.55-5.43.5C576.29,485.78,571.22,490.62,569.56,498.16ZM701.73,317l-.66.73a195.56,195.56,0,0,0,59.65,31.89c-4-8-6.17-16.65-15.19-19.12C730.76,326.54,715.55,323.72,701.73,317ZM571.46,558.34c1.43-2.65,4.84-13.37.7-14.31-7.24-1.94-25.9.48-30.13,6.94C552.7,550.64,562.9,550.68,571.46,558.34Z\\\" /> <path class=\\\"body\\\" d=\\\"M693.67,396.68c-1.36-3.2-2.73-6.4-1.09-10.4-2.46-.81-4.6-1.56-6.77-2.23a33.27,33.27,0,0,1-4.17-1.16c-8.11-3.83-16.16-7.77-24.26-11.61-.84-.4-2.15-.83-2.79-.46-2.51,1.44-4.64,3.34-4.78,6.9a8.32,8.32,0,0,0,1.68.51,19.23,19.23,0,0,1,12.77,4.71,14.4,14.4,0,0,0,2.9,1.91,32.45,32.45,0,0,1,14,13.64,11.24,11.24,0,0,0,1.71,2.51c3.39,3.48,6.87,6.87,8.1,11.93,5.63-5,6.11-6.6,4-13.06C694.65,398.78,694.13,397.74,693.67,396.68Z\\\" /> <path class=\\\"tongue\\\" d=\\\"M701.73,317c4.13,1.72,8.14,3.84,12.41,5.08,10.4,3,20.89,5.72,31.39,8.36a15,15,0,0,1,8.59,6.2c2.59,3.7,4.2,8.08,6.6,12.92-2-.3-3.18-.23-4.14-.65-4.34-1.91-8.64-3.93-12.94-6-2.21-1.05-4.38-2.21-6.58-3.31-5.28-2.64-10.7-5-15.81-8-5.37-3.1-10.46-6.68-15.61-10.16a56.79,56.79,0,0,1-4.57-3.77Z\\\" /> <g id=\\\"detailLines\\\"> <path d=\\\"M444.58,213.61s-2.44-1.17-11.11-.49c-39.38,3.09-117.49,31.21-162,120.64-55.83,112-31.68,182-19.19,221.38,1.83,5.77,3.17-.36,1-10.24-8.7-39.69-20.14-125.3,26.65-207.59C326.17,256,369.7,232.07,444.58,213.61Z\\\" /> <path d=\\\"M607,117s25.09,11,34.45,37.8c10.88,31.08,6.08,57.59,1.19,67.65,0,0-2.61-24.85-6.63-43.75-2.1-9.92-4.24-23.29-11.57-33C613.36,131.11,603.4,121.54,607,117Z\\\" /> </g> <g id=\\\"eye\\\"> <circle cx=\\\"727\\\" cy=\\\"239\\\" r=\\\"45\\\" stroke=\\\"black\\\" stroke-width=\\\"11\\\" class=\\\"eye\\\" /> <circle cx=\\\"727\\\" cy=\\\"239\\\" r=\\\"11\\\" fill=\\\"black\\\" /> </g> <ellipse id=\\\"nostril\\\" cx=\\\"700\\\" cy=\\\"250\\\" rx=\\\"12\\\" ry=\\\"11\\\" transform=\\\"rotate(75 700 320) scale(1 0.9)\\\" /> </svg>';\\n\\n    function generateTokenUri(uint256 tokenId, IChameleon.Chameleon memory chameleon)\\n        external\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        // Generate style tags\\n        string memory styleTag = _generateStyleTag(chameleon);\\n        string memory attributes = _generateAttributeTag(chameleon);\\n        string memory name = string(\\n            abi.encodePacked(\\n                'Photonic Fungible Species',\\n                ' - ',\\n                Strings.toString(tokenId)\\n            )\\n        );\\n\\n        // Combine with base SVG\\n        string memory combined = string(\\n            abi.encodePacked(_svgBeforeStyleTags, styleTag, _svgAfterStyleTags)\\n        );\\n\\n        return _formatTokenUri(_svgToImageUri(combined), name, attributes);\\n    }\\n\\n    function _valueToHSL(uint16 value) private pure returns (string memory) {\\n        string memory hue = UintStrings.decimalString(value % 360, 0, false);\\n        string memory lightness = \\\"65\\\";\\n\\n        // Default\\n        if (value == 0) {\\n            lightness = \\\"100\\\";\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    hue,\\n                    \\\",85%,\\\",\\n                    lightness,\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function bodyTypeString(uint8 bodyType)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return (\\n            bodyType == 1\\n                ? \\\"Metachrosis\\\"\\n                : (bodyType == 2 ? \\\"Camouflage\\\" : \\\"Veiled\\\")\\n        );\\n    }\\n\\n    function environmentTypeString(uint8 backgroundType)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return (backgroundType == 1 ? \\\"Nomadic\\\" : \\\"Sedentary\\\");\\n    }\\n\\n    function irisTypeString(uint16 eyes) public pure returns (string memory) {\\n        return (eyes > 0 ? \\\"Recessive\\\" : \\\"Dominant\\\");\\n    }\\n\\n    function _generateAttributeTag(IChameleon.Chameleon memory chameleon)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"[{\\\",\\n                    '\\\"trait_type\\\": \\\"Body\\\",',\\n                    '\\\"value\\\":\\\"',\\n                    bodyTypeString(chameleon.bodyType),\\n                    '\\\"}',\\n                    \\\", {\\\",\\n                    '\\\"trait_type\\\": \\\"Background\\\",',\\n                    '\\\"value\\\":\\\"',\\n                    environmentTypeString(chameleon.backgroundType),\\n                    '\\\"}',\\n                    \\\", {\\\",\\n                    '\\\"trait_type\\\": \\\"Iris\\\",',\\n                    '\\\"value\\\":\\\"',\\n                    irisTypeString(chameleon.eyes),\\n                    '\\\"}',\\n                    \\\"]\\\"\\n                )\\n            );\\n    }\\n\\n    function _generateStyleTag(IChameleon.Chameleon memory chameleon)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string memory eye = string(\\n            abi.encodePacked(\\\".eye{fill:\\\", _valueToHSL(chameleon.eyes), \\\";}\\\")\\n        );\\n\\n        string memory body;\\n        string memory backgroundType;\\n\\n        if (chameleon.bodyType == 0 || chameleon.bodyType == 1) { // Metachrosis\\n            string memory bodyColor = _valueToHSL(chameleon.body);\\n            if (chameleon.eyes > 0) {\\n                bodyColor = \\\"transparent\\\";\\n            }\\n            body = string(\\n                abi.encodePacked(\\n                    \\\".body{fill:\\\",\\n                    bodyColor,\\n                    \\\";}\\\"\\n                )\\n            );\\n        } else if (chameleon.bodyType == 2) { // Camouflage\\n            body = string(\\n                abi.encodePacked(\\n                    \\\".body{fill: rgba(0,0,0,0);animation: transparent 10s ease-in-out;animation-iteration-count: infinite;}\\\"\\n                )\\n            );\\n        }\\n\\n        backgroundType = string(\\n            abi.encodePacked('svg { background: ', _valueToHSL(chameleon.background), ';}')\\n        );\\n\\n        string memory styleTag = string(\\n            abi.encodePacked(\\n                \\\"<defs><style>\\\", backgroundType,\\n                \\\"@keyframes transparent { \\\",\\n                \\\"0% { fill: \\\", _valueToHSL(chameleon.body), \\\"; } \\\",\\n                \\\"100% { fill: \\\", _valueToHSL(chameleon.body), \\\"; } \\\",\\n                \\\"50% { fill: rgba(0,0,0,0); } }\\\",\\n                \\\".tongue{fill:brown;}\\\",\\n                // \\\".leaf{fill:#A8C686;}\\\",\\n                \\\".leaf{fill:green;}\\\",\\n                // \\\".bark{fill:#564D4A;}\\\",\\n                \\\".bark{fill:brown;}\\\",\\n                body,\\n                eye,\\n                \\\"</style> </defs>\\\"\\n            )\\n        );\\n        return styleTag;\\n    }\\n\\n    function _svgToImageUri(string memory svg)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\n        string memory svgBase64Encoded = Base64.encode(\\n            bytes(string(abi.encodePacked(svg)))\\n        );\\n        return string(abi.encodePacked(baseURL, svgBase64Encoded));\\n    }\\n\\n    function _formatTokenUri(\\n        string memory imageURI,\\n        string memory name,\\n        string memory attributes\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\", \\\"description\\\":\\\"Hiding in plain sight while strikingly on-chain. Beauty is in the eye of the behodler.\\\", '\\n                                '\\\"attributes\\\": ',\\n                                attributes,\\n                                ',',\\n                                '\\\"image\\\":\\\"',\\n                                imageURI,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISvgGenerator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IChameleon.sol\\\";\\n\\ninterface ISvgGenerator {\\n    function generateTokenUri(uint256 tokenId, IChameleon.Chameleon memory)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UintStrings.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nlibrary UintStrings {\\n    function decimalString(uint256 number, uint8 decimals, bool isPercent) internal pure returns(string memory){\\n        if(number == 0){\\n            return isPercent ? \\\"0%\\\" : \\\"0\\\";\\n        }\\n\\n        uint8 percentBufferOffset = isPercent ? 1 : 0;\\n        uint256 tenPowDecimals = 10 ** decimals;\\n\\n        uint256 temp = number;\\n        uint8 digits;\\n        uint8 numSigfigs;\\n        while (temp != 0) {\\n            if (numSigfigs > 0) {\\n                // count all digits preceding least significant figure\\n                numSigfigs++;\\n            } else if (temp % 10 != 0) {\\n                numSigfigs++;\\n            }\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        DecimalStringParams memory params;\\n        params.isPercent = isPercent;\\n        if((digits - numSigfigs) >= decimals) {\\n            // no decimals, ensure we preserve all trailing zeros\\n            params.sigfigs = number / tenPowDecimals;\\n            params.sigfigIndex = digits - decimals;\\n            params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        } else {\\n            // chop all trailing zeros for numbers with decimals\\n            params.sigfigs = number / (10 ** (digits - numSigfigs));\\n            if(tenPowDecimals > number){\\n                // number is less than one\\n                // in this case, there may be leading zeros after the decimal place\\n                // that need to be added\\n\\n                // offset leading zeros by two to account for leading '0.'\\n                params.zerosStartIndex = 2;\\n                params.zerosEndIndex = decimals - digits + 2;\\n                params.sigfigIndex = numSigfigs + params.zerosEndIndex;\\n                params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n                params.isLessThanOne = true;\\n            } else {\\n                // In this case, there are digits before and\\n                // after the decimal place\\n                params.sigfigIndex = numSigfigs + 1;\\n                params.decimalIndex = digits - decimals + 1;\\n            }\\n        }\\n        params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        return generateDecimalString(params);\\n    }\\n\\n    // With modifications, From https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/NFTDescriptor.sol#L189-L231\\n\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = '%';\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = '0';\\n            buffer[1] = '.';\\n        }\\n\\n        // add leading/trailing 0's\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex; zerosCursor++) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n                buffer[--params.sigfigIndex] = '.';\\n            }\\n            buffer[--params.sigfigIndex] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChameleon.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IChameleon {\\n    struct Chameleon {\\n        uint16 body;\\n        uint16 eyes;\\n        uint16 background;\\n\\n        // changes body color\\n        // 0 = solid = Veiled\\n        // 1 = changes colors on transfer = Metachrosis\\n        // 2 = animates to transparent = Camouflage\\n        uint8 bodyType;\\n\\n        // backgroundType\\n        // 0 = solid = Sedentary\\n        // 1 = changes colors on transfer\\n        uint8 backgroundType;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bodyType\",\"type\":\"uint8\"}],\"name\":\"bodyTypeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"backgroundType\",\"type\":\"uint8\"}],\"name\":\"environmentTypeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"body\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"background\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"bodyType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"backgroundType\",\"type\":\"uint8\"}],\"internalType\":\"struct IChameleon.Chameleon\",\"name\":\"chameleon\",\"type\":\"tuple\"}],\"name\":\"generateTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"eyes\",\"type\":\"uint16\"}],\"name\":\"irisTypeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SvgGenerator", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}