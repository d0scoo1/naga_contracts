{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nlibrary SafeTransfer {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool s, ) = address(token).call(\r\n            abi.encodeWithSelector(\r\n                IERC20.transferFrom.selector,\r\n                from,\r\n                to,\r\n                value\r\n            )\r\n        );\r\n        require(s, \"safeTransferFrom failed\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool s, ) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\r\n        );\r\n        require(s, \"safeTransfer failed\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool s, ) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\r\n        );\r\n        require(s, \"safeApprove failed\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool s, ) = to.call{value: value}(new bytes(0));\r\n        require(s, \"safeTransferETH failed\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\ncontract Sandwich {\r\n    using SafeTransfer for IERC20;\r\n\r\n    // Authorized\r\n    address internal immutable user;\r\n\r\n    // transfer(address,uint256)\r\n    bytes4 internal constant ERC20_TRANSFER_ID = 0xa9059cbb;\r\n\r\n    // swap(uint256,uint256,address,bytes)\r\n    bytes4 internal constant PAIR_SWAP_ID = 0x022c0d9f;\r\n\r\n    // Contructor sets the only user\r\n    receive() external payable {}\r\n\r\n    constructor(address _owner) {\r\n        user = _owner;\r\n    }\r\n\r\n    // *** Receive profits from contract *** //\r\n    function recoverERC20(address token) public {\r\n        require(msg.sender == user, \"shoo\");\r\n        IERC20(token).safeTransfer(\r\n            msg.sender,\r\n            IERC20(token).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    /*\r\n        Fallback function where you do your frontslice and backslice\r\n\r\n        NO UNCLE BLOCK PROTECTION IN PLACE, USE AT YOUR OWN RISK\r\n\r\n        Payload structure (abi encodePacked)\r\n\r\n        - token: address        - Address of the token you're swapping\r\n        - pair: address         - Univ2 pair you're sandwiching on\r\n        - amountIn: uint128     - Amount you're giving via swap\r\n        - amountOut: uint128    - Amount you're receiving via swap\r\n        - tokenOutNo: uint8     - Is the token you're giving token0 or token1? (On univ2 pair)\r\n\r\n        Note: This fallback function generates some dangling bits\r\n    */\r\n    fallback() external payable {\r\n        // Assembly cannot read immutable variables\r\n        address memUser = user;\r\n\r\n        assembly {\r\n            // You can only access teh fallback function if you're authorized\r\n            if iszero(eq(caller(), memUser)) {\r\n                // Ohm (3, 3) makes your code more efficient\r\n                // WGMI\r\n                revert(3, 3)\r\n            }\r\n\r\n            // Extract out teh variables\r\n            // We don't have function signatures sweet saving EVEN MORE GAS\r\n\r\n            // bytes20\r\n            let token := shr(96, calldataload(0x00))\r\n            // bytes20\r\n            let pair := shr(96, calldataload(0x14))\r\n            // uint128\r\n            let amountIn := shr(128, calldataload(0x28))\r\n            // uint128\r\n            let amountOut := shr(128, calldataload(0x38))\r\n            // uint8\r\n            let tokenOutNo := shr(248, calldataload(0x48))\r\n\r\n            // **** calls token.transfer(pair, amountIn) ****\r\n\r\n            // transfer function signature\r\n            mstore(0x7c, ERC20_TRANSFER_ID)\r\n            // destination\r\n            mstore(0x80, pair)\r\n            // amount\r\n            mstore(0xa0, amountIn)\r\n\r\n            let s1 := call(sub(gas(), 5000), token, 0, 0x7c, 0x44, 0, 0)\r\n            if iszero(s1) {\r\n                // WGMI\r\n                revert(3, 3)\r\n            }\r\n\r\n            // ************\r\n            /* \r\n                calls pair.swap(\r\n                    tokenOutNo == 0 ? amountOut : 0,\r\n                    tokenOutNo == 1 ? amountOut : 0,\r\n                    address(this),\r\n                    new bytes(0)\r\n                )\r\n            */\r\n\r\n            // swap function signature\r\n            mstore(0x7c, PAIR_SWAP_ID)\r\n            // tokenOutNo == 0 ? ....\r\n            switch tokenOutNo\r\n            case 0 {\r\n                mstore(0x80, amountOut)\r\n                mstore(0xa0, 0)\r\n            }\r\n            case 1 {\r\n                mstore(0x80, 0)\r\n                mstore(0xa0, amountOut)\r\n            }\r\n            // address(this)\r\n            mstore(0xc0, address())\r\n            // empty bytes\r\n            mstore(0xe0, 0x80)\r\n\r\n            let s2 := call(sub(gas(), 5000), pair, 0, 0x7c, 0xa4, 0, 0)\r\n            if iszero(s2) {\r\n                revert(3, 3)\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sandwich", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d03d53877b88d04922eb1a06809bc2ff27572d7a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a50fda5bfed8fb072a96c737dc021ce7cdec7f5f13124134cb8cec3b13097eb"}]}