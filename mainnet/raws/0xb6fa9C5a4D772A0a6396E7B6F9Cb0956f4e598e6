{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/EVADAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNNNNNNNNNNNNNNNNNNNNNNNNNNWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl'''''''''''''''''''''''''''lXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .:lllllllllc. .:lllllllc. ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMWklxNMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklkNMMMMMMMMMMMMMMMMMMMMMWklkNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOdl:'cXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl;'.  .';xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdoc;.. ..,:lxOKNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xoc,..  ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd,'...':ldk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'ldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:,....,:lxkOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxl:,.   .';ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOkxoc,.. ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc,.. ..,dNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc;lXMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkdOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc  .':ok0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX0xl:'. ..;clxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKx'  .....,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,xO0xo:'...':ox0NWMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMWKOdl;'.',;xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMMMN0xo; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMWX0xl:'...':xNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: 'dkkoc,.  .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo.  .  ..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko:,.  .':cox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:  .,cdOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNKOkkkOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMWNNWWX0kxxxxxokXWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMNXNWWN0xxOKXXXNWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMWWXXWWNNXXXNXXNWWWWWWWWWWWWWWWWWWWWWWNNXNWWMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMWNXXXKXXXXNNNNNNNXKXNNNWWWWWWWWWWWWWWWWWWWWNXXXWMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMWWWNNK0OO0000KKKXXXNNNNXKXNWWMMMWNNNWNNNWWWWWWWWWWWNNNWMMMMMMMMMMMMMM\\n// WWWWWWWWWWWWNNNXK0OkkkkkkO000KKKKKKKXK0KXXNNKKKKKXWX0XWWWWWWWWNNNNNNNNWMMMMMMMMMMMM\\n// WWWWWWWWNNNNNXXX0kxxxkOOOOOOO000K0000kkOOOOOxxOkkkOkddO000KXNNNNXXXXNNNWWMMMMMMMMMM\\n// WMMWWWWWNNNXXXXKkdddxkO0000000OOO0KXK0kkxxxkkkOkdl:;,;:loodkO0KKKKXXXXNXNWMMMMMMMMM\\n// WWWWWWNNXKKKKK0kooodxO00KKKKXNXOdONMMNKOxddxkO0Oxl;,,,,;:clddxkO0000KKXXKXWMMMMMMMM\\n// KKKK0OO00OOOkkdcclloxk0KXNNXXXNNOx0WMWNXK0OkOKXXKkl;;:::clloddxxkkkkO00KKKXMMMMMMMM\\n// kkkkkxxxxxddol:;:c::cldk0NWWX0O0NKxkNWNWNKkldKWWWNXKOkxxddooooooodxkkOOOOO0NMMMMMMM\\n// lllllllcc::;,'.',,,''',:ldkOOxlcdOkldO00OOl''o0XNNNWWNKOxocc::cllooodxkkkkkXMMMMMMM\\n// ;;,,,,,''................'',,,...,:,':lc;;;,'',:codddol:;;,,;;::::ccclodddx0WMMMMMM\\n// '.....................................''....................',,;;;;;;;:cclo0WMMMMMM\\n// ................................................................'''''..,;:oXMMMMMMM\\n// .........................................................................;OWMMMMMMM\\n// .........................................................................oNMMMMMMMM\\n// ........................................................................lXMMMMMMMMM\\n// ..........''',,'......................................................'dNMMMMMMMMMM\\n// lldddddoooll:;'.....................................................'l0WMMMMMMMMMMM\\n// MMMMMMMMMMMMWXKOxol:,'......,;,''.................................,cOWMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMWNKOdc;'.....''..............................',:dXMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMWKx;.................'''''..........',,;:ccdXMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMM0:.............',,,,,,'''...'',;cok00OkkkONMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMKl'.............;lllllloodxkO0KXWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMWKkoc,.......:xNWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kkOOOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:::::::::::::::::::::::::::dNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .,;,;;,,;;;;;;;;;;,;;,;,. ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;KWWWWWWWWWWWWWWWWWWWWWX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: '0MMMMMMMMMMMMMMMMMMMMM0' ;XMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd  oWMMMMMMMMMMMMMMMMMMMWo  oWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .dNMMMMMMMMMMMMMMMMMNd. :XMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:  ;xXWMMMMMMMMMMMWXx;  cKMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;. .;lddxkOOkxdl;. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o:'.         .':d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0OOkkkkO0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdcokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.. .':lx0XWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xo:'.  .';ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0, .',.. .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKN0koc,...':lx0XWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMWXOxl:,,,'oNMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMWNKOxo; ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMWXOdl;'...':oOWMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .coo:,.  .,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOd:.    .';lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl:'.  .,codkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXK00KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoc,.........,:oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l'  .,:clooool:,.  .l0WMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl. .lkXWMMMMMMMMMWXkl' .lXMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .oXMMMMMMMMMMMMMMMMMXo. ,KMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .kWMMMMMMMMMMMMMMMMMMMWk. :XMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. lWMMMMMMMMMMMMMMMMMMMMMWo .kMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMMx. dMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. oWMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; '0MMMMMMMMMMMMMMMMMMMMM0, ,KMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. 'kWMMMMMMMMMMMMMMMMMWO, .kMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0; .;xXWMMMMMMMMMMMWXk:. ,OWMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;. .;ldxxOOOOkdl;.  ,xNMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o:'.         .':oONMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNK0Okxxxxk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721EnumerableDelegable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"./BasisPoints.sol\\\";\\nimport \\\"./IERC721Dispatcher.sol\\\";\\n\\ninterface IEVADQ {\\n  function mint(address _owner, uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title EVADAO\\n * @dev EVADAO ERC721Delegable NFT contract.\\n * @author 0xAnimist (kanon.art) for EVADAO\\n */\\ncontract EVADAO is ERC721EnumerableDelegable, IERC2981 {\\n\\n  address public admin;\\n\\n  IEVADQ private evaDQ;\\n\\n  struct Artwork {\\n    address[] artists;\\n    string tokenUri;\\n    string gatedUri;\\n    bool gatedUriLocked;\\n  }\\n\\n  mapping(uint256 => Artwork) private _artworks;\\n\\n  struct RoyaltyInfo {\\n    address receiver;\\n    uint256 royaltyInBp;\\n  }\\n\\n  mapping(uint256 => RoyaltyInfo) private _royaltyInfos;\\n\\n  struct Artist {\\n    address wallet;\\n    uint256 mintStartWindow;\\n    uint256 mintEndWindow;\\n  }\\n\\n  mapping(uint256 => Artist) private _artists;\\n\\n  mapping(address => uint256) private _artistIndexByWallet;\\n\\n  uint256 public artistsAdded = 0;\\n\\n  uint256 public artistsRemoved = 0;\\n\\n  modifier onlyAdmin() {\\n    require(_msgSender() == admin, \\\"EVADAO: only admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyArtistDuringWindow() {\\n    (address wallet, uint256 mintStartWindow, uint256 mintEndWindow) = getArtistInfo(_msgSender());\\n\\n    require(wallet != address(0), \\\"EVADAO: not an artist\\\");\\n    require(mintStartWindow <= block.timestamp, \\\"EVADAO: window not yet open\\\");\\n    require(mintEndWindow >= block.timestamp, \\\"EVADAO: window has expired\\\");\\n\\n    _;\\n  }\\n\\n  constructor(address _evaDQContract) ERC721(\\\"EVADAO\\\", \\\"EVA\\\") {\\n    admin = _msgSender();\\n    evaDQ = IEVADQ(_evaDQContract);\\n  }\\n\\n  function setAdmin(address _admin) external onlyAdmin {\\n    admin = _admin;\\n  }\\n\\n  function getAdmin() external view returns (address) {\\n    return admin;\\n  }\\n\\n  function getArtistsByTokenId(uint256 _tokenId) external view returns (address[] memory artists) {\\n    require(_exists(_tokenId), \\\"EVADAO: token does not exist\\\");\\n    return _artworks[_tokenId].artists;\\n  }\\n\\n  function tokenURI(uint256 _tokenId) public view override returns (string memory tokenUri) {\\n    require(_exists(_tokenId), \\\"EVADAO: token does not exist\\\");\\n    return _artworks[_tokenId].tokenUri;\\n  }\\n\\n  function gatedURI(uint256 _tokenId) external view returns (string memory gatedUri) {\\n    require(_msgSender() == ownerOf(_tokenId), \\\"EVADAO: sorry this is a secret\\\");\\n    require(_exists(_tokenId), \\\"EVADAO: token does not exist\\\");\\n    return _artworks[_tokenId].gatedUri;\\n  }\\n\\n  function getArtists() external view returns (address[] memory artists) {\\n    artists = new address[](artistsAdded - artistsRemoved);\\n    uint256 count;\\n    for(uint256 i = 0; i < artistsAdded; i++){\\n      if(_artists[i].wallet != address(0)){\\n        artists[count++] = _artists[i].wallet;\\n      }\\n    }\\n  }\\n\\n  function getArtistInfo(address _wallet) public view returns (address wallet, uint256 mintStartWindow, uint256 mintEndWindow) {\\n    uint256 i = _artistIndexByWallet[_wallet];\\n    if(_artists[i].wallet == _wallet){\\n      return (_wallet, _artists[i].mintStartWindow, _artists[i].mintEndWindow);\\n    }\\n  }\\n\\n  function addArtist(address _wallet) external onlyAdmin {\\n    addArtistWithWindow(_wallet, 0, 0);\\n  }\\n\\n  function addArtistWithWindow(address _wallet, uint256 _mintStartWindow, uint256 _mintEndWindow) public onlyAdmin {\\n    (address wallet,,) = getArtistInfo(_wallet);\\n    require(wallet == address(0), \\\"EVADAO: already added\\\");\\n\\n    //return to same index if re-adding an artist\\n    if(_artistIndexByWallet[_wallet] != 0){\\n      _artists[_artistIndexByWallet[_wallet]] = Artist(_wallet, _mintStartWindow, _mintEndWindow);\\n    }else{\\n      _artistIndexByWallet[_wallet] = artistsAdded;\\n      _artists[_artistIndexByWallet[_wallet]] = Artist(_wallet, _mintStartWindow, _mintEndWindow);\\n      artistsAdded++;\\n    }\\n  }\\n\\n  function updateArtistMintWindow(address _wallet, uint256 _mintStartWindow, uint256 _mintEndWindow) external onlyAdmin {\\n    (address wallet,,) = getArtistInfo(_wallet);\\n    require(wallet != address(0), \\\"EVADAO: artist does not exist\\\");\\n    _artists[_artistIndexByWallet[_wallet]].mintStartWindow = _mintStartWindow;\\n    _artists[_artistIndexByWallet[_wallet]].mintEndWindow = _mintEndWindow;\\n  }\\n\\n  function removeArtist(address _wallet) external onlyAdmin {\\n    (address wallet,,) = getArtistInfo(_wallet);\\n    require(wallet != address(0), \\\"EVADAO: artist does not exist\\\");\\n    _artists[_artistIndexByWallet[_wallet]].wallet = address(0);\\n    artistsRemoved++;\\n  }\\n\\n  function mint(address[] memory _artworkArtists, address _royaltyReceiver, uint256 _royaltyInBp, string memory _tokenUri) external onlyArtistDuringWindow {\\n    mintWithGatedUri(_artworkArtists, _royaltyReceiver, _royaltyInBp, _tokenUri, \\\"\\\");\\n  }\\n\\n  function mintWithGatedUri(address[] memory _artworkArtists, address _royaltyReceiver, uint256 _royaltyInBp, string memory _tokenUri, string memory _gatedUri) public onlyArtistDuringWindow {\\n    uint256 tokenId = totalSupply();\\n    _artworks[tokenId] = Artwork(_artworkArtists, _tokenUri, _gatedUri, false);\\n    _royaltyInfos[tokenId] = RoyaltyInfo(_royaltyReceiver, _royaltyInBp);\\n    _safeMint(_msgSender(), tokenId);\\n\\n    evaDQ.mint(_msgSender(), tokenId);\\n  }\\n\\n  function setGatedUri(string memory _gatedUri, uint256 _tokenId) external {\\n    require(_exists(_tokenId), \\\"EVADAO: token does not exist\\\");\\n    require(!_artworks[_tokenId].gatedUriLocked, \\\"EVADAO: gatedUri is locked\\\");\\n    require(_isArtistOfTokenId(_msgSender(), _tokenId), \\\"EVADAO: an artist can set\\\");\\n    _artworks[_tokenId].gatedUri = _gatedUri;\\n  }\\n\\n\\n  function lockGatedUri(uint256 _tokenId) external {\\n    require(_exists(_tokenId), \\\"EVADAO: token does not exist\\\");\\n    require(_msgSender() == ownerOf(_tokenId) || _isArtistOfTokenId(_msgSender(), _tokenId), \\\"EVADAO: only owner or an artist can lock\\\");\\n    _artworks[_tokenId].gatedUriLocked = true;\\n  }\\n\\n  function _isArtistOfTokenId(address _artist, uint256 _tokenId) internal view returns (bool isArtist) {\\n    for(uint256 i = 0; i < _artworks[_tokenId].artists.length; i++){\\n      if(_artist == _artworks[_tokenId].artists[i]){\\n        return true;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC2981-royaltyInfo}.\\n   */\\n  function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address receiver, uint256 royaltyAmount) {\\n    receiver = _royaltyInfos[tokenId].receiver;\\n    royaltyAmount = BasisPoints.mulByBp(salePrice, _royaltyInfos[tokenId].royaltyInBp);\\n  }\\n\\n  function updateRoyaltyReceiver(address _receiver, uint256 _tokenId) external {\\n    require(_msgSender() == _royaltyInfos[_tokenId].receiver, \\\"EVADAO: only current receiver can change receiver\\\");\\n    _royaltyInfos[_tokenId].receiver = _receiver;\\n  }\\n\\n  /**\\n   * @dev Requests safeTransferFrom() of `_tokenId` token by first\\n   * requesting approval be set by the owner of the delegate token\\n   * with `_terms` terms.\\n   * @param _to address to transfer the token to\\n   * @param _tokenId token to transfer\\n   * @param _terms terms of the delegate approval request\\n   * @param _data data\\n   */\\n  function requestSafeTransferFrom (\\n    address _to,\\n    uint256 _tokenId,\\n    bytes memory _terms,\\n    bytes calldata _data)\\n  external virtual {\\n    _requestApproval(_to, _tokenId, _terms, _data);\\n    safeTransferFrom(ownerOf(_tokenId), _to, _tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Requests approval be set for `_to` address by the owner\\n   * of the delegate token with `_terms` terms.\\n   * @param _to address to transfer the token to\\n   * @param _tokenId token to transfer\\n   * @param _terms terms of the delegate approval request\\n   * @param _data data\\n   */\\n  function _requestApproval(address _to, uint256 _tokenId, bytes memory _terms, bytes calldata _data) internal virtual {\\n    (address delegateContract, uint256 delegateToken) = getDelegateToken(_tokenId);\\n    address delegate = IERC721(delegateContract).ownerOf(delegateToken);\\n    //require(IERC165(delegate).supportsInterface(type(IERC721Dispatcher)), \\\"RQ: not a valid dispatcher\\\");\\n\\n    IERC721Dispatcher(delegate).requestApproval(_msgSender(), _to, address(this), _tokenId, _terms, _data);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC721Dispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title IERC721Dispatcher\\n * @dev Interface for an ERC721Delegable token dispatcher.\\n * @author 0xAnimist (kanon.art)\\n */\\ninterface IERC721Dispatcher {\\n\\n  /**\\n   * @dev Emitted when a delegate token has been deposited.\\n   */\\n  event Deposited(address indexed sourceTokenContract, uint256 indexed sourceTokenId, uint256 tokenId, address depositedBy, bytes[] terms, bytes data);\\n\\n  /**\\n   * @dev Emitted when a delegate token has been withdrawn.\\n   */\\n  event Withdrawn(address indexed sourceTokenContract, uint256 indexed sourceTokenId, uint256 tokenId, address withdrawnBy, bytes data);\\n\\n  /**\\n   * @dev Emitted when an approval request has been granted.\\n   */\\n  event ApprovalGranted(address indexed sourceTokenContract, uint256 indexed sourceTokenId, address indexed to, address payee, bytes terms, bytes data);\\n\\n  /**\\n   * @dev Emitted when terms are set for a token.\\n   */\\n  event TermsSet(address indexed owner, bytes[] terms, uint256 tokenId, bytes data);\\n\\n  /**\\n   * @dev Deposits an array of delegate tokens of their corresponding delegable Tokens\\n   * in exchange for sDQ receipt tokens.\\n   *\\n   * Requirements:\\n   *\\n   * - must be the owner of the delegate token\\n   *\\n   * Emits a {Deposited} event.\\n   */\\n  function deposit(address[] memory _ERC721DelegableContract, uint256[] memory _ERC721DelegableTokenId, bytes[][] memory _terms, bytes calldata _data) external returns (uint256[] memory tokenIds);\\n\\n  /**\\n   * @dev Withdraws a staked delegate token in exchange for `_tokenId` sDQ token receipt.\\n   *\\n   * Emits a {Withdrawn} event.\\n   */\\n  function withdraw(uint256 _tokenId, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Sets the terms by which an approval request will be granted.\\n   *\\n   * Emits a {TermsSet} event.\\n   */\\n  function setTerms(bytes[] memory _terms, uint256 _tokenId, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Gets the terms by which an approval request will be granted.\\n   */\\n  function getTerms(uint256 _tokenId) external view returns (bytes[] memory terms);\\n\\n  /**\\n   * @dev Gets array of methodIds served by the dispatcher.\\n   */\\n  function getServedMethodIds() external view returns (bytes4[] memory methodIds);\\n\\n  /**\\n   * @dev Gets source ERC721Delegable token for a given `_tokenId` token.\\n   */\\n  function getDepositByTokenId(uint256 _tokenId) external view returns (address contractAddress, uint256 tokenId);\\n\\n  /**\\n   * @dev Gets tokenId` token ID for a given source ERC721Delegable token.\\n   */\\n  function getTokenIdByDeposit(address _ERC721DelegableContract, uint256 _ERC721DelegableTokenId) external view returns (bool success, uint256 tokenId);\\n\\n  /**\\n   * @dev Requests dispatcher call approveByDelegate() on the source ERC721Delegable\\n   * token corresponding to `_tokenId` token for `_to` address with `_terms` terms.\\n   */\\n  function requestApproval(address _payee, address _to, address _ERC721DelegableContract, uint256 _ERC721DelegableTokenId, bytes memory _terms, bytes calldata _data) external payable;\\n\\n  /**\\n   * @dev Withdraws fees accrued to all eligible recipients for `_tokenId` token without withdrawing the token itself.\\n   *\\n   * Requirements:\\n   *\\n   * - token must exist.\\n   *\\n   */\\n  function claimFeesAccrued(uint256 _tokenId) external returns (bool success, address currency);\\n}\\n\"\r\n    },\r\n    \"/contracts/IERC721Delegable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Delegable\\n * @dev Interface for a delegable ERC721 token contract\\n * @author 0xAnimist (kanon.art)\\n */\\ninterface IERC721Delegable is IERC721 {\\n  /**\\n   * @dev Emitted when the delegate token is set for `tokenId` token.\\n   */\\n  event DelegateTokenSet(address indexed delegateContract, uint256 indexed delegateTokenId, uint256 indexed tokenId, address operator, bytes data);\\n\\n  /**\\n   * @dev Sets the delegate NFT for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {DelegateTokenSet} event.\\n   */\\n  function setDelegateToken(address _delegateContract, uint256 _delegateTokenId, uint256 _tokenId) external;\\n\\n  /**\\n   * @dev Sets the delegate NFT for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {DelegateTokenSet} event.\\n   */\\n  function setDelegateToken(address _delegateContract, uint256 _delegateTokenId, uint256 _tokenId, bytes calldata _data) external;\\n\\n  /**\\n   * @dev Gets the delegate NFT for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getDelegateToken(uint256 _tokenId) external view returns (address contractAddress, uint256 tokenId);\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the delegate token.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approveByDelegate(address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC721EnumerableDelegable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./ERC721Delegable.sol\\\";\\n\\n/**\\n * @title ERC721EnumerableDelegable\\n * @dev Required interface of an ERC721RQ compliant contract.\\n * @author 0xAnimist (kanon.art)\\n */\\nabstract contract ERC721EnumerableDelegable is ERC721Enumerable, ERC721Delegable {\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Delegable, ERC721Enumerable) returns (bool) {\\n      return\\n        interfaceId == type(IERC721Delegable).interfaceId\\n        || interfaceId == type(IERC721Enumerable).interfaceId//TODO: REMOVE?\\n        || super.supportsInterface(interfaceId);\\n  }\\n\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n      address from,\\n      address to,\\n      uint256 tokenId\\n  ) internal virtual override(ERC721, ERC721Enumerable) {\\n      super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721Delegable) {\\n    super._burn(tokenId);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC721Delegable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Delegable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @title ERC721Delegable\\n * @dev Implementation of the IERC721Delegable interface, extending the\\n * {ERC721} non-fungible token standard with the addition of a delegate token.\\n * @author 0xAnimist (kanon.art)\\n */\\nabstract contract ERC721Delegable is ERC721, IERC721Delegable {\\n\\n  struct Delegate {\\n    address contractAddress;\\n    uint256 tokenId;\\n  }\\n\\n  // Mapping token ID to delegate token\\n  mapping(uint256 => Delegate) private _delegates;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n      return\\n        interfaceId == type(IERC721Delegable).interfaceId\\n        || super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Delegable-setDelegateToken}.\\n   */\\n  function setDelegateToken(address _delegateContract, uint256 _delegateTokenId, uint256 _tokenId) public virtual override {\\n    setDelegateToken(_delegateContract, _delegateTokenId, _tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721Delegable-setDelegateToken}.\\n   */\\n  function setDelegateToken(address _delegateContract, uint256 _delegateTokenId, uint256 _tokenId, bytes memory _data) public virtual override {\\n    require(_isDelegateOrOwnerOfUndelegated(_msgSender(), _tokenId), \\\"ERC721Q: not authorized to set delegate\\\");\\n\\n    _delegates[_tokenId] = Delegate(_delegateContract, _delegateTokenId);\\n\\n    emit DelegateTokenSet(_delegateContract, _delegateTokenId, _tokenId, _msgSender(), _data);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Delegable-getDelegateToken}.\\n   */\\n  function getDelegateToken(uint256 _tokenId) public view virtual override returns (address contractAddress, uint256 tokenId) {\\n    return (_delegates[_tokenId].contractAddress, _delegates[_tokenId].tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Delegable-approveByDelegate}.\\n   */\\n  function approveByDelegate(address to, uint256 tokenId) public virtual override {\\n      address owner = ERC721.ownerOf(tokenId);\\n      require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n      require(_msgSender() == _getDelegateOwner(tokenId),\\\"ERC721: approve caller is not owner nor approved for all nor delegate\\\");\\n\\n      _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns true if `_operator` is the owner of the delegate token of `_tokenId\\n   * token or, if and only if the delegate token has not been set (ie. is address(0)),\\n   * returns true if `_operator` is the owner of `_tokenId` token.\\n   */\\n  function _isDelegateOrOwnerOfUndelegated(address _operator, uint256 _tokenId) internal view virtual returns (bool) {\\n    address delegate = _getDelegateOwner(_tokenId);\\n    if(delegate != address(0)){//delegate has been set\\n      return _operator == delegate;\\n    }else{//delegate has not been set\\n      return _operator == ownerOf(_tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns owner of the delegate token for `_tokenId` token, or address(0) if\\n   * no delegate token has been set.\\n   *\\n   * Requirements:\\n   *\\n   * - tokenId must exist\\n   */\\n  function _getDelegateOwner(uint256 _tokenId) internal view returns (address delegateOwner) {\\n    require(_exists(_tokenId), \\\"ERC721Q: token does not exist\\\");\\n\\n    if(_delegates[_tokenId].contractAddress != address(0)){//delegate has been set\\n      return IERC721(_delegates[_tokenId].contractAddress).ownerOf(_delegates[_tokenId].tokenId);//fails if delegate token has been burnt\\n    }\\n\\n    return address(0);//delegate has not been set\\n  }\\n\\n  /**\\n   * @dev Burns `tokenId`. See {ERC721-_burn}.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own `tokenId` or be an approved operator.\\n   */\\n  function _burn(uint256 tokenId) internal virtual override {\\n    setDelegateToken(address(0),0,tokenId);\\n    ERC721._burn(tokenId);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/BasisPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title BasisPoints\\n/// @notice Provides a function for multiplying in basis points\\nlibrary BasisPoints {\\n\\n  uint128 public constant BASE = 10000;\\n\\n  /**  @notice Calculate _input * _basisPoints / _base rounding down\\n    *  @dev from Mikhail Vladimirov's response here: https://ethereum.stackexchange.com/questions/55701/how-to-do-solidity-percentage-calculation/55702\\n    */\\n  function mulByBp(uint256 _input, uint256 _basisPoints) public pure returns (uint256) {\\n    uint256 a = _input / BASE;\\n    uint256 b = _input % BASE;\\n    uint256 c = _basisPoints / BASE;\\n    uint256 d = _basisPoints % BASE;\\n\\n    return a * c * BASE + a * d + b * c + b * d / BASE;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"/contracts/BasisPoints.sol\": {\r\n        \"BasisPoints\": \"0x6F1762c6B12c29A8c3b0C67260e4404585D1461F\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evaDQContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegateContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"delegateTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DelegateTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintStartWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintEndWindow\",\"type\":\"uint256\"}],\"name\":\"addArtistWithWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveByDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistsAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistsRemoved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"gatedURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gatedUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getArtistInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintStartWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintEndWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"artists\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getArtistsByTokenId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"artists\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDelegateToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockGatedUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_artworkArtists\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyInBp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_artworkArtists\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyInBp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_gatedUri\",\"type\":\"string\"}],\"name\":\"mintWithGatedUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeArtist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_terms\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delegateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setDelegateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delegateTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setDelegateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gatedUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setGatedUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintStartWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintEndWindow\",\"type\":\"uint256\"}],\"name\":\"updateArtistMintWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EVADAO", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000092a63ade157f89dac06ef308cec435c36b1707eb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}