{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: CONSTANTLY WANTS TO MAKE THE WORLD BEAUTIFUL\r\n\r\n// THIS CONTRACT IS MADE FOR \"BASTARD GAN PUNKS V2\" NFT COLLECTION - 0x31385d3520bCED94f77AaE104b406994D8F2168C\r\n\r\n// THE CONTRACT HAS TWO VIEW FUNCTIONS WHICH GIVE THE ANSWER OF: IS THIS BASTARD CALM AF OR HYPED AF? \r\n// IF IT RETURNS false, BASTARD IS CALM AF (STILL), IF IT RETURNS true, BASTARD IS HYPED AF (ANIMATED)\r\n// I ENCODED THE HYPE TYPE ATTRIBUTE OF ALL BASTARDS TO BINARY AND THEN CONVERTED INTO UINT256 NUMBERS.\r\n// THIS WAY IT IS VERY GAS EFFICIENT TO PUT THE DATA IN THE CONTRACT AND TO READ FROM IT WITH BITWISE OPERATIONS\r\n// THEREFORE OTHER SMART CONTRACTS WILL BE ABLE TO ASK FOR THIS INFO\r\n\r\n// made by yours truly\r\n// berk aka princess camel aka guerilla pimp minion god bastard\r\n// love y'all xoxo\r\n\r\n// https://twitter.com/berkozdemir\r\n// https://linktr.ee/0xberk\r\n// https://berkozdemir.com\r\n\r\n// https://bastardganpunks.club\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract ISTHISBASTARDHYPEDAF {\r\n\r\n    address public BASTARDGANPUNKSV2CONTRACT = 0x31385d3520bCED94f77AaE104b406994D8F2168C;\r\n\r\n    uint256[45] private bastardHypeData = [\r\n        60073777500531777309569341902311450832970806684984335380877167411848999105,\r\n        911030518599144363128045939364018710001346374805208504959662892107039264,\r\n        110427941575966967351359660042133073187106177110108689088109851709579264,\r\n        7244072965591375751291519753228743911444121263833947131949686290901482078208,\r\n        53920716187111647673158152691530347090981044843371481999282330927104,\r\n        28269553155187587904379845452183588808913619556543343451846675079410746368,\r\n        7237012485818621482766969856862286591708568850762763481418421878898739380288,\r\n        28948022336288995524024183204685263395539079038253687811956299320406017310720,\r\n        508851981616123375297400616180849883477860677580438602377384428085745090560,\r\n        14134793368296585640660899053986903458853787334949849965302457659035746634,\r\n        904625697166532776746840654726597851124159588974703084599473238529721204992,\r\n        7689649709741820280138983570393374265558559592432921588791700801021244604416,\r\n        15378664459238105110628985953637648885546204368019600629895762625608282570754,\r\n        28298022766565589858196639354849931654303230842856485297897134577510535172,\r\n        13493137370082929871893548962295401850961908172137736658014378656770,\r\n        227757629473013495911990931968352473098775479022254484690657366071443520,\r\n        56594320043695478757479259204605731921712130427921800033634632805818388480,\r\n        1234136656686932226634729421412400046043143420946502433395179520,\r\n        61627625835149618753101568217953080766429142083270315994710955118825035728960,\r\n        7251140367541087207091562649092212227169199184044871573547234918439107690496,\r\n        452347414605298385028233695601748739592923762703385251917908360463567028224,\r\n        883437012362525740351793614791135273097040343676404640010951746595604992,\r\n        9046256978523790763950594814262484907683338705294530755777835808993233076224,\r\n        3450900324220477694505668625892552192974936730546741369102118470811648,\r\n        57430294129484326263779550669392017430943804262482366905002778858449010756,\r\n        65821820616593864908747109345958364366624049286605470886667616288,\r\n        1812788541022450744194479714188894866769936947868592939254390553980459548672,\r\n        43423800311479600834842931609725708698380332594266411088983739638829207789584,\r\n        3618502804043390528626632892318197405868212980259278026803612618127891234816,\r\n        56552909565628402194510254494583770532182463364142439563339590932115767296,\r\n        26959947596161696637747483674810921589898199962629595310899557601280,\r\n        904632626720312509776015060208753544895833407483695121281400256143343747072,\r\n        113078643504963296618490795471347341004721143874259254595939388655763980304,\r\n        57303256417331751398208122226062325776996986023712946383428138303744,\r\n        57896044648988654776538961467054346974585413820871518656470882686887182467104,\r\n        886874563544683924429857749297433117598767741861474362313171780969431296,\r\n        1766847117436137102385241768710430707025467705021728368456105290766221312,\r\n        16288594161741084010661460287002386974227278478751649599946725574991446802560,\r\n        883423585046944938649989785825506761682762488072976323836115426887073808,\r\n        113520790000297878528676916947969078388139197042543667816101704655236498484,\r\n        62115717943867358877497987304365777498653201364686319841865591427178496,\r\n        57896942277043151534397650742294364288415203933952110676029965772475051671552,\r\n        65147192089934725678015384173470249969788419746629932641898133147403780358144,\r\n        452368062554040716058966371635471166633704285680304924422196653263178170384,\r\n        1649402183680\r\n    ];\r\n    \r\n    function isThisBastardHypedAF(uint256 _bastardId) external view returns (bool) {\r\n        require(_bastardId < 11305, \"NON EXISTENT BASTARD ID\");\r\n        return (bastardHypeData[_bastardId / 256] & (1 << (_bastardId % 256))) > 0;\r\n    }\r\n\r\n    function isThisBastardHypedAF_BATCH(uint256[] memory _bastardIds) external view returns (bool[] memory) {\r\n        uint length = _bastardIds.length;\r\n        bool[] memory areHypedAF = new bool[](length);\r\n        for(uint i = 0; i<length;i++){\r\n            require(_bastardIds[i] < 11305, \"NON EXISTENT BASTARD ID\");\r\n            areHypedAF[i] = (bastardHypeData[_bastardIds[i] / 256] & (1 << (_bastardIds[i] % 256))) > 0 ;\r\n        }\r\n        return areHypedAF;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"BASTARDGANPUNKSV2CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bastardId\",\"type\":\"uint256\"}],\"name\":\"isThisBastardHypedAF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bastardIds\",\"type\":\"uint256[]\"}],\"name\":\"isThisBastardHypedAF_BATCH\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ISTHISBASTARDHYPEDAF", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://280f11cf5671f60bd0c46457e8e046078bdba94d04233b2e41107d7f6f3d3e01"}]}