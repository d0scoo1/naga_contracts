{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\n * DRIPTO | $DRYP \r\n * The 1st shop-to-earn token and crypto e-commerce platform\r\n * TG: https://t.me/driptotoken\r\n * Website: https://dripto.com\r\n * All Links: https://linktr.ee/dripto\r\n \r\n#  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \r\n#  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\r\n#  \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\r\n#  \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d    \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\r\n#  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n#  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d        \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d                                                                                           \r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.13;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function removeLiquidityETH(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Dripto is Context, IERC20, Ownable {\r\n    \r\n    string constant private _name = \"Dripto\";\r\n    string constant private _symbol = \"DRYP\";\r\n    uint8 constant private _decimals = 18;\r\n\r\n    address public constant  deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address payable public autoLiquidityReceiver = payable(0x7576E8a7ff15977b6c36aa869Fdf04D8Fb71E98f); // LP Address\r\n    address payable public marketingWalletAddress = payable(0xeEBE80A2d80d4e54500c5AE081BD052E0ff9E6D7); // Marketing Address\r\n    address payable public operationsWalletAddress = payable(0x5b7f00DF069Cb67189B57ff44693AeE455738E0d); // operations Address\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n    \r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isMarketPair;\r\n    mapping (address => bool) public isEarlyBuyer;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n\r\n    uint256 public buyTax = 70;\r\n    uint256 public sellTax = 90;\r\n\r\n    uint256 public lpShare = 10;\r\n    uint256 public marketingShare = 40;\r\n    uint256 public operationsShare = 40;\r\n\r\n    uint256 constant private _totalSupply = 150 * 10**6 * 10**_decimals;\r\n    uint256 public swapThreshold = 10000 * 10**_decimals; \r\n    uint256 public maxTxAmount = 1 * 10**6 * 10**_decimals;\r\n    uint256 public walletMax = 3 * 10**6 * 10**_decimals;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n    \r\n    bool private isInSwap;\r\n    bool public swapEnabled = true;\r\n    bool public swapByLimitOnly = false;\r\n    bool public launched = false;\r\n    bool public checkWalletLimit = true;\r\n    bool public snipeBlockExpired = false;\r\n\r\n    uint256 public launchBlock = 0;\r\n    uint256 public snipeBlockAmount = 0;\r\n\r\n    event SwapSettingsUpdated(bool swapEnabled_, uint256 swapThreshold_, bool swapByLimitOnly_);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event AccountWhitelisted(address account, bool feeExempt, bool walletLimitExempt, bool txLimitExempt);\r\n    event RouterVersionChanged(address newRouterAddress);\r\n    event TaxesChanged(uint256 newBuyTax, uint256 newSellTax);\r\n    event TaxDistributionChanged(uint256 newLpShare, uint256 newMarketingShare, uint256 newOperationsShare);\r\n    event MarketingWalletChanged(address marketingWalletAddress_);\r\n    event OperationsWalletChanged(address operationsWalletAddress_);\r\n    event AutoLiquidityReceiverChanged(address autoLiquidityReceiver_);\r\n    event EarlyBuyerUpdated(address account, bool isEarlyBuyer_);\r\n    event MarketPairUpdated(address account, bool isMarketPair_);\r\n    event WalletLimitChanged(uint256 walletMax_);\r\n    event MaxTxAmountChanged(uint256 maxTxAmount_);\r\n    event MaxWalletCheckChanged(bool checkWalletLimit_);\r\n\r\n    modifier lockTheSwap {\r\n        isInSwap = true;\r\n        _;\r\n        isInSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        \r\n        dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[address(marketingWalletAddress)] = true;\r\n        isExcludedFromFee[address(operationsWalletAddress)] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(marketingWalletAddress)] = true;\r\n        isTxLimitExempt[address(operationsWalletAddress)] = true;\r\n        isTxLimitExempt[address(autoLiquidityReceiver)] = true;\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(lpPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        isWalletLimitExempt[address(marketingWalletAddress)] = true;\r\n        isWalletLimitExempt[address(operationsWalletAddress)] = true;\r\n        isWalletLimitExempt[address(autoLiquidityReceiver)] = true;\r\n        \r\n        isMarketPair[address(lpPair)] = true;\r\n\r\n        allowances[address(this)][address(dexRouter)] = _totalSupply;\r\n        balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n     //to receive ETH from dexRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(deadAddress);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256) {\r\n        return allowances[owner_][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount) private {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n    \r\n    function updateRouter(address newRouterAddress) public onlyOwner returns(address newPairAddress) {\r\n        IDexRouter dexRouter_ = IDexRouter(newRouterAddress); \r\n        newPairAddress = IDexFactory(dexRouter_.factory()).getPair(address(this), dexRouter_.WETH());\r\n\r\n        if(newPairAddress == address(0)) { //Create If Doesnt exist\r\n            newPairAddress = IDexFactory(dexRouter_.factory()).\r\n                                createPair(address(this), dexRouter_.WETH());\r\n        }\r\n\r\n        lpPair = newPairAddress; //Set new pair address\r\n        dexRouter = dexRouter_; //Set new router address\r\n\r\n        isWalletLimitExempt[address(lpPair)] = true;\r\n        isMarketPair[address(lpPair)] = true;\r\n        emit RouterVersionChanged(newRouterAddress);\r\n    }\r\n\r\n    function launch(uint256 snipeBlockAmount_) public onlyOwner {\r\n        launched = true;\r\n        launchBlock = block.number;\r\n        snipeBlockAmount = snipeBlockAmount_;\r\n    }\r\n\r\n    function setLaunchStatus(bool launched_) public onlyOwner {\r\n        launched = launched_;\r\n    }\r\n\r\n    function setIsEarlyBuyer(address account, bool isEarlyBuyer_) public onlyOwner {\r\n        isEarlyBuyer[account] = isEarlyBuyer_;\r\n        emit EarlyBuyerUpdated(account, isEarlyBuyer_);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool isMarketPair_) public onlyOwner {\r\n        isMarketPair[account] = isMarketPair_;\r\n        emit MarketPairUpdated(account, isMarketPair_);\r\n    }\r\n    \r\n    function setTaxes(uint256 newBuyTax, uint256 newSellTax) external onlyOwner {\r\n        require(newBuyTax <= 300, \"Cannot exceed 30%\");\r\n        require(newSellTax <= 300, \"Cannot exceed 30%\");\r\n        buyTax = newBuyTax;\r\n        sellTax = newSellTax;\r\n        emit TaxesChanged(newBuyTax, newSellTax);\r\n    }\r\n\r\n    function setTaxDistribution(uint256 newLpShare, uint256 newMarketingShare, uint256 newOperationsShare) external onlyOwner {\r\n        lpShare = newLpShare;\r\n        marketingShare = newMarketingShare;\r\n        operationsShare = newOperationsShare;\r\n        emit TaxDistributionChanged(newLpShare, newMarketingShare, newOperationsShare);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount_) external onlyOwner {\r\n        maxTxAmount = maxTxAmount_;\r\n        emit MaxTxAmountChanged(maxTxAmount_);\r\n    }\r\n\r\n    function setWalletLimit(uint256 walletMax_) external onlyOwner {\r\n        walletMax  = walletMax_;\r\n        emit WalletLimitChanged(walletMax_);\r\n    }\r\n\r\n    function enableDisableWalletLimit(bool checkWalletLimit_) external onlyOwner {\r\n        checkWalletLimit = checkWalletLimit_;\r\n        emit MaxWalletCheckChanged(checkWalletLimit_);\r\n    }\r\n\r\n    function whitelistAccount(address account, bool feeExempt, bool walletLimitExempt, bool txLimitExempt) public onlyOwner {\r\n        isExcludedFromFee[account] = feeExempt;\r\n        isWalletLimitExempt[account] = walletLimitExempt;\r\n        isTxLimitExempt[account] = txLimitExempt;\r\n        emit AccountWhitelisted(account, feeExempt, walletLimitExempt, txLimitExempt);\r\n    }\r\n\r\n    function updateSwapSettings(bool swapEnabled_, uint256 swapThreshold_, bool swapByLimitOnly_) public onlyOwner {\r\n        swapEnabled = swapEnabled_;\r\n        swapThreshold = swapThreshold_;\r\n        swapByLimitOnly = swapByLimitOnly_;\r\n        emit SwapSettingsUpdated(swapEnabled_, swapThreshold_, swapByLimitOnly_);\r\n    }\r\n\r\n    function setMarketingWalletAddress(address marketingWalletAddress_) external onlyOwner {\r\n        require(marketingWalletAddress_ != address(0), \"New address cannot be zero address\");\r\n        marketingWalletAddress = payable(marketingWalletAddress_);\r\n        emit MarketingWalletChanged(marketingWalletAddress_);\r\n    }\r\n\r\n    function setOperationsWalletAddress(address operationsWalletAddress_) external onlyOwner {\r\n        require(operationsWalletAddress_ != address(0), \"New address cannot be zero address\");\r\n        operationsWalletAddress = payable(operationsWalletAddress_);\r\n        emit OperationsWalletChanged(operationsWalletAddress_);\r\n    }\r\n\r\n    function setAutoLiquidityReceiver(address autoLiquidityReceiver_) external onlyOwner {\r\n        require(autoLiquidityReceiver_ != address(0), \"New address cannot be zero address\");\r\n        autoLiquidityReceiver = payable(autoLiquidityReceiver_);\r\n        emit AutoLiquidityReceiverChanged(autoLiquidityReceiver_);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        bool success;\r\n        (success,) = address(recipient).call{value: amount}(\"\");\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        if(isInSwap) { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        } else {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n            require(!isEarlyBuyer[sender] && !isEarlyBuyer[recipient], \"To/from address is blacklisted!\");\r\n\r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n                require(launched, \"Not Launched.\");\r\n                if(isMarketPair[sender] || isMarketPair[recipient]) {\r\n                    require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n                }\r\n                if(!snipeBlockExpired) {\r\n                    checkIfBot(sender, recipient);\r\n                }\r\n            }\r\n\r\n            bool isTaxFree = ((!isMarketPair[sender] && !isMarketPair[recipient]) || \r\n                                isExcludedFromFee[sender] || isExcludedFromFee[recipient]);\r\n\r\n            if (!isTaxFree && !isMarketPair[sender] && swapEnabled && !isInSwap) \r\n            {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                bool overMinimumTokenBalance = contractTokenBalance >= swapThreshold;\r\n                if(overMinimumTokenBalance) {\r\n                    if(swapByLimitOnly)\r\n                        contractTokenBalance = swapThreshold;\r\n                    swapAndLiquify(contractTokenBalance);    \r\n                }\r\n            }\r\n\r\n            balances[sender] = balances[sender] - amount;\r\n\r\n            uint256 finalAmount = isTaxFree ? amount : takeFee(sender, recipient, amount);\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient])\r\n                require((balanceOf(recipient) + finalAmount) <= walletMax);\r\n\r\n            balances[recipient] = balances[recipient] + finalAmount;\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function checkIfBot(address sender, address recipient) private {\r\n        if((block.number - launchBlock) > snipeBlockAmount) {\r\n            snipeBlockExpired = true;\r\n        } else if(sender != owner() && recipient != owner()) {\r\n            if(!isMarketPair[sender] && sender != address(this)) {\r\n                isEarlyBuyer[sender] = true;\r\n            }\r\n            if(!isMarketPair[recipient] && recipient != address(this)) {\r\n                isEarlyBuyer[recipient] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balances[sender] = balances[sender] - amount;\r\n        balances[recipient] = balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        uint256 totalShares = lpShare + marketingShare + operationsShare;\r\n        uint256 tokensForLP = ((tAmount * lpShare) / totalShares) / 2;\r\n        uint256 tokensForSwap = tAmount - tokensForLP;\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n        \r\n        uint256 amountReceived = address(this).balance;\r\n\r\n        uint256 bnbShares = totalShares - (lpShare / 2);\r\n        \r\n        uint256 bnbForLiquidity = ((amountReceived * lpShare) / bnbShares) / 2;\r\n        uint256 bnbForOperations = (amountReceived * operationsShare) / bnbShares;\r\n        uint256 bnbForMarketing = amountReceived - bnbForLiquidity - bnbForOperations;\r\n\r\n        if(bnbForMarketing > 0) {\r\n            transferToAddressETH(marketingWalletAddress, bnbForMarketing);\r\n        }\r\n\r\n        if(bnbForOperations > 0) {\r\n            transferToAddressETH(operationsWalletAddress, bnbForOperations);\r\n        }\r\n\r\n        if(bnbForLiquidity > 0 && tokensForLP > 0) {\r\n            addLiquidity(tokensForLP, bnbForLiquidity);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            autoLiquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = (amount * buyTax) / 1000;   \r\n        address feeReceiver = address(this);\r\n\r\n        if(isEarlyBuyer[sender] || isEarlyBuyer[recipient]) {\r\n            feeAmount = (amount * 990) / 1000; \r\n            feeReceiver = operationsWalletAddress;\r\n        } else if(isMarketPair[recipient]) {\r\n            feeAmount = (amount * sellTax) / 1000;   \r\n        }\r\n        \r\n        if(feeAmount > 0) {\r\n            balances[feeReceiver] = balances[feeReceiver] + feeAmount;\r\n            emit Transfer(sender, feeReceiver, feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n    \r\n    function airdropToWallets(address[] memory wallets, uint256[] memory amountsInTokens) external onlyOwner {\r\n        require(wallets.length == amountsInTokens.length, \"arrays must be the same length\");\r\n        require(wallets.length < 600, \"Can only airdrop 600 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            _basicTransfer(msg.sender, wallets[i], amountsInTokens[i]);\r\n        }\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"AccountWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"autoLiquidityReceiver_\",\"type\":\"address\"}],\"name\":\"AutoLiquidityReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEarlyBuyer_\",\"type\":\"bool\"}],\"name\":\"EarlyBuyerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"MarketPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingWalletAddress_\",\"type\":\"address\"}],\"name\":\"MarketingWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"checkWalletLimit_\",\"type\":\"bool\"}],\"name\":\"MaxWalletCheckChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operationsWalletAddress_\",\"type\":\"address\"}],\"name\":\"OperationsWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"RouterVersionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"SwapSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLpShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOperationsShare\",\"type\":\"uint256\"}],\"name\":\"TaxDistributionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"walletMax_\",\"type\":\"uint256\"}],\"name\":\"WalletLimitChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInTokens\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"checkWalletLimit_\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEarlyBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snipeBlockAmount_\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidityReceiver_\",\"type\":\"address\"}],\"name\":\"setAutoLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEarlyBuyer_\",\"type\":\"bool\"}],\"name\":\"setIsEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"launched_\",\"type\":\"bool\"}],\"name\":\"setLaunchStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMarketPair_\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWalletAddress_\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operationsWalletAddress_\",\"type\":\"address\"}],\"name\":\"setOperationsWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newOperationsShare\",\"type\":\"uint256\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletMax_\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeBlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeBlockExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly_\",\"type\":\"bool\"}],\"name\":\"updateSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"feeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"walletLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"txLimitExempt\",\"type\":\"bool\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dripto", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2751e568f8dbf868784b35efa779c03d27abd83f500c2f10ee6d9aafeb49a58c"}]}