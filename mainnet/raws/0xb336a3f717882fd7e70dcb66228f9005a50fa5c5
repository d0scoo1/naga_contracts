{"status": "1", "message": "OK", "result": [{"SourceCode": "// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IRoboShort.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\ninterface IRoboShort {\r\n    function rawOwnerOf(uint256 tokenId) external view returns (address owner);\r\n    function isMintedBeforeSale(uint256 tokenId) external view returns (bool);\r\n    function tokenName(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IRoboStoreShort.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\ninterface IRoboStoreShort {\r\n    function getIpfsHashHex(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (bytes memory);\r\n\r\n    function getIpfsHash(uint256 tokenId) external view returns (string memory);\r\n\r\n    function getTraitBytes(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (bytes memory);\r\n}\r\n\r\n\r\n// Root file: contracts/RoborovskiTraits.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"contracts/interfaces/IRoboShort.sol\";\r\n// import \"contracts/interfaces/IRoboStoreShort.sol\";\r\n\r\ncontract RoborovskiTraits is Ownable {\r\n    address public immutable ROBO;\r\n    address public immutable STORE;\r\n\r\n    struct Temp {\r\n        uint256 tokenId;\r\n        string ipfsHash;\r\n        bytes traitBytes;\r\n        string name;\r\n    }\r\n\r\n    string[] public traitTypes = [\r\n        \"Surname\",\r\n        \"Background\",\r\n        \"Base\",\r\n        \"Body\",\r\n        \"Clothes\",\r\n        \"Head\",\r\n        \"Eyes\",\r\n        \"Mouth\",\r\n        \"Head Gear\",\r\n        \"Back Weapon\",\r\n        \"Right Hand Weapon\",\r\n        \"Left Hand Weapon\",\r\n        \"Glove & Weapon\"\r\n    ];\r\n\r\n    mapping(uint256 => mapping(uint256 => string)) public traitData;\r\n    mapping(uint256 => uint256) public traitCount;\r\n\r\n    string public imagePrefix = \"https://ipfs.roborovski.org/ipfs/\";\r\n    bool public useTokenId = true;\r\n\r\n    string private constant _ALPHABET =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    constructor(address robo, address store) {\r\n        ROBO = robo;\r\n        STORE = store;\r\n    }\r\n\r\n    function setImagePrefix(string memory imagePrefix_) public onlyOwner {\r\n        imagePrefix = imagePrefix_;\r\n    }\r\n\r\n    function setUseTokenId(bool useTokenId_) public onlyOwner {\r\n        useTokenId = useTokenId_;\r\n    }\r\n\r\n    function setTraitData(\r\n        uint256 traitId,\r\n        uint256 startAt,\r\n        string[] memory data\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            traitData[traitId][startAt + i] = data[i];\r\n        }\r\n    }\r\n\r\n    function setTraitCount(uint256[] memory traitIds, uint256[] memory counts)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < traitIds.length; i++) {\r\n            traitCount[traitIds[i]] = counts[i];\r\n        }\r\n    }\r\n\r\n    /***RENDER */\r\n    function contractURI() external view returns (string memory) {\r\n        string memory metadata = string(\r\n            abi.encodePacked(\r\n                '{\"name\": \"Roborovski NFT Collection by SYA Concept\",\"description\": \"An NFT project initiated by Hollywood-class enterprise SYA Concept & Caravan studio. Based on the character created by Dev Patel and Tilda Cobham-Hervey.\",\"image\": \"',\r\n                imagePrefix,\r\n                'QmWG8P7koQoujLc3zn7zZR6HKarinpDtoKx5oaqjtu7fYi\",\"external_url\": \"https://roborovski.org/\",\"seller_fee_basis_points\": 750,\"fee_recipient\": \"0x5AF3F92c0725D54565014b5EA0d5f15A685d1a2a\"}'\r\n            )\r\n        );\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    _base64(bytes(metadata))\r\n                )\r\n            );\r\n    }\r\n\r\n    function _makeTemp(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (Temp memory _temp)\r\n    {\r\n        _temp.tokenId = tokenId;\r\n        _temp.ipfsHash = IRoboStoreShort(STORE).getIpfsHash(tokenId);\r\n        _temp.traitBytes = IRoboStoreShort(STORE).getTraitBytes(tokenId);\r\n        _temp.name = IRoboShort(ROBO).tokenName(tokenId);\r\n    }\r\n\r\n    function _byteToUint8(bytes1 bits) private pure returns (uint8 traitId) {\r\n        traitId = uint8(bits);\r\n    }\r\n\r\n    function _compileAttributes(Temp memory _temp)\r\n        private\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory traits_1;\r\n        traits_1 = string(\r\n            abi.encodePacked(\r\n                _attributeForTypeAndValue(\"Name\", _temp.name),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[0],\r\n                    traitData[0][_byteToUint8(_temp.traitBytes[0])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[1],\r\n                    traitData[1][_byteToUint8(_temp.traitBytes[1])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[2],\r\n                    traitData[2][_byteToUint8(_temp.traitBytes[2])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[3],\r\n                    traitData[3][_byteToUint8(_temp.traitBytes[3])]\r\n                )\r\n            )\r\n        );\r\n\r\n        string memory traits_2;\r\n        traits_2 = string(\r\n            abi.encodePacked(\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[5],\r\n                    traitData[5][_byteToUint8(_temp.traitBytes[5])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[6],\r\n                    traitData[6][_byteToUint8(_temp.traitBytes[6])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[7],\r\n                    traitData[7][_byteToUint8(_temp.traitBytes[7])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[10],\r\n                    traitData[10][_byteToUint8(_temp.traitBytes[10])]\r\n                ),\r\n                \",\",\r\n                _attributeForTypeAndValue(\r\n                    traitTypes[11],\r\n                    traitData[11][_byteToUint8(_temp.traitBytes[11])]\r\n                )\r\n            )\r\n        );\r\n\r\n        string memory traits4 = \"\";\r\n        uint8 traits4Id = _byteToUint8(_temp.traitBytes[4]);\r\n        if (traits4Id != 0) {\r\n            traits4 = string(\r\n                abi.encodePacked(\r\n                    \",\",\r\n                    _attributeForTypeAndValue(\r\n                        traitTypes[4],\r\n                        traitData[4][traits4Id]\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        string memory traits8 = \"\";\r\n        uint8 traits8Id = _byteToUint8(_temp.traitBytes[8]);\r\n        if (traits8Id != 0) {\r\n            traits8 = string(\r\n                abi.encodePacked(\r\n                    \",\",\r\n                    _attributeForTypeAndValue(\r\n                        traitTypes[8],\r\n                        traitData[8][traits8Id]\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        string memory traits9 = \"\";\r\n        uint8 traits9Id = _byteToUint8(_temp.traitBytes[9]);\r\n        if (traits9Id != 0) {\r\n            traits9 = string(\r\n                abi.encodePacked(\r\n                    \",\",\r\n                    _attributeForTypeAndValue(\r\n                        traitTypes[9],\r\n                        traitData[9][traits9Id]\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        string memory traits12 = \"\";\r\n        uint8 traits12Id = _byteToUint8(_temp.traitBytes[12]);\r\n        if (traits12Id != 0) {\r\n            traits12 = string(\r\n                abi.encodePacked(\r\n                    \",\",\r\n                    _attributeForTypeAndValue(\r\n                        traitTypes[12],\r\n                        traitData[12][traits12Id]\r\n                    )\r\n                )\r\n            );\r\n        }\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"[\",\r\n                    traits_1,\r\n                    traits_2,\r\n                    traits4,\r\n                    traits8,\r\n                    traits9,\r\n                    traits12,\r\n                    \"]\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function _compileMetadata(Temp memory _temp)\r\n        private\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        string memory attributes = _compileAttributes(_temp);\r\n\r\n        return\r\n            abi.encodePacked(\r\n                '{\"name\": \"',\r\n                _temp.name,\r\n                \" \",\r\n                traitData[0][_byteToUint8(_temp.traitBytes[0])],\r\n                useTokenId ? \" #\" : \"\",\r\n                useTokenId ? _toString(_temp.tokenId) : \"\",\r\n                '\",\"description\": \"An NFT project initiated by Hollywood-class enterprise SYA Concept & Caravan studio. Based on the character created by Dev Patel and Tilda Cobham-Hervey.\",\"image\": \"',\r\n                imagePrefix,\r\n                _temp.ipfsHash,\r\n                '\",\"external_url\": \"https://roborovski.org/#/details/',\r\n                _toString(_temp.tokenId),\r\n                '\",\"attributes\": ',\r\n                attributes,\r\n                \"}\"\r\n            );\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    _base64(_compileMetadata(_makeTemp(tokenId)))\r\n                )\r\n            );\r\n    }\r\n\r\n    function _attributeForTypeAndValue(\r\n        string memory traitType,\r\n        string memory value\r\n    ) internal pure returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '{\"trait_type\":\"',\r\n                    traitType,\r\n                    '\",\"value\":\"',\r\n                    value,\r\n                    '\"}'\r\n                )\r\n            );\r\n    }\r\n\r\n    function _base64(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = _ALPHABET;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n\r\n                // read 3 bytes\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function _toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"robo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROBO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imagePrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imagePrefix_\",\"type\":\"string\"}],\"name\":\"setImagePrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"traitIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"}],\"name\":\"setTraitCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"}],\"name\":\"setTraitData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useTokenId_\",\"type\":\"bool\"}],\"name\":\"setUseTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RoborovskiTraits", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ceb477a068350bc652cabff127f87ad874b11f9000000000000000000000000fe804587844528e46e6794b5e1494af7364690b1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://419ba5eb33d131cafce42cbb8989015ae5f3fdc1fc92cfbb115b4f3573dcdfcc"}]}