{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\r\\n     * given ``owner``\\u0027s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"},\"Fees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Fees is Ownable {\\r\\n\\r\\n    address public feeAddress; // deafult Owner account.\\r\\n    uint256 internal withdrawFeePeriod; // default 3 months.\\r\\n    uint256 internal withdrawPenaltyPeriod; // default 14 days.\\r\\n    uint256 internal withdrawFee; // default 7%.\\r\\n\\r\\n    error ExitFeesFailed();\\r\\n\\r\\n    event ExitWithFees(address indexed user, uint256 amount, uint256 fees);\\r\\n\\r\\n    /// @notice Internal function to calculate the early withdraw fees.\\r\\n    /// @notice return feeAmount and withdrawAmount.\\r\\n    function _calculateFee(uint256 _amount) \\r\\n        internal \\r\\n        view \\r\\n        returns (\\r\\n            uint256 feeAmount, \\r\\n            uint256 withdrawAmount\\r\\n        ) \\r\\n    {\\r\\n        feeAmount = _amount * withdrawFee / 10000;\\r\\n        withdrawAmount = _amount - feeAmount; \\r\\n    }\\r\\n\\r\\n    /// @notice Admin function to set a new fee address.\\r\\n    function setFeeAddress(address _newFeeAddress) external onlyOwner {\\r\\n        feeAddress = _newFeeAddress;\\r\\n    }\\r\\n    /// @notice Admin function to set a new withdraw fee.\\r\\n    /// @notice example: 50 = 0.5%, 100 = 1%, 200 = 2%, 1000 = 10%.\\r\\n    function setWithdrawFee(uint256 _newWithdrawFee) external onlyOwner {\\r\\n        withdrawFee = _newWithdrawFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Function returns the current withdraw fee.\\r\\n    function getWithdrawFee() external view returns (uint256){\\r\\n        return withdrawFee;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./draft-IERC20Permit.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"ScreamStaking.sol\":{\"content\":\"/**\\r\\nAAAAHHHH! Welcome to..... \\r\\n\\r\\nSCREAM (AAHHHH)|ERC-20 \\r\\n\\r\\n\u201cMovies Don\u2019t Create Psychos. Movies Make Psychos More Creative!\u201d \ud83d\udd2a\\r\\n\\r\\n\ud83d\udd2a Twitter: https://twitter.com/SCREAM_ETH\\r\\n\\r\\n\ud83d\udd2a Website: https://screameth.com\\r\\n\\r\\n\ud83d\udd2a Telegram: https://t.me/ScreamOfficialPortal\\r\\n*/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Fees.sol\\\";\\r\\n \\r\\ncontract ScreamStaking is Context, Ownable, Fees {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice enum Status contains multiple status.\\r\\n    enum Status { Collecting, Staking, Completed }\\r\\n\\r\\n    struct VaultInfo {\\r\\n        Status status; // vault status\\r\\n        uint256 stakingPeriod; // the timestamp length of staking vault.\\r\\n        uint256 startTimestamp;  // block.number when the vault start accouring rewards.\\r\\n        uint256 stopTimestamp; // the block.number to end the staking vault.\\r\\n        uint256 totalVaultShares; // total tokens deposited into Vault.\\r\\n        uint256 totalVaultRewards; // amount of tokens to reward this vault.\\r\\n    }\\r\\n\\r\\n    struct RewardInfo {\\r\\n        uint256 lastRewardUpdateTimeStamp;\\r\\n        uint256 rewardRate; // rewardRate is totalVaultRewards / stakingPeriod.\\r\\n        uint256 pendingVaultRewards;\\r\\n        uint256 claimedVaultRewards; // claimed rewards for the vault.\\r\\n        uint256 remainingVaultRewards; // remaining rewards for this vault.        \\r\\n    }\\r\\n    \\r\\n    IERC20 public token;\\r\\n    VaultInfo public vault;\\r\\n    RewardInfo private _reward;\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    error NotAuthorized();\\r\\n    error NoZeroValues();\\r\\n    error MaxStaked();\\r\\n    error AddRewardsFailed();\\r\\n    error DepositFailed();\\r\\n    error RewardFailed();\\r\\n    error WithdrawFailed();\\r\\n    error NotCollecting();  \\r\\n    error NotStaking();\\r\\n    error NotCompleted();\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 rewards);\\r\\n    event StakingStarted();\\r\\n    event StakingCompleted();\\r\\n\\r\\n    /// @notice modifier checks that a user is staking.\\r\\n    /// @param account The account address to check.\\r\\n    modifier isStakeholder(address account) {\\r\\n        if (_balances[account] == 0) revert NotAuthorized();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier checks that contract is in status Collecting.\\r\\n    modifier isCollecting() {\\r\\n        if (vault.status != Status.Collecting) revert NotCollecting();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier checks that contract has status Staking.\\r\\n    modifier isStaking() {\\r\\n        if (vault.status != Status.Staking) revert NotStaking();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier checks that contract has status Completed.\\r\\n    modifier isCompleted() {\\r\\n        if (vault.status != Status.Completed) revert NotCompleted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier checks for zero values.\\r\\n    /// @param amount The user amount to deposit in Wei.\\r\\n    modifier noZeroValues(uint256 amount) {\\r\\n        if (_msgSender() == address(0) || amount \\u003c= 0) revert NoZeroValues();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier sets a max limit to 1 million tokens staked per user.\\r\\n    modifier limiter(uint256 amount) {\\r\\n        uint256 balance = _balances[_msgSender()];\\r\\n        uint256 totalBalance = balance + amount;\\r\\n        if (totalBalance \\u003e= 1000000000000000000000000) revert MaxStaked();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice modifier updates the vault reward stats.\\r\\n    modifier updateVaultRewards() {\\r\\n        require(_reward.remainingVaultRewards \\u003e 0);\\r\\n        \\r\\n        uint256 _currentValue = _reward.rewardRate * (block.timestamp - _reward.lastRewardUpdateTimeStamp);\\r\\n        _reward.pendingVaultRewards += _currentValue;\\r\\n        _reward.remainingVaultRewards -= _currentValue;\\r\\n        _reward.lastRewardUpdateTimeStamp = block.timestamp;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Constructor for TicketVault, staking contract.\\r\\n    /// @param Token The token used for staking.\\r\\n    constructor(\\r\\n        address Token\\r\\n    ) {\\r\\n        token = IERC20(Token);\\r\\n        feeAddress = _msgSender();\\r\\n        vault.stakingPeriod = 4 weeks; // 1 month staking period.\\r\\n        withdrawFeePeriod = vault.stakingPeriod; // 1 month fee period.\\r\\n        withdrawPenaltyPeriod = 2 weeks; // 2 weeks penalty period.\\r\\n        withdrawFee = 700; // 7% withdraw fee.\\r\\n        vault.status = Status.Collecting; \\r\\n    }   \\r\\n\\r\\n    /// @notice receive function reverts and returns the funds to the sender.\\r\\n    receive() external payable {\\r\\n        revert(\\\"not payable receive\\\");\\r\\n    }\\r\\n\\r\\n/// ------------------------------- PUBLIC METHODS -------------------------------\\r\\n\\r\\n    /// Method to get the users erc20 balance.\\r\\n    /// @param account The account of the user to check.\\r\\n    /// @return user erc20 balance.\\r\\n    function getAccountErc20Balance(address account) external view returns (uint256) {\\r\\n        return token.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    /// Method to get the users vault balance.\\r\\n    /// @param account The account of the user to check.\\r\\n    /// @return user balance staked in vault.\\r\\n    function getAccountVaultBalance(address account) external view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /// Method to get the vaults RewardInfo.\\r\\n    function getRewardInfo() external view returns (\\r\\n        uint256 lastRewardUpdateTimeStamp,\\r\\n        uint256 rewardRate, \\r\\n        uint256 pendingVaultRewards,\\r\\n        uint256 claimedVaultRewards, \\r\\n        uint256 remainingVaultRewards\\r\\n    ) {\\r\\n        return (\\r\\n            _reward.lastRewardUpdateTimeStamp,\\r\\n            _reward.rewardRate,\\r\\n            _reward.pendingVaultRewards,\\r\\n            _reward.claimedVaultRewards,\\r\\n            _reward.remainingVaultRewards);\\r\\n    }\\r\\n\\r\\n    /// @notice Method to let a user deposit funds into the vault.\\r\\n    /// @param amount The amount to be staked.\\r\\n    function deposit(uint256 amount) external isCollecting limiter(amount) noZeroValues(amount) {\\r\\n        _balances[_msgSender()] += amount;\\r\\n        vault.totalVaultShares += amount;\\r\\n        if (!_deposit(_msgSender(), amount)) revert DepositFailed();\\r\\n        emit Deposit(_msgSender(), amount);\\r\\n    }\\r\\n    \\r\\n    /// @notice Lets a user exit their position while status is Collecting. \\r\\n    /// @notice ATT. The user is subject to an 7% early withdraw fee.\\r\\n    /// @dev Can only be executed while status is Collecting.\\r\\n    function exitWhileCollecting() external isStakeholder(_msgSender()) isCollecting {\\r\\n        require(_msgSender() != address(0), \\\"Not zero address\\\");\\r\\n\\r\\n        uint256 _totalUserShares = _balances[_msgSender()];\\r\\n        delete _balances[_msgSender()];\\r\\n\\r\\n        (uint256 _feeAmount, uint256 _withdrawAmount) = super._calculateFee(_totalUserShares);\\r\\n        vault.totalVaultShares -= _totalUserShares;\\r\\n        \\r\\n        // Pay 7% withdrawFee before withdraw.\\r\\n        if (!_withdraw(address(feeAddress), _feeAmount)) revert ExitFeesFailed();\\r\\n        if (!_withdraw(address(_msgSender()), _withdrawAmount)) revert WithdrawFailed();\\r\\n        \\r\\n        emit ExitWithFees(_msgSender(), _withdrawAmount, _feeAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Lets a user exit their position while staking. \\r\\n    /// @notice ATT. The user is subject to an 7% early withdraw fee.\\r\\n    /// @dev Can only be executed while status is Staking.\\r\\n    function exitWhileStaking() external isStakeholder(_msgSender()) isStaking updateVaultRewards {\\r\\n        require(_msgSender() != address(0), \\\"Not zero address\\\");\\r\\n\\r\\n        uint256 _totalUserShares = _balances[_msgSender()];\\r\\n        delete _balances[_msgSender()];\\r\\n\\r\\n        (uint256 _feeAmount, uint256 _withdrawAmount) = super._calculateFee(_totalUserShares);\\r\\n\\r\\n        // if withdrawPenaltyPeriod is over, calculate user rewards.\\r\\n        if (block.timestamp \\u003e= (vault.startTimestamp + withdrawPenaltyPeriod)) {\\r\\n            uint256 _pendingUserReward = _calculateUserReward(_totalUserShares);\\r\\n            _withdrawAmount += _pendingUserReward;\\r\\n\\r\\n            _reward.pendingVaultRewards -= _pendingUserReward;\\r\\n            _reward.remainingVaultRewards -= _pendingUserReward;\\r\\n            _reward.claimedVaultRewards += _pendingUserReward;\\r\\n        }\\r\\n        vault.totalVaultShares -= _totalUserShares;\\r\\n\\r\\n        // Pay 7% in withdrawFee before the withdraw is transacted.\\r\\n        if (!_withdraw(address(feeAddress), _feeAmount)) revert ExitFeesFailed();\\r\\n        if (!_withdraw(address(_msgSender()), _withdrawAmount)) revert WithdrawFailed();\\r\\n\\r\\n        emit ExitWithFees(_msgSender(), _withdrawAmount, _feeAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Let the user remove their stake and receive the accumulated rewards, without paying extra fees.\\r\\n    function withdraw() external isStakeholder(_msgSender()) isCompleted {\\r\\n        require(_msgSender() != address(0), \\\"Not zero adress\\\");\\r\\n        \\r\\n        uint256 _totalUserShares =  _balances[_msgSender()];\\r\\n        delete _balances[_msgSender()];\\r\\n    \\r\\n        uint256 _pendingUserReward = _calculateUserReward(_totalUserShares);\\r\\n        \\r\\n        if (!_withdraw(_msgSender(), _pendingUserReward)) revert RewardFailed();\\r\\n        if (!_withdraw(_msgSender(), _totalUserShares)) revert WithdrawFailed();\\r\\n        \\r\\n        _reward.pendingVaultRewards -= _pendingUserReward;\\r\\n        _reward.claimedVaultRewards += _pendingUserReward;\\r\\n        vault.totalVaultShares -= _totalUserShares;\\r\\n\\r\\n        emit Withdraw(_msgSender(), _totalUserShares, _pendingUserReward);\\r\\n    }\\r\\n\\r\\n/// ------------------------------- ADMIN METHODS -------------------------------\\r\\n\\r\\n    /// @notice Add reward amount to the vault.\\r\\n    /// @param amount The amount to deposit in Wei.\\r\\n    /// @dev Restricted to onlyOwner.  \\r\\n    function addRewards(uint256 amount) external onlyOwner {\\r\\n        if (!_deposit(_msgSender(), amount)) revert AddRewardsFailed();\\r\\n        \\r\\n        vault.totalVaultRewards += amount;\\r\\n        _reward.rewardRate = (vault.totalVaultRewards / vault.stakingPeriod);\\r\\n        _reward.remainingVaultRewards += amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the contract status to Staking.\\r\\n    function startStaking() external isCollecting onlyOwner {\\r\\n        vault.status = Status.Staking;\\r\\n        vault.startTimestamp = block.timestamp;\\r\\n        vault.stopTimestamp = vault.startTimestamp + vault.stakingPeriod;\\r\\n        _reward.lastRewardUpdateTimeStamp = vault.startTimestamp;\\r\\n\\r\\n        emit StakingStarted();\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the contract status to Completed.\\r\\n    /// @dev modifier updateVaultRewards is called before status is set to Completed.\\r\\n    function stopStaking() external isStaking onlyOwner {\\r\\n        vault.status = Status.Completed;\\r\\n        _reward.pendingVaultRewards += _reward.remainingVaultRewards;\\r\\n        _reward.remainingVaultRewards = 0;\\r\\n        emit StakingCompleted();\\r\\n    }\\r\\n    \\r\\n/// ------------------------------- PRIVATE METHODS -------------------------------\\r\\n\\r\\n    /// @notice Internal function to deposit funds to vault.\\r\\n    /// @param _from The from address that deposits the funds.\\r\\n    /// @param _amount The amount to be deposited in Wei.\\r\\n    /// @return true if valid.\\r\\n    function _deposit(address _from, uint256 _amount) private returns (bool) {\\r\\n        token.safeTransferFrom(_from, address(this), _amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    /// @notice Internal function to withdraw funds from the vault.\\r\\n    /// @param _to The address that receives the withdrawn funds.\\r\\n    /// @param _amount The amount to be withdrawn.\\r\\n    /// @return true if valid.\\r\\n    function _withdraw(address _to, uint256 _amount) private returns (bool){\\r\\n        token.safeTransfer(_to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to calculate the pending user rewards.\\r\\n    /// @param _totalUserShares The total amount deposited to vault by user.\\r\\n    /// @return pending user reward amount.\\r\\n    function _calculateUserReward(uint256 _totalUserShares) private view returns (uint256) {\\r\\n        require(_reward.pendingVaultRewards \\u003e 0, \\\"No pending rewards\\\");\\r\\n        \\r\\n        uint256 _userPercentOfVault = _totalUserShares * 100 / vault.totalVaultShares;\\r\\n        uint256 _pendingUserReward = _reward.pendingVaultRewards * _userPercentOfVault / 100;\\r\\n\\r\\n        return _pendingUserReward;\\r\\n    }\\r\\n\\r\\n    function clearStuckBNBBalance(address addr) external onlyOwner{\\r\\n        (bool sent,) =payable(addr).call{value: (address(this).balance)}(\\\"\\\");\\r\\n        require(sent);\\r\\n    }\\r\\n\\r\\n    function clearStuckTokenBalance(address addr, address tokenAddress) external onlyOwner{\\r\\n        uint256 _bal = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        IERC20(tokenAddress).safeTransfer(addr, _bal);\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddRewardsFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExitFeesFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollecting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"ExitWithFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"clearStuckBNBBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"clearStuckTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitWhileCollecting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitWhileStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountErc20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardUpdateTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingVaultRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedVaultRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"enum ScreamStaking.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVaultShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ScreamStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ee0c71b5f3c68208cc005e6f513cfc6628536ce9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3bbf0a910a1d69ed800f7837c941795b308e81b8fc30574a31878e00464ef163"}]}