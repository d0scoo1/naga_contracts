{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/interfaces/ICErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface ICErc20 {\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 tokenAmount) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/external/interfaces/compound/Comptroller/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IComptroller {\\n    function _become(address unitroller) external;\\n\\n    function _borrowGuardianPaused() external view returns (bool);\\n\\n    function _grantComp(address recipient, uint256 amount) external;\\n\\n    function _mintGuardianPaused() external view returns (bool);\\n\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n    function _setBorrowPaused(address cToken, bool state) external returns (bool);\\n\\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n    function _setCollateralFactor(address cToken, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n    function _setCompSpeeds(\\n        address[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) external;\\n\\n    function _setContributorCompSpeed(address contributor, uint256 compSpeed) external;\\n\\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n    function _setMarketBorrowCaps(address[] memory cTokens, uint256[] memory newBorrowCaps) external;\\n\\n    function _setMintPaused(address cToken, bool state) external returns (bool);\\n\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n\\n    function _setSeizePaused(bool state) external returns (bool);\\n\\n    function _setTransferPaused(bool state) external returns (bool);\\n\\n    function _supportMarket(address cToken) external returns (uint256);\\n\\n    function accountAssets(address, uint256) external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function allMarkets(uint256) external view returns (address);\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowCapGuardian() external view returns (address);\\n\\n    function borrowCaps(address) external view returns (uint256);\\n\\n    function borrowGuardianPaused(address) external view returns (bool);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function checkMembership(address account, address cToken) external view returns (bool);\\n\\n    function claimComp(address holder, address[] memory cTokens) external;\\n\\n    function claimComp(\\n        address[] memory holders,\\n        address[] memory cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    function claimComp(address holder) external;\\n\\n    function closeFactorMantissa() external view returns (uint256);\\n\\n    function compAccrued(address) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address) external view returns (uint256);\\n\\n    function compBorrowState(address) external view returns (uint224 index, uint32 block);\\n\\n    function compBorrowerIndex(address, address) external view returns (uint256);\\n\\n    function compContributorSpeeds(address) external view returns (uint256);\\n\\n    function compInitialIndex() external view returns (uint224);\\n\\n    function compRate() external view returns (uint256);\\n\\n    function compReceivable(address) external view returns (uint256);\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compSupplierIndex(address, address) external view returns (uint256);\\n\\n    function compSupplySpeeds(address) external view returns (uint256);\\n\\n    function compSupplyState(address) external view returns (uint224 index, uint32 block);\\n\\n    function comptrollerImplementation() external view returns (address);\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cTokenAddress) external returns (uint256);\\n\\n    function fixBadAccruals(address[] memory affectedUsers, uint256[] memory amounts) external;\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function isComptroller() external view returns (bool);\\n\\n    function isDeprecated(address cToken) external view returns (bool);\\n\\n    function lastContributorBlock(address) external view returns (uint256);\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function markets(address)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isComped\\n        );\\n\\n    function maxAssets() external view returns (uint256);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintGuardianPaused(address) external view returns (bool);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 actualMintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function oracle() external view returns (address);\\n\\n    function pauseGuardian() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function pendingComptrollerImplementation() external view returns (address);\\n\\n    function proposal65FixExecuted() external view returns (bool);\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 actualRepayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeGuardianPaused() external view returns (bool);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferGuardianPaused() external view returns (bool);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function updateContributorRewards(address contributor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICompoundStrategyContractHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"../external/interfaces/ICErc20.sol\\\";\\n\\npragma solidity 0.8.11;\\n\\ninterface ICompoundStrategyContractHelper {\\n    function claimRewards(bool executeClaim) external returns(uint256);\\n\\n    function deposit(uint256 amount) external returns(uint256);\\n\\n    function withdraw(uint256 cTokenWithdraw) external returns(uint256);\\n\\n    function withdrawAll(uint256[] calldata data) external returns (uint256);\\n\\n    function cToken() external returns (ICErc20);\\n}\"\r\n    },\r\n    \"contracts/strategies/compound/CompoundContractHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../../interfaces/ICompoundStrategyContractHelper.sol\\\";\\n\\nimport \\\"../../external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../external/interfaces/ICErc20.sol\\\";\\nimport \\\"../../external/interfaces/compound/Comptroller/IComptroller.sol\\\";\\n\\n/**\\n * @notice This contract serves as a Compound strategy helper.\\n * @dev\\n *\\n * This is done as any address can claim COMP tokens for another address.\\n * Having a separate contract for each Compound strategy\\n * gves us a way to collect the COMP token rewards belonging\\n * to this particular Spool strategy.\\n * There should be one helper contract per Compound strategy.\\n *\\n * It can only be called by the Spool contract.\\n * It should be only be used by CompoundStrategy.\\n */\\ncontract CompoundContractHelper is ICompoundStrategyContractHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public immutable comp;\\n    ICErc20 public immutable override cToken;\\n    IERC20 public immutable underlying;\\n    IComptroller public immutable comptroller;\\n    address public immutable spool;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        IERC20 _comp,\\n        ICErc20 _cToken,\\n        IComptroller _comptroller,\\n        IERC20 _underlying,\\n        address _spool\\n    ) {\\n        require(address(_comp) != address(0), \\\"CompoundContractHelper::constructor: COMP Token address cannot be 0\\\");\\n        require(address(_cToken) != address(0), \\\"CompoundContractHelper::constructor: Token address cannot be 0\\\");\\n        require(\\n            address(_comptroller) != address(0),\\n            \\\"CompoundContractHelper::constructor: Comptroller address cannot be 0\\\"\\n        );\\n        require(\\n            address(_underlying) == _cToken.underlying(),\\n            \\\"CompoundContractHelper::constructor: Underlying and cToken underlying do not match\\\"\\n        );\\n        require(_spool != address(0), \\\"CompoundContractHelper::constructor: Spool address cannot be 0\\\");\\n\\n        comp = _comp;\\n        cToken = _cToken;\\n        underlying = _underlying;\\n        comptroller = _comptroller;\\n        spool = _spool;\\n\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(cToken);\\n        uint256[] memory results = comptroller.enterMarkets(markets);\\n\\n        require(results[0] == 0, \\\"CompoundContractHelper::constructor: Compound Enter Failed\\\");\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Claim COMP rewards from Comptroller\\n     * @dev\\n     * Rewards are sent back to the Spool contract\\n     *\\n     * @param executeClaim Do execute the claim\\n     * @return rewards Amount of COMP tokens claimed\\n     */\\n    function claimRewards(bool executeClaim) external override onlySpool returns (uint256 rewards) {\\n        if (executeClaim) {\\n            address[] memory markets = new address[](1);\\n            markets[0] = address(cToken);\\n            comptroller.claimComp(address(this), markets);\\n        }\\n\\n        rewards = comp.balanceOf(address(this));\\n\\n        IERC20(comp).safeTransfer(msg.sender, rewards);\\n    }\\n\\n    /**\\n     * @notice Deposit to Compound market\\n     * @dev\\n     * The Spool should send `underlying` token in size of `amount`\\n     * before calling this contract.\\n     * The contract deposits the received underlying and returns the\\n     * newly received cToken amount.\\n     *\\n     * @param amount Amount of underlying to deposit\\n     * @return cTokenBalanceNew Gained cToken amount from depositing\\n     */\\n    function deposit(uint256 amount) external override onlySpool returns (uint256) {\\n        underlying.safeApprove(address(cToken), amount);\\n\\n        uint256 cTokenBalancebefore = cToken.balanceOf(address(this));\\n        require(cToken.mint(amount) == 0, \\\"CompoundContractHelper::deposit: Compound Minting Error\\\");\\n        uint256 cTokenBalanceNew = cToken.balanceOf(address(this)) - cTokenBalancebefore;\\n        _resetAllowance(underlying, address(cToken));\\n\\n        return cTokenBalanceNew;\\n    }\\n\\n    /**\\n     * @notice Withdraw from Compound market\\n     * @dev\\n     * The the withdrawn underlying amount is then send back to the Spool.\\n     *\\n     * @param cTokenWithdraw Amount of tokens to withdraw\\n     * @return undelyingWithdrawn Gained underlying amount from withdrawing\\n     */\\n    function withdraw(uint256 cTokenWithdraw) external override onlySpool returns (uint256) {\\n        require(cToken.redeem(cTokenWithdraw) == 0, \\\"CompoundContractHelper::withdraw: Redemption Error\\\");\\n        uint256 undelyingWithdrawn = underlying.balanceOf(address(this));\\n\\n        // transfer withdrawn back to spool\\n        underlying.safeTransfer(msg.sender, undelyingWithdrawn);\\n\\n        return undelyingWithdrawn;\\n    }\\n\\n    function withdrawAll(uint256[] calldata data) external override onlySpool returns (uint256) {\\n        uint256 redemResult = cToken.redeem(cToken.balanceOf(address(this)));\\n\\n        // if slippage length is 0 do not verify the error code\\n        require(\\n            redemResult == 0 || data.length == 0 || data[0] == 0,\\n            \\\"CompoundStrategy::withdrawAll: Redemption Error\\\"\\n        );\\n\\n        uint256 undelyingWithdrawn = underlying.balanceOf(address(this));\\n\\n        // transfer withdrawn back to spool\\n        underlying.safeTransfer(msg.sender, undelyingWithdrawn);\\n\\n        return undelyingWithdrawn;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Reset allowance to zero if previously set to a higher value.\\n     */\\n    function _resetAllowance(IERC20 token, address spender) internal {\\n        if (token.allowance(address(this), spender) > 0) {\\n            token.safeApprove(spender, 0);\\n        }\\n    }\\n\\n    function _onlySpool() private view {\\n        require(msg.sender == spool, \\\"CompoundStrategy::_onlySpool: Caller is not the Spool contract\\\");\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlySpool() {\\n        _onlySpool();\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_comp\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"contract IComptroller\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"executeClaim\",\"type\":\"bool\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cTokenWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompoundContractHelper", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000c00e94cb662c3520282e6f5717214004a7f268880000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e36430000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000534ef1c63cc191076ea8252f25bbd29d9db6e635", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}