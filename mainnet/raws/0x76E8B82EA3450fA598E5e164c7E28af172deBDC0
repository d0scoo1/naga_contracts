{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File contracts/interfaces/dao/IInsureToken.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IInsureToken {\r\n    function mint(address _to, uint256 _value)external returns(bool);\r\n    function emergency_mint(uint256 _amountOut, address _to)external;\r\n    function approve(address _spender, uint256 _value)external;\r\n    function rate()external view returns(uint256);\r\n    function future_epoch_time_write() external returns(uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/dao/ILiquidityGauge.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ILiquidityGauge {\r\n    function user_checkpoint(address _addr) external returns (bool);\r\n\r\n    function integrate_fraction(address _addr) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/dao/IGaugeController.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IGaugeController {\r\n    function gauge_types(address _addr)external view returns(uint256);\r\n    function get_voting_escrow()external view returns(address);\r\n    function checkpoint_gauge(address addr)external;\r\n    function gauge_relative_weight(address addr, uint256 time)external view returns(uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/dao/IEmergencyMintModule.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IEmergencyMintModule {\r\n    function mint(address _amount) external;\r\n\r\n    function repayDebt() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/pool/IOwnership.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\ninterface IOwnership {\r\n    function owner() external view returns (address);\r\n\r\n    function futureOwner() external view returns (address);\r\n\r\n    function commitTransferOwnership(address newOwner) external;\r\n\r\n    function acceptTransferOwnership() external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.4.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.4.1\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Minter.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\n/***\r\n *@title Token Minter\r\n *@author InsureDAO\r\n * SPDX-License-Identifier: MIT\r\n *@notice Used to mint InsureToken\r\n */\r\n\r\n//dao-contracts\r\n\r\n\r\n\r\n\r\n//libraries\r\n\r\n\r\ncontract Minter is ReentrancyGuard {\r\n    event EmergencyMint(uint256 minted);\r\n    event Minted(address indexed recipient, address gauge, uint256 minted);\r\n    event SetConverter(address converter);\r\n\r\n    IInsureToken public insure_token;\r\n    IGaugeController public gauge_controller;\r\n    IEmergencyMintModule public emergency_module;\r\n\r\n    // user -> gauge -> value\r\n    mapping(address => mapping(address => uint256)) public minted; //INSURE minted amount of user from specific gauge.\r\n\r\n    // minter -> user -> can mint?\r\n    mapping(address => mapping(address => bool)) public allowed_to_mint_for; // A can mint for B if [A => B => true].\r\n\r\n    IOwnership public immutable ownership;\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            ownership.owner() == msg.sender,\r\n            \"Caller is not allowed to operate\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _controller, address _ownership) {\r\n        insure_token = IInsureToken(_token);\r\n        gauge_controller = IGaugeController(_controller);\r\n        ownership = IOwnership(_ownership);\r\n    }\r\n\r\n    function _mint_for(address gauge_addr, address _for) internal {\r\n        require(\r\n            gauge_controller.gauge_types(gauge_addr) > 0,\r\n            \"dev: gauge is not added\"\r\n        );\r\n\r\n        ILiquidityGauge(gauge_addr).user_checkpoint(_for);\r\n        uint256 total_mint = ILiquidityGauge(gauge_addr).integrate_fraction(\r\n            _for\r\n        ); //Total amount of both mintable and minted.\r\n        uint256 to_mint = total_mint - minted[_for][gauge_addr]; //mint amount for this time. (total_amount - minted = mintable)\r\n\r\n        if (to_mint != 0) {\r\n            insure_token.mint(_for, to_mint);\r\n            minted[_for][gauge_addr] = total_mint;\r\n\r\n            emit Minted(_for, gauge_addr, total_mint);\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Mint everything which belongs to `msg.sender` and send to them\r\n     *@param gauge_addr `LiquidityGauge` address to get mintable amount from\r\n     */\r\n    function mint(address gauge_addr) external nonReentrant {\r\n        _mint_for(gauge_addr, msg.sender);\r\n    }\r\n\r\n    /***\r\n     *@notice Mint everything which belongs to `msg.sender` across multiple gauges\r\n     *@param gauge_addrs List of `LiquidityGauge` addresses\r\n     *@dev address[8]: 8 has randomly decided and has no meaning.\r\n     */\r\n    function mint_many(address[8] memory gauge_addrs) external nonReentrant {\r\n\r\n        for (uint256 i; i < 8;) {\r\n            if (gauge_addrs[i] == address(0)) {\r\n                break;\r\n            }\r\n            _mint_for(gauge_addrs[i], msg.sender);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Mint tokens for `_for`\r\n     *@dev Only possible when `msg.sender` has been approved via `toggle_approve_mint`\r\n     *@param gauge_addr `LiquidityGauge` address to get mintable amount from\r\n     *@param _for Address to mint to\r\n     */\r\n    function mint_for(address gauge_addr, address _for) external nonReentrant {\r\n        if (allowed_to_mint_for[msg.sender][_for]) {\r\n            _mint_for(gauge_addr, _for);\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice allow `minting_user` to mint for `msg.sender`\r\n     *@param minting_user Address to toggle permission for\r\n     */\r\n    function toggle_approve_mint(address minting_user) external {\r\n        allowed_to_mint_for[minting_user][msg.sender] = !allowed_to_mint_for[\r\n            minting_user\r\n        ][msg.sender];\r\n    }\r\n\r\n    //-----------------emergency mint-----------------/\r\n\r\n    function set_emergency_mint_module(address _emergency_module) external onlyOwner {\r\n        emergency_module = IEmergencyMintModule(_emergency_module);\r\n    }\r\n\r\n    /***\r\n     *@param mint_amount amount of INSURE to be minted\r\n     */\r\n    function emergency_mint(uint256 _mint_amount) external {\r\n        require(msg.sender == address(emergency_module), \"onlyOwner\");\r\n\r\n        //mint\r\n        insure_token.emergency_mint(_mint_amount, address(emergency_module));\r\n\r\n        emit EmergencyMint(_mint_amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"EmergencyMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"SetConverter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed_to_mint_for\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mint_amount\",\"type\":\"uint256\"}],\"name\":\"emergency_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency_module\",\"outputs\":[{\"internalType\":\"contract IEmergencyMintModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge_controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insure_token\",\"outputs\":[{\"internalType\":\"contract IInsureToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_addr\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"mint_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[8]\",\"name\":\"gauge_addrs\",\"type\":\"address[8]\"}],\"name\":\"mint_many\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergency_module\",\"type\":\"address\"}],\"name\":\"set_emergency_mint_module\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minting_user\",\"type\":\"address\"}],\"name\":\"toggle_approve_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Minter", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d83ae04c9ed29d6d3e6bf720c71bc7beb424393e000000000000000000000000297ea2afce594149cd31a9b11adbae82fa1ddd0400000000000000000000000056246e83f3148b05ce2d90b44fbb4e9fa9eaf5bb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bcece4404d79dc266891d3702eead84debf9e18151aea4d03bb869883d7568db"}]}