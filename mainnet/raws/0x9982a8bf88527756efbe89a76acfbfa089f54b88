{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Developed by Orcania (https://orcania.io/)\r\n// For TRAF Ep3 mint (https://theredapefamily.com/mint)\r\npragma solidity =0.7.6;\r\n\r\ninterface ITRAF {\r\n\r\n    function adminMint(address to, uint256 amount) external;\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n}\r\n\r\nabstract contract OMS { //Orcania Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address => bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    receive() external payable {}\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"OMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"OMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n    //===============\r\n\r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        require(to.send(value), \"OMS: ISSUE_SENDING_FUNDS\");\r\n    }\r\n\r\n}\r\n\r\ncontract TRAF_Mint_Extension is OMS {\r\n\r\n    ITRAF TRAF;\r\n    uint256 private _startingTotalSupply; //TRAF total supply at the beginning of this mint\r\n\r\n    uint256 private _availableMints; //Available amount of NFTs left to mint\r\n    uint256 private _holdersReserve; //NFTs reserved for ep1 and ep2 holders\r\n\r\n    //HM: Ep1-Ep2 Holders Mint\r\n    mapping(address => uint256) private HM_Mints;\r\n    uint256 private HM_User_Limit = 10; //User Mint Limit\r\n    uint256 private HM_TotalMinted;\r\n    uint256 private HM_Price = 250000000000000000;\r\n    uint256 private HM_Active;\r\n\r\n    //PRM: Prime Mint / Kind of like an early WL mint\r\n    mapping(address => uint256) private PRM_Mints;\r\n    mapping(address => uint256) private PRM_AllowListed;\r\n    uint256 private PRM_User_Limit = 2; //User Mint Limit\r\n    uint256 private PRM_Price = 350000000000000000;\r\n    uint256 private PRM_Active;\r\n\r\n    //GHM: General Holders Mint\r\n    mapping(address => uint256) private GHM_Mints;\r\n    uint256 private GHM_User_Limit; //User Mint Limit\r\n    uint256 private GHM_Price;\r\n    uint256 private GHM_Active;\r\n\r\n    //PM: Partners Mint\r\n    mapping(address => uint256) private PM_Mints;\r\n    uint256 private PM_User_Limit = 2; //User Mint Limit\r\n    uint256 private PM_Price = 350000000000000000;\r\n    uint256 private PM_Active;\r\n\r\n    //ALM: AllowList\r\n    mapping(address => uint256) private ALM_AllowListed;\r\n    mapping(address => uint256) private ALM_Mints;\r\n    uint256 private ALM_User_Limit = 2; //User Mint Limit\r\n    uint256 private ALM_Price = 350000000000000000;\r\n    uint256 private ALM_Active;\r\n\r\n    //PUM: Public Mint\r\n    mapping(address => uint256) private PUM_Mints;\r\n    uint256 private PUM_User_Limit = 2; //User Mint Limit\r\n    uint256 private PUM_Price = 400000000000000000;\r\n    uint256 private PUM_Active;\r\n\r\n    mapping(address => uint256) private _partner; //If the following contract is partner or not\r\n\r\n    constructor(address _traf, uint256 availableMints, uint256 holdersReserve) {\r\n        TRAF = ITRAF(_traf);\r\n        _availableMints = availableMints;\r\n        _holdersReserve = holdersReserve;\r\n\r\n        _startingTotalSupply = TRAF.totalSupply();\r\n    }\r\n\r\n    //Read Functions =================================================================================================================================\r\n\r\n    function Get_HM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 totalMinted, uint256 price, bool active) {\r\n        user_mints = HM_Mints[user];\r\n        user_mint_limit = HM_User_Limit;\r\n        totalMinted = HM_TotalMinted;\r\n        price = HM_Price;\r\n        active = HM_Active == 1;\r\n    }\r\n\r\n    function Get_PRM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 price, bool listed, bool active) {\r\n        user_mints = PRM_Mints[user];\r\n        user_mint_limit = PRM_User_Limit;\r\n        price = PRM_Price;\r\n        active = PRM_Active == 1;\r\n        listed = PRM_AllowListed[user] == 1;\r\n    }\r\n\r\n    function Get_GHM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 price, bool active) {\r\n        user_mints = GHM_Mints[user];\r\n        user_mint_limit = GHM_User_Limit;\r\n        price = GHM_Price;\r\n        active = GHM_Active == 1;\r\n    }\r\n\r\n    function Get_PM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 price, bool active) {\r\n        user_mints = PM_Mints[user];\r\n        user_mint_limit = PM_User_Limit;\r\n        price = PM_Price;\r\n        active = PM_Active == 1;\r\n    }\r\n\r\n    function Get_ALM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 price, bool listed, bool active) {\r\n        user_mints = ALM_Mints[user];\r\n        user_mint_limit = ALM_User_Limit;\r\n        price = ALM_Price;\r\n        listed = ALM_AllowListed[user] == 1;\r\n        active = ALM_Active == 1;\r\n    }\r\n\r\n    function Get_PUM_Data(address user) external view returns(uint256 user_mints, uint256 user_mint_limit, uint256 price, bool active) {\r\n        user_mints = PUM_Mints[user];\r\n        user_mint_limit = PUM_User_Limit;\r\n        price = PUM_Price;\r\n        active = PUM_Active == 1;\r\n    }\r\n\r\n    function Check_Partner(address partner) external view returns(bool) {\r\n        return _partner[partner] == 1;\r\n    }\r\n\r\n    function Mints_Left() external view returns(uint256) {\r\n        return _availableMints;\r\n    }\r\n\r\n    function General_Mints_Left() external view returns(uint256) {\r\n        return _availableMints - HoldersReservedMints();\r\n    }\r\n    //Mints ==========================================================================================================================================\r\n\r\n    function HM(uint256 NFT_ID /*ID of the ep1 or ep2 token this user holds*/) external payable{\r\n        require(HM_Active == 1, \"MINT_OFF\");\r\n        require(NFT_ID < 667, \"NOT_HOLDER\");\r\n        require(TRAF.ownerOf(NFT_ID) == msg.sender, \"NOT_HOLDER\");\r\n\r\n        uint256 price = HM_Price;\r\n        require(msg.value % price == 0, \"WRONG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require((_availableMints -= amount) < 10000, \"MINT_LIMIT_EXCEEDED\");\r\n\r\n        require((HM_Mints[msg.sender] += amount) <= HM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); //Total mints of 10 per wallet\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n    }\r\n\r\n    function PRM() external payable {\r\n        require(PRM_Active == 1, \"MINT_OFF\");\r\n        require(PRM_AllowListed[msg.sender] == 1, \"NOT_ALLOW_LISTED\");\r\n\r\n        uint256 price = PRM_Price;\r\n        require(msg.value % price == 0, \"INVALID_MSG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require(amount <= GeneralMintLeft(), \"MINT_LIMIT_EXCEEDED\");\r\n\r\n        require((PRM_Mints[msg.sender] += amount) <= PRM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); // Toal mint of 2 per wallet\r\n\r\n        _availableMints -= amount;\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n    }\r\n\r\n    function GHM(uint256 NFT_ID /*ID of the ep token this user holds cannot be the episode they are currently minting*/) external payable{\r\n        require(GHM_Active == 1, \"MINT_OFF\");\r\n        require(NFT_ID <= _startingTotalSupply, \"NOT_HOLDER\");\r\n        require(TRAF.balanceOf(msg.sender) > 0, \"NOT_HOLDER\");\r\n\r\n        uint256 price = GHM_Price;\r\n        require(msg.value % price == 0, \"WRONG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require(amount <= GeneralMintLeft(), \"MINT_LIMIT_EXCEEDED\");\r\n        \r\n        require((GHM_Mints[msg.sender] += amount) <= GHM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); //Total mints of 10 per wallet\r\n\r\n        _availableMints -= amount;\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n\r\n    }\r\n\r\n    function PM(address partner) external payable{\r\n        require(PM_Active == 1, \"MINT_OFF\");\r\n        require(_partner[partner] == 1, \"NOT_PARTNER\");\r\n        require(ITRAF(partner).balanceOf(msg.sender) > 0, \"NOT_PARTNER_HOLDER\");\r\n\r\n        uint256 price = PM_Price;\r\n        require(msg.value % price == 0, \"WRONG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require(amount <= GeneralMintLeft(), \"MINT_LIMIT_EXCEEDED\");\r\n\r\n        require((PM_Mints[msg.sender] += amount) <= PM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); //Total mints of 2 per wallet\r\n\r\n        _availableMints -= amount;\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n\r\n    }\r\n\r\n    function ALM() external payable {\r\n        require(ALM_Active == 1, \"MINT_OFF\");\r\n        require(ALM_AllowListed[msg.sender] == 1, \"NOT_ALLOW_LISTED\");\r\n\r\n        uint256 price = ALM_Price;\r\n        require(msg.value % price == 0, \"INVALID_MSG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require(amount <= GeneralMintLeft(), \"MINT_LIMIT_EXCEEDED\");\r\n\r\n        require((ALM_Mints[msg.sender] += amount) <= ALM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); // Toal mint of 2 per wallet\r\n\r\n        _availableMints -= amount;\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n    }\r\n\r\n    function PUM() external payable {\r\n        require(PUM_Active == 1, \"MINT_OFF\");\r\n\r\n        uint256 price = PUM_Price;\r\n        require(msg.value % price == 0, \"INVALID_MSG_VALUE\");\r\n        uint256 amount = msg.value / price;\r\n\r\n        require(amount <= GeneralMintLeft(), \"MINT_LIMIT_EXCEEDED\");\r\n\r\n        require((PUM_Mints[msg.sender] += amount) <= PUM_User_Limit, \"USER_MINT_LIMIT_EXCEEDED\"); // Toal mint of 10 per wallet\r\n\r\n        _availableMints -= amount;\r\n\r\n        TRAF.adminMint(msg.sender, amount);\r\n    }\r\n\r\n    //Moderator Functions ==========================================================================================================================\r\n\r\n    function Change_HM_Data(uint256 hm_User_Limit, uint256 hm_Price) external Manager {\r\n        HM_User_Limit = hm_User_Limit;\r\n        HM_Price = hm_Price;\r\n    }\r\n\r\n    function Change_PRM_Data(uint256 prm_User_Limit, uint256 prm_Price) external Manager {\r\n        PRM_User_Limit = prm_User_Limit;\r\n        PRM_Price = prm_Price;\r\n    }\r\n\r\n    function Change_GHM_Data(uint256 ghm_User_Limit, uint256 ghm_Price) external Manager {\r\n        GHM_User_Limit = ghm_User_Limit;\r\n        GHM_Price = ghm_Price;\r\n    }\r\n\r\n    function Change_PM_Data(uint256 pm_User_Limit, uint256 pm_Price) external Manager {\r\n        PM_User_Limit = pm_User_Limit;\r\n        PM_Price = pm_Price;\r\n    }\r\n\r\n    function Change_ALM_Data(uint256 alm_User_Limit, uint256 alm_Price) external Manager {\r\n        ALM_User_Limit = alm_User_Limit;\r\n        ALM_Price = alm_Price;\r\n    }\r\n\r\n    function Change_PUM_Data(uint256 pum_User_Limit, uint256 pum_Price) external Manager {\r\n        PUM_User_Limit = pum_User_Limit;\r\n        PUM_Price = pum_Price;\r\n    }\r\n\r\n    function Activate_Mint(uint256 hm_Active, uint256 prm_Active, uint256 ghm_Active, uint256 pm_Active, uint256 alm_Active, uint256 pum_Active) external Manager {\r\n        HM_Active = hm_Active;\r\n        GHM_Active = ghm_Active;\r\n        PM_Active = pm_Active;\r\n        ALM_Active = alm_Active;\r\n        PUM_Active = pum_Active; \r\n        PRM_Active = prm_Active;\r\n    }\r\n\r\n    function Set_ALM_Users(address[] calldata users) external Manager {\r\n        uint256 length = users.length;\r\n\r\n        for(uint256 t=0; t < length; ++t) {\r\n            ALM_AllowListed[users[t]] = 1;\r\n        }\r\n    }\r\n\r\n    function Set_PRM_Users(address[] calldata users) external Manager {\r\n        uint256 length = users.length;\r\n\r\n        for(uint256 t=0; t < length; ++t) {\r\n            PRM_AllowListed[users[t]] = 1;\r\n        }\r\n    }\r\n\r\n    function Add_Partner(address partner) external Manager {\r\n        _partner[partner] = 1;\r\n    }\r\n\r\n    function Remove_Partber(address partner) external Manager {\r\n        _partner[partner] = 0;\r\n    }\r\n\r\n    function Increase_Mints(uint256 amount) external Manager {\r\n        _availableMints += amount;\r\n    }\r\n\r\n    function Decrease_Mints(uint256 amount) external Manager {\r\n        _availableMints -= amount;\r\n    }\r\n\r\n    //Internal Functions ===========================================================================================================================\r\n\r\n    function HoldersReservedMints() internal view returns(uint256) {\r\n        if(HM_TotalMinted >= _holdersReserve) {return 0;}\r\n        else {return _holdersReserve - HM_TotalMinted;}\r\n    }\r\n\r\n    function GeneralMintLeft() internal view returns (uint256){\r\n        return _availableMints - HoldersReservedMints();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdersReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hm_Active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prm_Active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ghm_Active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pm_Active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alm_Active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pum_Active\",\"type\":\"uint256\"}],\"name\":\"Activate_Mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"Add_Partner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"alm_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alm_Price\",\"type\":\"uint256\"}],\"name\":\"Change_ALM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ghm_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ghm_Price\",\"type\":\"uint256\"}],\"name\":\"Change_GHM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hm_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hm_Price\",\"type\":\"uint256\"}],\"name\":\"Change_HM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pm_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pm_Price\",\"type\":\"uint256\"}],\"name\":\"Change_PM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prm_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prm_Price\",\"type\":\"uint256\"}],\"name\":\"Change_PRM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pum_User_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pum_Price\",\"type\":\"uint256\"}],\"name\":\"Change_PUM_Data\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"Check_Partner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Decrease_Mints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFT_ID\",\"type\":\"uint256\"}],\"name\":\"GHM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"General_Mints_Left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_ALM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_GHM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_HM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_PM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_PRM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Get_PUM_Data\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_mints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_mint_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NFT_ID\",\"type\":\"uint256\"}],\"name\":\"HM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Increase_Mints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Mints_Left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"PM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"Remove_Partber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"Set_ALM_Users\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"Set_PRM_Users\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRAF_Mint_Extension", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000081f296145c5555d7b4b426d97e4e2260c017f5d000000000000000000000000000000000000000000000000000000000000004570000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26a30c0627b95018f65cadd526673c26b9da11df2b8bc6c9f6787b3933654e27"}]}