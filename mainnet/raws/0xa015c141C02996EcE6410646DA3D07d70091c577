{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/ERC20EscrowToPay.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './lib/SafeERC20.sol';\\nimport './interfaces/ERC20FeeProxy.sol';\\n\\n/**\\n * @title   ERC20EscrowToPay\\n * @notice  Request Invoice with Escrow.\\n */\\ncontract ERC20EscrowToPay is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20FeeProxy public paymentProxy;\\n\\n  struct Request {\\n    address tokenAddress;\\n    address payee;\\n    address payer;\\n    uint256 amount;\\n    uint256 unlockDate;\\n    uint256 emergencyClaimDate;\\n    bool emergencyState;\\n    bool isFrozen;\\n  }\\n\\n  /**\\n   * @notice Mapping is used to store the Requests in escrow.\\n   */\\n  mapping(bytes => Request) public requestMapping;\\n\\n  /**\\n   * @notice Duration of emergency claim period that payee can initiate.\\n   *         The payer can reverse this claim within this period.\\n   */\\n  uint256 public emergencyClaimPeriod = 24 weeks;\\n\\n  /**\\n   * @notice Duration of Escrow freeze period that payer can initiate.\\n   *         This lock is irreversable, once the funds are frozen, payer must wait for the whole period.\\n   */\\n  uint256 public frozenPeriod = 52 weeks;\\n\\n  /**\\n   * @notice Modifier checks if msg.sender is the requestpayment payer.\\n   * @param _paymentRef Reference of the requestpayment related.\\n   * @dev It requires msg.sender to be equal to requestMapping[_paymentRef].payer.\\n   */\\n  modifier OnlyPayer(bytes memory _paymentRef) {\\n    require(msg.sender == requestMapping[_paymentRef].payer, 'Not Authorized.');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier checks if msg.sender is the requestpayment payee.\\n   * @param _paymentRef Reference of the requestpayment related.\\n   * @dev It requires msg.sender to be equal to requestMapping[_paymentRef].payee.\\n   */\\n  modifier OnlyPayee(bytes memory _paymentRef) {\\n    require(msg.sender == requestMapping[_paymentRef].payee, 'Not Authorized.');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier checks that the request is not already is in escrow.\\n   * @param _paymentRef Reference of the payment related.\\n   * @dev It requires the requestMapping[_paymentRef].amount to be zero.\\n   */\\n  modifier IsNotInEscrow(bytes memory _paymentRef) {\\n    require(requestMapping[_paymentRef].amount == 0, 'Already in Escrow.');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier checks if the request already is in escrow.\\n   * @param _paymentRef Reference of the payment related.\\n   * @dev It requires the requestMapping[_paymentRef].amount to have a value above zero.\\n   */\\n  modifier IsInEscrow(bytes memory _paymentRef) {\\n    require(requestMapping[_paymentRef].amount > 0, 'Not in escrow.');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier checks if the request already is in emergencyState.\\n   * @param _paymentRef Reference of the payment related.\\n   * @dev It requires the requestMapping[_paymentRef].emergencyState to be false.\\n   */\\n  modifier IsNotInEmergencyState(bytes memory _paymentRef) {\\n    require(!requestMapping[_paymentRef].emergencyState, 'In emergencyState');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier checks that the request is not frozen.\\n   * @param _paymentRef Reference of the payment related.\\n   * @dev It requires the requestMapping[_paymentRef].isFrozen to be false.\\n   */\\n  modifier IsNotFrozen(bytes memory _paymentRef) {\\n    require(!requestMapping[_paymentRef].isFrozen, 'Request Frozen!');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Emitted when a request has been frozen.\\n   * @param paymentReference Reference of the payment related.\\n   */\\n  event RequestFrozen(bytes indexed paymentReference);\\n\\n  /**\\n   * @notice Emitted when an emergency claim is initiated by payee.\\n   * @param paymentReference Reference of the payment related.\\n   */\\n  event InitiatedEmergencyClaim(bytes indexed paymentReference);\\n\\n  /**\\n   * @notice Emitted when an emergency claim has been reverted by payer.\\n   * @param paymentReference Reference of the payment related.\\n   */\\n  event RevertedEmergencyClaim(bytes indexed paymentReference);\\n\\n  /**\\n   * @notice Emitted when transaction to and from the escrow has been executed.\\n   * @param tokenAddress Address of the ERC20 token smart contract.\\n   * @param to Address to the payment issuer, alias payee.\\n   * @param amount Amount transfered.\\n   * @param paymentReference Reference of the payment related.\\n   * @param feeAmount Set to zero when emited by _withdraw function.\\n   * @param feeAddress Set to address(0) when emited by _withdraw function.\\n   */\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  constructor(address _paymentProxyAddress, address _admin) {\\n    paymentProxy = IERC20FeeProxy(_paymentProxyAddress);\\n    transferOwnership(_admin);\\n  }\\n\\n  /**\\n   * @notice receive function reverts and returns the funds to the sender.\\n   */\\n  receive() external payable {\\n    revert('not payable receive');\\n  }\\n\\n  function setEmergencyClaimPeriod(uint256 _emergencyClaimPeriod) external onlyOwner {\\n    emergencyClaimPeriod = _emergencyClaimPeriod;\\n  }\\n\\n  function setFrozenPeriod(uint256 _frozenPeriod) external onlyOwner {\\n    frozenPeriod = _frozenPeriod;\\n  }\\n\\n  /**\\n   * @notice Stores the invoice details, and transfers funds to this Escrow contract.\\n   * @param _tokenAddress Address of the ERC20 token smart contract.\\n   * @param _to Address to the payment issuer, alias payee.\\n   * @param _amount Amount to transfer.\\n   * @param _paymentRef Reference of the payment related.\\n   * @param _feeAmount Amount of fee to be paid.\\n   * @param _feeAddress Address to where the fees will be paid.\\n   * @dev Uses modifier IsNotInEscrow.\\n   * @dev Uses transferFromWithReferenceAndFee() to transfer funds from the msg.sender,\\n   * into the escrowcontract and pays the _fees to the _feeAdress.\\n   * @dev Emits RequestInEscrow(_paymentRef) when the funds are in escrow.\\n   */\\n  function payEscrow(\\n    address _tokenAddress,\\n    address _to,\\n    uint256 _amount,\\n    bytes memory _paymentRef,\\n    uint256 _feeAmount,\\n    address _feeAddress\\n  ) external IsNotInEscrow(_paymentRef) {\\n    if (_amount == 0 || _feeAmount == 0) revert('Zero Value');\\n\\n    requestMapping[_paymentRef] = Request(\\n      _tokenAddress,\\n      _to,\\n      msg.sender,\\n      _amount,\\n      0,\\n      0,\\n      false,\\n      false\\n    );\\n\\n    (bool status, ) = address(paymentProxy).delegatecall(\\n      abi.encodeWithSignature(\\n        'transferFromWithReferenceAndFee(address,address,uint256,bytes,uint256,address)',\\n        _tokenAddress,\\n        address(this),\\n        _amount,\\n        _paymentRef,\\n        _feeAmount,\\n        _feeAddress\\n      )\\n    );\\n    require(status, 'transferFromWithReferenceAndFee failed');\\n  }\\n\\n  /**\\n   * @notice Locks the request funds for the payer to recover them\\n   *         after 12 months and cancel any emergency claim.\\n   * @param _paymentRef Reference of the Invoice related.\\n   * @dev Uses modifiers OnlyPayer, IsInEscrow and IsNotFrozen.\\n   * @dev unlockDate is set with block.timestamp + twelve months..\\n   */\\n  function freezeRequest(bytes memory _paymentRef)\\n    external\\n    OnlyPayer(_paymentRef)\\n    IsInEscrow(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n  {\\n    if (requestMapping[_paymentRef].emergencyState) {\\n      requestMapping[_paymentRef].emergencyState = false;\\n      requestMapping[_paymentRef].emergencyClaimDate = 0;\\n      emit RevertedEmergencyClaim(_paymentRef);\\n    }\\n\\n    requestMapping[_paymentRef].isFrozen = true;\\n    requestMapping[_paymentRef].unlockDate = block.timestamp + frozenPeriod;\\n\\n    emit RequestFrozen(_paymentRef);\\n  }\\n\\n  /**\\n   * @notice Closes an open escrow and pays the request to payee.\\n   * @param _paymentRef Reference of the related Invoice.\\n   * @dev Uses OnlyPayer, IsInEscrow, IsNotInEmergencyState and IsNotFrozen.\\n   */\\n  function payRequestFromEscrow(bytes memory _paymentRef)\\n    external\\n    OnlyPayer(_paymentRef)\\n    IsInEscrow(_paymentRef)\\n    IsNotInEmergencyState(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n  {\\n    require(_withdraw(_paymentRef, requestMapping[_paymentRef].payee), 'Withdraw Failed!');\\n  }\\n\\n  /**\\n   * @notice Allows the payee to initiate an emergency claim after a six months lockperiod .\\n   * @param _paymentRef Reference of the related Invoice.\\n   * @dev Uses modifiers OnlyPayee, IsInEscrow, IsNotInEmergencyState and IsNotFrozen.\\n   */\\n  function initiateEmergencyClaim(bytes memory _paymentRef)\\n    external\\n    OnlyPayee(_paymentRef)\\n    IsInEscrow(_paymentRef)\\n    IsNotInEmergencyState(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n  {\\n    requestMapping[_paymentRef].emergencyClaimDate = block.timestamp + emergencyClaimPeriod;\\n    requestMapping[_paymentRef].emergencyState = true;\\n\\n    emit InitiatedEmergencyClaim(_paymentRef);\\n  }\\n\\n  /**\\n   * @notice Allows the payee claim funds after a six months emergency lockperiod .\\n   * @param _paymentRef Reference of the related Invoice.\\n   * @dev Uses modifiers OnlyPayee, IsInEscrow and IsNotFrozen.\\n   */\\n  function completeEmergencyClaim(bytes memory _paymentRef)\\n    external\\n    OnlyPayee(_paymentRef)\\n    IsInEscrow(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n  {\\n    require(\\n      requestMapping[_paymentRef].emergencyState &&\\n        requestMapping[_paymentRef].emergencyClaimDate <= block.timestamp,\\n      'Not yet!'\\n    );\\n\\n    requestMapping[_paymentRef].emergencyState = false;\\n    requestMapping[_paymentRef].emergencyClaimDate = 0;\\n\\n    require(_withdraw(_paymentRef, requestMapping[_paymentRef].payee), 'Withdraw failed!');\\n  }\\n\\n  /**\\n   * @notice Reverts the emergencyState to false and cancels emergencyClaim.\\n   * @param _paymentRef Reference of the Invoice related.\\n   * @dev Uses modifiers OnlyPayer, IsInEscrow and IsNotFrozen.\\n   * @dev Resets emergencyState to false and emergencyClaimDate to zero.\\n   */\\n  function revertEmergencyClaim(bytes memory _paymentRef)\\n    external\\n    OnlyPayer(_paymentRef)\\n    IsInEscrow(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n  {\\n    require(requestMapping[_paymentRef].emergencyState, 'EmergencyClaim NOT initiated');\\n    requestMapping[_paymentRef].emergencyState = false;\\n    requestMapping[_paymentRef].emergencyClaimDate = 0;\\n\\n    emit RevertedEmergencyClaim(_paymentRef);\\n  }\\n\\n  /**\\n   * @notice Refunds to payer after twelve months and delete the escrow.\\n   * @param  _paymentRef Reference of the Invoice related.\\n   * @dev requires that the request .isFrozen = true and .unlockDate to\\n   *      be lower or equal to block.timestamp.\\n   */\\n  function refundFrozenFunds(bytes memory _paymentRef)\\n    external\\n    IsInEscrow(_paymentRef)\\n    IsNotInEmergencyState(_paymentRef)\\n  {\\n    require(requestMapping[_paymentRef].isFrozen, 'Not frozen!');\\n    require(requestMapping[_paymentRef].unlockDate <= block.timestamp, 'Not Yet!');\\n\\n    requestMapping[_paymentRef].isFrozen = false;\\n\\n    require(_withdraw(_paymentRef, requestMapping[_paymentRef].payer), 'Withdraw Failed!');\\n  }\\n\\n  /**\\n   * @notice Withdraw the funds from the escrow.\\n   * @param _paymentRef Reference of the related Invoice.\\n   * @param _receiver Receiving address.\\n   * @dev Internal function to withdraw funds from escrow, to a given reciever.\\n   * @dev Emits TransferWithReferenceAndFee() when payee is the _receiver.\\n   * @dev Asserts .amount, .isFrozen and .emergencyState are reset before deleted.\\n   */\\n  function _withdraw(bytes memory _paymentRef, address _receiver)\\n    internal\\n    IsInEscrow(_paymentRef)\\n    IsNotInEmergencyState(_paymentRef)\\n    IsNotFrozen(_paymentRef)\\n    returns (bool result)\\n  {\\n    require(_receiver != address(0), 'ZERO adddress');\\n    require(requestMapping[_paymentRef].amount > 0, 'ZERO Amount');\\n\\n    IERC20 requestedToken = IERC20(requestMapping[_paymentRef].tokenAddress);\\n\\n    uint256 _amount = requestMapping[_paymentRef].amount;\\n    requestMapping[_paymentRef].amount = 0;\\n\\n    // Checks if the requestedToken is allowed to spend.\\n    if (requestedToken.allowance(address(this), address(paymentProxy)) < _amount) {\\n      approvePaymentProxyToSpend(address(requestedToken));\\n    }\\n\\n    paymentProxy.transferFromWithReferenceAndFee(\\n      address(requestedToken),\\n      _receiver,\\n      _amount,\\n      _paymentRef,\\n      0,\\n      address(0)\\n    );\\n\\n    assert(requestMapping[_paymentRef].amount == 0);\\n    assert(!requestMapping[_paymentRef].isFrozen);\\n    assert(!requestMapping[_paymentRef].emergencyState);\\n\\n    delete requestMapping[_paymentRef];\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Authorizes the proxy to spend a new request currency (ERC20).\\n   * @param _erc20Address Address of an ERC20 used as the request currency.\\n   */\\n  function approvePaymentProxyToSpend(address _erc20Address) public {\\n    IERC20 erc20 = IERC20(_erc20Address);\\n    uint256 max = 2**256 - 1;\\n    erc20.safeApprove(address(paymentProxy), max);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title SafeERC20\\n * @notice Works around implementations of ERC20 with transferFrom not returning success status.\\n */\\nlibrary SafeERC20 {\\n  /**\\n   * @notice Call transferFrom ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransferFrom(\\n    IERC20 _token,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transferFrom(address,address,uint256)', _from, _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call approve ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeApprove(\\n    IERC20 _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('approve(address,uint256)', _spender, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n\\n  /**\\n   * @notice Call transfer ERC20 function and validates the return data of a ERC20 contract call.\\n   * @dev This is necessary because of non-standard ERC20 tokens that don't have a return value.\\n   * @return result The return value of the ERC20 call, returning true for non-standard tokens\\n   */\\n  function safeTransfer(\\n    IERC20 _token,\\n    address _to,\\n    uint256 _amount\\n  ) internal returns (bool result) {\\n    // solium-disable-next-line security/no-low-level-calls\\n    (bool success, bytes memory data) = address(_token).call(\\n      abi.encodeWithSignature('transfer(address,uint256)', _to, _amount)\\n    );\\n\\n    return success && (data.length == 0 || abi.decode(data, (bool)));\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ERC20FeeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20FeeProxy {\\n  event TransferWithReferenceAndFee(\\n    address tokenAddress,\\n    address to,\\n    uint256 amount,\\n    bytes indexed paymentReference,\\n    uint256 feeAmount,\\n    address feeAddress\\n  );\\n\\n  function transferFromWithReferenceAndFee(\\n    address _tokenAddress,\\n    address _to,\\n    uint256 _amount,\\n    bytes calldata _paymentReference,\\n    uint256 _feeAmount,\\n    address _feeAddress\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"}],\"name\":\"InitiatedEmergencyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"}],\"name\":\"RequestFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"}],\"name\":\"RevertedEmergencyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"TransferWithReferenceAndFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"approvePaymentProxyToSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"completeEmergencyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"freezeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozenPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"initiateEmergencyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"payEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"payRequestFromEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentProxy\",\"outputs\":[{\"internalType\":\"contract IERC20FeeProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"refundFrozenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"requestMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyClaimDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyState\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentRef\",\"type\":\"bytes\"}],\"name\":\"revertEmergencyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyClaimPeriod\",\"type\":\"uint256\"}],\"name\":\"setEmergencyClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frozenPeriod\",\"type\":\"uint256\"}],\"name\":\"setFrozenPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20EscrowToPay", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000370de27fdb7d1ff1e1baa7d11c5820a324cf623c0000000000000000000000004e64c2d06d19d13061e62e291b2c4e9fe5679b93", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}