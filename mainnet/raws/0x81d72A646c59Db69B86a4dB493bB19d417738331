{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"DevourAssembler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IDevour.sol\\\";\\n\\n\\ncontract DevourAssembler is Ownable, ReentrancyGuard {\\n  IDevour public devour;\\n  bool public assemblerEnabled;\\n  mapping (uint256 =\\u003e uint256) private _shardIds;\\n\\n  constructor (address _devourAddress) {\\n    devour = IDevour(_devourAddress);\\n\\n    // Pre-filled shard identifiers for validation on assembling\\n    _shardIds[16] = 2;\\n    _shardIds[376] = 2;\\n    _shardIds[382] = 2;\\n    _shardIds[225] = 11;\\n    _shardIds[6] = 11;\\n    _shardIds[486] = 15;\\n    _shardIds[566] = 6;\\n    _shardIds[468] = 20;\\n    _shardIds[215] = 20;\\n    _shardIds[581] = 7;\\n    _shardIds[586] = 9;\\n    _shardIds[348] = 13;\\n    _shardIds[513] = 14;\\n    _shardIds[452] = 15;\\n    _shardIds[589] = 16;\\n    _shardIds[359] = 16;\\n    _shardIds[541] = 20;\\n    _shardIds[540] = 20;\\n    _shardIds[256] = 13;\\n    _shardIds[268] = 1;\\n    _shardIds[231] = 17;\\n    _shardIds[292] = 15;\\n    _shardIds[227] = 9;\\n    _shardIds[304] = 11;\\n    _shardIds[161] = 13;\\n    _shardIds[271] = 5;\\n    _shardIds[163] = 17;\\n    _shardIds[274] = 5;\\n    _shardIds[34] = 11;\\n    _shardIds[288] = 19;\\n    _shardIds[37] = 15;\\n    _shardIds[292] = 19;\\n    _shardIds[183] = 11;\\n    _shardIds[289] = 6;\\n    _shardIds[184] = 12;\\n    _shardIds[298] = 9;\\n    _shardIds[308] = 20;\\n    _shardIds[41] = 11;\\n    _shardIds[467] = 5;\\n    _shardIds[251] = 13;\\n    _shardIds[329] = 15;\\n    _shardIds[253] = 5;\\n    _shardIds[341] = 15;\\n    _shardIds[267] = 2;\\n    _shardIds[280] = 10;\\n    _shardIds[346] = 16;\\n    _shardIds[334] = 11;\\n    _shardIds[330] = 5;\\n    _shardIds[343] = 13;\\n    _shardIds[350] = 7;\\n    _shardIds[363] = 14;\\n    _shardIds[353] = 8;\\n    _shardIds[365] = 18;\\n    _shardIds[372] = 2;\\n    _shardIds[382] = 15;\\n    _shardIds[394] = 8;\\n    _shardIds[404] = 19;\\n    _shardIds[413] = 4;\\n    _shardIds[420] = 17;\\n    _shardIds[414] = 18;\\n    _shardIds[434] = 17;\\n    _shardIds[430] = 4;\\n    _shardIds[442] = 15;\\n    _shardIds[454] = 8;\\n    _shardIds[464] = 19;\\n    _shardIds[476] = 7;\\n    _shardIds[484] = 20;\\n    _shardIds[509] = 5;\\n    _shardIds[520] = 13;\\n    _shardIds[523] = 14;\\n    _shardIds[532] = 5;\\n    _shardIds[538] = 9;\\n    _shardIds[545] = 3;\\n    _shardIds[550] = 7;\\n    _shardIds[562] = 12;\\n    _shardIds[560] = 16;\\n    _shardIds[572] = 4;\\n    _shardIds[585] = 17;\\n    _shardIds[593] = 9;\\n    _shardIds[472] = 2;\\n    _shardIds[481] = 17;\\n  }\\n\\n  function setAssemblerEnabled(bool _state) external onlyOwner {\\n    assemblerEnabled = _state;\\n  }\\n\\n  function assemble(uint256 _type, uint256[] calldata _tokenIds) external nonReentrant {\\n    require(assemblerEnabled, \\\"Assembler disabled\\\");\\n\\n    uint256 flag = 0;\\n    for (uint256 i = 0; i \\u003c _tokenIds.length; i++) {\\n      uint256 tokenId = _tokenIds[i];\\n      require(devour.ownerOf(tokenId) == msg.sender, \\\"Invalid access\\\");\\n\\n      // Calculate the shard index\\n      uint256 shardId;\\n      uint256 fixedShardId = _shardIds[tokenId];\\n      if (fixedShardId \\u003e 0) {\\n        shardId = fixedShardId;\\n      } else {\\n        uint256 index = tokenId - 1;\\n        if (index \\u003e= 60 \\u0026\\u0026 index \\u003c 140) {\\n          shardId = index;\\n        } else if (index % 9 == 0) {\\n          shardId = index + 2;\\n        } else if (index % 6 == 0) {\\n          shardId = index + 1;\\n        } else if (index % 7 == 0) {\\n          shardId = index + 3;\\n        } else if (index % 11 == 0 || index % 3 == 0) {\\n          shardId = index + 5;\\n        } else {\\n          shardId = index + 4;\\n        }\\n        shardId = (shardId % 20) + 1;\\n      }\\n\\n      // Check the type and update the flag based on the shard order\\n      uint256 devourType = (shardId - 1) / 5 + 1;\\n      uint256 shardOrder = (shardId - 1) % 5;\\n      require(_type == devourType, \\\"Shards mismatch\\\");\\n      flag |= (1 \\u003c\\u003c shardOrder);\\n    }\\n\\n    // Correct set of 5 shards should have exactly 2^5-1 for the flag value\\n    require(flag == 31, \\\"Incomplete shards\\\");\\n\\n    // Call devour contract to burn shards and mint the assembled piece\\n    devour.assemble(_type, _tokenIds);\\n  }\\n}\\n\"},\"IDevour.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDevour {\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n  function assemble(uint256 devourType, uint256[] calldata tokenIds) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devourAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"assemble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assemblerEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devour\",\"outputs\":[{\"internalType\":\"contract IDevour\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAssemblerEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevourAssembler", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000054deb101352c4684b4cb62d47b524118d00e9e90", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89eb5eaef2bf9cc6453510a7417f9b5e3926b32634de88f2e09f2715f63d70a3"}]}