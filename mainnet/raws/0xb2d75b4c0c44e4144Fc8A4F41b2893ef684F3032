{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/zaps/ZapSwapCurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../libraries/Authorizable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/ICurvePool.sol\\\";\\n\\n// TODO Due to the nature of the curve contracts, there are a number of design\\n// decisions made in this contract which primarily aim to generalize integration\\n// with curve. Curve contracts have often an inconsistent interface to many\\n// functions in their contracts which has influenced the design of this contract\\n// to target curve pool functions using function signatures computed off-chain.\\n// The validation of this and other features of this contract stem from this\\n// problem, for instance, the curve pool contracts target their underlying\\n// tokens using fixed-length dimensional arrays of length 2 or 3. We could\\n// harden this contract further by utilizing the \\\"coins\\\" function on the curve\\n// contract which would enable this contract validate that our input structure\\n// is correct. However, this would also run into problems as the guarantee of\\n// consistency of the \\\"coins\\\" function is also in question across the suite of\\n// pools in the curve ecosystem. There may be a solution to mitigate this\\n// problem but may be more trouble than it's worth.\\n\\n/// @title ZapCurveTokenToPrincipalToken\\n/// @notice Allows the user to buy and sell principal tokens using a wider\\n/// array of tokens\\n/// @dev This contract introduces the concept of \\\"root tokens\\\" which are the\\n/// set of constituent tokens for a given curve pool. Each principal token\\n/// is constructed by a yield-generating position which in this case will be\\n/// represented by a curve LP token. This is referred to as the \\\"base token\\\"\\n/// and in the case where the user wishes to purchase or sell a principal token,\\n/// it can only be done so by using this token.\\n///\\n/// What this contract intends to do is enable the user purchase or sell\\n/// a position using those \\\"root tokens\\\" which would garner significant UX\\n/// improvements. The flow in the case of purchasing is as follows, the root\\n/// tokens are added as liquidity into the correct curve pool, giving a curve\\n/// \\\"LP token\\\" or \\\"base token\\\". Subsequently this is then used to purchase the\\n/// principal token. Selling works similarly but in the reverse direction.\\n///\\n/// Ex- Alice bought (x) amount curve LP token (let's say crvLUSD token) using LUSD (root token)\\n/// purchased (x) amount can be used to purchase the principal token by putting that amount\\n/// in the wrapped position contract.\\ncontract ZapSwapCurve is Authorizable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // Store the accessibility state of the contract\\n    bool public isFrozen;\\n\\n    // A constant to represent ether\\n    address internal constant _ETH_CONSTANT =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // Reference to the main balancer vault\\n    IVault internal immutable _balancer;\\n\\n    /////////////////////////\\n    /// Zap In Data Structure\\n    /////////////////////////\\n\\n    struct ZapInInfo {\\n        // The balancerPoolId references the particular pool in the balancer\\n        // contract which is used to exchange for the principal token\\n        bytes32 balancerPoolId;\\n        // The recipient is a target address the sender can send the resulting\\n        // principal tokens to\\n        address recipient;\\n        // Address of the principalToken\\n        IAsset principalToken;\\n        // The minimum amount of principal tokens the user expects to receive\\n        uint256 minPtAmount;\\n        // The time into the future for which the trade can happen\\n        uint256 deadline;\\n        // Some curvePools have themselves a dependent lpToken \\\"root\\\" which\\n        // this contract accommodates zapping through. This flag indicates if\\n        // such an action is necessary\\n        bool needsChildZap;\\n    }\\n\\n    struct ZapCurveLpIn {\\n        // Address of target curvePool for which liquidity will be added\\n        // giving this contract the lpTokens necessary to swap for the\\n        // principalTokens\\n        address curvePool;\\n        // The target lpToken which will be received\\n        IERC20 lpToken;\\n        // Array of amounts which are structured in reference to the\\n        // \\\"add_liquidity\\\" function in the related curvePool. These in all\\n        // cases come in either fixed-length arrays of length 2 or 3\\n        uint256[] amounts;\\n        // Similar to \\\"amounts\\\", these are the reference token contract\\n        // addresses also ordered as per the inconsistent interface of the\\n        // \\\"add_liquidity\\\" curvePool function\\n        address[] roots;\\n        // Only relevant when there is a childZap, it references what\\n        // index in the amounts array of the main \\\"zap\\\" the resultant\\n        // number of lpTokens should be added to\\n        uint256 parentIdx;\\n        // The minimum amount of LP tokens expected to receive when adding\\n        // liquidity\\n        uint256 minLpAmount;\\n    }\\n\\n    ///////////////////////////\\n    /// Zap Out Data Structure\\n    //////////////////////////\\n\\n    struct ZapCurveLpOut {\\n        // Address of the curvePool for which an amount of lpTokens\\n        // is swapped for an amount of single root tokens\\n        address curvePool;\\n        // The contract address of the curve pools lpToken\\n        IERC20 lpToken;\\n        // This is the index of the target root we are swapping for\\n        int128 rootTokenIdx;\\n        // Address of the rootToken we are swapping for\\n        address rootToken;\\n        // This is the selector for deciding between the two differing curve\\n        // interfaces for the add\\n        bool curveRemoveLiqFnIsUint256;\\n    }\\n\\n    struct ZapOutInfo {\\n        // Pool id of balancer pool that is used to exchange a users\\n        // amount of principal tokens\\n        bytes32 balancerPoolId;\\n        // Address of the principal token\\n        IAsset principalToken;\\n        // Amount of principal tokens the user wishes to swap for\\n        uint256 principalTokenAmount;\\n        // The recipient is the address the tokens which are to be swapped for\\n        // will be sent to\\n        address payable recipient;\\n        // The minimum amount base tokens the user is expecting\\n        uint256 minBaseTokenAmount;\\n        // The minimum amount root tokens the user is expecting\\n        uint256 minRootTokenAmount;\\n        // Timestamp into the future for which a transaction is valid for\\n        uint256 deadline;\\n        // If the target root token is sourced via two curve pool swaps, then\\n        // this is to be flagged as true\\n        bool targetNeedsChildZap;\\n    }\\n\\n    /// @notice Memory encoding of the permit data\\n    struct PermitData {\\n        IERC20Permit tokenContract;\\n        address spender;\\n        uint256 amount;\\n        uint256 expiration;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    /// @notice Sets the msg.sender as authorized and also set it as the owner\\n    ///         in the authorizable contract.\\n    /// @param __balancer The balancer vault contract\\n    constructor(IVault __balancer) {\\n        _authorize(msg.sender);\\n        _balancer = __balancer;\\n        isFrozen = false;\\n    }\\n\\n    /// @notice Requires that the contract is not frozen\\n    modifier notFrozen() {\\n        require(!isFrozen, \\\"Contract frozen\\\");\\n        _;\\n    }\\n\\n    // Allow this contract to receive ether\\n    receive() external payable {}\\n\\n    /// @notice Allows an authorized address to freeze or unfreeze this contract\\n    /// @param _newState True for frozen and false for unfrozen\\n    function setIsFrozen(bool _newState) external onlyAuthorized {\\n        isFrozen = _newState;\\n    }\\n\\n    /// @notice Takes the input permit calls and executes them\\n    /// @param data The array which encodes the set of permit calls to make\\n    modifier preApproval(PermitData[] memory data) {\\n        // If permit calls are provided we make try to make them\\n        _permitCall(data);\\n        _;\\n    }\\n\\n    /// @notice Makes permit calls indicated by a struct\\n    /// @param data the struct which has the permit calldata\\n    function _permitCall(PermitData[] memory data) internal {\\n        // Make the permit call to the token in the data field using\\n        // the fields provided.\\n        if (data.length != 0) {\\n            // We make permit calls for each indicated call\\n            for (uint256 i = 0; i < data.length; i++) {\\n                data[i].tokenContract.permit(\\n                    msg.sender,\\n                    data[i].spender,\\n                    data[i].amount,\\n                    data[i].expiration,\\n                    data[i].v,\\n                    data[i].r,\\n                    data[i].s\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice This function sets approvals on all ERC20 tokens.\\n    /// @param tokens An array of token addresses which are to be approved\\n    /// @param spenders An array of contract addresses, most likely curve and\\n    /// balancer pool addresses\\n    /// @param amounts An array of amounts for which at each index, the spender\\n    /// from the same index in the spenders array is approved to use the token\\n    /// at the equivalent index of the token array on behalf of this contract\\n    function setApprovalsFor(\\n        address[] memory tokens,\\n        address[] memory spenders,\\n        uint256[] memory amounts\\n    ) external onlyAuthorized {\\n        require(tokens.length == spenders.length, \\\"Incorrect length\\\");\\n        require(tokens.length == amounts.length, \\\"Incorrect length\\\");\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            // Below call is to make sure that previous allowance shouldn't revert the transaction\\n            // It is just a safety pattern to use.\\n            IERC20(tokens[i]).safeApprove(spenders[i], uint256(0));\\n            IERC20(tokens[i]).safeApprove(spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice zapIn Exchanges a number of tokens which are used in a specific\\n    /// curve pool(s) for a principal token.\\n    /// @param _info See ZapInInfo struct\\n    /// @param _zap See ZapCurveLpIn struct - This is the \\\"main\\\" or parent zap\\n    /// which produces the lp token necessary to swap for the principal token\\n    /// @param _childZap See ZapCurveLpIn - This is used only in cases where\\n    /// the \\\"main\\\" or \\\"parent\\\" zap itself is composed of another curve lp token\\n    /// which can be accessed more readily via another swap via curve\\n    function zapIn(\\n        ZapInInfo memory _info,\\n        ZapCurveLpIn memory _zap,\\n        ZapCurveLpIn memory _childZap,\\n        PermitData[] memory _permitData\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        notFrozen\\n        preApproval(_permitData)\\n        returns (uint256 ptAmount)\\n    {\\n        // Instantiation of the context amount container which is used to track\\n        // amounts to be swapped in the final curve zap.\\n        uint256[3] memory ctx;\\n\\n        // Only execute the childZap if it is necessary\\n        if (_info.needsChildZap) {\\n            uint256 _amount = _zapCurveLpIn(\\n                _childZap,\\n                // The context array is unnecessary for the childZap and so we\\n                // can just put a dud array in place of it\\n                [uint256(0), uint256(0), uint256(0)]\\n            );\\n            // When a childZap happens, we add the amount of lpTokens gathered\\n            // from it to the relevant root index of the \\\"main\\\" zap\\n            ctx[_childZap.parentIdx] += _amount;\\n        }\\n\\n        // Swap an amount of \\\"root\\\" tokens on curve for the lp token that is\\n        // used to then purchase the principal token\\n        uint256 baseTokenAmount = _zapCurveLpIn(_zap, ctx);\\n\\n        // Purchase of \\\"ptAmount\\\" of principal tokens\\n        ptAmount = _balancer.swap(\\n            IVault.SingleSwap({\\n                poolId: _info.balancerPoolId,\\n                kind: IVault.SwapKind.GIVEN_IN,\\n                assetIn: IAsset(address(_zap.lpToken)),\\n                assetOut: _info.principalToken,\\n                amount: baseTokenAmount,\\n                userData: \\\"0x00\\\"\\n            }),\\n            IVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(_info.recipient),\\n                toInternalBalance: false\\n            }),\\n            _info.minPtAmount,\\n            _info.deadline\\n        );\\n    }\\n\\n    /// @notice This function will add liquidity to a target curve pool,\\n    /// returning some amount of LP tokens as a result. This is effectively\\n    /// swapping amounts of the dependent curve pool tokens for the LP token\\n    /// which will be used elsewhere\\n    /// @param _zap ZapCurveLpIn struct\\n    /// @param _ctx fixed length array used as an amounts container between the\\n    /// zap and childZap and also makes the transition from a dynamic-length\\n    /// array to a fixed-length which is required for the actual call to add\\n    /// liquidity to the curvePool\\n    function _zapCurveLpIn(ZapCurveLpIn memory _zap, uint256[3] memory _ctx)\\n        internal\\n        returns (uint256)\\n    {\\n        // All curvePools have either 2 or 3 \\\"root\\\" tokens\\n        require(\\n            _zap.amounts.length == 2 || _zap.amounts.length == 3,\\n            \\\"!(2 >= amounts.length <= 3)\\\"\\n        );\\n\\n        // Flag to detect if a zap to curve should be made\\n        bool shouldMakeZap = false;\\n        for (uint8 i = 0; i < _zap.amounts.length; i++) {\\n            bool zapIndexHasAmount = _zap.amounts[i] > 0;\\n            // If either the _ctx or zap amounts array has an index with an\\n            // amount > 0 we must zap curve\\n            shouldMakeZap = (zapIndexHasAmount || _ctx[i] > 0)\\n                ? true\\n                : shouldMakeZap;\\n\\n            // if there is no amount at this index we can escape the loop earlier\\n            if (!zapIndexHasAmount) continue;\\n\\n            if (_zap.roots[i] == _ETH_CONSTANT) {\\n                // Must check we do not unintentionally send ETH\\n                require(msg.value == _zap.amounts[i], \\\"incorrect value\\\");\\n\\n                // We build the context container with our amounts\\n                _ctx[i] += _zap.amounts[i];\\n            } else {\\n                uint256 beforeAmount = _getBalanceOf(IERC20(_zap.roots[i]));\\n\\n                // In the case of swapping an ERC20 \\\"root\\\" we must transfer them\\n                // to this contract in order to make the exchange\\n                IERC20(_zap.roots[i]).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _zap.amounts[i]\\n                );\\n\\n                // Due to rounding issues of some tokens, we use the\\n                // differential token balance of this contract\\n                _ctx[i] += _getBalanceOf(IERC20(_zap.roots[i])) - beforeAmount;\\n            }\\n        }\\n\\n        // When there is nothing to swap for on curve we short-circuit\\n        if (!shouldMakeZap) {\\n            return 0;\\n        }\\n        uint256 beforeLpTokenBalance = _getBalanceOf(_zap.lpToken);\\n\\n        if (_zap.amounts.length == 2) {\\n            ICurvePool(_zap.curvePool).add_liquidity{ value: msg.value }(\\n                [_ctx[0], _ctx[1]],\\n                _zap.minLpAmount\\n            );\\n        } else {\\n            ICurvePool(_zap.curvePool).add_liquidity{ value: msg.value }(\\n                [_ctx[0], _ctx[1], _ctx[2]],\\n                _zap.minLpAmount\\n            );\\n        }\\n\\n        return _getBalanceOf(_zap.lpToken) - beforeLpTokenBalance;\\n    }\\n\\n    /// @notice zapOut Allows users sell their principalTokens and subsequently\\n    /// swap the resultant curve LP token for one of its dependent \\\"root tokens\\\"\\n    /// @param _info See ZapOutInfo\\n    /// @param _zap See ZapCurveLpOut\\n    /// @param _childZap See ZapCurveLpOut\\n    function zapOut(\\n        ZapOutInfo memory _info,\\n        ZapCurveLpOut memory _zap,\\n        ZapCurveLpOut memory _childZap,\\n        PermitData[] memory _permitData\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        notFrozen\\n        preApproval(_permitData)\\n        returns (uint256 amount)\\n    {\\n        // First, principalTokenAmount of principal tokens transferred\\n        // from sender to this contract\\n        IERC20(address(_info.principalToken)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _info.principalTokenAmount\\n        );\\n\\n        // Swaps an amount of users principal tokens for baseTokens, which\\n        // are the lpToken specified in the zap argument\\n        uint256 baseTokenAmount = _balancer.swap(\\n            IVault.SingleSwap({\\n                poolId: _info.balancerPoolId,\\n                kind: IVault.SwapKind.GIVEN_IN,\\n                assetIn: _info.principalToken,\\n                assetOut: IAsset(address(_zap.lpToken)),\\n                amount: _info.principalTokenAmount,\\n                userData: \\\"0x00\\\"\\n            }),\\n            IVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(this)),\\n                toInternalBalance: false\\n            }),\\n            _info.minBaseTokenAmount,\\n            _info.deadline\\n        );\\n\\n        // Swap the baseTokens for a target root. In the case of where the\\n        // specified token the user wants is part of the childZap, the zap that\\n        // occurs is to swap the baseTokens to the lpToken specified in the\\n        // childZap struct. If there is no childZap, then the contract sends\\n        // the tokens to the recipient\\n        amount = _zapCurveLpOut(\\n            _zap,\\n            baseTokenAmount,\\n            _info.targetNeedsChildZap ? 0 : _info.minRootTokenAmount,\\n            _info.targetNeedsChildZap ? payable(address(this)) : _info.recipient\\n        );\\n\\n        // Execute the childZap is specified to do so\\n        if (_info.targetNeedsChildZap) {\\n            amount = _zapCurveLpOut(\\n                _childZap,\\n                amount,\\n                _info.minRootTokenAmount,\\n                _info.recipient\\n            );\\n        }\\n    }\\n\\n    /// @notice Swaps an amount of curve LP tokens for a single root token\\n    /// @param _zap See ZapCurveLpOut\\n    /// @param _lpTokenAmount This is the amount of lpTokens we are swapping\\n    /// with\\n    /// @param _minRootTokenAmount This is the minimum amount of \\\"root\\\" tokens\\n    /// the user expects to swap for. Used only in the final zap when executed\\n    /// under zapOut\\n    /// @param _recipient The address which the outputs tokens are to be sent\\n    /// to. When there is a second zap to occur, in the first zap the recipient\\n    /// should be this address\\n    function _zapCurveLpOut(\\n        ZapCurveLpOut memory _zap,\\n        uint256 _lpTokenAmount,\\n        uint256 _minRootTokenAmount,\\n        address payable _recipient\\n    ) internal returns (uint256 rootAmount) {\\n        // Flag to detect if we are sending to recipient\\n        bool transferToRecipient = address(this) != _recipient;\\n        uint256 beforeAmount = _zap.rootToken == _ETH_CONSTANT\\n            ? address(this).balance\\n            : _getBalanceOf(IERC20(_zap.rootToken));\\n\\n        if (_zap.curveRemoveLiqFnIsUint256) {\\n            ICurvePool(_zap.curvePool).remove_liquidity_one_coin(\\n                _lpTokenAmount,\\n                uint256(int256(_zap.rootTokenIdx)),\\n                _minRootTokenAmount\\n            );\\n        } else {\\n            ICurvePool(_zap.curvePool).remove_liquidity_one_coin(\\n                _lpTokenAmount,\\n                _zap.rootTokenIdx,\\n                _minRootTokenAmount\\n            );\\n        }\\n\\n        // ETH case\\n        if (_zap.rootToken == _ETH_CONSTANT) {\\n            // Get ETH balance of current contract\\n            rootAmount = address(this).balance - beforeAmount;\\n            // if address does not equal this contract we send funds to recipient\\n            if (transferToRecipient) {\\n                // Send rootAmount of ETH to the user-specified recipient\\n                _recipient.transfer(rootAmount);\\n            }\\n        } else {\\n            // Get balance of root token that was swapped\\n            rootAmount = _getBalanceOf(IERC20(_zap.rootToken)) - beforeAmount;\\n            // Send tokens to recipient\\n            if (transferToRecipient) {\\n                IERC20(_zap.rootToken).safeTransferFrom(\\n                    address(this),\\n                    _recipient,\\n                    rootAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _getBalanceOf(IERC20 _token) internal view returns (uint256) {\\n        return _token.balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"./IAsset.sol\\\";\\n\\n// This interface is used instead of importing one from balancer contracts to\\n// resolve version conflicts\\ninterface IVault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPool(bytes32 poolId)\\n        external\\n        view\\n        returns (address, PoolSpecialization);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n    function add_liquidity(uint256[2] memory amountCtx, uint256 minAmount)\\n        external\\n        payable;\\n\\n    function add_liquidity(uint256[3] memory amountCtx, uint256 minAmount)\\n        external\\n        payable;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 amountLp,\\n        uint256 idx,\\n        uint256 minAmount\\n    ) external payable;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 amount,\\n        int128 idx,\\n        uint256 minAmount\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAsset.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// This interface is used instead of importing one from balancer contracts to\\n// resolve version conflicts\\ninterface IAsset {\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 7500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"__balancer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setApprovalsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"setIsFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"balancerPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needsChildZap\",\"type\":\"bool\"}],\"internalType\":\"struct ZapSwapCurve.ZapInInfo\",\"name\":\"_info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"roots\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"parentIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapSwapCurve.ZapCurveLpIn\",\"name\":\"_zap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"roots\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"parentIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapSwapCurve.ZapCurveLpIn\",\"name\":\"_childZap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ZapSwapCurve.PermitData[]\",\"name\":\"_permitData\",\"type\":\"tuple[]\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ptAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"balancerPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IAsset\",\"name\":\"principalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principalTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRootTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"targetNeedsChildZap\",\"type\":\"bool\"}],\"internalType\":\"struct ZapSwapCurve.ZapOutInfo\",\"name\":\"_info\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"rootTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"curveRemoveLiqFnIsUint256\",\"type\":\"bool\"}],\"internalType\":\"struct ZapSwapCurve.ZapCurveLpOut\",\"name\":\"_zap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"rootTokenIdx\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"curveRemoveLiqFnIsUint256\",\"type\":\"bool\"}],\"internalType\":\"struct ZapSwapCurve.ZapCurveLpOut\",\"name\":\"_childZap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct ZapSwapCurve.PermitData[]\",\"name\":\"_permitData\",\"type\":\"tuple[]\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZapSwapCurve", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "7500", "ConstructorArguments": "000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}