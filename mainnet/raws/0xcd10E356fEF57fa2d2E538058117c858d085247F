{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Renderers/FlagWithPrideWordRenderer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../utils/Base64.sol';\\n\\nimport './IRenderer.sol';\\n\\ncontract FlagWithPrideWordRenderer is IRenderer {\\n    function description() external pure returns (string memory) {\\n        return\\n            'The original 8-stripe rainbow flag with the word PRIDE written on it in 20 languages, automatically changing every 1969 blocks.';\\n    }\\n\\n    function render(bytes32)\\n        external\\n        view\\n        override\\n        returns (string memory imageURI, string memory animationURI)\\n    {\\n        imageURI = Base64.toB64SVG(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1280 800\\\">'\\n                '<path fill=\\\"#8e008e\\\" d=\\\"M0 0h1280v800H0z\\\"/>'\\n                '<path fill=\\\"#400098\\\" d=\\\"M0 0h1280v700H0z\\\"/>'\\n                '<path fill=\\\"#00c0c0\\\" d=\\\"M0 0h1280v600H0z\\\"/>'\\n                '<path fill=\\\"#008e00\\\" d=\\\"M0 0h1280v500H0z\\\"/>'\\n                '<path fill=\\\"#ffff00\\\" d=\\\"M0 0h1280v400H0z\\\"/>'\\n                '<path fill=\\\"#ff8e00\\\" d=\\\"M0 0h1280v300H0z\\\"/>'\\n                '<path fill=\\\"#ff0000\\\" d=\\\"M0 0h1280v200H0z\\\"/>'\\n                '<path fill=\\\"#ff69b4\\\" d=\\\"M0 0h1280v100H0z\\\"/>'\\n                '<text x=\\\"50%\\\" y=\\\"50%\\\" text-anchor=\\\"middle\\\" dominant-baseline=\\\"central\\\" font-size=\\\"150px\\\"'\\n                ' font-weight=\\\"bold\\\" fill=\\\"#fff\\\" font-family=\\\"sans-serif\\\" style=\\\"text-shadow:2px 2px 7px #000;text-transform:uppercase;\\\">',\\n                _pickWord(),\\n                '</text></svg>'\\n            )\\n        );\\n\\n        animationURI = '';\\n    }\\n\\n    function _pickWord() internal view returns (string memory) {\\n        string[20] memory words = [\\n            'pride',\\n            unicode'fiert\u00e9',\\n            'stolz',\\n            'orgullo',\\n            unicode'q\u00fcrur',\\n            'orgoglio',\\n            'stolt',\\n            unicode'\u0e04\u0e27\u0e32\u0e21\u0e20\u0e32\u0e04\u0e20\u0e39\u0e21\u0e34\u0e43\u0e08',\\n            'lepnums',\\n            'duma',\\n            unicode'm\u00e2ndrie',\\n            'orgulho',\\n            'ponos',\\n            'stolthet',\\n            'sharaf',\\n            unicode'\u81ea\u8c6a',\\n            'fahari',\\n            'kareueus',\\n            'kburija',\\n            'ylpeys'\\n        ];\\n\\n        return words[(block.number / 1969) % words.length];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Renderers/IRenderer.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IRenderer {\\n    function description() external view returns (string memory);\\n\\n    function render(bytes32 seed)\\n        external\\n        view\\n        returns (string memory, string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\n\\n/// modified to add some utility functions\\nlibrary Base64 {\\n    string internal constant TABLE =\\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function toB64JSON(bytes memory toEncode)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    encode(toEncode)\\n                )\\n            );\\n    }\\n\\n    function toB64JSON(string memory toEncode)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return toB64JSON(bytes(toEncode));\\n    }\\n\\n    function toB64SVG(bytes memory toEncode)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked('data:image/svg+xml;base64,', encode(toEncode))\\n            );\\n    }\\n\\n    function toB64SVG(string memory toEncode)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return toB64SVG(bytes(toEncode));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlagWithPrideWordRenderer", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}