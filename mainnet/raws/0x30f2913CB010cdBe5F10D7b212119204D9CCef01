{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/clever/Furnace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IConvexCVXRewardPool.sol\\\";\\nimport \\\"../interfaces/IFurnace.sol\\\";\\nimport \\\"../interfaces/ICLeverToken.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\n\\n// solhint-disable reason-string\\n\\ncontract Furnace is OwnableUpgradeable, IFurnace {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event UpdateWhitelist(address indexed _whitelist, bool _status);\\n  event UpdateStakePercentage(uint256 _percentage);\\n  event UpdateStakeThreshold(uint256 _threshold);\\n  event UpdatePlatformFeePercentage(uint256 _feePercentage);\\n  event UpdateHarvestBountyPercentage(uint256 _percentage);\\n  event UpdatePlatform(address indexed _platform);\\n  event UpdateZap(address indexed _zap);\\n  event UpdateGovernor(address indexed _governor);\\n\\n  uint256 private constant E128 = 2**128;\\n  uint256 private constant FEE_DENOMINATOR = 1e9;\\n  uint256 private constant MAX_PLATFORM_FEE = 2e8; // 20%\\n  uint256 private constant MAX_HARVEST_BOUNTY = 1e8; // 10%\\n\\n  address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n  // The address of cvxCRV token.\\n  address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\\n  address private constant CVX_REWARD_POOL = 0xCF50b810E57Ac33B91dCF525C6ddd9881B139332;\\n\\n  /// @notice If the unrealised is not paid off,\\n  /// the realised token in n sequential distribute is\\n  ///    user_unrealised * (reward_1 / total_unrealised_1)\\n  ///  + user_unrealised * (reward_1 / total_unrealised_1) * (reward_2 / total_unrealised_2)\\n  ///  + ...\\n  /// the unrealised token in n sequential distribute is\\n  ///    user_unrealised * (total_unrealised_1 - reward_1) / total_unrealised_1 * (total_unrealised_2 - reward_2) / total_unrealised_2 * ...\\n  ///\\n  /// So we can maintain a variable `accUnrealisedFraction` which is a product of `(total_unrealised - reward) / total_unrealised`.\\n  /// And keep track of this variable on each deposit/withdraw/claim, the unrealised clevCVX of the user should be\\n  ///                                accUnrealisedFractionPaid\\n  ///                   unrealised * -------------------------\\n  ///                                  accUnrealisedFraction\\n  /// Also, the debt will paid off in some case, we record a global variable `lastPaidOffDistributeIndex` and an user\\n  /// specific variable `lastDistributeIndex` to check if the debt is paid off during `(lastDistributeIndex, distributeIndex]`.\\n  ///\\n  /// And to save the gas usage, an `uint128` is used to store `accUnrealisedFraction` and `accUnrealisedFractionPaid`.\\n  /// More specifically, it is in range [0, 2^128), means the real number `fraction / 2^128`. If the value is 0, it\\n  /// means the value of the faction is 1.\\n  struct UserInfo {\\n    // The total amount of clevCVX unrealised.\\n    uint128 unrealised;\\n    // The total amount of clevCVX realised.\\n    uint128 realised;\\n    // The checkpoint for global `accUnrealisedFraction`, multipled by 1e9.\\n    uint192 accUnrealisedFractionPaid;\\n    // The distribute index record when use interacted the contract.\\n    uint64 lastDistributeIndex;\\n  }\\n\\n  /// @dev The address of governor\\n  address public governor;\\n  /// @dev The address of clevCVX\\n  address public clevCVX;\\n  /// @dev The total amount of clevCVX unrealised.\\n  uint128 public totalUnrealised;\\n  /// @dev The total amount of clevCVX realised.\\n  uint128 public totalRealised;\\n  /// @dev The accumulated unrealised fraction, multipled by 2^128.\\n  uint128 public accUnrealisedFraction;\\n  /// @dev The distriubed index, will be increased each time the function `distribute` is called.\\n  uint64 public distributeIndex;\\n  /// @dev The distriubed index when all clevCVX is paied off.\\n  uint64 public lastPaidOffDistributeIndex;\\n  /// @dev Mapping from user address to user info.\\n  mapping(address => UserInfo) public userInfo;\\n  /// @dev Mapping from user address to whether it is whitelisted.\\n  mapping(address => bool) public isWhitelisted;\\n  /// @dev The percentage of free CVX should be staked in CVXRewardPool, multipled by 1e9.\\n  uint256 public stakePercentage;\\n  /// @dev The minimum amount of CVX in each stake.\\n  uint256 public stakeThreshold;\\n\\n  /// @dev The address of zap contract.\\n  address public zap;\\n  /// @dev The percentage of rewards to take for platform on harvest\\n  uint256 public platformFeePercentage;\\n  /// @dev The percentage of rewards to take for caller on harvest\\n  uint256 public harvestBountyPercentage;\\n  /// @dev The address of recipient of platform fee\\n  address public platform;\\n\\n  modifier onlyWhitelisted() {\\n    require(isWhitelisted[msg.sender], \\\"Furnace: only whitelisted\\\");\\n    _;\\n  }\\n\\n  modifier onlyGovernorOrOwner() {\\n    require(msg.sender == governor || msg.sender == owner(), \\\"Furnace: only governor or owner\\\");\\n    _;\\n  }\\n\\n  function initialize(\\n    address _governor,\\n    address _clevCVX,\\n    address _zap,\\n    address _platform,\\n    uint256 _platformFeePercentage,\\n    uint256 _harvestBountyPercentage\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n\\n    require(_governor != address(0), \\\"Furnace: zero governor address\\\");\\n    require(_clevCVX != address(0), \\\"Furnace: zero clevCVX address\\\");\\n    require(_zap != address(0), \\\"Furnace: zero zap address\\\");\\n    require(_platform != address(0), \\\"Furnace: zero platform address\\\");\\n    require(_platformFeePercentage <= MAX_PLATFORM_FEE, \\\"Furnace: fee too large\\\");\\n    require(_harvestBountyPercentage <= MAX_HARVEST_BOUNTY, \\\"Furnace: fee too large\\\");\\n\\n    governor = _governor;\\n    clevCVX = _clevCVX;\\n    zap = _zap;\\n    platform = _platform;\\n    platformFeePercentage = _platformFeePercentage;\\n    harvestBountyPercentage = _harvestBountyPercentage;\\n  }\\n\\n  /********************************** View Functions **********************************/\\n\\n  /// @dev Return the amount of clevCVX unrealised and realised of user.\\n  /// @param _account The address of user.\\n  /// @return unrealised The amount of clevCVX unrealised.\\n  /// @return realised The amount of clevCVX realised and can be claimed.\\n  function getUserInfo(address _account) external view override returns (uint256 unrealised, uint256 realised) {\\n    UserInfo memory _info = userInfo[_account];\\n    if (_info.lastDistributeIndex < lastPaidOffDistributeIndex) {\\n      // In this case, all unrealised is paid off since last operate.\\n      return (0, _info.unrealised + _info.realised);\\n    } else {\\n      // extra plus 1, make sure we round up in division\\n      uint128 _newUnrealised = _toU128(\\n        _muldiv128(_info.unrealised, accUnrealisedFraction, uint128(_info.accUnrealisedFractionPaid))\\n      ) + 1;\\n      if (_newUnrealised >= _info.unrealised) {\\n        _newUnrealised = _info.unrealised;\\n      }\\n      uint128 _newRealised = _info.unrealised - _newUnrealised + _info.realised; // never overflow here\\n      return (_newUnrealised, _newRealised);\\n    }\\n  }\\n\\n  /// @dev Return the total amount of free CVX in this contract, including staked in CVXRewardPool.\\n  /// @return The amount of CVX in this contract now.\\n  function totalCVXInPool() public view returns (uint256) {\\n    return\\n      IERC20Upgradeable(CVX).balanceOf(address(this)).add(\\n        IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this))\\n      );\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function deposit(uint256 _amount) external override {\\n    require(_amount > 0, \\\"Furnace: deposit zero clevCVX\\\");\\n\\n    // transfer token into contract\\n    IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    _deposit(msg.sender, _amount);\\n  }\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX for other user.\\n  /// @param _account The address of user you deposit for.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function depositFor(address _account, uint256 _amount) external override {\\n    require(_amount > 0, \\\"Furnace: deposit zero clevCVX\\\");\\n\\n    // transfer token into contract\\n    IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    _deposit(_account, _amount);\\n  }\\n\\n  /// @dev Withdraw unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  /// @param _amount The amount of clevCVX to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external override {\\n    require(_amount > 0, \\\"Furnace: withdraw zero CVX\\\");\\n\\n    _updateUserInfo(msg.sender);\\n    _withdraw(_recipient, _amount);\\n  }\\n\\n  /// @dev Withdraw all unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  function withdrawAll(address _recipient) external override {\\n    _updateUserInfo(msg.sender);\\n\\n    _withdraw(_recipient, userInfo[msg.sender].unrealised);\\n  }\\n\\n  /// @dev Claim all realised CVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the CVX.\\n  function claim(address _recipient) external override {\\n    _updateUserInfo(msg.sender);\\n\\n    _claim(_recipient);\\n  }\\n\\n  /// @dev Exit the contract, withdraw all unrealised clevCVX and realised CVX of the caller.\\n  /// @param _recipient The address of user who will recieve the clevCVX and CVX.\\n  function exit(address _recipient) external override {\\n    _updateUserInfo(msg.sender);\\n\\n    _withdraw(_recipient, userInfo[msg.sender].unrealised);\\n    _claim(_recipient);\\n  }\\n\\n  /// @dev Distribute CVX from `origin` to pay clevCVX debt.\\n  /// @param _origin The address of the user who will provide CVX.\\n  /// @param _amount The amount of CVX will be provided.\\n  function distribute(address _origin, uint256 _amount) external override onlyWhitelisted {\\n    require(_amount > 0, \\\"Furnace: distribute zero CVX\\\");\\n\\n    IERC20Upgradeable(CVX).safeTransferFrom(_origin, address(this), _amount);\\n\\n    _distribute(_origin, _amount);\\n  }\\n\\n  /// @dev Harvest the pending reward and convert to cvxCRV.\\n  /// @param _recipient - The address of account to receive harvest bounty.\\n  /// @param _minimumOut - The minimum amount of cvxCRV should get.\\n  /// @return the amount of CVX harvested.\\n  function harvest(address _recipient, uint256 _minimumOut) external returns (uint256) {\\n    // 1. harvest from CVXRewardPool\\n    IConvexCVXRewardPool(CVX_REWARD_POOL).getReward(false);\\n\\n    // 2. swap all reward to CVX (cvxCRV only currently)\\n    uint256 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this));\\n    if (_amount > 0) {\\n      IERC20Upgradeable(CVXCRV).safeTransfer(zap, _amount);\\n      _amount = IZap(zap).zap(CVXCRV, _amount, CVX, _minimumOut);\\n    }\\n\\n    emit Harvest(msg.sender, _amount);\\n\\n    if (_amount > 0) {\\n      uint256 _distributeAmount = _amount;\\n      // 3. take platform fee and harvest bounty\\n      uint256 _platformFee = platformFeePercentage;\\n      if (_platformFee > 0) {\\n        _platformFee = (_platformFee * _distributeAmount) / FEE_DENOMINATOR;\\n        IERC20Upgradeable(CVX).safeTransfer(platform, _platformFee);\\n        _distributeAmount = _distributeAmount - _platformFee; // never overflow here\\n      }\\n      uint256 _harvestBounty = harvestBountyPercentage;\\n      if (_harvestBounty > 0) {\\n        _harvestBounty = (_harvestBounty * _distributeAmount) / FEE_DENOMINATOR;\\n        _distributeAmount = _distributeAmount - _harvestBounty; // never overflow here\\n        IERC20Upgradeable(CVX).safeTransfer(_recipient, _harvestBounty);\\n      }\\n      // 4. distribute harvest CVX to pay clevCVX\\n      // @note: we may distribute all rest CVX to AladdinConvexLocker\\n      _distribute(address(this), _distributeAmount);\\n    }\\n    return _amount;\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @dev Update the status of a list of whitelisted accounts.\\n  /// @param _whitelists The address list of whitelisted accounts.\\n  /// @param _status The status to update.\\n  function updateWhitelists(address[] memory _whitelists, bool _status) external onlyOwner {\\n    for (uint256 i = 0; i < _whitelists.length; i++) {\\n      // solhint-disable-next-line reason-string\\n      require(_whitelists[i] != address(0), \\\"Furnace: zero whitelist address\\\");\\n      isWhitelisted[_whitelists[i]] = _status;\\n\\n      emit UpdateWhitelist(_whitelists[i], _status);\\n    }\\n  }\\n\\n  /// @dev Update the address of governor.\\n  /// @param _governor The address to be updated\\n  function updateGovernor(address _governor) external onlyGovernorOrOwner {\\n    require(_governor != address(0), \\\"Furnace: zero governor address\\\");\\n    governor = _governor;\\n\\n    emit UpdateGovernor(_governor);\\n  }\\n\\n  /// @dev Update stake percentage for CVX in this contract.\\n  /// @param _percentage The stake percentage to be updated, multipled by 1e9.\\n  function updateStakePercentage(uint256 _percentage) external onlyGovernorOrOwner {\\n    require(_percentage <= FEE_DENOMINATOR, \\\"Furnace: percentage too large\\\");\\n    stakePercentage = _percentage;\\n\\n    emit UpdateStakePercentage(_percentage);\\n  }\\n\\n  /// @dev Update stake threshold for CVX.\\n  /// @param _threshold The stake threshold to be updated.\\n  function updateStakeThreshold(uint256 _threshold) external onlyGovernorOrOwner {\\n    stakeThreshold = _threshold;\\n\\n    emit UpdateStakeThreshold(_threshold);\\n  }\\n\\n  /// @dev Update the platform fee percentage.\\n  /// @param _feePercentage The fee percentage to be updated, multipled by 1e9.\\n  function updatePlatformFeePercentage(uint256 _feePercentage) external onlyOwner {\\n    require(_feePercentage <= MAX_PLATFORM_FEE, \\\"AladdinCRV: fee too large\\\");\\n    platformFeePercentage = _feePercentage;\\n\\n    emit UpdatePlatformFeePercentage(_feePercentage);\\n  }\\n\\n  /// @dev Update the harvest bounty percentage.\\n  /// @param _percentage - The fee percentage to be updated, multipled by 1e9.\\n  function updateHarvestBountyPercentage(uint256 _percentage) external onlyOwner {\\n    require(_percentage <= MAX_HARVEST_BOUNTY, \\\"AladdinCRV: fee too large\\\");\\n    harvestBountyPercentage = _percentage;\\n\\n    emit UpdateHarvestBountyPercentage(_percentage);\\n  }\\n\\n  /// @dev Update the platform fee recipient\\n  /// @dev _platform The platform address to be updated.\\n  function updatePlatform(address _platform) external onlyOwner {\\n    require(_platform != address(0), \\\"AladdinCRV: zero platform address\\\");\\n    platform = _platform;\\n\\n    emit UpdatePlatform(_platform);\\n  }\\n\\n  /// @dev Update the zap contract\\n  /// @param _zap The zap contract to be updated.\\n  function updateZap(address _zap) external onlyGovernorOrOwner {\\n    require(_zap != address(0), \\\"Furnace: zero zap address\\\");\\n    zap = _zap;\\n\\n    emit UpdateZap(_zap);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev Internal function called when user interacts with the contract.\\n  /// @param _account The address of user to update.\\n  function _updateUserInfo(address _account) internal {\\n    UserInfo memory _info = userInfo[_account];\\n    uint128 _accUnrealisedFraction = accUnrealisedFraction;\\n    uint64 _distributeIndex = distributeIndex;\\n    if (_info.lastDistributeIndex < lastPaidOffDistributeIndex) {\\n      // In this case, all unrealised is paid off since last operate.\\n      userInfo[_account] = UserInfo({\\n        unrealised: 0,\\n        realised: _info.unrealised + _info.realised, // never overflow here\\n        accUnrealisedFractionPaid: 0,\\n        lastDistributeIndex: _distributeIndex\\n      });\\n    } else {\\n      // extra plus 1, make sure we round up in division\\n      uint128 _newUnrealised = _toU128(\\n        _muldiv128(_info.unrealised, _accUnrealisedFraction, uint128(_info.accUnrealisedFractionPaid))\\n      ) + 1;\\n      if (_newUnrealised >= _info.unrealised) {\\n        _newUnrealised = _info.unrealised;\\n      }\\n      uint128 _newRealised = _info.unrealised - _newUnrealised + _info.realised; // never overflow here\\n      userInfo[_account] = UserInfo({\\n        unrealised: _newUnrealised,\\n        realised: _newRealised,\\n        accUnrealisedFractionPaid: _accUnrealisedFraction,\\n        lastDistributeIndex: _distributeIndex\\n      });\\n    }\\n  }\\n\\n  /// @dev Internal function called by `deposit` and `depositFor`.\\n  ///      assume that clevCVX is already transfered into this contract.\\n  /// @param _account The address of the user.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function _deposit(address _account, uint256 _amount) internal {\\n    // 1. update user info\\n    _updateUserInfo(_account);\\n\\n    // 2. compute realised and unrelised\\n    uint256 _totalUnrealised = totalUnrealised;\\n    uint256 _totalRealised = totalRealised;\\n    uint256 _freeCVX = totalCVXInPool().sub(_totalRealised);\\n\\n    uint256 _newUnrealised;\\n    uint256 _newRealised;\\n    if (_freeCVX >= _amount) {\\n      // pay all the debt with CVX in contract directly.\\n      _newUnrealised = 0;\\n      _newRealised = _amount;\\n    } else {\\n      // pay part of the debt with CVX in contract directly\\n      // and part of the debt with future CVX distributed to the contract.\\n      _newUnrealised = _amount - _freeCVX;\\n      _newRealised = _freeCVX;\\n    }\\n\\n    // 3. update user and global state\\n    userInfo[_account].realised = _toU128(_newRealised.add(userInfo[_account].realised));\\n    userInfo[_account].unrealised = _toU128(_newUnrealised.add(userInfo[_account].unrealised));\\n\\n    totalRealised = _toU128(_totalRealised.add(_newRealised));\\n    totalUnrealised = _toU128(_totalUnrealised.add(_newUnrealised));\\n\\n    emit Deposit(_account, _amount);\\n  }\\n\\n  /// @dev Internal function called by `withdraw` and `withdrawAll`.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  /// @param _amount The amount of clevCVX to withdraw.\\n  function _withdraw(address _recipient, uint256 _amount) internal {\\n    require(_amount <= userInfo[msg.sender].unrealised, \\\"Furnace: clevCVX not enough\\\");\\n\\n    userInfo[msg.sender].unrealised = uint128(uint256(userInfo[msg.sender].unrealised) - _amount); // never overflow here\\n    totalUnrealised = uint128(uint256(totalUnrealised) - _amount); // never overflow here\\n\\n    IERC20Upgradeable(clevCVX).safeTransfer(_recipient, _amount);\\n\\n    emit Withdraw(msg.sender, _recipient, _amount);\\n  }\\n\\n  /// @dev Internal function called by `claim`.\\n  /// @param _recipient The address of user who will recieve the CVX.\\n  function _claim(address _recipient) internal {\\n    uint256 _amount = userInfo[msg.sender].realised;\\n    // should not overflow, but just in case, we use safe math.\\n    totalRealised = uint128(uint256(totalRealised).sub(_amount));\\n    userInfo[msg.sender].realised = 0;\\n\\n    uint256 _balanceInContract = IERC20Upgradeable(CVX).balanceOf(address(this));\\n    if (_balanceInContract < _amount) {\\n      // balance is not enough, with from reward pool\\n      IConvexCVXRewardPool(CVX_REWARD_POOL).withdraw(_amount - _balanceInContract, false);\\n    }\\n    IERC20Upgradeable(CVX).safeTransfer(_recipient, _amount);\\n    // burn realised clevCVX\\n    ICLeverToken(clevCVX).burn(_amount);\\n\\n    emit Claim(msg.sender, _recipient, _amount);\\n  }\\n\\n  /// @dev Internal function called by `distribute` and `harvest`.\\n  /// @param _origin The address of the user who will provide CVX.\\n  /// @param _amount The amount of CVX will be provided.\\n  function _distribute(address _origin, uint256 _amount) internal {\\n    distributeIndex += 1;\\n\\n    uint256 _totalUnrealised = totalUnrealised;\\n    uint256 _totalRealised = totalRealised;\\n    uint128 _accUnrealisedFraction = accUnrealisedFraction;\\n    // 1. distribute CVX rewards\\n    if (_amount >= _totalUnrealised) {\\n      // In this case, all unrealised clevCVX are paid off.\\n      totalUnrealised = 0;\\n      totalRealised = _toU128(_totalUnrealised + _totalRealised);\\n\\n      accUnrealisedFraction = 0;\\n      lastPaidOffDistributeIndex = distributeIndex;\\n    } else {\\n      totalUnrealised = uint128(_totalUnrealised - _amount);\\n      totalRealised = _toU128(_totalRealised + _amount);\\n\\n      uint128 _fraction = _toU128(((_totalUnrealised - _amount) * E128) / _totalUnrealised); // mul never overflow\\n      accUnrealisedFraction = _mul128(_accUnrealisedFraction, _fraction);\\n    }\\n\\n    // 2. stake extra CVX to cvxRewardPool\\n    uint256 _toStake = totalCVXInPool().mul(stakePercentage).div(FEE_DENOMINATOR);\\n    uint256 _balanceStaked = IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this));\\n    if (_balanceStaked < _toStake) {\\n      _toStake = _toStake - _balanceStaked;\\n      if (_toStake >= stakeThreshold) {\\n        IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, 0);\\n        IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, _toStake);\\n        IConvexCVXRewardPool(CVX_REWARD_POOL).stake(_toStake);\\n      }\\n    }\\n\\n    emit Distribute(_origin, _amount);\\n  }\\n\\n  /// @dev Convert uint256 value to uint128 value.\\n  function _toU128(uint256 _value) internal pure returns (uint128) {\\n    require(_value < 340282366920938463463374607431768211456, \\\"Furnace: overflow\\\");\\n    return uint128(_value);\\n  }\\n\\n  /// @dev Compute the value of (_a / 2^128) * (_b / 2^128) with precision 2^128.\\n  function _mul128(uint128 _a, uint128 _b) internal pure returns (uint128) {\\n    if (_a == 0) return _b;\\n    if (_b == 0) return _a;\\n    return uint128((uint256(_a) * uint256(_b)) / E128);\\n  }\\n\\n  /// @dev Compute the value of _a * (_b / 2^128) / (_c / 2^128).\\n  function _muldiv128(\\n    uint256 _a,\\n    uint128 _b,\\n    uint128 _c\\n  ) internal pure returns (uint256) {\\n    if (_b == 0) {\\n      if (_c == 0) return _a;\\n      else return _a / _c;\\n    } else {\\n      if (_c == 0) return _a.mul(_b) / E128;\\n      else return _a.mul(_b) / _c;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexCVXRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConvexCVXRewardPool {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function withdraw(uint256 _amount, bool claim) external;\\n\\n  function withdrawAll(bool claim) external;\\n\\n  function stake(uint256 _amount) external;\\n\\n  function stakeAll() external;\\n\\n  function stakeFor(address _for, uint256 _amount) external;\\n\\n  function getReward(\\n    address _account,\\n    bool _claimExtras,\\n    bool _stake\\n  ) external;\\n\\n  function getReward(bool _stake) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFurnace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IFurnace {\\n  event Deposit(address indexed _account, uint256 _amount);\\n  event Withdraw(address indexed _account, address _recipient, uint256 _amount);\\n  event Claim(address indexed _account, address _recipient, uint256 _amount);\\n  event Distribute(address indexed _origin, uint256 _amount);\\n  event Harvest(address indexed _caller, uint256 _amount);\\n\\n  /// @dev Return the amount of clevCVX unrealised and realised of user.\\n  /// @param _account The address of user.\\n  /// @return unrealised The amount of clevCVX unrealised.\\n  /// @return realised The amount of clevCVX realised and can be claimed.\\n  function getUserInfo(address _account) external view returns (uint256 unrealised, uint256 realised);\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX for other user.\\n  /// @param _account The address of user you deposit for.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function depositFor(address _account, uint256 _amount) external;\\n\\n  /// @dev Withdraw unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  /// @param _amount The amount of clevCVX to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n\\n  /// @dev Withdraw all unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  function withdrawAll(address _recipient) external;\\n\\n  /// @dev Claim all realised CVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the CVX.\\n  function claim(address _recipient) external;\\n\\n  /// @dev Exit the contract, withdraw all unrealised clevCVX and realised CVX of the caller.\\n  /// @param _recipient The address of user who will recieve the clevCVX and CVX.\\n  function exit(address _recipient) external;\\n\\n  /// @dev Distribute CVX from `origin` to pay clevCVX debt.\\n  /// @param _origin The address of the user who will provide CVX.\\n  /// @param _amount The amount of CVX will be provided.\\n  function distribute(address _origin, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICLeverToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICLeverToken is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function burn(uint256 _amount) external;\\n\\n  function burnFrom(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IZap {\\n  function zap(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"UpdateGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvestBountyPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateStakePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"UpdateStakeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"UpdateZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accUnrealisedFraction\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clevCVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unrealised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestBountyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clevCVX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestBountyPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPaidOffDistributeIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCVXInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRealised\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnrealised\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"updateGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateHarvestBountyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateStakePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"updateStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhitelists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"updateZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unrealised\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"realised\",\"type\":\"uint128\"},{\"internalType\":\"uint192\",\"name\":\"accUnrealisedFractionPaid\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"lastDistributeIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Furnace", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}